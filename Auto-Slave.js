/* WPlace AutoBOT — uso bajo tu responsabilidad. Compilado 2025-09-16T14:27:24.668Z */
/* eslint-env browser */
/* eslint-disable no-empty */
(() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };

  // src/core/logger.js
  var log;
  var init_logger = __esm({
    "src/core/logger.js"() {
      log = (...a) => console.log("[WPA-UI]", ...a);
    }
  });

  // src/locales/es.js
  var es;
  var init_es = __esm({
    "src/locales/es.js"() {
      es = {
        // Launcher
        launcher: {
          title: "WPlace AutoBOT",
          autoFarm: "\u{1F33E} Auto-Farm",
          autoImage: "\u{1F3A8} Auto-Image",
          autoGuard: "\u{1F6E1}\uFE0F Auto-Guard",
          selection: "Selecci\xF3n",
          user: "Usuario",
          charges: "Cargas",
          backend: "Backend",
          database: "Database",
          uptime: "Uptime",
          close: "Cerrar",
          launch: "Lanzar",
          loading: "Cargando\u2026",
          executing: "Ejecutando\u2026",
          downloading: "Descargando script\u2026",
          chooseBot: "Elige un bot y presiona Lanzar",
          readyToLaunch: "Listo para lanzar",
          loadError: "Error al cargar",
          loadErrorMsg: "No se pudo cargar el bot seleccionado. Revisa tu conexi\xF3n o int\xE9ntalo de nuevo.",
          checking: "\u{1F504} Verificando...",
          online: "\u{1F7E2} Online",
          offline: "\u{1F534} Offline",
          ok: "\u{1F7E2} OK",
          error: "\u{1F534} Error",
          unknown: "-",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Descargar Logs",
          clearLogs: "Limpiar Logs",
          closeLogs: "Cerrar",
          localExecution: "Ejecuci\xF3n local con acceso completo al sistema de tokens",
          botStarting: "Bot iniciando..."
        },
        // Image Module
        image: {
          title: "WPlace Auto-Image",
          initBot: "Iniciar Auto-BOT",
          uploadImage: "Subir Imagen",
          resizeImage: "Redimensionar Imagen",
          selectPosition: "Seleccionar Posici\xF3n",
          startPainting: "Iniciar Pintura",
          stopPainting: "Detener Pintura",
          saveProgress: "Guardar Progreso",
          loadProgress: "Cargar Progreso",
          checkingColors: "\u{1F50D} Verificando colores disponibles...",
          noColorsFound: "\u274C \xA1Abre la paleta de colores en el sitio e int\xE9ntalo de nuevo!",
          colorsFound: "\u2705 {count} colores disponibles encontrados",
          loadingImage: "\u{1F5BC}\uFE0F Cargando imagen...",
          imageLoaded: "\u2705 Imagen cargada con {count} p\xEDxeles v\xE1lidos",
          imageError: "\u274C Error al cargar la imagen",
          selectPositionAlert: "\xA1Pinta el primer p\xEDxel en la ubicaci\xF3n donde quieres que comience el arte!",
          waitingPosition: "\u{1F446} Esperando que pintes el p\xEDxel de referencia...",
          positionSet: "\u2705 \xA1Posici\xF3n establecida con \xE9xito!",
          positionTimeout: "\u274C Tiempo agotado para seleccionar posici\xF3n",
          positionDetected: "\u{1F3AF} Posici\xF3n detectada, procesando...",
          positionError: "\u274C Error detectando posici\xF3n, int\xE9ntalo de nuevo",
          startPaintingMsg: "\u{1F3A8} Iniciando pintura...",
          paintingProgress: "\u{1F9F1} Progreso: {painted}/{total} p\xEDxeles...",
          noCharges: "\u231B Sin cargas. Esperando {time}...",
          paintingStopped: "\u23F9\uFE0F Pintura detenida por el usuario",
          paintingComplete: "\u2705 \xA1Pintura completada! {count} p\xEDxeles pintados.",
          paintingError: "\u274C Error durante la pintura",
          missingRequirements: "\u274C Carga una imagen y selecciona una posici\xF3n primero",
          progress: "Progreso",
          userName: "Usuario",
          pixels: "P\xEDxeles",
          charges: "Cargas",
          estimatedTime: "Tiempo estimado",
          initMessage: "Haz clic en 'Iniciar Auto-BOT' para comenzar",
          waitingInit: "Esperando inicializaci\xF3n...",
          resizeSuccess: "\u2705 Imagen redimensionada a {width}x{height}",
          paintingPaused: "\u23F8\uFE0F Pintura pausada en la posici\xF3n X: {x}, Y: {y}",
          pixelsPerBatch: "P\xEDxeles por lote",
          batchSize: "Tama\xF1o del lote",
          nextBatchTime: "Siguiente lote en",
          useAllCharges: "Usar todas las cargas disponibles",
          showOverlay: "Mostrar overlay",
          maxCharges: "Cargas m\xE1ximas por lote",
          waitingForCharges: "\u23F3 Esperando cargas: {current}/{needed}",
          timeRemaining: "Tiempo restante",
          cooldownWaiting: "\u23F3 Esperando {time} para continuar...",
          progressSaved: "\u2705 Progreso guardado como {filename}",
          progressLoaded: "\u2705 Progreso cargado: {painted}/{total} p\xEDxeles pintados",
          progressLoadError: "\u274C Error al cargar progreso: {error}",
          progressSaveError: "\u274C Error al guardar progreso: {error}",
          confirmSaveProgress: "\xBFDeseas guardar el progreso actual antes de detener?",
          saveProgressTitle: "Guardar Progreso",
          discardProgress: "Descartar",
          cancel: "Cancelar",
          minimize: "Minimizar",
          width: "Ancho",
          height: "Alto",
          keepAspect: "Mantener proporci\xF3n",
          apply: "Aplicar",
          overlayOn: "Overlay: ON",
          overlayOff: "Overlay: OFF",
          passCompleted: "\u2705 Pasada completada: {painted} p\xEDxeles pintados | Progreso: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 Esperando regeneraci\xF3n de cargas: {current}/{needed} - Tiempo: {time}",
          waitingChargesCountdown: "\u23F3 Esperando cargas: {current}/{needed} - Quedan: {time}",
          autoInitializing: "\u{1F916} Inicializando autom\xE1ticamente...",
          autoInitSuccess: "\u2705 Bot iniciado autom\xE1ticamente",
          autoInitFailed: "\u26A0\uFE0F No se pudo iniciar autom\xE1ticamente. Usa el bot\xF3n manual.",
          paletteDetected: "\u{1F3A8} Paleta de colores detectada",
          paletteNotFound: "\u{1F50D} Buscando paleta de colores...",
          clickingPaintButton: "\u{1F446} Haciendo clic en el bot\xF3n Paint...",
          paintButtonNotFound: "\u274C Bot\xF3n Paint no encontrado",
          manualInitRequired: "\u{1F527} Inicio manual requerido",
          retryAttempt: "\u{1F504} Reintento {attempt}/{maxAttempts} en {delay}s...",
          retryError: "\u{1F4A5} Error en intento {attempt}/{maxAttempts}, reintentando en {delay}s...",
          retryFailed: "\u274C Fall\xF3 despu\xE9s de {maxAttempts} intentos. Continuando con siguiente lote...",
          networkError: "\u{1F310} Error de red. Reintentando...",
          serverError: "\u{1F525} Error del servidor. Reintentando...",
          timeoutError: "\u23F0 Timeout del servidor. Reintentando...",
          // Nuevos textos v2.0 
          paintPattern: "\u{1F4D0} Patr\xF3n de pintado",
          patternLinearStart: "Lineal (Inicio)",
          patternLinearEnd: "Lineal (Final)",
          patternRandom: "Aleatorio",
          patternCenterOut: "Centro hacia afuera",
          patternCornersFirst: "Esquinas primero",
          patternSpiral: "Espiral",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Descargar Logs",
          clearLogs: "Limpiar Logs",
          closeLogs: "Cerrar",
          // Nuevas funcionalidades
          userInfo: "Informaci\xF3n del Usuario",
          imageProgress: "Progreso de la Imagen",
          availableColors: "Colores Disponibles",
          noImageLoaded: "No hay imagen cargada",
          cooldown: "Tiempo de espera",
          totalColors: "Total de Colores",
          colorPalette: "Paleta de Colores",
          showAllColors: "Mostrar Todos los Colores (incluyendo no disponibles)",
          selectAllColors: "Seleccionar Todos",
          unselectAllColors: "Deseleccionar Todos",
          noAvailable: "No disponible",
          colorSelected: "Color seleccionado",
          statsUpdated: "\u2705 Estad\xEDsticas actualizadas: {count} colores disponibles"
        },
        // Farm Module (por implementar)
        farm: {
          title: "WPlace Farm Bot",
          start: "Iniciar",
          stop: "Detener",
          stopped: "Bot detenido",
          calibrate: "Calibrar",
          paintOnce: "Una vez",
          checkingStatus: "Verificando estado...",
          configuration: "Configuraci\xF3n",
          delay: "Delay (ms)",
          pixelsPerBatch: "P\xEDxeles/lote",
          minCharges: "Cargas m\xEDn",
          colorMode: "Modo color",
          random: "Aleatorio",
          fixed: "Fijo",
          range: "Rango",
          fixedColor: "Color fijo",
          advanced: "Avanzado",
          tileX: "Tile X",
          tileY: "Tile Y",
          customPalette: "Paleta personalizada",
          paletteExample: "ej: #FF0000,#00FF00,#0000FF",
          capture: "Capturar",
          painted: "Pintados",
          charges: "Cargas",
          retries: "Fallos",
          position: "Posici\xF3n",
          tile: "Tile",
          configSaved: "Configuraci\xF3n guardada",
          configLoaded: "Configuraci\xF3n cargada",
          configReset: "Configuraci\xF3n reiniciada",
          captureInstructions: "Pinta un p\xEDxel manualmente para capturar coordenadas...",
          backendOnline: "Backend Online",
          backendOffline: "Backend Offline",
          startingBot: "Iniciando bot...",
          stoppingBot: "Deteniendo bot...",
          calibrating: "Calibrando...",
          alreadyRunning: "Auto-Farm ya est\xE1 corriendo.",
          imageRunningWarning: "Auto-Image est\xE1 ejecut\xE1ndose. Ci\xE9rralo antes de iniciar Auto-Farm.",
          selectPosition: "Seleccionar Zona",
          selectPositionAlert: "\u{1F3AF} Pinta un p\xEDxel en una zona DESPOBLADA del mapa para establecer el \xE1rea de farming",
          waitingPosition: "\u{1F446} Esperando que pintes el p\xEDxel de referencia...",
          positionSet: "\u2705 \xA1Zona establecida!",
          positionTimeout: "\u274C Tiempo agotado para seleccionar zona",
          missingPosition: "\u274C Selecciona una zona primero usando 'Seleccionar Zona'",
          farmRadius: "Radio farm",
          positionInfo: "Zona actual",
          farmingInRadius: "\u{1F33E} Farming en radio {radius}px desde ({x},{y})",
          selectEmptyArea: "\u26A0\uFE0F IMPORTANTE: Selecciona una zona DESPOBLADA para evitar conflictos",
          noPosition: "Sin zona",
          currentZone: "Zona: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} Selecciona una zona primero. Pinta un p\xEDxel en el mapa para establecer la zona de farming",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Descargar Logs",
          clearLogs: "Limpiar Logs",
          closeLogs: "Cerrar",
          // Claves adicionales usadas en src/farm/ui.js
          ready: "Listo",
          once: "Una vez",
          recapture: "Re-capturar",
          // Secciones anidadas para estadísticas y configuración
          stats: {
            painted: "Pintados",
            charges: "Cargas",
            droplets: "Gotas",
            user: "Usuario",
            retries: "Reintentos"
          },
          config: {
            minCharges: "Cargas m\xEDnimas",
            delay: "Espera (seg)",
            pixelsPerBatch: "P\xEDxeles por lote"
          },
          color: {
            fixed: "Fijo",
            range: "Rango",
            random: "Aleatorio",
            selected: "Color seleccionado",
            min: "M\xEDn",
            max: "M\xE1x"
          },
          // Auto-compra y compras manuales
          autobuy: {
            title: "Auto-compra (+5 cargas)",
            hint: "Se activar\xE1 autom\xE1ticamente cuando tengas \u2265 500 gotas"
          },
          buyCharges: "Comprar +5 cargas",
          buying: "Comprando...",
          buyOk: "Compra realizada. Actualiza sesi\xF3n.",
          buyFail: "No se pudo comprar"
        },
        // Common/Shared
        common: {
          yes: "S\xED",
          no: "No",
          ok: "Aceptar",
          cancel: "Cancelar",
          close: "Cerrar",
          save: "Guardar",
          load: "Cargar",
          delete: "Eliminar",
          edit: "Editar",
          start: "Iniciar",
          stop: "Detener",
          pause: "Pausar",
          resume: "Reanudar",
          reset: "Reiniciar",
          settings: "Configuraci\xF3n",
          help: "Ayuda",
          about: "Acerca de",
          language: "Idioma",
          loading: "Cargando...",
          error: "Error",
          success: "\xC9xito",
          warning: "Advertencia",
          info: "Informaci\xF3n",
          languageChanged: "Idioma cambiado a {language}"
        },
        // Guard Module
        guard: {
          title: "WPlace Auto-Guard",
          initBot: "Inicializar Guard-BOT",
          selectArea: "Seleccionar \xC1rea",
          save: "Guardar",
          captureArea: "Capturar \xC1rea",
          startProtection: "Iniciar",
          stopProtection: "Detener",
          protectedPixels: "P\xEDxeles Protegidos",
          upperLeft: "Esquina Superior Izquierda",
          lowerRight: "Esquina Inferior Derecha",
          detectedChanges: "Cambios Detectados",
          repairedPixels: "P\xEDxeles Reparados",
          charges: "Cargas",
          waitingInit: "Esperando inicializaci\xF3n...",
          checkingColors: "\u{1F3A8} Verificando colores disponibles...",
          noColorsFound: "\u274C No se encontraron colores. Abre la paleta de colores en el sitio.",
          colorsFound: "\u2705 {count} colores disponibles encontrados",
          initSuccess: "\u2705 Guard-BOT inicializado correctamente",
          initError: "\u274C Error inicializando Guard-BOT",
          invalidCoords: "\u274C Coordenadas inv\xE1lidas",
          invalidArea: "\u274C El \xE1rea debe tener esquina superior izquierda menor que inferior derecha",
          areaTooLarge: "\u274C \xC1rea demasiado grande: {size} p\xEDxeles (m\xE1ximo: {max})",
          capturingArea: "\u{1F4F8} Capturando \xE1rea...",
          areaCaptured: "\u2705 \xC1rea capturada: {count} p\xEDxeles",
          captureError: "\u274C Error capturando \xE1rea: {error}",
          captureFirst: "\u274C Primero captura un \xE1rea",
          noChanges: "\u2705 \xC1rea - sin cambios detectados",
          changesDetected: "\u{1F6A8} {count} cambios detectados en el \xE1rea",
          repairing: "\u{1F6E0}\uFE0F Reparando {count} p\xEDxeles alterados...",
          repairedSuccess: "\u2705 Reparados {count} p\xEDxeles correctamente",
          repairError: "\u274C Error reparando p\xEDxeles: {error}",
          noCharges: "\u26A0\uFE0F Sin cargas suficientes para reparar cambios",
          checkingChanges: "\u{1F50D} Verificando cambios en \xE1rea...",
          errorChecking: "\u274C Error verificando cambios: {error}",
          guardActive: "\u{1F6E1}\uFE0F Guardi\xE1n activo - \xE1rea monitoreada",
          lastCheck: "\xDAltima verificaci\xF3n: {time}",
          nextCheck: "Pr\xF3xima verificaci\xF3n en: {time}s",
          autoInitializing: "\u{1F916} Inicializando autom\xE1ticamente...",
          autoInitSuccess: "\u2705 Guard-BOT iniciado autom\xE1ticamente",
          autoInitFailed: "\u26A0\uFE0F No se pudo iniciar autom\xE1ticamente. Usa el bot\xF3n manual.",
          manualInitRequired: "\u{1F527} Inicio manual requerido",
          paletteDetected: "\u{1F3A8} Paleta de colores detectada",
          paletteNotFound: "\u{1F50D} Buscando paleta de colores...",
          clickingPaintButton: "\u{1F446} Haciendo clic en el bot\xF3n Paint...",
          paintButtonNotFound: "\u274C Bot\xF3n Paint no encontrado",
          protectionStopped: "\u23F9\uFE0F Protecci\xF3n detenida",
          selectUpperLeft: "\u{1F3AF} Pinta un p\xEDxel en la esquina SUPERIOR IZQUIERDA del \xE1rea a monitorear",
          selectLowerRight: "\u{1F3AF} Ahora pinta un p\xEDxel en la esquina INFERIOR DERECHA del \xE1rea",
          waitingUpperLeft: "\u{1F446} Esperando selecci\xF3n de esquina superior izquierda...",
          waitingLowerRight: "\u{1F446} Esperando selecci\xF3n de esquina inferior derecha...",
          upperLeftCaptured: "\u2705 Esquina superior izquierda capturada: ({x}, {y})",
          lowerRightCaptured: "\u2705 Esquina inferior derecha capturada: ({x}, {y})",
          selectionTimeout: "\u274C Tiempo agotado para selecci\xF3n",
          selectionError: "\u274C Error en selecci\xF3n, int\xE9ntalo de nuevo",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Descargar Logs",
          clearLogs: "Limpiar Logs",
          closeLogs: "Cerrar",
          // Analysis Window
          analysisTitle: "An\xE1lisis de Diferencias - JSON vs Canvas Actual",
          correctPixels: "P\xEDxeles Correctos",
          incorrectPixels: "P\xEDxeles Incorrectos",
          missingPixels: "P\xEDxeles Faltantes",
          showCorrect: "Mostrar Correctos",
          showIncorrect: "Mostrar Incorrectos",
          showMissing: "Mostrar Faltantes",
          autoRefresh: "Auto-refresco",
          zoomAdjusted: "Zoom ajustado autom\xE1ticamente a",
          autoRefreshEnabled: "Auto-refresco activado cada",
          autoRefreshDisabled: "Auto-refresco desactivado",
          autoRefreshIntervalUpdated: "Intervalo de auto-refresco actualizado a",
          visualizationUpdated: "Visualizaci\xF3n actualizada",
          // Config Window
          configTitle: "Configuraci\xF3n del Guard",
          protectionPatterns: "Patrones de Protecci\xF3n",
          preferSpecificColor: "Priorizar color espec\xEDfico",
          excludeSpecificColors: "No reparar colores espec\xEDficos",
          loadManagement: "Gesti\xF3n de Cargas",
          minLoadsToWait: "M\xEDnimo de cargas:",
          pixelsPerBatch: "P\xEDxeles por lote",
          spendAllPixelsOnStart: "Gastar todos los p\xEDxeles al iniciar",
          waitTimes: "Tiempos de Espera",
          useRandomTimes: "Usar tiempos aleatorios entre lotes",
          minTime: "Tiempo m\xEDnimo (s)",
          maxTime: "Tiempo m\xE1ximo (s)"
        },
        // Slave Module
        slave: {
          title: "WPlace Slave",
          masterServer: "Servidor Maestro",
          ipAddress: "Direcci\xF3n IP",
          connect: "Conectar",
          disconnect: "Desconectar",
          status: "Estado",
          slaveId: "ID Slave",
          mode: "Modo",
          running: "Ejecutando",
          idle: "Inactivo",
          connected: "Conectado",
          connecting: "Conectando...",
          disconnected: "Desconectado",
          error: "Error",
          close: "Cerrar",
          telemetry: "Telemetr\xEDa",
          repairedPixels: "P\xEDxeles Reparados",
          missingPixels: "P\xEDxeles Faltantes",
          absentPixels: "P\xEDxeles Ausentes",
          remainingCharges: "Cargas Restantes",
          connectionError: "Error de conexi\xF3n. Verifica la URL y que el servidor est\xE9 ejecut\xE1ndose.",
          invalidUrl: "Por favor ingresa una URL v\xE1lida",
          slaveRunning: "Slave ya est\xE1 ejecut\xE1ndose.",
          slaveInitialized: "Slave inicializado correctamente",
          slaveError: "Error inicializando Slave",
          masterConnected: "Conectado al servidor maestro",
          masterDisconnected: "Desconectado del servidor maestro",
          reconnecting: "Reintentando conexi\xF3n",
          maxReconnectAttempts: "M\xE1ximo de intentos de reconexi\xF3n alcanzado",
          modeSet: "Modo configurado",
          projectLoaded: "Configuraci\xF3n del proyecto cargada",
          botStarted: "Bot iniciado",
          botStopped: "Bot detenido",
          botPaused: "Bot pausado"
        }
      };
    }
  });

  // src/locales/en.js
  var en;
  var init_en = __esm({
    "src/locales/en.js"() {
      en = {
        // Launcher
        launcher: {
          title: "WPlace AutoBOT",
          autoFarm: "\u{1F33E} Auto-Farm",
          autoImage: "\u{1F3A8} Auto-Image",
          autoGuard: "\u{1F6E1}\uFE0F Auto-Guard",
          selection: "Selection",
          user: "User",
          charges: "Charges",
          backend: "Backend",
          database: "Database",
          uptime: "Uptime",
          close: "Close",
          launch: "Launch",
          loading: "Loading\u2026",
          executing: "Executing\u2026",
          downloading: "Downloading script\u2026",
          chooseBot: "Choose a bot and press Launch",
          readyToLaunch: "Ready to launch",
          loadError: "Load error",
          loadErrorMsg: "Could not load the selected bot. Check your connection or try again.",
          checking: "\u{1F504} Checking...",
          online: "\u{1F7E2} Online",
          offline: "\u{1F534} Offline",
          ok: "\u{1F7E2} OK",
          error: "\u{1F534} Error",
          unknown: "-",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Download Logs",
          clearLogs: "Clear Logs",
          closeLogs: "Close",
          localExecution: "Local execution with full access to token system",
          botStarting: "Bot starting..."
        },
        // Image Module
        image: {
          title: "WPlace Auto-Image",
          initBot: "Initialize Auto-BOT",
          uploadImage: "Upload Image",
          resizeImage: "Resize Image",
          selectPosition: "Select Position",
          startPainting: "Start Painting",
          stopPainting: "Stop Painting",
          saveProgress: "Save Progress",
          loadProgress: "Load Progress",
          checkingColors: "\u{1F50D} Checking available colors...",
          noColorsFound: "\u274C Open the color palette on the site and try again!",
          colorsFound: "\u2705 Found {count} available colors",
          loadingImage: "\u{1F5BC}\uFE0F Loading image...",
          imageLoaded: "\u2705 Image loaded with {count} valid pixels",
          imageError: "\u274C Error loading image",
          selectPositionAlert: "Paint the first pixel at the location where you want the art to start!",
          waitingPosition: "\u{1F446} Waiting for you to paint the reference pixel...",
          positionSet: "\u2705 Position set successfully!",
          positionTimeout: "\u274C Timeout for position selection",
          positionDetected: "\u{1F3AF} Position detected, processing...",
          positionError: "\u274C Error detecting position, please try again",
          startPaintingMsg: "\u{1F3A8} Starting painting...",
          paintingProgress: "\u{1F9F1} Progress: {painted}/{total} pixels...",
          noCharges: "\u231B No charges. Waiting {time}...",
          paintingStopped: "\u23F9\uFE0F Painting stopped by user",
          paintingComplete: "\u2705 Painting completed! {count} pixels painted.",
          paintingError: "\u274C Error during painting",
          missingRequirements: "\u274C Load an image and select a position first",
          progress: "Progress",
          userName: "User",
          pixels: "Pixels",
          charges: "Charges",
          estimatedTime: "Estimated time",
          initMessage: "Click 'Initialize Auto-BOT' to begin",
          waitingInit: "Waiting for initialization...",
          resizeSuccess: "\u2705 Image resized to {width}x{height}",
          paintingPaused: "\u23F8\uFE0F Painting paused at position X: {x}, Y: {y}",
          pixelsPerBatch: "Pixels per batch",
          batchSize: "Batch size",
          nextBatchTime: "Next batch in",
          useAllCharges: "Use all available charges",
          showOverlay: "Show overlay",
          maxCharges: "Max charges per batch",
          waitingForCharges: "\u23F3 Waiting for charges: {current}/{needed}",
          timeRemaining: "Time remaining",
          cooldownWaiting: "\u23F3 Waiting {time} to continue...",
          progressSaved: "\u2705 Progress saved as {filename}",
          progressLoaded: "\u2705 Progress loaded: {painted}/{total} pixels painted",
          progressLoadError: "\u274C Error loading progress: {error}",
          progressSaveError: "\u274C Error saving progress: {error}",
          confirmSaveProgress: "Do you want to save the current progress before stopping?",
          saveProgressTitle: "Save Progress",
          discardProgress: "Discard",
          cancel: "Cancel",
          minimize: "Minimize",
          width: "Width",
          height: "Height",
          keepAspect: "Keep aspect ratio",
          apply: "Apply",
          overlayOn: "Overlay: ON",
          overlayOff: "Overlay: OFF",
          passCompleted: "\u2705 Pass completed: {painted} pixels painted | Progress: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 Waiting for charge regeneration: {current}/{needed} - Time: {time}",
          waitingChargesCountdown: "\u23F3 Waiting for charges: {current}/{needed} - Remaining: {time}",
          autoInitializing: "\u{1F916} Auto-initializing...",
          autoInitSuccess: "\u2705 Bot auto-started successfully",
          autoInitFailed: "\u26A0\uFE0F Could not auto-start. Use manual button.",
          paletteDetected: "\u{1F3A8} Color palette detected",
          paletteNotFound: "\u{1F50D} Searching for color palette...",
          clickingPaintButton: "\u{1F446} Clicking Paint button...",
          paintButtonNotFound: "\u274C Paint button not found",
          manualInitRequired: "\u{1F527} Manual initialization required",
          retryAttempt: "\u{1F504} Retry {attempt}/{maxAttempts} in {delay}s...",
          retryError: "\u{1F4A5} Error in attempt {attempt}/{maxAttempts}, retrying in {delay}s...",
          retryFailed: "\u274C Failed after {maxAttempts} attempts. Continuing with next batch...",
          networkError: "\u{1F310} Network error. Retrying...",
          serverError: "\u{1F525} Server error. Retrying...",
          timeoutError: "\u23F0 Server timeout, retrying...",
          // v2.0 - Protection and Patterns
          protectionEnabled: "Protection enabled",
          protectionDisabled: "Protection disabled",
          paintPattern: "Paint pattern",
          patternLinearStart: "Linear (Start)",
          patternLinearEnd: "Linear (End)",
          patternRandom: "Random",
          patternCenterOut: "Center outward",
          patternCornersFirst: "Corners first",
          patternSpiral: "Spiral",
          solid: "Solid",
          stripes: "Stripes",
          checkerboard: "Checkerboard",
          gradient: "Gradient",
          dots: "Dots",
          waves: "Waves",
          spiral: "Spiral",
          mosaic: "Mosaic",
          bricks: "Bricks",
          zigzag: "Zigzag",
          protectingDrawing: "Protecting drawing...",
          changesDetected: "\u{1F6A8} {count} changes detected in drawing",
          repairing: "\u{1F527} Repairing {count} altered pixels...",
          repairCompleted: "\u2705 Repair completed: {count} pixels",
          noChargesForRepair: "\u26A1 No charges for repair, waiting...",
          protectionPriority: "\u{1F6E1}\uFE0F Protection priority activated",
          patternApplied: "Pattern applied",
          customPattern: "Custom pattern",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Download Logs",
          clearLogs: "Clear Logs",
          closeLogs: "Close"
        },
        // Farm module (to be implemented)
        farm: {
          title: "WPlace Farm Bot",
          start: "Start",
          stop: "Stop",
          stopped: "Bot stopped",
          calibrate: "Calibrate",
          paintOnce: "Once",
          checkingStatus: "Checking status...",
          configuration: "Configuration",
          delay: "Delay (ms)",
          pixelsPerBatch: "Pixels/batch",
          minCharges: "Min charges",
          colorMode: "Color mode",
          random: "Random",
          fixed: "Fixed",
          range: "Range",
          fixedColor: "Fixed color",
          advanced: "Advanced",
          tileX: "Tile X",
          tileY: "Tile Y",
          customPalette: "Custom palette",
          paletteExample: "e.g: #FF0000,#00FF00,#0000FF",
          capture: "Capture",
          painted: "Painted",
          charges: "Charges",
          retries: "Retries",
          tile: "Tile",
          configSaved: "Configuration saved",
          configLoaded: "Configuration loaded",
          configReset: "Configuration reset",
          captureInstructions: "Paint a pixel manually to capture coordinates...",
          backendOnline: "Backend Online",
          backendOffline: "Backend Offline",
          startingBot: "Starting bot...",
          stoppingBot: "Stopping bot...",
          calibrating: "Calibrating...",
          alreadyRunning: "Auto-Farm is already running.",
          imageRunningWarning: "Auto-Image is running. Close it before starting Auto-Farm.",
          selectPosition: "Select Area",
          selectPositionAlert: "\u{1F3AF} Paint a pixel in an EMPTY area of the map to set the farming zone",
          waitingPosition: "\u{1F446} Waiting for you to paint the reference pixel...",
          positionSet: "\u2705 Area set! Radius: 500px",
          positionTimeout: "\u274C Timeout for area selection",
          missingPosition: "\u274C Select an area first using 'Select Area'",
          farmRadius: "Farm radius",
          positionInfo: "Current area",
          farmingInRadius: "\u{1F33E} Farming in {radius}px radius from ({x},{y})",
          selectEmptyArea: "\u26A0\uFE0F IMPORTANT: Select an EMPTY area to avoid conflicts",
          noPosition: "No area",
          currentZone: "Zone: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} Select an area first. Paint a pixel on the map to set the farming zone",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Download Logs",
          clearLogs: "Clear Logs",
          closeLogs: "Close"
        },
        // Common/Shared
        common: {
          yes: "Yes",
          no: "No",
          ok: "OK",
          cancel: "Cancel",
          close: "Close",
          save: "Save",
          load: "Load",
          delete: "Delete",
          edit: "Edit",
          start: "Start",
          stop: "Stop",
          pause: "Pause",
          resume: "Resume",
          reset: "Reset",
          settings: "Settings",
          help: "Help",
          about: "About",
          language: "Language",
          loading: "Loading...",
          error: "Error",
          success: "Success",
          warning: "Warning",
          info: "Information",
          languageChanged: "Language changed to {language}"
        },
        // Guard Module
        guard: {
          title: "WPlace Auto-Guard",
          initBot: "Initialize Guard-BOT",
          selectArea: "Select Area",
          captureArea: "Capture Area",
          startProtection: "Start Protection",
          stopProtection: "Stop Protection",
          upperLeft: "Upper Left Corner",
          lowerRight: "Lower Right Corner",
          protectedPixels: "Protected Pixels",
          detectedChanges: "Detected Changes",
          repairedPixels: "Repaired Pixels",
          charges: "Charges",
          waitingInit: "Waiting for initialization...",
          checkingColors: "\u{1F3A8} Checking available colors...",
          noColorsFound: "\u274C No colors found. Open the color palette on the site.",
          colorsFound: "\u2705 Found {count} available colors",
          initSuccess: "\u2705 Guard-BOT initialized successfully",
          initError: "\u274C Error initializing Guard-BOT",
          invalidCoords: "\u274C Invalid coordinates",
          invalidArea: "\u274C Area must have upper left corner less than lower right corner",
          areaTooLarge: "\u274C Area too large: {size} pixels (maximum: {max})",
          capturingArea: "\u{1F4F8} Capturing protection area...",
          areaCaptured: "\u2705 Area captured: {count} pixels under protection",
          captureError: "\u274C Error capturing area: {error}",
          captureFirst: "\u274C First capture a protection area",
          protectionStarted: "\u{1F6E1}\uFE0F Protection started - monitoring area",
          protectionStopped: "\u23F9\uFE0F Protection stopped",
          noChanges: "\u2705 Protected area - no changes detected",
          changesDetected: "\u{1F6A8} {count} changes detected in protected area",
          repairing: "\u{1F6E0}\uFE0F Repairing {count} altered pixels...",
          repairedSuccess: "\u2705 Successfully repaired {count} pixels",
          repairError: "\u274C Error repairing pixels: {error}",
          noCharges: "\u26A0\uFE0F Insufficient charges to repair changes",
          checkingChanges: "\u{1F50D} Checking changes in protected area...",
          errorChecking: "\u274C Error checking changes: {error}",
          guardActive: "\u{1F6E1}\uFE0F Guardian active - area under protection",
          lastCheck: "Last check: {time}",
          nextCheck: "Next check in: {time}s",
          autoInitializing: "\u{1F916} Auto-initializing...",
          autoInitSuccess: "\u2705 Guard-BOT auto-started successfully",
          autoInitFailed: "\u26A0\uFE0F Could not auto-start. Use manual button.",
          manualInitRequired: "\u{1F527} Manual initialization required",
          paletteDetected: "\u{1F3A8} Color palette detected",
          paletteNotFound: "\u{1F50D} Searching for color palette...",
          clickingPaintButton: "\u{1F446} Clicking Paint button...",
          paintButtonNotFound: "\u274C Paint button not found",
          selectUpperLeft: "\u{1F3AF} Paint a pixel at the UPPER LEFT corner of the area to protect",
          selectLowerRight: "\u{1F3AF} Now paint a pixel at the LOWER RIGHT corner of the area",
          waitingUpperLeft: "\u{1F446} Waiting for upper left corner selection...",
          waitingLowerRight: "\u{1F446} Waiting for lower right corner selection...",
          upperLeftCaptured: "\u2705 Upper left corner captured: ({x}, {y})",
          lowerRightCaptured: "\u2705 Lower right corner captured: ({x}, {y})",
          selectionTimeout: "\u274C Selection timeout",
          selectionError: "\u274C Selection error, please try again",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "Download Logs",
          clearLogs: "Clear Logs",
          closeLogs: "Close",
          // Analysis Window
          analysisTitle: "Difference Analysis - JSON vs Current Canvas",
          correctPixels: "Correct Pixels",
          incorrectPixels: "Incorrect Pixels",
          missingPixels: "Missing Pixels",
          showCorrect: "Show Correct",
          showIncorrect: "Show Incorrect",
          showMissing: "Show Missing",
          autoRefresh: "Auto-refresh",
          zoomAdjusted: "Zoom automatically adjusted to",
          autoRefreshEnabled: "Auto-refresh enabled every",
          autoRefreshDisabled: "Auto-refresh disabled",
          autoRefreshIntervalUpdated: "Auto-refresh interval updated to",
          visualizationUpdated: "Visualization updated",
          // Config Window
          configTitle: "Guard Configuration",
          protectionPatterns: "Protection Patterns",
          preferSpecificColor: "Prioritize specific color",
          excludeSpecificColors: "Don't repair specific colors",
          loadManagement: "Load Management",
          minLoadsToWait: "Minimum loads to wait",
          pixelsPerBatch: "Pixels per batch",
          spendAllPixelsOnStart: "Spend all pixels on start",
          waitTimes: "Wait Times",
          useRandomTimes: "Use random times between batches",
          minTime: "Minimum time (s)",
          maxTime: "Maximum time (s)"
        }
      };
    }
  });

  // src/locales/fr.js
  var fr;
  var init_fr = __esm({
    "src/locales/fr.js"() {
      fr = {
        // Launcher
        launcher: {
          title: "WPlace AutoBOT",
          autoFarm: "\u{1F33E} Auto-Farm",
          autoImage: "\u{1F3A8} Auto-Image",
          autoGuard: "\u{1F6E1}\uFE0F Auto-Guard",
          selection: "S\xE9lection",
          user: "Utilisateur",
          charges: "Charges",
          backend: "Backend",
          database: "Base de donn\xE9es",
          uptime: "Temps actif",
          close: "Fermer",
          launch: "Lancer",
          loading: "Chargement\u2026",
          executing: "Ex\xE9cution\u2026",
          downloading: "T\xE9l\xE9chargement du script\u2026",
          chooseBot: "Choisissez un bot et appuyez sur Lancer",
          readyToLaunch: "Pr\xEAt \xE0 lancer",
          loadError: "Erreur de chargement",
          loadErrorMsg: "Impossible de charger le bot s\xE9lectionn\xE9. V\xE9rifiez votre connexion ou r\xE9essayez.",
          checking: "\u{1F504} V\xE9rification...",
          online: "\u{1F7E2} En ligne",
          offline: "\u{1F534} Hors ligne",
          ok: "\u{1F7E2} OK",
          error: "\u{1F534} Erreur",
          unknown: "-",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "T\xE9l\xE9charger Logs",
          clearLogs: "Effacer Logs",
          closeLogs: "Fermer"
        },
        // Image Module
        image: {
          title: "WPlace Auto-Image",
          initBot: "Initialiser Auto-BOT",
          uploadImage: "T\xE9l\xE9charger Image",
          resizeImage: "Redimensionner Image",
          selectPosition: "S\xE9lectionner Position",
          startPainting: "Commencer Peinture",
          stopPainting: "Arr\xEAter Peinture",
          saveProgress: "Sauvegarder Progr\xE8s",
          loadProgress: "Charger Progr\xE8s",
          checkingColors: "\u{1F50D} V\xE9rification des couleurs disponibles...",
          noColorsFound: "\u274C Ouvrez la palette de couleurs sur le site et r\xE9essayez!",
          colorsFound: "\u2705 {count} couleurs disponibles trouv\xE9es",
          loadingImage: "\u{1F5BC}\uFE0F Chargement de l'image...",
          imageLoaded: "\u2705 Image charg\xE9e avec {count} pixels valides",
          imageError: "\u274C Erreur lors du chargement de l'image",
          selectPositionAlert: "Peignez le premier pixel \xE0 l'emplacement o\xF9 vous voulez que l'art commence!",
          waitingPosition: "\u{1F446} En attente que vous peigniez le pixel de r\xE9f\xE9rence...",
          positionSet: "\u2705 Position d\xE9finie avec succ\xE8s!",
          positionTimeout: "\u274C D\xE9lai d\xE9pass\xE9 pour la s\xE9lection de position",
          positionDetected: "\u{1F3AF} Position d\xE9tect\xE9e, traitement...",
          positionError: "\u274C Erreur d\xE9tectant la position, essayez \xE0 nouveau",
          startPaintingMsg: "\u{1F3A8} D\xE9but de la peinture...",
          paintingProgress: "\u{1F9F1} Progr\xE8s: {painted}/{total} pixels...",
          noCharges: "\u231B Aucune charge. Attendre {time}...",
          paintingStopped: "\u23F9\uFE0F Peinture arr\xEAt\xE9e par l'utilisateur",
          paintingComplete: "\u2705 Peinture termin\xE9e! {count} pixels peints.",
          paintingError: "\u274C Erreur pendant la peinture",
          missingRequirements: "\u274C Chargez une image et s\xE9lectionnez une position d'abord",
          progress: "Progr\xE8s",
          userName: "Usager",
          pixels: "Pixels",
          charges: "Charges",
          estimatedTime: "Temps estim\xE9",
          initMessage: "Cliquez sur 'Initialiser Auto-BOT' pour commencer",
          waitingInit: "En attente d'initialisation...",
          resizeSuccess: "\u2705 Image redimensionn\xE9e \xE0 {width}x{height}",
          paintingPaused: "\u23F8\uFE0F Peinture mise en pause \xE0 la position X: {x}, Y: {y}",
          pixelsPerBatch: "Pixels par lot",
          batchSize: "Taille du lot",
          nextBatchTime: "Prochain lot dans",
          useAllCharges: "Utiliser toutes les charges disponibles",
          showOverlay: "Afficher l'overlay",
          maxCharges: "Charges max par lot",
          waitingForCharges: "\u23F3 En attente de charges: {current}/{needed}",
          timeRemaining: "Temps restant",
          cooldownWaiting: "\u23F3 Attendre {time} pour continuer...",
          progressSaved: "\u2705 Progr\xE8s sauvegard\xE9 sous {filename}",
          progressLoaded: "\u2705 Progr\xE8s charg\xE9: {painted}/{total} pixels peints",
          progressLoadError: "\u274C Erreur lors du chargement du progr\xE8s: {error}",
          progressSaveError: "\u274C Erreur lors de la sauvegarde du progr\xE8s: {error}",
          confirmSaveProgress: "Voulez-vous sauvegarder le progr\xE8s actuel avant d'arr\xEAter?",
          saveProgressTitle: "Sauvegarder Progr\xE8s",
          discardProgress: "Abandonner",
          cancel: "Annuler",
          minimize: "Minimiser",
          width: "Largeur",
          height: "Hauteur",
          keepAspect: "Garder les proportions",
          apply: "Appliquer",
          overlayOn: "Overlay : ON",
          overlayOff: "Overlay : OFF",
          passCompleted: "\u2705 Passage termin\xE9: {painted} pixels peints | Progr\xE8s: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 Attente de r\xE9g\xE9n\xE9ration des charges: {current}/{needed} - Temps: {time}",
          waitingChargesCountdown: "\u23F3 Attente des charges: {current}/{needed} - Restant: {time}",
          autoInitializing: "\u{1F916} Initialisation automatique...",
          autoInitSuccess: "\u2705 Bot d\xE9marr\xE9 automatiquement",
          autoInitFailed: "\u26A0\uFE0F Impossible de d\xE9marrer automatiquement. Utilisez le bouton manuel.",
          paletteDetected: "\u{1F3A8} Palette de couleurs d\xE9tect\xE9e",
          paletteNotFound: "\u{1F50D} Recherche de la palette de couleurs...",
          clickingPaintButton: "\u{1F446} Clic sur le bouton Paint...",
          paintButtonNotFound: "\u274C Bouton Paint introuvable",
          manualInitRequired: "\u{1F527} Initialisation manuelle requise",
          retryAttempt: "\u{1F504} Tentative {attempt}/{maxAttempts} dans {delay}s...",
          retryError: "\u{1F4A5} Erreur dans tentative {attempt}/{maxAttempts}, nouvel essai dans {delay}s...",
          retryFailed: "\u274C \xC9chec apr\xE8s {maxAttempts} tentatives. Continuant avec le lot suivant...",
          networkError: "\u{1F310} Erreur r\xE9seau. Nouvel essai...",
          serverError: "\u{1F525} Erreur serveur. Nouvel essai...",
          timeoutError: "\u23F0 D\xE9lai d\u2019attente du serveur, nouvelle tentative...",
          // v2.0 - Protection et motifs
          protectionEnabled: "Protection activ\xE9e",
          protectionDisabled: "Protection d\xE9sactiv\xE9e",
          paintPattern: "Motif de peinture",
          patternLinearStart: "Lin\xE9aire (D\xE9but)",
          patternLinearEnd: "Lin\xE9aire (Fin)",
          patternRandom: "Al\xE9atoire",
          patternCenterOut: "Centre vers l\u2019ext\xE9rieur",
          patternCornersFirst: "Coins d\u2019abord",
          patternSpiral: "Spirale",
          solid: "Plein",
          stripes: "Rayures",
          checkerboard: "Damier",
          gradient: "D\xE9grad\xE9",
          dots: "Points",
          waves: "Vagues",
          spiral: "Spirale",
          mosaic: "Mosa\xEFque",
          bricks: "Briques",
          zigzag: "Zigzag",
          protectingDrawing: "Protection du dessin...",
          changesDetected: "\u{1F6A8} {count} changements d\xE9tect\xE9s dans le dessin",
          repairing: "\u{1F527} R\xE9paration de {count} pixels modifi\xE9s...",
          repairCompleted: "\u2705 R\xE9paration termin\xE9e : {count} pixels",
          noChargesForRepair: "\u26A1 Pas de frais pour la r\xE9paration, en attente...",
          protectionPriority: "\u{1F6E1}\uFE0F Priorit\xE9 \xE0 la protection activ\xE9e",
          patternApplied: "Motif appliqu\xE9",
          customPattern: "Motif personnalis\xE9",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "T\xE9l\xE9charger Logs",
          clearLogs: "Effacer Logs",
          closeLogs: "Fermer"
        },
        // Farm Module (to be implemented)
        farm: {
          title: "WPlace Farm Bot",
          start: "D\xE9marrer",
          stop: "Arr\xEAter",
          stopped: "Bot arr\xEAt\xE9",
          calibrate: "Calibrer",
          paintOnce: "Une fois",
          checkingStatus: "V\xE9rification du statut...",
          configuration: "Configuration",
          delay: "D\xE9lai (ms)",
          pixelsPerBatch: "Pixels/lot",
          minCharges: "Charges min",
          colorMode: "Mode couleur",
          random: "Al\xE9atoire",
          fixed: "Fixe",
          range: "Plage",
          fixedColor: "Couleur fixe",
          advanced: "Avanc\xE9",
          tileX: "Tuile X",
          tileY: "Tuile Y",
          customPalette: "Palette personnalis\xE9e",
          paletteExample: "ex: #FF0000,#00FF00,#0000FF",
          capture: "Capturer",
          painted: "Peints",
          charges: "Charges",
          retries: "\xC9checs",
          tile: "Tuile",
          configSaved: "Configuration sauvegard\xE9e",
          configLoaded: "Configuration charg\xE9e",
          configReset: "Configuration r\xE9initialis\xE9e",
          captureInstructions: "Peindre un pixel manuellement pour capturer les coordonn\xE9es...",
          backendOnline: "Backend En ligne",
          backendOffline: "Backend Hors ligne",
          startingBot: "D\xE9marrage du bot...",
          stoppingBot: "Arr\xEAt du bot...",
          calibrating: "Calibrage...",
          alreadyRunning: "Auto-Farm est d\xE9j\xE0 en cours d'ex\xE9cution.",
          imageRunningWarning: "Auto-Image est en cours d'ex\xE9cution. Fermez-le avant de d\xE9marrer Auto-Farm.",
          selectPosition: "S\xE9lectionner Zone",
          selectPositionAlert: "\u{1F3AF} Peignez un pixel dans une zone VIDE de la carte pour d\xE9finir la zone de farming",
          waitingPosition: "\u{1F446} En attente que vous peigniez le pixel de r\xE9f\xE9rence...",
          positionSet: "\u2705 Zone d\xE9finie! Rayon: 500px",
          positionTimeout: "\u274C D\xE9lai d\xE9pass\xE9 pour la s\xE9lection de zone",
          missingPosition: "\u274C S\xE9lectionnez une zone d'abord en utilisant 'S\xE9lectionner Zone'",
          farmRadius: "Rayon farm",
          positionInfo: "Zone actuelle",
          farmingInRadius: "\u{1F33E} Farming dans un rayon de {radius}px depuis ({x},{y})",
          selectEmptyArea: "\u26A0\uFE0F IMPORTANT: S\xE9lectionnez une zone VIDE pour \xE9viter les conflits",
          noPosition: "Aucune zone",
          currentZone: "Zone: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} S\xE9lectionnez une zone d'abord. Peignez un pixel sur la carte pour d\xE9finir la zone de farming",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "T\xE9l\xE9charger Logs",
          clearLogs: "Effacer Logs",
          closeLogs: "Fermer"
        },
        // Common/Shared
        common: {
          yes: "Oui",
          no: "Non",
          ok: "OK",
          cancel: "Annuler",
          close: "Fermer",
          save: "Sauvegarder",
          load: "Charger",
          delete: "Supprimer",
          edit: "Modifier",
          start: "D\xE9marrer",
          stop: "Arr\xEAter",
          pause: "Pause",
          resume: "Reprendre",
          reset: "R\xE9initialiser",
          settings: "Param\xE8tres",
          help: "Aide",
          about: "\xC0 propos",
          language: "Langue",
          loading: "Chargement...",
          error: "Erreur",
          success: "Succ\xE8s",
          warning: "Avertissement",
          info: "Information",
          languageChanged: "Langue chang\xE9e en {language}"
        },
        // Guard Module
        guard: {
          title: "WPlace Auto-Guard",
          initBot: "Initialiser Guard-BOT",
          selectArea: "S\xE9lectionner Zone",
          captureArea: "Capturer Zone",
          startProtection: "D\xE9marrer Protection",
          stopProtection: "Arr\xEAter Protection",
          upperLeft: "Coin Sup\xE9rieur Gauche",
          lowerRight: "Coin Inf\xE9rieur Droit",
          protectedPixels: "Pixels Prot\xE9g\xE9s",
          detectedChanges: "Changements D\xE9tect\xE9s",
          repairedPixels: "Pixels R\xE9par\xE9s",
          charges: "Charges",
          waitingInit: "En attente d'initialisation...",
          checkingColors: "\u{1F3A8} V\xE9rification des couleurs disponibles...",
          noColorsFound: "\u274C Aucune couleur trouv\xE9e. Ouvrez la palette de couleurs sur le site.",
          colorsFound: "\u2705 {count} couleurs disponibles trouv\xE9es",
          initSuccess: "\u2705 Guard-BOT initialis\xE9 avec succ\xE8s",
          initError: "\u274C Erreur lors de l'initialisation de Guard-BOT",
          invalidCoords: "\u274C Coordonn\xE9es invalides",
          invalidArea: "\u274C La zone doit avoir le coin sup\xE9rieur gauche inf\xE9rieur au coin inf\xE9rieur droit",
          areaTooLarge: "\u274C Zone trop grande: {size} pixels (maximum: {max})",
          capturingArea: "\u{1F4F8} Capture de la zone de protection...",
          areaCaptured: "\u2705 Zone captur\xE9e: {count} pixels sous protection",
          captureError: "\u274C Erreur lors de la capture de zone: {error}",
          captureFirst: "\u274C Capturez d'abord une zone de protection",
          protectionStarted: "\u{1F6E1}\uFE0F Protection d\xE9marr\xE9e - surveillance de la zone",
          protectionStopped: "\u23F9\uFE0F Protection arr\xEAt\xE9e",
          noChanges: "\u2705 Zone prot\xE9g\xE9e - aucun changement d\xE9tect\xE9",
          changesDetected: "\u{1F6A8} {count} changements d\xE9tect\xE9s dans la zone prot\xE9g\xE9e",
          repairing: "\u{1F6E0}\uFE0F R\xE9paration de {count} pixels alt\xE9r\xE9s...",
          repairedSuccess: "\u2705 {count} pixels r\xE9par\xE9s avec succ\xE8s",
          repairError: "\u274C Erreur lors de la r\xE9paration des pixels: {error}",
          noCharges: "\u26A0\uFE0F Charges insuffisantes pour r\xE9parer les changements",
          checkingChanges: "\u{1F50D} V\xE9rification des changements dans la zone prot\xE9g\xE9e...",
          errorChecking: "\u274C Erreur lors de la v\xE9rification des changements: {error}",
          guardActive: "\u{1F6E1}\uFE0F Gardien actif - zone sous protection",
          lastCheck: "Derni\xE8re v\xE9rification: {time}",
          nextCheck: "Prochaine v\xE9rification dans: {time}s",
          autoInitializing: "\u{1F916} Initialisation automatique...",
          autoInitSuccess: "\u2705 Guard-BOT d\xE9marr\xE9 automatiquement",
          autoInitFailed: "\u26A0\uFE0F Impossible de d\xE9marrer automatiquement. Utilisez le bouton manuel.",
          manualInitRequired: "\u{1F527} Initialisation manuelle requise",
          paletteDetected: "\u{1F3A8} Palette de couleurs d\xE9tect\xE9e",
          paletteNotFound: "\u{1F50D} Recherche de la palette de couleurs...",
          clickingPaintButton: "\u{1F446} Clic sur le bouton Paint...",
          paintButtonNotFound: "\u274C Bouton Paint introuvable",
          selectUpperLeft: "\u{1F3AF} Peignez un pixel au coin SUP\xC9RIEUR GAUCHE de la zone \xE0 prot\xE9ger",
          selectLowerRight: "\u{1F3AF} Maintenant peignez un pixel au coin INF\xC9RIEUR DROIT de la zone",
          waitingUpperLeft: "\u{1F446} En attente de la s\xE9lection du coin sup\xE9rieur gauche...",
          waitingLowerRight: "\u{1F446} En attente de la s\xE9lection du coin inf\xE9rieur droit...",
          upperLeftCaptured: "\u2705 Coin sup\xE9rieur gauche captur\xE9: ({x}, {y})",
          lowerRightCaptured: "\u2705 Coin inf\xE9rieur droit captur\xE9: ({x}, {y})",
          selectionTimeout: "\u274C D\xE9lai de s\xE9lection d\xE9pass\xE9",
          selectionError: "\u274C Erreur de s\xE9lection, veuillez r\xE9essayer",
          logWindow: "Logs",
          logWindowTitle: "Logs - {botName}",
          downloadLogs: "T\xE9l\xE9charger Logs",
          clearLogs: "Effacer Logs",
          closeLogs: "Fermer",
          // Analysis Window
          analysisTitle: "Analyse des Diff\xE9rences - JSON vs Canvas Actuel",
          correctPixels: "Pixels Corrects",
          incorrectPixels: "Pixels Incorrects",
          missingPixels: "Pixels Manquants",
          showCorrect: "Afficher Corrects",
          showIncorrect: "Afficher Incorrects",
          showMissing: "Afficher Manquants",
          autoRefresh: "Actualisation automatique",
          zoomAdjusted: "Zoom ajust\xE9 automatiquement \xE0",
          autoRefreshEnabled: "Actualisation automatique activ\xE9e toutes les",
          autoRefreshDisabled: "Actualisation automatique d\xE9sactiv\xE9e",
          autoRefreshIntervalUpdated: "Intervalle d'actualisation automatique mis \xE0 jour \xE0",
          visualizationUpdated: "Visualisation mise \xE0 jour",
          // Config Window
          configTitle: "Configuration du Guard",
          protectionPatterns: "Mod\xE8les de Protection",
          preferSpecificColor: "Prioriser une couleur sp\xE9cifique",
          excludeSpecificColors: "Ne pas r\xE9parer les couleurs sp\xE9cifiques",
          loadManagement: "Gestion des Charges",
          minLoadsToWait: "Minimum de charges \xE0 attendre",
          pixelsPerBatch: "Pixels par lot",
          spendAllPixelsOnStart: "D\xE9penser tous les pixels au d\xE9marrage",
          waitTimes: "Temps d'Attente",
          useRandomTimes: "Utiliser des temps al\xE9atoires entre les lots",
          minTime: "Temps minimum (s)",
          maxTime: "Temps maximum (s)"
        }
      };
    }
  });

  // src/locales/ru.js
  var ru;
  var init_ru = __esm({
    "src/locales/ru.js"() {
      ru = {
        // Launcher
        launcher: {
          title: "WPlace AutoBOT",
          autoFarm: "\u{1F33E} \u0410\u0432\u0442\u043E-\u0424\u0430\u0440\u043C",
          autoImage: "\u{1F3A8} \u0410\u0432\u0442\u043E-\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
          autoGuard: "\u{1F6E1}\uFE0F \u0410\u0432\u0442\u043E-\u0417\u0430\u0449\u0438\u0442\u0430",
          selection: "\u0412\u044B\u0431\u0440\u0430\u043D\u043E",
          user: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C",
          charges: "\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F",
          backend: "\u0411\u044D\u043A\u0435\u043D\u0434",
          database: "\u0411\u0430\u0437\u0430 \u0434\u0430\u043D\u043D\u044B\u0445",
          uptime: "\u0412\u0440\u0435\u043C\u044F \u0440\u0430\u0431\u043E\u0442\u044B",
          close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
          launch: "\u0417\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C",
          loading: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430",
          executing: "\u0412\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435",
          downloading: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0441\u043A\u0440\u0438\u043F\u0442\u0430...",
          chooseBot: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0431\u043E\u0442\u0430 \u0438 \u043D\u0430\u0436\u043C\u0438\u0442\u0435 \u0417\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C",
          readyToLaunch: "\u0413\u043E\u0442\u043E\u0432\u043E \u043A \u0437\u0430\u043F\u0443\u0441\u043A\u0443",
          loadError: "\u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438",
          loadErrorMsg: "\u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u0433\u043E \u0431\u043E\u0442\u0430. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u0438\u043B\u0438 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437.",
          checking: "\u{1F504} \u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430...",
          online: "\u{1F7E2} \u041E\u043D\u043B\u0430\u0439\u043D",
          offline: "\u{1F534} \u041E\u0444\u043B\u0430\u0439\u043D",
          ok: "\u{1F7E2} \u041E\u041A",
          error: "\u{1F534} \u041E\u0448\u0438\u0431\u043A\u0430",
          unknown: "-",
          logWindow: "Logs",
          logWindowTitle: "\u041B\u043E\u0433\u0438 - {botName}",
          downloadLogs: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u041B\u043E\u0433\u0438",
          clearLogs: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u041B\u043E\u0433\u0438",
          closeLogs: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
        },
        // Image Module
        image: {
          title: "WPlace \u0410\u0432\u0442\u043E-\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
          initBot: "\u0418\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u0442\u044C Auto-BOT",
          uploadImage: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
          resizeImage: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0440\u0430\u0437\u043C\u0435\u0440 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F",
          selectPosition: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u043C\u0435\u0441\u0442\u043E \u043D\u0430\u0447\u0430\u043B\u0430",
          startPainting: "\u041D\u0430\u0447\u0430\u0442\u044C \u0440\u0438\u0441\u043E\u0432\u0430\u0442\u044C",
          stopPainting: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0440\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u0435",
          saveProgress: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          loadProgress: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          checkingColors: "\u{1F50D} \u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0446\u0432\u0435\u0442\u043E\u0432...",
          noColorsFound: "\u274C \u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u043F\u0430\u043B\u0438\u0442\u0440\u0443 \u0446\u0432\u0435\u0442\u043E\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0435 \u0438 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043D\u043E\u0432\u0430!",
          colorsFound: "\u2705 \u041D\u0430\u0439\u0434\u0435\u043D\u043E {count} \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0446\u0432\u0435\u0442\u043E\u0432",
          loadingImage: "\u{1F5BC}\uFE0F \u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F...",
          imageLoaded: "\u2705 \u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043E \u0441 {count} \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u043C\u0438 \u043F\u0438\u043A\u0441\u0435\u043B\u044F\u043C\u0438",
          imageError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F",
          selectPositionAlert: "\u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u0440\u0442\u043E\u0432\u044B\u0439 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432 \u0442\u043E\u043C \u043C\u0435\u0441\u0442\u0435, \u0433\u0434\u0435 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u0440\u0438\u0441\u0443\u043D\u043E\u043A \u043D\u0430\u0447\u0438\u043D\u0430\u043B\u0441\u044F!",
          waitingPosition: "\u{1F446} \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0441\u0442\u0430\u0440\u0442\u043E\u0432\u043E\u0433\u043E \u043F\u0438\u043A\u0441\u0435\u043B\u044F....",
          positionSet: "\u2705 \u041F\u043E\u0437\u0438\u0446\u0438\u044F \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0430 \u0443\u0441\u043F\u0435\u0448\u043D\u043E!",
          positionTimeout: "\u274C \u0422\u0430\u0439\u043C\u0430\u0443\u0442 \u0432\u044B\u0431\u043E\u0440\u0430 \u043F\u043E\u0437\u0438\u0446\u0438\u0438",
          positionDetected: "\u{1F3AF} \u041F\u043E\u0437\u0438\u0446\u0438\u044F \u0432\u044B\u0431\u0440\u0430\u043D\u0430, \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430...",
          positionError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u044B\u0431\u043E\u0440\u0430 \u043F\u043E\u0437\u0438\u0446\u0438\u0438, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437",
          startPaintingMsg: "\u{1F3A8} \u041D\u0430\u0447\u0430\u043B\u043E \u0440\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u044F...",
          paintingProgress: "\u{1F9F1} \u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441: {painted} \u0438\u0437 {total} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439...",
          noCharges: "\u231B \u041D\u0435\u0442 \u0437\u0430\u0440\u044F\u0434\u043E\u0432. \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 {time}...",
          paintingStopped: "\u23F9\uFE0F \u0420\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u0435 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u043C",
          paintingComplete: "\u2705 \u0420\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E! {count} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u043D\u0430\u0440\u0438\u0441\u043E\u0432\u0430\u043D\u043E.",
          paintingError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432 \u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0435 \u0440\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u044F",
          missingRequirements: "\u274C \u0421\u043F\u0435\u0440\u0432\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043C\u0435\u0441\u0442\u043E \u043D\u0430\u0447\u0430\u043B\u0430",
          progress: "\u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          userName: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C",
          pixels: "\u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          charges: "\u0417\u0430\u0440\u044F\u0434\u044B",
          estimatedTime: "\u041F\u0440\u0435\u0434\u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F",
          initMessage: "\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \xAB\u0417\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C Auto-BOT\xBB, \u0447\u0442\u043E\u0431\u044B \u043D\u0430\u0447\u0430\u0442\u044C",
          waitingInit: "\u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438...",
          resizeSuccess: "\u2705 \u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u043E \u0434\u043E {width}x{height}",
          paintingPaused: "\u23F8\uFE0F \u0420\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u0435 \u043F\u0440\u0438\u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E \u043D\u0430 \u043F\u043E\u0437\u0438\u0446\u0438\u0438 X: {x}, Y: {y}",
          pixelsPerBatch: "\u041F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u0432 \u043F\u0440\u043E\u0445\u043E\u0434\u0435",
          batchSize: "\u0420\u0430\u0437\u043C\u0435\u0440 \u043F\u0440\u043E\u0445\u043E\u0434\u0430",
          nextBatchTime: "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u043F\u0440\u043E\u0445\u043E\u0434 \u0447\u0435\u0440\u0435\u0437",
          useAllCharges: "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0432\u0441\u0435 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0435 \u0437\u0430\u0440\u044F\u0434\u044B",
          showOverlay: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043D\u0430\u043B\u043E\u0436\u0435\u043D\u0438\u0435",
          maxCharges: "\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u043A\u043E\u043B-\u0432\u043E \u0437\u0430\u0440\u044F\u0434\u043E\u0432 \u0437\u0430 \u043F\u0440\u043E\u0445\u043E\u0434",
          waitingForCharges: "\u23F3 \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0437\u0430\u0440\u044F\u0434\u043E\u0432: {current} \u0438\u0437 {needed}",
          timeRemaining: "\u0412\u0440\u0435\u043C\u0435\u043D\u0438 \u043E\u0441\u0442\u0430\u043B\u043E\u0441\u044C",
          cooldownWaiting: "\u23F3 \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 {time} \u0434\u043B\u044F \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0435\u043D\u0438\u044F...",
          progressSaved: "\u2705 \u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D \u043A\u0430\u043A {filename}",
          progressLoaded: "\u2705 \u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D: {painted} \u0438\u0437 {total} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u043D\u0430\u0440\u0438\u0441\u043E\u0432\u0430\u043D\u043E",
          progressLoadError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441\u0430: {error}",
          progressSaveError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441\u0430: {error}",
          confirmSaveProgress: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0442\u0435\u043A\u0443\u0449\u0438\u0439 \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u043F\u0435\u0440\u0435\u0434 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u043E\u0439?",
          saveProgressTitle: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          discardProgress: "\u041D\u0435 \u0441\u043E\u0445\u0440\u0430\u043D\u044F\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441",
          cancel: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C",
          minimize: "\u0421\u0432\u0435\u0440\u043D\u0443\u0442\u044C",
          width: "\u0428\u0438\u0440\u0438\u043D\u0430",
          height: "\u0412\u044B\u0441\u043E\u0442\u0430",
          keepAspect: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D",
          apply: "\u041F\u0440\u0438\u043C\u0435\u043D\u0438\u0442\u044C",
          overlayOn: "\u041D\u0430\u043B\u043E\u0436\u0435\u043D\u0438\u0435: \u0412\u041A\u041B",
          overlayOff: "\u041D\u0430\u043B\u043E\u0436\u0435\u043D\u0438\u0435: \u0412\u042B\u041A\u041B",
          passCompleted: "\u2705 \u041F\u0440\u043E\u0446\u0435\u0441\u0441 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D: {painted} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u043D\u0430\u0440\u0438\u0441\u043E\u0432\u0430\u043D\u043E | \u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441: {percent}% ({current} \u0438\u0437 {total})",
          waitingChargesRegen: "\u23F3 \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0432\u043E\u0441\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0437\u0430\u0440\u044F\u0434\u0430: {current} \u0438\u0437 {needed} - \u0412\u0440\u0435\u043C\u044F: {time}",
          waitingChargesCountdown: "\u23F3 \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0437\u0430\u0440\u044F\u0434\u043E\u0432: {current} \u0438\u0437 {needed} - \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F: {time}",
          autoInitializing: "\u{1F916} \u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F...",
          autoInitSuccess: "\u2705 \u0411\u043E\u0442 \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u043B\u0441\u044F \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438",
          autoInitFailed: "\u26A0\uFE0F \u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u0430\u0432\u0442\u043E\u0437\u0430\u043F\u0443\u0441\u043A. \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u043A\u043D\u043E\u043F\u043A\u0443 \u0440\u0443\u0447\u043D\u043E\u0433\u043E \u0437\u0430\u043F\u0443\u0441\u043A\u0430.",
          paletteDetected: "\u{1F3A8} \u0426\u0432\u0435\u0442\u043E\u0432\u0430\u044F \u043F\u0430\u043B\u0438\u0442\u0440\u0430 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u0430",
          paletteNotFound: "\u{1F50D} \u041F\u043E\u0438\u0441\u043A \u0446\u0432\u0435\u0442\u043E\u0432\u043E\u0439 \u043F\u0430\u043B\u0438\u0442\u0440\u044B...",
          clickingPaintButton: "\u{1F446} \u041D\u0430\u0436\u0430\u0442\u0438\u0435 \u043A\u043D\u043E\u043F\u043A\u0438 \xABPaint\xBB...",
          paintButtonNotFound: "\u274C \u041A\u043D\u043E\u043F\u043A\u0430 \xABPaint\xBB \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430",
          manualInitRequired: "\u{1F527} \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F \u0440\u0443\u0447\u043D\u0430\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F",
          retryAttempt: "\u{1F504} \u041F\u043E\u0432\u0442\u043E\u0440\u043D\u0430\u044F \u043F\u043E\u043F\u044B\u0442\u043A\u0430 {attempt} \u0438\u0437 {maxAttempts} \u0447\u0435\u0440\u0435\u0437 {delay}s...",
          retryError: "\u{1F4A5} \u041E\u0448\u0438\u0431\u043A\u0430 \u0432 \u043F\u043E\u043F\u044B\u0442\u043A\u0435 {attempt} \u0438\u0437 {maxAttempts}, \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 {delay}s...",
          retryFailed: "\u274C \u041F\u0440\u043E\u0432\u0430\u043B\u0435\u043D\u043E \u0441\u043F\u0443\u0441\u0442\u044F {maxAttempts} \u043F\u043E\u043F\u044B\u0442\u043E\u043A. \u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0435\u043D\u0438\u0435 \u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u043C \u043F\u0440\u043E\u0445\u043E\u0434\u0435...",
          networkError: "\u{1F310} \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u0435\u0442\u0438. \u041F\u043E\u0432\u0442\u043E\u0440\u043D\u0430\u044F \u043F\u043E\u043F\u044B\u0442\u043A\u0430...",
          serverError: "\u{1F525} \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041F\u043E\u0432\u0442\u043E\u0440\u043D\u0430\u044F \u043F\u043E\u043F\u044B\u0442\u043A\u0430...",
          timeoutError: "\u23F0 \u0422\u0430\u0439\u043C-\u0430\u0443\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043F\u043E\u0432\u0442\u043E\u0440\u043D\u0430\u044F \u043F\u043E\u043F\u044B\u0442\u043A\u0430...",
          // v2.0 - Защита и шаблоны
          protectionEnabled: "\u0417\u0430\u0449\u0438\u0442\u0430 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0430",
          protectionDisabled: "\u0417\u0430\u0449\u0438\u0442\u0430 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0430",
          paintPattern: "\u0428\u0430\u0431\u043B\u043E\u043D \u0440\u0438\u0441\u043E\u0432\u0430\u043D\u0438\u044F",
          patternLinearStart: "\u041B\u0438\u043D\u0435\u0439\u043D\u044B\u0439 (\u043D\u0430\u0447\u0430\u043B\u043E)",
          patternLinearEnd: "\u041B\u0438\u043D\u0435\u0439\u043D\u044B\u0439 (\u043A\u043E\u043D\u0435\u0446)",
          patternRandom: "\u0421\u043B\u0443\u0447\u0430\u0439\u043D\u044B\u0439",
          patternCenterOut: "\u0418\u0437 \u0446\u0435\u043D\u0442\u0440\u0430 \u043D\u0430\u0440\u0443\u0436\u0443",
          patternCornersFirst: "\u0421\u043D\u0430\u0447\u0430\u043B\u0430 \u0443\u0433\u043B\u044B",
          patternSpiral: "\u0421\u043F\u0438\u0440\u0430\u043B\u044C",
          solid: "\u0421\u043F\u043B\u043E\u0448\u043D\u043E\u0439",
          stripes: "\u041F\u043E\u043B\u043E\u0441\u044B",
          checkerboard: "\u0428\u0430\u0445\u043C\u0430\u0442\u043D\u0430\u044F \u0434\u043E\u0441\u043A\u0430",
          gradient: "\u0413\u0440\u0430\u0434\u0438\u0435\u043D\u0442",
          dots: "\u0422\u043E\u0447\u043A\u0438",
          waves: "\u0412\u043E\u043B\u043D\u044B",
          spiral: "\u0421\u043F\u0438\u0440\u0430\u043B\u044C",
          mosaic: "\u041C\u043E\u0437\u0430\u0438\u043A\u0430",
          bricks: "\u041A\u0438\u0440\u043F\u0438\u0447\u0438",
          zigzag: "\u0417\u0438\u0433\u0437\u0430\u0433",
          protectingDrawing: "\u0417\u0430\u0449\u0438\u0442\u0430 \u0440\u0438\u0441\u0443\u043D\u043A\u0430...",
          changesDetected: "\u{1F6A8} \u041E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439: {count}",
          repairing: "\u{1F527} \u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 {count} \u0438\u0437\u043C\u0435\u043D\u0451\u043D\u043D\u044B\u0445 \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439...",
          repairCompleted: "\u2705 \u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E: {count} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439",
          noChargesForRepair: "\u26A1 \u041A\u043E\u043C\u0438\u0441\u0441\u0438\u0439 \u0437\u0430 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u043D\u0435\u0442, \u043E\u0436\u0438\u0434\u0430\u043D\u0438\u0435...",
          protectionPriority: "\u{1F6E1}\uFE0F \u041F\u0440\u0438\u043E\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0449\u0438\u0442\u044B \u0430\u043A\u0442\u0438\u0432\u0438\u0440\u043E\u0432\u0430\u043D",
          patternApplied: "\u0428\u0430\u0431\u043B\u043E\u043D \u043F\u0440\u0438\u043C\u0435\u043D\u0451\u043D",
          customPattern: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u0448\u0430\u0431\u043B\u043E\u043D",
          logWindow: "Logs",
          logWindowTitle: "\u041B\u043E\u0433\u0438 - {botName}",
          downloadLogs: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u041B\u043E\u0433\u0438",
          clearLogs: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u041B\u043E\u0433\u0438",
          closeLogs: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
        },
        // Farm Module (to be implemented)
        farm: {
          title: "WPlace \u0410\u0432\u0442\u043E-\u0424\u0430\u0440\u043C",
          start: "\u041D\u0430\u0447\u0430\u0442\u044C",
          stop: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C",
          stopped: "\u0411\u043E\u0442 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D",
          calibrate: "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u0430\u0442\u044C",
          paintOnce: "\u0415\u0434\u0438\u043D\u043E\u0440\u0430\u0437\u043E\u0432\u043E",
          checkingStatus: "\u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430...",
          configuration: "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F",
          delay: "\u0417\u0430\u0434\u0435\u0440\u0436\u043A\u0430 (\u043C\u0441)",
          pixelsPerBatch: "\u041F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u0437\u0430 \u043F\u0440\u043E\u0445\u043E\u0434",
          minCharges: "\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u043A\u043E\u043B-\u0432\u043E",
          colorMode: "\u0420\u0435\u0436\u0438\u043C \u0446\u0432\u0435\u0442\u043E\u0432",
          random: "\u0421\u043B\u0443\u0447\u0430\u0439\u043D\u044B\u0439",
          fixed: "\u0424\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439",
          range: "\u0414\u0438\u0430\u043F\u0430\u0437\u043E\u043D",
          fixedColor: "\u0424\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u0446\u0432\u0435\u0442",
          advanced: "\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u043D\u044B\u0435",
          tileX: "\u041F\u043B\u0438\u0442\u043A\u0430 X",
          tileY: "\u041F\u043B\u0438\u0442\u043A\u0430 Y",
          customPalette: "\u0421\u0432\u043E\u044F \u043F\u0430\u043B\u0438\u0442\u0440\u0430",
          paletteExample: "\u043F\u0440\u0438\u043C\u0435\u0440: #FF0000,#00FF00,#0000FF",
          capture: "\u0417\u0430\u0445\u0432\u0430\u0442",
          painted: "\u0417\u0430\u043A\u0440\u0430\u0448\u0435\u043D\u043E",
          charges: "\u0417\u0430\u0440\u044F\u0434\u044B",
          retries: "\u041F\u043E\u0432\u0442\u043E\u0440\u043D\u044B\u0435 \u043F\u043E\u043F\u044B\u0442\u043A\u0438",
          tile: "\u041F\u043B\u0438\u0442\u043A\u0430",
          configSaved: "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430",
          configLoaded: "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u0430",
          configReset: "\u0421\u0431\u0440\u043E\u0441 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",
          captureInstructions: "\u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432\u0440\u0443\u0447\u043D\u0443\u044E \u0434\u043B\u044F \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442...",
          backendOnline: "\u0411\u044D\u043A\u044D\u043D\u0434 \u041E\u043D\u043B\u0430\u0439\u043D",
          backendOffline: "\u0411\u044D\u043A\u044D\u043D\u0434 \u041E\u0444\u043B\u0430\u0439\u043D",
          startingBot: "\u0417\u0430\u043F\u0443\u0441\u043A \u0431\u043E\u0442\u0430...",
          stoppingBot: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0430 \u0431\u043E\u0442\u0430...",
          calibrating: "\u041A\u0430\u043B\u0438\u0431\u0440\u043E\u0432\u043A\u0430...",
          alreadyRunning: "\u0410\u0432\u0442\u043E-\u0424\u0430\u0440\u043C \u0443\u0436\u0435 \u0437\u0430\u043F\u0443\u0449\u0435\u043D",
          imageRunningWarning: "\u0410\u0432\u0442\u043E-\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0437\u0430\u043F\u0443\u0449\u0435\u043D\u043E. \u0417\u0430\u043A\u0440\u043E\u0439\u0442\u0435 \u0435\u0433\u043E \u043F\u0435\u0440\u0435\u0434 \u0437\u0430\u043F\u0443\u0441\u043A\u043E\u043C \u0410\u0432\u0442\u043E-\u0424\u0430\u0440\u043C\u0430.",
          selectPosition: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C",
          selectPositionAlert: "\u{1F3AF} \u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432 \u041F\u0423\u0421\u0422\u041E\u0419 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u043A\u0430\u0440\u0442\u044B, \u0447\u0442\u043E\u0431\u044B \u043E\u0431\u043E\u0437\u043D\u0430\u0447\u0438\u0442\u044C \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u0444\u0430\u0440\u043C\u0430.",
          waitingPosition: "\u{1F446} \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0441\u0442\u0430\u0440\u0442\u043E\u0432\u043E\u0433\u043E \u043F\u0438\u043A\u0441\u0435\u043B\u044F....",
          positionSet: "\u2705 \u041E\u0431\u043B\u0430\u0441\u0442\u044C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0430! \u0420\u0430\u0434\u0438\u0443\u0441: 500px",
          positionTimeout: "\u274C \u0422\u0430\u0439\u043C\u0430\u0443\u0442 \u0432\u044B\u0431\u043E\u0440\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          missingPosition: "\u274C \u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u0441 \u043F\u043E\u043C\u043E\u0449\u044C\u044E \xAB\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u043E\u0431\u043B\u0430\u0441\u0442\u044C\xBB",
          farmRadius: "\u0420\u0430\u0434\u0438\u0443\u0441 \u0444\u0430\u0440\u043C\u0430",
          positionInfo: "\u0422\u0435\u043A\u0443\u0449\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C",
          farmingInRadius: "\u{1F33E} \u0424\u0430\u0440\u043C \u0432 \u0440\u0430\u0434\u0438\u0443\u0441\u0435 {radius}px \u043E\u0442 ({x},{y})",
          selectEmptyArea: "\u26A0\uFE0F \u0412\u0410\u0416\u041D\u041E: \u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u041F\u0423\u0421\u0422\u0423\u042E \u043E\u0431\u043B\u0430\u0441\u0442\u044C, \u0447\u0442\u043E\u0431\u044B \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044C \u043A\u043E\u043D\u0444\u043B\u0438\u043A\u0442\u043E\u0432.",
          noPosition: "\u041D\u0435\u0442 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          currentZone: "\u041E\u0431\u043B\u0430\u0441\u0442\u044C: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} \u0421\u043D\u0430\u0447\u0430\u043B\u0430 \u0432\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u0431\u043B\u0430\u0441\u0442\u044C. \u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u043D\u0430 \u043A\u0430\u0440\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u043E\u0431\u043E\u0437\u043D\u0430\u0447\u0438\u0442\u044C \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u0444\u0430\u0440\u043C\u0430.",
          logWindow: "Logs",
          logWindowTitle: "\u041B\u043E\u0433\u0438 - {botName}",
          downloadLogs: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u041B\u043E\u0433\u0438",
          clearLogs: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u041B\u043E\u0433\u0438",
          closeLogs: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
        },
        // Common/Shared
        common: {
          yes: "\u0414\u0430",
          no: "\u041D\u0435\u0442",
          ok: "\u041E\u041A",
          cancel: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C",
          close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
          save: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C",
          load: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C",
          delete: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
          edit: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C",
          start: "\u041D\u0430\u0447\u0430\u0442\u044C",
          stop: "\u0417\u0430\u043A\u043E\u043D\u0447\u0438\u0442\u044C",
          pause: "\u041F\u0440\u0438\u043E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C",
          resume: "\u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C",
          reset: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C",
          settings: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
          help: "\u041F\u043E\u043C\u043E\u0449\u044C",
          about: "\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F",
          language: "\u042F\u0437\u044B\u043A",
          loading: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...",
          error: "\u041E\u0448\u0438\u0431\u043A\u0430",
          success: "\u0423\u0441\u043F\u0435\u0445",
          warning: "\u041F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0435\u043D\u0438\u0435",
          info: "\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F",
          languageChanged: "\u042F\u0437\u044B\u043A \u0438\u0437\u043C\u0435\u043D\u0435\u043D \u043D\u0430 {language}"
        },
        // Guard Module
        guard: {
          title: "WPlace \u0410\u0432\u0442\u043E-\u0417\u0430\u0449\u0438\u0442\u0430",
          initBot: "\u0418\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u0442\u044C Guard-BOT",
          selectArea: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u041E\u0431\u043B\u0430\u0441\u0442\u044C",
          captureArea: "\u0417\u0430\u0445\u0432\u0430\u0442\u0438\u0442\u044C \u041E\u0431\u043B\u0430\u0441\u0442\u044C",
          startProtection: "\u041D\u0430\u0447\u0430\u0442\u044C \u0417\u0430\u0449\u0438\u0442\u0443",
          stopProtection: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0417\u0430\u0449\u0438\u0442\u0443",
          upperLeft: "\u0412\u0435\u0440\u0445\u043D\u0438\u0439 \u041B\u0435\u0432\u044B\u0439 \u0423\u0433\u043E\u043B",
          lowerRight: "\u041D\u0438\u0436\u043D\u0438\u0439 \u041F\u0440\u0430\u0432\u044B\u0439 \u0423\u0433\u043E\u043B",
          protectedPixels: "\u0417\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u044B\u0435 \u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          detectedChanges: "\u041E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043D\u044B\u0435 \u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F",
          repairedPixels: "\u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043D\u044B\u0435 \u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          charges: "\u0417\u0430\u0440\u044F\u0434\u044B",
          waitingInit: "\u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438...",
          checkingColors: "\u{1F3A8} \u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0446\u0432\u0435\u0442\u043E\u0432...",
          noColorsFound: "\u274C \u0426\u0432\u0435\u0442\u0430 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u044B. \u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u043F\u0430\u043B\u0438\u0442\u0440\u0443 \u0446\u0432\u0435\u0442\u043E\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0435.",
          colorsFound: "\u2705 \u041D\u0430\u0439\u0434\u0435\u043D\u043E {count} \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0446\u0432\u0435\u0442\u043E\u0432",
          initSuccess: "\u2705 Guard-BOT \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u043D",
          initError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 Guard-BOT",
          invalidCoords: "\u274C \u041D\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\u044B",
          invalidArea: "\u274C \u041E\u0431\u043B\u0430\u0441\u0442\u044C \u0434\u043E\u043B\u0436\u043D\u0430 \u0438\u043C\u0435\u0442\u044C \u0432\u0435\u0440\u0445\u043D\u0438\u0439 \u043B\u0435\u0432\u044B\u0439 \u0443\u0433\u043E\u043B \u043C\u0435\u043D\u044C\u0448\u0435 \u043D\u0438\u0436\u043D\u0435\u0433\u043E \u043F\u0440\u0430\u0432\u043E\u0433\u043E \u0443\u0433\u043B\u0430",
          areaTooLarge: "\u274C \u041E\u0431\u043B\u0430\u0441\u0442\u044C \u0441\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u0430\u044F: {size} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 (\u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C: {max})",
          capturingArea: "\u{1F4F8} \u0417\u0430\u0445\u0432\u0430\u0442 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u0437\u0430\u0449\u0438\u0442\u044B...",
          areaCaptured: "\u2705 \u041E\u0431\u043B\u0430\u0441\u0442\u044C \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043D\u0430: {count} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u043F\u043E\u0434 \u0437\u0430\u0449\u0438\u0442\u043E\u0439",
          captureError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u0438: {error}",
          captureFirst: "\u274C \u0421\u043D\u0430\u0447\u0430\u043B\u0430 \u0437\u0430\u0445\u0432\u0430\u0442\u0438\u0442\u0435 \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u0437\u0430\u0449\u0438\u0442\u044B",
          protectionStarted: "\u{1F6E1}\uFE0F \u0417\u0430\u0449\u0438\u0442\u0430 \u0437\u0430\u043F\u0443\u0449\u0435\u043D\u0430 - \u043C\u043E\u043D\u0438\u0442\u043E\u0440\u0438\u043D\u0433 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          protectionStopped: "\u23F9\uFE0F \u0417\u0430\u0449\u0438\u0442\u0430 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0430",
          noChanges: "\u2705 \u0417\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C - \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u043D\u0435 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E",
          changesDetected: "\u{1F6A8} {count} \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E \u0432 \u0437\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u043E\u0439 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          repairing: "\u{1F6E0}\uFE0F \u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 {count} \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u043D\u044B\u0445 \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439...",
          repairedSuccess: "\u2705 \u0423\u0441\u043F\u0435\u0448\u043D\u043E \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E {count} \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439",
          repairError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u043F\u0438\u043A\u0441\u0435\u043B\u0435\u0439: {error}",
          noCharges: "\u26A0\uFE0F \u041D\u0435\u0434\u043E\u0441\u0442\u0430\u0442\u043E\u0447\u043D\u043E \u0437\u0430\u0440\u044F\u0434\u043E\u0432 \u0434\u043B\u044F \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439",
          checkingChanges: "\u{1F50D} \u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u0432 \u0437\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u043E\u0439 \u043E\u0431\u043B\u0430\u0441\u0442\u0438...",
          errorChecking: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439: {error}",
          guardActive: "\u{1F6E1}\uFE0F \u0421\u0442\u0440\u0430\u0436 \u0430\u043A\u0442\u0438\u0432\u0435\u043D - \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u043F\u043E\u0434 \u0437\u0430\u0449\u0438\u0442\u043E\u0439",
          lastCheck: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u044F\u044F \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0430: {time}",
          nextCheck: "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0447\u0435\u0440\u0435\u0437: {time}\u0441",
          autoInitializing: "\u{1F916} \u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F...",
          autoInitSuccess: "\u2705 Guard-BOT \u0437\u0430\u043F\u0443\u0449\u0435\u043D \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438",
          autoInitFailed: "\u26A0\uFE0F \u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438. \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u043A\u043D\u043E\u043F\u043A\u0443 \u0440\u0443\u0447\u043D\u043E\u0433\u043E \u0437\u0430\u043F\u0443\u0441\u043A\u0430.",
          manualInitRequired: "\u{1F527} \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F \u0440\u0443\u0447\u043D\u0430\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F",
          paletteDetected: "\u{1F3A8} \u0426\u0432\u0435\u0442\u043E\u0432\u0430\u044F \u043F\u0430\u043B\u0438\u0442\u0440\u0430 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u0430",
          paletteNotFound: "\u{1F50D} \u041F\u043E\u0438\u0441\u043A \u0446\u0432\u0435\u0442\u043E\u0432\u043E\u0439 \u043F\u0430\u043B\u0438\u0442\u0440\u044B...",
          clickingPaintButton: "\u{1F446} \u041D\u0430\u0436\u0430\u0442\u0438\u0435 \u043A\u043D\u043E\u043F\u043A\u0438 \xABPaint\xBB...",
          paintButtonNotFound: "\u274C \u041A\u043D\u043E\u043F\u043A\u0430 \xABPaint\xBB \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430",
          selectUpperLeft: "\u{1F3AF} \u041D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432 \u0412\u0415\u0420\u0425\u041D\u0415\u041C \u041B\u0415\u0412\u041E\u041C \u0443\u0433\u043B\u0443 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u0434\u043B\u044F \u0437\u0430\u0449\u0438\u0442\u044B",
          selectLowerRight: "\u{1F3AF} \u0422\u0435\u043F\u0435\u0440\u044C \u043D\u0430\u0440\u0438\u0441\u0443\u0439\u0442\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u044C \u0432 \u041D\u0418\u0416\u041D\u0415\u041C \u041F\u0420\u0410\u0412\u041E\u041C \u0443\u0433\u043B\u0443 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
          waitingUpperLeft: "\u{1F446} \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0432\u044B\u0431\u043E\u0440\u0430 \u0432\u0435\u0440\u0445\u043D\u0435\u0433\u043E \u043B\u0435\u0432\u043E\u0433\u043E \u0443\u0433\u043B\u0430...",
          waitingLowerRight: "\u{1F446} \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0432\u044B\u0431\u043E\u0440\u0430 \u043D\u0438\u0436\u043D\u0435\u0433\u043E \u043F\u0440\u0430\u0432\u043E\u0433\u043E \u0443\u0433\u043B\u0430...",
          upperLeftCaptured: "\u2705 \u0412\u0435\u0440\u0445\u043D\u0438\u0439 \u043B\u0435\u0432\u044B\u0439 \u0443\u0433\u043E\u043B \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043D: ({x}, {y})",
          lowerRightCaptured: "\u2705 \u041D\u0438\u0436\u043D\u0438\u0439 \u043F\u0440\u0430\u0432\u044B\u0439 \u0443\u0433\u043E\u043B \u0437\u0430\u0445\u0432\u0430\u0447\u0435\u043D: ({x}, {y})",
          selectionTimeout: "\u274C \u0422\u0430\u0439\u043C-\u0430\u0443\u0442 \u0432\u044B\u0431\u043E\u0440\u0430",
          selectionError: "\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u044B\u0431\u043E\u0440\u0430, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043D\u043E\u0432\u0430",
          logWindow: "Logs",
          logWindowTitle: "\u041B\u043E\u0433\u0438 - {botName}",
          downloadLogs: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u041B\u043E\u0433\u0438",
          clearLogs: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u041B\u043E\u0433\u0438",
          closeLogs: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
          // Analysis Window
          analysisTitle: "\u0410\u043D\u0430\u043B\u0438\u0437 \u0420\u0430\u0437\u043B\u0438\u0447\u0438\u0439 - JSON vs \u0422\u0435\u043A\u0443\u0449\u0438\u0439 Canvas",
          correctPixels: "\u041F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u044B\u0435 \u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          incorrectPixels: "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u044B\u0435 \u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          missingPixels: "\u041E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0435 \u041F\u0438\u043A\u0441\u0435\u043B\u0438",
          showCorrect: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u041F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u044B\u0435",
          showIncorrect: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u044B\u0435",
          showMissing: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u041E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0435",
          autoRefresh: "\u0410\u0432\u0442\u043E-\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435",
          zoomAdjusted: "\u041C\u0430\u0441\u0448\u0442\u0430\u0431 \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043D \u043D\u0430",
          autoRefreshEnabled: "\u0410\u0432\u0442\u043E-\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u043E \u043A\u0430\u0436\u0434\u044B\u0435",
          autoRefreshDisabled: "\u0410\u0432\u0442\u043E-\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u043E",
          autoRefreshIntervalUpdated: "\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B \u0430\u0432\u0442\u043E-\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D \u0434\u043E",
          visualizationUpdated: "\u0412\u0438\u0437\u0443\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0430",
          // Config Window
          configTitle: "\u041A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F Guard",
          protectionPatterns: "\u0428\u0430\u0431\u043B\u043E\u043D\u044B \u0417\u0430\u0449\u0438\u0442\u044B",
          preferSpecificColor: "\u041F\u0440\u0438\u043E\u0440\u0438\u0442\u0435\u0442 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u043E\u0433\u043E \u0446\u0432\u0435\u0442\u0430",
          excludeSpecificColors: "\u041D\u0435 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u0430\u0432\u043B\u0438\u0432\u0430\u0442\u044C \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0435 \u0446\u0432\u0435\u0442\u0430",
          loadManagement: "\u0423\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u041D\u0430\u0433\u0440\u0443\u0437\u043A\u043E\u0439",
          minLoadsToWait: "\u041C\u0438\u043D\u0438\u043C\u0443\u043C \u0437\u0430\u0433\u0440\u0443\u0437\u043E\u043A \u0434\u043B\u044F \u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F",
          pixelsPerBatch: "\u041F\u0438\u043A\u0441\u0435\u043B\u0435\u0439 \u0437\u0430 \u043F\u0430\u0440\u0442\u0438\u044E",
          spendAllPixelsOnStart: "\u041F\u043E\u0442\u0440\u0430\u0442\u0438\u0442\u044C \u0432\u0441\u0435 \u043F\u0438\u043A\u0441\u0435\u043B\u0438 \u043F\u0440\u0438 \u0437\u0430\u043F\u0443\u0441\u043A\u0435",
          waitTimes: "\u0412\u0440\u0435\u043C\u044F \u041E\u0436\u0438\u0434\u0430\u043D\u0438\u044F",
          useRandomTimes: "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0441\u043B\u0443\u0447\u0430\u0439\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F \u043C\u0435\u0436\u0434\u0443 \u043F\u0430\u0440\u0442\u0438\u044F\u043C\u0438",
          minTime: "\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F (\u0441)",
          maxTime: "\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F (\u0441)"
        }
      };
    }
  });

  // src/locales/zh-Hans.js
  var zhHans;
  var init_zh_Hans = __esm({
    "src/locales/zh-Hans.js"() {
      zhHans = {
        // 启动器
        launcher: {
          title: "WPlace \u81EA\u52A8\u673A\u5668\u4EBA",
          autoFarm: "\u{1F33E} \u81EA\u52A8\u519C\u573A",
          autoImage: "\u{1F3A8} \u81EA\u52A8\u7ED8\u56FE",
          autoGuard: "\u{1F6E1}\uFE0F \u81EA\u52A8\u5B88\u62A4",
          selection: "\u9009\u62E9",
          user: "\u7528\u6237",
          charges: "\u6B21\u6570",
          backend: "\u540E\u7AEF",
          database: "\u6570\u636E\u5E93",
          uptime: "\u8FD0\u884C\u65F6\u95F4",
          close: "\u5173\u95ED",
          launch: "\u542F\u52A8",
          loading: "\u52A0\u8F7D\u4E2D\u2026",
          executing: "\u6267\u884C\u4E2D\u2026",
          downloading: "\u6B63\u5728\u4E0B\u8F7D\u811A\u672C\u2026",
          chooseBot: "\u9009\u62E9\u4E00\u4E2A\u673A\u5668\u4EBA\u5E76\u70B9\u51FB\u542F\u52A8",
          readyToLaunch: "\u51C6\u5907\u542F\u52A8",
          loadError: "\u52A0\u8F7D\u9519\u8BEF",
          loadErrorMsg: "\u65E0\u6CD5\u52A0\u8F7D\u6240\u9009\u673A\u5668\u4EBA\u3002\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5\u6216\u91CD\u8BD5\u3002",
          checking: "\u{1F504} \u68C0\u67E5\u4E2D...",
          online: "\u{1F7E2} \u5728\u7EBF",
          offline: "\u{1F534} \u79BB\u7EBF",
          ok: "\u{1F7E2} \u6B63\u5E38",
          error: "\u{1F534} \u9519\u8BEF",
          unknown: "-",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u5FD7\u7A97\u53E3",
          downloadLogs: "\u4E0B\u8F7D\u65E5\u5FD7",
          clearLogs: "\u6E05\u9664\u65E5\u5FD7",
          closeLogs: "\u5173\u95ED"
        },
        // 绘图模块
        image: {
          title: "WPlace \u81EA\u52A8\u7ED8\u56FE",
          initBot: "\u521D\u59CB\u5316\u81EA\u52A8\u673A\u5668\u4EBA",
          uploadImage: "\u4E0A\u4F20\u56FE\u7247",
          resizeImage: "\u8C03\u6574\u56FE\u7247\u5927\u5C0F",
          selectPosition: "\u9009\u62E9\u4F4D\u7F6E",
          startPainting: "\u5F00\u59CB\u7ED8\u5236",
          stopPainting: "\u505C\u6B62\u7ED8\u5236",
          saveProgress: "\u4FDD\u5B58\u8FDB\u5EA6",
          loadProgress: "\u52A0\u8F7D\u8FDB\u5EA6",
          checkingColors: "\u{1F50D} \u68C0\u67E5\u53EF\u7528\u989C\u8272...",
          noColorsFound: "\u274C \u8BF7\u5728\u7F51\u7AD9\u4E0A\u6253\u5F00\u8C03\u8272\u677F\u540E\u91CD\u8BD5\uFF01",
          colorsFound: "\u2705 \u627E\u5230 {count} \u79CD\u53EF\u7528\u989C\u8272",
          loadingImage: "\u{1F5BC}\uFE0F \u6B63\u5728\u52A0\u8F7D\u56FE\u7247...",
          imageLoaded: "\u2705 \u56FE\u7247\u5DF2\u52A0\u8F7D\uFF0C\u6709\u6548\u50CF\u7D20 {count} \u4E2A",
          imageError: "\u274C \u56FE\u7247\u52A0\u8F7D\u5931\u8D25",
          selectPositionAlert: "\u8BF7\u5728\u4F60\u60F3\u5F00\u59CB\u7ED8\u5236\u7684\u5730\u65B9\u6D82\u7B2C\u4E00\u4E2A\u50CF\u7D20\uFF01",
          waitingPosition: "\u{1F446} \u7B49\u5F85\u4F60\u6D82\u53C2\u8003\u50CF\u7D20...",
          positionSet: "\u2705 \u4F4D\u7F6E\u8BBE\u7F6E\u6210\u529F\uFF01",
          positionTimeout: "\u274C \u4F4D\u7F6E\u9009\u62E9\u8D85\u65F6",
          positionDetected: "\u{1F3AF} \u5DF2\u68C0\u6D4B\u5230\u4F4D\u7F6E\uFF0C\u5904\u7406\u4E2D...",
          positionError: "\u274C \u4F4D\u7F6E\u68C0\u6D4B\u5931\u8D25\uFF0C\u8BF7\u91CD\u8BD5",
          startPaintingMsg: "\u{1F3A8} \u5F00\u59CB\u7ED8\u5236...",
          paintingProgress: "\u{1F9F1} \u8FDB\u5EA6: {painted}/{total} \u50CF\u7D20...",
          noCharges: "\u231B \u6CA1\u6709\u6B21\u6570\u3002\u7B49\u5F85 {time}...",
          paintingStopped: "\u23F9\uFE0F \u7528\u6237\u5DF2\u505C\u6B62\u7ED8\u5236",
          paintingComplete: "\u2705 \u7ED8\u5236\u5B8C\u6210\uFF01\u5171\u7ED8\u5236 {count} \u4E2A\u50CF\u7D20\u3002",
          paintingError: "\u274C \u7ED8\u5236\u8FC7\u7A0B\u4E2D\u51FA\u9519",
          missingRequirements: "\u274C \u8BF7\u5148\u52A0\u8F7D\u56FE\u7247\u5E76\u9009\u62E9\u4F4D\u7F6E",
          progress: "\u8FDB\u5EA6",
          userName: "\u7528\u6237",
          pixels: "\u50CF\u7D20",
          charges: "\u6B21\u6570",
          estimatedTime: "\u9884\u8BA1\u65F6\u95F4",
          initMessage: "\u70B9\u51FB\u201C\u521D\u59CB\u5316\u81EA\u52A8\u673A\u5668\u4EBA\u201D\u5F00\u59CB",
          waitingInit: "\u7B49\u5F85\u521D\u59CB\u5316...",
          resizeSuccess: "\u2705 \u56FE\u7247\u5DF2\u8C03\u6574\u4E3A {width}x{height}",
          paintingPaused: "\u23F8\uFE0F \u7ED8\u5236\u6682\u505C\u4E8E\u4F4D\u7F6E X: {x}, Y: {y}",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20\u6570",
          batchSize: "\u6279\u6B21\u5927\u5C0F",
          nextBatchTime: "\u4E0B\u6B21\u6279\u6B21\u65F6\u95F4",
          useAllCharges: "\u4F7F\u7528\u6240\u6709\u53EF\u7528\u6B21\u6570",
          showOverlay: "\u663E\u793A\u8986\u76D6\u5C42",
          maxCharges: "\u6BCF\u6279\u6700\u5927\u6B21\u6570",
          waitingForCharges: "\u23F3 \u7B49\u5F85\u6B21\u6570: {current}/{needed}",
          timeRemaining: "\u5269\u4F59\u65F6\u95F4",
          cooldownWaiting: "\u23F3 \u7B49\u5F85 {time} \u540E\u7EE7\u7EED...",
          progressSaved: "\u2705 \u8FDB\u5EA6\u5DF2\u4FDD\u5B58\u4E3A {filename}",
          progressLoaded: "\u2705 \u5DF2\u52A0\u8F7D\u8FDB\u5EA6: {painted}/{total} \u50CF\u7D20\u5DF2\u7ED8\u5236",
          progressLoadError: "\u274C \u52A0\u8F7D\u8FDB\u5EA6\u5931\u8D25: {error}",
          progressSaveError: "\u274C \u4FDD\u5B58\u8FDB\u5EA6\u5931\u8D25: {error}",
          confirmSaveProgress: "\u5728\u505C\u6B62\u4E4B\u524D\u8981\u4FDD\u5B58\u5F53\u524D\u8FDB\u5EA6\u5417\uFF1F",
          saveProgressTitle: "\u4FDD\u5B58\u8FDB\u5EA6",
          discardProgress: "\u653E\u5F03",
          cancel: "\u53D6\u6D88",
          minimize: "\u6700\u5C0F\u5316",
          width: "\u5BBD\u5EA6",
          height: "\u9AD8\u5EA6",
          keepAspect: "\u4FDD\u6301\u7EB5\u6A2A\u6BD4",
          apply: "\u5E94\u7528",
          overlayOn: "\u8986\u76D6\u5C42: \u5F00\u542F",
          overlayOff: "\u8986\u76D6\u5C42: \u5173\u95ED",
          passCompleted: "\u2705 \u6279\u6B21\u5B8C\u6210: \u5DF2\u7ED8\u5236 {painted} \u50CF\u7D20 | \u8FDB\u5EA6: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 \u7B49\u5F85\u6B21\u6570\u6062\u590D: {current}/{needed} - \u65F6\u95F4: {time}",
          waitingChargesCountdown: "\u23F3 \u7B49\u5F85\u6B21\u6570: {current}/{needed} - \u5269\u4F59: {time}",
          autoInitializing: "\u{1F916} \u6B63\u5728\u81EA\u52A8\u521D\u59CB\u5316...",
          autoInitSuccess: "\u2705 \u81EA\u52A8\u542F\u52A8\u6210\u529F",
          autoInitFailed: "\u26A0\uFE0F \u65E0\u6CD5\u81EA\u52A8\u542F\u52A8\uFF0C\u8BF7\u624B\u52A8\u64CD\u4F5C\u3002",
          paletteDetected: "\u{1F3A8} \u5DF2\u68C0\u6D4B\u5230\u8C03\u8272\u677F",
          paletteNotFound: "\u{1F50D} \u6B63\u5728\u641C\u7D22\u8C03\u8272\u677F...",
          clickingPaintButton: "\u{1F446} \u6B63\u5728\u70B9\u51FB\u7ED8\u5236\u6309\u94AE...",
          paintButtonNotFound: "\u274C \u672A\u627E\u5230\u7ED8\u5236\u6309\u94AE",
          manualInitRequired: "\u{1F527} \u9700\u8981\u624B\u52A8\u521D\u59CB\u5316",
          retryAttempt: "\u{1F504} \u91CD\u8BD5 {attempt}/{maxAttempts}\uFF0C\u7B49\u5F85 {delay} \u79D2...",
          retryError: "\u{1F4A5} \u7B2C {attempt}/{maxAttempts} \u6B21\u5C1D\u8BD5\u51FA\u9519\uFF0C\u5C06\u5728 {delay} \u79D2\u540E\u91CD\u8BD5...",
          retryFailed: "\u274C \u8D85\u8FC7 {maxAttempts} \u6B21\u5C1D\u8BD5\u5931\u8D25\u3002\u7EE7\u7EED\u4E0B\u4E00\u6279...",
          networkError: "\u{1F310} \u7F51\u7EDC\u9519\u8BEF\uFF0C\u6B63\u5728\u91CD\u8BD5...",
          serverError: "\u{1F525} \u670D\u52A1\u5668\u9519\u8BEF\uFF0C\u6B63\u5728\u91CD\u8BD5...",
          timeoutError: "\u23F0 \u670D\u52A1\u5668\u8D85\u65F6\uFF0C\u6B63\u5728\u91CD\u8BD5...",
          // v2.0 - 保护与绘制模式
          protectionEnabled: "\u5DF2\u5F00\u542F\u4FDD\u62A4",
          protectionDisabled: "\u5DF2\u5173\u95ED\u4FDD\u62A4",
          paintPattern: "\u7ED8\u5236\u6A21\u5F0F",
          patternLinearStart: "\u7EBF\u6027\uFF08\u8D77\u70B9\uFF09",
          patternLinearEnd: "\u7EBF\u6027\uFF08\u7EC8\u70B9\uFF09",
          patternRandom: "\u968F\u673A",
          patternCenterOut: "\u4ECE\u4E2D\u5FC3\u5411\u5916",
          patternCornersFirst: "\u5148\u89D2\u843D",
          patternSpiral: "\u87BA\u65CB",
          solid: "\u5B9E\u5FC3",
          stripes: "\u6761\u7EB9",
          checkerboard: "\u68CB\u76D8\u683C",
          gradient: "\u6E10\u53D8",
          dots: "\u70B9\u72B6",
          waves: "\u6CE2\u6D6A",
          spiral: "\u87BA\u65CB",
          mosaic: "\u9A6C\u8D5B\u514B",
          bricks: "\u7816\u5757",
          zigzag: "\u4E4B\u5B57\u5F62",
          protectingDrawing: "\u6B63\u5728\u4FDD\u62A4\u56FE\u7A3F...",
          changesDetected: "\u{1F6A8} \u68C0\u6D4B\u5230 {count} \u5904\u66F4\u6539",
          repairing: "\u{1F527} \u6B63\u5728\u4FEE\u590D {count} \u4E2A\u66F4\u6539\u7684\u50CF\u7D20...",
          repairCompleted: "\u2705 \u4FEE\u590D\u5B8C\u6210\uFF1A{count} \u4E2A\u50CF\u7D20",
          noChargesForRepair: "\u26A1 \u4FEE\u590D\u4E0D\u6D88\u8017\u70B9\u6570\uFF0C\u7B49\u5F85\u4E2D...",
          protectionPriority: "\u{1F6E1}\uFE0F \u5DF2\u542F\u7528\u4FDD\u62A4\u4F18\u5148",
          patternApplied: "\u5DF2\u5E94\u7528\u6A21\u5F0F",
          customPattern: "\u81EA\u5B9A\u4E49\u6A21\u5F0F",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u5FD7\u7A97\u53E3",
          downloadLogs: "\u4E0B\u8F7D\u65E5\u5FD7",
          clearLogs: "\u6E05\u9664\u65E5\u5FD7",
          closeLogs: "\u5173\u95ED"
        },
        // 农场模块（待实现）
        farm: {
          title: "WPlace \u519C\u573A\u673A\u5668\u4EBA",
          start: "\u5F00\u59CB",
          stop: "\u505C\u6B62",
          stopped: "\u673A\u5668\u4EBA\u5DF2\u505C\u6B62",
          calibrate: "\u6821\u51C6",
          paintOnce: "\u4E00\u6B21",
          checkingStatus: "\u68C0\u67E5\u72B6\u6001\u4E2D...",
          configuration: "\u914D\u7F6E",
          delay: "\u5EF6\u8FDF (\u6BEB\u79D2)",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20",
          minCharges: "\u6700\u5C11\u6B21\u6570",
          colorMode: "\u989C\u8272\u6A21\u5F0F",
          random: "\u968F\u673A",
          fixed: "\u56FA\u5B9A",
          range: "\u8303\u56F4",
          fixedColor: "\u56FA\u5B9A\u989C\u8272",
          advanced: "\u9AD8\u7EA7",
          tileX: "\u74E6\u7247 X",
          tileY: "\u74E6\u7247 Y",
          customPalette: "\u81EA\u5B9A\u4E49\u8C03\u8272\u677F",
          paletteExample: "\u4F8B\u5982: #FF0000,#00FF00,#0000FF",
          capture: "\u6355\u83B7",
          painted: "\u5DF2\u7ED8\u5236",
          charges: "\u6B21\u6570",
          retries: "\u91CD\u8BD5",
          tile: "\u74E6\u7247",
          configSaved: "\u914D\u7F6E\u5DF2\u4FDD\u5B58",
          configLoaded: "\u914D\u7F6E\u5DF2\u52A0\u8F7D",
          configReset: "\u914D\u7F6E\u5DF2\u91CD\u7F6E",
          captureInstructions: "\u8BF7\u624B\u52A8\u7ED8\u5236\u4E00\u4E2A\u50CF\u7D20\u4EE5\u6355\u83B7\u5750\u6807...",
          backendOnline: "\u540E\u7AEF\u5728\u7EBF",
          backendOffline: "\u540E\u7AEF\u79BB\u7EBF",
          startingBot: "\u6B63\u5728\u542F\u52A8\u673A\u5668\u4EBA...",
          stoppingBot: "\u6B63\u5728\u505C\u6B62\u673A\u5668\u4EBA...",
          calibrating: "\u6821\u51C6\u4E2D...",
          alreadyRunning: "\u81EA\u52A8\u519C\u573A\u5DF2\u5728\u8FD0\u884C\u3002",
          imageRunningWarning: "\u81EA\u52A8\u7ED8\u56FE\u6B63\u5728\u8FD0\u884C\uFF0C\u8BF7\u5148\u5173\u95ED\u518D\u542F\u52A8\u81EA\u52A8\u519C\u573A\u3002",
          selectPosition: "\u9009\u62E9\u533A\u57DF",
          selectPositionAlert: "\u{1F3AF} \u5728\u5730\u56FE\u7684\u7A7A\u767D\u533A\u57DF\u6D82\u4E00\u4E2A\u50CF\u7D20\u4EE5\u8BBE\u7F6E\u519C\u573A\u533A\u57DF",
          waitingPosition: "\u{1F446} \u7B49\u5F85\u4F60\u6D82\u53C2\u8003\u50CF\u7D20...",
          positionSet: "\u2705 \u533A\u57DF\u8BBE\u7F6E\u6210\u529F\uFF01\u534A\u5F84: 500px",
          positionTimeout: "\u274C \u533A\u57DF\u9009\u62E9\u8D85\u65F6",
          missingPosition: "\u274C \u8BF7\u5148\u9009\u62E9\u533A\u57DF\uFF08\u4F7F\u7528\u201C\u9009\u62E9\u533A\u57DF\u201D\u6309\u94AE\uFF09",
          farmRadius: "\u519C\u573A\u534A\u5F84",
          positionInfo: "\u5F53\u524D\u533A\u57DF",
          farmingInRadius: "\u{1F33E} \u6B63\u5728\u4EE5\u534A\u5F84 {radius}px \u5728 ({x},{y}) \u519C\u573A",
          selectEmptyArea: "\u26A0\uFE0F \u91CD\u8981: \u8BF7\u9009\u62E9\u7A7A\u767D\u533A\u57DF\u4EE5\u907F\u514D\u51B2\u7A81",
          noPosition: "\u672A\u9009\u62E9\u533A\u57DF",
          currentZone: "\u533A\u57DF: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} \u8BF7\u5148\u9009\u62E9\u533A\u57DF\uFF0C\u5728\u5730\u56FE\u4E0A\u6D82\u4E00\u4E2A\u50CF\u7D20\u4EE5\u8BBE\u7F6E\u519C\u573A\u533A\u57DF",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u5FD7\u7A97\u53E3",
          downloadLogs: "\u4E0B\u8F7D\u65E5\u5FD7",
          clearLogs: "\u6E05\u9664\u65E5\u5FD7",
          closeLogs: "\u5173\u95ED"
        },
        // 公共
        common: {
          yes: "\u662F",
          no: "\u5426",
          ok: "\u786E\u8BA4",
          cancel: "\u53D6\u6D88",
          close: "\u5173\u95ED",
          save: "\u4FDD\u5B58",
          load: "\u52A0\u8F7D",
          delete: "\u5220\u9664",
          edit: "\u7F16\u8F91",
          start: "\u5F00\u59CB",
          stop: "\u505C\u6B62",
          pause: "\u6682\u505C",
          resume: "\u7EE7\u7EED",
          reset: "\u91CD\u7F6E",
          settings: "\u8BBE\u7F6E",
          help: "\u5E2E\u52A9",
          about: "\u5173\u4E8E",
          language: "\u8BED\u8A00",
          loading: "\u52A0\u8F7D\u4E2D...",
          error: "\u9519\u8BEF",
          success: "\u6210\u529F",
          warning: "\u8B66\u544A",
          info: "\u4FE1\u606F",
          languageChanged: "\u8BED\u8A00\u5DF2\u5207\u6362\u4E3A {language}"
        },
        // 守护模块
        guard: {
          title: "WPlace \u81EA\u52A8\u5B88\u62A4",
          initBot: "\u521D\u59CB\u5316\u5B88\u62A4\u673A\u5668\u4EBA",
          selectArea: "\u9009\u62E9\u533A\u57DF",
          captureArea: "\u6355\u83B7\u533A\u57DF",
          startProtection: "\u5F00\u59CB\u5B88\u62A4",
          stopProtection: "\u505C\u6B62\u5B88\u62A4",
          upperLeft: "\u5DE6\u4E0A\u89D2",
          lowerRight: "\u53F3\u4E0B\u89D2",
          protectedPixels: "\u53D7\u4FDD\u62A4\u50CF\u7D20",
          detectedChanges: "\u68C0\u6D4B\u5230\u7684\u53D8\u5316",
          repairedPixels: "\u4FEE\u590D\u7684\u50CF\u7D20",
          charges: "\u6B21\u6570",
          waitingInit: "\u7B49\u5F85\u521D\u59CB\u5316...",
          checkingColors: "\u{1F3A8} \u68C0\u67E5\u53EF\u7528\u989C\u8272...",
          noColorsFound: "\u274C \u672A\u627E\u5230\u989C\u8272\uFF0C\u8BF7\u5728\u7F51\u7AD9\u4E0A\u6253\u5F00\u8C03\u8272\u677F\u3002",
          colorsFound: "\u2705 \u627E\u5230 {count} \u79CD\u53EF\u7528\u989C\u8272",
          initSuccess: "\u2705 \u5B88\u62A4\u673A\u5668\u4EBA\u521D\u59CB\u5316\u6210\u529F",
          initError: "\u274C \u5B88\u62A4\u673A\u5668\u4EBA\u521D\u59CB\u5316\u5931\u8D25",
          invalidCoords: "\u274C \u5750\u6807\u65E0\u6548",
          invalidArea: "\u274C \u533A\u57DF\u65E0\u6548\uFF0C\u5DE6\u4E0A\u89D2\u5FC5\u987B\u5C0F\u4E8E\u53F3\u4E0B\u89D2",
          areaTooLarge: "\u274C \u533A\u57DF\u8FC7\u5927: {size} \u50CF\u7D20 (\u6700\u5927: {max})",
          capturingArea: "\u{1F4F8} \u6355\u83B7\u5B88\u62A4\u533A\u57DF\u4E2D...",
          areaCaptured: "\u2705 \u533A\u57DF\u6355\u83B7\u6210\u529F: {count} \u50CF\u7D20\u53D7\u4FDD\u62A4",
          captureError: "\u274C \u6355\u83B7\u533A\u57DF\u51FA\u9519: {error}",
          captureFirst: "\u274C \u8BF7\u5148\u6355\u83B7\u4E00\u4E2A\u5B88\u62A4\u533A\u57DF",
          protectionStarted: "\u{1F6E1}\uFE0F \u5B88\u62A4\u5DF2\u542F\u52A8 - \u533A\u57DF\u76D1\u63A7\u4E2D",
          protectionStopped: "\u23F9\uFE0F \u5B88\u62A4\u5DF2\u505C\u6B62",
          noChanges: "\u2705 \u533A\u57DF\u5B89\u5168 - \u672A\u68C0\u6D4B\u5230\u53D8\u5316",
          changesDetected: "\u{1F6A8} \u68C0\u6D4B\u5230 {count} \u4E2A\u53D8\u5316",
          repairing: "\u{1F6E0}\uFE0F \u6B63\u5728\u4FEE\u590D {count} \u4E2A\u50CF\u7D20...",
          repairedSuccess: "\u2705 \u5DF2\u6210\u529F\u4FEE\u590D {count} \u4E2A\u50CF\u7D20",
          repairError: "\u274C \u4FEE\u590D\u51FA\u9519: {error}",
          noCharges: "\u26A0\uFE0F \u6B21\u6570\u4E0D\u8DB3\uFF0C\u65E0\u6CD5\u4FEE\u590D",
          checkingChanges: "\u{1F50D} \u6B63\u5728\u68C0\u67E5\u533A\u57DF\u53D8\u5316...",
          errorChecking: "\u274C \u68C0\u67E5\u51FA\u9519: {error}",
          guardActive: "\u{1F6E1}\uFE0F \u5B88\u62A4\u4E2D - \u533A\u57DF\u53D7\u4FDD\u62A4",
          lastCheck: "\u4E0A\u6B21\u68C0\u67E5: {time}",
          nextCheck: "\u4E0B\u6B21\u68C0\u67E5: {time} \u79D2\u540E",
          autoInitializing: "\u{1F916} \u6B63\u5728\u81EA\u52A8\u521D\u59CB\u5316...",
          autoInitSuccess: "\u2705 \u81EA\u52A8\u542F\u52A8\u6210\u529F",
          autoInitFailed: "\u26A0\uFE0F \u65E0\u6CD5\u81EA\u52A8\u542F\u52A8\uFF0C\u8BF7\u624B\u52A8\u64CD\u4F5C\u3002",
          manualInitRequired: "\u{1F527} \u9700\u8981\u624B\u52A8\u521D\u59CB\u5316",
          paletteDetected: "\u{1F3A8} \u5DF2\u68C0\u6D4B\u5230\u8C03\u8272\u677F",
          paletteNotFound: "\u{1F50D} \u6B63\u5728\u641C\u7D22\u8C03\u8272\u677F...",
          clickingPaintButton: "\u{1F446} \u6B63\u5728\u70B9\u51FB\u7ED8\u5236\u6309\u94AE...",
          paintButtonNotFound: "\u274C \u672A\u627E\u5230\u7ED8\u5236\u6309\u94AE",
          selectUpperLeft: "\u{1F3AF} \u5728\u9700\u8981\u4FDD\u62A4\u533A\u57DF\u7684\u5DE6\u4E0A\u89D2\u6D82\u4E00\u4E2A\u50CF\u7D20",
          selectLowerRight: "\u{1F3AF} \u73B0\u5728\u5728\u53F3\u4E0B\u89D2\u6D82\u4E00\u4E2A\u50CF\u7D20",
          waitingUpperLeft: "\u{1F446} \u7B49\u5F85\u9009\u62E9\u5DE6\u4E0A\u89D2...",
          waitingLowerRight: "\u{1F446} \u7B49\u5F85\u9009\u62E9\u53F3\u4E0B\u89D2...",
          upperLeftCaptured: "\u2705 \u5DF2\u6355\u83B7\u5DE6\u4E0A\u89D2: ({x}, {y})",
          lowerRightCaptured: "\u2705 \u5DF2\u6355\u83B7\u53F3\u4E0B\u89D2: ({x}, {y})",
          selectionTimeout: "\u274C \u9009\u62E9\u8D85\u65F6",
          selectionError: "\u274C \u9009\u62E9\u51FA\u9519\uFF0C\u8BF7\u91CD\u8BD5",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u5FD7\u7A97\u53E3",
          downloadLogs: "\u4E0B\u8F7D\u65E5\u5FD7",
          clearLogs: "\u6E05\u9664\u65E5\u5FD7",
          closeLogs: "\u5173\u95ED",
          // Analysis Window
          analysisTitle: "\u5DEE\u5F02\u5206\u6790 - JSON vs \u5F53\u524D\u753B\u5E03",
          correctPixels: "\u6B63\u786E\u50CF\u7D20",
          incorrectPixels: "\u9519\u8BEF\u50CF\u7D20",
          missingPixels: "\u7F3A\u5931\u50CF\u7D20",
          showCorrect: "\u663E\u793A\u6B63\u786E",
          showIncorrect: "\u663E\u793A\u9519\u8BEF",
          showMissing: "\u663E\u793A\u7F3A\u5931",
          autoRefresh: "\u81EA\u52A8\u5237\u65B0",
          zoomAdjusted: "\u7F29\u653E\u81EA\u52A8\u8C03\u6574\u4E3A",
          autoRefreshEnabled: "\u81EA\u52A8\u5237\u65B0\u5DF2\u542F\u7528\uFF0C\u95F4\u9694",
          autoRefreshDisabled: "\u81EA\u52A8\u5237\u65B0\u5DF2\u7981\u7528",
          autoRefreshIntervalUpdated: "\u81EA\u52A8\u5237\u65B0\u95F4\u9694\u5DF2\u66F4\u65B0\u4E3A",
          visualizationUpdated: "\u53EF\u89C6\u5316\u5DF2\u66F4\u65B0",
          // Config Window
          configTitle: "Guard\u914D\u7F6E",
          protectionPatterns: "\u4FDD\u62A4\u6A21\u5F0F",
          preferSpecificColor: "\u4F18\u5148\u7279\u5B9A\u989C\u8272",
          excludeSpecificColors: "\u4E0D\u4FEE\u590D\u7279\u5B9A\u989C\u8272",
          loadManagement: "\u8D1F\u8F7D\u7BA1\u7406",
          minLoadsToWait: "\u7B49\u5F85\u7684\u6700\u5C0F\u8D1F\u8F7D\u6570",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20\u6570",
          spendAllPixelsOnStart: "\u542F\u52A8\u65F6\u6D88\u8017\u6240\u6709\u50CF\u7D20",
          waitTimes: "\u7B49\u5F85\u65F6\u95F4",
          useRandomTimes: "\u6279\u6B21\u95F4\u4F7F\u7528\u968F\u673A\u65F6\u95F4",
          minTime: "\u6700\u5C0F\u65F6\u95F4 (\u79D2)",
          maxTime: "\u6700\u5927\u65F6\u95F4 (\u79D2)"
        }
      };
    }
  });

  // src/locales/zh-Hant.js
  var zhHant;
  var init_zh_Hant = __esm({
    "src/locales/zh-Hant.js"() {
      zhHant = {
        // 啓動器
        launcher: {
          title: "WPlace \u81EA\u52D5\u6A5F\u5668\u4EBA",
          autoFarm: "\u{1F33E} \u81EA\u52D5\u8FB2\u5834",
          autoImage: "\u{1F3A8} \u81EA\u52D5\u7E6A\u5716",
          autoGuard: "\u{1F6E1}\uFE0F \u81EA\u52D5\u5B88\u8B77",
          selection: "\u9078\u64C7",
          user: "\u7528\u6237",
          charges: "\u6B21\u6578",
          backend: "\u5F8C\u7AEF",
          database: "\u6578\u64DA\u5EAB",
          uptime: "\u904B\u884C\u6642\u9593",
          close: "\u95DC\u9589",
          launch: "\u5553\u52D5",
          loading: "\u52A0\u8F09\u4E2D\u2026",
          executing: "\u57F7\u884C\u4E2D\u2026",
          downloading: "\u6B63\u5728\u4E0B\u8F09\u8173\u672C\u2026",
          chooseBot: "\u9078\u64C7\u4E00\u500B\u6A5F\u5668\u4EBA\u4E26\u9EDE\u64CA\u5553\u52D5",
          readyToLaunch: "\u6E96\u5099\u5553\u52D5",
          loadError: "\u52A0\u8F09\u932F\u8AA4",
          loadErrorMsg: "\u7121\u6CD5\u52A0\u8F09\u6240\u9078\u6A5F\u5668\u4EBA\u3002\u8ACB\u6AA2\u67E5\u7DB2\u7D61\u9023\u63A5\u6216\u91CD\u8A66\u3002",
          checking: "\u{1F504} \u6AA2\u67E5\u4E2D...",
          online: "\u{1F7E2} \u5728\u7DDA",
          offline: "\u{1F534} \u96E2\u7DDA",
          ok: "\u{1F7E2} \u6B63\u5E38",
          error: "\u{1F534} \u932F\u8AA4",
          unknown: "-",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u8A8C\u8996\u7A97",
          downloadLogs: "\u4E0B\u8F09\u65E5\u8A8C",
          clearLogs: "\u6E05\u9664\u65E5\u8A8C",
          closeLogs: "\u95DC\u9589"
        },
        // 繪圖模塊
        image: {
          title: "WPlace \u81EA\u52D5\u7E6A\u5716",
          initBot: "\u521D\u59CB\u5316\u81EA\u52D5\u6A5F\u5668\u4EBA",
          uploadImage: "\u4E0A\u50B3\u5716\u7247",
          resizeImage: "\u8ABF\u6574\u5716\u7247\u5927\u5C0F",
          selectPosition: "\u9078\u64C7\u4F4D\u7F6E",
          startPainting: "\u958B\u59CB\u7E6A\u88FD",
          stopPainting: "\u505C\u6B62\u7E6A\u88FD",
          saveProgress: "\u4FDD\u5B58\u9032\u5EA6",
          loadProgress: "\u52A0\u8F09\u9032\u5EA6",
          checkingColors: "\u{1F50D} \u6AA2\u67E5\u53EF\u7528\u984F\u8272...",
          noColorsFound: "\u274C \u8ACB\u5728\u7DB2\u7AD9\u4E0A\u6253\u958B\u8ABF\u8272\u677F\u5F8C\u91CD\u8A66\uFF01",
          colorsFound: "\u2705 \u627E\u5230 {count} \u7A2E\u53EF\u7528\u984F\u8272",
          loadingImage: "\u{1F5BC}\uFE0F \u6B63\u5728\u52A0\u8F09\u5716\u7247...",
          imageLoaded: "\u2705 \u5716\u7247\u5DF2\u52A0\u8F09\uFF0C\u6709\u6548\u50CF\u7D20 {count} \u500B",
          imageError: "\u274C \u5716\u7247\u52A0\u8F09\u5931\u6557",
          selectPositionAlert: "\u8ACB\u5728\u4F60\u60F3\u958B\u59CB\u7E6A\u88FD\u7684\u5730\u65B9\u5857\u7B2C\u4E00\u500B\u50CF\u7D20\uFF01",
          waitingPosition: "\u{1F446} \u7B49\u5F85\u4F60\u5857\u53C3\u8003\u50CF\u7D20...",
          positionSet: "\u2705 \u4F4D\u7F6E\u8A2D\u7F6E\u6210\u529F\uFF01",
          positionTimeout: "\u274C \u4F4D\u7F6E\u9078\u64C7\u8D85\u6642",
          positionDetected: "\u{1F3AF} \u5DF2\u6AA2\u6E2C\u5230\u4F4D\u7F6E\uFF0C\u8655\u7406\u4E2D...",
          positionError: "\u274C \u4F4D\u7F6E\u6AA2\u6E2C\u5931\u6557\uFF0C\u8ACB\u91CD\u8A66",
          startPaintingMsg: "\u{1F3A8} \u958B\u59CB\u7E6A\u88FD...",
          paintingProgress: "\u{1F9F1} \u9032\u5EA6: {painted}/{total} \u50CF\u7D20...",
          noCharges: "\u231B \u6C92\u6709\u6B21\u6578\u3002\u7B49\u5F85 {time}...",
          paintingStopped: "\u23F9\uFE0F \u7528\u6237\u5DF2\u505C\u6B62\u7E6A\u88FD",
          paintingComplete: "\u2705 \u7E6A\u88FD\u5B8C\u6210\uFF01\u5171\u7E6A\u88FD {count} \u500B\u50CF\u7D20\u3002",
          paintingError: "\u274C \u7E6A\u88FD\u904E\u7A0B\u4E2D\u51FA\u932F",
          missingRequirements: "\u274C \u8ACB\u5148\u52A0\u8F09\u5716\u7247\u4E26\u9078\u64C7\u4F4D\u7F6E",
          progress: "\u9032\u5EA6",
          userName: "\u7528\u6237",
          pixels: "\u50CF\u7D20",
          charges: "\u6B21\u6578",
          estimatedTime: "\u9810\u8A08\u6642\u9593",
          initMessage: "\u9EDE\u64CA\u201C\u521D\u59CB\u5316\u81EA\u52D5\u6A5F\u5668\u4EBA\u201D\u958B\u59CB",
          waitingInit: "\u7B49\u5F85\u521D\u59CB\u5316...",
          resizeSuccess: "\u2705 \u5716\u7247\u5DF2\u8ABF\u6574\u70BA {width}x{height}",
          paintingPaused: "\u23F8\uFE0F \u7E6A\u88FD\u66AB\u505C\u65BC\u4F4D\u7F6E X: {x}, Y: {y}",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20\u6578",
          batchSize: "\u6279\u6B21\u5927\u5C0F",
          nextBatchTime: "\u4E0B\u6B21\u6279\u6B21\u6642\u9593",
          useAllCharges: "\u4F7F\u7528\u6240\u6709\u53EF\u7528\u6B21\u6578",
          showOverlay: "\u986F\u793A\u8986\u84CB\u5C64",
          maxCharges: "\u6BCF\u6279\u6700\u5927\u6B21\u6578",
          waitingForCharges: "\u23F3 \u7B49\u5F85\u6B21\u6578: {current}/{needed}",
          timeRemaining: "\u5269\u9918\u6642\u9593",
          cooldownWaiting: "\u23F3 \u7B49\u5F85 {time} \u5F8C\u7E7C\u7E8C...",
          progressSaved: "\u2705 \u9032\u5EA6\u5DF2\u4FDD\u5B58\u70BA {filename}",
          progressLoaded: "\u2705 \u5DF2\u52A0\u8F09\u9032\u5EA6: {painted}/{total} \u50CF\u7D20\u5DF2\u7E6A\u88FD",
          progressLoadError: "\u274C \u52A0\u8F09\u9032\u5EA6\u5931\u6557: {error}",
          progressSaveError: "\u274C \u4FDD\u5B58\u9032\u5EA6\u5931\u6557: {error}",
          confirmSaveProgress: "\u5728\u505C\u6B62\u4E4B\u524D\u8981\u4FDD\u5B58\u7576\u524D\u9032\u5EA6\u55CE\uFF1F",
          saveProgressTitle: "\u4FDD\u5B58\u9032\u5EA6",
          discardProgress: "\u653E\u68C4",
          cancel: "\u53D6\u6D88",
          minimize: "\u6700\u5C0F\u5316",
          width: "\u5BEC\u5EA6",
          height: "\u9AD8\u5EA6",
          keepAspect: "\u4FDD\u6301\u7E31\u6A6B\u6BD4",
          apply: "\u61C9\u7528",
          overlayOn: "\u8986\u84CB\u5C64: \u958B\u5553",
          overlayOff: "\u8986\u84CB\u5C64: \u95DC\u9589",
          passCompleted: "\u2705 \u6279\u6B21\u5B8C\u6210: \u5DF2\u7E6A\u88FD {painted} \u50CF\u7D20 | \u9032\u5EA6: {percent}% ({current}/{total})",
          waitingChargesRegen: "\u23F3 \u7B49\u5F85\u6B21\u6578\u6062\u5FA9: {current}/{needed} - \u6642\u9593: {time}",
          waitingChargesCountdown: "\u23F3 \u7B49\u5F85\u6B21\u6578: {current}/{needed} - \u5269\u9918: {time}",
          autoInitializing: "\u{1F916} \u6B63\u5728\u81EA\u52D5\u521D\u59CB\u5316...",
          autoInitSuccess: "\u2705 \u81EA\u52D5\u5553\u52D5\u6210\u529F",
          autoInitFailed: "\u26A0\uFE0F \u7121\u6CD5\u81EA\u52D5\u5553\u52D5\uFF0C\u8ACB\u624B\u52D5\u64CD\u4F5C\u3002",
          paletteDetected: "\u{1F3A8} \u5DF2\u6AA2\u6E2C\u5230\u8ABF\u8272\u677F",
          paletteNotFound: "\u{1F50D} \u6B63\u5728\u641C\u7D22\u8ABF\u8272\u677F...",
          clickingPaintButton: "\u{1F446} \u6B63\u5728\u9EDE\u64CA\u7E6A\u88FD\u6309\u9215...",
          paintButtonNotFound: "\u274C \u672A\u627E\u5230\u7E6A\u88FD\u6309\u9215",
          manualInitRequired: "\u{1F527} \u9700\u8981\u624B\u52D5\u521D\u59CB\u5316",
          retryAttempt: "\u{1F504} \u91CD\u8A66 {attempt}/{maxAttempts}\uFF0C\u7B49\u5F85 {delay} \u79D2...",
          retryError: "\u{1F4A5} \u7B2C {attempt}/{maxAttempts} \u6B21\u5617\u8A66\u51FA\u932F\uFF0C\u5C07\u5728 {delay} \u79D2\u5F8C\u91CD\u8A66...",
          retryFailed: "\u274C \u8D85\u904E {maxAttempts} \u6B21\u5617\u8A66\u5931\u6557\u3002\u7E7C\u7E8C\u4E0B\u4E00\u6279...",
          networkError: "\u{1F310} \u7DB2\u7D61\u932F\u8AA4\uFF0C\u6B63\u5728\u91CD\u8A66...",
          serverError: "\u{1F525} \u670D\u52D9\u5668\u932F\u8AA4\uFF0C\u6B63\u5728\u91CD\u8A66...",
          timeoutError: "\u23F0 \u4F3A\u670D\u5668\u903E\u6642\uFF0C\u6B63\u5728\u91CD\u8A66...",
          // v2.0 - 保護與繪製模式
          protectionEnabled: "\u5DF2\u555F\u7528\u4FDD\u8B77",
          protectionDisabled: "\u5DF2\u505C\u7528\u4FDD\u8B77",
          paintPattern: "\u7E6A\u88FD\u6A21\u5F0F",
          patternLinearStart: "\u7DDA\u6027\uFF08\u8D77\u9EDE\uFF09",
          patternLinearEnd: "\u7DDA\u6027\uFF08\u7D42\u9EDE\uFF09",
          patternRandom: "\u96A8\u6A5F",
          patternCenterOut: "\u7531\u4E2D\u5FC3\u5411\u5916",
          patternCornersFirst: "\u5148\u89D2\u843D",
          patternSpiral: "\u87BA\u65CB",
          solid: "\u5BE6\u5FC3",
          stripes: "\u689D\u7D0B",
          checkerboard: "\u68CB\u76E4\u683C",
          gradient: "\u6F38\u5C64",
          dots: "\u9EDE\u72C0",
          waves: "\u6CE2\u6D6A",
          spiral: "\u87BA\u65CB",
          mosaic: "\u99AC\u8CFD\u514B",
          bricks: "\u78DA\u584A",
          zigzag: "\u4E4B\u5B57\u5F62",
          protectingDrawing: "\u6B63\u5728\u4FDD\u8B77\u7E6A\u5716...",
          changesDetected: "\u{1F6A8} \u5075\u6E2C\u5230 {count} \u8655\u8B8A\u66F4",
          repairing: "\u{1F527} \u6B63\u5728\u4FEE\u5FA9 {count} \u500B\u8B8A\u66F4\u7684\u50CF\u7D20...",
          repairCompleted: "\u2705 \u4FEE\u5FA9\u5B8C\u6210\uFF1A{count} \u500B\u50CF\u7D20",
          noChargesForRepair: "\u26A1 \u4FEE\u5FA9\u4E0D\u6D88\u8017\u9EDE\u6578\uFF0C\u7B49\u5F85\u4E2D...",
          protectionPriority: "\u{1F6E1}\uFE0F \u5DF2\u555F\u7528\u4FDD\u8B77\u512A\u5148",
          patternApplied: "\u5DF2\u5957\u7528\u6A21\u5F0F",
          customPattern: "\u81EA\u8A02\u6A21\u5F0F",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u8A8C\u8996\u7A97",
          downloadLogs: "\u4E0B\u8F09\u65E5\u8A8C",
          clearLogs: "\u6E05\u9664\u65E5\u8A8C",
          closeLogs: "\u95DC\u9589"
        },
        // 農場模塊（待實現）
        farm: {
          title: "WPlace \u8FB2\u5834\u6A5F\u5668\u4EBA",
          start: "\u958B\u59CB",
          stop: "\u505C\u6B62",
          stopped: "\u6A5F\u5668\u4EBA\u5DF2\u505C\u6B62",
          calibrate: "\u6821\u6E96",
          paintOnce: "\u4E00\u6B21",
          checkingStatus: "\u6AA2\u67E5\u72C0\u614B\u4E2D...",
          configuration: "\u914D\u7F6E",
          delay: "\u5EF6\u9072 (\u6BEB\u79D2)",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20",
          minCharges: "\u6700\u5C11\u6B21\u6578",
          colorMode: "\u984F\u8272\u6A21\u5F0F",
          random: "\u96A8\u6A5F",
          fixed: "\u56FA\u5B9A",
          range: "\u7BC4\u570D",
          fixedColor: "\u56FA\u5B9A\u984F\u8272",
          advanced: "\u9AD8\u7D1A",
          tileX: "\u74E6\u7247 X",
          tileY: "\u74E6\u7247 Y",
          customPalette: "\u81EA\u5B9A\u7FA9\u8ABF\u8272\u677F",
          paletteExample: "\u4F8B\u5982: #FF0000,#00FF00,#0000FF",
          capture: "\u6355\u7372",
          painted: "\u5DF2\u7E6A\u88FD",
          charges: "\u6B21\u6578",
          retries: "\u91CD\u8A66",
          tile: "\u74E6\u7247",
          configSaved: "\u914D\u7F6E\u5DF2\u4FDD\u5B58",
          configLoaded: "\u914D\u7F6E\u5DF2\u52A0\u8F09",
          configReset: "\u914D\u7F6E\u5DF2\u91CD\u7F6E",
          captureInstructions: "\u8ACB\u624B\u52D5\u7E6A\u88FD\u4E00\u500B\u50CF\u7D20\u4EE5\u6355\u7372\u5EA7\u6A19...",
          backendOnline: "\u5F8C\u7AEF\u5728\u7DDA",
          backendOffline: "\u5F8C\u7AEF\u96E2\u7DDA",
          startingBot: "\u6B63\u5728\u5553\u52D5\u6A5F\u5668\u4EBA...",
          stoppingBot: "\u6B63\u5728\u505C\u6B62\u6A5F\u5668\u4EBA...",
          calibrating: "\u6821\u6E96\u4E2D...",
          alreadyRunning: "\u81EA\u52D5\u8FB2\u5834\u5DF2\u5728\u904B\u884C\u3002",
          imageRunningWarning: "\u81EA\u52D5\u7E6A\u5716\u6B63\u5728\u904B\u884C\uFF0C\u8ACB\u5148\u95DC\u9589\u518D\u5553\u52D5\u81EA\u52D5\u8FB2\u5834\u3002",
          selectPosition: "\u9078\u64C7\u5340\u57DF",
          selectPositionAlert: "\u{1F3AF} \u5728\u5730\u5716\u7684\u7A7A\u767D\u5340\u57DF\u5857\u4E00\u500B\u50CF\u7D20\u4EE5\u8A2D\u7F6E\u8FB2\u5834\u5340\u57DF",
          waitingPosition: "\u{1F446} \u7B49\u5F85\u4F60\u5857\u53C3\u8003\u50CF\u7D20...",
          positionSet: "\u2705 \u5340\u57DF\u8A2D\u7F6E\u6210\u529F\uFF01\u534A\u5F91: 500px",
          positionTimeout: "\u274C \u5340\u57DF\u9078\u64C7\u8D85\u6642",
          missingPosition: "\u274C \u8ACB\u5148\u9078\u64C7\u5340\u57DF\uFF08\u4F7F\u7528\u201C\u9078\u64C7\u5340\u57DF\u201D\u6309\u9215\uFF09",
          farmRadius: "\u8FB2\u5834\u534A\u5F91",
          positionInfo: "\u7576\u524D\u5340\u57DF",
          farmingInRadius: "\u{1F33E} \u6B63\u5728\u4EE5\u534A\u5F91 {radius}px \u5728 ({x},{y}) \u8FB2\u5834",
          selectEmptyArea: "\u26A0\uFE0F \u91CD\u8981: \u8ACB\u9078\u64C7\u7A7A\u767D\u5340\u57DF\u4EE5\u907F\u514D\u885D\u7A81",
          noPosition: "\u672A\u9078\u64C7\u5340\u57DF",
          currentZone: "\u5340\u57DF: ({x},{y})",
          autoSelectPosition: "\u{1F3AF} \u8ACB\u5148\u9078\u64C7\u5340\u57DF\uFF0C\u5728\u5730\u5716\u4E0A\u5857\u4E00\u500B\u50CF\u7D20\u4EE5\u8A2D\u7F6E\u8FB2\u5834\u5340\u57DF",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u8A8C\u8996\u7A97",
          downloadLogs: "\u4E0B\u8F09\u65E5\u8A8C",
          clearLogs: "\u6E05\u9664\u65E5\u8A8C",
          closeLogs: "\u95DC\u9589"
        },
        // 公共
        common: {
          yes: "\u662F",
          no: "\u5426",
          ok: "\u78BA\u8A8D",
          cancel: "\u53D6\u6D88",
          close: "\u95DC\u9589",
          save: "\u4FDD\u5B58",
          load: "\u52A0\u8F09",
          delete: "\u522A\u9664",
          edit: "\u7DE8\u8F2F",
          start: "\u958B\u59CB",
          stop: "\u505C\u6B62",
          pause: "\u66AB\u505C",
          resume: "\u7E7C\u7E8C",
          reset: "\u91CD\u7F6E",
          settings: "\u8A2D\u7F6E",
          help: "\u5E6B\u52A9",
          about: "\u95DC\u65BC",
          language: "\u8A9E\u8A00",
          loading: "\u52A0\u8F09\u4E2D...",
          error: "\u932F\u8AA4",
          success: "\u6210\u529F",
          warning: "\u8B66\u544A",
          info: "\u4FE1\u606F",
          languageChanged: "\u8A9E\u8A00\u5DF2\u5207\u63DB\u70BA {language}"
        },
        // 守護模塊
        guard: {
          title: "WPlace \u81EA\u52D5\u5B88\u8B77",
          initBot: "\u521D\u59CB\u5316\u5B88\u8B77\u6A5F\u5668\u4EBA",
          selectArea: "\u9078\u64C7\u5340\u57DF",
          captureArea: "\u6355\u7372\u5340\u57DF",
          startProtection: "\u958B\u59CB\u5B88\u8B77",
          stopProtection: "\u505C\u6B62\u5B88\u8B77",
          upperLeft: "\u5DE6\u4E0A\u89D2",
          lowerRight: "\u53F3\u4E0B\u89D2",
          protectedPixels: "\u53D7\u4FDD\u8B77\u50CF\u7D20",
          detectedChanges: "\u6AA2\u6E2C\u5230\u7684\u8B8A\u5316",
          repairedPixels: "\u4FEE\u5FA9\u7684\u50CF\u7D20",
          charges: "\u6B21\u6578",
          waitingInit: "\u7B49\u5F85\u521D\u59CB\u5316...",
          checkingColors: "\u{1F3A8} \u6AA2\u67E5\u53EF\u7528\u984F\u8272...",
          noColorsFound: "\u274C \u672A\u627E\u5230\u984F\u8272\uFF0C\u8ACB\u5728\u7DB2\u7AD9\u4E0A\u6253\u958B\u8ABF\u8272\u677F\u3002",
          colorsFound: "\u2705 \u627E\u5230 {count} \u7A2E\u53EF\u7528\u984F\u8272",
          initSuccess: "\u2705 \u5B88\u8B77\u6A5F\u5668\u4EBA\u521D\u59CB\u5316\u6210\u529F",
          initError: "\u274C \u5B88\u8B77\u6A5F\u5668\u4EBA\u521D\u59CB\u5316\u5931\u6557",
          invalidCoords: "\u274C \u5EA7\u6A19\u7121\u6548",
          invalidArea: "\u274C \u5340\u57DF\u7121\u6548\uFF0C\u5DE6\u4E0A\u89D2\u5FC5\u9808\u5C0F\u65BC\u53F3\u4E0B\u89D2",
          areaTooLarge: "\u274C \u5340\u57DF\u904E\u5927: {size} \u50CF\u7D20 (\u6700\u5927: {max})",
          capturingArea: "\u{1F4F8} \u6355\u7372\u5B88\u8B77\u5340\u57DF\u4E2D...",
          areaCaptured: "\u2705 \u5340\u57DF\u6355\u7372\u6210\u529F: {count} \u50CF\u7D20\u53D7\u4FDD\u8B77",
          captureError: "\u274C \u6355\u7372\u5340\u57DF\u51FA\u932F: {error}",
          captureFirst: "\u274C \u8ACB\u5148\u6355\u7372\u4E00\u500B\u5B88\u8B77\u5340\u57DF",
          protectionStarted: "\u{1F6E1}\uFE0F \u5B88\u8B77\u5DF2\u5553\u52D5 - \u5340\u57DF\u76E3\u63A7\u4E2D",
          protectionStopped: "\u23F9\uFE0F \u5B88\u8B77\u5DF2\u505C\u6B62",
          noChanges: "\u2705 \u5340\u57DF\u5B89\u5168 - \u672A\u6AA2\u6E2C\u5230\u8B8A\u5316",
          changesDetected: "\u{1F6A8} \u6AA2\u6E2C\u5230 {count} \u500B\u8B8A\u5316",
          repairing: "\u{1F6E0}\uFE0F \u6B63\u5728\u4FEE\u5FA9 {count} \u500B\u50CF\u7D20...",
          repairedSuccess: "\u2705 \u5DF2\u6210\u529F\u4FEE\u5FA9 {count} \u500B\u50CF\u7D20",
          repairError: "\u274C \u4FEE\u5FA9\u51FA\u932F: {error}",
          noCharges: "\u26A0\uFE0F \u6B21\u6578\u4E0D\u8DB3\uFF0C\u7121\u6CD5\u4FEE\u5FA9",
          checkingChanges: "\u{1F50D} \u6B63\u5728\u6AA2\u67E5\u5340\u57DF\u8B8A\u5316...",
          errorChecking: "\u274C \u6AA2\u67E5\u51FA\u932F: {error}",
          guardActive: "\u{1F6E1}\uFE0F \u5B88\u8B77\u4E2D - \u5340\u57DF\u53D7\u4FDD\u8B77",
          lastCheck: "\u4E0A\u6B21\u6AA2\u67E5: {time}",
          nextCheck: "\u4E0B\u6B21\u6AA2\u67E5: {time} \u79D2\u5F8C",
          autoInitializing: "\u{1F916} \u6B63\u5728\u81EA\u52D5\u521D\u59CB\u5316...",
          autoInitSuccess: "\u2705 \u81EA\u52D5\u5553\u52D5\u6210\u529F",
          autoInitFailed: "\u26A0\uFE0F \u7121\u6CD5\u81EA\u52D5\u5553\u52D5\uFF0C\u8ACB\u624B\u52D5\u64CD\u4F5C\u3002",
          manualInitRequired: "\u{1F527} \u9700\u8981\u624B\u52D5\u521D\u59CB\u5316",
          paletteDetected: "\u{1F3A8} \u5DF2\u6AA2\u6E2C\u5230\u8ABF\u8272\u677F",
          paletteNotFound: "\u{1F50D} \u6B63\u5728\u641C\u7D22\u8ABF\u8272\u677F...",
          clickingPaintButton: "\u{1F446} \u6B63\u5728\u9EDE\u64CA\u7E6A\u88FD\u6309\u9215...",
          paintButtonNotFound: "\u274C \u672A\u627E\u5230\u7E6A\u88FD\u6309\u9215",
          selectUpperLeft: "\u{1F3AF} \u5728\u9700\u8981\u4FDD\u8B77\u5340\u57DF\u7684\u5DE6\u4E0A\u89D2\u5857\u4E00\u500B\u50CF\u7D20",
          selectLowerRight: "\u{1F3AF} \u73FE\u5728\u5728\u53F3\u4E0B\u89D2\u5857\u4E00\u500B\u50CF\u7D20",
          waitingUpperLeft: "\u{1F446} \u7B49\u5F85\u9078\u64C7\u5DE6\u4E0A\u89D2...",
          waitingLowerRight: "\u{1F446} \u7B49\u5F85\u9078\u64C7\u53F3\u4E0B\u89D2...",
          upperLeftCaptured: "\u2705 \u5DF2\u6355\u7372\u5DE6\u4E0A\u89D2: ({x}, {y})",
          lowerRightCaptured: "\u2705 \u5DF2\u6355\u7372\u53F3\u4E0B\u89D2: ({x}, {y})",
          selectionTimeout: "\u274C \u9078\u64C7\u8D85\u6642",
          selectionError: "\u274C \u9078\u64C7\u51FA\u932F\uFF0C\u8ACB\u91CD\u8A66",
          logWindow: "\u{1F4CB} Logs",
          logWindowTitle: "\u65E5\u8A8C\u8996\u7A97",
          downloadLogs: "\u4E0B\u8F09\u65E5\u8A8C",
          clearLogs: "\u6E05\u9664\u65E5\u8A8C",
          closeLogs: "\u95DC\u9589",
          // Analysis Window
          analysisTitle: "\u5DEE\u7570\u5206\u6790 - JSON vs \u7576\u524D\u756B\u5E03",
          correctPixels: "\u6B63\u78BA\u50CF\u7D20",
          incorrectPixels: "\u932F\u8AA4\u50CF\u7D20",
          missingPixels: "\u7F3A\u5931\u50CF\u7D20",
          showCorrect: "\u986F\u793A\u6B63\u78BA",
          showIncorrect: "\u986F\u793A\u932F\u8AA4",
          showMissing: "\u986F\u793A\u7F3A\u5931",
          autoRefresh: "\u81EA\u52D5\u5237\u65B0",
          zoomAdjusted: "\u7E2E\u653E\u81EA\u52D5\u8ABF\u6574\u70BA",
          autoRefreshEnabled: "\u81EA\u52D5\u5237\u65B0\u5DF2\u555F\u7528\uFF0C\u9593\u9694",
          autoRefreshDisabled: "\u81EA\u52D5\u5237\u65B0\u5DF2\u7981\u7528",
          autoRefreshIntervalUpdated: "\u81EA\u52D5\u5237\u65B0\u9593\u9694\u5DF2\u66F4\u65B0\u70BA",
          visualizationUpdated: "\u8996\u89BA\u5316\u5DF2\u66F4\u65B0",
          // Config Window
          configTitle: "Guard\u914D\u7F6E",
          protectionPatterns: "\u4FDD\u8B77\u6A21\u5F0F",
          preferSpecificColor: "\u512A\u5148\u7279\u5B9A\u984F\u8272",
          excludeSpecificColors: "\u4E0D\u4FEE\u5FA9\u7279\u5B9A\u984F\u8272",
          loadManagement: "\u8CA0\u8F09\u7BA1\u7406",
          minLoadsToWait: "\u7B49\u5F85\u7684\u6700\u5C0F\u8CA0\u8F09\u6578",
          pixelsPerBatch: "\u6BCF\u6279\u50CF\u7D20\u6578",
          spendAllPixelsOnStart: "\u555F\u52D5\u6642\u6D88\u8017\u6240\u6709\u50CF\u7D20",
          waitTimes: "\u7B49\u5F85\u6642\u9593",
          useRandomTimes: "\u6279\u6B21\u9593\u4F7F\u7528\u96A8\u6A5F\u6642\u9593",
          minTime: "\u6700\u5C0F\u6642\u9593 (\u79D2)",
          maxTime: "\u6700\u5927\u6642\u9593 (\u79D2)"
        }
      };
    }
  });

  // src/locales/index.js
  function detectBrowserLanguage() {
    const browserLang = window.navigator.language || window.navigator.userLanguage || "es";
    const langCode = browserLang.split("-")[0].toLowerCase();
    if (translations[langCode]) {
      return langCode;
    }
    return "es";
  }
  function getSavedLanguage() {
    return null;
  }
  function saveLanguage(langCode) {
    return;
  }
  function initializeLanguage() {
    const savedLang = getSavedLanguage();
    const browserLang = detectBrowserLanguage();
    let selectedLang = "es";
    if (savedLang && translations[savedLang]) {
      selectedLang = savedLang;
    } else if (browserLang && translations[browserLang]) {
      selectedLang = browserLang;
    }
    setLanguage(selectedLang);
    return selectedLang;
  }
  function setLanguage(langCode) {
    if (!translations[langCode]) {
      console.warn(`Idioma '${langCode}' no disponible. Usando '${currentLanguage}'`);
      return;
    }
    currentLanguage = langCode;
    currentTranslations = translations[langCode];
    saveLanguage(langCode);
    if (typeof window !== "undefined" && window.CustomEvent) {
      window.dispatchEvent(new window.CustomEvent("languageChanged", {
        detail: { language: langCode, translations: currentTranslations }
      }));
    }
  }
  function getCurrentLanguage() {
    return currentLanguage;
  }
  function t(key, params = {}) {
    const keys = key.split(".");
    let value = currentTranslations;
    for (const k of keys) {
      if (value && typeof value === "object" && k in value) {
        value = value[k];
      } else {
        console.warn(`Clave de traducci\xF3n no encontrada: '${key}'`);
        return key;
      }
    }
    if (typeof value !== "string") {
      console.warn(`Clave de traducci\xF3n no es string: '${key}'`);
      return key;
    }
    return interpolate(value, params);
  }
  function interpolate(text, params) {
    if (!params || Object.keys(params).length === 0) {
      return text;
    }
    return text.replace(/\{(\w+)\}/g, (match, key) => {
      return params[key] !== void 0 ? params[key] : match;
    });
  }
  function getSection(section) {
    if (currentTranslations[section]) {
      return currentTranslations[section];
    }
    console.warn(`Secci\xF3n de traducci\xF3n no encontrada: '${section}'`);
    return {};
  }
  var translations, currentLanguage, currentTranslations;
  var init_locales = __esm({
    "src/locales/index.js"() {
      init_es();
      init_en();
      init_fr();
      init_ru();
      init_zh_Hans();
      init_zh_Hant();
      translations = {
        es,
        en,
        fr,
        ru,
        zhHans,
        zhHant
      };
      currentLanguage = "es";
      currentTranslations = translations[currentLanguage];
      initializeLanguage();
    }
  });

  // src/core/http.js
  async function fetchWithTimeout(url, { timeout = 1e4, ...opts } = {}) {
    const ctrl = new AbortController();
    const id = setTimeout(() => ctrl.abort("timeout"), timeout);
    try {
      const res = await fetch(url, { signal: ctrl.signal, ...opts });
      return res;
    } catch (error) {
      if (error.name === "AbortError" || error.message === "timeout") {
        const timeoutError = new Error(`Request timeout after ${timeout}ms`);
        timeoutError.name = "TimeoutError";
        timeoutError.timeout = timeout;
        throw timeoutError;
      }
      throw error;
    } finally {
      clearTimeout(id);
    }
  }
  var init_http = __esm({
    "src/core/http.js"() {
    }
  });

  // src/core/metrics/config.js
  function readFromUrl() {
    var _a;
    try {
      if (typeof window === "undefined" || !globalThis.URLSearchParams) return {};
      const sp = new globalThis.URLSearchParams(((_a = globalThis.location) == null ? void 0 : _a.search) || "");
      const enabled = sp.get("metricsEnabled");
      const baseUrl = sp.get("metricsUrl");
      const apiKey = sp.get("metricsKey");
      const salt = sp.get("metricsSalt");
      const variant = sp.get("metricsVariant");
      const timeout = sp.get("metricsTimeoutMs");
      const retries = sp.get("metricsRetries");
      const ping = sp.get("metricsPingMs");
      const out = {};
      if (enabled != null) out.ENABLED = enabled === "true" || enabled === "1";
      if (baseUrl) out.BASE_URL = baseUrl;
      if (apiKey) out.API_KEY = apiKey;
      if (salt) out.PUBLIC_SALT = salt;
      if (variant) out.VARIANT = variant;
      if (timeout && !Number.isNaN(Number(timeout))) out.TIMEOUT_MS = Number(timeout);
      if (retries && !Number.isNaN(Number(retries))) out.RETRIES = Number(retries);
      if (ping && !Number.isNaN(Number(ping))) out.PING_INTERVAL_MS = Number(ping);
      return out;
    } catch {
      return {};
    }
  }
  function readFromGlobal() {
    var _a;
    const g = typeof window !== "undefined" && (window.__WPLACE_METRICS__ || ((_a = window.__WPLACE_CONFIG__) == null ? void 0 : _a.metrics)) || {};
    const out = {};
    if (typeof g.ENABLED === "boolean") out.ENABLED = g.ENABLED;
    if (typeof g.BASE_URL === "string") out.BASE_URL = g.BASE_URL;
    if (typeof g.API_KEY === "string") out.API_KEY = g.API_KEY;
    if (typeof g.PUBLIC_SALT === "string") out.PUBLIC_SALT = g.PUBLIC_SALT;
    if (typeof g.VARIANT === "string") out.VARIANT = g.VARIANT;
    if (Number.isFinite(g.TIMEOUT_MS)) out.TIMEOUT_MS = g.TIMEOUT_MS;
    if (Number.isFinite(g.RETRIES)) out.RETRIES = g.RETRIES;
    if (Number.isFinite(g.PING_INTERVAL_MS)) out.PING_INTERVAL_MS = g.PING_INTERVAL_MS;
    return out;
  }
  function sanitize(cfg) {
    const out = { ...cfg };
    if (typeof out.BASE_URL === "string") {
      out.BASE_URL = out.BASE_URL.replace(/\/$/, "");
    }
    if (!["auto-guard", "auto-farm", "auto-image", "launcher"].includes(out.VARIANT)) {
      out.VARIANT = DEFAULTS.VARIANT;
    }
    return out;
  }
  function getMetricsConfig(overrides = {}) {
    const merged = {
      ...DEFAULTS,
      ...readFromGlobal(),
      ...readFromUrl(),
      ...overrides
    };
    _cached = sanitize(merged);
    return _cached;
  }
  async function sha256Hex(str) {
    const Encoder = globalThis.TextEncoder;
    const webCrypto = globalThis.crypto;
    if (!Encoder || !(webCrypto == null ? void 0 : webCrypto.subtle)) throw new Error("WebCrypto no disponible");
    const enc = new Encoder();
    const buf = await webCrypto.subtle.digest("SHA-256", enc.encode(str));
    return Array.from(new Uint8Array(buf)).map((b) => b.toString(16).padStart(2, "0")).join("");
  }
  async function computeUserHash(userIdentifier, saltOverride) {
    const cfg = _cached || getMetricsConfig();
    const salt = typeof saltOverride === "string" ? saltOverride : cfg.PUBLIC_SALT;
    if (!salt || !userIdentifier) return null;
    return sha256Hex(String(salt) + String(userIdentifier));
  }
  function getAnonymousId() {
    var _a, _b, _c;
    try {
      if (typeof window === "undefined") return null;
      if ((_a = window.__WPLACE_METRICS__) == null ? void 0 : _a.anonId) return String(window.__WPLACE_METRICS__.anonId);
      const key = "wplace_metrics_aid";
      let val = null;
      try {
        val = localStorage.getItem(key);
      } catch {
      }
      if (val && typeof val === "string") return val;
      const bytes = new Uint8Array(16);
      (_c = (_b = globalThis.crypto || {}).getRandomValues) == null ? void 0 : _c.call(_b, bytes);
      const rnd = Array.from(bytes).map((b) => b.toString(16).padStart(2, "0")).join("");
      try {
        localStorage.setItem(key, rnd);
      } catch {
      }
      if (!window.__WPLACE_METRICS__) window.__WPLACE_METRICS__ = {};
      window.__WPLACE_METRICS__.anonId = rnd;
      return rnd;
    } catch {
      return null;
    }
  }
  var DEFAULTS, _cached;
  var init_config = __esm({
    "src/core/metrics/config.js"() {
      DEFAULTS = Object.freeze({
        ENABLED: true,
        // Habilitar/deshabilitar envío de métricas
        BASE_URL: "https://metricswplaceapi.alarisco.xyz",
        // URL base del servidor de métricas
        API_KEY: "wplace_2c8e4b2b1e0a4f7cb9d3a76f4a1c0b6f",
        // API Key por defecto para despliegue (puedes sobreescribir)
        PUBLIC_SALT: "wplace_public_salt_2024",
        // Sal pública por defecto (alineada con docker-compose)
        VARIANT: "auto-guard",
        // Variant por defecto; cada bot debe sobreescribirlo
        TIMEOUT_MS: 1e4,
        // Timeout de requests
        RETRIES: 1,
        // Reintentos básicos para ingesta
        PING_INTERVAL_MS: 2 * 60 * 1e3
        // 2 minutos para session_ping (mejor reflejo de usuarios online)
      });
      _cached = null;
    }
  });

  // src/core/metrics/client.js
  var client_exports = {};
  __export(client_exports, {
    pixelsPainted: () => pixelsPainted,
    pixelsRepaired: () => pixelsRepaired,
    reportError: () => reportError,
    sendEvent: () => sendEvent,
    sessionEnd: () => sessionEnd,
    sessionPing: () => sessionPing,
    sessionStart: () => sessionStart,
    trackEvent: () => trackEvent
  });
  async function postJson(url, body, { timeout, apiKey }) {
    const headers = { "Content-Type": "application/json" };
    if (apiKey) headers["X-API-Key"] = apiKey;
    const res = await fetchWithTimeout(url, {
      method: "POST",
      headers,
      body: JSON.stringify(body),
      timeout
    });
    return res;
  }
  function safeJson(res) {
    return res.text().then((t2) => {
      try {
        return t2 ? JSON.parse(t2) : {};
      } catch {
        return {};
      }
    });
  }
  async function send(body, overrides) {
    const cfg = getMetricsConfig(overrides);
    if (!cfg.ENABLED) return { ok: false, skipped: true };
    const url = `${cfg.BASE_URL}/v1/events`;
    try {
      const t2 = body == null ? void 0 : body.event_type;
      const v = body == null ? void 0 : body.bot_variant;
      if ((t2 === "pixel_painted" || t2 === "pixel_repaired") && typeof (body == null ? void 0 : body.pixel_delta) !== "undefined") {
        log(`[METRICS] ${t2} \u2192 \u0394 ${body.pixel_delta} (${v})`);
      }
    } catch {
    }
    let attempt = 0;
    let lastErr = null;
    while (attempt <= cfg.RETRIES) {
      try {
        const res = await postJson(url, body, { timeout: cfg.TIMEOUT_MS, apiKey: cfg.API_KEY });
        if (!res.ok) {
          const data2 = await safeJson(res);
          return { ok: false, status: res.status, data: data2 };
        }
        const data = await safeJson(res);
        try {
          const t2 = body == null ? void 0 : body.event_type;
          const v = body == null ? void 0 : body.bot_variant;
          if (t2 === "session_start") {
            log(`[METRICS] session_start (${v})`);
          }
        } catch {
        }
        return { ok: true, data };
      } catch (e) {
        lastErr = e;
        attempt++;
        if (attempt > cfg.RETRIES) break;
        await new Promise((r) => setTimeout(r, 300 * attempt));
      }
    }
    return { ok: false, error: (lastErr == null ? void 0 : lastErr.message) || String(lastErr) };
  }
  async function sendEvent({ botVariant, eventType, pixelDelta, timestamp, metadata } = {}, overrides) {
    const cfg = getMetricsConfig(overrides);
    if (!cfg.ENABLED) return { ok: false, skipped: true };
    const body = {};
    body.bot_variant = botVariant || cfg.VARIANT;
    body.event_type = eventType;
    if (typeof pixelDelta === "number") body.pixel_delta = pixelDelta;
    if (timestamp) body.timestamp = timestamp;
    if (metadata && typeof metadata === "object") body.event_metadata = metadata;
    const anon = getAnonymousId();
    if (anon) {
      const userHash = await computeUserHash(anon);
      if (userHash) body.user_hash = await userHash;
    }
    return send(body, overrides);
  }
  async function sessionStart({ botVariant, metadata } = {}, overrides) {
    return sendEvent({ botVariant, eventType: "session_start", metadata }, overrides);
  }
  async function sessionPing({ botVariant, metadata } = {}, overrides) {
    return sendEvent({ botVariant, eventType: "session_ping", metadata }, overrides);
  }
  async function sessionEnd({ botVariant, metadata } = {}, overrides) {
    return sendEvent({ botVariant, eventType: "session_end", metadata }, overrides);
  }
  async function pixelsRepaired(count, { botVariant, metadata } = {}, overrides) {
    if (!Number.isFinite(count) || count <= 0) return { ok: false, skipped: true };
    return sendEvent({ botVariant, eventType: "pixel_repaired", pixelDelta: Math.trunc(count), metadata }, overrides);
  }
  async function reportError(message, { botVariant, metadata } = {}, overrides) {
    const md = { message, ...metadata || {} };
    return sendEvent({ botVariant, eventType: "error", metadata: md }, overrides);
  }
  async function trackEvent(name, { botVariant, metadata, timestamp } = {}, overrides) {
    if (!name) return { ok: false, skipped: true };
    return sendEvent({ botVariant, eventType: name, metadata, timestamp }, overrides);
  }
  async function pixelsPainted(count, { botVariant, metadata } = {}, overrides) {
    if (!Number.isFinite(count) || count <= 0) return { ok: false, skipped: true };
    return sendEvent({ botVariant, eventType: "pixel_painted", pixelDelta: Math.trunc(count), metadata }, overrides);
  }
  var init_client = __esm({
    "src/core/metrics/client.js"() {
      init_http();
      init_config();
      init_logger();
    }
  });

  // src/core/turnstile.js
  function setTurnstileToken(t2) {
    if (_resolveToken) {
      _resolveToken(t2);
      _resolveToken = null;
    }
    turnstileToken = t2;
    tokenExpiryTime = Date.now() + TOKEN_LIFETIME;
    log("\u2705 Turnstile token set successfully");
    try {
      if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof window.CustomEvent === "function") {
        window.dispatchEvent(new window.CustomEvent("turnstile:token", { detail: { token: t2, expiry: tokenExpiryTime } }));
      }
    } catch {
    }
  }
  function isTokenValid() {
    return turnstileToken && Date.now() < tokenExpiryTime;
  }
  function getCachedToken() {
    return isTokenValid() ? turnstileToken : null;
  }
  function invalidateToken() {
    turnstileToken = null;
    tokenExpiryTime = 0;
    log("\u{1F5D1}\uFE0F Token invalidated, will force fresh generation");
  }
  async function ensureToken(forceNew = false) {
    if (isTokenValid() && !forceNew) {
      return turnstileToken;
    }
    if (forceNew) {
      invalidateToken();
    }
    if (tokenGenerationInProgress && currentGenerationPromise) {
      log("\u{1F504} Token generation already in progress, waiting for existing promise...");
      try {
        const t2 = await currentGenerationPromise;
        return t2 && t2.length > 20 ? t2 : isTokenValid() ? turnstileToken : null;
      } catch {
      }
    }
    tokenGenerationInProgress = true;
    currentGenerationPromise = (async () => {
      try {
        log("\u{1F504} Token expired or missing, generating new one...");
        const token = await handleCaptcha();
        if (token && token.length > 20) {
          setTurnstileToken(token);
          log("\u2705 Token captured and cached successfully");
          return token;
        }
        log("\u26A0\uFE0F Invisible Turnstile failed, forcing browser automation...");
        const fallbackToken = await handleCaptchaFallback();
        if (fallbackToken && fallbackToken.length > 20) {
          setTurnstileToken(fallbackToken);
          log("\u2705 Fallback token captured successfully");
          return fallbackToken;
        }
        log("\u274C All token generation methods failed");
        return null;
      } finally {
        tokenGenerationInProgress = false;
        currentGenerationPromise = null;
      }
    })();
    return currentGenerationPromise;
  }
  async function handleCaptcha() {
    const startTime = Date.now();
    try {
      const sitekey = detectSitekey();
      log("\u{1F511} Generating Turnstile token for sitekey:", sitekey);
      if (typeof window !== "undefined" && window.navigator) {
        log("\u{1F9ED} UA:", window.navigator.userAgent, "Platform:", window.navigator.platform);
      }
      const token = await generatePaintToken(sitekey);
      if (token && token.length > 20) {
        const duration = Math.round(Date.now() - startTime);
        log(`\u2705 Turnstile token generated successfully in ${duration}ms`);
        return token;
      } else {
        throw new Error("Invalid or empty token received");
      }
    } catch (error) {
      const duration = Math.round(Date.now() - startTime);
      log(`\u274C Turnstile token generation failed after ${duration}ms:`, error);
      throw error;
    }
  }
  async function generatePaintToken(sitekey) {
    return executeTurnstile(sitekey, "paint");
  }
  async function loadTurnstile() {
    if (window.turnstile) {
      return Promise.resolve();
    }
    return new Promise((resolve, reject) => {
      if (document.querySelector('script[src^="https://challenges.cloudflare.com/turnstile/v0/api.js"]')) {
        const checkReady = () => {
          if (window.turnstile) {
            resolve();
          } else {
            setTimeout(checkReady, 100);
          }
        };
        return checkReady();
      }
      const script = document.createElement("script");
      script.src = "https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit";
      script.async = true;
      script.defer = true;
      script.onload = () => {
        log("\u2705 Turnstile script loaded successfully");
        resolve();
      };
      script.onerror = () => {
        log("\u274C Failed to load Turnstile script");
        reject(new Error("Failed to load Turnstile"));
      };
      document.head.appendChild(script);
    });
  }
  function ensureTurnstileContainer() {
    if (!_turnstileContainer || !document.body.contains(_turnstileContainer)) {
      if (_turnstileContainer) {
        _turnstileContainer.remove();
      }
      _turnstileContainer = document.createElement("div");
      _turnstileContainer.style.cssText = `
      position: fixed !important;
      left: -9999px !important; /* keep off-screen for invisible mode */
      top: -9999px !important;
      width: 300px !important;
      height: 65px !important;
      pointer-events: none !important;
      opacity: 0 !important; /* do not use visibility:hidden to avoid engine quirks */
      z-index: -1 !important;
    `;
      _turnstileContainer.setAttribute("aria-hidden", "true");
      _turnstileContainer.id = "turnstile-widget-container";
      document.body.appendChild(_turnstileContainer);
    }
    return _turnstileContainer;
  }
  function ensureTurnstileOverlayContainer() {
    if (_turnstileOverlay && document.body.contains(_turnstileOverlay)) {
      return _turnstileOverlay;
    }
    const overlay = document.createElement("div");
    overlay.id = "turnstile-overlay-container";
    overlay.style.cssText = `
    position: fixed;
    right: 16px;
    bottom: 16px;
    width: 320px;
    min-height: 80px;
    background: rgba(0,0,0,0.7);
    border: 1px solid rgba(255,255,255,0.2);
    border-radius: 10px;
    padding: 12px;
    z-index: 100000;
    backdrop-filter: blur(6px);
    color: #fff;
    box-shadow: 0 8px 24px rgba(0,0,0,0.4);
  `;
    const title = document.createElement("div");
    title.textContent = "Cloudflare Turnstile \u2014 please complete the check if shown";
    title.style.cssText = 'font: 600 12px/1.3 "Segoe UI",sans-serif; margin-bottom: 8px; opacity: 0.9;';
    const widgetHost = document.createElement("div");
    widgetHost.id = "turnstile-overlay-host";
    widgetHost.style.cssText = "width: 100%; min-height: 70px;";
    const closeBtn = document.createElement("button");
    closeBtn.textContent = "Hide";
    closeBtn.style.cssText = "position:absolute; top:6px; right:6px; font-size:11px; background:transparent; color:#fff; border:1px solid rgba(255,255,255,0.2); border-radius:6px; padding:2px 6px; cursor:pointer;";
    closeBtn.addEventListener("click", () => overlay.remove());
    overlay.appendChild(title);
    overlay.appendChild(widgetHost);
    overlay.appendChild(closeBtn);
    document.body.appendChild(overlay);
    _turnstileOverlay = overlay;
    return overlay;
  }
  async function executeTurnstile(sitekey, action = "paint") {
    var _a, _b;
    await loadTurnstile();
    if (_turnstileWidgetId && _lastSitekey === sitekey && ((_a = window.turnstile) == null ? void 0 : _a.execute)) {
      try {
        log("\u{1F504} Reusing existing Turnstile widget...");
        const token = await Promise.race([
          window.turnstile.execute(_turnstileWidgetId, { action }),
          new Promise((_, reject) => setTimeout(() => reject(new Error("Execute timeout")), 15e3))
        ]);
        if (token && token.length > 20) {
          log("\u2705 Token generated via widget reuse");
          return token;
        }
      } catch (err2) {
        log("\u{1F504} Widget reuse failed, will create a fresh widget:", err2.message);
      }
    }
    const invisible = await createNewTurnstileWidgetInvisible(sitekey, action);
    if (invisible && invisible.length > 20) return invisible;
    log("\u{1F440} Falling back to interactive Turnstile (visible).");
    try {
      showUserNotificationTopCenter("\u{1F504} Resolviendo CAPTCHA...", "info");
    } catch {
    }
    const INITIAL_TIMEOUT = 15e3;
    const RETRY_INTERVAL = 5e3;
    let attempt = 1;
    let hasShownFirstRetryNotification = false;
    while (true) {
      const currentTimeout = attempt === 1 ? INITIAL_TIMEOUT : RETRY_INTERVAL;
      log(`\u{1F504} Intento ${attempt} de resoluci\xF3n del CAPTCHA (timeout: ${currentTimeout / 1e3}s)...`);
      if (attempt > 1 && !hasShownFirstRetryNotification) {
        showUserNotification(`\u{1F504} CAPTCHA: Reintentando autom\xE1ticamente cada 5 segundos (intento ${attempt})`, "info");
        hasShownFirstRetryNotification = true;
      } else if (attempt > 2) {
        showUserNotification(`\u{1F504} CAPTCHA: Intento ${attempt} - Continuando autom\xE1ticamente`, "info");
      }
      try {
        if (_turnstileWidgetId && ((_b = window.turnstile) == null ? void 0 : _b.remove)) {
          try {
            window.turnstile.remove(_turnstileWidgetId);
            _turnstileWidgetId = null;
          } catch {
          }
        }
        const token = await createNewTurnstileWidgetInteractiveWithRetry(sitekey, action, true, currentTimeout);
        if (token && token.length > 20) {
          log(`\u2705 CAPTCHA resuelto exitosamente en el intento ${attempt}`);
          if (attempt > 1) {
            showUserNotification("\u2705 CAPTCHA resuelto exitosamente", "success");
          }
          return token;
        }
        log(`\u26A0\uFE0F Intento ${attempt} fall\xF3, reintentando en 5 segundos...`);
        if (attempt > 1) {
          showUserNotification(`\u26A0\uFE0F Intento ${attempt} fall\xF3, reintentando en 5 segundos...`, "info");
        }
        await sleep(5e3);
      } catch (error) {
        log(`\u274C Error en intento ${attempt}:`, error.message);
        if (attempt > 1) {
          showUserNotification(`\u274C Error en intento ${attempt}, reintentando en 5 segundos`, "error");
        }
        await sleep(5e3);
      }
      attempt++;
    }
  }
  async function createNewTurnstileWidgetInvisible(sitekey, action) {
    return new Promise((resolve) => {
      var _a;
      try {
        if (_turnstileWidgetId && ((_a = window.turnstile) == null ? void 0 : _a.remove)) {
          try {
            window.turnstile.remove(_turnstileWidgetId);
          } catch {
          }
        }
        const container = ensureTurnstileContainer();
        container.innerHTML = "";
        const widgetId = window.turnstile.render(container, {
          sitekey,
          action,
          size: "invisible",
          retry: "auto",
          "retry-interval": 8e3,
          callback: (token) => {
            log("\u2705 Invisible Turnstile callback");
            resolve(token);
          },
          "error-callback": () => resolve(null),
          "timeout-callback": () => resolve(null)
        });
        _turnstileWidgetId = widgetId;
        _lastSitekey = sitekey;
        if (!widgetId) return resolve(null);
        Promise.race([
          window.turnstile.execute(widgetId, { action }),
          new Promise((_, reject) => setTimeout(() => reject(new Error("Invisible execute timeout")), 12e3))
        ]).then(resolve).catch(() => resolve(null));
      } catch (e) {
        log("Invisible Turnstile failed:", e);
        resolve(null);
      }
    });
  }
  async function createNewTurnstileWidgetInteractiveWithRetry(sitekey, action, isAutoRetry = true, customTimeout = 3e4) {
    return new Promise((resolve, reject) => {
      var _a;
      try {
        if (_turnstileWidgetId && ((_a = window.turnstile) == null ? void 0 : _a.remove)) {
          try {
            window.turnstile.remove(_turnstileWidgetId);
          } catch {
          }
        }
        const overlay = ensureTurnstileOverlayContainer();
        const host = overlay.querySelector("#turnstile-overlay-host");
        host.innerHTML = "";
        const timeout = isAutoRetry ? customTimeout : 12e4;
        const timeoutId = setTimeout(() => {
          log(`\u23F0 Interactive Turnstile timed out (${isAutoRetry ? "auto-retry" : "manual"})`);
          try {
            overlay.remove();
          } catch {
          }
          resolve(null);
        }, timeout);
        const widgetId = window.turnstile.render(host, {
          sitekey,
          action,
          size: "normal",
          retry: "auto",
          "retry-interval": isAutoRetry ? 3e3 : 8e3,
          // Intervalo más rápido para auto-retry
          callback: (token) => {
            clearTimeout(timeoutId);
            try {
              overlay.remove();
            } catch {
            }
            log(`\u2705 Interactive Turnstile solved (${isAutoRetry ? "auto-retry" : "manual"})`);
            resolve(token);
          },
          "error-callback": (error) => {
            log(`\u{1F6A8} Interactive Turnstile error (${isAutoRetry ? "auto-retry" : "manual"}):`, error);
            if (isAutoRetry) {
              clearTimeout(timeoutId);
              try {
                overlay.remove();
              } catch {
              }
              resolve(null);
            }
          },
          "timeout-callback": () => {
            log(`\u23F0 Turnstile timeout callback (${isAutoRetry ? "auto-retry" : "manual"})`);
            if (isAutoRetry) {
              clearTimeout(timeoutId);
              try {
                overlay.remove();
              } catch {
              }
              resolve(null);
            }
          },
          "expired-callback": () => {
            log(`\u26A0\uFE0F Interactive Turnstile token expired (${isAutoRetry ? "auto-retry" : "manual"})`);
            if (isAutoRetry) {
              clearTimeout(timeoutId);
              try {
                overlay.remove();
              } catch {
              }
              resolve(null);
            }
          }
        });
        _turnstileWidgetId = widgetId;
        _lastSitekey = sitekey;
        if (!widgetId) {
          clearTimeout(timeoutId);
          try {
            overlay.remove();
          } catch {
          }
          resolve(null);
          return;
        }
      } catch (error) {
        log(`\u274C Error creating interactive Turnstile widget (${isAutoRetry ? "auto-retry" : "manual"}):`, error);
        reject(error);
      }
    });
  }
  function detectSitekey(fallback = "0x4AAAAAABpqJe8FO0N84q0F") {
    var _a;
    if (_cachedSitekey) {
      return _cachedSitekey;
    }
    try {
      const sitekeySel = document.querySelector("[data-sitekey]");
      if (sitekeySel) {
        const sitekey = sitekeySel.getAttribute("data-sitekey");
        if (sitekey && sitekey.length > 10) {
          _cachedSitekey = sitekey;
          log("\u{1F50D} Sitekey detected from data attribute:", sitekey);
          return sitekey;
        }
      }
      const turnstileEl = document.querySelector(".cf-turnstile");
      if (((_a = turnstileEl == null ? void 0 : turnstileEl.dataset) == null ? void 0 : _a.sitekey) && turnstileEl.dataset.sitekey.length > 10) {
        _cachedSitekey = turnstileEl.dataset.sitekey;
        log("\u{1F50D} Sitekey detected from turnstile element:", _cachedSitekey);
        return _cachedSitekey;
      }
      if (typeof window !== "undefined" && window.__TURNSTILE_SITEKEY && window.__TURNSTILE_SITEKEY.length > 10) {
        _cachedSitekey = window.__TURNSTILE_SITEKEY;
        log("\u{1F50D} Sitekey detected from global variable:", _cachedSitekey);
        return _cachedSitekey;
      }
      const scripts = document.querySelectorAll("script");
      for (const script of scripts) {
        const content = script.textContent || script.innerHTML;
        const sitekeyMatch = content.match(/sitekey['":\s]+(['"0-9a-zA-Z_-]{20,})/i);
        if (sitekeyMatch && sitekeyMatch[1] && sitekeyMatch[1].length > 10) {
          _cachedSitekey = sitekeyMatch[1].replace(/['"]/g, "");
          log("\u{1F50D} Sitekey detected from script content:", _cachedSitekey);
          return _cachedSitekey;
        }
      }
    } catch (error) {
      log("Error detecting sitekey:", error);
    }
    log("\u{1F50D} Using fallback sitekey:", fallback);
    _cachedSitekey = fallback;
    return fallback;
  }
  function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  function showUserNotification(message, type = "info") {
    showUserNotificationTopCenter(message, type);
  }
  function showUserNotificationTopCenter(message, type = "info", timeout = 3e3) {
    let c = document.getElementById("wplace-toast-container");
    if (!c) {
      c = document.createElement("div");
      c.id = "wplace-toast-container";
      c.style.cssText = `
      position: fixed;
      top: 16px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 2147483647;
      display: flex;
      flex-direction: column;
      gap: 8px;
      pointer-events: none;
    `;
      document.body.appendChild(c);
    }
    const bg = type === "success" ? "#10b981" : type === "error" ? "#ef4444" : "#3b82f6";
    const el = document.createElement("div");
    el.className = "wplace-toast";
    el.textContent = message;
    el.style.cssText = `
    min-width: 240px;
    max-width: 80vw;
    margin: 0 auto;
    background: ${bg};
    color: white;
    border-radius: 10px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.35);
    padding: 10px 14px;
    font-weight: 600;
    letter-spacing: .2px;
    transform: translateY(-10px) scale(0.98);
    opacity: 0;
    transition: transform .25s cubic-bezier(0.2, 0.8, 0.2, 1), opacity .25s ease;
    pointer-events: auto;
  `;
    c.appendChild(el);
    const raf = (cb) => typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame(cb) : setTimeout(cb, 16);
    raf(() => {
      el.style.transform = "translateY(0) scale(1)";
      el.style.opacity = "1";
    });
    const remove = () => {
      el.style.transform = "translateY(-10px) scale(0.98)";
      el.style.opacity = "0";
      setTimeout(() => el.remove(), 250);
    };
    if (timeout > 0) setTimeout(remove, timeout);
    el.addEventListener("click", remove);
  }
  function waitForSelector(selector, interval = 200, timeout = 1e4) {
    return new Promise((resolve) => {
      const endTime = Date.now() + timeout;
      const check = () => {
        const element = document.querySelector(selector);
        if (element) {
          resolve(element);
        } else if (Date.now() < endTime) {
          setTimeout(check, interval);
        } else {
          resolve(null);
        }
      };
      check();
    });
  }
  async function handleCaptchaFallback() {
    return new Promise((resolve, reject) => {
      const executeFlow = async () => {
        try {
          log("\u{1F3AF} Starting automatic CAPTCHA solving process...");
          try {
            showUserNotificationTopCenter("Intentando resolver... Tiempo de espera maximo 30 s", "info");
          } catch {
          }
          invalidateToken();
          tokenPromise = new Promise((res) => {
            _resolveToken = res;
          });
          const timeoutPromise = sleep(3e4).then(() => reject(new Error("Auto-CAPTCHA timed out after 30 seconds.")));
          const solvePromise = (async () => {
            let mainPaintBtn = await waitForSelector("button.btn.btn-primary.btn-lg", 200, 3e3);
            if (!mainPaintBtn) {
              mainPaintBtn = await waitForSelector("button.btn-primary.sm\\:btn-xl", 200, 3e3);
            }
            if (!mainPaintBtn) {
              mainPaintBtn = await waitForSelector("button.btn-primary", 200, 3e3);
            }
            if (!mainPaintBtn) {
              log("\u{1F3AF} No paint button found, clicking on canvas directly to trigger CAPTCHA...");
              const canvas2 = await waitForSelector("canvas", 200, 5e3);
              if (canvas2) {
                canvas2.click();
                await sleep(1e3);
                mainPaintBtn = await waitForSelector("button.btn.btn-primary.btn-lg, button.btn-primary.sm\\:btn-xl, button.btn-primary", 200, 5e3);
              }
            }
            if (!mainPaintBtn) throw new Error("Could not find any paint button after attempts.");
            log("\u{1F3AF} Found paint button, clicking...");
            mainPaintBtn.click();
            await sleep(500);
            log("\u{1F3AF} Selecting transparent color...");
            const transBtn = await waitForSelector("button#color-0", 200, 5e3);
            if (!transBtn) {
              log("\u26A0\uFE0F Could not find transparent color button, trying alternative selectors...");
              const colorBtns = document.querySelectorAll('button[id^="color-"]');
              if (colorBtns.length > 0) {
                colorBtns[0].click();
                log("\u{1F3AF} Clicked first available color button");
              }
            } else {
              transBtn.click();
            }
            await sleep(500);
            log("\u{1F3AF} Finding canvas element...");
            const canvas = await waitForSelector("canvas", 200, 5e3);
            if (!canvas) throw new Error("Could not find the canvas element.");
            canvas.setAttribute("tabindex", "0");
            canvas.focus();
            const rect = canvas.getBoundingClientRect();
            const centerX = Math.round(rect.left + rect.width / 2);
            const centerY = Math.round(rect.top + rect.height / 2);
            log("\u{1F3AF} Simulating canvas interaction...");
            if (typeof window !== "undefined" && window.MouseEvent && window.KeyboardEvent) {
              canvas.dispatchEvent(new window.MouseEvent("mousemove", { clientX: centerX, clientY: centerY, bubbles: true }));
              canvas.dispatchEvent(new window.MouseEvent("mousedown", { clientX: centerX, clientY: centerY, bubbles: true }));
              await sleep(50);
              canvas.dispatchEvent(new window.MouseEvent("mouseup", { clientX: centerX, clientY: centerY, bubbles: true }));
              canvas.dispatchEvent(new window.KeyboardEvent("keydown", { key: " ", code: "Space", bubbles: true }));
              await sleep(50);
              canvas.dispatchEvent(new window.KeyboardEvent("keyup", { key: " ", code: "Space", bubbles: true }));
            }
            await sleep(1e3);
            log("\u{1F3AF} Waiting for CAPTCHA challenge...");
            await sleep(2e3);
            log("\u{1F3AF} Starting confirmation loop...");
            const startTime = Date.now();
            const confirmLoop = async () => {
              let attempts = 0;
              while (!isTokenValid() && Date.now() - startTime < 25e3) {
                attempts++;
                let confirmBtn = await waitForSelector("button.btn.btn-primary.btn-lg", 100, 1e3);
                if (!confirmBtn) {
                  confirmBtn = await waitForSelector("button.btn.btn-primary.sm\\:btn-xl", 100, 1e3);
                }
                if (!confirmBtn) {
                  const allPrimary = Array.from(document.querySelectorAll("button.btn-primary"));
                  confirmBtn = allPrimary.length ? allPrimary[allPrimary.length - 1] : null;
                }
                if (confirmBtn && !confirmBtn.disabled) {
                  log(`\u{1F3AF} Clicking confirmation button (attempt ${attempts})...`);
                  confirmBtn.click();
                } else {
                  log(`\u{1F3AF} No active confirm button found (attempt ${attempts})`);
                }
                await sleep(800);
              }
            };
            confirmLoop();
            const token = await tokenPromise;
            await sleep(500);
            log("\u2705 Token successfully captured through browser automation");
            resolve(token);
          })();
          await Promise.race([solvePromise, timeoutPromise]);
        } catch (error) {
          log("\u274C Auto-CAPTCHA process failed:", error);
          reject(error);
        }
      };
      executeFlow();
    });
  }
  function getPawtectToken() {
    _pawtectToken = window.__WPA_PAWTECT_TOKEN__ || _pawtectToken;
    return _pawtectToken;
  }
  function getFingerprint() {
    _fp = window.__WPA_FINGERPRINT__ || _fp;
    return _fp;
  }
  async function waitForPawtect(timeout = 5e3) {
    if (_pawtectToken && _fp) return { pawtect: _pawtectToken, fp: _fp };
    const timer = setTimeout(() => {
      if (_pawtectResolve) {
        _pawtectResolve({ pawtect: _pawtectToken, fp: _fp });
        _pawtectResolve = null;
      }
    }, timeout);
    const result = await _pawtectPromise.catch(() => ({ pawtect: _pawtectToken, fp: _fp }));
    clearTimeout(timer);
    if (!_pawtectResolve) {
      _pawtectPromise = new Promise((res) => {
        _pawtectResolve = res;
      });
    }
    return result;
  }
  var turnstileToken, _pawtectToken, _fp, _fpCandidate, _pawtectResolve, _pawtectPromise, tokenExpiryTime, tokenGenerationInProgress, currentGenerationPromise, _resolveToken, tokenPromise, TOKEN_LIFETIME, _turnstileWidgetId, _turnstileContainer, _turnstileOverlay, _lastSitekey, _cachedSitekey;
  var init_turnstile = __esm({
    "src/core/turnstile.js"() {
      init_logger();
      turnstileToken = null;
      _pawtectToken = window.__WPA_PAWTECT_TOKEN__ || null;
      _fp = window.__WPA_FINGERPRINT__ || null;
      _fpCandidate = window.__WPA_FP_CANDIDATE__ || null;
      _pawtectResolve = null;
      _pawtectPromise = new Promise((res) => {
        _pawtectResolve = res;
      });
      tokenExpiryTime = 0;
      tokenGenerationInProgress = false;
      currentGenerationPromise = null;
      _resolveToken = null;
      tokenPromise = new Promise((resolve) => {
        _resolveToken = resolve;
      });
      TOKEN_LIFETIME = 24e4;
      _turnstileWidgetId = null;
      _turnstileContainer = null;
      _turnstileOverlay = null;
      _lastSitekey = null;
      _cachedSitekey = null;
      window.__WPA_SET_TURNSTILE_TOKEN__ = function(token) {
        if (token && typeof token === "string" && token.length > 20) {
          log("\u2705 Turnstile Token Captured:", token);
          setTurnstileToken(token);
        }
      };
      window.addEventListener("message", (event) => {
        var _a;
        const data = event == null ? void 0 : event.data;
        if (!data) return;
        if (data.source === "turnstile-capture" && data.token) {
          if (!isTokenValid() || turnstileToken !== data.token) {
            setTurnstileToken(data.token);
          }
          return;
        }
        if (data.__wplace === true && data.type === "token_found") {
          if (data.token && (!isTokenValid() || turnstileToken !== data.token)) {
            log("\u2705 Enhanced interceptor captured token:", data.token);
            setTurnstileToken(data.token);
          }
          if (data.xpaw && (!_pawtectToken || _pawtectToken !== data.xpaw)) {
            _pawtectToken = data.xpaw;
            window.__WPA_PAWTECT_TOKEN__ = _pawtectToken;
            log("\u{1F6E1}\uFE0F Enhanced interceptor captured x-pawtect-token");
            if (_pawtectResolve) {
              _pawtectResolve({ pawtect: _pawtectToken, fp: _fp });
              _pawtectResolve = null;
            }
          }
          if (data.fp && (!_fp || _fp !== data.fp)) {
            _fp = data.fp;
            window.__WPA_FINGERPRINT__ = _fp;
            log("\u{1F194} Enhanced interceptor captured fingerprint (fp)");
            if (_pawtectResolve) {
              _pawtectResolve({ pawtect: _pawtectToken, fp: _fp });
              _pawtectResolve = null;
            }
          }
          return;
        }
        try {
          const msgFp = typeof data === "object" && typeof data.fp === "string" && data.fp.length > 10 ? data.fp : null;
          if (msgFp && (!_fp || _fp !== msgFp)) {
            _fp = msgFp;
            window.__WPA_FINGERPRINT__ = _fp;
            log("\u{1F194} Fingerprint (fp) captured via postMessage");
            if (_pawtectResolve) {
              _pawtectResolve({ pawtect: _pawtectToken, fp: _fp });
              _pawtectResolve = null;
            }
            return;
          }
        } catch {
        }
        try {
          const pi = typeof data === "object" && (data.pi || ((_a = data.payload) == null ? void 0 : _a.pi)) ? data.pi || data.payload.pi : null;
          if (pi && typeof pi === "object" && (pi.xp || pi.pfp || pi.ffp)) {
            if (!_fpCandidate) {
              try {
                _fpCandidate = JSON.parse(JSON.stringify({ xp: pi.xp, pfp: pi.pfp, ffp: pi.ffp }));
              } catch {
                _fpCandidate = { xp: String(pi.xp || ""), pfp: String(pi.pfp || ""), ffp: String(pi.ffp || "") };
              }
              window.__WPA_FP_CANDIDATE__ = _fpCandidate;
              log("\u{1F4E6} Fingerprint candidate (pi) observed via postMessage");
            }
          }
        } catch {
        }
      });
    }
  });

  // src/core/fingerprint.js
  function getCanvasFingerprint() {
    try {
      const c = document.createElement("canvas");
      const ctx = c.getContext("2d");
      if (!ctx) return "nocanvas";
      c.width = 200;
      c.height = 40;
      ctx.textBaseline = "top";
      ctx.font = '14px "Arial"';
      ctx.fillStyle = "#f60";
      ctx.fillRect(0, 0, 200, 40);
      ctx.fillStyle = "#069";
      ctx.fillText("wplace-fp-canvas", 2, 2);
      ctx.strokeStyle = "#ff0";
      ctx.beginPath();
      ctx.arc(100, 20, 18, 0, Math.PI * 2);
      ctx.stroke();
      const data = c.toDataURL();
      return data.slice(0, 64);
    } catch {
      return "nocanvas";
    }
  }
  function getWebGLInfo() {
    try {
      const c = document.createElement("canvas");
      const gl = c.getContext("webgl") || c.getContext("experimental-webgl");
      if (!gl) return "nowebgl";
      const dbg = gl.getExtension("WEBGL_debug_renderer_info");
      const vendor = dbg ? gl.getParameter(dbg.UNMASKED_VENDOR_WEBGL) : gl.getParameter(gl.VENDOR);
      const renderer = dbg ? gl.getParameter(dbg.UNMASKED_RENDERER_WEBGL) : gl.getParameter(gl.RENDERER);
      return vendor + "|" + renderer;
    } catch {
      return "nowebgl";
    }
  }
  function simpleHash(str) {
    let h = 2166136261;
    for (let i = 0; i < str.length; i++) {
      h ^= str.charCodeAt(i);
      h = h + ((h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24)) >>> 0;
    }
    return ("00000000" + h.toString(16)).slice(-8);
  }
  async function sha256Hex2(data) {
    var _a;
    if (typeof window !== "undefined" && ((_a = window.crypto) == null ? void 0 : _a.subtle)) {
      try {
        const TEnc = typeof window !== "undefined" && window.TextEncoder ? window.TextEncoder : null;
        const enc = TEnc ? new TEnc().encode(data) : new Uint8Array([...unescape(encodeURIComponent(data))].map((c) => c.charCodeAt(0)));
        const digest = await window.crypto.subtle.digest("SHA-256", enc);
        return Array.from(new Uint8Array(digest)).map((b) => b.toString(16).padStart(2, "0")).join("");
      } catch {
      }
    }
    return simpleHash(data);
  }
  function collectRaw() {
    const nav = typeof window !== "undefined" && window.navigator ? window.navigator : {};
    const scr = typeof window !== "undefined" && window.screen ? window.screen : {};
    const tz = typeof Intl !== "undefined" && Intl.DateTimeFormat ? Intl.DateTimeFormat().resolvedOptions().timeZone || "" : "";
    const props = {
      ua: nav.userAgent || "",
      plat: nav.platform || "",
      lang: (nav.languages || []).join(",") || nav.language || "",
      cores: nav.hardwareConcurrency || 0,
      mem: nav.deviceMemory || 0,
      width: scr.width || 0,
      height: scr.height || 0,
      depth: scr.colorDepth || 0,
      tz,
      canvas: getCanvasFingerprint(),
      webgl: getWebGLInfo()
    };
    return props;
  }
  async function ensureFingerprint({ force = false } = {}) {
    if (_fp2 && !force) return _fp2;
    if (_inFlight) return _inFlight;
    _inFlight = (async () => {
      try {
        const raw = collectRaw();
        const stable = Object.keys(raw).sort().map((k) => k + ":" + raw[k]).join("|");
        const hash = await sha256Hex2(stable);
        _fp2 = "fp:" + hash.slice(0, 64);
        try {
          window.__WPA_FINGERPRINT__ = _fp2;
        } catch {
        }
        log("[fp] generado len=" + _fp2.length);
        return _fp2;
      } finally {
        _inFlight = null;
      }
    })();
    return _inFlight;
  }
  var _fp2, _inFlight;
  var init_fingerprint = __esm({
    "src/core/fingerprint.js"() {
      init_logger();
      _fp2 = null;
      _inFlight = null;
    }
  });

  // src/core/pawtect.js
  function stableJson(obj) {
    try {
      return JSON.stringify(obj);
    } catch {
      return "";
    }
  }
  async function discoverChunk() {
    var _a, _b;
    if (_chunkUrl) return _chunkUrl;
    try {
      if (typeof document === "undefined") return null;
      const urls = /* @__PURE__ */ new Set();
      try {
        (_a = document.querySelectorAll("script[src]")) == null ? void 0 : _a.forEach((s) => {
          try {
            if (typeof window !== "undefined" && window.URL && window.location) urls.add(new window.URL(s.src, window.location.href).href);
          } catch {
          }
        });
      } catch {
      }
      try {
        (_b = document.querySelectorAll('link[rel="modulepreload"][href],link[as="script"][href]')) == null ? void 0 : _b.forEach((l) => {
          try {
            if (typeof window !== "undefined" && window.URL && window.location) urls.add(new window.URL(l.href, window.location.href).href);
          } catch {
          }
        });
      } catch {
      }
      try {
        if (typeof window !== "undefined" && window.performance) (window.performance.getEntriesByType("resource") || []).forEach((e) => {
          if (e == null ? void 0 : e.name) urls.add(e.name);
        });
      } catch {
      }
      const candidates = [...urls].filter((u) => /\/(_app|assets)\/immutable\/chunks\/.*\.js/i.test(u));
      for (const src of candidates) {
        try {
          const txt = await fetch(src, { credentials: "omit" }).then((r) => r.text());
          if (/get_pawtected_endpoint_payload|pawtect/i.test(txt)) {
            _chunkUrl = src;
            log("[pawtect] chunk encontrado", src);
            return src;
          }
        } catch {
        }
      }
    } catch {
    }
    return null;
  }
  async function loadWasm() {
    if (_wasm) return _wasm;
    const url = await discoverChunk();
    if (!url) {
      log("[pawtect] no se encontr\xF3 chunk");
      return null;
    }
    try {
      _wasmMod = await import(
        /* @vite-ignore */
        url
      );
      if (typeof _wasmMod._ === "function") {
        _wasm = await _wasmMod._();
        log("[pawtect] wasm cargado");
      }
    } catch (e) {
      log("[pawtect] error import wasm", e.message);
    }
    return _wasm;
  }
  function maybeInitUser(me) {
    if (!_wasmMod || _initUser) return;
    try {
      if ((me == null ? void 0 : me.id) && typeof _wasmMod.i === "function") {
        _wasmMod.i(me.id);
        _initUser = true;
      }
    } catch {
    }
  }
  async function computePawtect(bodyObj, { force = false } = {}) {
    const bodyStr = stableJson(bodyObj);
    const key = bodyStr;
    const now = Date.now();
    if (!force && _cache.has(key)) {
      const c = _cache.get(key);
      if (now - c.ts < CACHE_TTL) return c.token;
    }
    if (_busy) {
      await new Promise((r) => setTimeout(r, 150));
      if (!force && _cache.has(key)) return _cache.get(key).token;
    }
    _busy = true;
    try {
      const wasm = await loadWasm();
      if (!wasm || typeof wasm.get_pawtected_endpoint_payload !== "function") return null;
      if (!_initUser) {
        try {
          const me = await fetch("https://backend.wplace.live/me", { credentials: "include" }).then((r) => r.ok ? r.json() : null);
          maybeInitUser(me);
        } catch {
        }
      }
      const enc = typeof window !== "undefined" && window.TextEncoder ? new window.TextEncoder() : { encode: (t2) => new Uint8Array([...unescape(encodeURIComponent(t2))].map((c) => c.charCodeAt(0))) };
      const dec = typeof window !== "undefined" && window.TextDecoder ? new window.TextDecoder() : { decode: (b) => decodeURIComponent(escape(String.fromCharCode(...b))) };
      const bytes = enc.encode(bodyStr);
      let ptr;
      try {
        ptr = wasm.__wbindgen_malloc(bytes.length, 1);
        new Uint8Array(wasm.memory.buffer, ptr, bytes.length).set(bytes);
      } catch {
      }
      let out;
      try {
        out = wasm.get_pawtected_endpoint_payload(ptr, bytes.length);
      } catch (e) {
        log("[pawtect] fallo get_pawtected...", e.message);
        return null;
      }
      let token = null;
      if (Array.isArray(out)) {
        const [op, ol] = out;
        token = dec.decode(new Uint8Array(wasm.memory.buffer, op, ol));
        try {
          wasm.__wbindgen_free(op, ol, 1);
        } catch {
        }
      } else if (typeof out === "string") {
        token = out;
      } else if (out && typeof out.ptr === "number" && typeof out.len === "number") {
        token = dec.decode(new Uint8Array(wasm.memory.buffer, out.ptr, out.len));
        try {
          wasm.__wbindgen_free(out.ptr, out.len, 1);
        } catch {
        }
      }
      if (token) {
        _cache.set(key, { token, ts: now });
        try {
          window.__WPA_PAWTECT_TOKEN__ = token;
        } catch {
        }
        log("[pawtect] token calculado len=" + token.length);
      }
      return token;
    } finally {
      _busy = false;
    }
  }
  async function seedPawtect() {
    try {
      await computePawtect({ colors: [0], coords: [1, 1], t: "seed", fp: "seed" }, { force: true });
    } catch {
    }
  }
  var _wasmMod, _wasm, _chunkUrl, _initUser, _busy, _cache, CACHE_TTL;
  var init_pawtect = __esm({
    "src/core/pawtect.js"() {
      init_logger();
      _wasmMod = null;
      _wasm = null;
      _chunkUrl = null;
      _initUser = false;
      _busy = false;
      _cache = /* @__PURE__ */ new Map();
      CACHE_TTL = 12e4;
    }
  });

  // src/core/json.js
  async function safeParseResponse(response) {
    if (!response) return { ok: false, status: 0, json: {}, text: "", parseError: "no-response" };
    const status = response.status;
    let text = "";
    try {
      text = await response.text();
    } catch (e) {
      return { ok: response.ok, status, json: {}, text: "", parseError: e.message };
    }
    if (!text) return { ok: response.ok, status, json: {}, text: "" };
    try {
      const json = JSON.parse(text);
      return { ok: response.ok, status, json, text };
    } catch (e) {
      return { ok: response.ok, status, json: {}, text, parseError: e.message };
    }
  }
  var init_json = __esm({
    "src/core/json.js"() {
    }
  });

  // src/core/wplace-api.js
  var wplace_api_exports = {};
  __export(wplace_api_exports, {
    checkHealth: () => checkHealth,
    downloadAndExecuteBot: () => downloadAndExecuteBot,
    getSession: () => getSession,
    postPixel: () => postPixel,
    postPixelBatchImage: () => postPixelBatchImage,
    purchaseProduct: () => purchaseProduct
  });
  async function getSession() {
    var _a, _b, _c, _d;
    try {
      const me = await fetch(`${BASE}/me`, { credentials: "include" }).then((r) => r.json());
      const user = me || null;
      const c = (me == null ? void 0 : me.charges) || {};
      const droplets = (_a = me == null ? void 0 : me.droplets) != null ? _a : 0;
      const charges = {
        count: (_b = c.count) != null ? _b : 0,
        // Mantener valor decimal original
        max: (_c = c.max) != null ? _c : 0,
        // Mantener valor original (puede variar por usuario)
        cooldownMs: (_d = c.cooldownMs) != null ? _d : 3e4
      };
      return {
        success: true,
        data: {
          user,
          charges: charges.count,
          maxCharges: charges.max,
          chargeRegen: charges.cooldownMs,
          droplets
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        data: {
          user: null,
          charges: 0,
          maxCharges: 0,
          chargeRegen: 3e4,
          droplets: 0
        }
      };
    }
  }
  async function checkHealth() {
    try {
      const response = await fetch(`${BASE}/health`, {
        method: "GET",
        credentials: "include"
      });
      if (response.ok) {
        const health = await response.json();
        return {
          ...health,
          lastCheck: Date.now(),
          status: "online"
        };
      } else {
        return {
          database: false,
          up: false,
          uptime: "N/A",
          lastCheck: Date.now(),
          status: "error",
          statusCode: response.status
        };
      }
    } catch (error) {
      return {
        database: false,
        up: false,
        uptime: "N/A",
        lastCheck: Date.now(),
        status: "offline",
        error: error.message
      };
    }
  }
  async function purchaseProduct(productId = 70, amount = 1) {
    try {
      const body = JSON.stringify({ product: { id: productId, amount } });
      const r = await fetchWithTimeout(`${BASE}/purchase`, {
        method: "POST",
        headers: { "Content-Type": "text/plain;charset=UTF-8" },
        body,
        credentials: "include",
        timeout: 15e3
      });
      let json = {};
      try {
        json = await r.json();
      } catch {
        json = {};
      }
      return { success: r.ok, status: r.status, json };
    } catch (error) {
      return { success: false, status: 0, json: { error: error.message } };
    }
  }
  async function postPixel(coords, colors, turnstileToken2, tileX, tileY) {
    try {
      const normalizeCoords = (arr) => {
        if (!Array.isArray(arr)) return [];
        const flat = [];
        if (arr.length > 0 && typeof arr[0] === "number") {
          for (let i = 0; i < arr.length; i += 2) {
            const x = Math.trunc(arr[i]);
            const y = Math.trunc(arr[i + 1]);
            if (Number.isFinite(x) && Number.isFinite(y)) {
              flat.push((x % 1e3 + 1e3) % 1e3, (y % 1e3 + 1e3) % 1e3);
            }
          }
          return flat;
        }
        if (typeof arr[0] === "object" && arr[0] && ("x" in arr[0] || "y" in arr[0])) {
          for (const p of arr) {
            const x = Math.trunc(p == null ? void 0 : p.x);
            const y = Math.trunc(p == null ? void 0 : p.y);
            if (Number.isFinite(x) && Number.isFinite(y)) {
              flat.push((x % 1e3 + 1e3) % 1e3, (y % 1e3 + 1e3) % 1e3);
            }
          }
          return flat;
        }
        if (Array.isArray(arr[0])) {
          for (const p of arr) {
            const x = Math.trunc(p == null ? void 0 : p[0]);
            const y = Math.trunc(p == null ? void 0 : p[1]);
            if (Number.isFinite(x) && Number.isFinite(y)) {
              flat.push((x % 1e3 + 1e3) % 1e3, (y % 1e3 + 1e3) % 1e3);
            }
          }
          return flat;
        }
        return flat;
      };
      const normalizeColors = (cols) => Array.isArray(cols) ? cols.map((c) => Math.trunc(Number(c)) || 0) : [];
      const coordsNorm = normalizeCoords(coords);
      const colorsNorm = normalizeColors(colors);
      if (coordsNorm.length === 0 || colorsNorm.length === 0 || coordsNorm.length / 2 !== colorsNorm.length) {
        return { status: 400, json: { error: "Invalid coords/colors format" }, success: false };
      }
      let fp = getFingerprint();
      if (!fp) {
        try {
          fp = await ensureFingerprint({});
        } catch {
        }
      }
      let pawtect = getPawtectToken();
      if (!pawtect) {
        try {
          const dyn = await computePawtect({ colors: colorsNorm, coords: coordsNorm, t: turnstileToken2, ...fp ? { fp } : {} });
          if (dyn) pawtect = dyn;
        } catch {
        }
      }
      if (!fp || !pawtect) {
        try {
          await waitForPawtect(1500);
        } catch {
        }
        if (!pawtect) pawtect = getPawtectToken();
        if (!fp) fp = getFingerprint();
        if (!pawtect) {
          try {
            const dyn2 = await computePawtect({ colors: colorsNorm, coords: coordsNorm, t: turnstileToken2, ...fp ? { fp } : {} });
            if (dyn2) pawtect = dyn2;
          } catch {
          }
        }
      }
      const body = JSON.stringify({ colors: colorsNorm, coords: coordsNorm, t: turnstileToken2, ...fp ? { fp } : {} });
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 2e4);
      const response = await fetch(`${BASE}/s0/pixel/${tileX}/${tileY}`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "text/plain;charset=UTF-8", ...pawtect ? { "x-pawtect-token": pawtect } : {} },
        body,
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      if (response.status === 403) {
        try {
          await response.json();
        } catch {
        }
        console.error("\u274C 403 Forbidden. Turnstile token might be invalid or expired.");
        try {
          console.log("\u{1F504} Regenerating Turnstile token after 403...");
          const newToken = await ensureToken(true);
          pawtect = getPawtectToken();
          fp = getFingerprint();
          if (!pawtect) {
            try {
              const dyn3 = await computePawtect({ colors: colorsNorm, coords: coordsNorm, t: newToken, ...fp ? { fp } : {} });
              if (dyn3) pawtect = dyn3;
            } catch {
            }
          }
          const retryBody = JSON.stringify({
            colors: colorsNorm,
            coords: coordsNorm,
            t: newToken,
            ...fp ? { fp } : {}
          });
          const retryController = new AbortController();
          const retryTimeoutId = setTimeout(() => retryController.abort(), 2e4);
          const retryResponse = await fetch(`${BASE}/s0/pixel/${tileX}/${tileY}`, {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "text/plain;charset=UTF-8", ...pawtect ? { "x-pawtect-token": pawtect } : {} },
            body: retryBody,
            signal: retryController.signal
          });
          clearTimeout(retryTimeoutId);
          if (retryResponse.status === 403) {
            return {
              status: 403,
              json: { error: "Fresh token expired or invalid after retry" },
              success: false
            };
          }
          let retryData = null;
          try {
            const text = await retryResponse.text();
            if (text) {
              retryData = JSON.parse(text);
            }
          } catch {
            retryData = {};
          }
          return {
            status: retryResponse.status,
            json: retryData,
            success: retryResponse.ok
          };
        } catch (retryError) {
          console.error("\u274C Token regeneration failed:", retryError);
          return {
            status: 403,
            json: { error: "Token regeneration failed" },
            success: false
          };
        }
      }
      if (response.status >= 500 && response.status <= 504) {
        try {
          const newToken = await ensureToken(true);
          pawtect = getPawtectToken();
          fp = getFingerprint();
          if (!pawtect) {
            try {
              const dyn4 = await computePawtect({ colors: colorsNorm, coords: coordsNorm, t: newToken, ...fp ? { fp } : {} });
              if (dyn4) pawtect = dyn4;
            } catch {
            }
          }
          const retryBody = JSON.stringify({ colors: colorsNorm, coords: coordsNorm, t: newToken, ...fp ? { fp } : {} });
          const retryController = new AbortController();
          const retryTimeoutId = setTimeout(() => retryController.abort(), 2e4);
          const retryResponse = await fetch(`${BASE}/s0/pixel/${tileX}/${tileY}`, {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "text/plain;charset=UTF-8", ...pawtect ? { "x-pawtect-token": pawtect } : {} },
            body: retryBody,
            signal: retryController.signal
          });
          clearTimeout(retryTimeoutId);
          const retryParsed = await safeParseResponse(retryResponse);
          if (retryResponse.ok) {
            try {
              invalidateToken();
            } catch {
            }
          }
          return { status: retryResponse.status, json: retryParsed.json, success: retryResponse.ok };
        } catch (e) {
        }
      }
      const parsed = await safeParseResponse(response);
      return { status: response.status, json: parsed.json, success: response.ok };
    } catch (error) {
      if (error.name === "AbortError" || error.name === "TimeoutError") {
        return {
          status: 408,
          json: { error: "Request timeout" },
          success: false
        };
      }
      return {
        status: 0,
        json: { error: error.message },
        success: false
      };
    }
  }
  async function postPixelBatchImage(tileX, tileY, coords, colors, turnstileToken2) {
    var _a, _b, _c;
    try {
      const normalizeCoords = (arr) => {
        if (!Array.isArray(arr)) return [];
        const flat = [];
        if (arr.length > 0 && typeof arr[0] === "number") {
          for (let i = 0; i < arr.length; i += 2) {
            const x = Math.trunc(arr[i]);
            const y = Math.trunc(arr[i + 1]);
            if (Number.isFinite(x) && Number.isFinite(y)) {
              flat.push((x % 1e3 + 1e3) % 1e3, (y % 1e3 + 1e3) % 1e3);
            }
          }
          return flat;
        }
        if (typeof arr[0] === "object" && arr[0] && ("x" in arr[0] || "y" in arr[0])) {
          for (const p of arr) {
            const x = Math.trunc(p == null ? void 0 : p.x);
            const y = Math.trunc(p == null ? void 0 : p.y);
            if (Number.isFinite(x) && Number.isFinite(y)) {
              flat.push((x % 1e3 + 1e3) % 1e3, (y % 1e3 + 1e3) % 1e3);
            }
          }
          return flat;
        }
        if (Array.isArray(arr[0])) {
          for (const p of arr) {
            const x = Math.trunc(p == null ? void 0 : p[0]);
            const y = Math.trunc(p == null ? void 0 : p[1]);
            if (Number.isFinite(x) && Number.isFinite(y)) {
              flat.push((x % 1e3 + 1e3) % 1e3, (y % 1e3 + 1e3) % 1e3);
            }
          }
          return flat;
        }
        return flat;
      };
      const normalizeColors = (cols) => Array.isArray(cols) ? cols.map((c) => Math.trunc(Number(c)) || 0) : [];
      const coordsNorm = normalizeCoords(coords);
      const colorsNorm = normalizeColors(colors);
      if (coordsNorm.length === 0 || colorsNorm.length === 0 || coordsNorm.length / 2 !== colorsNorm.length) {
        log(`[API] Invalid coords/colors for tile ${tileX},${tileY} \u2192 coordsPairs=${coordsNorm.length / 2} colors=${colorsNorm.length}`);
        return { status: 400, json: { error: "Invalid coords/colors format" }, success: false, painted: 0 };
      }
      let fp = getFingerprint();
      if (!fp) {
        try {
          fp = await ensureFingerprint({});
        } catch {
        }
      }
      let pawtect = null;
      try {
        const preview = { colors, coords, t: turnstileToken2 || "seed", ...fp ? { fp } : { fp: "seed" } };
        const dyn = await computePawtect(preview);
        if (dyn) pawtect = dyn;
        else pawtect = getPawtectToken();
      } catch {
        pawtect = getPawtectToken();
      }
      if (!fp) {
        try {
          await waitForPawtect(1200);
        } catch {
        }
        fp = getFingerprint();
      }
      const body = JSON.stringify({
        colors: colorsNorm,
        coords: coordsNorm,
        t: turnstileToken2,
        ...fp ? { fp } : {}
      });
      let bodyHash = "";
      try {
        let h = 2166136261;
        for (let i = 0; i < body.length; i++) {
          h ^= body.charCodeAt(i);
          h = Math.imul(h, 16777619);
        }
        bodyHash = ("00000000" + (h >>> 0).toString(16)).slice(-8);
      } catch {
      }
      log(`[API] Sending batch to tile ${tileX},${tileY} with ${colors.length} pixels, token: ${turnstileToken2 ? turnstileToken2.substring(0, 50) + "..." : "null"}`);
      log(`[API] postPixelBatchImage include: pawtect=${!!pawtect} fp=${!!fp} bodyHash=${bodyHash}`);
      const response = await fetch(`${BASE}/s0/pixel/${tileX}/${tileY}`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "text/plain;charset=UTF-8", ...pawtect ? { "x-pawtect-token": pawtect } : {} },
        body
      });
      log(`[API] Response: ${response.status} ${response.statusText}`);
      if (response.status === 403) {
        try {
          await response.json();
        } catch {
        }
        console.error("\u274C 403 Forbidden. Turnstile token might be invalid or expired.");
        try {
          console.log("\u{1F504} Regenerating Turnstile token after 403...");
          const newToken = await ensureToken(true);
          pawtect = getPawtectToken();
          fp = getFingerprint();
          if (!newToken) {
            return {
              status: 403,
              json: { error: "Could not generate new token" },
              success: false,
              painted: 0
            };
          }
          const retryBody = JSON.stringify({
            colors: colorsNorm,
            coords: coordsNorm,
            t: newToken,
            ...fp ? { fp } : {}
          });
          log(`[API] Retrying with fresh token: ${newToken.substring(0, 50)}...`);
          const retryResponse = await fetch(`${BASE}/s0/pixel/${tileX}/${tileY}`, {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "text/plain;charset=UTF-8", ...pawtect ? { "x-pawtect-token": pawtect } : {} },
            body: retryBody
          });
          log(`[API] Retry response: ${retryResponse.status} ${retryResponse.statusText}`);
          if (retryResponse.status === 403) {
            return {
              status: 403,
              json: { error: "Fresh token still expired or invalid after retry" },
              success: false,
              painted: 0
            };
          }
          const retryParsed = await safeParseResponse(retryResponse);
          const painted2 = ((_a = retryParsed.json) == null ? void 0 : _a.painted) || 0;
          log(`[API] Retry result: ${painted2} pixels painted`);
          return { status: retryResponse.status, json: retryParsed.json, success: retryResponse.ok, painted: painted2 };
        } catch (retryError) {
          console.error("\u274C Token regeneration failed:", retryError);
          return {
            status: 403,
            json: { error: "Token regeneration failed: " + retryError.message },
            success: false,
            painted: 0
          };
        }
      }
      if (response.status >= 500 && response.status <= 504) {
        try {
          const newToken = await ensureToken(true);
          pawtect = getPawtectToken();
          fp = getFingerprint();
          const retryBody = JSON.stringify({ colors: colorsNorm, coords: coordsNorm, t: newToken, ...fp ? { fp } : {} });
          log(`[API] Retrying after ${response.status} with fresh token: ${newToken.substring(0, 50)}...`);
          const retryResponse = await fetch(`${BASE}/s0/pixel/${tileX}/${tileY}`, {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "text/plain;charset=UTF-8", ...pawtect ? { "x-pawtect-token": pawtect } : {} },
            body: retryBody
          });
          const retryParsed2 = await safeParseResponse(retryResponse);
          const painted2 = ((_b = retryParsed2.json) == null ? void 0 : _b.painted) || 0;
          log(`[API] Retry after ${response.status}: ${painted2} pixels painted`);
          return { status: retryResponse.status, json: retryParsed2.json, success: retryResponse.ok, painted: painted2 };
        } catch (e) {
        }
      }
      const finalParsed = await safeParseResponse(response);
      const painted = ((_c = finalParsed.json) == null ? void 0 : _c.painted) || 0;
      log(`[API] Success: ${painted} pixels painted`);
      return {
        status: response.status,
        json: finalParsed.json,
        success: response.ok,
        painted
      };
    } catch (error) {
      if (error.name === "AbortError" || error.name === "TimeoutError") {
        log(`[API] Request timeout for tile ${tileX},${tileY}`);
        return {
          status: 408,
          json: { error: "Request timeout" },
          success: false,
          painted: 0
        };
      }
      log(`[API] Network error: ${error.message}`);
      return {
        status: 0,
        json: { error: error.message },
        success: false,
        painted: 0
      };
    }
  }
  async function downloadAndExecuteBot(botType, rawBase) {
    log(`\u{1F4E5} Descargando bot: ${botType}`);
    try {
      const botFiles = {
        "farm": "Auto-Farm.js",
        "image": "Auto-Image.js",
        "guard": "Auto-Guard.js"
      };
      const fileName = botFiles[botType];
      if (!fileName) throw new Error(`Tipo de bot desconocido: ${botType}`);
      const url = `${rawBase}/${fileName}`;
      log(`\u{1F310} URL: ${url}`);
      const response = await fetch(url, { cache: "no-cache" });
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      const code = await response.text();
      log(`\u2705 Bot descargado (${code.length} chars), inyectando...`);
      const sourceURL = `
//# sourceURL=${url}`;
      log("\u{1F680} Ejecutando bot en contexto global (para acceso a turnstile.js)...");
      (0, eval)(code + sourceURL);
      log("\u2705 Bot ejecutado con acceso completo a turnstile.js");
      return true;
    } catch (error) {
      log("\u274C Error descargando/ejecutando bot:", error.message);
      throw error;
    }
  }
  var BASE;
  var init_wplace_api = __esm({
    "src/core/wplace-api.js"() {
      init_http();
      init_turnstile();
      init_fingerprint();
      init_pawtect();
      init_logger();
      init_json();
      BASE = "https://backend.wplace.live";
    }
  });

  // src/core/window-manager.js
  function setModalDebug(enabled) {
    DEBUG_MODAL_MANAGER = enabled;
  }
  function debugLog(message, data = null) {
    if (!DEBUG_MODAL_MANAGER) return;
    if (data) {
      console.log(`[ModalManager] ${message}`, data);
    } else {
      console.log(`[ModalManager] ${message}`);
    }
  }
  function isAnyModalOpen() {
    const modals = document.querySelectorAll("dialog.modal[open], dialog[open], .modal[open], .modal.show");
    return modals.length > 0;
  }
  function handleWindowsVisibilityOnModal() {
    const modalOpen = isAnyModalOpen();
    debugLog(`Modal state changed. Open: ${modalOpen}`);
    debugLog(`Windows registered: ${windowElements.size}`);
    debugLog(`Windows currently hidden by modal: ${hiddenWindowsByModal.size}`);
    windowElements.forEach((windowElement) => {
      if (modalOpen) {
        if (!hiddenWindowsByModal.has(windowElement)) {
          debugLog("Hiding window due to modal", windowElement);
          hiddenWindowsByModal.add(windowElement);
          windowElement.style.transition = "all 0.3s ease-out";
          windowElement.style.opacity = "0";
          windowElement.style.pointerEvents = "none";
          const root = windowElement.getRootNode && windowElement.getRootNode();
          if (root && root.host && root.host.style) {
            debugLog("Also hiding Shadow DOM host", root.host);
            root.host.style.transition = "all 0.3s ease-out";
            root.host.style.opacity = "0";
            root.host.style.pointerEvents = "none";
          }
        }
      } else {
        if (hiddenWindowsByModal.has(windowElement)) {
          debugLog("Showing window, no modals detected", windowElement);
          hiddenWindowsByModal.delete(windowElement);
          windowElement.style.transition = "all 0.3s ease-in";
          windowElement.style.opacity = "1";
          windowElement.style.pointerEvents = "auto";
          const root = windowElement.getRootNode && windowElement.getRootNode();
          if (root && root.host && root.host.style) {
            debugLog("Also showing Shadow DOM host", root.host);
            root.host.style.transition = "all 0.3s ease-in";
            root.host.style.opacity = "1";
            root.host.style.pointerEvents = "auto";
          }
        }
      }
    });
  }
  function setupModalObservers() {
    if (modalObserversSetup) return;
    debugLog("Setting up modal observers");
    const modalAttributeObserver = new MutationObserver((mutations) => {
      debugLog(`Attribute mutations detected: ${mutations.length}`);
      mutations.forEach((mutation) => {
        if (mutation.type === "attributes" && (mutation.attributeName === "open" || mutation.attributeName === "class")) {
          debugLog(`Attribute changed: ${mutation.attributeName} on`, mutation.target);
          debugLog(`Old value: ${mutation.oldValue}`);
          debugLog(`New value: ${mutation.target.getAttribute(mutation.attributeName)}`);
          handleWindowsVisibilityOnModal();
        }
      });
    });
    const domObserver = new MutationObserver((mutations) => {
      debugLog(`DOM mutations detected: ${mutations.length}`);
      mutations.forEach((mutation) => {
        if (mutation.type === "childList") {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const modalSelectors2 = 'dialog.modal, dialog, .modal, [role="dialog"], .overlay, .popup';
              if (node.matches && node.matches(modalSelectors2)) {
                debugLog("New modal element detected", node);
                modalAttributeObserver.observe(node, {
                  attributes: true,
                  attributeFilter: ["open", "class", "aria-hidden"],
                  attributeOldValue: true
                });
                handleWindowsVisibilityOnModal();
              }
              const nestedModals = node.querySelectorAll ? node.querySelectorAll(modalSelectors2) : [];
              if (nestedModals.length > 0) {
                debugLog(`Found ${nestedModals.length} nested modals`);
              }
              nestedModals.forEach((modal) => {
                debugLog("Observing nested modal", modal);
                modalAttributeObserver.observe(modal, {
                  attributes: true,
                  attributeFilter: ["open", "class", "aria-hidden"],
                  attributeOldValue: true
                });
              });
              if (nestedModals.length > 0) {
                handleWindowsVisibilityOnModal();
              }
            }
          });
          if (mutation.removedNodes.length > 0) {
            debugLog(`${mutation.removedNodes.length} nodes removed`);
            handleWindowsVisibilityOnModal();
          }
        }
      });
    });
    const modalSelectors = 'dialog.modal, dialog, .modal, [role="dialog"], .overlay, .popup';
    const existingModals = document.querySelectorAll(modalSelectors);
    debugLog(`Found ${existingModals.length} existing modals`);
    existingModals.forEach((modal) => {
      debugLog("Observing existing modal", modal);
      modalAttributeObserver.observe(modal, {
        attributes: true,
        attributeFilter: ["open", "class", "aria-hidden"],
        attributeOldValue: true
      });
    });
    domObserver.observe(document.body, {
      childList: true,
      subtree: true
    });
    modalObserversSetup = true;
    debugLog("Modal observers setup complete");
  }
  function registerWindow(windowElement) {
    if (!windowElement) return;
    windowElements.add(windowElement);
    if (!modalObserversSetup) {
      setTimeout(() => {
        setupModalObservers();
      }, 100);
    }
    const bringToFrontHandler = (event) => {
      if (event.target === windowElement || windowElement.contains(event.target)) {
        bringWindowToFront(windowElement);
      }
    };
    windowElement.addEventListener("mousedown", bringToFrontHandler);
    windowElement._bringToFrontHandler = bringToFrontHandler;
    if (!windowElement.style.zIndex) {
      windowElement.style.zIndex = currentMaxZIndex++;
      const root = windowElement.getRootNode && windowElement.getRootNode();
      if (root && root.host && root.host.style) {
        root.host.style.zIndex = windowElement.style.zIndex;
      }
    }
    handleWindowsVisibilityOnModal();
    debugLog("Window registered successfully", windowElement);
  }
  function unregisterWindow(windowElement) {
    if (!windowElement) return;
    windowElements.delete(windowElement);
    hiddenWindowsByModal.delete(windowElement);
    if (windowElement._bringToFrontHandler) {
      windowElement.removeEventListener("mousedown", windowElement._bringToFrontHandler);
      delete windowElement._bringToFrontHandler;
    }
  }
  function bringWindowToFront(windowElement) {
    if (!windowElement || !windowElements.has(windowElement)) return;
    if (isAnyModalOpen()) return;
    currentMaxZIndex++;
    windowElement.style.zIndex = currentMaxZIndex;
    const root = windowElement.getRootNode && windowElement.getRootNode();
    if (root && root.host && root.host.style) {
      root.host.style.zIndex = currentMaxZIndex;
    }
  }
  function refreshWindowsVisibility() {
    handleWindowsVisibilityOnModal();
  }
  function debugModalState() {
    console.log("=== MODAL MANAGER DEBUG STATE ===");
    console.log("Debug enabled:", DEBUG_MODAL_MANAGER);
    console.log("Observers setup:", modalObserversSetup);
    console.log("Windows registered:", windowElements.size);
    console.log("Windows hidden by modal:", hiddenWindowsByModal.size);
    console.log("Current max Z-Index:", currentMaxZIndex);
    console.log("Any modal open:", isAnyModalOpen());
    console.log("\n--- Registered Windows ---");
    windowElements.forEach((window2, index) => {
      console.log(`Window ${index}:`, {
        element: window2,
        zIndex: window2.style.zIndex,
        opacity: window2.style.opacity,
        isHidden: hiddenWindowsByModal.has(window2)
      });
    });
    console.log("\n--- Current Modals ---");
    const modals = document.querySelectorAll('dialog.modal[open], dialog[open], .modal[open], .modal.show, [role="dialog"]');
    modals.forEach((modal, index) => {
      console.log(`Modal ${index}:`, {
        element: modal,
        isOpen: modal.hasAttribute("open") || modal.classList.contains("show"),
        display: window.getComputedStyle(modal).display,
        visibility: window.getComputedStyle(modal).visibility
      });
    });
  }
  var currentMaxZIndex, windowElements, modalObserversSetup, hiddenWindowsByModal, DEBUG_MODAL_MANAGER;
  var init_window_manager = __esm({
    "src/core/window-manager.js"() {
      currentMaxZIndex = 1e5;
      windowElements = /* @__PURE__ */ new Set();
      modalObserversSetup = false;
      hiddenWindowsByModal = /* @__PURE__ */ new Set();
      DEBUG_MODAL_MANAGER = false;
      if (typeof window !== "undefined") {
        window.setModalDebug = setModalDebug;
        window.debugModalState = debugModalState;
        window.registerWindow = registerWindow;
        window.unregisterWindow = unregisterWindow;
        window.__modalManagerDebug = {
          windowElements,
          hiddenWindowsByModal,
          isAnyModalOpen,
          refreshWindowsVisibility
        };
        console.log("[WindowManager] Funciones expuestas globalmente autom\xE1ticamente");
      }
    }
  });

  // src/log_window/log-window.js
  function createLogWindow(botName) {
    if (!window.__wplaceLogWindows[botName]) {
      window.__wplaceLogWindows[botName] = new LogWindow(botName);
    }
    return window.__wplaceLogWindows[botName];
  }
  function getLogWindow(botName) {
    return window.__wplaceLogWindows[botName] || null;
  }
  function destroyLogWindow(botName) {
    if (window.__wplaceLogWindows[botName]) {
      window.__wplaceLogWindows[botName].destroy();
      delete window.__wplaceLogWindows[botName];
    }
  }
  function destroyAllLogWindows() {
    Object.keys(window.__wplaceLogWindows).forEach((botName) => {
      destroyLogWindow(botName);
    });
  }
  var LogWindow;
  var init_log_window = __esm({
    "src/log_window/log-window.js"() {
      init_logger();
      init_window_manager();
      LogWindow = class {
        constructor(botName = "Bot") {
          this.botName = botName;
          this.isVisible = false;
          this.logs = [];
          this.maxLogs = 1e3;
          this.container = null;
          this.logContent = null;
          this.isResizing = false;
          this.resizeHandle = null;
          this.originalConsole = {};
          this.config = {
            width: 600,
            height: 400,
            x: window.innerWidth - 620,
            y: 20,
            visible: false
          };
          this.loadConfig();
          this.createWindow();
          this.setupLogInterception();
          this.setupEventListeners();
        }
        /**
         * Carga la configuración guardada del localStorage
         */
        loadConfig() {
          try {
            const saved = localStorage.getItem(`wplace-log-window-${this.botName}`);
            if (saved) {
              this.config = { ...this.config, ...JSON.parse(saved) };
            }
          } catch (error) {
            log("Error cargando configuraci\xF3n de ventana de logs:", error);
          }
        }
        /**
         * Guarda la configuración actual en localStorage
         */
        saveConfig() {
          try {
            localStorage.setItem(`wplace-log-window-${this.botName}`, JSON.stringify(this.config));
          } catch (error) {
            log("Error guardando configuraci\xF3n de ventana de logs:", error);
          }
        }
        /**
         * Crea la estructura HTML de la ventana
         */
        createWindow() {
          this.container = document.createElement("div");
          this.container.className = "wplace-log-window";
          this.container.style.cssText = `
      position: fixed;
      left: ${this.config.x}px;
      top: ${this.config.y}px;
      width: ${this.config.width}px;
      height: ${this.config.height}px;
      background: rgba(0, 0, 0, 0.9);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      z-index: 100001;
      display: ${this.config.visible ? "flex" : "none"};
      flex-direction: column;
      backdrop-filter: blur(10px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      color: #fff;
      resize: none;
      overflow: hidden;
    `;
          const header = document.createElement("div");
          header.className = "log-window-header";
          header.style.cssText = `
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 12px;
      background: rgba(255, 255, 255, 0.1);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      cursor: move;
      user-select: none;
      border-radius: 7px 7px 0 0;
    `;
          const title = document.createElement("div");
          title.textContent = `\u{1F4CB} Logs - ${this.botName}`;
          title.style.cssText = `
      font-weight: bold;
      font-size: 14px;
      color: #e2e8f0;
    `;
          const controls = document.createElement("div");
          controls.style.cssText = `
      display: flex;
      gap: 8px;
    `;
          const downloadBtn = document.createElement("button");
          downloadBtn.innerHTML = "\u{1F4BE}";
          downloadBtn.title = "Descargar logs";
          downloadBtn.style.cssText = `
      background: rgba(34, 197, 94, 0.8);
      border: none;
      border-radius: 4px;
      color: white;
      width: 24px;
      height: 24px;
      cursor: pointer;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background 0.2s;
    `;
          downloadBtn.addEventListener("mouseenter", () => {
            downloadBtn.style.background = "rgba(34, 197, 94, 1)";
          });
          downloadBtn.addEventListener("mouseleave", () => {
            downloadBtn.style.background = "rgba(34, 197, 94, 0.8)";
          });
          downloadBtn.addEventListener("click", () => this.downloadLogs());
          const closeBtn = document.createElement("button");
          closeBtn.innerHTML = "\u2715";
          closeBtn.title = "Cerrar ventana";
          closeBtn.style.cssText = `
      background: rgba(239, 68, 68, 0.8);
      border: none;
      border-radius: 4px;
      color: white;
      width: 24px;
      height: 24px;
      cursor: pointer;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background 0.2s;
    `;
          closeBtn.addEventListener("mouseenter", () => {
            closeBtn.style.background = "rgba(239, 68, 68, 1)";
          });
          closeBtn.addEventListener("mouseleave", () => {
            closeBtn.style.background = "rgba(239, 68, 68, 0.8)";
          });
          closeBtn.addEventListener("click", () => this.hide());
          controls.appendChild(downloadBtn);
          controls.appendChild(closeBtn);
          header.appendChild(title);
          header.appendChild(controls);
          this.logContent = document.createElement("div");
          this.logContent.className = "log-window-content";
          this.logContent.style.cssText = `
      flex: 1;
      padding: 8px;
      overflow-y: auto;
      font-size: 12px;
      line-height: 1.4;
      white-space: pre-wrap;
      word-break: break-word;
    `;
          this.resizeHandle = document.createElement("div");
          this.resizeHandle.className = "log-window-resize-handle";
          this.resizeHandle.style.cssText = `
      position: absolute;
      bottom: 0;
      right: 0;
      width: 20px;
      height: 20px;
      cursor: se-resize;
      background: linear-gradient(-45deg, transparent 30%, rgba(255,255,255,0.3) 30%, rgba(255,255,255,0.3) 70%, transparent 70%);
      border-radius: 0 0 8px 0;
    `;
          this.container.appendChild(header);
          this.container.appendChild(this.logContent);
          this.container.appendChild(this.resizeHandle);
          document.body.appendChild(this.container);
          registerWindow(this.container);
          this.setupDragging(header);
          this.setupResizing();
          this.isVisible = this.config.visible;
        }
        /**
         * Configura el arrastre de la ventana
         */
        setupDragging(header) {
          let isDragging = false;
          let dragOffset = { x: 0, y: 0 };
          header.addEventListener("mousedown", (e) => {
            if (e.target.tagName === "BUTTON") return;
            isDragging = true;
            dragOffset.x = e.clientX - this.container.offsetLeft;
            dragOffset.y = e.clientY - this.container.offsetTop;
            document.addEventListener("mousemove", handleDrag);
            document.addEventListener("mouseup", stopDrag);
            e.preventDefault();
          });
          const handleDrag = (e) => {
            if (!isDragging) return;
            const newX = Math.max(0, Math.min(window.innerWidth - this.container.offsetWidth, e.clientX - dragOffset.x));
            const newY = Math.max(0, Math.min(window.innerHeight - this.container.offsetHeight, e.clientY - dragOffset.y));
            this.container.style.left = newX + "px";
            this.container.style.top = newY + "px";
            this.config.x = newX;
            this.config.y = newY;
          };
          const stopDrag = () => {
            isDragging = false;
            document.removeEventListener("mousemove", handleDrag);
            document.removeEventListener("mouseup", stopDrag);
            this.saveConfig();
          };
        }
        /**
         * Configura el redimensionamiento de la ventana
         */
        setupResizing() {
          let isResizing = false;
          let startX, startY, startWidth, startHeight;
          this.resizeHandle.addEventListener("mousedown", (e) => {
            isResizing = true;
            startX = e.clientX;
            startY = e.clientY;
            startWidth = parseInt(document.defaultView.getComputedStyle(this.container).width, 10);
            startHeight = parseInt(document.defaultView.getComputedStyle(this.container).height, 10);
            document.addEventListener("mousemove", handleResize);
            document.addEventListener("mouseup", stopResize);
            e.preventDefault();
          });
          const handleResize = (e) => {
            if (!isResizing) return;
            const newWidth = Math.max(300, startWidth + e.clientX - startX);
            const newHeight = Math.max(200, startHeight + e.clientY - startY);
            this.container.style.width = newWidth + "px";
            this.container.style.height = newHeight + "px";
            this.config.width = newWidth;
            this.config.height = newHeight;
          };
          const stopResize = () => {
            isResizing = false;
            document.removeEventListener("mousemove", handleResize);
            document.removeEventListener("mouseup", stopResize);
            this.saveConfig();
          };
        }
        /**
         * Configura la interceptación de logs de consola
         */
        setupLogInterception() {
          this.originalConsole = {
            log: console.log,
            info: console.info,
            warn: console.warn,
            error: console.error,
            debug: console.debug
          };
          console.log = (...args) => {
            this.originalConsole.log.apply(console, args);
            this.addLog("log", args);
          };
          console.info = (...args) => {
            this.originalConsole.info.apply(console, args);
            this.addLog("info", args);
          };
          console.warn = (...args) => {
            this.originalConsole.warn.apply(console, args);
            this.addLog("warn", args);
          };
          console.error = (...args) => {
            this.originalConsole.error.apply(console, args);
            this.addLog("error", args);
          };
          console.debug = (...args) => {
            this.originalConsole.debug.apply(console, args);
            this.addLog("debug", args);
          };
        }
        /**
         * Añade un log a la ventana
         */
        addLog(type, args) {
          const timestamp = (/* @__PURE__ */ new Date()).toLocaleTimeString();
          const message = args.map(
            (arg) => typeof arg === "object" ? JSON.stringify(arg, null, 2) : String(arg)
          ).join(" ");
          const logEntry = {
            timestamp,
            type,
            message,
            raw: args
          };
          this.logs.push(logEntry);
          if (this.logs.length > this.maxLogs) {
            this.logs.shift();
          }
          if (this.isVisible) {
            this.updateLogDisplay();
          }
        }
        /**
         * Actualiza la visualización de logs
         */
        updateLogDisplay() {
          if (!this.logContent) return;
          const logHtml = this.logs.map((entry) => {
            const color = this.getLogColor(entry.type);
            return `<div style="color: ${color}; margin-bottom: 2px;">[${entry.timestamp}] ${entry.message}</div>`;
          }).join("");
          this.logContent.innerHTML = logHtml;
          this.logContent.scrollTop = this.logContent.scrollHeight;
        }
        /**
         * Obtiene el color para cada tipo de log
         */
        getLogColor(type) {
          const colors = {
            log: "#e2e8f0",
            info: "#60a5fa",
            warn: "#fbbf24",
            error: "#f87171",
            debug: "#a78bfa"
          };
          return colors[type] || colors.log;
        }
        /**
         * Descarga los logs como archivo
         */
        downloadLogs() {
          const now = /* @__PURE__ */ new Date();
          const dateStr = now.toISOString().split("T")[0];
          const timeStr = now.toTimeString().split(" ")[0].replace(/:/g, "-");
          const filename = `log_${this.botName}_${dateStr}_${timeStr}.log`;
          const logText = this.logs.map(
            (entry) => `[${entry.timestamp}] [${entry.type.toUpperCase()}] ${entry.message}`
          ).join("\n");
          const blob = new Blob([logText], { type: "text/plain" });
          const url = URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = filename;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
          log(`\u{1F4E5} Logs descargados como: ${filename}`);
        }
        /**
         * Muestra la ventana de logs
         */
        show() {
          if (this.container) {
            this.container.style.display = "flex";
            bringWindowToFront(this.container);
            this.isVisible = true;
            this.config.visible = true;
            this.updateLogDisplay();
            this.saveConfig();
          }
        }
        /**
         * Oculta la ventana de logs
         */
        hide() {
          if (this.container) {
            this.container.style.display = "none";
            this.isVisible = false;
            this.config.visible = false;
            this.saveConfig();
          }
        }
        /**
         * Alterna la visibilidad de la ventana
         */
        toggle() {
          if (this.isVisible) {
            this.hide();
          } else {
            this.show();
          }
        }
        /**
         * Limpia todos los logs
         */
        clear() {
          this.logs = [];
          if (this.logContent) {
            this.logContent.innerHTML = "";
          }
        }
        /**
         * Configura los event listeners globales
         */
        setupEventListeners() {
          window.addEventListener("resize", () => {
            if (this.container) {
              const maxX = window.innerWidth - this.container.offsetWidth;
              const maxY = window.innerHeight - this.container.offsetHeight;
              if (this.config.x > maxX) {
                this.config.x = Math.max(0, maxX);
                this.container.style.left = this.config.x + "px";
              }
              if (this.config.y > maxY) {
                this.config.y = Math.max(0, maxY);
                this.container.style.top = this.config.y + "px";
              }
              this.saveConfig();
            }
          });
        }
        /**
         * Destruye la ventana y restaura console original
         */
        destroy() {
          if (this.originalConsole.log) {
            console.log = this.originalConsole.log;
            console.info = this.originalConsole.info;
            console.warn = this.originalConsole.warn;
            console.error = this.originalConsole.error;
            console.debug = this.originalConsole.debug;
          }
          if (this.container && this.container.parentNode) {
            unregisterWindow(this.container);
            this.container.parentNode.removeChild(this.container);
          }
          this.container = null;
          this.logContent = null;
          this.logs = [];
        }
      };
      window.__wplaceLogWindows = window.__wplaceLogWindows || {};
    }
  });

  // src/log_window/index.js
  var log_window_exports = {};
  __export(log_window_exports, {
    LogWindow: () => LogWindow,
    createLogWindow: () => createLogWindow,
    destroyAllLogWindows: () => destroyAllLogWindows,
    destroyLogWindow: () => destroyLogWindow,
    getLogWindow: () => getLogWindow
  });
  var init_log_window2 = __esm({
    "src/log_window/index.js"() {
      init_log_window();
    }
  });

  // src/image/config.js
  var config_exports = {};
  __export(config_exports, {
    IMAGE_DEFAULTS: () => IMAGE_DEFAULTS,
    TEXTS: () => TEXTS,
    getImageText: () => getImageText,
    getImageTexts: () => getImageTexts,
    imageState: () => imageState
  });
  function getImageTexts() {
    return getSection("image");
  }
  function getImageText(key, params = {}) {
    const texts = getImageTexts();
    let text = texts[key] || key;
    if (params && Object.keys(params).length > 0) {
      text = text.replace(/\{(\w+)\}/g, (match, paramKey) => {
        return params[paramKey] !== void 0 ? params[paramKey] : match;
      });
    }
    return text;
  }
  var IMAGE_DEFAULTS, TEXTS, imageState;
  var init_config2 = __esm({
    "src/image/config.js"() {
      init_locales();
      IMAGE_DEFAULTS = {
        SITEKEY: "0x4AAAAAABpqJe8FO0N84q0F",
        COOLDOWN_DEFAULT: 31e3,
        TRANSPARENCY_THRESHOLD: 100,
        WHITE_THRESHOLD: 250,
        LOG_INTERVAL: 10,
        TILE_SIZE: 3e3,
        PIXELS_PER_BATCH: 20,
        CHARGE_REGEN_MS: 3e4,
        THEME: {
          primary: "#000000",
          secondary: "#111111",
          accent: "#222222",
          text: "#ffffff",
          highlight: "#775ce3",
          success: "#00ff00",
          error: "#ff0000",
          warning: "#ffaa00"
        }
      };
      TEXTS = {
        get es() {
          console.warn("TEXTS.es est\xE1 deprecated. Usa getImageTexts() en su lugar.");
          return getImageTexts();
        }
      };
      imageState = {
        running: false,
        imageLoaded: false,
        processing: false,
        totalPixels: 0,
        paintedPixels: 0,
        availableColors: [],
        currentCharges: 0,
        cooldown: IMAGE_DEFAULTS.COOLDOWN_DEFAULT,
        imageData: null,
        stopFlag: false,
        colorsChecked: false,
        startPosition: null,
        selectingPosition: false,
        positionTimeoutId: null,
        // Para manejar timeout de selección
        cleanupObserver: null,
        // Para limpiar observers
        region: null,
        minimized: false,
        lastPosition: { x: 0, y: 0 },
        estimatedTime: 0,
        language: "es",
        tileX: null,
        tileY: null,
        pixelsPerBatch: IMAGE_DEFAULTS.PIXELS_PER_BATCH,
        useAllChargesFirst: true,
        // Usar todas las cargas en la primera pasada
        isFirstBatch: true,
        // Controlar si es la primera pasada
        maxCharges: 9999,
        // Cargas máximas del usuario
        nextBatchCooldown: 0,
        // Tiempo para el siguiente lote
        inCooldown: false,
        cooldownEndTime: 0,
        remainingPixels: [],
        lastChargeUpdate: 0,
        chargeDecimalPart: 0,
        originalImageName: null,
        retryCount: 0,
        // Contador de reintentos para estadísticas
        // Nuevas opciones para patrones
        paintPattern: "linear_start"
        // Patrón de pintado predeterminado
      };
    }
  });

  // src/image/patterns.js
  var patterns_exports = {};
  __export(patterns_exports, {
    PAINT_PATTERNS: () => PAINT_PATTERNS,
    applyPaintPattern: () => applyPaintPattern,
    getPatternName: () => getPatternName,
    sortPixelsByPattern: () => sortPixelsByPattern
  });
  function getPatternName(pattern) {
    const names = {
      [PAINT_PATTERNS.LINEAR_START]: "\u27A1\uFE0F Lineal (Inicio)",
      [PAINT_PATTERNS.LINEAR_END]: "\u2B05\uFE0F Lineal (Final)",
      [PAINT_PATTERNS.RANDOM]: "\u{1F3B2} Aleatorio",
      [PAINT_PATTERNS.CENTER_OUT]: "\u{1F4A5} Centro hacia afuera",
      [PAINT_PATTERNS.CORNERS_FIRST]: "\u{1F3C1} Esquinas primero",
      [PAINT_PATTERNS.SPIRAL]: "\u{1F300} Espiral",
      [PAINT_PATTERNS.SNAKE]: "\u{1F40D} Serpiente (Zigzag)",
      [PAINT_PATTERNS.DIAGONAL_SWEEP]: "\u{1F4D0} Barrido diagonal",
      [PAINT_PATTERNS.BORDERS]: "\u{1F5BC}\uFE0F Bordes primero",
      [PAINT_PATTERNS.CENTER]: "\u{1F3AF} Centro primero",
      [PAINT_PATTERNS.QUADRANTS]: "\u{1F532} Cuadrantes",
      [PAINT_PATTERNS.BIASED_RANDOM]: "\u{1F3AF} Aleatorio sesgado (bordes)",
      [PAINT_PATTERNS.CLUSTERS]: "\u{1F3AA} Clusters",
      [PAINT_PATTERNS.PROXIMITY]: "\u{1F91D} Proximidad",
      [PAINT_PATTERNS.SWEEP]: "\u{1F9F9} Barrido por secciones",
      [PAINT_PATTERNS.PRIORITY]: "\u2B50 Prioridad (mixto)",
      [PAINT_PATTERNS.ANCHOR_POINTS]: "\u2693 Puntos de anclaje",
      [PAINT_PATTERNS.SPIRAL_CW]: "\u{1F504} Espiral (horaria)",
      [PAINT_PATTERNS.SPIRAL_CCW]: "\u{1F503} Espiral (antihoraria)"
    };
    return names[pattern] || pattern;
  }
  function sortPixelsByPattern(pixels, pattern, imageWidth, imageHeight) {
    if (!pixels || pixels.length === 0) {
      return pixels;
    }
    log(`\u{1F3A8} Aplicando patr\xF3n de pintado: ${getPatternName(pattern)} (${pixels.length} p\xEDxeles)`);
    const sortedPixels = [...pixels];
    switch (pattern) {
      case PAINT_PATTERNS.LINEAR_START:
        return sortLinearStart(sortedPixels);
      case PAINT_PATTERNS.LINEAR_END:
        return sortLinearEnd(sortedPixels);
      case PAINT_PATTERNS.RANDOM:
        return sortRandom(sortedPixels);
      case PAINT_PATTERNS.CENTER_OUT:
        return sortCenterOut(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.CORNERS_FIRST:
        return sortCornersFirst(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.SPIRAL:
        return sortSpiral(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.SNAKE:
        return sortSnake(sortedPixels);
      case PAINT_PATTERNS.DIAGONAL_SWEEP:
        return sortDiagonalSweep(sortedPixels);
      case PAINT_PATTERNS.BORDERS:
        return sortBorders(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.CENTER:
        return sortCenter(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.QUADRANTS:
        return sortQuadrants(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.BIASED_RANDOM:
        return sortBiasedRandom(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.CLUSTERS:
        return sortClusters(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.PROXIMITY:
        return sortProximity(sortedPixels);
      case PAINT_PATTERNS.SWEEP:
        return sortSweepSections(sortedPixels);
      case PAINT_PATTERNS.PRIORITY:
        return sortPriority(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.ANCHOR_POINTS:
        return sortAnchorPoints(sortedPixels, imageWidth, imageHeight);
      case PAINT_PATTERNS.SPIRAL_CW:
        return sortSpiralDirectional(sortedPixels, imageWidth, imageHeight, true);
      case PAINT_PATTERNS.SPIRAL_CCW:
        return sortSpiralDirectional(sortedPixels, imageWidth, imageHeight, false);
      default:
        log(`\u26A0\uFE0F Patr\xF3n desconocido: ${pattern}, usando linear_start`);
        return sortLinearStart(sortedPixels);
    }
  }
  function sortLinearStart(pixels) {
    return pixels.sort((a, b) => {
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      if (aY !== bY) return aY - bY;
      return aX - bX;
    });
  }
  function sortLinearEnd(pixels) {
    return pixels.sort((a, b) => {
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      if (aY !== bY) return bY - aY;
      return bX - aX;
    });
  }
  function sortSnake(pixels) {
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ay = (_a = a.imageY) != null ? _a : a.y;
      const by = (_b = b.imageY) != null ? _b : b.y;
      if (ay !== by) return ay - by;
      const ax = (_c = a.imageX) != null ? _c : a.x;
      const bx = (_d = b.imageX) != null ? _d : b.x;
      return ay % 2 === 0 ? ax - bx : bx - ax;
    });
  }
  function sortDiagonalSweep(pixels) {
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const da = ax + ay;
      const db = bx + by;
      if (da !== db) return da - db;
      return ax - bx;
    });
  }
  function sortBorders(pixels, w, h) {
    const maxX = w - 1, maxY = h - 1;
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const da = Math.min(ax, ay, maxX - ax, maxY - ay);
      const db = Math.min(bx, by, maxX - bx, maxY - by);
      return da - db;
    });
  }
  function sortCenter(pixels, w, h) {
    const cx = w / 2, cy = h / 2;
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const da = (ax - cx) * (ax - cx) + (ay - cy) * (ay - cy);
      const db = (bx - cx) * (bx - cx) + (by - cy) * (by - cy);
      return da - db;
    });
  }
  function sortQuadrants(pixels, w, h) {
    const cx = w / 2, cy = h / 2;
    const quadIndex = (x, y) => y < cy ? x < cx ? 0 : 1 : x < cx ? 2 : 3;
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const qa = quadIndex(ax, ay);
      const qb = quadIndex(bx, by);
      if (qa !== qb) return qa - qb;
      const da = (ax - cx) * (ax - cx) + (ay - cy) * (ay - cy);
      const db = (bx - cx) * (bx - cx) + (by - cy) * (by - cy);
      return da - db;
    });
  }
  function sortBiasedRandom(pixels, w, h) {
    const maxX = w - 1, maxY = h - 1;
    const edgeWeight = (x, y) => 1 + Math.min(x, y, maxX - x, maxY - y);
    const hash = (x, y) => {
      let v = (x + 1) * 73856093 ^ (y + 1) * 19349663;
      v ^= v << 13;
      v ^= v >> 17;
      v ^= v << 5;
      return (v >>> 0) / 4294967295;
    };
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const sa = edgeWeight(ax, ay) - hash(ax, ay);
      const sb = edgeWeight(bx, by) - hash(bx, by);
      return sb - sa;
    });
  }
  function sortClusters(pixels, w, h) {
    if (pixels.length < 64) return sortCenter(pixels, w, h);
    const seeds = [];
    for (let sy = 1; sy <= 3; sy++) {
      for (let sx = 1; sx <= 3; sx++) {
        seeds.push({ x: Math.round(sx * w / 4), y: Math.round(sy * h / 4) });
      }
    }
    const seedIndex = (x, y) => {
      let best = 0, bestD = Infinity;
      for (let i = 0; i < seeds.length; i++) {
        const s = seeds[i];
        const d = (x - s.x) * (x - s.x) + (y - s.y) * (y - s.y);
        if (d < bestD) {
          bestD = d;
          best = i;
        }
      }
      return best;
    };
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const ca = seedIndex(ax, ay), cb = seedIndex(bx, by);
      if (ca !== cb) return ca - cb;
      const s = seeds[ca];
      const da = (ax - s.x) * (ax - s.x) + (ay - s.y) * (ay - s.y);
      const db = (bx - s.x) * (bx - s.x) + (by - s.y) * (by - s.y);
      return da - db;
    });
  }
  function sortProximity(pixels) {
    const part1by1 = (n) => {
      n &= 65535;
      n = (n | n << 8) & 16711935;
      n = (n | n << 4) & 252645135;
      n = (n | n << 2) & 858993459;
      n = (n | n << 1) & 1431655765;
      return n;
    };
    const morton = (x, y) => part1by1(y) << 1 | part1by1(x);
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      return morton((_a = a.imageX) != null ? _a : a.x, (_b = a.imageY) != null ? _b : a.y) - morton((_c = b.imageX) != null ? _c : b.x, (_d = b.imageY) != null ? _d : b.y);
    });
  }
  function sortSweepSections(pixels) {
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const sa = Math.floor(ay / 8) << 16 | Math.floor(ax / 8);
      const sb = Math.floor(by / 8) << 16 | Math.floor(bx / 8);
      if (sa !== sb) return sa - sb;
      if (ay !== by) return ay - by;
      return ax - bx;
    });
  }
  function sortPriority(pixels, w, h) {
    const cx = w / 2, cy = h / 2;
    const maxX = w - 1, maxY = h - 1;
    const edge = (x, y) => Math.min(x, y, maxX - x, maxY - y);
    const hash = (x, y) => {
      let v = (x + 7) * 2654435761 ^ (y + 13) * 2246822519;
      v ^= v << 13;
      v ^= v >> 17;
      v ^= v << 5;
      return (v >>> 0) / 4294967295;
    };
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const centerA = (ax - cx) * (ax - cx) + (ay - cy) * (ay - cy);
      const centerB = (bx - cx) * (bx - cx) + (by - cy) * (by - cy);
      const scoreA = -0.4 * centerA + 0.3 * edge(ax, ay) + 0.3 * hash(ax, ay);
      const scoreB = -0.4 * centerB + 0.3 * edge(bx, by) + 0.3 * hash(bx, by);
      return scoreB - scoreA;
    });
  }
  function sortAnchorPoints(pixels, w, h) {
    const anchors = [
      { x: 0, y: 0 },
      { x: w - 1, y: 0 },
      { x: 0, y: h - 1 },
      { x: w - 1, y: h - 1 },
      { x: Math.round((w - 1) / 2), y: Math.round((h - 1) / 2) }
    ];
    const distAnchor = (x, y) => {
      let d = Infinity;
      for (const a of anchors) {
        const v = (x - a.x) * (x - a.x) + (y - a.y) * (y - a.y);
        if (v < d) d = v;
      }
      return d;
    };
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      return distAnchor(ax, ay) - distAnchor(bx, by);
    });
  }
  function sortSpiralDirectional(pixels, w, h, clockwise = true) {
    const cx = (w - 1) / 2, cy = (h - 1) / 2;
    return pixels.sort((a, b) => {
      var _a, _b, _c, _d;
      const ax = (_a = a.imageX) != null ? _a : a.x;
      const ay = (_b = a.imageY) != null ? _b : a.y;
      const bx = (_c = b.imageX) != null ? _c : b.x;
      const by = (_d = b.imageY) != null ? _d : b.y;
      const ra = Math.hypot(ax - cx, ay - cy);
      const rb = Math.hypot(bx - cx, by - cy);
      if (Math.abs(ra - rb) > 0.5) return ra - rb;
      const aa = Math.atan2(ay - cy, ax - cx);
      const ab = Math.atan2(by - cy, bx - cx);
      return clockwise ? aa - ab : ab - aa;
    });
  }
  function sortRandom(pixels) {
    for (let i = pixels.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [pixels[i], pixels[j]] = [pixels[j], pixels[i]];
    }
    return pixels;
  }
  function sortCenterOut(pixels, imageWidth, imageHeight) {
    const centerX = imageWidth / 2;
    const centerY = imageHeight / 2;
    return pixels.sort((a, b) => {
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const distA = Math.sqrt(Math.pow(aX - centerX, 2) + Math.pow(aY - centerY, 2));
      const distB = Math.sqrt(Math.pow(bX - centerX, 2) + Math.pow(bY - centerY, 2));
      return distA - distB;
    });
  }
  function sortCornersFirst(pixels, imageWidth, imageHeight) {
    const corners = [
      { x: 0, y: 0 },
      // Superior izquierda
      { x: imageWidth - 1, y: 0 },
      // Superior derecha
      { x: 0, y: imageHeight - 1 },
      // Inferior izquierda
      { x: imageWidth - 1, y: imageHeight - 1 }
      // Inferior derecha
    ];
    return pixels.sort((a, b) => {
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const minDistA = Math.min(...corners.map(
        (corner) => Math.sqrt(Math.pow(aX - corner.x, 2) + Math.pow(aY - corner.y, 2))
      ));
      const minDistB = Math.min(...corners.map(
        (corner) => Math.sqrt(Math.pow(bX - corner.x, 2) + Math.pow(bY - corner.y, 2))
      ));
      return minDistA - minDistB;
    });
  }
  function sortSpiral(pixels, imageWidth, imageHeight) {
    const coordinateMap = /* @__PURE__ */ new Map();
    let spiralIndex = 0;
    let left = 0, right = imageWidth - 1;
    let top = 0, bottom = imageHeight - 1;
    while (left <= right && top <= bottom) {
      for (let x = left; x <= right; x++) {
        coordinateMap.set(`${x},${top}`, spiralIndex++);
      }
      top++;
      for (let y = top; y <= bottom; y++) {
        coordinateMap.set(`${right},${y}`, spiralIndex++);
      }
      right--;
      if (top <= bottom) {
        for (let x = right; x >= left; x--) {
          coordinateMap.set(`${x},${bottom}`, spiralIndex++);
        }
        bottom--;
      }
      if (left <= right) {
        for (let y = bottom; y >= top; y--) {
          coordinateMap.set(`${left},${y}`, spiralIndex++);
        }
        left++;
      }
    }
    return pixels.sort((a, b) => {
      const aX = a.imageX !== void 0 ? a.imageX : a.x;
      const aY = a.imageY !== void 0 ? a.imageY : a.y;
      const bX = b.imageX !== void 0 ? b.imageX : b.x;
      const bY = b.imageY !== void 0 ? b.imageY : b.y;
      const indexA = coordinateMap.get(`${aX},${aY}`) || Number.MAX_SAFE_INTEGER;
      const indexB = coordinateMap.get(`${bX},${bY}`) || Number.MAX_SAFE_INTEGER;
      return indexA - indexB;
    });
  }
  function applyPaintPattern(remainingPixels, pattern, imageData) {
    if (!remainingPixels || remainingPixels.length === 0) {
      return remainingPixels;
    }
    const imageWidth = (imageData == null ? void 0 : imageData.width) || 100;
    const imageHeight = (imageData == null ? void 0 : imageData.height) || 100;
    const sortedPixels = sortPixelsByPattern(remainingPixels, pattern, imageWidth, imageHeight);
    log(`\u2705 Patr\xF3n aplicado: ${getPatternName(pattern)} a ${sortedPixels.length} p\xEDxeles`);
    return sortedPixels;
  }
  var PAINT_PATTERNS;
  var init_patterns = __esm({
    "src/image/patterns.js"() {
      init_logger();
      PAINT_PATTERNS = {
        LINEAR_START: "linear_start",
        LINEAR_END: "linear_end",
        RANDOM: "random",
        CENTER_OUT: "center_out",
        CORNERS_FIRST: "corners_first",
        SPIRAL: "spiral",
        // Nuevos (inspirados en Guard)
        SNAKE: "snake",
        DIAGONAL_SWEEP: "diagonal_sweep",
        BORDERS: "borders",
        CENTER: "center",
        QUADRANTS: "quadrants",
        BIASED_RANDOM: "biased_random",
        CLUSTERS: "clusters",
        PROXIMITY: "proximity",
        SWEEP: "sweep",
        PRIORITY: "priority",
        ANCHOR_POINTS: "anchor_points",
        SPIRAL_CW: "spiral_cw",
        SPIRAL_CCW: "spiral_ccw"
      };
    }
  });

  // src/guard/config.js
  var config_exports2 = {};
  __export(config_exports2, {
    GUARD_DEFAULTS: () => GUARD_DEFAULTS,
    PROTECTION_PATTERNS: () => PROTECTION_PATTERNS,
    guardState: () => guardState
  });
  var GUARD_DEFAULTS, PROTECTION_PATTERNS, guardState;
  var init_config3 = __esm({
    "src/guard/config.js"() {
      GUARD_DEFAULTS = {
        SITEKEY: "0x4AAAAAABpqJe8FO0N84q0F",
        COOLDOWN_DEFAULT: 31e3,
        TILE_SIZE: 1e3,
        CHECK_INTERVAL: 1e4,
        // Revisar cada 10 segundos
        MAX_PROTECTION_SIZE: Infinity,
        // Sin límite de píxeles protegidos
        PIXELS_PER_BATCH: 10,
        // Menos que Image para ser más sutil
        MAX_PIXELS_PER_BATCH: 9999,
        // Nuevo máximo para tamaño de lote
        MIN_CHARGES_TO_WAIT: 20,
        // Cargas mínimas a esperar antes de continuar
        BACKEND_URL: "https://backend.wplace.live",
        PROTECTION_PATTERN: "random"
        // Patrón por defecto
      };
      PROTECTION_PATTERNS = {
        random: "Aleatorio",
        lineUp: "Lineal (Arriba)",
        lineDown: "Lineal (Abajo)",
        lineLeft: "Lineal (Izquierda)",
        lineRight: "Lineal (Derecha)",
        center: "Centro",
        borders: "Bordes",
        spiral: "Espiral"
      };
      guardState = {
        running: false,
        initialized: false,
        protectionArea: null,
        // { x1, y1, x2, y2, tileX, tileY }
        originalPixels: /* @__PURE__ */ new Map(),
        // Map de "x,y" -> {r, g, b, colorId}
        changes: /* @__PURE__ */ new Map(),
        // Map de "x,y" -> {timestamp, originalColor, currentColor}
        currentCharges: 0,
        maxCharges: 50,
        lastCheck: 0,
        checkInterval: null,
        availableColors: [],
        colorsChecked: false,
        ui: null,
        totalRepaired: 0,
        // Configuración editable
        pixelsPerBatch: GUARD_DEFAULTS.PIXELS_PER_BATCH,
        minChargesToWait: GUARD_DEFAULTS.MIN_CHARGES_TO_WAIT,
        protectionPattern: GUARD_DEFAULTS.PROTECTION_PATTERN,
        // Nuevas opciones de configuración
        preferColor: false,
        preferredColorId: null,
        // legado
        preferredColorIds: [],
        excludeColor: false,
        // Nueva opción para excluir colores
        excludedColorIds: [],
        // Colores a excluir de la reparación
        spendAllPixelsOnStart: false,
        randomWaitTime: false,
        randomWaitMin: 5,
        // segundos
        randomWaitMax: 15,
        // segundos
        watchMode: false,
        // Modo vigía: solo observa, no repara
        config: {
          colorComparisonMethod: "lab",
          // 'rgb' o 'lab' - LAB por defecto para reposicionamiento
          colorThreshold: 10
          // Umbral de diferencia de color
        }
      };
    }
  });

  // src/slave/index.js
  init_logger();

  // node_modules/pako/dist/pako.esm.mjs
  var Z_FIXED$1 = 4;
  var Z_BINARY = 0;
  var Z_TEXT = 1;
  var Z_UNKNOWN$1 = 2;
  function zero$1(buf) {
    let len = buf.length;
    while (--len >= 0) {
      buf[len] = 0;
    }
  }
  var STORED_BLOCK = 0;
  var STATIC_TREES = 1;
  var DYN_TREES = 2;
  var MIN_MATCH$1 = 3;
  var MAX_MATCH$1 = 258;
  var LENGTH_CODES$1 = 29;
  var LITERALS$1 = 256;
  var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
  var D_CODES$1 = 30;
  var BL_CODES$1 = 19;
  var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
  var MAX_BITS$1 = 15;
  var Buf_size = 16;
  var MAX_BL_BITS = 7;
  var END_BLOCK = 256;
  var REP_3_6 = 16;
  var REPZ_3_10 = 17;
  var REPZ_11_138 = 18;
  var extra_lbits = (
    /* extra bits for each length code */
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0])
  );
  var extra_dbits = (
    /* extra bits for each distance code */
    new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13])
  );
  var extra_blbits = (
    /* extra bits for each bit length code */
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7])
  );
  var bl_order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var DIST_CODE_LEN = 512;
  var static_ltree = new Array((L_CODES$1 + 2) * 2);
  zero$1(static_ltree);
  var static_dtree = new Array(D_CODES$1 * 2);
  zero$1(static_dtree);
  var _dist_code = new Array(DIST_CODE_LEN);
  zero$1(_dist_code);
  var _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
  zero$1(_length_code);
  var base_length = new Array(LENGTH_CODES$1);
  zero$1(base_length);
  var base_dist = new Array(D_CODES$1);
  zero$1(base_dist);
  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
    this.static_tree = static_tree;
    this.extra_bits = extra_bits;
    this.extra_base = extra_base;
    this.elems = elems;
    this.max_length = max_length;
    this.has_stree = static_tree && static_tree.length;
  }
  var static_l_desc;
  var static_d_desc;
  var static_bl_desc;
  function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree;
    this.max_code = 0;
    this.stat_desc = stat_desc;
  }
  var d_code = (dist) => {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  };
  var put_short = (s, w) => {
    s.pending_buf[s.pending++] = w & 255;
    s.pending_buf[s.pending++] = w >>> 8 & 255;
  };
  var send_bits = (s, value, length) => {
    if (s.bi_valid > Buf_size - length) {
      s.bi_buf |= value << s.bi_valid & 65535;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> Buf_size - s.bi_valid;
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= value << s.bi_valid & 65535;
      s.bi_valid += length;
    }
  };
  var send_code = (s, c, tree) => {
    send_bits(
      s,
      tree[c * 2],
      tree[c * 2 + 1]
      /*.Len*/
    );
  };
  var bi_reverse = (code, len) => {
    let res = 0;
    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);
    return res >>> 1;
  };
  var bi_flush = (s) => {
    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;
    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 255;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  };
  var gen_bitlen = (s, desc) => {
    const tree = desc.dyn_tree;
    const max_code = desc.max_code;
    const stree = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const extra = desc.stat_desc.extra_bits;
    const base = desc.stat_desc.extra_base;
    const max_length = desc.stat_desc.max_length;
    let h;
    let n, m;
    let bits;
    let xbits;
    let f;
    let overflow = 0;
    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      s.bl_count[bits] = 0;
    }
    tree[s.heap[s.heap_max] * 2 + 1] = 0;
    for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
      n = s.heap[h];
      bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }
      tree[n * 2 + 1] = bits;
      if (n > max_code) {
        continue;
      }
      s.bl_count[bits]++;
      xbits = 0;
      if (n >= base) {
        xbits = extra[n - base];
      }
      f = tree[n * 2];
      s.opt_len += f * (bits + xbits);
      if (has_stree) {
        s.static_len += f * (stree[n * 2 + 1] + xbits);
      }
    }
    if (overflow === 0) {
      return;
    }
    do {
      bits = max_length - 1;
      while (s.bl_count[bits] === 0) {
        bits--;
      }
      s.bl_count[bits]--;
      s.bl_count[bits + 1] += 2;
      s.bl_count[max_length]--;
      overflow -= 2;
    } while (overflow > 0);
    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];
      while (n !== 0) {
        m = s.heap[--h];
        if (m > max_code) {
          continue;
        }
        if (tree[m * 2 + 1] !== bits) {
          s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
          tree[m * 2 + 1] = bits;
        }
        n--;
      }
    }
  };
  var gen_codes = (tree, max_code, bl_count) => {
    const next_code = new Array(MAX_BITS$1 + 1);
    let code = 0;
    let bits;
    let n;
    for (bits = 1; bits <= MAX_BITS$1; bits++) {
      code = code + bl_count[bits - 1] << 1;
      next_code[bits] = code;
    }
    for (n = 0; n <= max_code; n++) {
      let len = tree[n * 2 + 1];
      if (len === 0) {
        continue;
      }
      tree[n * 2] = bi_reverse(next_code[len]++, len);
    }
  };
  var tr_static_init = () => {
    let n;
    let bits;
    let length;
    let code;
    let dist;
    const bl_count = new Array(MAX_BITS$1 + 1);
    length = 0;
    for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
      base_length[code] = length;
      for (n = 0; n < 1 << extra_lbits[code]; n++) {
        _length_code[length++] = code;
      }
    }
    _length_code[length - 1] = code;
    dist = 0;
    for (code = 0; code < 16; code++) {
      base_dist[code] = dist;
      for (n = 0; n < 1 << extra_dbits[code]; n++) {
        _dist_code[dist++] = code;
      }
    }
    dist >>= 7;
    for (; code < D_CODES$1; code++) {
      base_dist[code] = dist << 7;
      for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
        _dist_code[256 + dist++] = code;
      }
    }
    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      bl_count[bits] = 0;
    }
    n = 0;
    while (n <= 143) {
      static_ltree[n * 2 + 1] = 8;
      n++;
      bl_count[8]++;
    }
    while (n <= 255) {
      static_ltree[n * 2 + 1] = 9;
      n++;
      bl_count[9]++;
    }
    while (n <= 279) {
      static_ltree[n * 2 + 1] = 7;
      n++;
      bl_count[7]++;
    }
    while (n <= 287) {
      static_ltree[n * 2 + 1] = 8;
      n++;
      bl_count[8]++;
    }
    gen_codes(static_ltree, L_CODES$1 + 1, bl_count);
    for (n = 0; n < D_CODES$1; n++) {
      static_dtree[n * 2 + 1] = 5;
      static_dtree[n * 2] = bi_reverse(n, 5);
    }
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);
  };
  var init_block = (s) => {
    let n;
    for (n = 0; n < L_CODES$1; n++) {
      s.dyn_ltree[n * 2] = 0;
    }
    for (n = 0; n < D_CODES$1; n++) {
      s.dyn_dtree[n * 2] = 0;
    }
    for (n = 0; n < BL_CODES$1; n++) {
      s.bl_tree[n * 2] = 0;
    }
    s.dyn_ltree[END_BLOCK * 2] = 1;
    s.opt_len = s.static_len = 0;
    s.sym_next = s.matches = 0;
  };
  var bi_windup = (s) => {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      s.pending_buf[s.pending++] = s.bi_buf;
    }
    s.bi_buf = 0;
    s.bi_valid = 0;
  };
  var smaller = (tree, n, m, depth) => {
    const _n2 = n * 2;
    const _m2 = m * 2;
    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
  };
  var pqdownheap = (s, tree, k) => {
    const v = s.heap[k];
    let j = k << 1;
    while (j <= s.heap_len) {
      if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
        j++;
      }
      if (smaller(tree, v, s.heap[j], s.depth)) {
        break;
      }
      s.heap[k] = s.heap[j];
      k = j;
      j <<= 1;
    }
    s.heap[k] = v;
  };
  var compress_block = (s, ltree, dtree) => {
    let dist;
    let lc;
    let sx = 0;
    let code;
    let extra;
    if (s.sym_next !== 0) {
      do {
        dist = s.pending_buf[s.sym_buf + sx++] & 255;
        dist += (s.pending_buf[s.sym_buf + sx++] & 255) << 8;
        lc = s.pending_buf[s.sym_buf + sx++];
        if (dist === 0) {
          send_code(s, lc, ltree);
        } else {
          code = _length_code[lc];
          send_code(s, code + LITERALS$1 + 1, ltree);
          extra = extra_lbits[code];
          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra);
          }
          dist--;
          code = d_code(dist);
          send_code(s, code, dtree);
          extra = extra_dbits[code];
          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra);
          }
        }
      } while (sx < s.sym_next);
    }
    send_code(s, END_BLOCK, ltree);
  };
  var build_tree = (s, desc) => {
    const tree = desc.dyn_tree;
    const stree = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const elems = desc.stat_desc.elems;
    let n, m;
    let max_code = -1;
    let node;
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE$1;
    for (n = 0; n < elems; n++) {
      if (tree[n * 2] !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;
      } else {
        tree[n * 2 + 1] = 0;
      }
    }
    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
      tree[node * 2] = 1;
      s.depth[node] = 0;
      s.opt_len--;
      if (has_stree) {
        s.static_len -= stree[node * 2 + 1];
      }
    }
    desc.max_code = max_code;
    for (n = s.heap_len >> 1; n >= 1; n--) {
      pqdownheap(s, tree, n);
    }
    node = elems;
    do {
      n = s.heap[
        1
        /*SMALLEST*/
      ];
      s.heap[
        1
        /*SMALLEST*/
      ] = s.heap[s.heap_len--];
      pqdownheap(
        s,
        tree,
        1
        /*SMALLEST*/
      );
      m = s.heap[
        1
        /*SMALLEST*/
      ];
      s.heap[--s.heap_max] = n;
      s.heap[--s.heap_max] = m;
      tree[node * 2] = tree[n * 2] + tree[m * 2];
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n * 2 + 1] = tree[m * 2 + 1] = node;
      s.heap[
        1
        /*SMALLEST*/
      ] = node++;
      pqdownheap(
        s,
        tree,
        1
        /*SMALLEST*/
      );
    } while (s.heap_len >= 2);
    s.heap[--s.heap_max] = s.heap[
      1
      /*SMALLEST*/
    ];
    gen_bitlen(s, desc);
    gen_codes(tree, max_code, s.bl_count);
  };
  var scan_tree = (s, tree, max_code) => {
    let n;
    let prevlen = -1;
    let curlen;
    let nextlen = tree[0 * 2 + 1];
    let count = 0;
    let max_count = 7;
    let min_count = 4;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1] = 65535;
    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1];
      if (++count < max_count && curlen === nextlen) {
        continue;
      } else if (count < min_count) {
        s.bl_tree[curlen * 2] += count;
      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          s.bl_tree[curlen * 2]++;
        }
        s.bl_tree[REP_3_6 * 2]++;
      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10 * 2]++;
      } else {
        s.bl_tree[REPZ_11_138 * 2]++;
      }
      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  };
  var send_tree = (s, tree, max_code) => {
    let n;
    let prevlen = -1;
    let curlen;
    let nextlen = tree[0 * 2 + 1];
    let count = 0;
    let max_count = 7;
    let min_count = 4;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1];
      if (++count < max_count && curlen === nextlen) {
        continue;
      } else if (count < min_count) {
        do {
          send_code(s, curlen, s.bl_tree);
        } while (--count !== 0);
      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        }
        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count - 3, 2);
      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count - 3, 3);
      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count - 11, 7);
      }
      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  };
  var build_bl_tree = (s) => {
    let max_blindex;
    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
    build_tree(s, s.bl_desc);
    for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
        break;
      }
    }
    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    return max_blindex;
  };
  var send_all_trees = (s, lcodes, dcodes, blcodes) => {
    let rank2;
    send_bits(s, lcodes - 257, 5);
    send_bits(s, dcodes - 1, 5);
    send_bits(s, blcodes - 4, 4);
    for (rank2 = 0; rank2 < blcodes; rank2++) {
      send_bits(s, s.bl_tree[bl_order[rank2] * 2 + 1], 3);
    }
    send_tree(s, s.dyn_ltree, lcodes - 1);
    send_tree(s, s.dyn_dtree, dcodes - 1);
  };
  var detect_data_type = (s) => {
    let block_mask = 4093624447;
    let n;
    for (n = 0; n <= 31; n++, block_mask >>>= 1) {
      if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
        return Z_BINARY;
      }
    }
    if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
      return Z_TEXT;
    }
    for (n = 32; n < LITERALS$1; n++) {
      if (s.dyn_ltree[n * 2] !== 0) {
        return Z_TEXT;
      }
    }
    return Z_BINARY;
  };
  var static_init_done = false;
  var _tr_init$1 = (s) => {
    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }
    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
    s.bi_buf = 0;
    s.bi_valid = 0;
    init_block(s);
  };
  var _tr_stored_block$1 = (s, buf, stored_len, last) => {
    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
    bi_windup(s);
    put_short(s, stored_len);
    put_short(s, ~stored_len);
    if (stored_len) {
      s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
    }
    s.pending += stored_len;
  };
  var _tr_align$1 = (s) => {
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  };
  var _tr_flush_block$1 = (s, buf, stored_len, last) => {
    let opt_lenb, static_lenb;
    let max_blindex = 0;
    if (s.level > 0) {
      if (s.strm.data_type === Z_UNKNOWN$1) {
        s.strm.data_type = detect_data_type(s);
      }
      build_tree(s, s.l_desc);
      build_tree(s, s.d_desc);
      max_blindex = build_bl_tree(s);
      opt_lenb = s.opt_len + 3 + 7 >>> 3;
      static_lenb = s.static_len + 3 + 7 >>> 3;
      if (static_lenb <= opt_lenb) {
        opt_lenb = static_lenb;
      }
    } else {
      opt_lenb = static_lenb = stored_len + 5;
    }
    if (stored_len + 4 <= opt_lenb && buf !== -1) {
      _tr_stored_block$1(s, buf, stored_len, last);
    } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);
    } else {
      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    init_block(s);
    if (last) {
      bi_windup(s);
    }
  };
  var _tr_tally$1 = (s, dist, lc) => {
    s.pending_buf[s.sym_buf + s.sym_next++] = dist;
    s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
    s.pending_buf[s.sym_buf + s.sym_next++] = lc;
    if (dist === 0) {
      s.dyn_ltree[lc * 2]++;
    } else {
      s.matches++;
      dist--;
      s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;
      s.dyn_dtree[d_code(dist) * 2]++;
    }
    return s.sym_next === s.sym_end;
  };
  var _tr_init_1 = _tr_init$1;
  var _tr_stored_block_1 = _tr_stored_block$1;
  var _tr_flush_block_1 = _tr_flush_block$1;
  var _tr_tally_1 = _tr_tally$1;
  var _tr_align_1 = _tr_align$1;
  var trees = {
    _tr_init: _tr_init_1,
    _tr_stored_block: _tr_stored_block_1,
    _tr_flush_block: _tr_flush_block_1,
    _tr_tally: _tr_tally_1,
    _tr_align: _tr_align_1
  };
  var adler32 = (adler, buf, len, pos) => {
    let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
    while (len !== 0) {
      n = len > 2e3 ? 2e3 : len;
      len -= n;
      do {
        s1 = s1 + buf[pos++] | 0;
        s2 = s2 + s1 | 0;
      } while (--n);
      s1 %= 65521;
      s2 %= 65521;
    }
    return s1 | s2 << 16 | 0;
  };
  var adler32_1 = adler32;
  var makeTable = () => {
    let c, table = [];
    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
      }
      table[n] = c;
    }
    return table;
  };
  var crcTable = new Uint32Array(makeTable());
  var crc32 = (crc, buf, len, pos) => {
    const t2 = crcTable;
    const end = pos + len;
    crc ^= -1;
    for (let i = pos; i < end; i++) {
      crc = crc >>> 8 ^ t2[(crc ^ buf[i]) & 255];
    }
    return crc ^ -1;
  };
  var crc32_1 = crc32;
  var messages = {
    2: "need dictionary",
    /* Z_NEED_DICT       2  */
    1: "stream end",
    /* Z_STREAM_END      1  */
    0: "",
    /* Z_OK              0  */
    "-1": "file error",
    /* Z_ERRNO         (-1) */
    "-2": "stream error",
    /* Z_STREAM_ERROR  (-2) */
    "-3": "data error",
    /* Z_DATA_ERROR    (-3) */
    "-4": "insufficient memory",
    /* Z_MEM_ERROR     (-4) */
    "-5": "buffer error",
    /* Z_BUF_ERROR     (-5) */
    "-6": "incompatible version"
    /* Z_VERSION_ERROR (-6) */
  };
  var constants$2 = {
    /* Allowed flush values; see deflate() and inflate() below for details */
    Z_NO_FLUSH: 0,
    Z_PARTIAL_FLUSH: 1,
    Z_SYNC_FLUSH: 2,
    Z_FULL_FLUSH: 3,
    Z_FINISH: 4,
    Z_BLOCK: 5,
    Z_TREES: 6,
    /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
    Z_OK: 0,
    Z_STREAM_END: 1,
    Z_NEED_DICT: 2,
    Z_ERRNO: -1,
    Z_STREAM_ERROR: -2,
    Z_DATA_ERROR: -3,
    Z_MEM_ERROR: -4,
    Z_BUF_ERROR: -5,
    //Z_VERSION_ERROR: -6,
    /* compression levels */
    Z_NO_COMPRESSION: 0,
    Z_BEST_SPEED: 1,
    Z_BEST_COMPRESSION: 9,
    Z_DEFAULT_COMPRESSION: -1,
    Z_FILTERED: 1,
    Z_HUFFMAN_ONLY: 2,
    Z_RLE: 3,
    Z_FIXED: 4,
    Z_DEFAULT_STRATEGY: 0,
    /* Possible values of the data_type field (though see inflate()) */
    Z_BINARY: 0,
    Z_TEXT: 1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN: 2,
    /* The deflate compression method */
    Z_DEFLATED: 8
    //Z_NULL:                 null // Use -1 or null inline, depending on var type
  };
  var { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;
  var {
    Z_NO_FLUSH: Z_NO_FLUSH$2,
    Z_PARTIAL_FLUSH,
    Z_FULL_FLUSH: Z_FULL_FLUSH$1,
    Z_FINISH: Z_FINISH$3,
    Z_BLOCK: Z_BLOCK$1,
    Z_OK: Z_OK$3,
    Z_STREAM_END: Z_STREAM_END$3,
    Z_STREAM_ERROR: Z_STREAM_ERROR$2,
    Z_DATA_ERROR: Z_DATA_ERROR$2,
    Z_BUF_ERROR: Z_BUF_ERROR$1,
    Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
    Z_FILTERED,
    Z_HUFFMAN_ONLY,
    Z_RLE,
    Z_FIXED,
    Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
    Z_UNKNOWN,
    Z_DEFLATED: Z_DEFLATED$2
  } = constants$2;
  var MAX_MEM_LEVEL = 9;
  var MAX_WBITS$1 = 15;
  var DEF_MEM_LEVEL = 8;
  var LENGTH_CODES = 29;
  var LITERALS = 256;
  var L_CODES = LITERALS + 1 + LENGTH_CODES;
  var D_CODES = 30;
  var BL_CODES = 19;
  var HEAP_SIZE = 2 * L_CODES + 1;
  var MAX_BITS = 15;
  var MIN_MATCH = 3;
  var MAX_MATCH = 258;
  var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
  var PRESET_DICT = 32;
  var INIT_STATE = 42;
  var GZIP_STATE = 57;
  var EXTRA_STATE = 69;
  var NAME_STATE = 73;
  var COMMENT_STATE = 91;
  var HCRC_STATE = 103;
  var BUSY_STATE = 113;
  var FINISH_STATE = 666;
  var BS_NEED_MORE = 1;
  var BS_BLOCK_DONE = 2;
  var BS_FINISH_STARTED = 3;
  var BS_FINISH_DONE = 4;
  var OS_CODE = 3;
  var err = (strm, errorCode) => {
    strm.msg = messages[errorCode];
    return errorCode;
  };
  var rank = (f) => {
    return f * 2 - (f > 4 ? 9 : 0);
  };
  var zero = (buf) => {
    let len = buf.length;
    while (--len >= 0) {
      buf[len] = 0;
    }
  };
  var slide_hash = (s) => {
    let n, m;
    let p;
    let wsize = s.w_size;
    n = s.hash_size;
    p = n;
    do {
      m = s.head[--p];
      s.head[p] = m >= wsize ? m - wsize : 0;
    } while (--n);
    n = wsize;
    p = n;
    do {
      m = s.prev[--p];
      s.prev[p] = m >= wsize ? m - wsize : 0;
    } while (--n);
  };
  var HASH_ZLIB = (s, prev, data) => (prev << s.hash_shift ^ data) & s.hash_mask;
  var HASH = HASH_ZLIB;
  var flush_pending = (strm) => {
    const s = strm.state;
    let len = s.pending;
    if (len > strm.avail_out) {
      len = strm.avail_out;
    }
    if (len === 0) {
      return;
    }
    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) {
      s.pending_out = 0;
    }
  };
  var flush_block_only = (s, last) => {
    _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
  };
  var put_byte = (s, b) => {
    s.pending_buf[s.pending++] = b;
  };
  var putShortMSB = (s, b) => {
    s.pending_buf[s.pending++] = b >>> 8 & 255;
    s.pending_buf[s.pending++] = b & 255;
  };
  var read_buf = (strm, buf, start, size) => {
    let len = strm.avail_in;
    if (len > size) {
      len = size;
    }
    if (len === 0) {
      return 0;
    }
    strm.avail_in -= len;
    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
    if (strm.state.wrap === 1) {
      strm.adler = adler32_1(strm.adler, buf, len, start);
    } else if (strm.state.wrap === 2) {
      strm.adler = crc32_1(strm.adler, buf, len, start);
    }
    strm.next_in += len;
    strm.total_in += len;
    return len;
  };
  var longest_match = (s, cur_match) => {
    let chain_length = s.max_chain_length;
    let scan = s.strstart;
    let match;
    let len;
    let best_len = s.prev_length;
    let nice_match = s.nice_match;
    const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
    const _win = s.window;
    const wmask = s.w_mask;
    const prev = s.prev;
    const strend = s.strstart + MAX_MATCH;
    let scan_end1 = _win[scan + best_len - 1];
    let scan_end = _win[scan + best_len];
    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    if (nice_match > s.lookahead) {
      nice_match = s.lookahead;
    }
    do {
      match = cur_match;
      if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
        continue;
      }
      scan += 2;
      match++;
      do {
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
      len = MAX_MATCH - (strend - scan);
      scan = strend - MAX_MATCH;
      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;
        if (len >= nice_match) {
          break;
        }
        scan_end1 = _win[scan + best_len - 1];
        scan_end = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
    if (best_len <= s.lookahead) {
      return best_len;
    }
    return s.lookahead;
  };
  var fill_window = (s) => {
    const _w_size = s.w_size;
    let n, more, str;
    do {
      more = s.window_size - s.lookahead - s.strstart;
      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
        s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        s.block_start -= _w_size;
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
        slide_hash(s);
        more += _w_size;
      }
      if (s.strm.avail_in === 0) {
        break;
      }
      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;
      if (s.lookahead + s.insert >= MIN_MATCH) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];
        s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
        while (s.insert) {
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;
          if (s.lookahead + s.insert < MIN_MATCH) {
            break;
          }
        }
      }
    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
  };
  var deflate_stored = (s, flush) => {
    let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;
    let len, left, have, last = 0;
    let used = s.strm.avail_in;
    do {
      len = 65535;
      have = s.bi_valid + 42 >> 3;
      if (s.strm.avail_out < have) {
        break;
      }
      have = s.strm.avail_out - have;
      left = s.strstart - s.block_start;
      if (len > left + s.strm.avail_in) {
        len = left + s.strm.avail_in;
      }
      if (len > have) {
        len = have;
      }
      if (len < min_block && (len === 0 && flush !== Z_FINISH$3 || flush === Z_NO_FLUSH$2 || len !== left + s.strm.avail_in)) {
        break;
      }
      last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
      _tr_stored_block(s, 0, 0, last);
      s.pending_buf[s.pending - 4] = len;
      s.pending_buf[s.pending - 3] = len >> 8;
      s.pending_buf[s.pending - 2] = ~len;
      s.pending_buf[s.pending - 1] = ~len >> 8;
      flush_pending(s.strm);
      if (left) {
        if (left > len) {
          left = len;
        }
        s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
        s.strm.next_out += left;
        s.strm.avail_out -= left;
        s.strm.total_out += left;
        s.block_start += left;
        len -= left;
      }
      if (len) {
        read_buf(s.strm, s.strm.output, s.strm.next_out, len);
        s.strm.next_out += len;
        s.strm.avail_out -= len;
        s.strm.total_out += len;
      }
    } while (last === 0);
    used -= s.strm.avail_in;
    if (used) {
      if (used >= s.w_size) {
        s.matches = 2;
        s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
        s.strstart = s.w_size;
        s.insert = s.strstart;
      } else {
        if (s.window_size - s.strstart <= used) {
          s.strstart -= s.w_size;
          s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
          if (s.matches < 2) {
            s.matches++;
          }
          if (s.insert > s.strstart) {
            s.insert = s.strstart;
          }
        }
        s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
        s.strstart += used;
        s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
      }
      s.block_start = s.strstart;
    }
    if (s.high_water < s.strstart) {
      s.high_water = s.strstart;
    }
    if (last) {
      return BS_FINISH_DONE;
    }
    if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 && s.strm.avail_in === 0 && s.strstart === s.block_start) {
      return BS_BLOCK_DONE;
    }
    have = s.window_size - s.strstart;
    if (s.strm.avail_in > have && s.block_start >= s.w_size) {
      s.block_start -= s.w_size;
      s.strstart -= s.w_size;
      s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
      if (s.matches < 2) {
        s.matches++;
      }
      have += s.w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
    }
    if (have > s.strm.avail_in) {
      have = s.strm.avail_in;
    }
    if (have) {
      read_buf(s.strm, s.window, s.strstart, have);
      s.strstart += have;
      s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
    }
    if (s.high_water < s.strstart) {
      s.high_water = s.strstart;
    }
    have = s.bi_valid + 42 >> 3;
    have = s.pending_buf_size - have > 65535 ? 65535 : s.pending_buf_size - have;
    min_block = have > s.w_size ? s.w_size : have;
    left = s.strstart - s.block_start;
    if (left >= min_block || (left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 && s.strm.avail_in === 0 && left <= have) {
      len = left > have ? have : left;
      last = flush === Z_FINISH$3 && s.strm.avail_in === 0 && len === left ? 1 : 0;
      _tr_stored_block(s, s.block_start, len, last);
      s.block_start += len;
      flush_pending(s.strm);
    }
    return last ? BS_FINISH_STARTED : BS_NEED_MORE;
  };
  var deflate_fast = (s, flush) => {
    let hash_head;
    let bflush;
    for (; ; ) {
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      hash_head = 0;
      if (s.lookahead >= MIN_MATCH) {
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
      }
      if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
        s.match_length = longest_match(s, hash_head);
      }
      if (s.match_length >= MIN_MATCH) {
        bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
        s.lookahead -= s.match_length;
        if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
          s.match_length--;
          do {
            s.strstart++;
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
          } while (--s.match_length !== 0);
          s.strstart++;
        } else {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);
        }
      } else {
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.sym_next) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  };
  var deflate_slow = (s, flush) => {
    let hash_head;
    let bflush;
    let max_insert;
    for (; ; ) {
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      hash_head = 0;
      if (s.lookahead >= MIN_MATCH) {
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
      }
      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH - 1;
      if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
        s.match_length = longest_match(s, hash_head);
        if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
          s.match_length = MIN_MATCH - 1;
        }
      }
      if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH;
        bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
        s.lookahead -= s.prev_length - 1;
        s.prev_length -= 2;
        do {
          if (++s.strstart <= max_insert) {
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
          }
        } while (--s.prev_length !== 0);
        s.match_available = 0;
        s.match_length = MIN_MATCH - 1;
        s.strstart++;
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      } else if (s.match_available) {
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
        if (bflush) {
          flush_block_only(s, false);
        }
        s.strstart++;
        s.lookahead--;
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    }
    if (s.match_available) {
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
      s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.sym_next) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  };
  var deflate_rle = (s, flush) => {
    let bflush;
    let prev;
    let scan, strend;
    const _win = s.window;
    for (; ; ) {
      if (s.lookahead <= MAX_MATCH) {
        fill_window(s);
        if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      s.match_length = 0;
      if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];
        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH;
          do {
          } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
          s.match_length = MAX_MATCH - (strend - scan);
          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        }
      }
      if (s.match_length >= MIN_MATCH) {
        bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);
        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.sym_next) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  };
  var deflate_huff = (s, flush) => {
    let bflush;
    for (; ; ) {
      if (s.lookahead === 0) {
        fill_window(s);
        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          break;
        }
      }
      s.match_length = 0;
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.sym_next) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  };
  function Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  }
  var configuration_table = [
    /*      good lazy nice chain */
    new Config(0, 0, 0, 0, deflate_stored),
    /* 0 store only */
    new Config(4, 4, 8, 4, deflate_fast),
    /* 1 max speed, no lazy matches */
    new Config(4, 5, 16, 8, deflate_fast),
    /* 2 */
    new Config(4, 6, 32, 32, deflate_fast),
    /* 3 */
    new Config(4, 4, 16, 16, deflate_slow),
    /* 4 lazy matches */
    new Config(8, 16, 32, 32, deflate_slow),
    /* 5 */
    new Config(8, 16, 128, 128, deflate_slow),
    /* 6 */
    new Config(8, 32, 128, 256, deflate_slow),
    /* 7 */
    new Config(32, 128, 258, 1024, deflate_slow),
    /* 8 */
    new Config(32, 258, 258, 4096, deflate_slow)
    /* 9 max compression */
  ];
  var lm_init = (s) => {
    s.window_size = 2 * s.w_size;
    zero(s.head);
    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;
    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
  };
  function DeflateState() {
    this.strm = null;
    this.status = 0;
    this.pending_buf = null;
    this.pending_buf_size = 0;
    this.pending_out = 0;
    this.pending = 0;
    this.wrap = 0;
    this.gzhead = null;
    this.gzindex = 0;
    this.method = Z_DEFLATED$2;
    this.last_flush = -1;
    this.w_size = 0;
    this.w_bits = 0;
    this.w_mask = 0;
    this.window = null;
    this.window_size = 0;
    this.prev = null;
    this.head = null;
    this.ins_h = 0;
    this.hash_size = 0;
    this.hash_bits = 0;
    this.hash_mask = 0;
    this.hash_shift = 0;
    this.block_start = 0;
    this.match_length = 0;
    this.prev_match = 0;
    this.match_available = 0;
    this.strstart = 0;
    this.match_start = 0;
    this.lookahead = 0;
    this.prev_length = 0;
    this.max_chain_length = 0;
    this.max_lazy_match = 0;
    this.level = 0;
    this.strategy = 0;
    this.good_match = 0;
    this.nice_match = 0;
    this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
    this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
    this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
    zero(this.dyn_ltree);
    zero(this.dyn_dtree);
    zero(this.bl_tree);
    this.l_desc = null;
    this.d_desc = null;
    this.bl_desc = null;
    this.bl_count = new Uint16Array(MAX_BITS + 1);
    this.heap = new Uint16Array(2 * L_CODES + 1);
    zero(this.heap);
    this.heap_len = 0;
    this.heap_max = 0;
    this.depth = new Uint16Array(2 * L_CODES + 1);
    zero(this.depth);
    this.sym_buf = 0;
    this.lit_bufsize = 0;
    this.sym_next = 0;
    this.sym_end = 0;
    this.opt_len = 0;
    this.static_len = 0;
    this.matches = 0;
    this.insert = 0;
    this.bi_buf = 0;
    this.bi_valid = 0;
  }
  var deflateStateCheck = (strm) => {
    if (!strm) {
      return 1;
    }
    const s = strm.state;
    if (!s || s.strm !== strm || s.status !== INIT_STATE && //#ifdef GZIP
    s.status !== GZIP_STATE && //#endif
    s.status !== EXTRA_STATE && s.status !== NAME_STATE && s.status !== COMMENT_STATE && s.status !== HCRC_STATE && s.status !== BUSY_STATE && s.status !== FINISH_STATE) {
      return 1;
    }
    return 0;
  };
  var deflateResetKeep = (strm) => {
    if (deflateStateCheck(strm)) {
      return err(strm, Z_STREAM_ERROR$2);
    }
    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN;
    const s = strm.state;
    s.pending = 0;
    s.pending_out = 0;
    if (s.wrap < 0) {
      s.wrap = -s.wrap;
    }
    s.status = //#ifdef GZIP
    s.wrap === 2 ? GZIP_STATE : (
      //#endif
      s.wrap ? INIT_STATE : BUSY_STATE
    );
    strm.adler = s.wrap === 2 ? 0 : 1;
    s.last_flush = -2;
    _tr_init(s);
    return Z_OK$3;
  };
  var deflateReset = (strm) => {
    const ret = deflateResetKeep(strm);
    if (ret === Z_OK$3) {
      lm_init(strm.state);
    }
    return ret;
  };
  var deflateSetHeader = (strm, head) => {
    if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
      return Z_STREAM_ERROR$2;
    }
    strm.state.gzhead = head;
    return Z_OK$3;
  };
  var deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {
    if (!strm) {
      return Z_STREAM_ERROR$2;
    }
    let wrap = 1;
    if (level === Z_DEFAULT_COMPRESSION$1) {
      level = 6;
    }
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    } else if (windowBits > 15) {
      wrap = 2;
      windowBits -= 16;
    }
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) {
      return err(strm, Z_STREAM_ERROR$2);
    }
    if (windowBits === 8) {
      windowBits = 9;
    }
    const s = new DeflateState();
    strm.state = s;
    s.strm = strm;
    s.status = INIT_STATE;
    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;
    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
    s.window = new Uint8Array(s.w_size * 2);
    s.head = new Uint16Array(s.hash_size);
    s.prev = new Uint16Array(s.w_size);
    s.lit_bufsize = 1 << memLevel + 6;
    s.pending_buf_size = s.lit_bufsize * 4;
    s.pending_buf = new Uint8Array(s.pending_buf_size);
    s.sym_buf = s.lit_bufsize;
    s.sym_end = (s.lit_bufsize - 1) * 3;
    s.level = level;
    s.strategy = strategy;
    s.method = method;
    return deflateReset(strm);
  };
  var deflateInit = (strm, level) => {
    return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
  };
  var deflate$2 = (strm, flush) => {
    if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
    }
    const s = strm.state;
    if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === FINISH_STATE && flush !== Z_FINISH$3) {
      return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
    }
    const old_flush = s.last_flush;
    s.last_flush = flush;
    if (s.pending !== 0) {
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH$3) {
      return err(strm, Z_BUF_ERROR$1);
    }
    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR$1);
    }
    if (s.status === INIT_STATE && s.wrap === 0) {
      s.status = BUSY_STATE;
    }
    if (s.status === INIT_STATE) {
      let header = Z_DEFLATED$2 + (s.w_bits - 8 << 4) << 8;
      let level_flags = -1;
      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= level_flags << 6;
      if (s.strstart !== 0) {
        header |= PRESET_DICT;
      }
      header += 31 - header % 31;
      putShortMSB(s, header);
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 65535);
      }
      strm.adler = 1;
      s.status = BUSY_STATE;
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
    if (s.status === GZIP_STATE) {
      strm.adler = 0;
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) {
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      } else {
        put_byte(
          s,
          (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 255);
        put_byte(s, s.gzhead.time >> 8 & 255);
        put_byte(s, s.gzhead.time >> 16 & 255);
        put_byte(s, s.gzhead.time >> 24 & 255);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, s.gzhead.os & 255);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 255);
          put_byte(s, s.gzhead.extra.length >> 8 & 255);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra) {
        let beg = s.pending;
        let left = (s.gzhead.extra.length & 65535) - s.gzindex;
        while (s.pending + left > s.pending_buf_size) {
          let copy = s.pending_buf_size - s.pending;
          s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
          s.pending = s.pending_buf_size;
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          s.gzindex += copy;
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
          left -= copy;
        }
        let gzhead_extra = new Uint8Array(s.gzhead.extra);
        s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
        s.pending += left;
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        s.gzindex = 0;
      }
      s.status = NAME_STATE;
    }
    if (s.status === NAME_STATE) {
      if (s.gzhead.name) {
        let beg = s.pending;
        let val;
        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK$3;
            }
            beg = 0;
          }
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        s.gzindex = 0;
      }
      s.status = COMMENT_STATE;
    }
    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment) {
        let beg = s.pending;
        let val;
        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK$3;
            }
            beg = 0;
          }
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
      }
      s.status = HCRC_STATE;
    }
    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
        }
        put_byte(s, strm.adler & 255);
        put_byte(s, strm.adler >> 8 & 255);
        strm.adler = 0;
      }
      s.status = BUSY_STATE;
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
    if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE) {
      let bstate = s.level === 0 ? deflate_stored(s, flush) : s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }
      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
        }
        return Z_OK$3;
      }
      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH) {
          _tr_align(s);
        } else if (flush !== Z_BLOCK$1) {
          _tr_stored_block(s, 0, 0, false);
          if (flush === Z_FULL_FLUSH$1) {
            zero(s.head);
            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
    }
    if (flush !== Z_FINISH$3) {
      return Z_OK$3;
    }
    if (s.wrap <= 0) {
      return Z_STREAM_END$3;
    }
    if (s.wrap === 2) {
      put_byte(s, strm.adler & 255);
      put_byte(s, strm.adler >> 8 & 255);
      put_byte(s, strm.adler >> 16 & 255);
      put_byte(s, strm.adler >> 24 & 255);
      put_byte(s, strm.total_in & 255);
      put_byte(s, strm.total_in >> 8 & 255);
      put_byte(s, strm.total_in >> 16 & 255);
      put_byte(s, strm.total_in >> 24 & 255);
    } else {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 65535);
    }
    flush_pending(strm);
    if (s.wrap > 0) {
      s.wrap = -s.wrap;
    }
    return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
  };
  var deflateEnd = (strm) => {
    if (deflateStateCheck(strm)) {
      return Z_STREAM_ERROR$2;
    }
    const status = strm.state.status;
    strm.state = null;
    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
  };
  var deflateSetDictionary = (strm, dictionary) => {
    let dictLength = dictionary.length;
    if (deflateStateCheck(strm)) {
      return Z_STREAM_ERROR$2;
    }
    const s = strm.state;
    const wrap = s.wrap;
    if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
      return Z_STREAM_ERROR$2;
    }
    if (wrap === 1) {
      strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
    }
    s.wrap = 0;
    if (dictLength >= s.w_size) {
      if (wrap === 0) {
        zero(s.head);
        s.strstart = 0;
        s.block_start = 0;
        s.insert = 0;
      }
      let tmpDict = new Uint8Array(s.w_size);
      tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
      dictionary = tmpDict;
      dictLength = s.w_size;
    }
    const avail = strm.avail_in;
    const next = strm.next_in;
    const input = strm.input;
    strm.avail_in = dictLength;
    strm.next_in = 0;
    strm.input = dictionary;
    fill_window(s);
    while (s.lookahead >= MIN_MATCH) {
      let str = s.strstart;
      let n = s.lookahead - (MIN_MATCH - 1);
      do {
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
      } while (--n);
      s.strstart = str;
      s.lookahead = MIN_MATCH - 1;
      fill_window(s);
    }
    s.strstart += s.lookahead;
    s.block_start = s.strstart;
    s.insert = s.lookahead;
    s.lookahead = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    strm.next_in = next;
    strm.input = input;
    strm.avail_in = avail;
    s.wrap = wrap;
    return Z_OK$3;
  };
  var deflateInit_1 = deflateInit;
  var deflateInit2_1 = deflateInit2;
  var deflateReset_1 = deflateReset;
  var deflateResetKeep_1 = deflateResetKeep;
  var deflateSetHeader_1 = deflateSetHeader;
  var deflate_2$1 = deflate$2;
  var deflateEnd_1 = deflateEnd;
  var deflateSetDictionary_1 = deflateSetDictionary;
  var deflateInfo = "pako deflate (from Nodeca project)";
  var deflate_1$2 = {
    deflateInit: deflateInit_1,
    deflateInit2: deflateInit2_1,
    deflateReset: deflateReset_1,
    deflateResetKeep: deflateResetKeep_1,
    deflateSetHeader: deflateSetHeader_1,
    deflate: deflate_2$1,
    deflateEnd: deflateEnd_1,
    deflateSetDictionary: deflateSetDictionary_1,
    deflateInfo
  };
  var _has = (obj, key) => {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };
  var assign = function(obj) {
    const sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      const source = sources.shift();
      if (!source) {
        continue;
      }
      if (typeof source !== "object") {
        throw new TypeError(source + "must be non-object");
      }
      for (const p in source) {
        if (_has(source, p)) {
          obj[p] = source[p];
        }
      }
    }
    return obj;
  };
  var flattenChunks = (chunks) => {
    let len = 0;
    for (let i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }
    const result = new Uint8Array(len);
    for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
      let chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }
    return result;
  };
  var common = {
    assign,
    flattenChunks
  };
  var STR_APPLY_UIA_OK = true;
  try {
    String.fromCharCode.apply(null, new Uint8Array(1));
  } catch (__) {
    STR_APPLY_UIA_OK = false;
  }
  var _utf8len = new Uint8Array(256);
  for (let q = 0; q < 256; q++) {
    _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
  }
  _utf8len[254] = _utf8len[254] = 1;
  var string2buf = (str) => {
    if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) {
      return new TextEncoder().encode(str);
    }
    let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
    for (m_pos = 0; m_pos < str_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 64512) === 56320) {
          c = 65536 + (c - 55296 << 10) + (c2 - 56320);
          m_pos++;
        }
      }
      buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
    }
    buf = new Uint8Array(buf_len);
    for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 64512) === 56320) {
          c = 65536 + (c - 55296 << 10) + (c2 - 56320);
          m_pos++;
        }
      }
      if (c < 128) {
        buf[i++] = c;
      } else if (c < 2048) {
        buf[i++] = 192 | c >>> 6;
        buf[i++] = 128 | c & 63;
      } else if (c < 65536) {
        buf[i++] = 224 | c >>> 12;
        buf[i++] = 128 | c >>> 6 & 63;
        buf[i++] = 128 | c & 63;
      } else {
        buf[i++] = 240 | c >>> 18;
        buf[i++] = 128 | c >>> 12 & 63;
        buf[i++] = 128 | c >>> 6 & 63;
        buf[i++] = 128 | c & 63;
      }
    }
    return buf;
  };
  var buf2binstring = (buf, len) => {
    if (len < 65534) {
      if (buf.subarray && STR_APPLY_UIA_OK) {
        return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
      }
    }
    let result = "";
    for (let i = 0; i < len; i++) {
      result += String.fromCharCode(buf[i]);
    }
    return result;
  };
  var buf2string = (buf, max) => {
    const len = max || buf.length;
    if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) {
      return new TextDecoder().decode(buf.subarray(0, max));
    }
    let i, out;
    const utf16buf = new Array(len * 2);
    for (out = 0, i = 0; i < len; ) {
      let c = buf[i++];
      if (c < 128) {
        utf16buf[out++] = c;
        continue;
      }
      let c_len = _utf8len[c];
      if (c_len > 4) {
        utf16buf[out++] = 65533;
        i += c_len - 1;
        continue;
      }
      c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
      while (c_len > 1 && i < len) {
        c = c << 6 | buf[i++] & 63;
        c_len--;
      }
      if (c_len > 1) {
        utf16buf[out++] = 65533;
        continue;
      }
      if (c < 65536) {
        utf16buf[out++] = c;
      } else {
        c -= 65536;
        utf16buf[out++] = 55296 | c >> 10 & 1023;
        utf16buf[out++] = 56320 | c & 1023;
      }
    }
    return buf2binstring(utf16buf, out);
  };
  var utf8border = (buf, max) => {
    max = max || buf.length;
    if (max > buf.length) {
      max = buf.length;
    }
    let pos = max - 1;
    while (pos >= 0 && (buf[pos] & 192) === 128) {
      pos--;
    }
    if (pos < 0) {
      return max;
    }
    if (pos === 0) {
      return max;
    }
    return pos + _utf8len[buf[pos]] > max ? pos : max;
  };
  var strings = {
    string2buf,
    buf2string,
    utf8border
  };
  function ZStream() {
    this.input = null;
    this.next_in = 0;
    this.avail_in = 0;
    this.total_in = 0;
    this.output = null;
    this.next_out = 0;
    this.avail_out = 0;
    this.total_out = 0;
    this.msg = "";
    this.state = null;
    this.data_type = 2;
    this.adler = 0;
  }
  var zstream = ZStream;
  var toString$1 = Object.prototype.toString;
  var {
    Z_NO_FLUSH: Z_NO_FLUSH$1,
    Z_SYNC_FLUSH,
    Z_FULL_FLUSH,
    Z_FINISH: Z_FINISH$2,
    Z_OK: Z_OK$2,
    Z_STREAM_END: Z_STREAM_END$2,
    Z_DEFAULT_COMPRESSION,
    Z_DEFAULT_STRATEGY,
    Z_DEFLATED: Z_DEFLATED$1
  } = constants$2;
  function Deflate$1(options) {
    this.options = common.assign({
      level: Z_DEFAULT_COMPRESSION,
      method: Z_DEFLATED$1,
      chunkSize: 16384,
      windowBits: 15,
      memLevel: 8,
      strategy: Z_DEFAULT_STRATEGY
    }, options || {});
    let opt = this.options;
    if (opt.raw && opt.windowBits > 0) {
      opt.windowBits = -opt.windowBits;
    } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
      opt.windowBits += 16;
    }
    this.err = 0;
    this.msg = "";
    this.ended = false;
    this.chunks = [];
    this.strm = new zstream();
    this.strm.avail_out = 0;
    let status = deflate_1$2.deflateInit2(
      this.strm,
      opt.level,
      opt.method,
      opt.windowBits,
      opt.memLevel,
      opt.strategy
    );
    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }
    if (opt.header) {
      deflate_1$2.deflateSetHeader(this.strm, opt.header);
    }
    if (opt.dictionary) {
      let dict;
      if (typeof opt.dictionary === "string") {
        dict = strings.string2buf(opt.dictionary);
      } else if (toString$1.call(opt.dictionary) === "[object ArrayBuffer]") {
        dict = new Uint8Array(opt.dictionary);
      } else {
        dict = opt.dictionary;
      }
      status = deflate_1$2.deflateSetDictionary(this.strm, dict);
      if (status !== Z_OK$2) {
        throw new Error(messages[status]);
      }
      this._dict_set = true;
    }
  }
  Deflate$1.prototype.push = function(data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    let status, _flush_mode;
    if (this.ended) {
      return false;
    }
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;
    if (typeof data === "string") {
      strm.input = strings.string2buf(data);
    } else if (toString$1.call(data) === "[object ArrayBuffer]") {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for (; ; ) {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }
      if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
        this.onData(strm.output.subarray(0, strm.next_out));
        strm.avail_out = 0;
        continue;
      }
      status = deflate_1$2.deflate(strm, _flush_mode);
      if (status === Z_STREAM_END$2) {
        if (strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
        }
        status = deflate_1$2.deflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === Z_OK$2;
      }
      if (strm.avail_out === 0) {
        this.onData(strm.output);
        continue;
      }
      if (_flush_mode > 0 && strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
        strm.avail_out = 0;
        continue;
      }
      if (strm.avail_in === 0) break;
    }
    return true;
  };
  Deflate$1.prototype.onData = function(chunk) {
    this.chunks.push(chunk);
  };
  Deflate$1.prototype.onEnd = function(status) {
    if (status === Z_OK$2) {
      this.result = common.flattenChunks(this.chunks);
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };
  function deflate$1(input, options) {
    const deflator = new Deflate$1(options);
    deflator.push(input, true);
    if (deflator.err) {
      throw deflator.msg || messages[deflator.err];
    }
    return deflator.result;
  }
  function deflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return deflate$1(input, options);
  }
  function gzip$1(input, options) {
    options = options || {};
    options.gzip = true;
    return deflate$1(input, options);
  }
  var Deflate_1$1 = Deflate$1;
  var deflate_2 = deflate$1;
  var deflateRaw_1$1 = deflateRaw$1;
  var gzip_1$1 = gzip$1;
  var constants$1 = constants$2;
  var deflate_1$1 = {
    Deflate: Deflate_1$1,
    deflate: deflate_2,
    deflateRaw: deflateRaw_1$1,
    gzip: gzip_1$1,
    constants: constants$1
  };
  var BAD$1 = 16209;
  var TYPE$1 = 16191;
  var inffast = function inflate_fast(strm, start) {
    let _in;
    let last;
    let _out;
    let beg;
    let end;
    let dmax;
    let wsize;
    let whave;
    let wnext;
    let s_window;
    let hold;
    let bits;
    let lcode;
    let dcode;
    let lmask;
    let dmask;
    let here;
    let op;
    let len;
    let dist;
    let from;
    let from_source;
    let input, output;
    const state = strm.state;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
    dmax = state.dmax;
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;
    top:
      do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = lcode[hold & lmask];
        dolen:
          for (; ; ) {
            op = here >>> 24;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 255;
            if (op === 0) {
              output[_out++] = here & 65535;
            } else if (op & 16) {
              len = here & 65535;
              op &= 15;
              if (op) {
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
                len += hold & (1 << op) - 1;
                hold >>>= op;
                bits -= op;
              }
              if (bits < 15) {
                hold += input[_in++] << bits;
                bits += 8;
                hold += input[_in++] << bits;
                bits += 8;
              }
              here = dcode[hold & dmask];
              dodist:
                for (; ; ) {
                  op = here >>> 24;
                  hold >>>= op;
                  bits -= op;
                  op = here >>> 16 & 255;
                  if (op & 16) {
                    dist = here & 65535;
                    op &= 15;
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                      if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                      }
                    }
                    dist += hold & (1 << op) - 1;
                    if (dist > dmax) {
                      strm.msg = "invalid distance too far back";
                      state.mode = BAD$1;
                      break top;
                    }
                    hold >>>= op;
                    bits -= op;
                    op = _out - beg;
                    if (dist > op) {
                      op = dist - op;
                      if (op > whave) {
                        if (state.sane) {
                          strm.msg = "invalid distance too far back";
                          state.mode = BAD$1;
                          break top;
                        }
                      }
                      from = 0;
                      from_source = s_window;
                      if (wnext === 0) {
                        from += wsize - op;
                        if (op < len) {
                          len -= op;
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = _out - dist;
                          from_source = output;
                        }
                      } else if (wnext < op) {
                        from += wsize + wnext - op;
                        op -= wnext;
                        if (op < len) {
                          len -= op;
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = 0;
                          if (wnext < len) {
                            op = wnext;
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist;
                            from_source = output;
                          }
                        }
                      } else {
                        from += wnext - op;
                        if (op < len) {
                          len -= op;
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = _out - dist;
                          from_source = output;
                        }
                      }
                      while (len > 2) {
                        output[_out++] = from_source[from++];
                        output[_out++] = from_source[from++];
                        output[_out++] = from_source[from++];
                        len -= 3;
                      }
                      if (len) {
                        output[_out++] = from_source[from++];
                        if (len > 1) {
                          output[_out++] = from_source[from++];
                        }
                      }
                    } else {
                      from = _out - dist;
                      do {
                        output[_out++] = output[from++];
                        output[_out++] = output[from++];
                        output[_out++] = output[from++];
                        len -= 3;
                      } while (len > 2);
                      if (len) {
                        output[_out++] = output[from++];
                        if (len > 1) {
                          output[_out++] = output[from++];
                        }
                      }
                    }
                  } else if ((op & 64) === 0) {
                    here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                    continue dodist;
                  } else {
                    strm.msg = "invalid distance code";
                    state.mode = BAD$1;
                    break top;
                  }
                  break;
                }
            } else if ((op & 64) === 0) {
              here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
              continue dolen;
            } else if (op & 32) {
              state.mode = TYPE$1;
              break top;
            } else {
              strm.msg = "invalid literal/length code";
              state.mode = BAD$1;
              break top;
            }
            break;
          }
      } while (_in < last && _out < end);
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
    state.hold = hold;
    state.bits = bits;
    return;
  };
  var MAXBITS = 15;
  var ENOUGH_LENS$1 = 852;
  var ENOUGH_DISTS$1 = 592;
  var CODES$1 = 0;
  var LENS$1 = 1;
  var DISTS$1 = 2;
  var lbase = new Uint16Array([
    /* Length codes 257..285 base */
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    13,
    15,
    17,
    19,
    23,
    27,
    31,
    35,
    43,
    51,
    59,
    67,
    83,
    99,
    115,
    131,
    163,
    195,
    227,
    258,
    0,
    0
  ]);
  var lext = new Uint8Array([
    /* Length codes 257..285 extra */
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    18,
    18,
    18,
    18,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    16,
    72,
    78
  ]);
  var dbase = new Uint16Array([
    /* Distance codes 0..29 base */
    1,
    2,
    3,
    4,
    5,
    7,
    9,
    13,
    17,
    25,
    33,
    49,
    65,
    97,
    129,
    193,
    257,
    385,
    513,
    769,
    1025,
    1537,
    2049,
    3073,
    4097,
    6145,
    8193,
    12289,
    16385,
    24577,
    0,
    0
  ]);
  var dext = new Uint8Array([
    /* Distance codes 0..29 extra */
    16,
    16,
    16,
    16,
    17,
    17,
    18,
    18,
    19,
    19,
    20,
    20,
    21,
    21,
    22,
    22,
    23,
    23,
    24,
    24,
    25,
    25,
    26,
    26,
    27,
    27,
    28,
    28,
    29,
    29,
    64,
    64
  ]);
  var inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {
    const bits = opts.bits;
    let len = 0;
    let sym = 0;
    let min = 0, max = 0;
    let root = 0;
    let curr = 0;
    let drop = 0;
    let left = 0;
    let used = 0;
    let huff = 0;
    let incr;
    let fill;
    let low;
    let mask;
    let next;
    let base = null;
    let match;
    const count = new Uint16Array(MAXBITS + 1);
    const offs = new Uint16Array(MAXBITS + 1);
    let extra = null;
    let here_bits, here_op, here_val;
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) {
        break;
      }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) {
      table[table_index++] = 1 << 24 | 64 << 16 | 0;
      table[table_index++] = 1 << 24 | 64 << 16 | 0;
      opts.bits = 1;
      return 0;
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) {
        break;
      }
    }
    if (root < min) {
      root = min;
    }
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      }
    }
    if (left > 0 && (type === CODES$1 || max !== 1)) {
      return -1;
    }
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }
    if (type === CODES$1) {
      base = extra = work;
      match = 20;
    } else if (type === LENS$1) {
      base = lbase;
      extra = lext;
      match = 257;
    } else {
      base = dbase;
      extra = dext;
      match = 0;
    }
    huff = 0;
    sym = 0;
    len = min;
    next = table_index;
    curr = root;
    drop = 0;
    low = -1;
    used = 1 << root;
    mask = used - 1;
    if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
      return 1;
    }
    for (; ; ) {
      here_bits = len - drop;
      if (work[sym] + 1 < match) {
        here_op = 0;
        here_val = work[sym];
      } else if (work[sym] >= match) {
        here_op = extra[work[sym] - match];
        here_val = base[work[sym] - match];
      } else {
        here_op = 32 + 64;
        here_val = 0;
      }
      incr = 1 << len - drop;
      fill = 1 << curr;
      min = fill;
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
      } while (fill !== 0);
      incr = 1 << len - 1;
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }
      sym++;
      if (--count[len] === 0) {
        if (len === max) {
          break;
        }
        len = lens[lens_index + work[sym]];
      }
      if (len > root && (huff & mask) !== low) {
        if (drop === 0) {
          drop = root;
        }
        next += min;
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) {
            break;
          }
          curr++;
          left <<= 1;
        }
        used += 1 << curr;
        if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
          return 1;
        }
        low = huff & mask;
        table[low] = root << 24 | curr << 16 | next - table_index | 0;
      }
    }
    if (huff !== 0) {
      table[next + huff] = len - drop << 24 | 64 << 16 | 0;
    }
    opts.bits = root;
    return 0;
  };
  var inftrees = inflate_table;
  var CODES = 0;
  var LENS = 1;
  var DISTS = 2;
  var {
    Z_FINISH: Z_FINISH$1,
    Z_BLOCK,
    Z_TREES,
    Z_OK: Z_OK$1,
    Z_STREAM_END: Z_STREAM_END$1,
    Z_NEED_DICT: Z_NEED_DICT$1,
    Z_STREAM_ERROR: Z_STREAM_ERROR$1,
    Z_DATA_ERROR: Z_DATA_ERROR$1,
    Z_MEM_ERROR: Z_MEM_ERROR$1,
    Z_BUF_ERROR,
    Z_DEFLATED
  } = constants$2;
  var HEAD = 16180;
  var FLAGS = 16181;
  var TIME = 16182;
  var OS = 16183;
  var EXLEN = 16184;
  var EXTRA = 16185;
  var NAME = 16186;
  var COMMENT = 16187;
  var HCRC = 16188;
  var DICTID = 16189;
  var DICT = 16190;
  var TYPE = 16191;
  var TYPEDO = 16192;
  var STORED = 16193;
  var COPY_ = 16194;
  var COPY = 16195;
  var TABLE = 16196;
  var LENLENS = 16197;
  var CODELENS = 16198;
  var LEN_ = 16199;
  var LEN = 16200;
  var LENEXT = 16201;
  var DIST = 16202;
  var DISTEXT = 16203;
  var MATCH = 16204;
  var LIT = 16205;
  var CHECK = 16206;
  var LENGTH = 16207;
  var DONE = 16208;
  var BAD = 16209;
  var MEM = 16210;
  var SYNC = 16211;
  var ENOUGH_LENS = 852;
  var ENOUGH_DISTS = 592;
  var MAX_WBITS = 15;
  var DEF_WBITS = MAX_WBITS;
  var zswap32 = (q) => {
    return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
  };
  function InflateState() {
    this.strm = null;
    this.mode = 0;
    this.last = false;
    this.wrap = 0;
    this.havedict = false;
    this.flags = 0;
    this.dmax = 0;
    this.check = 0;
    this.total = 0;
    this.head = null;
    this.wbits = 0;
    this.wsize = 0;
    this.whave = 0;
    this.wnext = 0;
    this.window = null;
    this.hold = 0;
    this.bits = 0;
    this.length = 0;
    this.offset = 0;
    this.extra = 0;
    this.lencode = null;
    this.distcode = null;
    this.lenbits = 0;
    this.distbits = 0;
    this.ncode = 0;
    this.nlen = 0;
    this.ndist = 0;
    this.have = 0;
    this.next = null;
    this.lens = new Uint16Array(320);
    this.work = new Uint16Array(288);
    this.lendyn = null;
    this.distdyn = null;
    this.sane = 0;
    this.back = 0;
    this.was = 0;
  }
  var inflateStateCheck = (strm) => {
    if (!strm) {
      return 1;
    }
    const state = strm.state;
    if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) {
      return 1;
    }
    return 0;
  };
  var inflateResetKeep = (strm) => {
    if (inflateStateCheck(strm)) {
      return Z_STREAM_ERROR$1;
    }
    const state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = "";
    if (state.wrap) {
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.flags = -1;
    state.dmax = 32768;
    state.head = null;
    state.hold = 0;
    state.bits = 0;
    state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
    state.sane = 1;
    state.back = -1;
    return Z_OK$1;
  };
  var inflateReset = (strm) => {
    if (inflateStateCheck(strm)) {
      return Z_STREAM_ERROR$1;
    }
    const state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);
  };
  var inflateReset2 = (strm, windowBits) => {
    let wrap;
    if (inflateStateCheck(strm)) {
      return Z_STREAM_ERROR$1;
    }
    const state = strm.state;
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    } else {
      wrap = (windowBits >> 4) + 5;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR$1;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  };
  var inflateInit2 = (strm, windowBits) => {
    if (!strm) {
      return Z_STREAM_ERROR$1;
    }
    const state = new InflateState();
    strm.state = state;
    state.strm = strm;
    state.window = null;
    state.mode = HEAD;
    const ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK$1) {
      strm.state = null;
    }
    return ret;
  };
  var inflateInit = (strm) => {
    return inflateInit2(strm, DEF_WBITS);
  };
  var virgin = true;
  var lenfix;
  var distfix;
  var fixedtables = (state) => {
    if (virgin) {
      lenfix = new Int32Array(512);
      distfix = new Int32Array(32);
      let sym = 0;
      while (sym < 144) {
        state.lens[sym++] = 8;
      }
      while (sym < 256) {
        state.lens[sym++] = 9;
      }
      while (sym < 280) {
        state.lens[sym++] = 7;
      }
      while (sym < 288) {
        state.lens[sym++] = 8;
      }
      inftrees(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
      sym = 0;
      while (sym < 32) {
        state.lens[sym++] = 5;
      }
      inftrees(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
      virgin = false;
    }
    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  };
  var updatewindow = (strm, src, end, copy) => {
    let dist;
    const state = strm.state;
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;
      state.window = new Uint8Array(state.wsize);
    }
    if (copy >= state.wsize) {
      state.window.set(src.subarray(end - state.wsize, end), 0);
      state.wnext = 0;
      state.whave = state.wsize;
    } else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
      copy -= dist;
      if (copy) {
        state.window.set(src.subarray(end - copy, end), 0);
        state.wnext = copy;
        state.whave = state.wsize;
      } else {
        state.wnext += dist;
        if (state.wnext === state.wsize) {
          state.wnext = 0;
        }
        if (state.whave < state.wsize) {
          state.whave += dist;
        }
      }
    }
    return 0;
  };
  var inflate$2 = (strm, flush) => {
    let state;
    let input, output;
    let next;
    let put;
    let have, left;
    let hold;
    let bits;
    let _in, _out;
    let copy;
    let from;
    let from_source;
    let here = 0;
    let here_bits, here_op, here_val;
    let last_bits, last_op, last_val;
    let len;
    let ret;
    const hbuf = new Uint8Array(4);
    let opts;
    let n;
    const order = (
      /* permutation of code lengths */
      new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
    );
    if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;
    if (state.mode === TYPE) {
      state.mode = TYPEDO;
    }
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    _in = have;
    _out = left;
    ret = Z_OK$1;
    inf_leave:
      for (; ; ) {
        switch (state.mode) {
          case HEAD:
            if (state.wrap === 0) {
              state.mode = TYPEDO;
              break;
            }
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.wrap & 2 && hold === 35615) {
              if (state.wbits === 0) {
                state.wbits = 15;
              }
              state.check = 0;
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              hold = 0;
              bits = 0;
              state.mode = FLAGS;
              break;
            }
            if (state.head) {
              state.head.done = false;
            }
            if (!(state.wrap & 1) || /* check if zlib header allowed */
            (((hold & 255) << 8) + (hold >> 8)) % 31) {
              strm.msg = "incorrect header check";
              state.mode = BAD;
              break;
            }
            if ((hold & 15) !== Z_DEFLATED) {
              strm.msg = "unknown compression method";
              state.mode = BAD;
              break;
            }
            hold >>>= 4;
            bits -= 4;
            len = (hold & 15) + 8;
            if (state.wbits === 0) {
              state.wbits = len;
            }
            if (len > 15 || len > state.wbits) {
              strm.msg = "invalid window size";
              state.mode = BAD;
              break;
            }
            state.dmax = 1 << state.wbits;
            state.flags = 0;
            strm.adler = state.check = 1;
            state.mode = hold & 512 ? DICTID : TYPE;
            hold = 0;
            bits = 0;
            break;
          case FLAGS:
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.flags = hold;
            if ((state.flags & 255) !== Z_DEFLATED) {
              strm.msg = "unknown compression method";
              state.mode = BAD;
              break;
            }
            if (state.flags & 57344) {
              strm.msg = "unknown header flags set";
              state.mode = BAD;
              break;
            }
            if (state.head) {
              state.head.text = hold >> 8 & 1;
            }
            if (state.flags & 512 && state.wrap & 4) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_1(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
            state.mode = TIME;
          case TIME:
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.head) {
              state.head.time = hold;
            }
            if (state.flags & 512 && state.wrap & 4) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              hbuf[2] = hold >>> 16 & 255;
              hbuf[3] = hold >>> 24 & 255;
              state.check = crc32_1(state.check, hbuf, 4, 0);
            }
            hold = 0;
            bits = 0;
            state.mode = OS;
          case OS:
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.head) {
              state.head.xflags = hold & 255;
              state.head.os = hold >> 8;
            }
            if (state.flags & 512 && state.wrap & 4) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_1(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
            state.mode = EXLEN;
          case EXLEN:
            if (state.flags & 1024) {
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.length = hold;
              if (state.head) {
                state.head.extra_len = hold;
              }
              if (state.flags & 512 && state.wrap & 4) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32_1(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
            } else if (state.head) {
              state.head.extra = null;
            }
            state.mode = EXTRA;
          case EXTRA:
            if (state.flags & 1024) {
              copy = state.length;
              if (copy > have) {
                copy = have;
              }
              if (copy) {
                if (state.head) {
                  len = state.head.extra_len - state.length;
                  if (!state.head.extra) {
                    state.head.extra = new Uint8Array(state.head.extra_len);
                  }
                  state.head.extra.set(
                    input.subarray(
                      next,
                      // extra field is limited to 65536 bytes
                      // - no need for additional size check
                      next + copy
                    ),
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len
                  );
                }
                if (state.flags & 512 && state.wrap & 4) {
                  state.check = crc32_1(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                state.length -= copy;
              }
              if (state.length) {
                break inf_leave;
              }
            }
            state.length = 0;
            state.mode = NAME;
          case NAME:
            if (state.flags & 2048) {
              if (have === 0) {
                break inf_leave;
              }
              copy = 0;
              do {
                len = input[next + copy++];
                if (state.head && len && state.length < 65536) {
                  state.head.name += String.fromCharCode(len);
                }
              } while (len && copy < have);
              if (state.flags & 512 && state.wrap & 4) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) {
                break inf_leave;
              }
            } else if (state.head) {
              state.head.name = null;
            }
            state.length = 0;
            state.mode = COMMENT;
          case COMMENT:
            if (state.flags & 4096) {
              if (have === 0) {
                break inf_leave;
              }
              copy = 0;
              do {
                len = input[next + copy++];
                if (state.head && len && state.length < 65536) {
                  state.head.comment += String.fromCharCode(len);
                }
              } while (len && copy < have);
              if (state.flags & 512 && state.wrap & 4) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) {
                break inf_leave;
              }
            } else if (state.head) {
              state.head.comment = null;
            }
            state.mode = HCRC;
          case HCRC:
            if (state.flags & 512) {
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.wrap & 4 && hold !== (state.check & 65535)) {
                strm.msg = "header crc mismatch";
                state.mode = BAD;
                break;
              }
              hold = 0;
              bits = 0;
            }
            if (state.head) {
              state.head.hcrc = state.flags >> 9 & 1;
              state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = TYPE;
            break;
          case DICTID:
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            strm.adler = state.check = zswap32(hold);
            hold = 0;
            bits = 0;
            state.mode = DICT;
          case DICT:
            if (state.havedict === 0) {
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              return Z_NEED_DICT$1;
            }
            strm.adler = state.check = 1;
            state.mode = TYPE;
          case TYPE:
            if (flush === Z_BLOCK || flush === Z_TREES) {
              break inf_leave;
            }
          case TYPEDO:
            if (state.last) {
              hold >>>= bits & 7;
              bits -= bits & 7;
              state.mode = CHECK;
              break;
            }
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.last = hold & 1;
            hold >>>= 1;
            bits -= 1;
            switch (hold & 3) {
              case 0:
                state.mode = STORED;
                break;
              case 1:
                fixedtables(state);
                state.mode = LEN_;
                if (flush === Z_TREES) {
                  hold >>>= 2;
                  bits -= 2;
                  break inf_leave;
                }
                break;
              case 2:
                state.mode = TABLE;
                break;
              case 3:
                strm.msg = "invalid block type";
                state.mode = BAD;
            }
            hold >>>= 2;
            bits -= 2;
            break;
          case STORED:
            hold >>>= bits & 7;
            bits -= bits & 7;
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
              strm.msg = "invalid stored block lengths";
              state.mode = BAD;
              break;
            }
            state.length = hold & 65535;
            hold = 0;
            bits = 0;
            state.mode = COPY_;
            if (flush === Z_TREES) {
              break inf_leave;
            }
          case COPY_:
            state.mode = COPY;
          case COPY:
            copy = state.length;
            if (copy) {
              if (copy > have) {
                copy = have;
              }
              if (copy > left) {
                copy = left;
              }
              if (copy === 0) {
                break inf_leave;
              }
              output.set(input.subarray(next, next + copy), put);
              have -= copy;
              next += copy;
              left -= copy;
              put += copy;
              state.length -= copy;
              break;
            }
            state.mode = TYPE;
            break;
          case TABLE:
            while (bits < 14) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.nlen = (hold & 31) + 257;
            hold >>>= 5;
            bits -= 5;
            state.ndist = (hold & 31) + 1;
            hold >>>= 5;
            bits -= 5;
            state.ncode = (hold & 15) + 4;
            hold >>>= 4;
            bits -= 4;
            if (state.nlen > 286 || state.ndist > 30) {
              strm.msg = "too many length or distance symbols";
              state.mode = BAD;
              break;
            }
            state.have = 0;
            state.mode = LENLENS;
          case LENLENS:
            while (state.have < state.ncode) {
              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.lens[order[state.have++]] = hold & 7;
              hold >>>= 3;
              bits -= 3;
            }
            while (state.have < 19) {
              state.lens[order[state.have++]] = 0;
            }
            state.lencode = state.lendyn;
            state.lenbits = 7;
            opts = { bits: state.lenbits };
            ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;
            if (ret) {
              strm.msg = "invalid code lengths set";
              state.mode = BAD;
              break;
            }
            state.have = 0;
            state.mode = CODELENS;
          case CODELENS:
            while (state.have < state.nlen + state.ndist) {
              for (; ; ) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (here_val < 16) {
                hold >>>= here_bits;
                bits -= here_bits;
                state.lens[state.have++] = here_val;
              } else {
                if (here_val === 16) {
                  n = here_bits + 2;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  hold >>>= here_bits;
                  bits -= here_bits;
                  if (state.have === 0) {
                    strm.msg = "invalid bit length repeat";
                    state.mode = BAD;
                    break;
                  }
                  len = state.lens[state.have - 1];
                  copy = 3 + (hold & 3);
                  hold >>>= 2;
                  bits -= 2;
                } else if (here_val === 17) {
                  n = here_bits + 3;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  hold >>>= here_bits;
                  bits -= here_bits;
                  len = 0;
                  copy = 3 + (hold & 7);
                  hold >>>= 3;
                  bits -= 3;
                } else {
                  n = here_bits + 7;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  hold >>>= here_bits;
                  bits -= here_bits;
                  len = 0;
                  copy = 11 + (hold & 127);
                  hold >>>= 7;
                  bits -= 7;
                }
                if (state.have + copy > state.nlen + state.ndist) {
                  strm.msg = "invalid bit length repeat";
                  state.mode = BAD;
                  break;
                }
                while (copy--) {
                  state.lens[state.have++] = len;
                }
              }
            }
            if (state.mode === BAD) {
              break;
            }
            if (state.lens[256] === 0) {
              strm.msg = "invalid code -- missing end-of-block";
              state.mode = BAD;
              break;
            }
            state.lenbits = 9;
            opts = { bits: state.lenbits };
            ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;
            if (ret) {
              strm.msg = "invalid literal/lengths set";
              state.mode = BAD;
              break;
            }
            state.distbits = 6;
            state.distcode = state.distdyn;
            opts = { bits: state.distbits };
            ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            state.distbits = opts.bits;
            if (ret) {
              strm.msg = "invalid distances set";
              state.mode = BAD;
              break;
            }
            state.mode = LEN_;
            if (flush === Z_TREES) {
              break inf_leave;
            }
          case LEN_:
            state.mode = LEN;
          case LEN:
            if (have >= 6 && left >= 258) {
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              inffast(strm, _out);
              put = strm.next_out;
              output = strm.output;
              left = strm.avail_out;
              next = strm.next_in;
              input = strm.input;
              have = strm.avail_in;
              hold = state.hold;
              bits = state.bits;
              if (state.mode === TYPE) {
                state.back = -1;
              }
              break;
            }
            state.back = 0;
            for (; ; ) {
              here = state.lencode[hold & (1 << state.lenbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_op && (here_op & 240) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (; ; ) {
                here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (last_bits + here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= last_bits;
              bits -= last_bits;
              state.back += last_bits;
            }
            hold >>>= here_bits;
            bits -= here_bits;
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
              state.mode = LIT;
              break;
            }
            if (here_op & 32) {
              state.back = -1;
              state.mode = TYPE;
              break;
            }
            if (here_op & 64) {
              strm.msg = "invalid literal/length code";
              state.mode = BAD;
              break;
            }
            state.extra = here_op & 15;
            state.mode = LENEXT;
          case LENEXT:
            if (state.extra) {
              n = state.extra;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.length += hold & (1 << state.extra) - 1;
              hold >>>= state.extra;
              bits -= state.extra;
              state.back += state.extra;
            }
            state.was = state.length;
            state.mode = DIST;
          case DIST:
            for (; ; ) {
              here = state.distcode[hold & (1 << state.distbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if ((here_op & 240) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (; ; ) {
                here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (last_bits + here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= last_bits;
              bits -= last_bits;
              state.back += last_bits;
            }
            hold >>>= here_bits;
            bits -= here_bits;
            state.back += here_bits;
            if (here_op & 64) {
              strm.msg = "invalid distance code";
              state.mode = BAD;
              break;
            }
            state.offset = here_val;
            state.extra = here_op & 15;
            state.mode = DISTEXT;
          case DISTEXT:
            if (state.extra) {
              n = state.extra;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.offset += hold & (1 << state.extra) - 1;
              hold >>>= state.extra;
              bits -= state.extra;
              state.back += state.extra;
            }
            if (state.offset > state.dmax) {
              strm.msg = "invalid distance too far back";
              state.mode = BAD;
              break;
            }
            state.mode = MATCH;
          case MATCH:
            if (left === 0) {
              break inf_leave;
            }
            copy = _out - left;
            if (state.offset > copy) {
              copy = state.offset - copy;
              if (copy > state.whave) {
                if (state.sane) {
                  strm.msg = "invalid distance too far back";
                  state.mode = BAD;
                  break;
                }
              }
              if (copy > state.wnext) {
                copy -= state.wnext;
                from = state.wsize - copy;
              } else {
                from = state.wnext - copy;
              }
              if (copy > state.length) {
                copy = state.length;
              }
              from_source = state.window;
            } else {
              from_source = output;
              from = put - state.offset;
              copy = state.length;
            }
            if (copy > left) {
              copy = left;
            }
            left -= copy;
            state.length -= copy;
            do {
              output[put++] = from_source[from++];
            } while (--copy);
            if (state.length === 0) {
              state.mode = LEN;
            }
            break;
          case LIT:
            if (left === 0) {
              break inf_leave;
            }
            output[put++] = state.length;
            left--;
            state.mode = LEN;
            break;
          case CHECK:
            if (state.wrap) {
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold |= input[next++] << bits;
                bits += 8;
              }
              _out -= left;
              strm.total_out += _out;
              state.total += _out;
              if (state.wrap & 4 && _out) {
                strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/
                state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out);
              }
              _out = left;
              if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {
                strm.msg = "incorrect data check";
                state.mode = BAD;
                break;
              }
              hold = 0;
              bits = 0;
            }
            state.mode = LENGTH;
          case LENGTH:
            if (state.wrap && state.flags) {
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.wrap & 4 && hold !== (state.total & 4294967295)) {
                strm.msg = "incorrect length check";
                state.mode = BAD;
                break;
              }
              hold = 0;
              bits = 0;
            }
            state.mode = DONE;
          case DONE:
            ret = Z_STREAM_END$1;
            break inf_leave;
          case BAD:
            ret = Z_DATA_ERROR$1;
            break inf_leave;
          case MEM:
            return Z_MEM_ERROR$1;
          case SYNC:
          default:
            return Z_STREAM_ERROR$1;
        }
      }
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH$1)) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap & 4 && _out) {
      strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
      state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out);
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if ((_in === 0 && _out === 0 || flush === Z_FINISH$1) && ret === Z_OK$1) {
      ret = Z_BUF_ERROR;
    }
    return ret;
  };
  var inflateEnd = (strm) => {
    if (inflateStateCheck(strm)) {
      return Z_STREAM_ERROR$1;
    }
    let state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK$1;
  };
  var inflateGetHeader = (strm, head) => {
    if (inflateStateCheck(strm)) {
      return Z_STREAM_ERROR$1;
    }
    const state = strm.state;
    if ((state.wrap & 2) === 0) {
      return Z_STREAM_ERROR$1;
    }
    state.head = head;
    head.done = false;
    return Z_OK$1;
  };
  var inflateSetDictionary = (strm, dictionary) => {
    const dictLength = dictionary.length;
    let state;
    let dictid;
    let ret;
    if (inflateStateCheck(strm)) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;
    if (state.wrap !== 0 && state.mode !== DICT) {
      return Z_STREAM_ERROR$1;
    }
    if (state.mode === DICT) {
      dictid = 1;
      dictid = adler32_1(dictid, dictionary, dictLength, 0);
      if (dictid !== state.check) {
        return Z_DATA_ERROR$1;
      }
    }
    ret = updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
      state.mode = MEM;
      return Z_MEM_ERROR$1;
    }
    state.havedict = 1;
    return Z_OK$1;
  };
  var inflateReset_1 = inflateReset;
  var inflateReset2_1 = inflateReset2;
  var inflateResetKeep_1 = inflateResetKeep;
  var inflateInit_1 = inflateInit;
  var inflateInit2_1 = inflateInit2;
  var inflate_2$1 = inflate$2;
  var inflateEnd_1 = inflateEnd;
  var inflateGetHeader_1 = inflateGetHeader;
  var inflateSetDictionary_1 = inflateSetDictionary;
  var inflateInfo = "pako inflate (from Nodeca project)";
  var inflate_1$2 = {
    inflateReset: inflateReset_1,
    inflateReset2: inflateReset2_1,
    inflateResetKeep: inflateResetKeep_1,
    inflateInit: inflateInit_1,
    inflateInit2: inflateInit2_1,
    inflate: inflate_2$1,
    inflateEnd: inflateEnd_1,
    inflateGetHeader: inflateGetHeader_1,
    inflateSetDictionary: inflateSetDictionary_1,
    inflateInfo
  };
  function GZheader() {
    this.text = 0;
    this.time = 0;
    this.xflags = 0;
    this.os = 0;
    this.extra = null;
    this.extra_len = 0;
    this.name = "";
    this.comment = "";
    this.hcrc = 0;
    this.done = false;
  }
  var gzheader = GZheader;
  var toString = Object.prototype.toString;
  var {
    Z_NO_FLUSH,
    Z_FINISH,
    Z_OK,
    Z_STREAM_END,
    Z_NEED_DICT,
    Z_STREAM_ERROR,
    Z_DATA_ERROR,
    Z_MEM_ERROR
  } = constants$2;
  function Inflate$1(options) {
    this.options = common.assign({
      chunkSize: 1024 * 64,
      windowBits: 15,
      to: ""
    }, options || {});
    const opt = this.options;
    if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
      opt.windowBits = -opt.windowBits;
      if (opt.windowBits === 0) {
        opt.windowBits = -15;
      }
    }
    if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
      opt.windowBits += 32;
    }
    if (opt.windowBits > 15 && opt.windowBits < 48) {
      if ((opt.windowBits & 15) === 0) {
        opt.windowBits |= 15;
      }
    }
    this.err = 0;
    this.msg = "";
    this.ended = false;
    this.chunks = [];
    this.strm = new zstream();
    this.strm.avail_out = 0;
    let status = inflate_1$2.inflateInit2(
      this.strm,
      opt.windowBits
    );
    if (status !== Z_OK) {
      throw new Error(messages[status]);
    }
    this.header = new gzheader();
    inflate_1$2.inflateGetHeader(this.strm, this.header);
    if (opt.dictionary) {
      if (typeof opt.dictionary === "string") {
        opt.dictionary = strings.string2buf(opt.dictionary);
      } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
        opt.dictionary = new Uint8Array(opt.dictionary);
      }
      if (opt.raw) {
        status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
        if (status !== Z_OK) {
          throw new Error(messages[status]);
        }
      }
    }
  }
  Inflate$1.prototype.push = function(data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    const dictionary = this.options.dictionary;
    let status, _flush_mode, last_avail_out;
    if (this.ended) return false;
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
    if (toString.call(data) === "[object ArrayBuffer]") {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for (; ; ) {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }
      status = inflate_1$2.inflate(strm, _flush_mode);
      if (status === Z_NEED_DICT && dictionary) {
        status = inflate_1$2.inflateSetDictionary(strm, dictionary);
        if (status === Z_OK) {
          status = inflate_1$2.inflate(strm, _flush_mode);
        } else if (status === Z_DATA_ERROR) {
          status = Z_NEED_DICT;
        }
      }
      while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0) {
        inflate_1$2.inflateReset(strm);
        status = inflate_1$2.inflate(strm, _flush_mode);
      }
      switch (status) {
        case Z_STREAM_ERROR:
        case Z_DATA_ERROR:
        case Z_NEED_DICT:
        case Z_MEM_ERROR:
          this.onEnd(status);
          this.ended = true;
          return false;
      }
      last_avail_out = strm.avail_out;
      if (strm.next_out) {
        if (strm.avail_out === 0 || status === Z_STREAM_END) {
          if (this.options.to === "string") {
            let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
            let tail = strm.next_out - next_out_utf8;
            let utf8str = strings.buf2string(strm.output, next_out_utf8);
            strm.next_out = tail;
            strm.avail_out = chunkSize - tail;
            if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
            this.onData(utf8str);
          } else {
            this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
          }
        }
      }
      if (status === Z_OK && last_avail_out === 0) continue;
      if (status === Z_STREAM_END) {
        status = inflate_1$2.inflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return true;
      }
      if (strm.avail_in === 0) break;
    }
    return true;
  };
  Inflate$1.prototype.onData = function(chunk) {
    this.chunks.push(chunk);
  };
  Inflate$1.prototype.onEnd = function(status) {
    if (status === Z_OK) {
      if (this.options.to === "string") {
        this.result = this.chunks.join("");
      } else {
        this.result = common.flattenChunks(this.chunks);
      }
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };
  function inflate$1(input, options) {
    const inflator = new Inflate$1(options);
    inflator.push(input);
    if (inflator.err) throw inflator.msg || messages[inflator.err];
    return inflator.result;
  }
  function inflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return inflate$1(input, options);
  }
  var Inflate_1$1 = Inflate$1;
  var inflate_2 = inflate$1;
  var inflateRaw_1$1 = inflateRaw$1;
  var ungzip$1 = inflate$1;
  var constants = constants$2;
  var inflate_1$1 = {
    Inflate: Inflate_1$1,
    inflate: inflate_2,
    inflateRaw: inflateRaw_1$1,
    ungzip: ungzip$1,
    constants
  };
  var { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;
  var { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
  var gzip_1 = gzip;
  var ungzip_1 = ungzip;

  // src/core/compression.js
  var _btoa = (str) => {
    try {
      if (typeof btoa === "function") return btoa(str);
    } catch {
    }
    try {
      if (typeof globalThis !== "undefined" && globalThis.Buffer) return globalThis.Buffer.from(str, "binary").toString("base64");
    } catch {
    }
    let output = "";
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    let i = 0;
    while (i < str.length) {
      const c1 = str.charCodeAt(i++);
      const c2 = str.charCodeAt(i++);
      const c3 = str.charCodeAt(i++);
      const e1 = c1 >> 2;
      const e2 = (c1 & 3) << 4 | c2 >> 4;
      let e3 = (c2 & 15) << 2 | c3 >> 6;
      let e4 = c3 & 63;
      if (isNaN(c2)) {
        e3 = 64;
        e4 = 64;
      } else if (isNaN(c3)) {
        e4 = 64;
      }
      output += chars.charAt(e1) + chars.charAt(e2) + chars.charAt(e3) + chars.charAt(e4);
    }
    return output;
  };
  var _atob = (b64) => {
    try {
      if (typeof atob === "function") return atob(b64);
    } catch {
    }
    try {
      if (typeof globalThis !== "undefined" && globalThis.Buffer) return globalThis.Buffer.from(b64, "base64").toString("binary");
    } catch {
    }
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    let str = "";
    let i = 0;
    b64 = b64.replace(/[^A-Za-z0-9+/=]/g, "");
    while (i < b64.length) {
      const e1 = chars.indexOf(b64.charAt(i++));
      const e2 = chars.indexOf(b64.charAt(i++));
      const e3 = chars.indexOf(b64.charAt(i++));
      const e4 = chars.indexOf(b64.charAt(i++));
      const c1 = e1 << 2 | e2 >> 4;
      const c2 = (e2 & 15) << 4 | e3 >> 2;
      const c3 = (e3 & 3) << 6 | e4;
      str += String.fromCharCode(c1);
      if (e3 !== 64 && e3 !== -1) str += String.fromCharCode(c2);
      if (e4 !== 64 && e4 !== -1) str += String.fromCharCode(c3);
    }
    return str;
  };
  var THRESHOLD = 5 * 1024 * 1024;
  function bytesToBase64(bytes) {
    if (!(bytes instanceof Uint8Array)) bytes = new Uint8Array(bytes);
    let binary = "";
    const chunk = 32768;
    for (let i = 0; i < bytes.length; i += chunk) {
      const sub = bytes.subarray(i, i + chunk);
      binary += String.fromCharCode.apply(null, sub);
    }
    return _btoa(binary);
  }
  function base64ToBytes(b64) {
    const binary = _atob(b64);
    const len = binary.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) bytes[i] = binary.charCodeAt(i);
    return bytes;
  }
  function maybeCompressMessage(obj) {
    try {
      if (!obj || typeof obj !== "object") return { wrapper: null, json: JSON.stringify(obj || {}) };
      if (obj.type === "__compressed__") {
        return { wrapper: null, json: JSON.stringify(obj) };
      }
      const json = JSON.stringify(obj);
      if (json.length < THRESHOLD) {
        return { wrapper: null, json };
      }
      const gz = gzip_1(json);
      const b64 = bytesToBase64(gz);
      const wrapper = {
        type: "__compressed__",
        encoding: "gzip+base64",
        originalType: obj.type,
        originalLength: json.length,
        compressedLength: b64.length,
        payload: b64
      };
      return { wrapper, json: JSON.stringify(wrapper) };
    } catch (e) {
      try {
        return { wrapper: null, json: JSON.stringify(obj) };
      } catch {
        return { wrapper: null, json: "{}" };
      }
    }
  }
  function tryDecompressWrapper(obj) {
    try {
      if (!obj || obj.type !== "__compressed__" || obj.encoding !== "gzip+base64") return obj;
      const b64 = obj.payload;
      if (typeof b64 !== "string" || !b64) return obj;
      const bytes = base64ToBytes(b64);
      const jsonBytes = ungzip_1(bytes, { to: "string" });
      const parsed = JSON.parse(jsonBytes);
      return parsed;
    } catch (e) {
      return obj;
    }
  }

  // src/slave/ui.js
  init_logger();

  // src/core/ui-utils.js
  function createShadowRoot(hostId = null) {
    const host = document.createElement("div");
    if (hostId) {
      host.id = hostId;
    }
    host.style.cssText = `
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 0; /* No forzar al frente; el window-manager ajustar\xE1 seg\xFAn corresponda */
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  `;
    const root = host.attachShadow({ mode: "open" });
    document.body.appendChild(host);
    return { host, root };
  }
  function makeDraggable(dragHandle, element) {
    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
    dragHandle.style.cursor = "move";
    dragHandle.addEventListener("mousedown", dragMouseDown);
    function dragMouseDown(e) {
      if (e.target.closest(".header-btn, .wplace-header-btn")) return;
      e.preventDefault();
      pos3 = e.clientX;
      pos4 = e.clientY;
      document.addEventListener("mouseup", closeDragElement);
      document.addEventListener("mousemove", elementDrag);
    }
    function elementDrag(e) {
      e.preventDefault();
      pos1 = pos3 - e.clientX;
      pos2 = pos4 - e.clientY;
      pos3 = e.clientX;
      pos4 = e.clientY;
      element.style.top = element.offsetTop - pos2 + "px";
      element.style.left = element.offsetLeft - pos1 + "px";
    }
    function closeDragElement() {
      document.removeEventListener("mouseup", closeDragElement);
      document.removeEventListener("mousemove", elementDrag);
    }
  }

  // src/slave/config.js
  init_locales();
  var SLAVE_CONFIG = {
    RECONNECT_INTERVAL: 5e3,
    // 5 segundos
    TELEMETRY_INTERVAL: 3e4,
    // 30 segundos
    MAX_RECONNECT_ATTEMPTS: 10,
    THEME: {
      primary: "#000000",
      secondary: "#111111",
      accent: "#222222",
      text: "#ffffff",
      highlight: "#775ce3",
      success: "#00ff00",
      error: "#ff0000",
      warning: "#ffaa00",
      connected: "#00ff00",
      connecting: "#ffaa00",
      disconnected: "#ff0000"
    }
  };
  function getSlaveTexts() {
    return getSection("slave");
  }

  // src/slave/ui.js
  function createSlaveUI({
    onConnect,
    onDisconnect,
    onClose
  }) {
    log("\u{1F39B}\uFE0F Creando interfaz del Slave");
    const existing = document.getElementById("wpl-slave-panel");
    if (existing) {
      existing.remove();
      log("\u{1F5D1}\uFE0F Panel de slave existente removido");
    }
    const texts = getSlaveTexts() || {
      title: "WPlace Slave",
      masterServer: "Servidor Maestro",
      ipAddress: "Direcci\xF3n IP",
      connect: "Conectar",
      disconnect: "Desconectar",
      status: "Estado",
      slaveId: "ID Slave",
      mode: "Modo",
      running: "Ejecutando",
      idle: "Inactivo",
      connected: "Conectado",
      connecting: "Conectando...",
      disconnected: "Desconectado",
      error: "Error",
      close: "Cerrar",
      telemetry: "Telemetr\xEDa",
      repairedPixels: "P\xEDxeles Reparados",
      missingPixels: "P\xEDxeles Faltantes",
      absentPixels: "P\xEDxeles Ausentes",
      remainingCharges: "Cargas Restantes"
    };
    const { host, root } = createShadowRoot("wpl-slave-panel");
    const style = document.createElement("style");
    style.textContent = `
    @keyframes slideIn {
      from { transform: translateY(20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    
    .panel {
      position: fixed;
      top: 20px;
      left: 20px;
      width: 320px;
      background: ${SLAVE_CONFIG.THEME.primary};
      border: 1px solid ${SLAVE_CONFIG.THEME.accent};
      border-radius: 10px;
      color: ${SLAVE_CONFIG.THEME.text};
      font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial;
      z-index: 999999;
      box-shadow: 0 8px 24px rgba(0,0,0,0.5);
      overflow: hidden;
      animation: slideIn 0.3s ease-out;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: ${SLAVE_CONFIG.THEME.secondary};
      padding: 10px 12px;
      color: ${SLAVE_CONFIG.THEME.highlight};
      font-weight: 600;
      cursor: move;
      user-select: none;
    }
    
    .body {
      padding: 12px;
    }
    
    .connection-section {
      background: ${SLAVE_CONFIG.THEME.secondary};
      padding: 12px;
      border-radius: 8px;
      margin-bottom: 12px;
    }

    .favorites {
      margin-top: 8px;
    }
    .fav-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: pointer;
      padding: 6px 8px;
      border-radius: 6px;
      background: ${SLAVE_CONFIG.THEME.primary};
      transition: background 0.2s ease;
    }
    .fav-header:hover { background: ${SLAVE_CONFIG.THEME.accent}; }
    .fav-title { font-size: 12px; opacity: 0.9; }
    .fav-chevron { transition: transform 0.2s ease; }
    .fav-chevron.open { transform: rotate(90deg); }
    .fav-list {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.25s ease;
    }
    .fav-list.open { max-height: 240px; }
    .fav-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 8px;
      padding: 6px 8px;
      border-bottom: 1px solid ${SLAVE_CONFIG.THEME.accent};
      font-size: 12px;
    }
    .fav-actions { display: flex; gap: 6px; }
    .star-btn {
      background: transparent;
      color: ${SLAVE_CONFIG.THEME.highlight};
      border: none;
      cursor: pointer;
      font-size: 16px;
    }
    .mini-btn {
      background: ${SLAVE_CONFIG.THEME.accent};
      border: none;
      color: ${SLAVE_CONFIG.THEME.text};
      padding: 4px 6px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 11px;
    }
    
    .input-group {
      margin-bottom: 10px;
    }
    
    .label {
      display: block;
      font-size: 12px;
      font-weight: 600;
      margin-bottom: 4px;
      color: ${SLAVE_CONFIG.THEME.text};
    }
    
    .input {
      width: 100%;
      padding: 8px;
      border: 1px solid ${SLAVE_CONFIG.THEME.accent};
      border-radius: 6px;
      background: ${SLAVE_CONFIG.THEME.primary};
      color: ${SLAVE_CONFIG.THEME.text};
      font-size: 14px;
      box-sizing: border-box;
    }
    
    .input:focus {
      outline: none;
      border-color: ${SLAVE_CONFIG.THEME.highlight};
    }
    
    .btn {
      width: 100%;
      padding: 10px;
      border: none;
      border-radius: 8px;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 14px;
      margin-bottom: 8px;
    }
    
    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .btn.connect {
      background: ${SLAVE_CONFIG.THEME.success};
      color: ${SLAVE_CONFIG.THEME.primary};
    }
    
    .btn.connect:hover:not(:disabled) {
      background: #00cc00;
    }
    
    .btn.disconnect {
      background: ${SLAVE_CONFIG.THEME.error};
      color: white;
    }
    
    .btn.disconnect:hover:not(:disabled) {
      background: #cc0000;
    }
    
    .btn.close {
      background: ${SLAVE_CONFIG.THEME.accent};
      color: ${SLAVE_CONFIG.THEME.text};
    }
    
    .btn.close:hover:not(:disabled) {
      background: ${SLAVE_CONFIG.THEME.highlight};
    }
    
    .status-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 8px;
    }
    
    .status-indicator.connected {
      background: ${SLAVE_CONFIG.THEME.connected};
    }
    
    .status-indicator.connecting {
      background: ${SLAVE_CONFIG.THEME.connecting};
      animation: pulse 1s infinite;
    }
    
    .status-indicator.disconnected {
      background: ${SLAVE_CONFIG.THEME.disconnected};
    }
    
    .status-indicator.error {
      background: ${SLAVE_CONFIG.THEME.error};
    }
    
    .status-section {
      background: ${SLAVE_CONFIG.THEME.secondary};
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 12px;
    }
    
    .status-row {
      display: flex;
      justify-content: space-between;
      margin: 4px 0;
      font-size: 13px;
    }
    
    .status-value {
      font-weight: 600;
    }
    
  /* Telemetr\xEDa oculta: estilos eliminados */
    
    .minimized {
      width: 200px;
    }
    
    .minimized .body {
      display: none;
    }
    
    .error-message {
      background: rgba(255, 0, 0, 0.1);
      border: 1px solid ${SLAVE_CONFIG.THEME.error};
      color: ${SLAVE_CONFIG.THEME.error};
      padding: 8px;
      border-radius: 6px;
      font-size: 12px;
      margin-bottom: 10px;
    }
  `;
    root.appendChild(style);
    const panel = document.createElement("div");
    panel.className = "panel";
    panel.innerHTML = `
    <div class="header">
      <div>${texts.title}</div>
      <button class="btn close close-btn" style="width: auto; padding: 4px 8px; margin: 0;">\u2715</button>
    </div>
    <div class="body">
      <div class="connection-section">
        <div class="input-group">
          <label class="label">${texts.masterServer}</label>
          <div style="display:flex; gap:6px; align-items:center;">
            <input type="text" class="input master-url-input" value="ws://localhost:8000/ws/slave" placeholder="host o ip (ej. 10.0.0.5:8000)" style="flex:1;">
            <button class="star-btn" title="Guardar como favorito">\u2606</button>
          </div>
          <div class="favorites">
            <div class="fav-header">
              <span class="fav-title">Servidores guardados</span>
              <span class="fav-chevron">\u25B6</span>
            </div>
            <div class="fav-list"></div>
          </div>
        </div>
        <button class="btn connect connect-btn">${texts.connect}</button>
        <button class="btn disconnect disconnect-btn" style="display: none;">${texts.disconnect}</button>
        <div class="error-message error-display" style="display: none;"></div>
      </div>
      
      <div class="status-section">
        <div class="status-row">
          <span>${texts.status}</span>
          <span class="status-value">
            <span class="status-indicator disconnected"></span>
            <span class="status-text">${texts.disconnected}</span>
          </span>
        </div>
        <div class="status-row">
          <span>${texts.slaveId}</span>
          <span class="status-value slave-id">-</span>
        </div>
        <div class="status-row">
          <span>${texts.mode}</span>
          <span class="status-value current-mode">-</span>
        </div>
        <div class="status-row">
          <span>${texts.running}</span>
          <span class="status-value running-status">${texts.idle}</span>
        </div>
      </div>
      
  <!-- Telemetr\xEDa oculta -->
      
      <button class="btn close close-panel-btn">${texts.close}</button>
    </div>
  `;
    root.appendChild(panel);
    const elements = {
      header: panel.querySelector(".header"),
      masterUrlInput: panel.querySelector(".master-url-input"),
      connectBtn: panel.querySelector(".connect-btn"),
      disconnectBtn: panel.querySelector(".disconnect-btn"),
      closeBtn: panel.querySelector(".close-btn"),
      closePanelBtn: panel.querySelector(".close-panel-btn"),
      errorDisplay: panel.querySelector(".error-display"),
      statusIndicator: panel.querySelector(".status-indicator"),
      statusText: panel.querySelector(".status-text"),
      slaveId: panel.querySelector(".slave-id"),
      currentMode: panel.querySelector(".current-mode"),
      runningStatus: panel.querySelector(".running-status"),
      starBtn: panel.querySelector(".star-btn"),
      favHeader: panel.querySelector(".fav-header"),
      favChevron: panel.querySelector(".fav-chevron"),
      favList: panel.querySelector(".fav-list")
    };
    makeDraggable(elements.header, panel);
    function isLocalhostName(name) {
      return name === "localhost" || name === "127.0.0.1" || name === "::1";
    }
    function normalizeWsUrl(raw) {
      try {
        if (!raw) return "";
        let v = String(raw).trim();
        v = v.replace(/^http:\/\//i, "ws://").replace(/^https:\/\//i, "wss://");
        if (!/^[a-z]+:\/\//i.test(v)) {
          const scheme = window.location.protocol === "https:" ? "wss://" : "ws://";
          v = scheme + v;
        }
        try {
          const u = new URL(v);
          if (!u.pathname || u.pathname === "/") {
            u.pathname = "/ws/slave";
            v = u.toString();
          }
        } catch {
        }
        return v;
      } catch {
        return raw;
      }
    }
    const LS_LAST_URL = "wpl_slave_last_url";
    try {
      const last = localStorage.getItem(LS_LAST_URL);
      if (last) {
        elements.masterUrlInput.value = last;
      }
    } catch {
    }
    const LS_KEY = "wpl_slave_favorites";
    function loadFavorites() {
      try {
        return JSON.parse(localStorage.getItem(LS_KEY) || "[]");
      } catch {
        return [];
      }
    }
    function saveFavorites(list) {
      try {
        localStorage.setItem(LS_KEY, JSON.stringify(list));
      } catch {
      }
    }
    function isFavorited(url) {
      const v = normalizeWsUrl(url || "");
      if (!v) return false;
      const list = loadFavorites();
      return list.includes(v);
    }
    function updateStarUI() {
      try {
        const v = normalizeWsUrl(elements.masterUrlInput.value.trim());
        if (isFavorited(v)) {
          elements.starBtn.textContent = "\u2605";
          elements.starBtn.title = "Eliminar de favoritos";
        } else {
          elements.starBtn.textContent = "\u2606";
          elements.starBtn.title = "Guardar como favorito";
        }
      } catch {
      }
    }
    function addFavorite(url) {
      const v = normalizeWsUrl(url);
      if (!v) return;
      const list = loadFavorites();
      if (!list.includes(v)) {
        list.push(v);
        saveFavorites(list);
        renderFavorites();
      }
      updateStarUI();
    }
    function removeFavorite(url) {
      const list = loadFavorites().filter((u) => u !== url);
      saveFavorites(list);
      renderFavorites();
      updateStarUI();
    }
    function renderFavorites() {
      const list = loadFavorites();
      elements.favList.innerHTML = "";
      list.forEach((u) => {
        const row = document.createElement("div");
        row.className = "fav-item";
        row.innerHTML = `
        <span style="overflow:hidden;text-overflow:ellipsis;white-space:nowrap;flex:1;">${u}</span>
        <div class="fav-actions">
          <button class="mini-btn connect-mini">Conectar</button>
          <button class="mini-btn remove-mini">Eliminar</button>
        </div>`;
        row.querySelector(".connect-mini").addEventListener("click", async () => {
          elements.masterUrlInput.value = u;
          updateStarUI();
          try {
            localStorage.setItem(LS_LAST_URL, u);
          } catch {
          }
          elements.connectBtn.click();
        });
        row.querySelector(".remove-mini").addEventListener("click", () => removeFavorite(u));
        elements.favList.appendChild(row);
      });
    }
    renderFavorites();
    let isMinimized = false;
    elements.masterUrlInput.addEventListener("keydown", async (ev) => {
      if (ev.key === "Enter") {
        elements.connectBtn.click();
      }
    });
    elements.connectBtn.addEventListener("click", async () => {
      let masterUrl = elements.masterUrlInput.value.trim();
      if (!masterUrl) {
        showError("Por favor ingresa una URL v\xE1lida");
        return;
      }
      masterUrl = normalizeWsUrl(masterUrl);
      try {
        const u = new URL(masterUrl);
        const isHttpsPage = window.location.protocol === "https:";
        const isInsecureWs = /^ws:$/i.test(u.protocol);
        const isLocal = isLocalhostName(u.hostname);
        if (isHttpsPage && isInsecureWs && !isLocal) {
          const upgraded = masterUrl.replace(/^ws:\/\//i, "wss://");
          showError("P\xE1gina HTTPS: cambiando a wss:// para evitar contenido mixto.");
          elements.masterUrlInput.value = upgraded;
          masterUrl = upgraded;
        }
      } catch {
      }
      try {
        elements.connectBtn.disabled = true;
        elements.errorDisplay.style.display = "none";
        try {
          localStorage.setItem(LS_LAST_URL, masterUrl);
        } catch {
        }
        await onConnect(masterUrl);
      } catch (error) {
        showError(`Error de conexi\xF3n: ${error.message}`);
        elements.connectBtn.disabled = false;
      }
    });
    elements.disconnectBtn.addEventListener("click", () => {
      onDisconnect();
    });
    elements.starBtn.addEventListener("click", () => {
      const v = normalizeWsUrl(elements.masterUrlInput.value.trim());
      if (!v) return;
      if (isFavorited(v)) {
        removeFavorite(v);
      } else {
        addFavorite(v);
      }
    });
    elements.masterUrlInput.addEventListener("input", updateStarUI);
    updateStarUI();
    let favOpen = false;
    elements.favHeader.addEventListener("click", () => {
      favOpen = !favOpen;
      elements.favList.classList.toggle("open", favOpen);
      elements.favChevron.classList.toggle("open", favOpen);
    });
    elements.closeBtn.addEventListener("click", () => {
      if (isMinimized) {
        panel.classList.remove("minimized");
        isMinimized = false;
        elements.closeBtn.textContent = "\u2715";
      } else {
        panel.classList.add("minimized");
        isMinimized = true;
        elements.closeBtn.textContent = "\u25A1";
      }
    });
    elements.closePanelBtn.addEventListener("click", () => {
      onClose();
      host.remove();
    });
    function showError(message) {
      elements.errorDisplay.textContent = message;
      elements.errorDisplay.style.display = "block";
    }
    function hideError() {
      elements.errorDisplay.style.display = "none";
    }
    const api = {
      updateStatus: (status) => {
        const { connectionStatus, slaveId, currentMode, isRunning, telemetryData: _telemetryData } = status;
        elements.statusIndicator.className = `status-indicator ${connectionStatus}`;
        const statusTexts = {
          connected: texts.connected,
          connecting: texts.connecting,
          disconnected: texts.disconnected,
          error: texts.error
        };
        elements.statusText.textContent = statusTexts[connectionStatus] || connectionStatus;
        if (connectionStatus === "connected") {
          elements.connectBtn.style.display = "none";
          elements.disconnectBtn.style.display = "block";
          elements.masterUrlInput.disabled = true;
          hideError();
        } else {
          elements.connectBtn.style.display = "block";
          elements.disconnectBtn.style.display = "none";
          elements.connectBtn.disabled = false;
          elements.masterUrlInput.disabled = false;
          if (connectionStatus === "error") {
            showError("Error de conexi\xF3n. Verifica la URL y que el servidor est\xE9 ejecut\xE1ndose.");
          }
        }
        elements.slaveId.textContent = slaveId || "-";
        elements.currentMode.textContent = currentMode || "-";
        elements.runningStatus.textContent = isRunning ? texts.running : texts.idle;
      },
      updateTexts: () => {
        const _newTexts = getSlaveTexts();
      },
      cleanup: () => {
        host.remove();
      }
    };
    return api;
  }

  // src/slave/index.js
  init_locales();
  init_client();
  init_config();
  init_wplace_api();

  // src/farm/index.js
  init_logger();

  // src/farm/config.js
  var FARM_DEFAULTS = {
    SITEKEY: "0x4AAAAAABpqJe8FO0N84q0F",
    // Turnstile sitekey (ajústalo si cambia)
    TILE_X: 1086,
    TILE_Y: 1565,
    TILE_SIZE: 3e3,
    // Tiles son de ~3000x3000 según investigación
    DELAY_MS: 15e3,
    // 15 segundos entre pintadas (predeterminado)
    MIN_CHARGES: 10,
    // mínimo de cargas para empezar a pintar
    CHARGE_REGEN_MS: 3e4,
    // 1 carga cada 30 segundos
    PIXELS_PER_BATCH: 20,
    // número de píxeles a pintar por lote
    COLOR_MIN: 1,
    COLOR_MAX: 32,
    COLOR_MODE: "random",
    // 'random' | 'fixed'
    COLOR_FIXED: 1,
    CUSTOM_PALETTE: ["#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF", "#00FFFF"],
    // Nueva funcionalidad de posición y radio
    BASE_X: null,
    // Posición X base (local al tile) - se establece al seleccionar zona
    BASE_Y: null,
    // Posición Y base (local al tile) - se establece al seleccionar zona
    FARM_RADIUS: 500,
    // Radio de farming en píxeles (500px por defecto para zona segura)
    POSITION_SELECTED: false,
    // Flag para indicar si se seleccionó una posición
    // Auto-compra de cargas usando droplets cuando >= 500
    AUTO_BUY_ENABLED: false,
    UI_THEME: {
      primary: "#000000",
      secondary: "#111111",
      accent: "#222222",
      text: "#ffffff",
      highlight: "#775ce3",
      success: "#00ff00",
      error: "#ff0000",
      running: "#00cc00"
      // Verde para cuando está corriendo
    }
  };
  var farmState = {
    running: false,
    painted: 0,
    last: null,
    // {x,y,color,status,json}
    charges: { count: 0, max: 0, cooldownMs: 3e4 },
    droplets: 0,
    user: null,
    panel: null,
    captureMode: false,
    // sniffer activo para capturar TILE_X/Y desde un POST real
    selectingPosition: false,
    // sniffer activo para capturar posición base
    originalFetch: window.fetch,
    retryCount: 0,
    // contador de reintentos
    inCooldown: false,
    // si está en cooldown de 2 minutos
    nextPaintTime: 0,
    // timestamp de la próxima pintada
    cooldownEndTime: 0,
    // timestamp del final del cooldown
    health: null
    // estado de salud del backend
  };

  // src/farm/ui.js
  init_locales();

  // src/farm/palette.js
  var COLOR_MAP = {
    0: { id: 1, name: "Black", rgb: { r: 0, g: 0, b: 0 } },
    1: { id: 2, name: "Dark Gray", rgb: { r: 60, g: 60, b: 60 } },
    2: { id: 3, name: "Gray", rgb: { r: 120, g: 120, b: 120 } },
    3: { id: 4, name: "Light Gray", rgb: { r: 210, g: 210, b: 210 } },
    4: { id: 5, name: "White", rgb: { r: 255, g: 255, b: 255 } },
    5: { id: 6, name: "Deep Red", rgb: { r: 96, g: 0, b: 24 } },
    6: { id: 7, name: "Red", rgb: { r: 237, g: 28, b: 36 } },
    7: { id: 8, name: "Orange", rgb: { r: 255, g: 127, b: 39 } },
    8: { id: 9, name: "Gold", rgb: { r: 246, g: 170, b: 9 } },
    9: { id: 10, name: "Yellow", rgb: { r: 249, g: 221, b: 59 } },
    10: { id: 11, name: "Light Yellow", rgb: { r: 255, g: 250, b: 188 } },
    11: { id: 12, name: "Dark Green", rgb: { r: 14, g: 185, b: 104 } },
    12: { id: 13, name: "Green", rgb: { r: 19, g: 230, b: 123 } },
    13: { id: 14, name: "Light Green", rgb: { r: 135, g: 255, b: 94 } },
    14: { id: 15, name: "Dark Teal", rgb: { r: 12, g: 129, b: 110 } },
    15: { id: 16, name: "Teal", rgb: { r: 16, g: 174, b: 166 } },
    16: { id: 17, name: "Light Teal", rgb: { r: 19, g: 225, b: 190 } },
    17: { id: 20, name: "Cyan", rgb: { r: 96, g: 247, b: 242 } },
    18: { id: 44, name: "Light Cyan", rgb: { r: 187, g: 250, b: 242 } },
    19: { id: 18, name: "Dark Blue", rgb: { r: 40, g: 80, b: 158 } },
    20: { id: 19, name: "Blue", rgb: { r: 64, g: 147, b: 228 } },
    21: { id: 21, name: "Indigo", rgb: { r: 107, g: 80, b: 246 } },
    22: { id: 22, name: "Light Indigo", rgb: { r: 153, g: 177, b: 251 } },
    23: { id: 23, name: "Dark Purple", rgb: { r: 120, g: 12, b: 153 } },
    24: { id: 24, name: "Purple", rgb: { r: 170, g: 56, b: 185 } },
    25: { id: 25, name: "Light Purple", rgb: { r: 224, g: 159, b: 249 } },
    26: { id: 26, name: "Dark Pink", rgb: { r: 203, g: 0, b: 122 } },
    27: { id: 27, name: "Pink", rgb: { r: 236, g: 31, b: 128 } },
    28: { id: 28, name: "Light Pink", rgb: { r: 243, g: 141, b: 169 } },
    29: { id: 29, name: "Dark Brown", rgb: { r: 104, g: 70, b: 52 } },
    30: { id: 30, name: "Brown", rgb: { r: 149, g: 104, b: 42 } },
    31: { id: 31, name: "Beige", rgb: { r: 248, g: 178, b: 119 } },
    32: { id: 52, name: "Light Beige", rgb: { r: 255, g: 197, b: 165 } },
    33: { id: 32, name: "Medium Gray", rgb: { r: 170, g: 170, b: 170 } },
    34: { id: 33, name: "Dark Red", rgb: { r: 165, g: 14, b: 30 } },
    35: { id: 34, name: "Light Red", rgb: { r: 250, g: 128, b: 114 } },
    36: { id: 35, name: "Dark Orange", rgb: { r: 228, g: 92, b: 26 } },
    37: { id: 37, name: "Dark Goldenrod", rgb: { r: 156, g: 132, b: 49 } },
    38: { id: 38, name: "Goldenrod", rgb: { r: 197, g: 173, b: 49 } },
    39: { id: 39, name: "Light Goldenrod", rgb: { r: 232, g: 212, b: 95 } },
    40: { id: 40, name: "Dark Olive", rgb: { r: 74, g: 107, b: 58 } },
    41: { id: 41, name: "Olive", rgb: { r: 90, g: 148, b: 74 } },
    42: { id: 42, name: "Light Olive", rgb: { r: 132, g: 197, b: 115 } },
    43: { id: 43, name: "Dark Cyan", rgb: { r: 15, g: 121, b: 159 } },
    44: { id: 45, name: "Light Blue", rgb: { r: 125, g: 199, b: 255 } },
    45: { id: 46, name: "Dark Indigo", rgb: { r: 77, g: 49, b: 184 } },
    46: { id: 47, name: "Dark Slate Blue", rgb: { r: 74, g: 66, b: 132 } },
    47: { id: 48, name: "Slate Blue", rgb: { r: 122, g: 113, b: 196 } },
    48: { id: 49, name: "Light Slate Blue", rgb: { r: 181, g: 174, b: 241 } },
    49: { id: 53, name: "Dark Peach", rgb: { r: 155, g: 82, b: 73 } },
    50: { id: 54, name: "Peach", rgb: { r: 209, g: 128, b: 120 } },
    51: { id: 55, name: "Light Peach", rgb: { r: 250, g: 182, b: 164 } },
    52: { id: 50, name: "Light Brown", rgb: { r: 219, g: 164, b: 99 } },
    53: { id: 56, name: "Dark Tan", rgb: { r: 123, g: 99, b: 82 } },
    54: { id: 57, name: "Tan", rgb: { r: 156, g: 132, b: 107 } },
    55: { id: 36, name: "Light Tan", rgb: { r: 214, g: 181, b: 148 } },
    56: { id: 51, name: "Dark Beige", rgb: { r: 209, g: 128, b: 81 } },
    57: { id: 61, name: "Dark Stone", rgb: { r: 109, g: 100, b: 63 } },
    58: { id: 62, name: "Stone", rgb: { r: 148, g: 140, b: 107 } },
    59: { id: 63, name: "Light Stone", rgb: { r: 205, g: 197, b: 158 } },
    60: { id: 58, name: "Dark Slate", rgb: { r: 51, g: 57, b: 65 } },
    61: { id: 59, name: "Slate", rgb: { r: 109, g: 117, b: 141 } },
    62: { id: 60, name: "Light Slate", rgb: { r: 179, g: 185, b: 209 } },
    63: { id: 0, name: "Transparent", rgb: null }
  };
  function getColorInfo(colorId) {
    const color = Object.values(COLOR_MAP).find((c) => c.id === colorId);
    return color || null;
  }
  function getColorName(colorId) {
    const color = getColorInfo(colorId);
    return color ? color.name : `Color ${colorId}`;
  }

  // src/core/utils.js
  function clamp(n, a, b) {
    return Math.max(a, Math.min(b, n));
  }

  // src/farm/ui.js
  init_logger();
  init_window_manager();
  function createFarmUI(config, onStart, onStop) {
    var _a, _b, _c, _d, _e, _f;
    const host = document.createElement("div");
    host.id = "wplace-farm-ui";
    host.style.cssText = 'position: fixed; top: 12px; right: 12px; font-family: system-ui, -apple-system, "Segoe UI", Roboto, Arial;';
    const root = host.attachShadow({ mode: "open" });
    const style = document.createElement("style");
    style.textContent = `
    .panel{background:#1f2937;color:#e5e7eb;border:1px solid #374151;border-radius:10px;box-shadow:0 8px 24px rgba(0,0,0,.5);width:320px;overflow:hidden}
  .header{display:flex;justify-content:space-between;align-items:center;background:#111827;color:#93c5fd;padding:10px 12px;font-weight:600;cursor:move;user-select:none}
  .min-btn{background:transparent;border:1px solid #374151;color:#e5e7eb;border-radius:6px;width:26px;height:22px;line-height:20px;display:flex;align-items:center;justify-content:center;font-weight:700;cursor:pointer;transition:all .2s}
  .min-btn:hover{background:#1f2937}
  .body{padding:12px;max-height:1000px;transition:max-height .35s ease, opacity .25s ease, padding .25s ease}
  .body.collapsed{max-height:0;opacity:.0;overflow:hidden;padding:0}
    .row{display:flex;gap:8px;margin:8px 0}
    .btn{flex:1;padding:8px 10px;border:none;border-radius:8px;font-weight:700;cursor:pointer;transition:all .2s;font-size:13px}
    .btn.primary{background:#2563eb;color:#fff}
    .btn.ghost{background:transparent;border:1px solid #374151;color:#e5e7eb}
  .btn.ghost.danger{background:#ef4444;color:#fff;border-color:#ef4444}
    .btn.primary:disabled,.btn.ghost:disabled{opacity:.5;cursor:not-allowed}
    .card{background:#111827;padding:10px;border-radius:8px;margin-top:10px}
    .stat{display:flex;justify-content:space-between;margin:4px 0;font-size:12px;opacity:.95}
    .status{margin-top:10px;padding:8px;border-radius:6px;text-align:center;font-size:12px;background:rgba(255,255,255,.06)}
    .label{font-size:12px;color:#cbd5e1}
    select,input{background:#111827;border:1px solid #374151;color:#e5e7eb;border-radius:6px;padding:6px 8px;font-size:12px}
    .grid2{display:grid;grid-template-columns:1fr 1fr;gap:8px}
    .colors{display:grid;grid-template-columns:repeat(8,1fr);gap:6px}
    .swatch{width:20px;height:20px;border:1px solid #374151;border-radius:4px;cursor:pointer}
  .active{outline:2px solid #93c5fd}
  /* Lista texto/valor para la configuraci\xF3n */
  .list{display:flex;flex-direction:column;gap:8px}
  .list-item{display:flex;align-items:center;justify-content:space-between;gap:8px}
  .list-item .label{font-size:12px;color:#cbd5e1}
  .list-item input{width:84px;text-align:center}
  /* Parpadeo naranja para bot\xF3n Capturar */
  @keyframes wpa-blink-orange{0%,100%{background:transparent;border-color:#f59e0b;color:#fde68a}50%{background:#f59e0b33;border-color:#f59e0b;color:#fff}}
  .blink-orange{animation:wpa-blink-orange 1s infinite; border-width:2px !important}
  `;
    root.appendChild(style);
    const panel = document.createElement("div");
    panel.className = "panel";
    panel.innerHTML = `
    <div class="header"><span>\u{1F9D1}\u200D\u{1F33E} WPlace Farm</span><button id="minBtn" class="min-btn" title="${t("image.minimize", "Minimizar")}">\u2013</button></div>
    <div class="body">
      <div class="row">
        <button class="btn primary" id="startBtn">${t("farm.start", "Iniciar")}</button>
        <button class="btn ghost" id="stopBtn" disabled>${t("farm.stop", "Detener")}</button>
        <button class="btn ghost" id="logsBtn">${t("farm.logWindow", "Logs")}</button>
      </div>

      <div class="card">
  <div class="stat"><span>${t("farm.stats.painted", "Pintados")}</span><span id="painted">0</span></div>
  <div class="stat"><span>${t("farm.stats.charges", "Cargas")}</span><span id="charges">0/0</span></div>
  <div class="stat"><span>${t("farm.stats.droplets", "Gotas")}</span><span id="droplets">0</span></div>
  <div class="stat"><span>${t("farm.stats.user", "Usuario")}</span><span id="username">-</span></div>
  <div class="stat"><span>${t("farm.stats.retries", "Reintentos")}</span><span id="retries">0</span></div>
      </div>

      <div class="card" id="cfgCard">
        <div class="list">
          <div class="list-item">
            <span class="label">${t("farm.config.minCharges", "Cargas m\xEDnimas")}</span>
            <input type="number" id="minCharges" min="0" max="100" value="${(_a = config.MIN_CHARGES) != null ? _a : 10}" />
          </div>
          <div class="list-item">
            <span class="label">${t("farm.config.delay", "Espera (seg)")}</span>
            <input type="number" id="delaySeconds" min="1" max="120" value="${Math.round((config.DELAY_MS || 15e3) / 1e3) || 15}" />
          </div>
          <div class="list-item">
            <span class="label">${t("farm.pixelsPerBatch", "P\xEDxeles por lote")}</span>
            <input type="number" id="pixelsPerBatch" min="1" max="50" value="${(_b = config.PIXELS_PER_BATCH) != null ? _b : 20}" />
          </div>
        </div>
      </div>

      <div class="card">
        <div class="row">
          <label class="label">${t("farm.colorMode", "Modo de color")}</label>
          <select id="colorMode">
            <option value="fixed">${t("farm.color.fixed", "Fijo")}</option>
            <option value="range">${t("farm.color.range", "Rango")}</option>
            <option value="random">${t("farm.color.random", "Aleatorio")}</option>
          </select>
        </div>
        <div id="fixedPicker" class="row" style="flex-direction:column">
          <div class="label" id="selectedColorLabel">${t("farm.color.selected", "Color seleccionado")}: -</div>
          <div class="colors" id="colorGrid"></div>
        </div>
        <div id="rangePicker" class="grid2" style="display:none;">
          <div><label class="label">${t("farm.color.min", "M\xEDn")}</label><select id="colorMin"></select></div>
          <div><label class="label">${t("farm.color.max", "M\xE1x")}</label><select id="colorMax"></select></div>
        </div>
      </div>

      <div class="row">
  <button class="btn ghost" id="capture-btn">${t("farm.capture", "Capturar zona")}</button>
  <button class="btn ghost" id="once-btn">${t("farm.once", "Una vez")}</button>
        <button class="btn ghost" id="select-position-btn" style="display:none">Select</button>
      </div>
  <div class="row" id="posInfoRow" style="display:none"></div>

  <div class="card" id="purchaseCard">
        <div class="row" style="align-items:center; justify-content:space-between;">
          <span class="label" style="flex:1;">${t("farm.autobuy.title", "Auto-compra (+5 cargas)")}</span>
          <label class="toggle-switch" style="position: relative; display: inline-block; width: 50px; height: 26px; margin-left: 10px;">
            <input type="checkbox" id="autoBuyCheckbox" style="opacity: 0; width: 0; height: 0;">
            <span class="toggle-slider" style="
              position: absolute;
              cursor: pointer;
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              background-color: #ef4444;
              transition: all 0.3s ease;
              border-radius: 13px;
              border: 1px solid #dc2626;
            "></span>
            <span class="toggle-knob" style="
              position: absolute;
              height: 20px;
              width: 20px;
              left: 3px;
              top: 3px;
              background-color: white;
              transition: all 0.3s ease;
              border-radius: 50%;
              box-shadow: 0 2px 6px rgba(0,0,0,0.3);
            "></span>
          </label>
        </div>
        <div class="row" id="manualBuyRow" style="display:none; gap:8px; align-items:center;">
          <button class="btn primary" id="manualBuyBtn">${t("farm.buyCharges", "Comprar +5 cargas")}</button>
        </div>
        <div class="row" style="font-size:12px; color:#9ca3af">${t("farm.autobuy.hint", "Se activar\xE1 autom\xE1ticamente cuando tengas \u2265 500 gotas")}</div>
      </div>

  </div>
  <div class="status" id="status">${t("farm.ready", "Listo")}</div>
  `;
    root.appendChild(panel);
    const els = {
      start: panel.querySelector("#startBtn"),
      stop: panel.querySelector("#stopBtn"),
      logsBtn: panel.querySelector("#logsBtn"),
      status: panel.querySelector("#status"),
      painted: panel.querySelector("#painted"),
      charges: panel.querySelector("#charges"),
      droplets: panel.querySelector("#droplets"),
      username: panel.querySelector("#username"),
      retries: panel.querySelector("#retries"),
      colorMode: panel.querySelector("#colorMode"),
      colorGrid: panel.querySelector("#colorGrid"),
      colorMin: panel.querySelector("#colorMin"),
      colorMax: panel.querySelector("#colorMax"),
      fixedPicker: panel.querySelector("#fixedPicker"),
      rangePicker: panel.querySelector("#rangePicker"),
      selectPositionBtn: panel.querySelector("#select-position-btn"),
      captureBtn: panel.querySelector("#capture-btn"),
      onceBtn: panel.querySelector("#once-btn"),
      posInfoValue: panel.querySelector("#posInfoValue"),
      minCharges: panel.querySelector("#minCharges"),
      delaySeconds: panel.querySelector("#delaySeconds"),
      pixelsPerBatch: panel.querySelector("#pixelsPerBatch"),
      selectedColorLabel: panel.querySelector("#selectedColorLabel"),
      autoBuyCheckbox: panel.querySelector("#autoBuyCheckbox"),
      manualBuyRow: panel.querySelector("#manualBuyRow"),
      manualBuyBtn: panel.querySelector("#manualBuyBtn")
    };
    els.selectPositionBtn.addEventListener("click", () => {
      var _a2;
      (_a2 = els.captureBtn) == null ? void 0 : _a2.click();
    });
    function fillColorOptions(select) {
      select.innerHTML = "";
      Object.values(COLOR_MAP).forEach((entry) => {
        if (!entry.rgb) return;
        const opt = document.createElement("option");
        opt.value = String(entry.id);
        opt.textContent = `${entry.id} - ${entry.name}`;
        select.appendChild(opt);
      });
    }
    fillColorOptions(els.colorMin);
    fillColorOptions(els.colorMax);
    function renderColorGrid(activeId) {
      els.colorGrid.innerHTML = "";
      Object.values(COLOR_MAP).forEach((entry) => {
        const d = document.createElement("div");
        d.className = "swatch" + (entry.id === activeId ? " active" : "");
        if (entry.rgb) {
          d.style.background = `rgb(${entry.rgb.r},${entry.rgb.g},${entry.rgb.b})`;
        } else {
          d.style.backgroundImage = `linear-gradient(45deg, #bbb 25%, transparent 25%),
                                   linear-gradient(-45deg, #bbb 25%, transparent 25%),
                                   linear-gradient(45deg, transparent 75%, #bbb 75%),
                                   linear-gradient(-45deg, transparent 75%, #bbb 75%)`;
          d.style.backgroundSize = "8px 8px";
          d.style.backgroundPosition = "0 0, 0 4px, 4px -4px, -4px 0px";
        }
        d.title = `${entry.id} - ${entry.name}`;
        d.addEventListener("click", () => {
          config.COLOR_FIXED = entry.id;
          renderColorGrid(config.COLOR_FIXED);
          saveConfig();
          updateConfig();
          if (els.selectedColorLabel) {
            els.selectedColorLabel.textContent = `${t("farm.color.selected", "Color seleccionado")}: ${getColorName(config.COLOR_FIXED)}`;
          }
        });
        els.colorGrid.appendChild(d);
      });
    }
    els.colorMode.value = config.COLOR_MODE || "random";
    els.colorMin.value = String((_c = config.COLOR_MIN) != null ? _c : 1);
    els.colorMax.value = String((_d = config.COLOR_MAX) != null ? _d : 32);
    renderColorGrid((_e = config.COLOR_FIXED) != null ? _e : 1);
    if (els.selectedColorLabel) {
      els.selectedColorLabel.textContent = `${t("farm.color.selected", "Color seleccionado")}: ${getColorName((_f = config.COLOR_FIXED) != null ? _f : 1)}`;
    }
    togglePickers();
    try {
      updateConfig();
    } catch {
    }
    els.colorMode.addEventListener("change", () => {
      config.COLOR_MODE = els.colorMode.value;
      togglePickers();
      saveConfig();
      updateConfig();
    });
    els.colorMin.addEventListener("change", () => {
      const v = clamp(parseInt(els.colorMin.value, 10), 1, 63);
      config.COLOR_MIN = v;
      if (config.COLOR_MAX < v) config.COLOR_MAX = v;
      els.colorMax.value = String(config.COLOR_MAX);
      saveConfig();
      updateConfig();
    });
    els.colorMax.addEventListener("change", () => {
      const v = clamp(parseInt(els.colorMax.value, 10), 1, 63);
      config.COLOR_MAX = v;
      if (config.COLOR_MIN > v) config.COLOR_MIN = v;
      els.colorMin.value = String(config.COLOR_MIN);
      saveConfig();
      updateConfig();
    });
    if (els.minCharges) {
      els.minCharges.addEventListener("change", () => {
        const v = clamp(parseInt(els.minCharges.value, 10) || 0, 0, 1e3);
        config.MIN_CHARGES = v;
        saveConfig();
        updateConfig();
      });
    }
    if (els.delaySeconds) {
      els.delaySeconds.addEventListener("change", () => {
        const v = clamp(parseInt(els.delaySeconds.value, 10) || 1, 1, 3600);
        config.DELAY_MS = v * 1e3;
        saveConfig();
        updateConfig();
      });
    }
    if (els.pixelsPerBatch) {
      els.pixelsPerBatch.addEventListener("change", () => {
        const v = clamp(parseInt(els.pixelsPerBatch.value, 10) || 1, 1, 50);
        config.PIXELS_PER_BATCH = v;
        saveConfig();
        updateConfig();
      });
    }
    function togglePickers() {
      const mode = els.colorMode.value;
      els.fixedPicker.style.display = mode === "fixed" ? "" : "none";
      els.rangePicker.style.display = mode === "range" ? "" : "none";
    }
    els.start.addEventListener("click", async () => {
      updateButtonStates(true);
      els.stop.classList.add("danger");
      try {
        if (onStart) await onStart();
      } catch (e) {
      }
    });
    els.stop.addEventListener("click", async () => {
      updateButtonStates(false);
      els.stop.classList.remove("danger");
      try {
        if (onStop) await onStop();
      } catch (e) {
      }
    });
    if (els.autoBuyCheckbox) {
      const slider = els.autoBuyCheckbox.parentElement.querySelector(".toggle-slider");
      const knob = els.autoBuyCheckbox.parentElement.querySelector(".toggle-knob");
      const applyVisual = (checked) => {
        if (!slider || !knob) return;
        slider.style.backgroundColor = checked ? "#22c55e" : "#ef4444";
        slider.style.borderColor = checked ? "#16a34a" : "#dc2626";
        knob.style.left = checked ? "27px" : "3px";
      };
      els.autoBuyCheckbox.checked = !!config.AUTO_BUY_ENABLED;
      applyVisual(els.autoBuyCheckbox.checked);
      els.autoBuyCheckbox.addEventListener("change", (e) => {
        const checked = !!e.target.checked;
        config.AUTO_BUY_ENABLED = checked;
        saveConfig();
        updateConfig();
        applyVisual(checked);
        if (els.manualBuyRow) els.manualBuyRow.style.display = checked ? "none" : "flex";
      });
      if (els.manualBuyRow) els.manualBuyRow.style.display = els.autoBuyCheckbox.checked ? "none" : "flex";
    }
    if (els.manualBuyBtn) {
      els.manualBuyBtn.addEventListener("click", async () => {
        try {
          els.manualBuyBtn.disabled = true;
          setStatus(t("farm.buying", "Comprando..."), "status");
          const { purchaseProduct: purchaseProduct2 } = await Promise.resolve().then(() => (init_wplace_api(), wplace_api_exports));
          const res = await purchaseProduct2(70, 1);
          if (res.success) {
            if (api.notify) api.notify(t("farm.buyOk", "Compra realizada. Actualiza sesi\xF3n."), "success");
            setStatus(t("farm.buyOk", "Compra realizada. Actualiza sesi\xF3n."), "success");
            try {
              if (Number.isFinite(farmState.droplets)) {
                farmState.droplets = Math.max(0, (farmState.droplets || 0) - 500);
                updateStats(farmState.painted, farmState.charges.count, farmState.retryCount);
              }
            } catch {
            }
          } else {
            if (api.notify) api.notify(t("farm.buyFail", "No se pudo comprar"), "error");
            setStatus(t("farm.buyFail", "No se pudo comprar"), "error");
          }
        } catch (err2) {
          if (api.notify) api.notify(t("farm.buyFail", "No se pudo comprar"), "error");
          setStatus(t("farm.buyFail", "No se pudo comprar"), "error");
        } finally {
          els.manualBuyBtn.disabled = false;
        }
      });
    }
    document.body.appendChild(host);
    try {
      registerWindow(host);
    } catch {
    }
    const headerEl = panel.querySelector(".header");
    const bodyEl = panel.querySelector(".body");
    let dragging = false;
    let offX = 0;
    let offY = 0;
    headerEl.addEventListener("mousedown", (e) => {
      const target = e.target;
      if (target && (target.id === "minBtn" || target.closest("#minBtn"))) return;
      dragging = true;
      const rect = host.getBoundingClientRect();
      offX = e.clientX - rect.left;
      offY = e.clientY - rect.top;
      e.preventDefault();
    });
    window.addEventListener("mousemove", (e) => {
      if (!dragging) return;
      const nx = Math.max(0, Math.min(window.innerWidth - panel.offsetWidth, e.clientX - offX));
      const ny = Math.max(0, Math.min(window.innerHeight - 40, e.clientY - offY));
      host.style.left = nx + "px";
      host.style.top = ny + "px";
      host.style.right = "auto";
    });
    window.addEventListener("mouseup", () => {
      dragging = false;
    });
    const minBtn = panel.querySelector("#minBtn");
    let collapsed = false;
    if (minBtn && bodyEl) {
      bodyEl.addEventListener("transitionend", (e) => {
        if (e.propertyName === "max-height") {
          if (collapsed) {
            bodyEl.style.display = "none";
          }
        }
      });
      minBtn.addEventListener("click", () => {
        collapsed = !collapsed;
        if (!collapsed) {
          bodyEl.style.display = "block";
          void bodyEl.offsetHeight;
        }
        bodyEl.classList.toggle("collapsed", collapsed);
        minBtn.textContent = collapsed ? "+" : "\u2013";
      });
    }
    if (els.logsBtn) {
      let logWindowInstance = null;
      els.logsBtn.addEventListener("click", async () => {
        try {
          const { createLogWindow: createLogWindow2 } = await Promise.resolve().then(() => (init_log_window2(), log_window_exports));
          logWindowInstance = logWindowInstance || createLogWindow2("Auto-Farm");
          logWindowInstance.toggle();
        } catch (e) {
          log("No se pudo abrir la ventana de logs:", e);
          notify("No se pudo abrir Logs", "error");
        }
      });
    }
    function setStatus(text, kind = "status") {
      els.status.textContent = text;
      els.status.style.background = kind === "error" ? "rgba(245, 101, 101, 0.2)" : kind === "success" ? "rgba(72, 187, 120, 0.2)" : "rgba(66, 153, 225, 0.2)";
    }
    function updateStats(painted, charges, retries) {
      var _a2, _b2, _c2, _d2, _e2, _f2, _g, _h;
      els.painted.textContent = String(painted != null ? painted : 0);
      const cc = Math.floor(charges != null ? charges : 0);
      const mx = (_b2 = (_a2 = farmState.charges) == null ? void 0 : _a2.max) != null ? _b2 : 0;
      els.charges.textContent = `${cc}/${mx}`;
      els.retries.textContent = String(retries != null ? retries : 0);
      const droplets = (_g = (_f2 = (_c2 = farmState) == null ? void 0 : _c2.droplets) != null ? _f2 : (_e2 = (_d2 = farmState) == null ? void 0 : _d2.user) == null ? void 0 : _e2.droplets) != null ? _g : null;
      if (droplets != null && els.droplets) {
        els.droplets.textContent = String(droplets);
      }
      if (((_h = farmState) == null ? void 0 : _h.user) && els.username) {
        els.username.textContent = farmState.user.name || farmState.user.username || "-";
      }
    }
    function isPositionSelected() {
      return !!config.POSITION_SELECTED && Number.isFinite(config.BASE_X) && Number.isFinite(config.BASE_Y) && Number.isFinite(config.TILE_X) && Number.isFinite(config.TILE_Y);
    }
    function updateButtonStates(running) {
      const needCapture = !isPositionSelected();
      els.start.disabled = !!running || needCapture;
      els.stop.disabled = !running;
      if (els.onceBtn) {
        els.onceBtn.disabled = !!running || needCapture;
      }
      if (running) {
        els.stop.classList.add("danger");
      } else {
        els.stop.classList.remove("danger");
      }
    }
    function flashEffect(ms = 150) {
      panel.style.outline = "2px solid #93c5fd";
      setTimeout(() => panel.style.outline = "", ms);
    }
    function notify(message, type = "info", timeout = 3e3) {
      let c = document.getElementById("wplace-toast-container");
      if (!c) {
        c = document.createElement("div");
        c.id = "wplace-toast-container";
        c.style.cssText = `
        position: fixed;
        top: 16px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 2147483647;
        display: flex;
        flex-direction: column;
        gap: 8px;
        pointer-events: none;
      `;
        document.body.appendChild(c);
      }
      const bg = type === "success" ? "#10b981" : type === "error" ? "#ef4444" : "#3b82f6";
      const el = document.createElement("div");
      el.className = "wplace-toast";
      el.textContent = message;
      el.style.cssText = `
      min-width: 240px;
      max-width: 80vw;
      margin: 0 auto;
      background: ${bg};
      color: white;
      border-radius: 10px;
      box-shadow: 0 8px 24px rgba(0,0,0,0.35);
      padding: 10px 14px;
      font-weight: 600;
      letter-spacing: .2px;
      transform: translateY(-10px) scale(0.98);
      opacity: 0;
      transition: transform .25s cubic-bezier(0.2, 0.8, 0.2, 1), opacity .25s ease;
      pointer-events: auto;
    `;
      c.appendChild(el);
      const raf = (cb) => typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame(cb) : setTimeout(cb, 16);
      raf(() => {
        el.style.transform = "translateY(0) scale(1)";
        el.style.opacity = "1";
      });
      const remove = () => {
        el.style.transform = "translateY(-10px) scale(0.98)";
        el.style.opacity = "0";
        setTimeout(() => el.remove(), 250);
      };
      if (timeout > 0) setTimeout(remove, timeout);
      el.addEventListener("click", remove);
      return { close: remove };
    }
    function saveConfig() {
      try {
        localStorage.setItem("wplace_farm_cfg", JSON.stringify(config));
      } catch {
      }
    }
    function updateConfig() {
      const selected = isPositionSelected();
      if (selected && els.posInfoValue) {
        els.posInfoValue.textContent = `tile(${config.TILE_X},${config.TILE_Y}) base(${config.BASE_X},${config.BASE_Y})`;
        if (els.captureBtn) {
          els.captureBtn.textContent = t("farm.recapture");
        }
      } else {
        if (els.posInfoValue) els.posInfoValue.textContent = "-";
        if (els.captureBtn) els.captureBtn.textContent = t("farm.capture", "Capturar zona");
      }
      updateButtonStates(false);
      if (els.captureBtn) {
        if (!selected) {
          els.captureBtn.classList.add("blink-orange");
        } else {
          els.captureBtn.classList.remove("blink-orange");
        }
      }
    }
    function getElement() {
      return host;
    }
    function destroy() {
      host.remove();
    }
    function updateTexts() {
      var _a2;
      panel.querySelector("#startBtn").textContent = t("farm.start", "Iniciar");
      panel.querySelector("#stopBtn").textContent = t("farm.stop", "Detener");
      panel.querySelector("#capture-btn").textContent = t("farm.capture", "Capturar zona");
      panel.querySelector("#once-btn").textContent = t("farm.once", "Una vez");
      const lb = panel.querySelector("#logsBtn");
      if (lb) lb.textContent = t("farm.logWindow", "Logs");
      if (els.selectedColorLabel) els.selectedColorLabel.textContent = `${t("farm.color.selected", "Color seleccionado")}: ${getColorName((_a2 = config.COLOR_FIXED) != null ? _a2 : 1)}`;
    }
    const api = { setStatus, updateStats, updateButtonStates, flashEffect, getElement, destroy, updateConfig, updateTexts, notify };
    window.__wplaceBot = window.__wplaceBot || {};
    window.__wplaceBot.ui = api;
    return api;
  }

  // src/farm/loop.js
  init_turnstile();
  init_wplace_api();

  // src/farm/coords.js
  init_logger();
  var randInt = (n) => Math.floor(Math.random() * n);
  function generateStraightLine(count, cfg) {
    const coords = [];
    const maxSize = cfg.TILE_SIZE - 1;
    let currentX = Math.max(0, Math.min(maxSize, cfg.BASE_X));
    let currentY = Math.max(0, Math.min(maxSize, cfg.BASE_Y));
    for (let i = 0; i < count; i++) {
      currentX = Math.max(0, Math.min(maxSize, currentX));
      currentY = Math.max(0, Math.min(maxSize, currentY));
      coords.push(currentX, currentY);
      currentX++;
      if (currentX > maxSize) {
        currentX = Math.max(0, Math.min(maxSize, cfg.BASE_X));
        currentY++;
        if (currentY > maxSize) {
          currentY = Math.max(0, Math.min(maxSize, cfg.BASE_Y));
        }
      }
    }
    if (coords.length >= 4) {
      log(`\u{1F3AF} L\xEDnea recta generada: [${coords.slice(0, 8).join(",")}...] total: ${coords.length / 2} p\xEDxeles`);
    }
    return coords;
  }
  function generateMultipleColors(count, cfg) {
    const colors = [];
    for (let i = 0; i < count; i++) {
      colors.push(nextColor(cfg));
    }
    return colors;
  }
  function nextColor(cfg) {
    if (cfg.COLOR_MODE === "fixed") {
      return cfg.COLOR_FIXED;
    } else {
      const span = cfg.COLOR_MAX - cfg.COLOR_MIN + 1;
      return cfg.COLOR_MIN + randInt(span);
    }
  }

  // src/core/timing.js
  var sleep2 = (ms) => new Promise((r) => setTimeout(r, ms));
  async function sleepWithCountdown(ms, onUpdate, state) {
    const startTime = Date.now();
    const endTime = startTime + ms;
    while (Date.now() < endTime && (!state || state.running)) {
      const remaining = endTime - Date.now();
      if (onUpdate) {
        onUpdate(remaining);
      }
      await sleep2(Math.min(1e3, remaining));
    }
  }

  // src/farm/loop.js
  init_logger();
  init_client();
  init_config();
  async function updateCanvasPixel(localX, localY, color) {
    try {
      const canvases = document.querySelectorAll("canvas");
      for (const canvas of canvases) {
        const ctx = canvas.getContext("2d");
        if (ctx) {
          const colorHex = typeof color === "number" ? `#${color.toString(16).padStart(6, "0")}` : color;
          ctx.fillStyle = colorHex;
          ctx.fillRect(localX, localY, 1, 1);
          if (typeof window !== "undefined" && window.Event) {
            canvas.dispatchEvent(new window.Event("pixel-updated"));
          }
        }
      }
    } catch (error) {
      log("Error actualizando canvas:", error);
    }
  }
  async function refreshTile(tileX, tileY) {
    try {
      const tileSelector = `[data-tile="${tileX}-${tileY}"], .tile-${tileX}-${tileY}, [data-tile-x="${tileX}"][data-tile-y="${tileY}"]`;
      const tileElement = document.querySelector(tileSelector);
      if (tileElement) {
        tileElement.classList.add("tile-updating");
        setTimeout(() => {
          tileElement.classList.remove("tile-updating");
          tileElement.classList.add("tile-updated");
          setTimeout(() => tileElement.classList.remove("tile-updated"), 1e3);
        }, 100);
        log(`Tile (${tileX},${tileY}) actualizado visualmente`);
      } else {
        const canvasElements = document.querySelectorAll("canvas");
        canvasElements.forEach((canvas) => {
          const ctx = canvas.getContext("2d");
          if (ctx) {
            const imageData = ctx.getImageData(0, 0, 1, 1);
            ctx.putImageData(imageData, 0, 0);
          }
        });
        log(`Actualizaci\xF3n visual gen\xE9rica realizada para tile (${tileX},${tileY})`);
      }
    } catch (error) {
      log("Error en actualizaci\xF3n visual del tile:", error);
    }
  }
  async function paintOnce(cfg, state, setStatus, flashEffect, getSession2, checkBackendHealth) {
    var _a, _b, _c, _d;
    if (!cfg.POSITION_SELECTED || cfg.BASE_X === null || cfg.BASE_Y === null) {
      setStatus(`\u{1F3AF} Selecciona una zona primero usando 'Seleccionar Zona'`, "error");
      log(`Pintado cancelado: no se ha seleccionado una posici\xF3n base`);
      return false;
    }
    if (!Number.isFinite(cfg.TILE_X) || !Number.isFinite(cfg.TILE_Y)) {
      setStatus(`\u{1F6AB} Coordenadas del tile inv\xE1lidas (${cfg.TILE_X},${cfg.TILE_Y}). Calibra primero`, "error");
      log(`Pintado cancelado: coordenadas del tile inv\xE1lidas`);
      return false;
    }
    const availableCharges = Math.floor(state.charges.count);
    if (availableCharges < 1) {
      setStatus(`\u{1F50B} Sin cargas disponibles. Esperando...`, "error");
      return false;
    }
    const optimalPixelCount = Math.min(availableCharges, cfg.PIXELS_PER_BATCH, 50);
    const pixelCount = Math.max(1, optimalPixelCount);
    if (pixelCount < cfg.PIXELS_PER_BATCH) {
      log(`Ajustando p\xEDxeles por cargas completas disponibles: ${pixelCount}/${cfg.PIXELS_PER_BATCH} (${availableCharges} cargas completas de ${state.charges.count.toFixed(2)} totales)`);
    }
    const coords = generateStraightLine(pixelCount, cfg);
    const colors = generateMultipleColors(pixelCount, cfg);
    const firstLocalX = coords[0];
    const firstLocalY = coords[1];
    setStatus(`\u{1F33E} Pintando ${pixelCount} p\xEDxeles desde base (${cfg.BASE_X},${cfg.BASE_Y}) tile(${cfg.TILE_X},${cfg.TILE_Y})...`, "status");
    let t2 = getCachedToken();
    if (!t2) {
      t2 = await ensureToken();
    }
    const r = await postPixelBatchImage(cfg.TILE_X, cfg.TILE_Y, coords, colors, t2);
    state.last = {
      x: firstLocalX,
      y: firstLocalY,
      color: colors[0],
      pixelCount,
      availableCharges,
      status: r.status,
      json: r.json
    };
    if (r.success && r.painted > 0) {
      const actualPainted = r.painted || pixelCount;
      state.painted += actualPainted;
      state.retryCount = 0;
      for (let i = 0; i < coords.length; i += 2) {
        const localX = coords[i];
        const localY = coords[i + 1];
        const color = colors[Math.floor(i / 2)];
        await updateCanvasPixel(localX, localY, color);
      }
      await refreshTile(cfg.TILE_X, cfg.TILE_Y);
      await getSession2();
      setStatus(`\u2705 Lote pintado: ${actualPainted}/${pixelCount} p\xEDxeles en zona (${cfg.BASE_X},${cfg.BASE_Y})`, "success");
      try {
        pixelsPainted(actualPainted, { botVariant: "auto-farm", metadata: { tileX: cfg.TILE_X, tileY: cfg.TILE_Y } });
      } catch {
      }
      try {
        const mcfg = getMetricsConfig();
        const minGap = Math.max(6e4, mcfg.PING_INTERVAL_MS || 12e4);
        const now = Date.now();
        const last = (window.__wplaceMetrics || {}).farmLastPing || 0;
        if (now - last >= minGap) {
          sessionPing({ botVariant: "auto-farm", metadata: { reason: "after-paint" } });
          window.__wplaceMetrics = window.__wplaceMetrics || {};
          window.__wplaceMetrics.farmLastPing = now;
        }
      } catch {
      }
      flashEffect();
      if (typeof window !== "undefined" && window.CustomEvent) {
        const event = new window.CustomEvent("wplace-batch-painted", {
          detail: {
            firstX: firstLocalX,
            firstY: firstLocalY,
            pixelCount: actualPainted,
            totalPixels: pixelCount,
            colors,
            coords,
            tileX: cfg.TILE_X,
            tileY: cfg.TILE_Y,
            baseX: cfg.BASE_X,
            baseY: cfg.BASE_Y,
            radius: cfg.FARM_RADIUS,
            timestamp: Date.now()
          }
        });
        window.dispatchEvent(event);
      }
      return true;
    }
    if (r.status === 403) {
      setStatus("\u26A0\uFE0F 403 (token expirado o Cloudflare). Reintentar\xE1...", "error");
    } else if (r.status === 401) {
      setStatus("\u{1F512} 401 (no autorizado). Verifica tu sesi\xF3n.", "error");
    } else if (r.status === 429) {
      setStatus("\u23F3 429 (l\xEDmite de tasa). Esperando...", "error");
    } else if (r.status === 408) {
      setStatus("\u23F0 Timeout del servidor. Coordenadas problem\xE1ticas o servidor sobrecargado", "error");
    } else if (r.status === 0) {
      setStatus("\u{1F310} Error de red. Verificando conectividad...", "error");
    } else if (r.status === 500) {
      setStatus("\u{1F525} 500 (error interno del servidor). Reintentar\xE1...", "error");
    } else if (r.status === 502 || r.status === 503 || r.status === 504) {
      setStatus(`\u{1F6AB} ${r.status} (servidor no disponible). Reintentar\xE1...`, "error");
    } else if (r.status === 404) {
      setStatus(`\u{1F5FA}\uFE0F 404 (tile no encontrado). Verificando coordenadas tile(${cfg.TILE_X},${cfg.TILE_Y})`, "error");
    } else {
      try {
        const health = await checkBackendHealth();
        const healthStatus = (health == null ? void 0 : health.up) ? "\u{1F7E2} Online" : "\u{1F534} Offline";
        setStatus(`\u274C Error ${r.status}: ${((_a = r.json) == null ? void 0 : _a.message) || ((_b = r.json) == null ? void 0 : _b.error) || "Fallo al pintar"} (Backend: ${healthStatus})`, "error");
      } catch {
        setStatus(`\u274C Error ${r.status}: ${((_c = r.json) == null ? void 0 : _c.message) || ((_d = r.json) == null ? void 0 : _d.error) || "Fallo al pintar"} (Health check fall\xF3)`, "error");
      }
    }
    log(`Fallo en pintado: status=${r.status}, error=${r.error}, coords=`, coords, "colors=", colors);
    return false;
  }
  async function paintWithRetry(cfg, state, setStatus, flashEffect, getSession2, checkBackendHealth) {
    const maxAttempts = 5;
    const baseDelay = 3e3;
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const success = await paintOnce(cfg, state, setStatus, flashEffect, getSession2, checkBackendHealth);
        if (success) {
          state.retryCount = 0;
          return true;
        }
        state.retryCount = attempt;
        if (attempt < maxAttempts) {
          const delay = baseDelay * Math.pow(2, attempt - 1);
          setStatus(`\u{1F504} Reintento ${attempt}/${maxAttempts} en ${delay / 1e3}s...`, "error");
          await sleep2(delay);
        }
      } catch (error) {
        log(`Error en intento ${attempt}:`, error);
        state.retryCount = attempt;
        if (attempt < maxAttempts) {
          const delay = baseDelay * Math.pow(2, attempt - 1);
          setStatus(`\u{1F4A5} Error en intento ${attempt}/${maxAttempts}, reintentando en ${delay / 1e3}s...`, "error");
          await sleep2(delay);
        }
      }
    }
    state.retryCount = maxAttempts;
    setStatus(`\u274C Fall\xF3 despu\xE9s de ${maxAttempts} intentos. Se requiere intervenci\xF3n manual.`, "error");
    return false;
  }
  async function loop(cfg, state, setStatus, flashEffect, getSession2, checkBackendHealth, updateStats) {
    log("\u{1F680} Loop iniciado");
    state.running = true;
    while (state.running) {
      try {
        await updateStats();
        try {
          const mcfg = getMetricsConfig();
          const minGap = Math.max(6e4, mcfg.PING_INTERVAL_MS || 12e4);
          const now = Date.now();
          const last = (window.__wplaceMetrics || {}).farmLastPing || 0;
          if (now - last >= minGap) {
            sessionPing({ botVariant: "auto-farm", metadata: { reason: "loop" } });
            window.__wplaceMetrics = window.__wplaceMetrics || {};
            window.__wplaceMetrics.farmLastPing = now;
          }
        } catch {
        }
        if (state.charges.count < cfg.MIN_CHARGES) {
          const waitTime = Math.max(0, (cfg.MIN_CHARGES - state.charges.count) * cfg.CHARGE_REGEN_MS);
          setStatus(`\u23F3 Esperando cargas: ${state.charges.count.toFixed(1)}/${cfg.MIN_CHARGES} (${Math.round(waitTime / 1e3)}s)`, "status");
          try {
            const mcfg = getMetricsConfig();
            const minGap = Math.max(6e4, mcfg.PING_INTERVAL_MS || 12e4);
            const now = Date.now();
            const last = (window.__wplaceMetrics || {}).farmLastPing || 0;
            if (now - last >= minGap) {
              sessionPing({ botVariant: "auto-farm", metadata: { reason: "waiting-charges" } });
              window.__wplaceMetrics = window.__wplaceMetrics || {};
              window.__wplaceMetrics.farmLastPing = now;
            }
          } catch {
          }
          await sleepWithCountdown(Math.min(waitTime, cfg.DELAY_MS), (remaining) => {
            setStatus(`\u23F3 Esperando cargas: ${state.charges.count.toFixed(1)}/${cfg.MIN_CHARGES} (~${Math.round(remaining / 1e3)}s)`, "status");
          }, state);
          continue;
        }
        const success = await paintWithRetry(cfg, state, setStatus, flashEffect, getSession2, checkBackendHealth);
        if (!success) {
          setStatus("\u{1F634} Esperando antes del siguiente intento...", "error");
          await sleepWithCountdown(cfg.DELAY_MS * 2, (remaining) => {
            setStatus(`\u{1F634} Cooldown extendido: ${Math.round(remaining / 1e3)}s`, "error");
          });
          continue;
        }
        if (state.running) {
          await sleepWithCountdown(cfg.DELAY_MS, (remaining) => {
            setStatus(`\u{1F4A4} Esperando ${Math.round(remaining / 1e3)}s hasta siguiente pintada...`, "status");
          });
        }
      } catch (error) {
        log("Error cr\xEDtico en loop:", error);
        setStatus(`\u{1F4A5} Error cr\xEDtico: ${error.message}`, "error");
        if (state.running) {
          await sleepWithCountdown(cfg.DELAY_MS * 3, (remaining) => {
            setStatus(`\u{1F6A8} Recuper\xE1ndose de error cr\xEDtico: ${Math.round(remaining / 1e3)}s`, "error");
          });
        }
      }
    }
    log("\u23F9\uFE0F Loop detenido");
    setStatus("\u23F9\uFE0F Bot detenido", "status");
  }

  // src/farm/index.js
  init_wplace_api();
  init_locales();

  // src/core/storage.js
  function loadFarmCfg(defaults) {
    return { ...defaults };
  }

  // src/farm/index.js
  init_client();
  init_config();
  async function runFarm() {
    log("\u{1F680} Iniciando WPlace Auto-Farm (versi\xF3n con selecci\xF3n de zona)");
    initializeLanguage();
    window.__wplaceBot = { ...window.__wplaceBot, farmRunning: true };
    let currentUserInfo = null;
    try {
      let updateStats = function() {
        if (currentUserInfo) {
          ui.updateStats(
            farmState.painted,
            farmState.charges.count,
            farmState.retryCount,
            config.TILE_X || 0,
            config.TILE_Y || 0,
            farmState.health
          );
        }
      };
      try {
        const mcfg = getMetricsConfig({ VARIANT: "auto-farm" });
        if (mcfg.ENABLED) {
          if (!window.__wplaceMetrics) window.__wplaceMetrics = {};
          window.__wplaceMetrics.farmSessionActive = true;
          sessionStart({ botVariant: "auto-farm" });
          setTimeout(() => {
            try {
              sessionPing({ botVariant: "auto-farm", metadata: { reason: "init" } });
            } catch {
            }
          }, 3e3);
          const pingEvery = Math.max(6e4, mcfg.PING_INTERVAL_MS || 3e5);
          window.__wplaceMetrics.farmPingInterval = window.setInterval(() => {
            try {
              sessionPing({ botVariant: "auto-farm", metadata: { reason: "interval" } });
            } catch {
            }
          }, pingEvery);
        }
      } catch {
      }
      const savedConfig = loadFarmCfg(FARM_DEFAULTS);
      const config = { ...FARM_DEFAULTS, ...savedConfig };
      if (!config.SITEKEY) {
        const siteKeyElement = document.querySelector("*[data-sitekey]");
        if (siteKeyElement) {
          config.SITEKEY = siteKeyElement.getAttribute("data-sitekey");
          log(`\u{1F4DD} Sitekey encontrada autom\xE1ticamente: ${config.SITEKEY.substring(0, 20)}...`);
        } else {
          log("\u26A0\uFE0F No se pudo encontrar la sitekey autom\xE1ticamente");
        }
      }
      const sessionInfo = await getSession();
      if (sessionInfo.success && sessionInfo.data.user) {
        currentUserInfo = {
          username: sessionInfo.data.user.name || "An\xF3nimo",
          charges: sessionInfo.data.charges,
          maxCharges: sessionInfo.data.maxCharges,
          pixels: sessionInfo.data.user.pixelsPainted || 0
        };
        farmState.user = currentUserInfo;
        farmState.charges.count = sessionInfo.data.charges;
        farmState.charges.max = sessionInfo.data.maxCharges;
        log(`\u{1F464} Usuario conectado: ${currentUserInfo.username} - Cargas: ${currentUserInfo.charges}/${currentUserInfo.maxCharges} - P\xEDxeles: ${currentUserInfo.pixels}`);
      } else {
        log("\u26A0\uFE0F No se pudo obtener informaci\xF3n del usuario");
      }
      const ui = createFarmUI(
        config,
        // onStart
        async () => {
          var _a;
          if (farmState.running) {
            ui.setStatus(t("farm.alreadyRunning"), "warning");
            return false;
          }
          if (!config.POSITION_SELECTED || config.BASE_X === null || config.BASE_Y === null) {
            ui.setStatus(t("farm.autoSelectPosition"), "info");
            const selectButton = ui.getElement().shadowRoot.getElementById("select-position-btn");
            if (selectButton) {
              selectButton.click();
            }
            return false;
          }
          if ((_a = window.__wplaceBot) == null ? void 0 : _a.imageRunning) {
            ui.setStatus(t("farm.imageRunningWarning"), "warning");
            return false;
          }
          farmState.running = true;
          ui.setStatus(t("farm.startingBot"), "info");
          ui.updateButtonStates(true);
          try {
            sessionPing({ botVariant: "auto-farm", metadata: { reason: "start" } });
          } catch {
          }
          await loop(
            config,
            farmState,
            ui.setStatus,
            ui.flashEffect,
            updateSession,
            checkBackendHealth,
            updateStats
          );
          return true;
        },
        // onStop
        async () => {
          farmState.running = false;
          ui.setStatus(t("farm.stoppingBot"), "info");
          ui.updateButtonStates(false);
          setTimeout(() => {
            ui.setStatus(t("farm.stopped"), "status");
          }, 500);
          return true;
        }
      );
      async function updateSession() {
        try {
          const sessionInfo2 = await getSession();
          if (sessionInfo2.success && sessionInfo2.data.user) {
            currentUserInfo = {
              username: sessionInfo2.data.user.name || "An\xF3nimo",
              charges: sessionInfo2.data.charges,
              maxCharges: sessionInfo2.data.maxCharges,
              pixels: sessionInfo2.data.user.pixelsPainted || 0
            };
            farmState.user = currentUserInfo;
            farmState.charges.count = sessionInfo2.data.charges;
            farmState.charges.max = sessionInfo2.data.maxCharges;
            farmState.charges.cooldownMs = sessionInfo2.data.chargeRegen || 3e4;
          }
        } catch (error) {
          log("Error actualizando sesi\xF3n:", error);
        }
      }
      async function checkBackendHealth() {
        try {
          const health = await checkHealth();
          farmState.health = health;
          return health;
        } catch (error) {
          log("Error verificando salud del backend:", error);
          return { up: false, error: error.message };
        }
      }
      window.WPAUI = {
        ...window.WPAUI,
        once: async () => {
          if (farmState.running) {
            ui.setStatus("\u274C Det\xE9n el bot primero antes de pintar manualmente", "error");
            return;
          }
          const success = await paintOnce(
            config,
            farmState,
            ui.setStatus,
            ui.flashEffect,
            updateSession,
            checkBackendHealth
          );
          if (success) {
            updateStats();
          }
        }
      };
      updateStats();
      const handleLanguageChange = (event) => {
        const { language } = event.detail;
        log(`\u{1F30D} Farm: Detectado cambio de idioma: ${language}`);
        ui.updateTexts();
      };
      window.addEventListener("launcherLanguageChanged", handleLanguageChange);
      window.addEventListener("languageChanged", handleLanguageChange);
      window.addEventListener("beforeunload", () => {
        var _a, _b, _c, _d;
        farmState.running = false;
        ui.destroy();
        window.removeEventListener("launcherLanguageChanged", handleLanguageChange);
        window.removeEventListener("languageChanged", handleLanguageChange);
        if (window.__wplaceBot) {
          window.__wplaceBot.farmRunning = false;
        }
        try {
          const mcfg = getMetricsConfig();
          if (mcfg.ENABLED && ((_a = window.__wplaceMetrics) == null ? void 0 : _a.farmSessionActive)) {
            sessionEnd({ botVariant: "auto-farm" });
            window.__wplaceMetrics.farmSessionActive = false;
          }
          if ((_b = window.__wplaceMetrics) == null ? void 0 : _b.farmPingInterval) {
            window.clearInterval(window.__wplaceMetrics.farmPingInterval);
            window.__wplaceMetrics.farmPingInterval = null;
          }
          if ((_c = window.__wplaceMetrics) == null ? void 0 : _c.farmVisibilityHandler) {
            document.removeEventListener("visibilitychange", window.__wplaceMetrics.farmVisibilityHandler);
            delete window.__wplaceMetrics.farmVisibilityHandler;
          }
          if ((_d = window.__wplaceMetrics) == null ? void 0 : _d.farmFocusHandler) {
            window.removeEventListener("focus", window.__wplaceMetrics.farmFocusHandler);
            delete window.__wplaceMetrics.farmFocusHandler;
          }
        } catch {
        }
      });
      checkBackendHealth().then((health) => {
        ui.updateStats(
          farmState.painted,
          farmState.charges.count,
          farmState.retryCount,
          config.TILE_X || 0,
          config.TILE_Y || 0,
          health
        );
      });
      log("\u2705 Auto-Farm inicializado correctamente");
      try {
        const mcfg = getMetricsConfig();
        if (mcfg.ENABLED) {
          const visibilityHandler = () => {
            if (!document.hidden) {
              try {
                sessionPing({ botVariant: "auto-farm", metadata: { reason: "visibility" } });
              } catch {
              }
            }
          };
          const focusHandler = () => {
            try {
              sessionPing({ botVariant: "auto-farm", metadata: { reason: "focus" } });
            } catch {
            }
          };
          document.addEventListener("visibilitychange", visibilityHandler);
          window.addEventListener("focus", focusHandler);
          window.__wplaceMetrics = window.__wplaceMetrics || {};
          window.__wplaceMetrics.farmVisibilityHandler = visibilityHandler;
          window.__wplaceMetrics.farmFocusHandler = focusHandler;
        }
      } catch {
      }
    } catch (error) {
      log("\u274C Error inicializando Auto-Farm:", error);
      if (window.__wplaceBot) {
        window.__wplaceBot.farmRunning = false;
      }
      throw error;
    }
  }

  // src/image/index.js
  init_logger();
  init_config2();

  // src/image/blue-marble-processor.js
  init_logger();

  // src/image/color-utils.js
  init_logger();
  var ColorUtils = class _ColorUtils {
    /**
     * Convierte RGB a espacio de color LAB
     * @param {number} r - Componente rojo (0-255)
     * @param {number} g - Componente verde (0-255)
     * @param {number} b - Componente azul (0-255)
     * @returns {Array} [L, a, b] valores en espacio LAB
     */
    static _rgbToLab(r, g, b) {
      const srgbToLinear = (v) => {
        v /= 255;
        return v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
      };
      const rl = srgbToLinear(r);
      const gl = srgbToLinear(g);
      const bl = srgbToLinear(b);
      let X = rl * 0.4124 + gl * 0.3576 + bl * 0.1805;
      let Y = rl * 0.2126 + gl * 0.7152 + bl * 0.0722;
      let Z = rl * 0.0193 + gl * 0.1192 + bl * 0.9505;
      X /= 0.95047;
      Y /= 1;
      Z /= 1.08883;
      const f = (t2) => t2 > 8856e-6 ? Math.cbrt(t2) : 7.787 * t2 + 16 / 116;
      const fX = f(X), fY = f(Y), fZ = f(Z);
      const L = 116 * fY - 16;
      const a = 500 * (fX - fY);
      const b2 = 200 * (fY - fZ);
      return [L, a, b2];
    }
    /**
     * Obtiene valores LAB con caché para mejor rendimiento
     * @param {number} r - Componente rojo (0-255)
     * @param {number} g - Componente verde (0-255)
     * @param {number} b - Componente azul (0-255)
     * @returns {Array} [L, a, b] valores en espacio LAB
     */
    static _lab(r, g, b) {
      if (!_ColorUtils._labCache) {
        _ColorUtils._labCache = /* @__PURE__ */ new Map();
      }
      const key = r << 16 | g << 8 | b;
      let v = _ColorUtils._labCache.get(key);
      if (!v) {
        v = _ColorUtils._rgbToLab(r, g, b);
        _ColorUtils._labCache.set(key, v);
      }
      return v;
    }
    /**
     * Encuentra el color más cercano en la paleta usando algoritmo LAB avanzado
     * @param {number} r - Componente rojo del color objetivo (0-255)
     * @param {number} g - Componente verde del color objetivo (0-255)
     * @param {number} b - Componente azul del color objetivo (0-255)
     * @param {Array} palette - Array de colores disponibles
     * @param {Object} options - Opciones adicionales
     * @returns {Object|null} Color más cercano de la paleta
     */
    static findClosestPaletteColor(r, g, b, palette, options = {}) {
      var _a, _b, _c, _d, _e, _f;
      if (!palette || palette.length === 0) return null;
      const {
        useLegacyRgb = false,
        chromaPenalty = 0,
        whiteThreshold = 240,
        maxDistance = Infinity
      } = options;
      if (r >= whiteThreshold && g >= whiteThreshold && b >= whiteThreshold) {
        const whiteColor = palette.find((color) => {
          var _a2, _b2, _c2;
          const cr = color.r || ((_a2 = color.rgb) == null ? void 0 : _a2.r) || 0;
          const cg = color.g || ((_b2 = color.rgb) == null ? void 0 : _b2.g) || 0;
          const cb = color.b || ((_c2 = color.rgb) == null ? void 0 : _c2.b) || 0;
          return cr >= whiteThreshold && cg >= whiteThreshold && cb >= whiteThreshold;
        });
        if (whiteColor) return whiteColor;
      }
      let closestColor = null;
      let minDistance = Infinity;
      if (useLegacyRgb) {
        for (const color of palette) {
          const cr = color.r || ((_a = color.rgb) == null ? void 0 : _a.r) || 0;
          const cg = color.g || ((_b = color.rgb) == null ? void 0 : _b.g) || 0;
          const cb = color.b || ((_c = color.rgb) == null ? void 0 : _c.b) || 0;
          const distance = Math.sqrt(
            Math.pow(r - cr, 2) + Math.pow(g - cg, 2) + Math.pow(b - cb, 2)
          );
          if (distance < minDistance) {
            minDistance = distance;
            closestColor = color;
          }
        }
      } else {
        const targetLab = _ColorUtils._lab(r, g, b);
        for (const color of palette) {
          const cr = color.r || ((_d = color.rgb) == null ? void 0 : _d.r) || 0;
          const cg = color.g || ((_e = color.rgb) == null ? void 0 : _e.g) || 0;
          const cb = color.b || ((_f = color.rgb) == null ? void 0 : _f.b) || 0;
          const colorLab = _ColorUtils._lab(cr, cg, cb);
          let distance = Math.sqrt(
            Math.pow(targetLab[0] - colorLab[0], 2) + Math.pow(targetLab[1] - colorLab[1], 2) + Math.pow(targetLab[2] - colorLab[2], 2)
          );
          if (chromaPenalty > 0) {
            const targetChroma = Math.sqrt(targetLab[1] * targetLab[1] + targetLab[2] * targetLab[2]);
            const colorChroma = Math.sqrt(colorLab[1] * colorLab[1] + colorLab[2] * colorLab[2]);
            const chromaDiff = Math.abs(targetChroma - colorChroma);
            distance += chromaDiff * chromaPenalty;
          }
          if (distance < minDistance) {
            minDistance = distance;
            closestColor = color;
          }
        }
      }
      if (minDistance > maxDistance) {
        return null;
      }
      return closestColor;
    }
    /**
     * Función de compatibilidad con la interfaz existente
     * @param {Object} rgb - Objeto con propiedades r, g, b
     * @param {Array} palette - Array de colores disponibles
     * @param {Object} options - Opciones adicionales
     * @returns {Object|null} Color más cercano de la paleta
     */
    static findClosestColor(rgb, palette, options = {}) {
      return _ColorUtils.findClosestPaletteColor(rgb.r, rgb.g, rgb.b, palette, options);
    }
    /**
     * Limpia la caché LAB (útil para liberar memoria)
     */
    static clearCache() {
      if (_ColorUtils._labCache) {
        _ColorUtils._labCache.clear();
        log("Cach\xE9 de colores LAB limpiada");
      }
    }
    /**
     * Obtiene estadísticas de la caché
     * @returns {Object} Estadísticas de uso de caché
     */
    static getCacheStats() {
      if (!_ColorUtils._labCache) {
        return { size: 0, memoryEstimate: 0 };
      }
      return {
        size: _ColorUtils._labCache.size,
        memoryEstimate: _ColorUtils._labCache.size * 32
        // Estimación aproximada en bytes
      };
    }
  };
  var findClosestColor = ColorUtils.findClosestColor.bind(ColorUtils);
  var findClosestPaletteColor = ColorUtils.findClosestPaletteColor.bind(ColorUtils);

  // src/image/processor.js
  init_logger();
  function detectAvailableColors() {
    log("\u{1F3A8} Detectando colores disponibles...");
    const colorElements = document.querySelectorAll('[id^="color-"]');
    const colors = [];
    for (const element of colorElements) {
      if (element.querySelector("svg")) {
        continue;
      }
      const idStr = element.id.replace("color-", "");
      const id = parseInt(idStr);
      if (id === 0) {
        continue;
      }
      const backgroundStyle = element.style.backgroundColor;
      if (backgroundStyle) {
        const rgbMatch = backgroundStyle.match(/\d+/g);
        if (rgbMatch && rgbMatch.length >= 3) {
          const rgb = {
            r: parseInt(rgbMatch[0]),
            g: parseInt(rgbMatch[1]),
            b: parseInt(rgbMatch[2])
          };
          colors.push({
            id,
            element,
            ...rgb
          });
          log(`Color detectado: id=${id}, rgb(${rgb.r},${rgb.g},${rgb.b})`);
        }
      }
    }
    log(`\u2705 ${colors.length} colores disponibles detectados`);
    return colors;
  }

  // src/image/blue-marble-processor.js
  var BlueMarblelImageProcessor = class {
    constructor(imageSrc) {
      this.imageSrc = imageSrc;
      this.img = new window.Image();
      this.originalName = null;
      this.tileSize = 1e3;
      this.drawMult = 3;
      this.shreadSize = 3;
      this.bitmap = null;
      this.imageWidth = 0;
      this.imageHeight = 0;
      this.totalPixels = 0;
      this.requiredPixelCount = 0;
      this.defacePixelCount = 0;
      this.colorPalette = {};
      this.allowedColorsSet = /* @__PURE__ */ new Set();
      this.rgbToMeta = /* @__PURE__ */ new Map();
      this.coords = [0, 0, 0, 0];
      this.templateTiles = {};
      this.templateTilesBuffers = {};
      this.tilePrefixes = /* @__PURE__ */ new Set();
      this.selectedColors = null;
      this.allSiteColors = [];
      this.initialAllowedColorsSet = null;
      this.allowedColors = [];
      this.labTolerance = 100;
      this.originalBitmap = null;
    }
    async load() {
      return new Promise((resolve, reject) => {
        this.img.onload = async () => {
          try {
            this.bitmap = await createImageBitmap(this.img);
            this.originalBitmap = this.bitmap;
            this.imageWidth = this.bitmap.width;
            this.imageHeight = this.bitmap.height;
            this.totalPixels = this.imageWidth * this.imageHeight;
            log(`[BLUE MARBLE] Imagen cargada: ${this.imageWidth}\xD7${this.imageHeight}`);
            resolve();
          } catch (error) {
            reject(error);
          }
        };
        this.img.onerror = reject;
        this.img.src = this.imageSrc;
      });
    }
    setLabTolerance(distance) {
      this.labTolerance = Number.isFinite(distance) ? Math.max(0, distance) : Infinity;
    }
    generateOriginalPreview(maxWidth = 200, maxHeight = 200) {
      if (!this.originalBitmap) return this.generatePreview(maxWidth, maxHeight);
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      const { width: origWidth, height: origHeight } = this.originalBitmap;
      const aspectRatio = origWidth / origHeight;
      let newWidth, newHeight;
      if (maxWidth / maxHeight > aspectRatio) {
        newHeight = maxHeight;
        newWidth = maxHeight * aspectRatio;
      } else {
        newWidth = maxWidth;
        newHeight = maxWidth / aspectRatio;
      }
      canvas.width = newWidth;
      canvas.height = newHeight;
      ctx.imageSmoothingEnabled = false;
      ctx.drawImage(this.originalBitmap, 0, 0, newWidth, newHeight);
      return canvas.toDataURL();
    }
    /**
     * Inicializa la paleta de colores desde WPlace (como Blue Marble)
     */
    initializeColorPalette() {
      log("[BLUE MARBLE] Inicializando paleta de colores...");
      const availableColors = detectAvailableColors();
      const filteredColors = availableColors.filter((c) => c.id !== void 0 && typeof c.r === "number" && typeof c.g === "number" && typeof c.b === "number");
      this.allowedColorsSet = new Set(
        filteredColors.map((c) => `${c.r},${c.g},${c.b}`)
      );
      const defaceKey = "222,250,206";
      this.allowedColorsSet.add(defaceKey);
      this.rgbToMeta = new Map(
        filteredColors.map((c) => [
          `${c.r},${c.g},${c.b}`,
          {
            id: c.id,
            premium: !!c.premium,
            name: c.name || `Color ${c.id}`
          }
        ])
      );
      this.rgbToMeta.set(defaceKey, {
        id: 0,
        premium: false,
        name: "Transparent"
      });
      this.allSiteColors = filteredColors.map((c) => ({ r: c.r, g: c.g, b: c.b, id: c.id, name: c.name, premium: !!c.premium }));
      this.initialAllowedColorsSet = new Set(this.allowedColorsSet);
      this.allowedColors = [...this.allSiteColors];
      log(`[BLUE MARBLE] Paleta inicializada: ${this.allowedColorsSet.size} colores permitidos`);
      return Array.from(availableColors);
    }
    /**
     * Detecta colores disponibles del sitio (versión mejorada de Blue Marble)
     */
    detectSiteColors() {
      const colorElements = document.querySelectorAll('[id^="color-"]');
      const colors = [];
      for (const element of colorElements) {
        const idStr = element.id.replace("color-", "");
        const id = parseInt(idStr);
        if (element.querySelector("svg")) {
          continue;
        }
        if (id === 0) {
          continue;
        }
        const backgroundStyle = element.style.backgroundColor;
        if (backgroundStyle) {
          const rgbMatch = backgroundStyle.match(/\d+/g);
          if (rgbMatch && rgbMatch.length >= 3) {
            const rgb = [
              parseInt(rgbMatch[0]),
              parseInt(rgbMatch[1]),
              parseInt(rgbMatch[2])
            ];
            const colorInfo = {
              id,
              element,
              rgb,
              name: element.title || element.getAttribute("aria-label") || `Color ${id}`,
              premium: element.classList.contains("premium") || element.querySelector(".premium")
            };
            colors.push(colorInfo);
          }
        }
      }
      log(`[BLUE MARBLE] ${colors.length} colores detectados del sitio`);
      return colors;
    }
    /**
     * Establece las coordenadas de posición (como Blue Marble)
     */
    setCoords(tileX, tileY, pixelX, pixelY) {
      this.coords = [tileX, tileY, pixelX, pixelY];
    }
    /**
     * Analiza píxeles de la imagen y cuenta requeridos vs #deface (como Blue Marble)
     */
    async analyzePixels() {
      if (!this.bitmap) {
        throw new Error("Imagen no cargada. Llama a load() primero.");
      }
      try {
        const inspectCanvas = new OffscreenCanvas(this.imageWidth, this.imageHeight);
        const inspectCtx = inspectCanvas.getContext("2d", { willReadFrequently: true });
        inspectCtx.imageSmoothingEnabled = false;
        inspectCtx.clearRect(0, 0, this.imageWidth, this.imageHeight);
        inspectCtx.drawImage(this.bitmap, 0, 0);
        const inspectData = inspectCtx.getImageData(0, 0, this.imageWidth, this.imageHeight).data;
        let required = 0;
        let deface = 0;
        const paletteMap = /* @__PURE__ */ new Map();
        for (let y = 0; y < this.imageHeight; y++) {
          for (let x = 0; x < this.imageWidth; x++) {
            const idx = (y * this.imageWidth + x) * 4;
            const r = inspectData[idx];
            const g = inspectData[idx + 1];
            const b = inspectData[idx + 2];
            const a = inspectData[idx + 3];
            if (a === 0) continue;
            const key = `${r},${g},${b}`;
            if (r === 222 && g === 250 && b === 206) {
              deface++;
            }
            let matchedKey = key;
            let isValidPixel = this.allowedColorsSet.has(key);
            if (!isValidPixel && this.allowedColors && this.allowedColors.length > 0) {
              const closestColor = ColorUtils.findClosestPaletteColor(r, g, b, this.allowedColors, {
                useLegacyRgb: false,
                // Usar algoritmo LAB avanzado
                whiteThreshold: 240,
                maxDistance: this.labTolerance
              });
              if (closestColor) {
                matchedKey = `${closestColor.r},${closestColor.g},${closestColor.b}`;
                isValidPixel = true;
              }
            }
            if (!isValidPixel) continue;
            required++;
            paletteMap.set(matchedKey, (paletteMap.get(matchedKey) || 0) + 1);
          }
        }
        this.requiredPixelCount = required;
        this.defacePixelCount = deface;
        const paletteObj = {};
        for (const [key, count] of paletteMap.entries()) {
          paletteObj[key] = { count, enabled: true };
        }
        this.colorPalette = paletteObj;
        log(`[BLUE MARBLE] An\xE1lisis: ${required.toLocaleString()} p\xEDxeles, ${paletteMap.size} colores`);
        return {
          totalPixels: this.totalPixels,
          requiredPixels: required,
          defacePixels: deface,
          uniqueColors: paletteMap.size,
          colorPalette: paletteObj
        };
      } catch {
        this.requiredPixelCount = Math.max(0, this.totalPixels);
        this.defacePixelCount = 0;
        return {
          totalPixels: this.totalPixels,
          requiredPixels: this.totalPixels,
          defacePixels: 0,
          uniqueColors: 0,
          colorPalette: {}
        };
      }
    }
    /**
     * Crea tiles de template (proceso principal de Blue Marble)
     */
    async createTemplateTiles() {
      if (!this.bitmap) {
        throw new Error("Imagen no cargada. Llama a load() primero.");
      }
      const templateTiles = {};
      const templateTilesBuffers = {};
      const canvas = new OffscreenCanvas(this.tileSize, this.tileSize);
      const context = canvas.getContext("2d", { willReadFrequently: true });
      for (let pixelY = this.coords[3]; pixelY < this.imageHeight + this.coords[3]; ) {
        const drawSizeY = Math.min(
          this.tileSize - pixelY % this.tileSize,
          this.imageHeight - (pixelY - this.coords[3])
        );
        for (let pixelX = this.coords[2]; pixelX < this.imageWidth + this.coords[2]; ) {
          const drawSizeX = Math.min(
            this.tileSize - pixelX % this.tileSize,
            this.imageWidth - (pixelX - this.coords[2])
          );
          const canvasWidth = drawSizeX * this.shreadSize;
          const canvasHeight = drawSizeY * this.shreadSize;
          canvas.width = canvasWidth;
          canvas.height = canvasHeight;
          context.imageSmoothingEnabled = false;
          context.clearRect(0, 0, canvasWidth, canvasHeight);
          context.drawImage(
            this.bitmap,
            // Bitmap de imagen a dibujar
            pixelX - this.coords[2],
            // Coordenada X desde donde dibujar
            pixelY - this.coords[3],
            // Coordenada Y desde donde dibujar
            drawSizeX,
            // Ancho X a dibujar desde
            drawSizeY,
            // Alto Y a dibujar desde
            0,
            // Coordenada X donde dibujar
            0,
            // Coordenada Y donde dibujar
            drawSizeX * this.shreadSize,
            // Ancho X donde dibujar
            drawSizeY * this.shreadSize
            // Alto Y donde dibujar
          );
          const imageData = context.getImageData(0, 0, canvasWidth, canvasHeight);
          for (let y = 0; y < canvasHeight; y++) {
            for (let x = 0; x < canvasWidth; x++) {
              const pixelIndex = (y * canvasWidth + x) * 4;
              if (imageData.data[pixelIndex] === 222 && imageData.data[pixelIndex + 1] === 250 && imageData.data[pixelIndex + 2] === 206) {
                if ((x + y) % 2 === 0) {
                  imageData.data[pixelIndex] = 0;
                  imageData.data[pixelIndex + 1] = 0;
                  imageData.data[pixelIndex + 2] = 0;
                } else {
                  imageData.data[pixelIndex] = 255;
                  imageData.data[pixelIndex + 1] = 255;
                  imageData.data[pixelIndex + 2] = 255;
                }
                imageData.data[pixelIndex + 3] = 32;
              } else if (x % this.shreadSize !== 1 || y % this.shreadSize !== 1) {
                imageData.data[pixelIndex + 3] = 0;
              } else {
                const r = imageData.data[pixelIndex];
                const g = imageData.data[pixelIndex + 1];
                const b = imageData.data[pixelIndex + 2];
                if (!this.allowedColorsSet.has(`${r},${g},${b}`)) {
                  imageData.data[pixelIndex + 3] = 0;
                }
              }
            }
          }
          context.putImageData(imageData, 0, 0);
          const templateTileName = `${(this.coords[0] + Math.floor(pixelX / 1e3)).toString().padStart(4, "0")},${(this.coords[1] + Math.floor(pixelY / 1e3)).toString().padStart(4, "0")},${(pixelX % 1e3).toString().padStart(3, "0")},${(pixelY % 1e3).toString().padStart(3, "0")}`;
          templateTiles[templateTileName] = await createImageBitmap(canvas);
          this.tilePrefixes.add(templateTileName.split(",").slice(0, 2).join(","));
          const canvasBlob = await canvas.convertToBlob();
          const canvasBuffer = await canvasBlob.arrayBuffer();
          templateTilesBuffers[templateTileName] = canvasBuffer;
          pixelX += drawSizeX;
        }
        pixelY += drawSizeY;
      }
      this.templateTiles = templateTiles;
      this.templateTilesBuffers = templateTilesBuffers;
      log(`[BLUE MARBLE] ${Object.keys(templateTiles).length} tiles creados`);
      return { templateTiles, templateTilesBuffers };
    }
    /**
     * Genera cola de píxeles para pintar (compatible con Auto-Image)
     */
    generatePixelQueue() {
      if (!this.bitmap) {
        throw new Error("Imagen no cargada. Llama a load() primero.");
      }
      log(`[BLUE MARBLE DEBUG] allowedColorsSet size: ${this.allowedColorsSet ? this.allowedColorsSet.size : "undefined"}`);
      log(`[BLUE MARBLE DEBUG] allowedColors length: ${this.allowedColors ? this.allowedColors.length : "undefined"}`);
      if (this.allowedColorsSet && this.allowedColorsSet.size > 0) {
        log(`[BLUE MARBLE DEBUG] Primeros colores permitidos: ${Array.from(this.allowedColorsSet).slice(0, 5).join(", ")}`);
      }
      const queue = [];
      const baseX = this.coords[0] * 1e3 + (this.coords[2] || 0);
      const baseY = this.coords[1] * 1e3 + (this.coords[3] || 0);
      const readCanvas = new OffscreenCanvas(this.imageWidth, this.imageHeight);
      const readCtx = readCanvas.getContext("2d", { willReadFrequently: true });
      readCtx.imageSmoothingEnabled = false;
      readCtx.drawImage(this.bitmap, 0, 0);
      const pixelData = readCtx.getImageData(0, 0, this.imageWidth, this.imageHeight).data;
      let totalPixelsProcessed = 0;
      let transparentPixels = 0;
      let defacePixels = 0;
      let exactMatches = 0;
      let labMatches = 0;
      let invalidPixels = 0;
      for (let y = 0; y < this.imageHeight; y++) {
        for (let x = 0; x < this.imageWidth; x++) {
          totalPixelsProcessed++;
          const idx = (y * this.imageWidth + x) * 4;
          const r = pixelData[idx];
          const g = pixelData[idx + 1];
          const b = pixelData[idx + 2];
          const alpha = pixelData[idx + 3];
          if (alpha === 0) {
            transparentPixels++;
            continue;
          }
          if (r === 222 && g === 250 && b === 206) {
            defacePixels++;
            continue;
          }
          const colorKey = `${r},${g},${b}`;
          let finalColorKey = colorKey;
          let finalR = r, finalG = g, finalB = b;
          let isValidPixel = this.allowedColorsSet.has(colorKey);
          if (isValidPixel) {
            exactMatches++;
          } else {
            if (this.allowedColors && this.allowedColors.length > 0) {
              const closestColor = ColorUtils.findClosestPaletteColor(r, g, b, this.allowedColors, {
                useLegacyRgb: false,
                // Usar algoritmo LAB avanzado
                whiteThreshold: 240,
                maxDistance: this.labTolerance
              });
              if (closestColor) {
                finalR = closestColor.r;
                finalG = closestColor.g;
                finalB = closestColor.b;
                finalColorKey = `${finalR},${finalG},${finalB}`;
                isValidPixel = true;
                labMatches++;
              }
            }
          }
          if (!isValidPixel) {
            invalidPixels++;
            continue;
          }
          const globalX = baseX + x;
          const globalY = baseY + y;
          const tileX = Math.floor(globalX / 1e3);
          const tileY = Math.floor(globalY / 1e3);
          const localX = globalX % 1e3;
          const localY = globalY % 1e3;
          const colorMeta = this.rgbToMeta.get(finalColorKey) || { id: 0, name: "Unknown" };
          queue.push({
            // Coordenadas de imagen (relativas)
            imageX: x,
            imageY: y,
            // Coordenadas globales
            globalX,
            globalY,
            // Coordenadas de tile/local
            tileX,
            tileY,
            localX,
            localY,
            // Información de color
            color: {
              r: finalR,
              g: finalG,
              b: finalB,
              id: colorMeta.id,
              name: colorMeta.name
            },
            originalColor: { r: finalR, g: finalG, b: finalB, alpha }
          });
        }
      }
      log(`[BLUE MARBLE DEBUG] Estad\xEDsticas de procesamiento:`);
      log(`[BLUE MARBLE DEBUG] - Total p\xEDxeles procesados: ${totalPixelsProcessed}`);
      log(`[BLUE MARBLE DEBUG] - P\xEDxeles transparentes: ${transparentPixels}`);
      log(`[BLUE MARBLE DEBUG] - P\xEDxeles #deface: ${defacePixels}`);
      log(`[BLUE MARBLE DEBUG] - Coincidencias exactas: ${exactMatches}`);
      log(`[BLUE MARBLE DEBUG] - Coincidencias LAB: ${labMatches}`);
      log(`[BLUE MARBLE DEBUG] - P\xEDxeles inv\xE1lidos: ${invalidPixels}`);
      log(`[BLUE MARBLE DEBUG] - Cola final: ${queue.length} p\xEDxeles`);
      log(`[BLUE MARBLE] Cola: ${queue.length} p\xEDxeles`);
      return queue;
    }
    /**
     * Redimensiona la imagen (preserva proporciones por defecto)
     */
    async resize(newWidth, newHeight, keepAspectRatio = true) {
      if (!this.img) {
        throw new Error("Imagen no cargada. Llama a load() primero.");
      }
      const originalWidth = this.img.width;
      const originalHeight = this.img.height;
      if (keepAspectRatio) {
        const aspectRatio = originalWidth / originalHeight;
        if (newWidth / newHeight > aspectRatio) {
          newWidth = newHeight * aspectRatio;
        } else {
          newHeight = newWidth / aspectRatio;
        }
      }
      const tempCanvas = document.createElement("canvas");
      tempCanvas.width = newWidth;
      tempCanvas.height = newHeight;
      const tempCtx = tempCanvas.getContext("2d");
      tempCtx.imageSmoothingEnabled = false;
      tempCtx.drawImage(this.img, 0, 0, newWidth, newHeight);
      const newDataUrl = tempCanvas.toDataURL();
      this.img.src = newDataUrl;
      this.imageSrc = newDataUrl;
      await new Promise((resolve) => {
        this.img.onload = async () => {
          this.bitmap = await createImageBitmap(this.img);
          this.imageWidth = this.bitmap.width;
          this.imageHeight = this.bitmap.height;
          this.totalPixels = this.imageWidth * this.imageHeight;
          resolve();
        };
      });
      log(`[BLUE MARBLE] Imagen redimensionada: ${originalWidth}\xD7${originalHeight} \u2192 ${this.imageWidth}\xD7${this.imageHeight}`);
      return {
        width: this.imageWidth,
        height: this.imageHeight
      };
    }
    /**
     * Obtiene información completa de la imagen procesada
     */
    getImageData() {
      return {
        width: this.imageWidth,
        height: this.imageHeight,
        totalPixels: this.totalPixels,
        requiredPixels: this.requiredPixelCount,
        defacePixels: this.defacePixelCount,
        colorPalette: this.colorPalette,
        coords: [...this.coords],
        originalName: this.originalName || "image.png",
        // Para compatibilidad con Auto-Image actual
        pixels: this.generatePixelQueue()
      };
    }
    /**
     * Genera preview de la imagen
     */
    generatePreview(maxWidth = 200, maxHeight = 200) {
      if (!this.img) return null;
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      const { width: origWidth, height: origHeight } = this.img;
      const aspectRatio = origWidth / origHeight;
      let newWidth, newHeight;
      if (maxWidth / maxHeight > aspectRatio) {
        newHeight = maxHeight;
        newWidth = maxHeight * aspectRatio;
      } else {
        newWidth = maxWidth;
        newHeight = maxWidth / aspectRatio;
      }
      canvas.width = newWidth;
      canvas.height = newHeight;
      ctx.imageSmoothingEnabled = false;
      ctx.drawImage(this.img, 0, 0, newWidth, newHeight);
      return canvas.toDataURL();
    }
    getDimensions() {
      return {
        width: this.imageWidth,
        height: this.imageHeight
      };
    }
    /**
     * Establecer colores seleccionados por el usuario
     */
    setSelectedColors(selectedColors) {
      this.selectedColors = Array.isArray(selectedColors) ? selectedColors : [];
      if (this.selectedColors.length > 0) {
        this.allowedColorsSet = new Set(
          this.selectedColors.map((c) => {
            var _a, _b, _c, _d, _e, _f;
            const r = (_b = c.r) != null ? _b : (_a = c.rgb) == null ? void 0 : _a.r;
            const g = (_d = c.g) != null ? _d : (_c = c.rgb) == null ? void 0 : _c.g;
            const b = (_f = c.b) != null ? _f : (_e = c.rgb) == null ? void 0 : _e.b;
            return `${r},${g},${b}`;
          })
        );
        this.allowedColors = this.selectedColors.map((c) => {
          var _a, _b, _c, _d, _e, _f;
          return {
            id: c.id,
            name: c.name,
            premium: !!c.premium,
            r: (_b = c.r) != null ? _b : (_a = c.rgb) == null ? void 0 : _a.r,
            g: (_d = c.g) != null ? _d : (_c = c.rgb) == null ? void 0 : _c.g,
            b: (_f = c.b) != null ? _f : (_e = c.rgb) == null ? void 0 : _e.b,
            rgb: c.rgb || { r: c.r, g: c.g, b: c.b }
          };
        });
        this.colorPalette = {};
        this.selectedColors.forEach((color) => {
          const rgb = color.rgb || { r: color.r, g: color.g, b: color.b };
          this.colorPalette[color.id] = rgb;
        });
        log(`\u{1F3A8} [BLUE MARBLE] Paleta actualizada con ${this.selectedColors.length} colores seleccionados`);
        this.imageDataCache = null;
      } else {
        this.allowedColors = [...this.allSiteColors];
        this.allowedColorsSet = new Set(this.allSiteColors.map((c) => `${c.r},${c.g},${c.b}`));
        log(`\u{1F3A8} [BLUE MARBLE] Sin selecci\xF3n: usando todos los colores disponibles (${this.allowedColors.length})`);
      }
    }
    /**
     * Genera una preview aplicando la paleta seleccionada con matching LAB.
     * Devuelve también estadísticas de mapeo.
     */
    generatePreviewWithPalette(maxWidth = 200, maxHeight = 200) {
      var _a, _b, _c, _d, _e, _f;
      if (!this.img) return { dataUrl: null, stats: { total: 0, exact: 0, lab: 0, removed: 0 } };
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d", { willReadFrequently: true });
      const source = this.originalBitmap || this.bitmap || this.img;
      const { width: origWidth, height: origHeight } = source;
      const aspectRatio = origWidth / origHeight;
      let newWidth, newHeight;
      if (maxWidth / maxHeight > aspectRatio) {
        newHeight = Math.max(1, Math.round(maxHeight));
        newWidth = Math.max(1, Math.round(maxHeight * aspectRatio));
      } else {
        newWidth = Math.max(1, Math.round(maxWidth));
        newHeight = Math.max(1, Math.round(maxWidth / aspectRatio));
      }
      canvas.width = newWidth;
      canvas.height = newHeight;
      ctx.imageSmoothingEnabled = false;
      ctx.drawImage(source, 0, 0, newWidth, newHeight);
      const imgData = ctx.getImageData(0, 0, newWidth, newHeight);
      const data = imgData.data;
      const palette = Array.isArray(this.allowedColors) ? this.allowedColors : [];
      let exact = 0;
      let lab = 0;
      let removed = 0;
      const total = newWidth * newHeight;
      for (let y = 0; y < newHeight; y++) {
        for (let x = 0; x < newWidth; x++) {
          const idx = (y * newWidth + x) * 4;
          const r = data[idx];
          const g = data[idx + 1];
          const b = data[idx + 2];
          const a = data[idx + 3];
          if (a === 0) continue;
          const key = `${r},${g},${b}`;
          let matched = this.allowedColorsSet && this.allowedColorsSet.has(key);
          if (matched) {
            exact++;
          }
          if (!matched) {
            const closest = ColorUtils.findClosestPaletteColor(r, g, b, palette, { useLegacyRgb: false, whiteThreshold: 240, maxDistance: this.labTolerance });
            if (closest) {
              const cr = (_b = closest.r) != null ? _b : (_a = closest.rgb) == null ? void 0 : _a.r;
              const cg = (_d = closest.g) != null ? _d : (_c = closest.rgb) == null ? void 0 : _c.g;
              const cb = (_f = closest.b) != null ? _f : (_e = closest.rgb) == null ? void 0 : _e.b;
              data[idx] = cr;
              data[idx + 1] = cg;
              data[idx + 2] = cb;
              data[idx + 3] = 255;
              lab++;
            } else {
              data[idx + 3] = 0;
              removed++;
            }
          }
        }
      }
      ctx.putImageData(imgData, 0, 0);
      return { dataUrl: canvas.toDataURL(), stats: { total, exact, lab, removed } };
    }
    /**
     * Remapea y sustituye la imagen base a la paleta activa (pixelart). Se usa justo tras cargar.
     */
    async remapImageToPalette() {
      var _a, _b, _c, _d, _e, _f;
      if (!this.bitmap) return;
      if (!this.allowedColors || this.allowedColors.length === 0) {
        this.allowedColors = [...this.allSiteColors];
        this.allowedColorsSet = new Set(this.allSiteColors.map((c) => `${c.r},${c.g},${c.b}`));
      }
      const w = this.imageWidth, h = this.imageHeight;
      const canvas = document.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      const ctx = canvas.getContext("2d", { willReadFrequently: true });
      ctx.imageSmoothingEnabled = false;
      ctx.drawImage(this.bitmap, 0, 0);
      const imgData = ctx.getImageData(0, 0, w, h);
      const data = imgData.data;
      const palette = this.allowedColors;
      for (let y = 0; y < h; y++) {
        for (let x = 0; x < w; x++) {
          const idx = (y * w + x) * 4;
          const r = data[idx], g = data[idx + 1], b = data[idx + 2], a = data[idx + 3];
          if (a === 0) continue;
          const key = `${r},${g},${b}`;
          if (this.allowedColorsSet && this.allowedColorsSet.has(key)) continue;
          const closest = ColorUtils.findClosestPaletteColor(r, g, b, palette, { useLegacyRgb: false, whiteThreshold: 240, maxDistance: this.labTolerance });
          if (closest) {
            const cr = (_b = closest.r) != null ? _b : (_a = closest.rgb) == null ? void 0 : _a.r;
            const cg = (_d = closest.g) != null ? _d : (_c = closest.rgb) == null ? void 0 : _c.g;
            const cb = (_f = closest.b) != null ? _f : (_e = closest.rgb) == null ? void 0 : _e.b;
            data[idx] = cr;
            data[idx + 1] = cg;
            data[idx + 2] = cb;
            data[idx + 3] = 255;
          } else {
            data[idx + 3] = 0;
          }
        }
      }
      ctx.putImageData(imgData, 0, 0);
      const blob = await new Promise((res) => canvas.toBlob(res));
      const url = window.URL.createObjectURL(blob);
      this.img.src = url;
      this.imageSrc = url;
      await new Promise((resolve) => {
        this.img.onload = async () => {
          this.bitmap = await createImageBitmap(this.img);
          resolve();
        };
      });
      log("[BLUE MARBLE] Imagen base remapeada a paleta activa (pixelart)");
    }
  };

  // src/image/painter.js
  init_logger();
  init_wplace_api();
  init_turnstile();
  init_config2();
  init_locales();
  init_client();
  init_patterns();
  var pageVisibilityHandler = null;
  var wasHiddenDuringCooldown = false;
  var cooldownStartTime = null;
  var cooldownDuration = null;
  var chargeMonitorInterval = null;
  var CHARGE_CHECK_INTERVAL = 3e4;
  function setupPageVisibilityHandling() {
    if (pageVisibilityHandler) {
      document.removeEventListener("visibilitychange", pageVisibilityHandler);
    }
    pageVisibilityHandler = () => {
      if (document.hidden) {
        log("\u{1F4F1} Pesta\xF1a oculta - pausando timers");
        if (imageState.inCooldown) {
          wasHiddenDuringCooldown = true;
        }
      } else {
        log("\u{1F4F1} Pesta\xF1a visible - reanudando timers");
        if (wasHiddenDuringCooldown && imageState.inCooldown) {
          recalculateCooldownTime();
          wasHiddenDuringCooldown = false;
        }
      }
    };
    document.addEventListener("visibilitychange", pageVisibilityHandler);
  }
  function recalculateCooldownTime() {
    if (!cooldownStartTime || !cooldownDuration) return;
    const now = Date.now();
    const elapsed = now - cooldownStartTime;
    const remaining = Math.max(0, cooldownDuration - elapsed);
    imageState.nextBatchCooldown = Math.ceil(remaining / 1e3);
    imageState.cooldownEndTime = now + remaining;
    log(`\u{1F504} Recalculando cooldown: ${Math.ceil(remaining / 1e3)}s restantes`);
  }
  var _lastChargeMonitorLog = 0;
  var MONITOR_LOG_THROTTLE = 12e4;
  async function startChargeMonitoring() {
    if (chargeMonitorInterval) {
      window.clearInterval(chargeMonitorInterval);
    }
    setupPageVisibilityHandling();
    chargeMonitorInterval = window.setInterval(async () => {
      try {
        if (document.hidden) {
          return;
        }
        if (imageState.remainingPixels.length > 0 && !imageState.running) {
          const sessionResult = await getSession();
          if (sessionResult.success && sessionResult.data.charges > 0) {
            const availableCharges = Math.floor(sessionResult.data.charges);
            const now = Date.now();
            if (now - _lastChargeMonitorLog > MONITOR_LOG_THROTTLE) {
              log(`\u{1F504} Monitoreo: ${availableCharges} cargas disponibles`);
              _lastChargeMonitorLog = now;
            }
            imageState.currentCharges = sessionResult.data.charges;
            imageState.maxCharges = sessionResult.data.maxCharges;
            if (availableCharges >= imageState.pixelsPerBatch) {
              if (window.imageBot && typeof window.imageBot.onStartPainting === "function") {
                log(`\u{1F680} Reanudando pintado autom\xE1ticamente con ${availableCharges} cargas`);
                window.imageBot.onStartPainting();
              }
            }
          }
        }
      } catch (error) {
        const now = Date.now();
        if (now - _lastChargeMonitorLog > MONITOR_LOG_THROTTLE) {
          log(`\u26A0\uFE0F Error en monitoreo de cargas: ${error.message}`);
          _lastChargeMonitorLog = now;
        }
      }
    }, CHARGE_CHECK_INTERVAL);
    log(`\u2705 Monitoreo de cargas iniciado (cada ${CHARGE_CHECK_INTERVAL / 1e3}s)`);
  }
  function stopChargeMonitoring() {
    if (chargeMonitorInterval) {
      window.clearInterval(chargeMonitorInterval);
      chargeMonitorInterval = null;
      log(`\u23F9\uFE0F Monitoreo de cargas detenido`);
    }
    if (pageVisibilityHandler) {
      document.removeEventListener("visibilitychange", pageVisibilityHandler);
      pageVisibilityHandler = null;
    }
    cooldownStartTime = null;
    cooldownDuration = null;
    wasHiddenDuringCooldown = false;
  }
  var _lastInsufficientChargesLog = 0;
  var LOG_THROTTLE_MS = 3e4;
  async function ensureSufficientCharges(requiredCharges, onProgress) {
    if (imageState.stopFlag) {
      log(`\u{1F6D1} Bot detenido, cancelando verificaci\xF3n de cargas`);
      return false;
    }
    const sessionResult = await getSession();
    if (sessionResult.success) {
      const availableCharges = Math.floor(sessionResult.data.charges);
      imageState.currentCharges = sessionResult.data.charges;
      imageState.maxCharges = sessionResult.data.maxCharges;
      if (availableCharges < requiredCharges) {
        if (imageState.stopFlag) {
          log(`\u{1F6D1} Bot detenido durante verificaci\xF3n de cargas`);
          return false;
        }
        const now = Date.now();
        if (now - _lastInsufficientChargesLog > LOG_THROTTLE_MS) {
          log(`\u23F3 Cargas insuficientes: ${availableCharges}/${requiredCharges}. Esperando regeneraci\xF3n...`);
          _lastInsufficientChargesLog = now;
        }
        await waitForCooldown(requiredCharges - availableCharges, onProgress);
        if (imageState.stopFlag) {
          log(`\u{1F6D1} Bot detenido durante cooldown, cancelando recursi\xF3n`);
          return false;
        }
        return await ensureSufficientCharges(requiredCharges, onProgress);
      }
      _lastInsufficientChargesLog = 0;
      return true;
    }
    log(`\u26A0\uFE0F No se pudo verificar cargas, continuando con valor cached: ${imageState.currentCharges}`);
    return imageState.currentCharges >= requiredCharges;
  }
  async function processImage(imageData, startPosition, onProgress, onComplete, onError) {
    const { width, height } = imageData;
    const { x: localStartX, y: localStartY } = startPosition;
    log(`Iniciando pintado: imagen(${width}x${height}) inicio LOCAL(${localStartX},${localStartY}) tile(${imageState.tileX},${imageState.tileY})`);
    log(`\u{1F3A8} Patr\xF3n: ${imageState.paintPattern}`);
    startChargeMonitoring();
    try {
      log("\u{1F511} Generando token Turnstile al inicio del proceso...");
      const initialToken = await ensureToken();
      if (!initialToken) {
        log("\u26A0\uFE0F No se pudo generar token inicial, continuando con flujo normal");
      } else {
        log("\u2705 Token inicial generado exitosamente");
      }
    } catch (error) {
      log("\u26A0\uFE0F Error generando token inicial:", error.message);
    }
    if (!imageState.remainingPixels || imageState.remainingPixels.length === 0 || imageState.lastPosition.x === 0 && imageState.lastPosition.y === 0) {
      log("Generando cola de p\xEDxeles...");
      imageState.remainingPixels = generatePixelQueue(imageData, startPosition, imageState.tileX, imageState.tileY);
      if (imageState.paintPattern && imageState.paintPattern !== "linear_start") {
        log(`\u{1F3A8} Aplicando patr\xF3n de pintado: ${imageState.paintPattern}`);
        imageState.remainingPixels = applyPaintPattern(imageState.remainingPixels, imageState.paintPattern, imageData);
      }
      if (imageState.lastPosition.x > 0 || imageState.lastPosition.y > 0) {
        imageState.remainingPixels = imageState.remainingPixels.filter((pixel) => {
          const pixelIndex = pixel.imageY * width + pixel.imageX;
          const lastIndex = imageState.lastPosition.y * width + imageState.lastPosition.x;
          return pixelIndex >= lastIndex;
        });
      }
      log(`Cola generada: ${imageState.remainingPixels.length} p\xEDxeles pendientes`);
      try {
        if (window.__WPA_PLAN_OVERLAY__) {
          window.__WPA_PLAN_OVERLAY__.injectStyles();
          window.__WPA_PLAN_OVERLAY__.setEnabled(true);
          if (imageState.startPosition && imageState.tileX !== void 0 && imageState.tileY !== void 0) {
            window.__WPA_PLAN_OVERLAY__.setAnchor({
              tileX: imageState.tileX,
              tileY: imageState.tileY,
              pxX: imageState.startPosition.x,
              pxY: imageState.startPosition.y
            });
          }
          window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
            enabled: true,
            nextBatchCount: imageState.pixelsPerBatch
          });
        }
      } catch (e) {
        log("\u26A0\uFE0F Error actualizando plan overlay:", e);
      }
    }
    try {
      while (imageState.remainingPixels.length > 0 && !imageState.stopFlag) {
        let availableCharges = Math.floor(imageState.currentCharges);
        let pixelsPerBatch;
        log(`\u{1F50D} Estado del primer lote - isFirstBatch: ${imageState.isFirstBatch}, useAllChargesFirst: ${imageState.useAllChargesFirst}, availableCharges: ${availableCharges}`);
        if (imageState.isFirstBatch && imageState.useAllChargesFirst && availableCharges > 0) {
          pixelsPerBatch = Math.min(availableCharges, imageState.remainingPixels.length);
          imageState.isFirstBatch = false;
          log(`\u{1F680} Primera pasada: usando ${pixelsPerBatch} cargas de ${availableCharges} disponibles`);
        } else {
          pixelsPerBatch = Math.min(imageState.pixelsPerBatch, imageState.remainingPixels.length);
          log(`\u2699\uFE0F Pasada normal: usando ${pixelsPerBatch} p\xEDxeles (configurado: ${imageState.pixelsPerBatch})`);
        }
        const hasEnoughCharges = await ensureSufficientCharges(pixelsPerBatch, onProgress);
        if (!hasEnoughCharges) {
          log(`\u26A0\uFE0F No se pudieron obtener suficientes cargas, pausando pintado`);
          break;
        }
        availableCharges = Math.floor(imageState.currentCharges);
        const initialBatch = imageState.remainingPixels.splice(0, pixelsPerBatch);
        let batch = initialBatch;
        let skippedCount = 0;
        log(`Verificando lote de ${initialBatch.length} p\xEDxeles...`);
        log(`Pintando lote de ${batch.length} p\xEDxeles...`);
        try {
          if (window.__WPA_PLAN_OVERLAY__) {
            window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
              enabled: true,
              // Mantener habilitado
              nextBatchCount: imageState.pixelsPerBatch
            });
          }
        } catch (e) {
          log("\u26A0\uFE0F Error actualizando plan overlay durante pintado:", e);
        }
        const result = await paintPixelBatchWithRetry(batch, onProgress);
        if (result.success && result.painted > 0) {
          imageState.paintedPixels += result.painted + skippedCount;
          try {
            pixelsPainted(result.painted + skippedCount, { botVariant: "auto-image" });
          } catch (e) {
            log("\u26A0\uFE0F Error reportando m\xE9tricas:", e);
          }
          imageState.currentCharges = Math.max(0, imageState.currentCharges - result.painted);
          log(`Cargas despu\xE9s del lote: ${imageState.currentCharges.toFixed(1)} (consumidas: ${result.painted})`);
          if (batch.length > 0) {
            const lastPixel = batch[batch.length - 1];
            imageState.lastPosition = { x: lastPixel.imageX, y: lastPixel.imageY };
          }
          log(`Lote exitoso: ${result.painted}/${batch.length} p\xEDxeles pintados. Total: ${imageState.paintedPixels}/${imageState.totalPixels}`);
          const estimatedTime = calculateEstimatedTime();
          const progressPercent = (imageState.paintedPixels / imageState.totalPixels * 100).toFixed(1);
          const successMessage = t("image.passCompleted", {
            painted: result.painted,
            percent: progressPercent,
            current: imageState.paintedPixels,
            total: imageState.totalPixels
          });
          if (onProgress) {
            onProgress(imageState.paintedPixels, imageState.totalPixels, successMessage, estimatedTime);
          }
          await sleep2(2e3);
        } else if (result.shouldContinue) {
          log(`Lote fall\xF3 despu\xE9s de todos los reintentos, continuando con siguiente lote...`);
        } else {
          imageState.remainingPixels.unshift(...batch);
          log(`Lote fall\xF3: reintentando en 5 segundos...`);
          await sleep2(5e3);
        }
        await sleep2(500);
      }
      if (imageState.stopFlag) {
        log(`Pintado pausado en p\xEDxel imagen(${imageState.lastPosition.x},${imageState.lastPosition.y})`);
        if (onComplete) {
          onComplete(false, imageState.paintedPixels);
        }
      } else {
        log(`Pintado completado: ${imageState.paintedPixels} p\xEDxeles pintados`);
        imageState.lastPosition = { x: 0, y: 0 };
        imageState.remainingPixels = [];
        stopChargeMonitoring();
        try {
          if (window.__WPA_PLAN_OVERLAY__) {
            window.__WPA_PLAN_OVERLAY__.setPlan([], {
              enabled: true,
              // Mantener habilitado pero sin píxeles
              nextBatchCount: 0
            });
            log("\u2705 Plan overlay limpiado al completar pintado");
          }
        } catch (e) {
          log("\u26A0\uFE0F Error limpiando plan overlay:", e);
        }
        if (onComplete) {
          onComplete(true, imageState.paintedPixels);
        }
      }
    } catch (error) {
      log("Error en proceso de pintado:", error);
      stopChargeMonitoring();
      if (onError) {
        onError(error);
      }
    }
  }
  async function paintPixelBatch(batch, providedToken = null) {
    var _a;
    try {
      if (!batch || batch.length === 0) {
        return { success: false, painted: 0, error: "Lote vac\xEDo" };
      }
      const byTile = /* @__PURE__ */ new Map();
      for (const p of batch) {
        const key = `${p.tileX},${p.tileY}`;
        if (!byTile.has(key)) byTile.set(key, { coords: [], colors: [], tx: p.tileX, ty: p.tileY });
        const bucket = byTile.get(key);
        bucket.coords.push(p.localX, p.localY);
        bucket.colors.push(p.color.id || p.color.value || 1);
      }
      const token = providedToken || await ensureToken();
      let totalPainted = 0;
      for (const { coords, colors, tx, ty } of byTile.values()) {
        if (colors.length === 0) continue;
        const sanitized = [];
        for (let i = 0; i < coords.length; i += 2) {
          const x = (Number(coords[i]) % 1e3 + 1e3) % 1e3;
          const y = (Number(coords[i + 1]) % 1e3 + 1e3) % 1e3;
          if (Number.isFinite(x) && Number.isFinite(y)) {
            sanitized.push(x, y);
          }
        }
        try {
          let minX = 999, maxX = 0, minY = 999, maxY = 0;
          for (let i = 0; i < sanitized.length; i += 2) {
            const x = sanitized[i], y = sanitized[i + 1];
            if (x < minX) minX = x;
            if (x > maxX) maxX = x;
            if (y < minY) minY = y;
            if (y > maxY) maxY = y;
          }
          log(`[IMG] Enviando tile ${tx},${ty}: ${colors.length} px | x:[${minX},${maxX}] y:[${minY},${maxY}]`);
        } catch {
        }
        const resp = await postPixelBatchImage(tx, ty, sanitized, colors, token);
        if (resp.status !== 200) {
          return {
            success: false,
            painted: totalPainted,
            error: ((_a = resp.json) == null ? void 0 : _a.message) || `HTTP ${resp.status}`,
            status: resp.status
          };
        }
        const actualPainted = resp.painted || 0;
        if (actualPainted === 0 && colors.length > 0) {
          log(`\u26A0\uFE0F API devolvi\xF3 200 OK pero painted=0 para ${colors.length} p\xEDxeles en tile ${tx},${ty}`);
          return {
            success: false,
            painted: totalPainted,
            error: `API devolvi\xF3 painted=0 para ${colors.length} p\xEDxeles`,
            status: 200,
            shouldRetry: true
          };
        }
        totalPainted += actualPainted;
        log(`\u2705 Tile ${tx},${ty}: ${actualPainted}/${colors.length} p\xEDxeles pintados exitosamente`);
      }
      return { success: true, painted: totalPainted };
    } catch (error) {
      log("Error en paintPixelBatch:", error);
      return {
        success: false,
        painted: 0,
        error: error.message
      };
    }
  }
  var _lastNetworkErrorLog = 0;
  var _consecutiveNetworkErrors = 0;
  var NETWORK_ERROR_LOG_THROTTLE = 6e4;
  async function paintPixelBatchWithRetry(batch, onProgress) {
    const maxAttempts = 5;
    const baseDelay = 3e3;
    let token = null;
    try {
      token = await ensureToken();
    } catch (e) {
      log("\u26A0\uFE0F No se pudo obtener token inicial, se intentar\xE1 en el primer intento:", e.message);
    }
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        if (!token) {
          token = await ensureToken();
        }
        const result = await paintPixelBatch(batch, token);
        if (result.success) {
          imageState.retryCount = 0;
          _consecutiveNetworkErrors = 0;
          return result;
        }
        if (result.status === 403) {
          log("\u{1F510} 403 recibido: invalidando y regenerando token para reintento inmediato");
          try {
            token = await ensureToken(true);
            continue;
          } catch (regenErr) {
            log("\u274C Fall\xF3 regeneraci\xF3n de token tras 403:", regenErr.message);
          }
        }
        imageState.retryCount = attempt;
        if (attempt < maxAttempts) {
          const delay = baseDelay * Math.pow(2, attempt - 1);
          const delaySeconds = Math.round(delay / 1e3);
          let errorMessage;
          const isNetworkError = result.status === 0 || result.status === "NetworkError";
          if (isNetworkError) {
            _consecutiveNetworkErrors++;
            const now = Date.now();
            if (now - _lastNetworkErrorLog > NETWORK_ERROR_LOG_THROTTLE || _consecutiveNetworkErrors === 1) {
              log(`\u{1F310} Error de red (${_consecutiveNetworkErrors} consecutivos). Reintento ${attempt}/${maxAttempts} en ${delaySeconds}s`);
              _lastNetworkErrorLog = now;
            }
            errorMessage = t("image.networkError");
          } else if (result.status >= 500) {
            errorMessage = t("image.serverError");
            log(`\u{1F527} Error del servidor ${result.status}. Reintento ${attempt}/${maxAttempts} en ${delaySeconds}s`);
          } else if (result.status === 408) {
            errorMessage = t("image.timeoutError");
            log(`\u23F1\uFE0F Timeout. Reintento ${attempt}/${maxAttempts} en ${delaySeconds}s`);
          } else {
            errorMessage = t("image.retryAttempt", {
              attempt,
              maxAttempts,
              delay: delaySeconds
            });
            log(`\u{1F504} Reintento ${attempt}/${maxAttempts} despu\xE9s de ${delaySeconds}s. Error: ${result.error}`);
          }
          if (onProgress) {
            onProgress(imageState.paintedPixels, imageState.totalPixels, errorMessage);
          }
          await sleep2(delay);
        }
      } catch (error) {
        imageState.retryCount = attempt;
        if (attempt < maxAttempts) {
          const delay = baseDelay * Math.pow(2, attempt - 1);
          const delaySeconds = Math.round(delay / 1e3);
          if (/403/.test((error == null ? void 0 : error.message) || "")) {
            try {
              log("\u{1F510} Excepci\xF3n potencial de token, regenerando...");
              token = await ensureToken(true);
              continue;
            } catch (regenErr) {
              log("\u274C Fall\xF3 regeneraci\xF3n tras excepci\xF3n 403:", regenErr.message);
            }
          }
          if (attempt === 1 || attempt % 3 === 0) {
            log(`\u274C Excepci\xF3n en intento ${attempt}:`, error.message);
          }
          const errorMessage = t("image.retryError", {
            attempt,
            maxAttempts,
            delay: delaySeconds
          });
          if (onProgress) {
            onProgress(imageState.paintedPixels, imageState.totalPixels, errorMessage);
          }
          await sleep2(delay);
        }
      }
    }
    imageState.retryCount = maxAttempts;
    const failMessage = t("image.retryFailed", { maxAttempts });
    if (onProgress) {
      onProgress(imageState.paintedPixels, imageState.totalPixels, failMessage);
    }
    log(`\u{1F4A5} Fall\xF3 despu\xE9s de ${maxAttempts} intentos, continuando con siguiente lote`);
    return {
      success: false,
      painted: 0,
      error: `Fall\xF3 despu\xE9s de ${maxAttempts} intentos`,
      shouldContinue: true
      // Indica que debe continuar con el siguiente lote
    };
  }
  async function waitForCooldown(chargesNeeded, onProgress) {
    const chargeTime = IMAGE_DEFAULTS.CHARGE_REGEN_MS * chargesNeeded;
    const waitTime = chargeTime + 5e3;
    if (imageState.stopFlag) {
      log(`\u{1F6D1} Bot detenido, cancelando cooldown`);
      return;
    }
    log(`Esperando ${Math.round(waitTime / 1e3)}s para obtener ${chargesNeeded} cargas`);
    const startTime = Date.now();
    cooldownStartTime = startTime;
    cooldownDuration = waitTime;
    imageState.inCooldown = true;
    imageState.cooldownEndTime = startTime + waitTime;
    imageState.nextBatchCooldown = Math.round(waitTime / 1e3);
    if (onProgress) {
      const minutes = Math.floor(waitTime / 6e4);
      const seconds = Math.floor(waitTime % 6e4 / 1e3);
      const timeText = minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;
      const message = t("image.waitingChargesRegen", {
        current: Math.floor(imageState.currentCharges),
        needed: chargesNeeded,
        time: timeText
      });
      onProgress(imageState.paintedPixels, imageState.totalPixels, message);
    }
    while (true) {
      const now = Date.now();
      const elapsed = now - startTime;
      const remaining = Math.max(0, waitTime - elapsed);
      if (imageState.stopFlag) {
        log(`\u{1F6D1} Bot detenido durante cooldown con ${Math.ceil(remaining / 1e3)}s restantes`);
        break;
      }
      if (remaining <= 0) {
        break;
      }
      const remainingSeconds = Math.ceil(remaining / 1e3);
      imageState.nextBatchCooldown = remainingSeconds;
      const shouldUpdateProgress = remainingSeconds % 30 === 0 || remainingSeconds <= 30 && remainingSeconds % 10 === 0 || remainingSeconds <= 5 || elapsed < 2e3;
      if (onProgress && shouldUpdateProgress) {
        const minutes = Math.floor(remainingSeconds / 60);
        const seconds = remainingSeconds % 60;
        const timeText = minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;
        const message = t("image.waitingChargesCountdown", {
          current: Math.floor(imageState.currentCharges),
          needed: chargesNeeded,
          time: timeText
        });
        onProgress(imageState.paintedPixels, imageState.totalPixels, message);
      }
      await sleep2(Math.min(1e3, remaining));
    }
    imageState.inCooldown = false;
    imageState.nextBatchCooldown = 0;
    cooldownStartTime = null;
    cooldownDuration = null;
    wasHiddenDuringCooldown = false;
    if (!imageState.stopFlag) {
      imageState.currentCharges = Math.min(
        imageState.maxCharges || 9999,
        // usar maxCharges del estado
        imageState.currentCharges + waitTime / IMAGE_DEFAULTS.CHARGE_REGEN_MS
      );
    }
  }
  function generatePixelQueue(imageData, startPosition, baseTileX, baseTileY) {
    const { x: localStartX, y: localStartY } = startPosition;
    const queue = [];
    let pixels;
    if (imageData && imageData.processor && typeof imageData.processor.generatePixelQueue === "function") {
      pixels = imageData.processor.generatePixelQueue();
    } else if (imageData && typeof imageData.generatePixelQueue === "function") {
      pixels = imageData.generatePixelQueue();
    } else if (imageData && Array.isArray(imageData.pixels)) {
      pixels = imageData.pixels;
    } else if (imageData && typeof imageData.pixels === "function") {
      pixels = imageData.pixels();
    } else if (imageData && imageData.pixels) {
      pixels = imageData.pixels;
    } else {
      log(`\u274C Error: No se pueden obtener p\xEDxeles de imageData. Tipo: ${typeof imageData}`, imageData);
      return [];
    }
    if (!Array.isArray(pixels)) {
      log(`\u274C Error: pixels no es un array iterable. Tipo: ${typeof pixels}`, pixels);
      return [];
    }
    for (const pixelData of pixels) {
      if (!pixelData) continue;
      const pixelX = pixelData.imageX !== void 0 ? pixelData.imageX : pixelData.x;
      const pixelY = pixelData.imageY !== void 0 ? pixelData.imageY : pixelData.y;
      const pixelColor = pixelData.color !== void 0 ? pixelData.color : pixelData.targetColor;
      if (pixelX === void 0 || pixelY === void 0) {
        log(`\u26A0\uFE0F P\xEDxel con coordenadas inv\xE1lidas:`, pixelData);
        continue;
      }
      const globalX = localStartX + pixelX;
      const globalY = localStartY + pixelY;
      const tileOffsetX = Math.floor(globalX / 1e3);
      const tileOffsetY = Math.floor(globalY / 1e3);
      const tx = baseTileX + tileOffsetX;
      const ty = baseTileY + tileOffsetY;
      const localX = (globalX % 1e3 + 1e3) % 1e3;
      const localY = (globalY % 1e3 + 1e3) % 1e3;
      queue.push({
        imageX: pixelX,
        imageY: pixelY,
        localX,
        localY,
        tileX: tx,
        tileY: ty,
        color: pixelColor,
        originalColor: pixelData.originalColor
      });
    }
    log(`Cola de p\xEDxeles generada: ${queue.length} p\xEDxeles para pintar`);
    return queue;
  }
  function calculateEstimatedTime() {
    if (!imageState.remainingPixels || imageState.remainingPixels.length === 0) {
      return 0;
    }
    const remainingPixels = imageState.remainingPixels.length;
    const batchSize = imageState.pixelsPerBatch;
    const chargeRegenTime = IMAGE_DEFAULTS.CHARGE_REGEN_MS / 1e3;
    const batchesNeeded = Math.ceil(remainingPixels / batchSize);
    const waitTimeBetweenBatches = batchSize * chargeRegenTime;
    const totalWaitTime = (batchesNeeded - 1) * waitTimeBetweenBatches;
    const executionTime = batchesNeeded * 2;
    return Math.ceil(totalWaitTime + executionTime);
  }
  function stopPainting() {
    imageState.stopFlag = true;
    imageState.running = false;
    stopChargeMonitoring();
    log("\u{1F6D1} Deteniendo proceso de pintado...");
  }

  // src/image/save-load.js
  init_logger();
  init_config2();
  function getFullPixelData() {
    if (!imageState.imageData) {
      return null;
    }
    if (imageState.imageData.processor && typeof imageState.imageData.processor.generatePixelQueue === "function") {
      return imageState.imageData.processor.generatePixelQueue();
    }
    if (imageState.imageData.fullPixelData && Array.isArray(imageState.imageData.fullPixelData) && imageState.imageData.fullPixelData.length > 0) {
      return imageState.imageData.fullPixelData;
    }
    if (imageState.imageData.pixels && imageState.imageData.pixels.length > 0) {
      return imageState.imageData.pixels;
    }
    if (imageState.remainingPixels && imageState.remainingPixels.length > 0) {
      log("\u26A0\uFE0F Exportando usando remainingPixels (posible subconjunto del proyecto)");
      return imageState.remainingPixels;
    }
    return null;
  }
  function saveProgress(filename = null) {
    try {
      if (!imageState.imageData || imageState.paintedPixels === 0) {
        throw new Error("No hay progreso para guardar");
      }
      let fullPixelData = null;
      try {
        const pixelData = getFullPixelData();
        if (pixelData && Array.isArray(pixelData)) {
          if (pixelData.length > 5e4) {
            log(`\u26A0\uFE0F Imagen muy grande (${pixelData.length} p\xEDxeles), guardando solo p\xEDxeles restantes`);
            fullPixelData = null;
          } else {
            fullPixelData = pixelData;
          }
        }
      } catch (pixelError) {
        log("\u26A0\uFE0F Error obteniendo datos completos de p\xEDxeles, continuando sin ellos:", pixelError);
        fullPixelData = null;
      }
      const progressData = {
        version: "2.0",
        // Versión actualizada para compatibilidad
        timestamp: Date.now(),
        imageData: {
          width: imageState.imageData.width,
          height: imageState.imageData.height,
          originalName: imageState.originalImageName,
          // Solo guardar fullPixelData si no es demasiado grande
          ...fullPixelData && { fullPixelData }
        },
        progress: {
          paintedPixels: imageState.paintedPixels,
          totalPixels: imageState.totalPixels,
          lastPosition: { ...imageState.lastPosition }
        },
        position: {
          startPosition: { ...imageState.startPosition },
          tileX: imageState.tileX,
          tileY: imageState.tileY
        },
        config: {
          pixelsPerBatch: imageState.pixelsPerBatch,
          useAllChargesFirst: imageState.useAllChargesFirst,
          isFirstBatch: imageState.isFirstBatch,
          maxCharges: imageState.maxCharges,
          // Nuevas configuraciones v2.0
          paintPattern: imageState.paintPattern
        },
        // Filtrar solo los datos serializables de los colores (sin elementos DOM)
        colors: imageState.availableColors.map((color) => ({
          id: color.id,
          r: color.r,
          g: color.g,
          b: color.b
        })),
        remainingPixels: imageState.remainingPixels || []
      };
      let dataStr;
      try {
        dataStr = JSON.stringify(progressData, null, 2);
      } catch (stringifyError) {
        log("\u26A0\uFE0F Error serializando datos completos, intentando sin fullPixelData");
        delete progressData.imageData.fullPixelData;
        dataStr = JSON.stringify(progressData, null, 2);
      }
      const blob = new window.Blob([dataStr], { type: "application/json" });
      const finalFilename = filename || `wplace_progress_${imageState.originalImageName || "image"}_${(/* @__PURE__ */ new Date()).toISOString().slice(0, 19).replace(/:/g, "-")}.json`;
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = finalFilename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      log(`\u2705 Progreso guardado: ${finalFilename}`);
      return { success: true, filename: finalFilename };
    } catch (error) {
      log("\u274C Error guardando progreso:", error);
      return { success: false, error: error.message };
    }
  }
  async function loadProgress(file) {
    return new Promise((resolve) => {
      try {
        const reader = new window.FileReader();
        reader.onload = (e) => {
          try {
            const progressData = JSON.parse(e.target.result);
            const requiredFields = ["imageData", "progress", "position", "colors"];
            const missingFields = requiredFields.filter((field) => !(field in progressData));
            if (missingFields.length > 0) {
              throw new Error(`Campos requeridos faltantes: ${missingFields.join(", ")}`);
            }
            const fileVersion = progressData.version || "1.0";
            log(`\u{1F4C1} Cargando progreso versi\xF3n ${fileVersion}`);
            if (!imageState.availableColors || imageState.availableColors.length === 0) {
              imageState.availableColors = Array.isArray(progressData.colors) ? progressData.colors : [];
            }
            if (imageState.availableColors.length > 0 && Array.isArray(progressData.colors)) {
              const savedColorIds = progressData.colors.map((c) => c.id);
              const currentColorIds = imageState.availableColors.map((c) => c.id);
              const commonColors = savedColorIds.filter((id) => currentColorIds.includes(id));
              if (commonColors.length < savedColorIds.length * 0.8) {
                log("\u26A0\uFE0F Los colores guardados no coinciden completamente con los actuales");
              }
            }
            imageState.imageData = {
              ...progressData.imageData,
              pixels: []
              // Los píxeles se regenerarán si es necesario
            };
            const fullPixelData = progressData.imageData.fullPixelData || progressData.fullPixelData;
            if (Array.isArray(fullPixelData) && fullPixelData.length > 0) {
              imageState.imageData.fullPixelData = fullPixelData;
              imageState.imageData.pixels = fullPixelData;
              log(`\u2705 Cargados ${fullPixelData.length} p\xEDxeles completos del proyecto`);
            }
            imageState.paintedPixels = progressData.progress.paintedPixels;
            imageState.totalPixels = progressData.progress.totalPixels;
            if (progressData.progress.lastPosition) {
              imageState.lastPosition = progressData.progress.lastPosition;
            } else if (progressData.position.lastX !== void 0 && progressData.position.lastY !== void 0) {
              imageState.lastPosition = { x: progressData.position.lastX, y: progressData.position.lastY };
            }
            if (progressData.position.startPosition) {
              imageState.startPosition = progressData.position.startPosition;
            } else if (progressData.position.startX !== void 0 && progressData.position.startY !== void 0) {
              imageState.startPosition = { x: progressData.position.startX, y: progressData.position.startY };
            }
            imageState.tileX = progressData.position.tileX;
            imageState.tileY = progressData.position.tileY;
            imageState.originalImageName = progressData.imageData.originalName;
            imageState.remainingPixels = progressData.remainingPixels || progressData.progress.remainingPixels || [];
            if (progressData.config) {
              imageState.pixelsPerBatch = progressData.config.pixelsPerBatch || imageState.pixelsPerBatch;
              imageState.useAllChargesFirst = progressData.config.useAllChargesFirst !== void 0 ? progressData.config.useAllChargesFirst : imageState.useAllChargesFirst;
              imageState.isFirstBatch = imageState.useAllChargesFirst ? true : progressData.config.isFirstBatch !== void 0 ? progressData.config.isFirstBatch : false;
              log(`\u{1F4C1} Progreso cargado - useAllChargesFirst: ${imageState.useAllChargesFirst}, isFirstBatch: ${imageState.isFirstBatch}`);
              imageState.maxCharges = progressData.config.maxCharges || imageState.maxCharges;
              if (fileVersion >= "2.0") {
                imageState.paintPattern = progressData.config.paintPattern || "linear_start";
              }
            }
            if (imageState.paintPattern && imageState.paintPattern !== "linear_start" && imageState.remainingPixels.length > 0) {
              try {
                Promise.resolve().then(() => (init_patterns(), patterns_exports)).then(({ applyPaintPattern: applyPaintPattern2 }) => {
                  imageState.remainingPixels = applyPaintPattern2(
                    imageState.remainingPixels,
                    imageState.paintPattern,
                    imageState.imageData
                  );
                  log(`\u{1F3A8} Patr\xF3n de pintado aplicado: ${imageState.paintPattern}`);
                }).catch((patternError) => {
                  log("\u26A0\uFE0F Error aplicando patr\xF3n de pintado:", patternError);
                });
              } catch (patternError) {
                log("\u26A0\uFE0F Error cargando m\xF3dulo de patrones:", patternError);
              }
            }
            try {
              if (window.__WPA_PLAN_OVERLAY__) {
                window.__WPA_PLAN_OVERLAY__.injectStyles();
                window.__WPA_PLAN_OVERLAY__.setEnabled(true);
                if (imageState.startPosition && imageState.tileX !== void 0 && imageState.tileY !== void 0) {
                  window.__WPA_PLAN_OVERLAY__.setAnchor({
                    tileX: imageState.tileX,
                    tileY: imageState.tileY,
                    pxX: imageState.startPosition.x,
                    pxY: imageState.startPosition.y
                  });
                  log(`\u2705 Plan overlay anclado con posici\xF3n cargada: tile(${imageState.tileX},${imageState.tileY}) local(${imageState.startPosition.x},${imageState.startPosition.y})`);
                }
                window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
                  enabled: true,
                  nextBatchCount: imageState.pixelsPerBatch
                });
                log(`\u2705 Plan overlay activado con ${imageState.remainingPixels.length} p\xEDxeles restantes`);
              }
            } catch (e2) {
              log("\u26A0\uFE0F Error activando plan overlay al cargar progreso:", e2);
            }
            imageState.imageLoaded = true;
            imageState.colorsChecked = true;
            log(`\u2705 Progreso cargado (v${fileVersion}): ${imageState.paintedPixels}/${imageState.totalPixels} p\xEDxeles`);
            if (fileVersion >= "2.0") {
              log(`\u{1F3A8} Patr\xF3n: ${imageState.paintPattern}`);
            }
            resolve({
              success: true,
              data: progressData,
              painted: imageState.paintedPixels,
              total: imageState.totalPixels,
              canContinue: imageState.remainingPixels.length > 0,
              version: fileVersion
            });
          } catch (parseError) {
            log("\u274C Error parseando archivo de progreso:", parseError);
            resolve({ success: false, error: parseError.message });
          }
        };
        reader.onerror = () => {
          const error = "Error leyendo archivo";
          log("\u274C", error);
          resolve({ success: false, error });
        };
        reader.readAsText(file);
      } catch (error) {
        log("\u274C Error cargando progreso:", error);
        resolve({ success: false, error: error.message });
      }
    });
  }
  function clearProgress() {
    imageState.paintedPixels = 0;
    imageState.totalPixels = 0;
    imageState.lastPosition = { x: 0, y: 0 };
    imageState.remainingPixels = [];
    imageState.imageData = null;
    imageState.startPosition = null;
    imageState.imageLoaded = false;
    imageState.originalImageName = null;
    imageState.isFirstBatch = true;
    imageState.nextBatchCooldown = 0;
    imageState.drawnPixelsMap.clear();
    imageState.lastProtectionCheck = 0;
    log("\u{1F9F9} Progreso limpiado");
  }
  function hasProgress() {
    return imageState.imageLoaded && imageState.paintedPixels > 0 && imageState.remainingPixels && imageState.remainingPixels.length > 0;
  }
  function getProgressInfo() {
    return {
      hasProgress: hasProgress(),
      painted: imageState.paintedPixels,
      total: imageState.totalPixels,
      remaining: imageState.remainingPixels ? imageState.remainingPixels.length : 0,
      percentage: imageState.totalPixels > 0 ? imageState.paintedPixels / imageState.totalPixels * 100 : 0,
      lastPosition: { ...imageState.lastPosition },
      canContinue: hasProgress()
    };
  }

  // src/image/ui.js
  init_logger();
  init_log_window2();

  // src/image/Resize-window.js
  init_logger();
  init_config2();

  // src/image/color-palette-selector.js
  init_logger();

  // src/image/palette.js
  var COLOR_MAP2 = {
    0: { id: 1, name: "Black", rgb: { r: 0, g: 0, b: 0 } },
    1: { id: 2, name: "Dark Gray", rgb: { r: 60, g: 60, b: 60 } },
    2: { id: 3, name: "Gray", rgb: { r: 120, g: 120, b: 120 } },
    3: { id: 4, name: "Light Gray", rgb: { r: 210, g: 210, b: 210 } },
    4: { id: 5, name: "White", rgb: { r: 255, g: 255, b: 255 } },
    5: { id: 6, name: "Deep Red", rgb: { r: 96, g: 0, b: 24 } },
    6: { id: 7, name: "Red", rgb: { r: 237, g: 28, b: 36 } },
    7: { id: 8, name: "Orange", rgb: { r: 255, g: 127, b: 39 } },
    8: { id: 9, name: "Gold", rgb: { r: 246, g: 170, b: 9 } },
    9: { id: 10, name: "Yellow", rgb: { r: 249, g: 221, b: 59 } },
    10: { id: 11, name: "Light Yellow", rgb: { r: 255, g: 250, b: 188 } },
    11: { id: 12, name: "Dark Green", rgb: { r: 14, g: 185, b: 104 } },
    12: { id: 13, name: "Green", rgb: { r: 19, g: 230, b: 123 } },
    13: { id: 14, name: "Light Green", rgb: { r: 135, g: 255, b: 94 } },
    14: { id: 15, name: "Dark Teal", rgb: { r: 12, g: 129, b: 110 } },
    15: { id: 16, name: "Teal", rgb: { r: 16, g: 174, b: 166 } },
    16: { id: 17, name: "Light Teal", rgb: { r: 19, g: 225, b: 190 } },
    17: { id: 20, name: "Cyan", rgb: { r: 96, g: 247, b: 242 } },
    18: { id: 44, name: "Light Cyan", rgb: { r: 187, g: 250, b: 242 } },
    19: { id: 18, name: "Dark Blue", rgb: { r: 40, g: 80, b: 158 } },
    20: { id: 19, name: "Blue", rgb: { r: 64, g: 147, b: 228 } },
    21: { id: 21, name: "Indigo", rgb: { r: 107, g: 80, b: 246 } },
    22: { id: 22, name: "Light Indigo", rgb: { r: 153, g: 177, b: 251 } },
    23: { id: 23, name: "Dark Purple", rgb: { r: 120, g: 12, b: 153 } },
    24: { id: 24, name: "Purple", rgb: { r: 170, g: 56, b: 185 } },
    25: { id: 25, name: "Light Purple", rgb: { r: 224, g: 159, b: 249 } },
    26: { id: 26, name: "Dark Pink", rgb: { r: 203, g: 0, b: 122 } },
    27: { id: 27, name: "Pink", rgb: { r: 236, g: 31, b: 128 } },
    28: { id: 28, name: "Light Pink", rgb: { r: 243, g: 141, b: 169 } },
    29: { id: 29, name: "Dark Brown", rgb: { r: 104, g: 70, b: 52 } },
    30: { id: 30, name: "Brown", rgb: { r: 149, g: 104, b: 42 } },
    31: { id: 31, name: "Beige", rgb: { r: 248, g: 178, b: 119 } },
    32: { id: 52, name: "Light Beige", rgb: { r: 255, g: 197, b: 165 } },
    33: { id: 32, name: "Medium Gray", rgb: { r: 170, g: 170, b: 170 } },
    34: { id: 33, name: "Dark Red", rgb: { r: 165, g: 14, b: 30 } },
    35: { id: 34, name: "Light Red", rgb: { r: 250, g: 128, b: 114 } },
    36: { id: 35, name: "Dark Orange", rgb: { r: 228, g: 92, b: 26 } },
    37: { id: 37, name: "Dark Goldenrod", rgb: { r: 156, g: 132, b: 49 } },
    38: { id: 38, name: "Goldenrod", rgb: { r: 197, g: 173, b: 49 } },
    39: { id: 39, name: "Light Goldenrod", rgb: { r: 232, g: 212, b: 95 } },
    40: { id: 40, name: "Dark Olive", rgb: { r: 74, g: 107, b: 58 } },
    41: { id: 41, name: "Olive", rgb: { r: 90, g: 148, b: 74 } },
    42: { id: 42, name: "Light Olive", rgb: { r: 132, g: 197, b: 115 } },
    43: { id: 43, name: "Dark Cyan", rgb: { r: 15, g: 121, b: 159 } },
    44: { id: 45, name: "Light Blue", rgb: { r: 125, g: 199, b: 255 } },
    45: { id: 46, name: "Dark Indigo", rgb: { r: 77, g: 49, b: 184 } },
    46: { id: 47, name: "Dark Slate Blue", rgb: { r: 74, g: 66, b: 132 } },
    47: { id: 48, name: "Slate Blue", rgb: { r: 122, g: 113, b: 196 } },
    48: { id: 49, name: "Light Slate Blue", rgb: { r: 181, g: 174, b: 241 } },
    49: { id: 53, name: "Dark Peach", rgb: { r: 155, g: 82, b: 73 } },
    50: { id: 54, name: "Peach", rgb: { r: 209, g: 128, b: 120 } },
    51: { id: 55, name: "Light Peach", rgb: { r: 250, g: 182, b: 164 } },
    52: { id: 50, name: "Light Brown", rgb: { r: 219, g: 164, b: 99 } },
    53: { id: 56, name: "Dark Tan", rgb: { r: 123, g: 99, b: 82 } },
    54: { id: 57, name: "Tan", rgb: { r: 156, g: 132, b: 107 } },
    55: { id: 36, name: "Light Tan", rgb: { r: 214, g: 181, b: 148 } },
    56: { id: 51, name: "Dark Beige", rgb: { r: 209, g: 128, b: 81 } },
    57: { id: 61, name: "Dark Stone", rgb: { r: 109, g: 100, b: 63 } },
    58: { id: 62, name: "Stone", rgb: { r: 148, g: 140, b: 107 } },
    59: { id: 63, name: "Light Stone", rgb: { r: 205, g: 197, b: 158 } },
    60: { id: 58, name: "Dark Slate", rgb: { r: 51, g: 57, b: 65 } },
    61: { id: 59, name: "Slate", rgb: { r: 109, g: 117, b: 141 } },
    62: { id: 60, name: "Light Slate", rgb: { r: 179, g: 185, b: 209 } },
    63: { id: 0, name: "Transparent", rgb: null }
  };

  // src/image/color-palette-selector.js
  function createColorPaletteSelector(container, availableColors = []) {
    log("\u{1F3A8} Creando selector de paleta de colores");
    const paletteSection = document.createElement("div");
    paletteSection.className = "wplace-section";
    paletteSection.id = "color-palette-section";
    paletteSection.style.marginTop = "15px";
    paletteSection.innerHTML = `
    <div class="wplace-section-title">
      <i class="fas fa-palette"></i>&nbsp;Color Palette
    </div>
    <div class="wplace-controls">
      <div class="wplace-row single">
        <label style="display: flex; align-items: center; gap: 8px; font-size: 12px;">
          <input type="checkbox" id="showAllColorsToggle" style="cursor: pointer;">
          <span>Show All Colors (including unavailable)</span>
        </label>
      </div>
      <div class="wplace-row">
        <button id="selectAllBtn" class="wplace-btn">Select All</button>
        <button id="unselectAllBtn" class="wplace-btn">Unselect All</button>
      </div>
      <div id="colors-container" class="wplace-color-grid"></div>
    </div>
  `;
    const style = document.createElement("style");
    style.textContent = `
    .wplace-section {
      background: rgba(255,255,255,0.05);
      border-radius: 8px;
      padding: 15px;
      border: 1px solid rgba(255,255,255,0.1);
    }
    
    .wplace-section-title {
      font-size: 14px;
      font-weight: 600;
      color: #60a5fa;
      margin-bottom: 12px;
      display: flex;
      align-items: center;
    }
    
    .wplace-controls {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .wplace-row {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    
    .wplace-row.single {
      justify-content: flex-start;
    }
    
    .wplace-btn {
      background: #60a5fa;
      color: white;
      border: none;
      border-radius: 6px;
      padding: 6px 12px;
      cursor: pointer;
      font-size: 12px;
      font-weight: 500;
      transition: all 0.2s;
    }
    
    .wplace-btn:hover {
      background: #4facfe;
      transform: translateY(-1px);
    }
    
    .wplace-color-grid {
      display: grid;
      grid-template-columns: repeat(8, 1fr);
      gap: 8px;
      padding: 12px;
      max-height: 300px;
      overflow-y: auto;
      background: rgba(0, 0, 0, 0.1);
      border-radius: 6px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .wplace-color-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 6px;
      min-width: 0;
    }
    
    .wplace-color-item-name {
      font-size: 9px;
      color: #ccc;
      text-align: center;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      width: 100%;
      line-height: 1.2;
    }
    
    .wplace-color-swatch {
      width: 32px;
      height: 32px;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
      margin: 0 auto;
      background: transparent;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .wplace-color-swatch.unavailable {
      border-color: #666;
      border-style: dashed;
      cursor: not-allowed;
      opacity: 0.4;
      filter: grayscale(70%);
    }
    
    .wplace-color-swatch:hover:not(.unavailable) {
      transform: scale(1.05);
      border-color: #60a5fa;
      box-shadow: 0 0 8px rgba(96, 165, 250, 0.3);
      z-index: 1;
    }
    
    .wplace-color-swatch:not(.active):not(.unavailable) {
      opacity: 0.5;
      filter: grayscale(60%);
    }
    
    .wplace-color-swatch.unavailable:not(.active) {
      opacity: 0.3;
      filter: grayscale(80%);
    }
    
    .wplace-color-swatch.active {
      border-color: #10b981;
      opacity: 1;
      filter: none;
      box-shadow: 0 0 6px rgba(16, 185, 129, 0.4);
    }
    
    .wplace-color-swatch.active::after {
      content: '\u2713';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-size: 18px;
      font-weight: bold;
      text-shadow: 
        -1px -1px 0 #000,
        1px -1px 0 #000,
        -1px 1px 0 #000,
        1px 1px 0 #000,
        0 0 3px rgba(0,0,0,0.8);
      z-index: 2;
    }
    
    .wplace-color-item.unavailable .wplace-color-item-name {
      color: #888;
      font-style: italic;
    }
  `;
    const rootNode = container.getRootNode && container.getRootNode();
    const isShadowRoot = rootNode && rootNode.nodeType === 11 && rootNode.host;
    if (isShadowRoot) {
      if (!rootNode.querySelector("#color-palette-styles")) {
        style.id = "color-palette-styles";
        rootNode.appendChild(style);
      }
    } else {
      if (!document.head.querySelector("#color-palette-styles")) {
        style.id = "color-palette-styles";
        document.head.appendChild(style);
      }
    }
    container.appendChild(paletteSection);
    const elements = {
      showAllToggle: paletteSection.querySelector("#showAllColorsToggle"),
      selectAllBtn: paletteSection.querySelector("#selectAllBtn"),
      unselectAllBtn: paletteSection.querySelector("#unselectAllBtn"),
      colorsContainer: paletteSection.querySelector("#colors-container")
    };
    let selectedColors = /* @__PURE__ */ new Set();
    let showUnavailable = false;
    let changeCallback = null;
    function updateActiveColorPalette() {
      selectedColors.clear();
      const activeSwatches = elements.colorsContainer.querySelectorAll(".wplace-color-swatch.active");
      activeSwatches.forEach((swatch) => {
        const colorId = parseInt(swatch.dataset.colorId);
        if (!isNaN(colorId)) {
          selectedColors.add(colorId);
        }
      });
      if (changeCallback) {
        changeCallback(Array.from(selectedColors));
      }
    }
    function toggleAllColors(select, showingUnavailable = false) {
      const swatches = elements.colorsContainer.querySelectorAll(".wplace-color-swatch");
      swatches.forEach((swatch) => {
        const isUnavailable = swatch.classList.contains("unavailable");
        const colorId = parseInt(swatch.dataset.colorId);
        if (!isUnavailable || showingUnavailable) {
          if (!isUnavailable) {
            swatch.classList.toggle("active", select);
            if (select) {
              selectedColors.add(colorId);
            } else {
              selectedColors.delete(colorId);
            }
          }
        }
      });
      updateActiveColorPalette();
      log(`\u{1F3A8} ${select ? "Seleccionados" : "Deseleccionados"} todos los colores disponibles`);
    }
    function populateColors(showUnavailable2 = false) {
      elements.colorsContainer.innerHTML = "";
      if (!availableColors || availableColors.length === 0) {
        elements.colorsContainer.innerHTML = '<div style="text-align: center; color: #888; padding: 20px;">Upload an image first to capture available colors</div>';
        return;
      }
      let _availableCount = 0;
      let _totalCount = 0;
      const hasExistingSelection = selectedColors.size > 0;
      const nextSelected = /* @__PURE__ */ new Set();
      const allColors = Object.values(COLOR_MAP2).filter((color) => color.rgb !== null);
      allColors.forEach((colorData) => {
        const { id, name, rgb } = colorData;
        const rgbKey = `${rgb.r},${rgb.g},${rgb.b}`;
        _totalCount++;
        const isAvailable = availableColors.some(
          (c) => c.r === rgb.r && c.g === rgb.g && c.b === rgb.b
        );
        if (!showUnavailable2 && !isAvailable) {
          return;
        }
        if (isAvailable) _availableCount++;
        const colorItem = document.createElement("div");
        colorItem.className = "wplace-color-item";
        const swatch = document.createElement("button");
        swatch.className = `wplace-color-swatch ${!isAvailable ? "unavailable" : ""}`;
        swatch.title = `${name} (ID: ${id})${!isAvailable ? " (Unavailable)" : ""}`;
        swatch.dataset.rgb = rgbKey;
        swatch.dataset.colorId = id;
        swatch.style.backgroundColor = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
        if (!isAvailable) {
          swatch.disabled = true;
        }
        const shouldBeActive = hasExistingSelection ? selectedColors.has(id) : isAvailable;
        swatch.classList.toggle("active", shouldBeActive);
        if (shouldBeActive) {
          nextSelected.add(id);
        } else {
          nextSelected.delete(id);
        }
        const nameLabel = document.createElement("span");
        nameLabel.className = "wplace-color-item-name";
        nameLabel.textContent = name + (!isAvailable ? " (N/A)" : "");
        if (!isAvailable) {
          nameLabel.style.color = "#888";
          nameLabel.style.fontStyle = "italic";
        }
        if (isAvailable) {
          swatch.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            const wasActive = swatch.classList.contains("active");
            swatch.classList.toggle("active", !wasActive);
            if (wasActive) {
              selectedColors.delete(id);
            } else {
              selectedColors.add(id);
            }
            updateActiveColorPalette();
            log(`\u{1F3A8} Color ${name} (ID: ${id}) ${wasActive ? "deseleccionado" : "seleccionado"}`);
          });
        }
        colorItem.appendChild(swatch);
        colorItem.appendChild(nameLabel);
        elements.colorsContainer.appendChild(colorItem);
      });
      selectedColors = nextSelected;
      const swatches = elements.colorsContainer.querySelectorAll(".wplace-color-swatch");
      swatches.forEach((swatch) => {
        const colorId = parseInt(swatch.dataset.colorId);
        const shouldBeActive = selectedColors.has(colorId);
        swatch.classList.toggle("active", shouldBeActive);
      });
      updateActiveColorPalette();
    }
    elements.showAllToggle.addEventListener("change", (e) => {
      showUnavailable = e.target.checked;
      populateColors(showUnavailable);
    });
    elements.selectAllBtn.addEventListener("click", () => {
      toggleAllColors(true, showUnavailable);
    });
    elements.unselectAllBtn.addEventListener("click", () => {
      toggleAllColors(false, showUnavailable);
    });
    populateColors(false);
    function updateAvailableColors(newAvailableColors) {
      availableColors = newAvailableColors || [];
      populateColors(showUnavailable);
    }
    function getSelectedColors() {
      return Array.from(selectedColors);
    }
    function setSelectedColors(colorIds) {
      selectedColors = new Set(colorIds || []);
      const swatches = elements.colorsContainer.querySelectorAll(".wplace-color-swatch");
      swatches.forEach((swatch) => {
        const colorId = parseInt(swatch.dataset.colorId);
        const shouldBeActive = selectedColors.has(colorId);
        swatch.classList.toggle("active", shouldBeActive);
      });
      if (changeCallback) {
        changeCallback(Array.from(selectedColors));
      }
    }
    function onSelectionChange(callback) {
      changeCallback = callback;
    }
    log("\u2705 Selector de paleta de colores creado");
    return {
      updateAvailableColors,
      getSelectedColors,
      setSelectedColors,
      onSelectionChange,
      element: paletteSection
    };
  }

  // src/image/Resize-window.js
  init_window_manager();
  function createResizeWindow() {
    let resizeElements = null;
    function createResizeElements(container) {
      const resizeWindow = document.createElement("div");
      resizeWindow.style.cssText = `
      position: fixed;
      top: 50px;
      left: 50px;
      width: 450px;
      min-width: 350px;
      max-width: 600px;
      min-height: 400px;
      max-height: 80vh;
      background: #1a1a1a;
      border: 1px solid #333;
      border-radius: 8px;
      color: #eee;
      font-family: 'Segoe UI', Roboto, sans-serif;
      box-shadow: 0 5px 15px rgba(0,0,0,0.5);
      resize: both;
      overflow: auto;
      display: none;
      flex-direction: column;
    `;
      resizeWindow.innerHTML = `
      <div style="padding: 12px 15px; background: #2d3748; color: #60a5fa; font-size: 16px; font-weight: 600; display: flex; justify-content: space-between; align-items: center; cursor: move; flex-shrink: 0;" class="resize-header">
        <div style="display: flex; align-items: center; gap: 8px;">
          \u{1F527} <span>Redimensionar Imagen</span>
        </div>
        <div style="display: flex; gap: 5px;">
          <button id="minimizeResizeBtn" style="background: none; border: none; color: #eee; cursor: pointer; opacity: 0.7; padding: 5px; transition: opacity 0.2s ease;">\u2796</button>
          <button id="closeResizeBtn" style="background: none; border: none; color: #eee; cursor: pointer; opacity: 0.7; padding: 5px; transition: opacity 0.2s ease;">\u2716\uFE0F</button>
        </div>
      </div>
      
      <div style="padding: 15px; flex: 1; overflow-y: auto;" class="resize-content">
        <div class="resize-preview-container" style="display: flex; align-items: center; justify-content: center; text-align: center; margin-bottom: 8px; height: 320px; overflow: hidden; padding: 8px; background: #111; border: 1px solid #333; border-radius: 6px;">
          <img class="resize-preview" alt="Vista previa" draggable="false" style="image-rendering: pixelated; image-rendering: crisp-edges; display: block; margin: 0 auto; width: 100%; height: 100%; object-fit: contain; -webkit-user-drag: none; user-select: none;">
        </div>
        <div class="resize-preview-info" style="font-size: 12px; color: #aaa; text-align: center; margin-bottom: 12px;"></div>
        
        <div class="resize-controls" style="display: flex; flex-direction: column; gap: 15px;">
          <div style="display: flex; align-items: center; gap: 10px;">
            <label style="color: #ffffff; font-size: 14px; display: flex; align-items: center; gap: 8px; margin: 0;">
              <input type="checkbox" class="toggle-original">
              Original
            </label>
            <div style="display: flex; align-items: center; gap: 8px; margin-left: auto;">
              <label style="color: #ffffff; font-size: 14px; white-space: nowrap;">Tolerancia LAB</label>
              <input type="range" class="lab-tolerance" min="0" max="100" step="1" value="100">
              <span class="lab-tolerance-value" style="color:#aaa; font-size:12px;">100</span>
            </div>
          </div>
          <div style="display: flex; flex-direction: column; gap: 5px;">
            <label style="color: #ffffff; font-size: 14px;">Ancho: <span class="width-value"></span>px</label>
            <input type="range" class="resize-slider width-slider" min="50" max="2000" step="1" style="width: 100%;">
          </div>
          
          <div style="display: flex; flex-direction: column; gap: 5px;">
            <label style="color: #ffffff; font-size: 14px;">Alto: <span class="height-value"></span>px</label>
            <input type="range" class="resize-slider height-slider" min="50" max="2000" step="1" style="width: 100%;">
          </div>
          
          <label style="color: #ffffff; font-size: 14px; display: flex; align-items: center; gap: 8px;">
            <input type="checkbox" class="maintain-aspect" checked>
            Mantener proporci\xF3n
          </label>
        </div>
        
        <!-- Aqu\xED se insertar\xE1 el selector de paleta de colores -->
        
        <div class="resize-buttons" style="display: flex; gap: 10px; margin-top: 20px;">
          <button class="btn btn-primary confirm-resize" style="flex: 1; padding: 10px; background: #10b981; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;">\u2705 Aplicar</button>
          <button class="btn btn-secondary cancel-resize" style="flex: 1; padding: 10px; background: #ef4444; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;">\u274C Cancelar</button>
        </div>
      </div>
      
      <!-- Indicador de redimensionamiento -->
      <div style="
        position: absolute;
        bottom: 0;
        right: 0;
        width: 20px;
        height: 20px;
        background: linear-gradient(-45deg, transparent 30%, #666 30%, #666 40%, transparent 40%, transparent 60%, #666 60%, #666 70%, transparent 70%);
        cursor: nw-resize;
        border-bottom-right-radius: 8px;
      "></div>
    `;
      document.body.appendChild(resizeWindow);
      resizeElements = {
        overlay: resizeWindow,
        container: resizeWindow,
        preview: resizeWindow.querySelector(".resize-preview"),
        previewContainer: resizeWindow.querySelector(".resize-preview-container"),
        widthSlider: resizeWindow.querySelector(".width-slider"),
        heightSlider: resizeWindow.querySelector(".height-slider"),
        widthValue: resizeWindow.querySelector(".width-value"),
        heightValue: resizeWindow.querySelector(".height-value"),
        maintainAspect: resizeWindow.querySelector(".maintain-aspect"),
        confirmBtn: resizeWindow.querySelector(".confirm-resize"),
        cancelBtn: resizeWindow.querySelector(".cancel-resize"),
        colorPaletteSelector: null,
        resizeWindow,
        resizeHeader: resizeWindow.querySelector(".resize-header"),
        minimizeBtn: resizeWindow.querySelector("#minimizeResizeBtn"),
        closeBtn: resizeWindow.querySelector("#closeResizeBtn"),
        resizeContent: resizeWindow.querySelector(".resize-content"),
        previewInfo: resizeWindow.querySelector(".resize-preview-info"),
        toggleOriginal: resizeWindow.querySelector(".toggle-original"),
        labTolerance: resizeWindow.querySelector(".lab-tolerance"),
        labToleranceValue: resizeWindow.querySelector(".lab-tolerance-value")
      };
      resizeWindow.addEventListener("dragstart", (e) => e.preventDefault());
      if (resizeElements.preview) {
        resizeElements.preview.addEventListener("dragstart", (e) => e.preventDefault());
      }
      makeDraggable2(resizeWindow, resizeElements.resizeHeader);
      let isMinimized = false;
      resizeElements.minimizeBtn.addEventListener("click", () => {
        isMinimized = !isMinimized;
        if (isMinimized) {
          resizeElements.resizeContent.style.display = "none";
          resizeWindow.style.height = "auto";
          resizeWindow.style.resize = "none";
          resizeElements.minimizeBtn.textContent = "\u2795";
        } else {
          resizeElements.resizeContent.style.display = "block";
          resizeWindow.style.resize = "both";
          resizeElements.minimizeBtn.textContent = "\u2796";
        }
      });
      resizeElements.closeBtn.addEventListener("click", () => {
        closeResizeDialog();
      });
      registerWindow(resizeWindow);
      log("\u2705 Elementos del di\xE1logo de redimensionamiento creados");
    }
    function showResizeDialog(processor, handlers = {}) {
      var _a, _b, _c, _d, _e, _f;
      if (!resizeElements) {
        log("\u274C Error: Elementos de redimensionamiento no inicializados");
        return;
      }
      const dimensions = processor.getDimensions();
      const originalWidth = dimensions.width;
      const originalHeight = dimensions.height;
      let currentWidth = originalWidth;
      let currentHeight = originalHeight;
      let aspectRatio = originalWidth / originalHeight;
      const updatePreview = (usePalette = false, selectedColorsForPreview = null) => {
        try {
          const imgW = currentWidth;
          const imgH = currentHeight;
          let dataUrl = null;
          let stats = null;
          if (resizeElements.toggleOriginal && resizeElements.toggleOriginal.checked && typeof processor.generateOriginalPreview === "function") {
            dataUrl = processor.generateOriginalPreview(imgW, imgH);
          } else if (usePalette && typeof processor.generatePreviewWithPalette === "function") {
            if (Array.isArray(selectedColorsForPreview)) {
              processor.setSelectedColors(selectedColorsForPreview);
            }
            const result = processor.generatePreviewWithPalette(imgW, imgH);
            dataUrl = (result == null ? void 0 : result.dataUrl) || null;
            stats = (result == null ? void 0 : result.stats) || null;
          } else {
            dataUrl = processor.generatePreview(imgW, imgH);
          }
          if (dataUrl) {
            resizeElements.preview.src = dataUrl;
          }
          if (resizeElements.previewInfo) {
            const total = imgW * imgH;
            let extra = "";
            if (stats) {
              extra = ` | Exact: ${stats.exact.toLocaleString()} | LAB: ${stats.lab.toLocaleString()} | Removed: ${stats.removed.toLocaleString()}`;
            }
            resizeElements.previewInfo.textContent = `${imgW}\xD7${imgH} px | Total: ${total.toLocaleString()} p\xEDxeles${extra}`;
          }
        } catch (e) {
          log("\u26A0\uFE0F Error generando vista previa:", e);
        }
      };
      resizeElements.widthSlider.value = originalWidth;
      resizeElements.heightSlider.value = originalHeight;
      resizeElements.widthValue.textContent = originalWidth;
      resizeElements.heightValue.textContent = originalHeight;
      if (!resizeElements.colorPaletteSelector) {
        const colorPaletteContainer = resizeElements.container.querySelector(".resize-content") || resizeElements.container;
        const initialColors = Array.isArray((_a = imageState) == null ? void 0 : _a.availableColors) ? imageState.availableColors : [];
        resizeElements.colorPaletteSelector = createColorPaletteSelector(colorPaletteContainer, initialColors);
      }
      function updateWidth() {
        var _a2, _b2, _c2;
        currentWidth = parseInt(resizeElements.widthSlider.value);
        resizeElements.widthValue.textContent = currentWidth;
        if (resizeElements.maintainAspect.checked) {
          currentHeight = Math.round(currentWidth / aspectRatio);
          resizeElements.heightSlider.value = currentHeight;
          resizeElements.heightValue.textContent = currentHeight;
        }
        const selectedIds = ((_b2 = (_a2 = resizeElements.colorPaletteSelector) == null ? void 0 : _a2.getSelectedColors) == null ? void 0 : _b2.call(_a2)) || [];
        const sourceColors2 = ((_c2 = imageState) == null ? void 0 : _c2.availableColors) || [];
        const byId2 = new Map(sourceColors2.map((c) => [c.id, c]));
        const palette = selectedIds.map((id) => byId2.get(id)).filter(Boolean);
        updatePreview(true, palette);
      }
      function updateHeight() {
        var _a2, _b2, _c2;
        currentHeight = parseInt(resizeElements.heightSlider.value);
        resizeElements.heightValue.textContent = currentHeight;
        if (resizeElements.maintainAspect.checked) {
          currentWidth = Math.round(currentHeight * aspectRatio);
          resizeElements.widthSlider.value = currentWidth;
          resizeElements.widthValue.textContent = currentWidth;
        }
        const selectedIds = ((_b2 = (_a2 = resizeElements.colorPaletteSelector) == null ? void 0 : _a2.getSelectedColors) == null ? void 0 : _b2.call(_a2)) || [];
        const sourceColors2 = ((_c2 = imageState) == null ? void 0 : _c2.availableColors) || [];
        const byId2 = new Map(sourceColors2.map((c) => [c.id, c]));
        const palette = selectedIds.map((id) => byId2.get(id)).filter(Boolean);
        updatePreview(true, palette);
      }
      function handleToggleOriginal() {
        var _a2, _b2, _c2;
        const selectedIds = ((_b2 = (_a2 = resizeElements.colorPaletteSelector) == null ? void 0 : _a2.getSelectedColors) == null ? void 0 : _b2.call(_a2)) || [];
        const sourceColors2 = ((_c2 = imageState) == null ? void 0 : _c2.availableColors) || [];
        const byId2 = new Map(sourceColors2.map((c) => [c.id, c]));
        const palette = selectedIds.map((id) => byId2.get(id)).filter(Boolean);
        updatePreview(true, palette);
      }
      function handleLabToleranceChange() {
        var _a2, _b2, _c2;
        const val = parseInt(resizeElements.labTolerance.value) || 0;
        resizeElements.labToleranceValue.textContent = String(val);
        try {
          processor.setLabTolerance(val);
        } catch {
        }
        const selectedIds = ((_b2 = (_a2 = resizeElements.colorPaletteSelector) == null ? void 0 : _a2.getSelectedColors) == null ? void 0 : _b2.call(_a2)) || [];
        const sourceColors2 = ((_c2 = imageState) == null ? void 0 : _c2.availableColors) || [];
        const byId2 = new Map(sourceColors2.map((c) => [c.id, c]));
        const palette = selectedIds.map((id) => byId2.get(id)).filter(Boolean);
        updatePreview(true, palette);
      }
      function handleMaintainAspectChange() {
        if (resizeElements.maintainAspect.checked) {
          currentWidth = parseInt(resizeElements.widthSlider.value);
          currentHeight = Math.round(currentWidth / aspectRatio);
          resizeElements.heightSlider.value = currentHeight;
          resizeElements.heightValue.textContent = currentHeight;
        }
        updatePreview();
      }
      resizeElements.widthSlider.removeEventListener("input", updateWidth);
      resizeElements.heightSlider.removeEventListener("input", updateHeight);
      resizeElements.maintainAspect.removeEventListener("change", handleMaintainAspectChange);
      resizeElements.widthSlider.addEventListener("input", updateWidth);
      resizeElements.heightSlider.addEventListener("input", updateHeight);
      resizeElements.maintainAspect.addEventListener("change", handleMaintainAspectChange);
      if (resizeElements.toggleOriginal) {
        resizeElements.toggleOriginal.removeEventListener("change", handleToggleOriginal);
        resizeElements.toggleOriginal.addEventListener("change", handleToggleOriginal);
      }
      if (resizeElements.labTolerance) {
        resizeElements.labTolerance.removeEventListener("input", handleLabToleranceChange);
        resizeElements.labTolerance.addEventListener("input", handleLabToleranceChange);
        const initialTol = Math.min(100, Math.max(0, Math.round((_b = processor.labTolerance) != null ? _b : 100)));
        resizeElements.labTolerance.value = String(initialTol);
        resizeElements.labToleranceValue.textContent = String(initialTol);
      }
      function getSelectedColors() {
        var _a2, _b2;
        if (resizeElements.colorPaletteSelector && resizeElements.colorPaletteSelector.getSelectedColors) {
          return resizeElements.colorPaletteSelector.getSelectedColors();
        }
        const activeSwatches = (_b2 = (_a2 = resizeElements.colorPaletteSelector) == null ? void 0 : _a2.element) == null ? void 0 : _b2.querySelectorAll(".wplace-color-swatch.active");
        return activeSwatches ? Array.from(activeSwatches).map((s) => parseInt(s.dataset.colorId)) : [];
      }
      function setupColorPalette(colors) {
        if (!colors || !resizeElements.colorPaletteSelector) return;
        if (resizeElements.colorPaletteSelector.updateAvailableColors) {
          resizeElements.colorPaletteSelector.updateAvailableColors(colors);
        }
      }
      function handleConfirm() {
        const selectedColors = getSelectedColors();
        if (handlers.onConfirmResize) {
          handlers.onConfirmResize(processor, currentWidth, currentHeight, selectedColors);
        }
        closeResizeDialog();
      }
      function handleCancel() {
        closeResizeDialog();
      }
      resizeElements.confirmBtn.removeEventListener("click", handleConfirm);
      resizeElements.cancelBtn.removeEventListener("click", handleCancel);
      resizeElements.confirmBtn.addEventListener("click", handleConfirm);
      resizeElements.cancelBtn.addEventListener("click", handleCancel);
      if (handlers.getAvailableColors) {
        const colors = handlers.getAvailableColors();
        if (Array.isArray(colors) && colors.length > 0) {
          setupColorPalette(colors);
        } else if (Array.isArray((_c = imageState) == null ? void 0 : _c.availableColors) && imageState.availableColors.length > 0) {
          setupColorPalette(imageState.availableColors);
        }
      }
      if (resizeElements.colorPaletteSelector && resizeElements.colorPaletteSelector.onSelectionChange) {
        resizeElements.colorPaletteSelector.onSelectionChange((selectedColorIds) => {
          var _a2;
          let palette = [];
          const sourceColors2 = typeof handlers.getAvailableColors === "function" ? handlers.getAvailableColors() : Array.isArray((_a2 = imageState) == null ? void 0 : _a2.availableColors) ? imageState.availableColors : [];
          if (Array.isArray(sourceColors2) && sourceColors2.length > 0) {
            const byId2 = new Map(sourceColors2.map((c) => [c.id, c]));
            palette = selectedColorIds.map((id) => byId2.get(id)).filter(Boolean);
          }
          if (typeof handlers.onColorSelectionChange === "function") {
            handlers.onColorSelectionChange(selectedColorIds);
          }
          updatePreview(true, palette);
          if (!palette || palette.length === 0) {
            try {
              resizeElements.previewInfo.textContent += " | Sin colores seleccionados: se ocultar\xE1n los p\xEDxeles sin opci\xF3n disponible";
            } catch {
            }
          }
        });
      }
      resizeElements.resizeWindow.style.display = "flex";
      bringWindowToFront(resizeElements.resizeWindow);
      if (resizeElements.previewResizeObserver) {
        try {
          resizeElements.previewResizeObserver.disconnect();
        } catch (_) {
        }
      }
      if (window.ResizeObserver) {
        resizeElements.previewResizeObserver = new window.ResizeObserver(() => updatePreview());
        if (resizeElements.previewContainer) {
          resizeElements.previewResizeObserver.observe(resizeElements.previewContainer);
        }
      } else {
        resizeElements.onWindowResize = () => updatePreview();
        window.addEventListener("resize", resizeElements.onWindowResize, { passive: true });
      }
      const initialIds = ((_e = (_d = resizeElements.colorPaletteSelector) == null ? void 0 : _d.getSelectedColors) == null ? void 0 : _e.call(_d)) || [];
      const sourceColors = ((_f = imageState) == null ? void 0 : _f.availableColors) || [];
      const byId = new Map(sourceColors.map((c) => [c.id, c]));
      const initialPalette = initialIds.map((id) => byId.get(id)).filter(Boolean);
      updatePreview(true, initialPalette);
      log("\u{1F4CF} Di\xE1logo de redimensionamiento mostrado");
    }
    function makeDraggable2(element, handle) {
      let isDragging = false;
      let currentX;
      let currentY;
      let initialX;
      let initialY;
      let xOffset = 0;
      let yOffset = 0;
      const isInteractive = (el) => !!el.closest("button, input, select, textarea, a, label, .btn");
      handle.addEventListener("mousedown", dragStart);
      document.addEventListener("mousemove", drag, { passive: false });
      document.addEventListener("mouseup", dragEnd);
      function dragStart(e) {
        if (!handle.contains(e.target) || isInteractive(e.target)) return;
        e.preventDefault();
        initialX = e.clientX - xOffset;
        initialY = e.clientY - yOffset;
        isDragging = true;
        element.style.userSelect = "none";
        document.body.style.userSelect = "none";
      }
      function drag(e) {
        if (isDragging) {
          e.preventDefault();
          currentX = e.clientX - initialX;
          currentY = e.clientY - initialY;
          xOffset = currentX;
          yOffset = currentY;
          element.style.left = currentX + "px";
          element.style.top = currentY + "px";
        }
      }
      function dragEnd() {
        isDragging = false;
        element.style.userSelect = "";
        document.body.style.userSelect = "";
      }
    }
    function closeResizeDialog() {
      if (!resizeElements || !resizeElements.resizeWindow) {
        log("\u274C Error: Elementos de redimensionamiento no encontrados");
        return;
      }
      resizeElements.resizeWindow.style.display = "none";
      unregisterWindow(resizeElements.resizeWindow);
      if (resizeElements.previewResizeObserver) {
        try {
          resizeElements.previewResizeObserver.disconnect();
        } catch (_) {
        }
        resizeElements.previewResizeObserver = null;
      }
      if (resizeElements.onWindowResize) {
        window.removeEventListener("resize", resizeElements.onWindowResize);
        resizeElements.onWindowResize = null;
      }
      log("\u{1F4CF} Di\xE1logo de redimensionamiento cerrado");
    }
    function initialize(container) {
      createResizeElements(container);
      log("\u2705 Ventana de redimensionamiento inicializada");
    }
    return {
      initialize,
      showResizeDialog,
      closeResizeDialog
    };
  }

  // src/image/safe-guard-window.js
  init_logger();
  init_window_manager();
  function createSafeGuardWindow() {
    function showConfirmDialog2(message, title, buttons = {}) {
      return new Promise((resolve) => {
        const overlay = document.createElement("div");
        overlay.className = "modal-overlay";
        overlay.style.position = "fixed";
        overlay.style.top = "0";
        overlay.style.left = "0";
        overlay.style.width = "100%";
        overlay.style.height = "100%";
        overlay.style.background = "rgba(0,0,0,0.7)";
        overlay.style.zIndex = "10001";
        overlay.style.display = "flex";
        overlay.style.alignItems = "center";
        overlay.style.justifyContent = "center";
        const modal = document.createElement("div");
        modal.style.background = "#1a1a1a";
        modal.style.border = "2px solid #333";
        modal.style.borderRadius = "15px";
        modal.style.padding = "25px";
        modal.style.color = "#eee";
        modal.style.minWidth = "350px";
        modal.style.maxWidth = "400px";
        modal.style.boxShadow = "0 10px 30px rgba(0,0,0,0.5)";
        modal.style.fontFamily = "'Segoe UI', Roboto, sans-serif";
        modal.innerHTML = `
        <h3 style="margin: 0 0 15px 0; text-align: center; font-size: 18px;">${title}</h3>
        <p style="margin: 0 0 20px 0; text-align: center; line-height: 1.4; white-space: pre-line;">${message}</p>
        <div style="display: flex; gap: 10px; justify-content: center;">
          ${buttons.confirm ? `<button class="confirm-btn" style="padding: 10px 20px; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; min-width: 100px; background: #10b981; color: white;">${buttons.confirm}</button>` : ""}
          ${buttons.save ? `<button class="save-btn" style="padding: 10px 20px; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; min-width: 100px; background: #10b981; color: white;">${buttons.save}</button>` : ""}
          ${buttons.discard ? `<button class="discard-btn" style="padding: 10px 20px; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; min-width: 100px; background: #ef4444; color: white;">${buttons.discard}</button>` : ""}
          ${buttons.cancel ? `<button class="cancel-btn" style="padding: 10px 20px; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; min-width: 100px; background: #2d3748; color: white;">${buttons.cancel}</button>` : ""}
        </div>
      `;
        overlay.appendChild(modal);
        document.body.appendChild(overlay);
        registerWindow(overlay);
        const confirmBtn = modal.querySelector(".confirm-btn");
        const saveBtn = modal.querySelector(".save-btn");
        const discardBtn = modal.querySelector(".discard-btn");
        const cancelBtn = modal.querySelector(".cancel-btn");
        const cleanup = () => {
          unregisterWindow(overlay);
          document.body.removeChild(overlay);
        };
        if (confirmBtn) {
          confirmBtn.addEventListener("click", () => {
            cleanup();
            resolve("confirm");
          });
        }
        if (saveBtn) {
          saveBtn.addEventListener("click", () => {
            cleanup();
            resolve("save");
          });
        }
        if (discardBtn) {
          discardBtn.addEventListener("click", () => {
            cleanup();
            resolve("discard");
          });
        }
        if (cancelBtn) {
          cancelBtn.addEventListener("click", () => {
            cleanup();
            resolve("cancel");
          });
        }
        overlay.addEventListener("click", (e) => {
          if (e.target === overlay) {
            cleanup();
            resolve("cancel");
          }
        });
        const handleKeyDown = (e) => {
          if (e.key === "Escape") {
            cleanup();
            document.removeEventListener("keydown", handleKeyDown);
            resolve("cancel");
          }
        };
        document.addEventListener("keydown", handleKeyDown);
      });
    }
    function showGuardDialog2(imageState2) {
      return new Promise((resolve) => {
        const remainingPixelsCount = imageState2.remainingPixels ? imageState2.remainingPixels.length : 0;
        const processor = imageState2.imageData && imageState2.imageData.processor ? imageState2.imageData.processor : null;
        let totalPixelsCount = remainingPixelsCount;
        try {
          if ((!totalPixelsCount || totalPixelsCount === 0) && processor && typeof processor.generatePixelQueue === "function") {
            const all = processor.generatePixelQueue();
            if (Array.isArray(all)) totalPixelsCount = all.length;
          }
        } catch (e) {
        }
        let imageWidth = imageState2.imageData ? imageState2.imageData.width : 0;
        let imageHeight = imageState2.imageData ? imageState2.imageData.height : 0;
        if ((!imageWidth || !imageHeight) && processor && typeof processor.getDimensions === "function") {
          try {
            const dims = processor.getDimensions();
            if (dims && dims.width && dims.height) {
              imageWidth = dims.width;
              imageHeight = dims.height;
            }
          } catch (e) {
          }
        }
        const tileX = typeof imageState2.tileX === "number" ? imageState2.tileX : 0;
        const tileY = typeof imageState2.tileY === "number" ? imageState2.tileY : 0;
        const message = `\xBFDeseas generar un archivo JSON compatible con Auto-Guard.js?

Este archivo contendr\xE1:
\u2022 \xC1rea de protecci\xF3n: ${imageWidth}x${imageHeight} p\xEDxeles
\u2022 Posici\xF3n: Tile (${tileX}, ${tileY})
\u2022 ${totalPixelsCount || 0} p\xEDxeles para proteger

El archivo se guardar\xE1 autom\xE1ticamente y podr\xE1s importarlo en Auto-Guard.js.`;
        showConfirmDialog2(
          message,
          "\u{1F6E1}\uFE0F Generar JSON para Auto-Guard",
          {
            confirm: "S\xED, generar JSON",
            cancel: "No, continuar sin generar"
          }
        ).then((result) => {
          resolve(result === "confirm");
        }).catch(() => {
          resolve(false);
        });
      });
    }
    function saveGuardJSON2(guardData) {
      return new Promise((resolve) => {
        try {
          const hasProtection = guardData && guardData.protectionData && guardData.protectionData.area;
          const area = hasProtection ? guardData.protectionData.area : null;
          const hasAreaFields = area && ["x1", "y1", "x2", "y2"].every((k) => Number.isFinite(area[k]));
          const hasPixels = Array.isArray(guardData == null ? void 0 : guardData.originalPixels);
          const hasColors = Array.isArray(guardData == null ? void 0 : guardData.colors);
          if (!hasProtection || !hasAreaFields || !hasPixels || !hasColors) {
            log("\u274C Estructura inv\xE1lida para JSON del Guard. Abortando guardado.");
            try {
              showNotification("Estructura inv\xE1lida del JSON del Guard. Vuelve a intentarlo tras seleccionar la posici\xF3n.", "error");
            } catch {
            }
            return resolve({ success: false, error: "Invalid Guard JSON structure" });
          }
          const timestamp = (/* @__PURE__ */ new Date()).toISOString().slice(0, 19).replace(/:/g, "-");
          const filename = `wplace_GUARD_from_Image_${timestamp}.json`;
          const dataStr = JSON.stringify(guardData, null, 2);
          const blob = new window.Blob([dataStr], { type: "application/json" });
          const url = window.URL.createObjectURL(blob);
          const link = document.createElement("a");
          link.href = url;
          link.download = filename;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          window.URL.revokeObjectURL(url);
          log(`\u2705 JSON del Guard guardado: ${filename}`);
          resolve({ success: true, filename });
        } catch (error) {
          log(`\u274C Error guardando JSON del Guard: ${error.message}`);
          resolve({ success: false, error: error.message });
        }
      });
    }
    function showNotification(message, type = "info") {
      const notification = document.createElement("div");
      notification.style.position = "fixed";
      notification.style.top = "20px";
      notification.style.right = "20px";
      notification.style.padding = "15px 20px";
      notification.style.borderRadius = "8px";
      notification.style.color = "white";
      notification.style.fontWeight = "bold";
      notification.style.zIndex = "10002";
      notification.style.maxWidth = "300px";
      notification.style.boxShadow = "0 4px 12px rgba(0,0,0,0.3)";
      notification.style.fontFamily = "'Segoe UI', Roboto, sans-serif";
      notification.style.fontSize = "14px";
      switch (type) {
        case "success":
          notification.style.background = "#10b981";
          break;
        case "error":
          notification.style.background = "#ef4444";
          break;
        case "warning":
          notification.style.background = "#f59e0b";
          break;
        default:
          notification.style.background = "#3b82f6";
      }
      notification.textContent = message;
      document.body.appendChild(notification);
      registerWindow(notification);
      setTimeout(() => {
        if (document.body.contains(notification)) {
          unregisterWindow(notification);
          document.body.removeChild(notification);
        }
      }, 3e3);
    }
    return {
      showConfirmDialog: showConfirmDialog2,
      showGuardDialog: showGuardDialog2,
      saveGuardJSON: saveGuardJSON2,
      showNotification
    };
  }
  function showConfirmDialog(message, title, buttons = {}) {
    const safeGuardWindow = createSafeGuardWindow();
    return safeGuardWindow.showConfirmDialog(message, title, buttons);
  }
  function showGuardDialog(imageState2) {
    const safeGuardWindow = createSafeGuardWindow();
    return safeGuardWindow.showGuardDialog(imageState2);
  }
  function saveGuardJSON(guardData) {
    const safeGuardWindow = createSafeGuardWindow();
    return safeGuardWindow.saveGuardJSON(guardData);
  }

  // src/image/ui.js
  init_window_manager();
  async function createImageUI({ texts, ...handlers }) {
    log("\u{1F3A8} Creando interfaz de Auto-Image");
    if (!document.querySelector('link[href*="font-awesome"]')) {
      const fontAwesome = document.createElement("link");
      fontAwesome.rel = "stylesheet";
      fontAwesome.href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css";
      document.head.appendChild(fontAwesome);
      log("\u{1F4E6} FontAwesome a\xF1adido al document.head");
    }
    const { host, root } = createShadowRoot();
    const style = document.createElement("style");
    style.textContent = `
    @keyframes slideIn {
      from { transform: translateY(20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(0, 255, 0, 0.7); }
      70% { box-shadow: 0 0 0 10px rgba(0, 255, 0, 0); }
      100% { box-shadow: 0 0 0 0 rgba(0, 255, 0, 0); }
    }
    
    .container {
      position: fixed;
      top: 20px;
      right: 70px;
      width: 300px;
      min-width: 250px;
      background: #1a1a1a;
      border: 1px solid #333;
      border-radius: 8px;
      padding: 0;
      box-shadow: 0 5px 15px rgba(0,0,0,0.5);
      font-family: 'Segoe UI', Roboto, sans-serif;
      color: #eee;
      animation: slideIn 0.4s ease-out;
      resize: both;
      overflow: auto;
      display: flex;
      flex-direction: column;
      min-height: 200px;
      max-height: 80vh;
    }
    /* Estado minimizado: el contenedor no fuerza altura m\xEDnima */
    .container.minimized {
      min-height: 0 !important;
      height: auto !important;
    }
    
    .header {
      padding: 12px 15px;
      background: #2d3748;
      color: #60a5fa;
      font-size: 16px;
      font-weight: 600;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: move;
      user-select: none;
      flex-shrink: 0;
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .header-controls {
      display: flex;
      gap: 10px;
    }
    
    .header-btn {
      background: none;
      border: none;
      color: #eee;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.2s;
      padding: 5px;
    }
    
    .header-btn:hover {
      opacity: 1;
    }
    
    .content {
      padding: 15px;
      flex: 1;
      overflow-y: auto;
      overflow-x: hidden;
      display: block;
      position: relative;
    }
    
    /* Elementos que se ocultan cuando est\xE1 minimizado */
    .collapsible-content {
      max-height: 1000px;
      transition: max-height 0.35s ease, opacity 0.25s ease, padding 0.25s ease;
    }
    
    .content.collapsed .collapsible-content {
      max-height: 0;
      opacity: 0;
      overflow: hidden;
      padding: 0;
    }
    /* El content deja de expandir al estar colapsado */
    .content.collapsed {
      flex: 0;
    }
    
    /* Status siempre visible */
    .content.collapsed .status {
      display: block !important;
      margin-top: 8px;
      animation: slideIn 0.3s ease-out;
    }
    
    .controls {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 15px;
    }
    
    .config-panel {
      display: none;
      background: #2d3748;
      padding: 10px;
      border-radius: 6px;
      margin-bottom: 10px;
    }
    
    .config-panel.visible {
      display: block;
    }
    
    .config-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 6px;
          font-size: 14px;
        }
        
        .toggle-switch {
          position: relative;
          display: inline-block;
          width: 44px;
          height: 24px;
        }
        
        .toggle-switch input {
          opacity: 0;
          width: 0;
          height: 0;
        }
        
        .toggle-slider {
          position: absolute;
          cursor: pointer;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: #ef4444;
          transition: .3s;
          border-radius: 24px;
        }
        
        .toggle-slider:before {
          position: absolute;
          content: "";
          height: 18px;
          width: 18px;
          left: 3px;
          bottom: 3px;
          background-color: white;
          transition: .3s;
          border-radius: 50%;
        }
        
        input:checked + .toggle-slider {
          background-color: #10b981;
        }
        
        input:checked + .toggle-slider:before {
          transform: translateX(20px);
          background-color: white;
        }
    
    .config-input {
      width: 60px;
      padding: 4px;
      border: 1px solid #333;
      border-radius: 4px;
      background: #1a1a1a;
      color: #eee;
      text-align: center;
      font-size: 14px;
    }
    
    .config-input.paint-pattern {
      width: 140px;
      font-size: 15px;
      padding: 6px;
    }
    
    .config-input[type="text"], 
    .config-input select {
      width: 120px;
      text-align: left;
    }
    
    .config-checkbox {
      margin-right: 8px;
    }
    
    .main-config {
      background: #2d3748;
      padding: 10px;
      border-radius: 6px;
      margin-bottom: 10px;
      border: 1px solid #3a4553;
    }
    
    .config-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
    }
    
    .config-label {
      font-size: 13px;
      color: #cbd5e0;
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .batch-value, .cooldown-value {
      font-weight: bold;
      color: #60a5fa;
    }
    
    .btn {
      padding: 10px;
      border: none;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      transition: all 0.2s;
      font-size: 14px;
    }
    
    .btn-half {
          width: calc(50% - 3px);
        }
    
    .btn-full {
      width: 100%;
    }
    
    .button-row {
          display: flex;
          gap: 6px;
          margin: 3px 0;
        }
    
    .btn:hover:not(:disabled) {
      transform: translateY(-2px);
    }
    
    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
    }
    
    .btn-primary {
      background: #60a5fa;
      color: white;
    }
    
    .btn-upload {
      background: #2d3748;
      color: white;
      border: 1px dashed #eee;
    }
    
    .btn-load {
      background: #2196F3;
      color: white;
    }
    
    .btn-start {
      background: #10b981;
      color: white;
    }
    
    .btn-stop {
      background: #ef4444;
      color: white;
    }
    /* Estilo reforzado cuando la pintura est\xE1 activa */
    .btn-stop-running {
      background: #ef4444 !important;
      color: #fff !important;
      box-shadow: 0 0 0 2px rgba(239,68,68,0.35);
    }
    
    .btn-select {
      background: #f59e0b;
      color: black;
    }
    
    .btn-secondary {
      background: #6b7280;
      color: white;
    }
    
    .progress {
      width: 100%;
      background: #2d3748;
      border-radius: 4px;
      margin: 10px 0;
      overflow: hidden;
      height: 10px;
    }
    
    .progress-bar {
      height: 100%;
      background: #60a5fa;
      transition: width 0.3s;
      width: 0%;
    }
    
    .stats {
      background: #2d3748;
      padding: 12px;
      border-radius: 6px;
      margin-bottom: 15px;
    }
    
    .stat-item {
      display: flex;
      justify-content: space-between;
      padding: 6px 0;
      font-size: 14px;
    }
    
    .stat-label {
      display: flex;
      align-items: center;
      gap: 6px;
      opacity: 0.8;
    }
    
    .status {
      padding: 8px;
      border-radius: 4px;
      text-align: center;
      font-size: 13px;
    }
    
    .status-default {
      background: rgba(255,255,255,0.1);
    }
    
    .status-success {
      background: rgba(0, 255, 0, 0.1);
      color: #10b981;
    }
    
    .status-error {
      background: rgba(255, 0, 0, 0.1);
      color: #ef4444;
    }
    
    .status-warning {
      background: rgba(255, 165, 0, 0.1);
      color: orange;
    }
    
    .status-info {
      background: rgba(0, 150, 255, 0.1);
      color: #60a5fa;
    }

    
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      z-index: 10001;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .modal {
      background: #1a1a1a;
      border: 2px solid #333;
      border-radius: 15px;
      padding: 25px;
      color: #eee;
      min-width: 350px;
      max-width: 400px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.5);
    }
    
    .modal h3 {
      margin: 0 0 15px 0;
      text-align: center;
      font-size: 18px;
    }
    
    .modal p {
      margin: 0 0 20px 0;
      text-align: center;
      line-height: 1.4;
    }
    
    .modal-buttons {
      display: flex;
      gap: 10px;
      justify-content: center;
    }
    
    .modal-btn {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s;
      min-width: 100px;
    }
    
    .modal-btn-save {
      background: #10b981;
      color: white;
    }
    
    .modal-btn-discard {
      background: #ef4444;
      color: white;
    }
    
    .modal-btn-cancel {
      background: #2d3748;
      color: white;
    }
    
    .modal-btn:hover {
      transform: translateY(-2px);
    }
    
    /* Media queries para responsividad */
    @media (max-width: 768px) {
      .container {
        width: calc(100vw - 20px);
        max-width: 350px;
        left: 10px !important;
        right: 10px;
        top: 10px !important;
        font-size: 14px;
      }
      
      .header {
        padding: 10px 12px;
        font-size: 14px;
      }
      
      .content {
        padding: 12px;
      }
      
      .btn {
        padding: 8px;
        font-size: 13px;
      }
      
      .config-item {
        font-size: 13px;
      }
      
      .stat-item {
        font-size: 13px;
      }
    }
    
    @media (max-width: 480px) {
      .container {
        width: calc(100vw - 10px);
        left: 5px !important;
        right: 5px;
        top: 5px !important;
        font-size: 13px;
      }
      
      .header {
        padding: 8px 10px;
        font-size: 13px;
      }
      
      .content {
        padding: 10px;
      }
      
      .btn {
        padding: 6px;
        font-size: 12px;
        gap: 4px;
      }
      
      .config-item {
        font-size: 12px;
        flex-direction: column;
        align-items: flex-start;
        gap: 4px;
      }
      
      .stat-item {
        font-size: 12px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .config-input {
        width: 100%;
        max-width: 120px;
      }
    }
    
    @media (max-height: 600px) {
      .container {
        max-height: calc(100vh - 20px);
        overflow-y: auto;
      }
      
      .stats {
        margin-bottom: 10px;
      }
    }
  `;
    root.appendChild(style);
    const container = document.createElement("div");
    container.className = "container";
    container.innerHTML = `
    <div class="header">
      <div class="header-title">
        \u{1F5BC}\uFE0F
        <span>${texts.title}</span>
      </div>
      <div class="header-controls">
        <button class="header-btn config-btn" title="Configuraci\xF3n">
          \u2699\uFE0F
        </button>
        <button class="header-btn minimize-btn" title="${texts.minimize}">
          \u2796
        </button>
      </div>
    </div>
    <div class="content">
      <div class="collapsible-content">
        <div class="config-panel">
        <div class="config-item">
          <label>${texts.batchSize}:</label>
          <input class="config-input pixels-per-batch" type="number" min="1" max="9999" value="20">
        </div>
        <div class="config-item">
          <label>${texts.useAllCharges}</label>
          <label class="toggle-switch">
            <input class="config-checkbox use-all-charges" type="checkbox" checked>
            <span class="toggle-slider"></span>
          </label>
        </div>
        <div class="config-item">
          <label>${texts.showOverlay || "Mostrar overlay"}</label>
          <label class="toggle-switch">
            <input class="config-checkbox show-overlay" type="checkbox" checked>
            <span class="toggle-slider"></span>
          </label>
        </div>

        <div class="config-item">
          <label>\u{1F4D0} Patr\xF3n de pintado:</label>
          <select class="config-input paint-pattern">
            <option value="linear_start">\u27A1\uFE0F Lineal (Inicio)</option>
            <option value="linear_end">\u2B05\uFE0F Lineal (Final)</option>
            <option value="random">\u{1F3B2} Aleatorio</option>
            <option value="center_out">\u{1F4A5} Centro hacia afuera</option>
            <option value="corners_first">\u{1F3C1} Esquinas primero</option>
            <option value="spiral">\u{1F300} Espiral</option>
            <option value="snake">\u{1F40D} Serpiente (Zigzag)</option>
            <option value="diagonal_sweep">\u{1F4D0} Barrido diagonal</option>
            <option value="borders">\u{1F5BC}\uFE0F Bordes primero</option>
            <option value="center">\u{1F3AF} Centro primero</option>
            <option value="quadrants">\u{1F532} Cuadrantes</option>
            <option value="biased_random">\u{1F3AF} Aleatorio sesgado (bordes)</option>
            <option value="clusters">\u{1F3AA} Clusters</option>
            <option value="proximity">\u{1F91D} Proximidad</option>
            <option value="sweep">\u{1F9F9} Barrido por secciones</option>
            <option value="priority">\u2B50 Prioridad (mixto)</option>
            <option value="anchor_points">\u2693 Puntos de anclaje</option>
            <option value="spiral_cw">\u{1F504} Espiral (horaria)</option>
            <option value="spiral_ccw">\u{1F503} Espiral (antihoraria)</option>
          </select>
        </div>
      </div>
      
      <!-- Configuraci\xF3n visible en la interfaz principal -->
      <div class="main-config">
        <div class="config-row">
          <div class="config-label">
            \u{1F3AF} ${texts.batchSize}:
            <span class="batch-value">20</span>
          </div>
          <div class="config-label">
            \u23F1\uFE0F ${texts.nextBatchTime}:
            <span class="cooldown-value">--</span>
          </div>
        </div>
      </div>
      
      <div class="controls">
        <!-- Botones siempre visibles: Cargar imagen y Cargar progreso -->
        <div class="button-row">
          <button class="btn btn-upload upload-btn btn-half">
            \u{1F4E4}
            <span>${texts.uploadImage}</span>
          </button>
          <button class="btn btn-load load-progress-btn btn-half">
            \u{1F4C1}
            <span>${texts.loadProgress}</span>
          </button>
        </div>
        
        <!-- Botones para imagen: Redimensionar y Seleccionar posici\xF3n -->
        <div class="button-row image-controls" style="display: none;">
          <button class="btn btn-primary resize-btn btn-half">
            \u{1F504}
            <span>${texts.resizeImage}</span>
          </button>
          <button class="btn btn-select select-pos-btn btn-half">
            \u{1F3AF}
            <span>${texts.selectPosition}</span>
          </button>
        </div>
        
        <!-- Botones de control: Iniciar y Detener -->
        <div class="button-row painting-controls" style="display: none;">
          <button class="btn btn-start start-btn btn-half">
            \u25B6\uFE0F
            <span>${texts.startPainting}</span>
          </button>
          <button class="btn btn-stop stop-btn btn-half">
            \u23F9\uFE0F
            <span>${texts.stopPainting}</span>
          </button>
        </div>
        
        <!-- Botones de utilidades -->
        <div class="button-row utility-controls" style="display: none;">
          <button class="btn btn-secondary save-progress-btn btn-half">
            \u{1F4BE}
            <span>Guardar progreso</span>
          </button>
          <button class="btn btn-secondary log-window-btn btn-half">
            \u{1F4CB}
            <span>${texts.logWindow || "Logs"}</span>
          </button>
        </div>
        
        <!-- Guard JSON siempre disponible cuando hay datos -->
        <button class="btn btn-secondary guard-json-btn btn-full guard-controls" style="display: none;">
          \u{1F6E1}\uFE0F
          <span>Guard JSON</span>
        </button>
        
        <!-- Bot\xF3n de inicializaci\xF3n oculto por defecto -->
        <button class="btn btn-primary init-btn btn-full" style="display: none;">
          \u{1F916}
          <span>${texts.initBot}</span>
        </button>
      </div>
      
      <div class="progress">
        <div class="progress-bar"></div>
      </div>
      
      <div class="stats">
        <div class="stats-area">
          <div class="stat-item">
            <div class="stat-label">\u2139\uFE0F ${texts.initMessage}</div>
          </div>
        </div>
      </div>
      </div> <!-- Fin collapsible-content -->
      
      <div class="status status-default">
        ${texts.waitingInit}
      </div>
      

    </div>
  `;
    root.appendChild(container);
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/png,image/jpeg";
    fileInput.style.display = "none";
    root.appendChild(fileInput);
    const progressFileInput = document.createElement("input");
    progressFileInput.type = "file";
    progressFileInput.accept = ".json";
    progressFileInput.style.display = "none";
    root.appendChild(progressFileInput);
    const elements = {
      header: container.querySelector(".header"),
      configBtn: container.querySelector(".config-btn"),
      minimizeBtn: container.querySelector(".minimize-btn"),
      configPanel: container.querySelector(".config-panel"),
      pixelsPerBatch: container.querySelector(".pixels-per-batch"),
      useAllCharges: container.querySelector(".use-all-charges"),
      paintPattern: container.querySelector(".paint-pattern"),
      showOverlay: container.querySelector(".show-overlay"),
      batchValue: container.querySelector(".batch-value"),
      cooldownValue: container.querySelector(".cooldown-value"),
      initBtn: container.querySelector(".init-btn"),
      uploadBtn: container.querySelector(".upload-btn"),
      loadProgressBtn: container.querySelector(".load-progress-btn"),
      saveProgressBtn: container.querySelector(".save-progress-btn"),
      guardJsonBtn: container.querySelector(".guard-json-btn"),
      resizeBtn: container.querySelector(".resize-btn"),
      selectPosBtn: container.querySelector(".select-pos-btn"),
      startBtn: container.querySelector(".start-btn"),
      stopBtn: container.querySelector(".stop-btn"),
      logWindowBtn: container.querySelector(".log-window-btn"),
      progressBar: container.querySelector(".progress-bar"),
      statsArea: container.querySelector(".stats-area"),
      status: container.querySelector(".status"),
      content: container.querySelector(".content"),
      // Contenedores de controles
      imageControls: container.querySelector(".image-controls"),
      paintingControls: container.querySelector(".painting-controls"),
      utilityControls: container.querySelector(".utility-controls"),
      guardControls: container.querySelector(".guard-controls")
    };
    let state = {
      minimized: false,
      configVisible: false
    };
    let windowConfig = {
      width: 300,
      height: "auto",
      x: 20,
      y: 20
    };
    function loadWindowConfig() {
      try {
        const saved = localStorage.getItem("wplace-auto-image-window-config");
        if (saved) {
          windowConfig = { ...windowConfig, ...JSON.parse(saved) };
          applyWindowConfig();
        }
      } catch (error) {
        console.warn("Error cargando configuraci\xF3n de ventana:", error);
      }
    }
    function saveWindowConfig() {
      try {
        localStorage.setItem("wplace-auto-image-window-config", JSON.stringify(windowConfig));
      } catch (error) {
        console.warn("Error guardando configuraci\xF3n de ventana:", error);
      }
    }
    function applyWindowConfig() {
      container.style.width = typeof windowConfig.width === "number" ? windowConfig.width + "px" : windowConfig.width;
      if (typeof windowConfig.height === "number") {
        container.style.height = windowConfig.height + "px";
      }
      container.style.left = windowConfig.x + "px";
      container.style.top = windowConfig.y + "px";
    }
    loadWindowConfig();
    registerWindow(container);
    bringWindowToFront(container);
    makeDraggableWithSave(elements.header, container);
    function makeDraggableWithSave(dragHandle, element) {
      let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
      dragHandle.style.cursor = "move";
      dragHandle.addEventListener("mousedown", dragMouseDown);
      function dragMouseDown(e) {
        if (e.target.closest(".header-btn, .wplace-header-btn")) return;
        e.preventDefault();
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.addEventListener("mouseup", closeDragElement);
        document.addEventListener("mousemove", elementDrag);
      }
      function elementDrag(e) {
        e.preventDefault();
        pos1 = pos3 - e.clientX;
        pos2 = pos4 - e.clientY;
        pos3 = e.clientX;
        pos4 = e.clientY;
        const newTop = element.offsetTop - pos2;
        const newLeft = element.offsetLeft - pos1;
        const maxLeft = window.innerWidth - element.offsetWidth;
        const maxTop = window.innerHeight - element.offsetHeight;
        const constrainedLeft = Math.max(0, Math.min(maxLeft, newLeft));
        const constrainedTop = Math.max(0, Math.min(maxTop, newTop));
        element.style.top = constrainedTop + "px";
        element.style.left = constrainedLeft + "px";
        windowConfig.x = constrainedLeft;
        windowConfig.y = constrainedTop;
      }
      function closeDragElement() {
        document.removeEventListener("mouseup", closeDragElement);
        document.removeEventListener("mousemove", elementDrag);
        saveWindowConfig();
      }
    }
    elements.minimizeBtn.addEventListener("click", () => {
      const content = container.querySelector(".content");
      if (content.classList.contains("collapsed")) {
        content.classList.remove("collapsed");
        container.classList.remove("minimized");
        elements.minimizeBtn.innerHTML = "\u2796";
      } else {
        content.classList.add("collapsed");
        container.classList.add("minimized");
        elements.minimizeBtn.innerHTML = "\u{1F53C}";
      }
    });
    elements.configBtn.addEventListener("click", () => {
      state.configVisible = !state.configVisible;
      if (state.configVisible) {
        elements.configPanel.classList.add("visible");
        elements.configBtn.innerHTML = "\u274C";
      } else {
        elements.configPanel.classList.remove("visible");
        elements.configBtn.innerHTML = "\u2699\uFE0F";
      }
    });
    elements.pixelsPerBatch.addEventListener("change", () => {
      const value = parseInt(elements.pixelsPerBatch.value) || 20;
      elements.batchValue.textContent = value;
      if (handlers.onConfigChange) {
        handlers.onConfigChange({ pixelsPerBatch: value });
      }
    });
    elements.useAllCharges.addEventListener("change", () => {
      if (handlers.onConfigChange) {
        handlers.onConfigChange({ useAllCharges: elements.useAllCharges.checked });
      }
    });
    elements.paintPattern.addEventListener("change", () => {
      if (handlers.onConfigChange) {
        handlers.onConfigChange({ paintPattern: elements.paintPattern.value });
      }
    });
    function showImageControls(show = true) {
      elements.imageControls.style.display = show ? "flex" : "none";
    }
    function showPaintingControls(show = true) {
      elements.paintingControls.style.display = show ? "flex" : "none";
    }
    function showUtilityControls(show = true) {
      elements.utilityControls.style.display = show ? "flex" : "none";
    }
    function showGuardControls(show = true) {
      elements.guardControls.style.display = show ? "flex" : "none";
    }
    function showControlsForImage() {
      showImageControls(true);
      showPaintingControls(true);
      showUtilityControls(true);
      showGuardControls(true);
      log("\u{1F504} Controles de imagen mostrados");
    }
    function showControlsForProgress() {
      showImageControls(false);
      showPaintingControls(true);
      showUtilityControls(true);
      showGuardControls(true);
      log("\u{1F504} Controles de progreso mostrados");
    }
    function hideAllControls() {
      showImageControls(false);
      showPaintingControls(false);
      showUtilityControls(false);
      showGuardControls(false);
      log("\u{1F504} Todos los controles ocultos");
    }
    function enableButtonsAfterInit() {
    }
    elements.initBtn.addEventListener("click", async () => {
      elements.initBtn.disabled = true;
      if (handlers.onInitBot) {
        const success = await handlers.onInitBot();
        if (success) {
          enableButtonsAfterInit();
        }
      }
      elements.initBtn.disabled = false;
    });
    elements.uploadBtn.addEventListener("click", () => {
      fileInput.click();
    });
    fileInput.addEventListener("change", async () => {
      if (fileInput.files.length > 0 && handlers.onUploadImage) {
        const success = await handlers.onUploadImage(fileInput.files[0]);
        if (success) {
          showControlsForImage();
          if (handlers.onResizeImage) {
            setTimeout(() => {
              handlers.onResizeImage();
            }, 500);
          }
        }
      }
    });
    elements.loadProgressBtn.addEventListener("click", () => {
      progressFileInput.click();
    });
    progressFileInput.addEventListener("change", async () => {
      if (progressFileInput.files.length > 0 && handlers.onLoadProgress) {
        const success = await handlers.onLoadProgress(progressFileInput.files[0]);
        if (success) {
          showControlsForProgress();
        }
      }
    });
    elements.saveProgressBtn.addEventListener("click", () => {
      if (handlers.onSaveProgress) {
        handlers.onSaveProgress();
      }
    });
    elements.guardJsonBtn.addEventListener("click", async () => {
      try {
        if (!handlers.generateGuardJSON) {
          alert("No se puede generar el JSON del Guard en este momento.");
          return;
        }
        log("\u{1F6E1}\uFE0F Generando Guard JSON...");
        const data = await handlers.generateGuardJSON();
        if (!data) {
          alert("No hay datos disponibles para guardar.");
          return;
        }
        await saveGuardJSON(data);
      } catch (err2) {
        console.error(err2);
        alert("Error al generar o guardar el Guard JSON");
      }
    });
    elements.resizeBtn.addEventListener("click", () => {
      if (handlers.onResizeImage) {
        handlers.onResizeImage();
      }
    });
    elements.selectPosBtn.addEventListener("click", async () => {
      if (handlers.onSelectPosition) {
        elements.selectPosBtn.disabled = true;
        const success = await handlers.onSelectPosition();
        if (success) {
          elements.startBtn.disabled = false;
        }
        elements.selectPosBtn.disabled = false;
      }
    });
    elements.showOverlay.addEventListener("change", () => {
      if (!window.__WPA_PLAN_OVERLAY__) return;
      window.__WPA_PLAN_OVERLAY__.injectStyles();
      const isEnabled = elements.showOverlay.checked;
      window.__WPA_PLAN_OVERLAY__.setEnabled(isEnabled);
    });
    elements.startBtn.addEventListener("click", async () => {
      if (handlers.onStartPainting) {
        setPaintingState(true);
        const success = await handlers.onStartPainting();
        if (!success) {
          setPaintingState(false);
        }
      }
    });
    elements.stopBtn.addEventListener("click", async () => {
      if (handlers.onStopPainting) {
        const shouldStop = await handlers.onStopPainting();
        if (shouldStop) {
          setPaintingState(false);
        }
      }
    });
    let logWindow = null;
    elements.logWindowBtn.addEventListener("click", () => {
      if (!logWindow) {
        logWindow = createLogWindow("image");
        logWindow.show();
      } else {
        logWindow.toggle();
      }
    });
    function setStatus(message, type = "default") {
      elements.status.textContent = message;
      elements.status.className = `status status-${type}`;
      elements.status.style.animation = "none";
      void elements.status.offsetWidth;
      elements.status.style.animation = "slideIn 0.3s ease-out";
    }
    function updateProgress(current, total, userInfo = null) {
      const percentage = total > 0 ? current / total * 100 : 0;
      elements.progressBar.style.width = `${percentage}%`;
      let statsHTML = `
      <div class="stat-item">
        <div class="stat-label">\u{1F3A8} ${texts.progress}</div>
        <div>${current}/${total} (${percentage.toFixed(1)}%)</div>
      </div>
    `;
      if (userInfo) {
        if (userInfo.username) {
          statsHTML += `
          <div class="stat-item">
            <div class="stat-label">\u{1F464} ${texts.userName}</div>
            <div>${userInfo.username}</div>
          </div>
        `;
        }
        if (userInfo.charges !== void 0) {
          statsHTML += `
          <div class="stat-item">
            <div class="stat-label">\u26A1 ${texts.charges}</div>
            <div>${Math.floor(userInfo.charges)}</div>
          </div>
        `;
        }
        if (userInfo.pixels !== void 0) {
          statsHTML += `
          <div class="stat-item">
            <div class="stat-label">\u{1F533} ${texts.pixels}</div>
            <div>${userInfo.pixels.toLocaleString()}</div>
          </div>
        `;
        }
        if (userInfo.estimatedTime !== void 0 && userInfo.estimatedTime > 0) {
          const hours = Math.floor(userInfo.estimatedTime / 3600);
          const minutes = Math.floor(userInfo.estimatedTime % 3600 / 60);
          const timeStr = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
          statsHTML += `
          <div class="stat-item">
            <div class="stat-label">\u23F0 ${texts.timeRemaining}</div>
            <div>${timeStr}</div>
          </div>
        `;
        }
      }
      elements.statsArea.innerHTML = statsHTML;
    }
    function updateCooldownDisplay(seconds) {
      if (seconds > 0) {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        const timeStr = minutes > 0 ? `${minutes}m ${secs}s` : `${secs}s`;
        elements.cooldownValue.textContent = timeStr;
      } else {
        elements.cooldownValue.textContent = "--";
      }
    }
    function updateCooldownMessage(message) {
      if (message && message.includes("\u23F3")) {
        elements.status.textContent = message;
        elements.status.className = "status status-info";
      } else if (message) {
        setStatus(message, "info");
      }
    }
    function setInitialized(isInitialized) {
      if (isInitialized) {
        elements.initBtn.disabled = true;
        elements.initBtn.style.opacity = "0.6";
        elements.initBtn.innerHTML = `\u2705 <span>${texts.initBot} - Completado</span>`;
      } else {
        elements.initBtn.disabled = false;
        elements.initBtn.style.opacity = "1";
        elements.initBtn.innerHTML = `\u{1F916} <span>${texts.initBot}</span>`;
      }
    }
    function setInitButtonVisible(visible) {
      elements.initBtn.style.display = visible ? "flex" : "none";
    }
    function resetToInitialState() {
      hideAllControls();
      const allButtons = container.querySelectorAll("button");
      allButtons.forEach((btn) => {
        btn.disabled = false;
      });
    }
    function destroy() {
      if (logWindow) {
        logWindow.destroy();
      }
      unregisterWindow(container);
      host.remove();
    }
    function setPaintingState(isPainting) {
      elements.startBtn.disabled = isPainting;
      elements.stopBtn.disabled = !isPainting;
      if (isPainting) {
        elements.stopBtn.classList.add("btn-stop-running");
      } else {
        elements.stopBtn.classList.remove("btn-stop-running");
      }
      elements.loadProgressBtn.disabled = isPainting;
    }
    function updateUIFromState() {
      Promise.resolve().then(() => (init_config2(), config_exports)).then(({ imageState: imageState2 }) => {
        if (elements.useAllCharges) {
          elements.useAllCharges.checked = imageState2.useAllChargesFirst;
        }
        if (elements.paintPattern && imageState2.paintPattern) {
          elements.paintPattern.value = imageState2.paintPattern;
        }
        if (elements.showOverlay && imageState2.showOverlay !== void 0) {
          elements.showOverlay.checked = imageState2.showOverlay;
        }
        log("\u2705 Interfaz actualizada con valores del estado cargado");
      }).catch((error) => {
        log("\u26A0\uFE0F Error actualizando interfaz desde estado:", error);
      });
    }
    const resizeWindow = createResizeWindow();
    resizeWindow.initialize(root);
    log("\u2705 Interfaz de Auto-Image creada");
    hideAllControls();
    return {
      setStatus,
      updateProgress,
      updateCooldownDisplay,
      updateCooldownMessage,
      setInitialized,
      setInitButtonVisible,
      enableButtonsAfterInit,
      showControlsForImage,
      showControlsForProgress,
      resetToInitialState,
      showResizeDialog: (processor) => {
        resizeWindow.showResizeDialog(processor, {
          getAvailableColors: handlers.getAvailableColors,
          onColorSelectionChange: handlers.onColorSelectionChange,
          onConfirmResize: handlers.onConfirmResize
        });
      },
      closeResizeDialog: () => {
        resizeWindow.closeResizeDialog();
      },
      setPaintingState,
      updateUIFromState,
      destroy,
      // Exponer generador de JSON para Auto-Guard si fue provisto por los handlers
      generateGuardJSON: handlers.generateGuardJSON,
      elements
    };
  }

  // src/image/index.js
  init_wplace_api();
  init_locales();

  // src/core/dom.js
  function isPaletteOpen(debug = false) {
    const paletteSelectors = [
      '[data-testid="color-picker"]',
      ".color-picker",
      ".palette",
      '[class*="color"][class*="picker"]',
      '[class*="palette"]'
    ];
    for (const selector of paletteSelectors) {
      const element = document.querySelector(selector);
      if (element && element.offsetParent !== null) {
        if (debug) console.log(`[WPA-UI] \u{1F3A8} Paleta detectada por selector: ${selector}`);
        return true;
      }
    }
    const colorElements = document.querySelectorAll('[style*="background-color"], [style*="background:"], .color, [class*="color"]');
    let visibleColors = 0;
    for (const el of colorElements) {
      if (el.offsetParent !== null && el.offsetWidth > 10 && el.offsetHeight > 10) {
        visibleColors++;
        if (visibleColors >= 5) {
          if (debug) console.log(`[WPA-UI] \u{1F3A8} Paleta detectada por colores visibles: ${visibleColors}`);
          return true;
        }
      }
    }
    if (debug) console.log(`[WPA-UI] \u{1F50D} Paleta no detectada. Colores visibles: ${visibleColors}`);
    return false;
  }
  function findAndClickPaintButton(debug = false, doubleClick = false) {
    const specificButton = document.querySelector("button.btn.btn-primary.btn-lg, button.btn.btn-primary.sm\\:btn-xl");
    if (specificButton) {
      const buttonText = specificButton.textContent.toLowerCase();
      const hasPaintText = buttonText.includes("paint") || buttonText.includes("pintar");
      const hasPaintIcon = specificButton.querySelector('svg path[d*="240-120"]') || specificButton.querySelector('svg path[d*="M15"]');
      if (hasPaintText || hasPaintIcon) {
        if (debug) console.log(`[WPA-UI] \u{1F3AF} Bot\xF3n Paint encontrado por selector espec\xEDfico: "${buttonText}"`);
        specificButton.click();
        if (doubleClick) {
          setTimeout(() => {
            if (debug) console.log(`[WPA-UI] \u{1F3AF} Segundo clic en bot\xF3n Paint`);
            specificButton.click();
          }, 500);
        }
        return true;
      }
    }
    const buttons = document.querySelectorAll("button");
    for (const button of buttons) {
      const buttonText = button.textContent.toLowerCase();
      if ((buttonText.includes("paint") || buttonText.includes("pintar")) && button.offsetParent !== null && !button.disabled) {
        if (debug) console.log(`[WPA-UI] \u{1F3AF} Bot\xF3n Paint encontrado por texto: "${button.textContent.trim()}"`);
        button.click();
        if (doubleClick) {
          setTimeout(() => {
            if (debug) console.log(`[WPA-UI] \u{1F3AF} Segundo clic en bot\xF3n Paint`);
            button.click();
          }, 500);
        }
        return true;
      }
    }
    if (debug) console.log(`[WPA-UI] \u274C Bot\xF3n Paint no encontrado`);
    return false;
  }
  async function autoClickPaintButton(maxAttempts = 3, debug = true) {
    if (debug) console.log(`[WPA-UI] \u{1F916} Iniciando auto-click del bot\xF3n Paint (m\xE1ximo ${maxAttempts} intentos)`);
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      if (debug) console.log(`[WPA-UI] \u{1F3AF} Intento ${attempt}/${maxAttempts} - Buscando bot\xF3n Paint...`);
      if (isPaletteOpen()) {
        if (debug) console.log(`[WPA-UI] \u2705 Paleta ya est\xE1 abierta, auto-click completado`);
        return true;
      }
      if (findAndClickPaintButton(debug, false)) {
        if (debug) console.log(`[WPA-UI] \u{1F446} Clic en bot\xF3n Paint realizado (sin segundo clic)`);
        await new Promise((resolve) => setTimeout(resolve, 1500));
        if (isPaletteOpen()) {
          if (debug) console.log(`[WPA-UI] \u2705 Paleta abierta exitosamente despu\xE9s del intento ${attempt}`);
          return true;
        } else {
          if (debug) console.log(`[WPA-UI] \u26A0\uFE0F Paleta no detectada tras el clic en intento ${attempt}. Reintentar\xE1.`);
        }
      } else {
        if (debug) console.log(`[WPA-UI] \u274C Bot\xF3n Paint no encontrado para clic en intento ${attempt}`);
      }
      if (attempt < maxAttempts) {
        await new Promise((resolve) => setTimeout(resolve, 1e3));
      }
    }
    if (debug) console.log(`[WPA-UI] \u274C Auto-click fall\xF3 despu\xE9s de ${maxAttempts} intentos`);
    return false;
  }

  // src/core/warmup.js
  init_logger();
  init_turnstile();
  init_pawtect();
  init_fingerprint();
  async function prepareTokensForBot(botName = "Bot") {
    log(`\u{1F680} [${botName}] Preparando tokens (modo simplificado)`);
    try {
      ensureFingerprint({});
    } catch {
    }
    try {
      seedPawtect();
    } catch {
    }
    return { success: true, fingerprint: getFingerprint(), pawtectToken: getPawtectToken(), skipped: true };
  }

  // src/image/plan-overlay-blue-marble.js
  (() => {
    const TILE_SIZE = 3e3;
    const state = {
      enabled: false,
      templates: [],
      // Plantillas estilo Blue Marble
      templatesShouldBeDrawn: true,
      tileSize: 1e3,
      // Tamaño de tile (como Blue Marble)
      drawMult: 3,
      // Multiplicador de dibujo
      // Plan de píxeles actual
      pixelPlan: null,
      nextBatchCount: 0,
      anchor: null,
      // { tileX, tileY, pxX, pxY }
      imageWidth: null,
      imageHeight: null,
      // Sistema de intercepción
      originalFetch: null,
      fetchedBlobQueue: /* @__PURE__ */ new Map(),
      isIntercepting: false
    };
    function injectStyles() {
    }
    function startFetchInterception() {
      if (state.isIntercepting) return;
      state.originalFetch = window.fetch;
      state.isIntercepting = true;
      window.fetch = async function(...args) {
        var _a;
        const response = await state.originalFetch.apply(this, args);
        const cloned = response.clone();
        const endpointName = (args[0] instanceof Request ? (_a = args[0]) == null ? void 0 : _a.url : args[0]) || "ignore";
        const contentType = cloned.headers.get("content-type") || "";
        if (contentType.includes("image/") && endpointName.includes("/tiles/") && !endpointName.includes("openfreemap") && !endpointName.includes("maps")) {
          try {
            const blob = await cloned.blob();
            const processedBlob = await drawPlanOnTile(blob, endpointName);
            return new Response(processedBlob, {
              headers: cloned.headers,
              status: cloned.status,
              statusText: cloned.statusText
            });
          } catch (error) {
            console.error("[PLAN OVERLAY] Error processing tile:", error);
            return response;
          }
        }
        return response;
      };
    }
    function stopFetchInterception() {
      if (!state.isIntercepting || !state.originalFetch) return;
      window.fetch = state.originalFetch;
      state.isIntercepting = false;
    }
    async function drawPlanOnTile(tileBlob, endpointUrl) {
      if (!state.enabled || !state.templatesShouldBeDrawn || !state.pixelPlan) {
        return tileBlob;
      }
      const urlParts = endpointUrl.split("/");
      const tileY = parseInt(urlParts[urlParts.length - 1].replace(".png", ""));
      const tileX = parseInt(urlParts[urlParts.length - 2]);
      if (isNaN(tileX) || isNaN(tileY)) {
        console.warn("[PLAN OVERLAY] Could not extract tile coordinates from URL:", endpointUrl);
        return tileBlob;
      }
      const tilePixels = getPixelsForTile(tileX, tileY);
      if (tilePixels.length === 0) {
        return tileBlob;
      }
      const drawSize = state.tileSize * state.drawMult;
      const tileBitmap = await createImageBitmap(tileBlob);
      const canvas = new OffscreenCanvas(drawSize, drawSize);
      const context = canvas.getContext("2d");
      context.imageSmoothingEnabled = false;
      context.clearRect(0, 0, drawSize, drawSize);
      context.drawImage(tileBitmap, 0, 0, drawSize, drawSize);
      drawPixelsOnTile(context, tilePixels, tileX, tileY);
      return await canvas.convertToBlob({ type: "image/png" });
    }
    function getPixelsForTile(tileX, tileY) {
      if (!state.pixelPlan || !state.pixelPlan.pixels) return [];
      return state.pixelPlan.pixels.filter((pixel) => {
        const pixelTileX = Math.floor(pixel.globalX / TILE_SIZE);
        const pixelTileY = Math.floor(pixel.globalY / TILE_SIZE);
        return pixelTileX === tileX && pixelTileY === tileY;
      });
    }
    function drawPixelsOnTile(context, pixels, tileX, tileY) {
      const tileStartX = tileX * TILE_SIZE;
      const tileStartY = tileY * TILE_SIZE;
      context.globalAlpha = 0.7;
      for (const pixel of pixels) {
        const localX = (pixel.globalX - tileStartX) * state.drawMult + 1;
        const localY = (pixel.globalY - tileStartY) * state.drawMult + 1;
        if (localX >= 0 && localX < state.tileSize * state.drawMult && localY >= 0 && localY < state.tileSize * state.drawMult) {
          context.fillStyle = `rgb(${pixel.r},${pixel.g},${pixel.b})`;
          context.fillRect(localX, localY, 1, 1);
        }
      }
      if (state.nextBatchCount > 0) {
        context.globalAlpha = 1;
        const batchPixels = pixels.slice(0, state.nextBatchCount);
        for (const pixel of batchPixels) {
          const localX = (pixel.globalX - tileStartX) * state.drawMult + 1;
          const localY = (pixel.globalY - tileStartY) * state.drawMult + 1;
          if (localX >= 0 && localX < state.tileSize * state.drawMult && localY >= 0 && localY < state.tileSize * state.drawMult) {
            context.fillStyle = `rgb(${pixel.r},${pixel.g},${pixel.b})`;
            context.fillRect(localX, localY, 1, 1);
          }
        }
      }
    }
    function setEnabled(enabled) {
      state.enabled = !!enabled;
      if (state.enabled) {
        startFetchInterception();
      } else {
        stopFetchInterception();
      }
    }
    function setPlan(planItems, opts = {}) {
      var _a, _b, _c;
      if (!planItems || planItems.length === 0) {
        state.pixelPlan = null;
        return;
      }
      const pixels = [];
      for (const item of planItems) {
        let globalX, globalY;
        if (typeof item.tileX === "number" && typeof item.localX === "number") {
          globalX = item.tileX * TILE_SIZE + item.localX;
          globalY = item.tileY * TILE_SIZE + item.localY;
        } else if (opts.anchor && typeof item.imageX === "number") {
          const baseX = opts.anchor.tileX * TILE_SIZE + (opts.anchor.pxX || 0);
          const baseY = opts.anchor.tileY * TILE_SIZE + (opts.anchor.pxY || 0);
          globalX = baseX + item.imageX;
          globalY = baseY + item.imageY;
        } else {
          continue;
        }
        pixels.push({
          globalX,
          globalY,
          r: ((_a = item.color) == null ? void 0 : _a.r) || 0,
          g: ((_b = item.color) == null ? void 0 : _b.g) || 0,
          b: ((_c = item.color) == null ? void 0 : _c.b) || 0
        });
      }
      state.pixelPlan = { pixels };
      state.nextBatchCount = opts.nextBatchCount || 0;
      state.anchor = opts.anchor || null;
      state.imageWidth = opts.imageWidth || null;
      state.imageHeight = opts.imageHeight || null;
      if (typeof opts.enabled === "boolean") {
        setEnabled(opts.enabled);
      }
    }
    function setNextBatchCount(count) {
      state.nextBatchCount = Math.max(0, Number(count || 0));
    }
    function setAnchor(anchor) {
      state.anchor = anchor;
    }
    function setAnchorCss() {
    }
    function endSelectionMode() {
    }
    function cleanup() {
      stopFetchInterception();
      state.pixelPlan = null;
      state.fetchedBlobQueue.clear();
    }
    window.__WPA_PLAN_OVERLAY__ = {
      injectStyles,
      setEnabled,
      setPlan,
      setPlanItemsFromTileList: setPlan,
      // Alias
      setNextBatchCount,
      setAnchor,
      setAnchorCss,
      endSelectionMode,
      render: () => {
      },
      cleanup,
      get state() {
        return state;
      }
    };
  })();

  // src/image/index.js
  init_client();
  init_config();
  async function runImage() {
    console.log("[WPA-Image] \u{1F680} runImage() iniciado");
    log("\u{1F680} Iniciando WPlace Auto-Image (versi\xF3n modular)");
    console.log("[WPA-Image] \u{1F30D} Inicializando sistema de idiomas");
    initializeLanguage();
    console.log("[WPA-Image] \u2705 Sistema de idiomas inicializado");
    window.__wplaceBot = { ...window.__wplaceBot, imageRunning: true };
    console.log("[WPA-Image] \u{1F527} Estado global actualizado");
    try {
      const result = await prepareTokensForBot("Auto-Image");
      if (!result.success) {
        log("\u26A0\uFE0F [image] Tokens no preparados, continuando con interceptor activo");
      }
    } catch (error) {
      log("\u274C [image] Error preparando tokens:", error);
    }
    let currentUserInfo = null;
    let originalFetch = window.fetch;
    const restoreFetch = () => {
      const overlayActive = window.__WPA_PLAN_OVERLAY__ && window.__WPA_PLAN_OVERLAY__.state && window.__WPA_PLAN_OVERLAY__.state.enabled;
      if (window.fetch !== originalFetch && !overlayActive) {
        window.fetch = originalFetch;
        log("\u{1F504} Fetch original restaurado");
      } else if (overlayActive) {
        log("\u{1F504} Fetch NO restaurado - overlay activo");
      }
      if (imageState.positionTimeoutId) {
        clearTimeout(imageState.positionTimeoutId);
        imageState.positionTimeoutId = null;
      }
      if (imageState.cleanupObserver) {
        imageState.cleanupObserver();
        imageState.cleanupObserver = null;
      }
      imageState.selectingPosition = false;
    };
    try {
      try {
        const mcfg = getMetricsConfig({ VARIANT: "auto-image" });
        if (mcfg.ENABLED) {
          if (!window.__wplaceMetrics) window.__wplaceMetrics = {};
          log(`[METRICS] enabled \u2192 ${mcfg.BASE_URL}`);
          window.__wplaceMetrics.imageSessionActive = true;
          sessionStart({ botVariant: "auto-image" });
          const pingEvery = Math.max(6e4, mcfg.PING_INTERVAL_MS || 3e5);
          window.__wplaceMetrics.imagePingInterval = window.setInterval(() => sessionPing({ botVariant: "auto-image" }), pingEvery);
        }
      } catch {
      }
      const config = { ...IMAGE_DEFAULTS };
      const texts = getSection("image");
      imageState.language = getCurrentLanguage();
      if (!config.SITEKEY) {
        const siteKeyElement = document.querySelector("*[data-sitekey]");
        if (siteKeyElement) {
          config.SITEKEY = siteKeyElement.getAttribute("data-sitekey");
          log(`\u{1F4DD} Sitekey encontrada autom\xE1ticamente: ${config.SITEKEY.substring(0, 20)}...`);
        } else {
          log("\u26A0\uFE0F No se pudo encontrar la sitekey autom\xE1ticamente");
        }
      }
      async function tryAutoInit() {
        log("\u{1F916} Intentando auto-inicio...");
        if (isPaletteOpen()) {
          log("\u{1F3A8} Paleta de colores ya est\xE1 abierta");
          return true;
        }
        log("\u{1F50D} Paleta no encontrada, iniciando auto-click del bot\xF3n Paint...");
        const success = await autoClickPaintButton(3, true);
        if (success) {
          log("\u2705 Auto-click exitoso, paleta abierta");
          return true;
        } else {
          log("\u274C Auto-click fall\xF3, requerir\xE1 inicio manual");
          return false;
        }
      }
      async function initializeBot(isAutoInit = false) {
        log("\u{1F916} Inicializando Auto-Image...");
        ui.setStatus(t("image.checkingColors"), "info");
        const colors = detectAvailableColors();
        if (colors.length === 0) {
          ui.setStatus(t("image.noColorsFound"), "error");
          return false;
        }
        imageState.availableColors = colors;
        log(`\u2705 ${colors.length} colores almacenados en estado global`);
        const sessionInfo = await getSession();
        let userInfo = null;
        if (sessionInfo.success && sessionInfo.data.user) {
          userInfo = {
            username: sessionInfo.data.user.name || "An\xF3nimo",
            charges: sessionInfo.data.charges,
            maxCharges: sessionInfo.data.maxCharges,
            pixels: sessionInfo.data.user.pixelsPainted || 0
            // Usar pixelsPainted en lugar de pixels
          };
          currentUserInfo = userInfo;
          imageState.currentCharges = sessionInfo.data.charges;
          imageState.maxCharges = sessionInfo.data.maxCharges || 9999;
          log(`\u{1F464} Usuario conectado: ${sessionInfo.data.user.name || "An\xF3nimo"} - Cargas: ${userInfo.charges}/${userInfo.maxCharges} - P\xEDxeles: ${userInfo.pixels}`);
        } else {
          log("\u26A0\uFE0F No se pudo obtener informaci\xF3n del usuario");
        }
        imageState.availableColors = colors;
        imageState.colorsChecked = true;
        ui.setStatus(t("image.colorsFound", { count: colors.length }), "success");
        ui.updateProgress(0, 0, userInfo);
        if (!isAutoInit) {
          log(`\u2705 ${colors.length} colores disponibles detectados`);
        }
        ui.setInitialized(true);
        ui.enableButtonsAfterInit();
        try {
        } catch {
        }
        return true;
      }
      const ui = await createImageUI({
        texts,
        onConfigChange: (config2) => {
          if (config2.pixelsPerBatch !== void 0) {
            imageState.pixelsPerBatch = config2.pixelsPerBatch;
          }
          if (config2.useAllCharges !== void 0) {
            imageState.useAllChargesFirst = config2.useAllCharges;
          }
          if (config2.paintPattern !== void 0) {
            imageState.paintPattern = config2.paintPattern;
            log(`\u{1F3A8} Patr\xF3n de pintado cambiado a: ${config2.paintPattern}`);
            if (imageState.remainingPixels && imageState.remainingPixels.length > 0) {
              Promise.resolve().then(() => (init_patterns(), patterns_exports)).then(({ applyPaintPattern: applyPaintPattern2 }) => {
                imageState.remainingPixels = applyPaintPattern2(
                  imageState.remainingPixels,
                  config2.paintPattern,
                  imageState.imageData
                );
                try {
                  if (window.__WPA_PLAN_OVERLAY__) {
                    window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
                      enabled: true,
                      nextBatchCount: imageState.pixelsPerBatch
                    });
                    log(`\u2705 Overlay actualizado con nuevo patr\xF3n: ${config2.paintPattern}`);
                  }
                } catch (e) {
                  log("\u26A0\uFE0F Error actualizando overlay con nuevo patr\xF3n:", e);
                }
              }).catch((error) => {
                log("\u274C Error aplicando nuevo patr\xF3n:", error);
              });
            }
          }
          log(`Configuraci\xF3n actualizada:`, config2);
        },
        onInitBot: initializeBot,
        onUploadImage: async (file) => {
          try {
            ui.setStatus(t("image.loadingImage"), "info");
            const imageUrl = window.URL.createObjectURL(file);
            const processor = new BlueMarblelImageProcessor(imageUrl);
            processor.originalName = file.name;
            await processor.load();
            const availableColors = processor.initializeColorPalette();
            imageState.availableColors = availableColors;
            processor.setLabTolerance(100);
            const analysisResult = await processor.analyzePixels();
            processor.setCoords(0, 0, 0, 0);
            try {
              await processor.remapImageToPalette();
              log("\u2705 Imagen remapeada a paleta autom\xE1ticamente tras subir");
            } catch (e) {
              log("\u26A0\uFE0F Error remapeando imagen tras subir (continuando con original):", e);
            }
            const processedData = processor.getImageData();
            imageState.imageData = processedData;
            imageState.imageData.processor = processor;
            imageState.totalPixels = analysisResult.requiredPixels;
            imageState.paintedPixels = 0;
            imageState.originalImageName = file.name;
            imageState.imageLoaded = true;
            ui.setStatus(t("image.imageLoaded", { count: analysisResult.requiredPixels }), "success");
            ui.updateProgress(0, analysisResult.requiredPixels, currentUserInfo);
            log(`\u2705 [BLUE MARBLE] Imagen cargada: ${processedData.width}x${processedData.height}, ${analysisResult.requiredPixels} p\xEDxeles v\xE1lidos`);
            log(`\u2705 [BLUE MARBLE] An\xE1lisis: ${analysisResult.uniqueColors} colores \xFAnicos, ${analysisResult.defacePixels} p\xEDxeles #deface`);
            window.URL.revokeObjectURL(imageUrl);
            try {
              if (window.__WPA_PLAN_OVERLAY__) {
                window.__WPA_PLAN_OVERLAY__.injectStyles();
                window.__WPA_PLAN_OVERLAY__.setEnabled(true);
                window.__WPA_PLAN_OVERLAY__.setPlan([], {
                  enabled: true,
                  nextBatchCount: 0
                });
                log("\u2705 Plan overlay activado autom\xE1ticamente al cargar imagen");
              }
            } catch (e) {
              log("\u26A0\uFE0F Error activando plan overlay:", e);
            }
            return true;
          } catch (error) {
            ui.setStatus(t("image.imageError"), "error");
            log("\u274C Error cargando imagen:", error);
            return false;
          }
        },
        onSelectPosition: async () => {
          return new Promise((resolve) => {
            ui.setStatus(t("image.selectPositionAlert"), "info");
            ui.setStatus(t("image.waitingPosition"), "info");
            imageState.selectingPosition = true;
            let positionCaptured = false;
            const setupFetchInterception = () => {
              window.fetch = async (url, options) => {
                if (imageState.selectingPosition && !positionCaptured && typeof url === "string" && url.includes("/s0/pixel/") && options && options.method === "POST") {
                  try {
                    log(`\u{1F3AF} Interceptando request de pintado: ${url}`);
                    const response = await originalFetch(url, options);
                    if (response.ok && options.body) {
                      let bodyData;
                      try {
                        bodyData = JSON.parse(options.body);
                      } catch (parseError) {
                        log("Error parseando body del request:", parseError);
                        return response;
                      }
                      if (bodyData.coords && Array.isArray(bodyData.coords) && bodyData.coords.length >= 2) {
                        const localX = bodyData.coords[0];
                        const localY = bodyData.coords[1];
                        const tileMatch = url.match(/\/s0\/pixel\/(-?\d+)\/(-?\d+)/);
                        if (tileMatch && !positionCaptured) {
                          positionCaptured = true;
                          const tileX = parseInt(tileMatch[1]);
                          const tileY = parseInt(tileMatch[2]);
                          imageState.tileX = tileX;
                          imageState.tileY = tileY;
                          imageState.startPosition = { x: localX, y: localY };
                          imageState.selectingPosition = false;
                          if (imageState.imageData && imageState.imageData.processor) {
                            const processor = imageState.imageData.processor;
                            processor.setCoords(tileX, tileY, localX, localY);
                            try {
                              await processor.createTemplateTiles();
                              log(`\u2705 [BLUE MARBLE] Template tiles creados para posici\xF3n tile(${tileX},${tileY}) pixel(${localX},${localY})`);
                            } catch (error) {
                              log(`\u274C [BLUE MARBLE] Error creando template tiles: ${error.message}`);
                            }
                            const pixelQueue = processor.generatePixelQueue();
                            imageState.remainingPixels = pixelQueue;
                            if (!imageState.totalPixels || imageState.totalPixels === 0) {
                              imageState.totalPixels = pixelQueue.length;
                            }
                            log(`\u2705 Cola de p\xEDxeles generada: ${pixelQueue.length} p\xEDxeles para overlay`);
                          }
                          try {
                            if (window.__WPA_PLAN_OVERLAY__) {
                              window.__WPA_PLAN_OVERLAY__.setEnabled(false);
                              window.__WPA_PLAN_OVERLAY__.setPlan([], {});
                              window.__WPA_PLAN_OVERLAY__.injectStyles();
                              window.__WPA_PLAN_OVERLAY__.setEnabled(true);
                              window.__WPA_PLAN_OVERLAY__.setAnchor({
                                tileX,
                                tileY,
                                pxX: localX,
                                pxY: localY
                              });
                              if (imageState.remainingPixels && imageState.remainingPixels.length > 0) {
                                window.__WPA_PLAN_OVERLAY__.setPlan(imageState.remainingPixels, {
                                  anchor: { tileX, tileY, pxX: localX, pxY: localY },
                                  imageWidth: imageState.imageData.width,
                                  imageHeight: imageState.imageData.height,
                                  enabled: true
                                });
                                log(`\u2705 Plan overlay reiniciado y anclado en tile(${tileX},${tileY}) local(${localX},${localY})`);
                              } else {
                                log(`\u26A0\uFE0F No hay p\xEDxeles para mostrar en overlay`);
                              }
                            }
                          } catch (error) {
                            log(`\u274C Error configurando overlay: ${error.message}`);
                          }
                          restoreFetch();
                          ui.setStatus(t("image.positionSet"), "success");
                          log(`\u2705 Posici\xF3n establecida: tile(${imageState.tileX},${imageState.tileY}) local(${localX},${localY})`);
                          setTimeout(async () => {
                            try {
                              log("\u{1F6E1}\uFE0F Mostrando di\xE1logo de Auto-Guard...");
                              const userWantsGuard = await showGuardDialog(imageState);
                              if (userWantsGuard) {
                                log("\u2705 Usuario acept\xF3 generar JSON para Auto-Guard");
                                let guardData = null;
                                if (typeof ui.generateGuardJSON === "function") {
                                  guardData = ui.generateGuardJSON();
                                } else {
                                  throw new Error("generateGuardJSON no est\xE1 disponible en la UI");
                                }
                                await saveGuardJSON(guardData);
                              } else {
                                log("\u2139\uFE0F Usuario decidi\xF3 no generar JSON para Auto-Guard");
                              }
                            } catch (error) {
                              log("\u274C Error mostrando di\xE1logo de Auto-Guard:", error);
                            }
                          }, 1e3);
                          resolve(true);
                        } else {
                          log("\u26A0\uFE0F No se pudo extraer tile de la URL:", url);
                        }
                      }
                    }
                    return response;
                  } catch (error) {
                    log("\u274C Error interceptando pixel:", error);
                    if (!positionCaptured) {
                      restoreFetch();
                      return originalFetch(url, options);
                    }
                  }
                }
                return originalFetch(url, options);
              };
            };
            const setupCanvasObserver = () => {
              const canvasElements = document.querySelectorAll("canvas");
              if (canvasElements.length === 0) {
                log("\u26A0\uFE0F No se encontraron elementos canvas");
                return;
              }
              log(`\u{1F4CA} Configurando observer para ${canvasElements.length} canvas`);
              const clickHandler = (event) => {
                var _a;
                if (!imageState.selectingPosition || positionCaptured) return;
                const target = event.target;
                if (target && target.tagName === "CANVAS") {
                  log("\u{1F5B1}\uFE0F Click detectado en canvas durante selecci\xF3n");
                  try {
                    const board = ((_a = document.querySelector("canvas")) == null ? void 0 : _a.parentElement) || document.body;
                    const rect = board.getBoundingClientRect();
                    const cssX = event.clientX - rect.left;
                    const cssY = event.clientY - rect.top;
                    if (window.__WPA_PLAN_OVERLAY__) {
                      window.__WPA_PLAN_OVERLAY__.setAnchorCss(cssX, cssY);
                      log(`Plan overlay: ancla CSS establecida en (${cssX}, ${cssY})`);
                    }
                  } catch (e) {
                    log("Plan Overlay: error calculando ancla CSS", e);
                  }
                  setTimeout(() => {
                    if (!positionCaptured && imageState.selectingPosition) {
                      log("\u{1F50D} Buscando requests recientes de pintado...");
                    }
                  }, 500);
                }
              };
              document.addEventListener("click", clickHandler);
              imageState.cleanupObserver = () => {
                document.removeEventListener("click", clickHandler);
              };
            };
            setupFetchInterception();
            setupCanvasObserver();
            const timeoutId = setTimeout(() => {
              if (imageState.selectingPosition && !positionCaptured) {
                restoreFetch();
                if (imageState.cleanupObserver) {
                  imageState.cleanupObserver();
                }
                ui.setStatus(t("image.positionTimeout"), "error");
                log("\u23F0 Timeout en selecci\xF3n de posici\xF3n");
                resolve(false);
              }
            }, 12e4);
            imageState.positionTimeoutId = timeoutId;
          });
        },
        onStartPainting: async () => {
          var _a;
          log(`\u{1F50D} Estado para iniciar pintura:`, {
            imageLoaded: imageState.imageLoaded,
            startPosition: imageState.startPosition,
            tileX: imageState.tileX,
            tileY: imageState.tileY,
            totalPixels: imageState.totalPixels,
            remainingPixels: ((_a = imageState.remainingPixels) == null ? void 0 : _a.length) || 0
          });
          if (!imageState.imageLoaded || !imageState.startPosition) {
            ui.setStatus(t("image.missingRequirements"), "error");
            log(`\u274C Validaci\xF3n fallida: imageLoaded=${imageState.imageLoaded}, startPosition=${!!imageState.startPosition}`);
            return false;
          }
          imageState.running = true;
          imageState.stopFlag = false;
          imageState.isFirstBatch = imageState.useAllChargesFirst;
          log(`\u{1F680} Iniciando pintado - isFirstBatch: ${imageState.isFirstBatch}, useAllChargesFirst: ${imageState.useAllChargesFirst}`);
          ui.setStatus(t("image.startPaintingMsg"), "success");
          try {
            await processImage(
              imageState.imageData,
              imageState.startPosition,
              // onProgress - ahora incluye tiempo estimado
              (painted, total, message, estimatedTime) => {
                if (currentUserInfo) {
                  currentUserInfo.charges = Math.floor(imageState.currentCharges);
                  if (estimatedTime !== void 0) {
                    currentUserInfo.estimatedTime = estimatedTime;
                  }
                }
                ui.updateProgress(painted, total, currentUserInfo);
                if (imageState.inCooldown && imageState.nextBatchCooldown > 0) {
                  ui.updateCooldownDisplay(imageState.nextBatchCooldown);
                } else {
                  ui.updateCooldownDisplay(0);
                }
                if (message) {
                  if (message.includes("\u23F3") && imageState.inCooldown) {
                    ui.updateCooldownMessage(message);
                  } else {
                    ui.setStatus(message, "info");
                  }
                } else {
                  ui.setStatus(t("image.paintingProgress", { painted, total }), "info");
                }
              },
              // onComplete
              (completed, pixelsPainted2) => {
                if (completed) {
                  ui.setStatus(t("image.paintingComplete", { count: pixelsPainted2 }), "success");
                  clearProgress();
                } else {
                  ui.setStatus(t("image.paintingStopped"), "warning");
                }
                imageState.running = false;
              },
              // onError
              (error) => {
                ui.setStatus(t("image.paintingError"), "error");
                log("\u274C Error en proceso de pintado:", error);
                try {
                  reportError(String((error == null ? void 0 : error.message) || error), { botVariant: "auto-image" });
                } catch {
                }
                imageState.running = false;
              }
            );
            return true;
          } catch (error) {
            ui.setStatus(t("image.paintingError"), "error");
            log("\u274C Error iniciando pintado:", error);
            imageState.running = false;
            return false;
          }
        },
        onStopPainting: async () => {
          const progressInfo = getProgressInfo();
          if (progressInfo.hasProgress) {
            const shouldSave = await showConfirmDialog(
              t("image.confirmSaveProgress"),
              t("image.saveProgressTitle"),
              {
                save: t("image.saveProgress"),
                discard: t("image.discardProgress"),
                cancel: t("image.cancel")
              }
            );
            if (shouldSave === "save") {
              const result = saveProgress();
              if (result.success) {
                ui.setStatus(t("image.progressSaved", { filename: result.filename }), "success");
              } else {
                ui.setStatus(t("image.progressSaveError", { error: result.error }), "error");
              }
            } else if (shouldSave === "cancel") {
              return false;
            }
          }
          stopPainting();
          ui.setStatus(t("image.paintingStopped"), "warning");
          return true;
        },
        onSaveProgress: async () => {
          const result = saveProgress();
          if (result.success) {
            ui.setStatus(t("image.progressSaved", { filename: result.filename }), "success");
          } else {
            ui.setStatus(t("image.progressSaveError", { error: result.error }), "error");
          }
          return result.success;
        },
        onLoadProgress: async (file) => {
          try {
            const result = await loadProgress(file);
            if (result.success) {
              ui.setStatus(t("image.progressLoaded", { painted: result.painted, total: result.total }), "success");
              ui.updateProgress(result.painted, result.total, currentUserInfo);
              ui.updateUIFromState();
              log("\u2705 Progreso cargado - habilitando botones de inicio");
              return true;
            } else {
              ui.setStatus(t("image.progressLoadError", { error: result.error }), "error");
              return false;
            }
          } catch (error) {
            ui.setStatus(t("image.progressLoadError", { error: error.message }), "error");
            return false;
          }
        },
        onResizeImage: () => {
          if (imageState.imageLoaded && imageState.imageData && imageState.imageData.processor) {
            ui.showResizeDialog(imageState.imageData.processor);
          }
        },
        onConfirmResize: async (processor, newWidth, newHeight, selectedColors) => {
          log(`\u{1F504} Redimensionando imagen de ${processor.getDimensions().width}x${processor.getDimensions().height} a ${newWidth}x${newHeight}`);
          log(`\u{1F3A8} Colores seleccionados: ${selectedColors ? selectedColors.length : "todos"}`);
          try {
            await processor.resize(newWidth, newHeight);
            if (selectedColors && selectedColors.length > 0) {
              const selectedColorObjects = imageState.availableColors.filter(
                (color) => selectedColors.includes(color.id)
              );
              processor.setSelectedColors(selectedColorObjects);
              log(`\u{1F3A8} Paleta actualizada con ${selectedColors.length} colores seleccionados`);
            }
            try {
              await processor.remapImageToPalette();
              log("\u2705 Imagen remapeada tras redimensionado/selecci\xF3n antes de generar overlay");
            } catch (e) {
              log("\u26A0\uFE0F Error remapeando imagen tras redimensionado:", e);
            }
            const analysisResult = await processor.analyzePixels();
            imageState.imageData = {
              processor,
              width: newWidth,
              height: newHeight,
              // Mantener compatibilidad: usar requiredPixels como validPixelCount
              validPixelCount: analysisResult.requiredPixels,
              requiredPixels: analysisResult.requiredPixels,
              totalPixels: analysisResult.totalPixels
            };
            imageState.totalPixels = analysisResult.requiredPixels;
            imageState.paintedPixels = 0;
            imageState.remainingPixels = [];
            imageState.lastPosition = { x: 0, y: 0 };
            ui.updateProgress(0, analysisResult.requiredPixels, currentUserInfo);
            ui.setStatus(t("image.resizeSuccess", { width: newWidth, height: newHeight }), "success");
            log(`\u2705 Imagen redimensionada: ${analysisResult.requiredPixels} p\xEDxeles v\xE1lidos de ${analysisResult.totalPixels} totales`);
            if (imageState.startPosition && imageState.tileX != null && imageState.tileY != null) {
              log("\u{1F4CD} Manteniendo posici\xF3n previamente seleccionada tras el redimensionado");
            } else {
              log("\u2139\uFE0F No hay posici\xF3n previa establecida; podr\xE1s seleccionar una cuando lo desees");
            }
            try {
              if (window.__WPA_PLAN_OVERLAY__ && imageState.startPosition && imageState.tileX != null && imageState.tileY != null) {
                await processor.createTemplateTiles();
                const pixelQueue = processor.generatePixelQueue();
                imageState.remainingPixels = pixelQueue;
                window.__WPA_PLAN_OVERLAY__.setPlan(pixelQueue, {
                  anchor: {
                    tileX: imageState.tileX,
                    tileY: imageState.tileY,
                    pxX: imageState.startPosition.x,
                    pxY: imageState.startPosition.y
                  },
                  imageWidth: newWidth,
                  imageHeight: newHeight,
                  enabled: true
                });
                log(`\u2705 Overlay actualizado con ${pixelQueue.length} p\xEDxeles despu\xE9s del resize`);
              }
            } catch (overlayError) {
              log(`\u26A0\uFE0F Error actualizando overlay despu\xE9s del resize: ${overlayError.message}`);
            }
          } catch (error) {
            log(`\u274C Error redimensionando imagen: ${error.message}`);
            ui.setStatus(t("image.imageError"), "error");
          }
        },
        // Función para obtener colores disponibles
        getAvailableColors: () => {
          if (imageState.availableColors && imageState.availableColors.length > 0) {
            return imageState.availableColors;
          }
          try {
            const colors = detectAvailableColors();
            imageState.availableColors = colors;
            return colors;
          } catch (error) {
            log("\u26A0\uFE0F Error obteniendo colores disponibles:", error);
            return [];
          }
        },
        // Función para manejar cambios en la selección de colores
        onColorSelectionChange: (selectedColorIds) => {
          log(`\u{1F3A8} Selecci\xF3n de colores cambiada: ${selectedColorIds.length} colores seleccionados`);
        },
        // Función para generar JSON compatible con Auto-Guard.js
        generateGuardJSON: () => {
          if (!imageState.imageLoaded || !imageState.imageData || !imageState.startPosition || imageState.tileX == null || imageState.tileY == null) {
            throw new Error("Datos insuficientes para generar JSON del Guard. Aseg\xFArate de haber cargado una imagen y seleccionado una posici\xF3n.");
          }
          const processor = imageState.imageData.processor;
          if (!processor) {
            throw new Error("Procesador de imagen no disponible.");
          }
          const { width, height } = imageState.imageData;
          const { x: startX, y: startY } = imageState.startPosition;
          const { tileX, tileY } = imageState;
          const globalStartX = tileX * 1e3 + startX;
          const globalStartY = tileY * 1e3 + startY;
          const globalEndX = globalStartX + width - 1;
          const globalEndY = globalStartY + height - 1;
          const allPixels = processor.generatePixelQueue();
          const originalPixels = [];
          const mod1000 = (v) => (v % 1e3 + 1e3) % 1e3;
          const getColorId = (rgb) => {
            if (rgb && typeof rgb.id !== "undefined") return rgb.id;
            const palette = imageState.availableColors || [];
            const found = palette.find((c) => c.r === rgb.r && c.g === rgb.g && c.b === rgb.b);
            return found ? found.id : void 0;
          };
          if (allPixels && allPixels.length > 0) {
            allPixels.forEach((pixel) => {
              const pxGlobalX = typeof pixel.globalX === "number" ? pixel.globalX : tileX * 1e3 + startX + pixel.imageX;
              const pxGlobalY = typeof pixel.globalY === "number" ? pixel.globalY : tileY * 1e3 + startY + pixel.imageY;
              const key = `${pxGlobalX},${pxGlobalY}`;
              const pxTileX = typeof pixel.tileX === "number" ? pixel.tileX : Math.floor(pxGlobalX / 1e3);
              const pxTileY = typeof pixel.tileY === "number" ? pixel.tileY : Math.floor(pxGlobalY / 1e3);
              const pxLocalX = typeof pixel.localX === "number" ? pixel.localX : mod1000(pxGlobalX);
              const pxLocalY = typeof pixel.localY === "number" ? pixel.localY : mod1000(pxGlobalY);
              const rgb = pixel.color || pixel.targetColor || {};
              const colorId = getColorId(rgb);
              originalPixels.push({
                key,
                // Colores en nivel superior (formato esperado por Guard)
                r: rgb.r,
                g: rgb.g,
                b: rgb.b,
                colorId: typeof colorId !== "undefined" ? colorId : null,
                // Metadatos de coordenadas (compatibles con Guard)
                globalX: pxGlobalX,
                globalY: pxGlobalY,
                localX: pxLocalX,
                localY: pxLocalY,
                tileX: pxTileX,
                tileY: pxTileY
              });
            });
          }
          const guardData = {
            version: "1.0",
            timestamp: Date.now(),
            protectionData: {
              area: {
                x1: globalStartX,
                y1: globalStartY,
                x2: globalEndX,
                y2: globalEndY
              },
              protectedPixels: originalPixels.length,
              splitInfo: null
              // No dividir por defecto
            },
            progress: {
              totalRepaired: 0,
              lastCheck: Date.now()
            },
            config: {
              maxProtectionSize: 1e5,
              pixelsPerBatch: 50,
              checkInterval: 1e4
            },
            colors: (imageState.availableColors || []).map((color) => ({
              id: color.id,
              r: color.r,
              g: color.g,
              b: color.b
            })),
            // IMPORTANTE: el formato debe coincidir con save-load.js del Guard
            originalPixels
          };
          log(`\u2705 JSON del Guard generado: \xE1rea (${globalStartX},${globalStartY}) a (${globalEndX},${globalEndY}), ${originalPixels.length} p\xEDxeles de ${(allPixels == null ? void 0 : allPixels.length) || 0} totales`);
          return guardData;
        }
        // Las funciones showGuardDialog y saveGuardJSON ahora se importan desde safe-guard-window.js
      });
      const handleLauncherLanguageChange = (event) => {
        const { language } = event.detail;
        log(`\u{1F30D} Imagen: Detectado cambio de idioma desde launcher: ${language}`);
        imageState.language = language;
      };
      window.addEventListener("launcherLanguageChanged", handleLauncherLanguageChange);
      window.addEventListener("languageChanged", handleLauncherLanguageChange);
      window.addEventListener("beforeunload", () => {
        var _a, _b, _c, _d;
        restoreFetch();
        stopPainting();
        ui.destroy();
        window.removeEventListener("launcherLanguageChanged", handleLauncherLanguageChange);
        window.removeEventListener("languageChanged", handleLauncherLanguageChange);
        if (window.__wplaceBot) {
          window.__wplaceBot.imageRunning = false;
        }
        try {
          const mcfg = getMetricsConfig();
          if (mcfg.ENABLED && ((_a = window.__wplaceMetrics) == null ? void 0 : _a.imageSessionActive)) {
            sessionEnd({ botVariant: "auto-image" });
            window.__wplaceMetrics.imageSessionActive = false;
          }
          if ((_b = window.__wplaceMetrics) == null ? void 0 : _b.imagePingInterval) {
            window.clearInterval(window.__wplaceMetrics.imagePingInterval);
            window.__wplaceMetrics.imagePingInterval = null;
          }
          if ((_c = window.__wplaceMetrics) == null ? void 0 : _c.imageVisibilityHandler) {
            document.removeEventListener("visibilitychange", window.__wplaceMetrics.imageVisibilityHandler);
            delete window.__wplaceMetrics.imageVisibilityHandler;
          }
          if ((_d = window.__wplaceMetrics) == null ? void 0 : _d.imageFocusHandler) {
            window.removeEventListener("focus", window.__wplaceMetrics.imageFocusHandler);
            delete window.__wplaceMetrics.imageFocusHandler;
          }
        } catch {
        }
      });
      log("\u2705 Auto-Image inicializado correctamente");
      try {
        const mcfg = getMetricsConfig();
        if (mcfg.ENABLED) {
          const visibilityHandler = () => {
            if (!document.hidden) {
              try {
                sessionPing({ botVariant: "auto-image", metadata: { reason: "visibility" } });
              } catch {
              }
            }
          };
          const focusHandler = () => {
            try {
              sessionPing({ botVariant: "auto-image", metadata: { reason: "focus" } });
            } catch {
            }
          };
          document.addEventListener("visibilitychange", visibilityHandler);
          window.addEventListener("focus", focusHandler);
          window.__wplaceMetrics = window.__wplaceMetrics || {};
          window.__wplaceMetrics.imageVisibilityHandler = visibilityHandler;
          window.__wplaceMetrics.imageFocusHandler = focusHandler;
        }
      } catch {
      }
      setTimeout(async () => {
        try {
          ui.setStatus(t("image.autoInitializing"), "info");
          log("\u{1F916} Intentando auto-inicio...");
          const autoInitSuccess = await tryAutoInit();
          if (autoInitSuccess) {
            ui.setStatus(t("image.autoInitSuccess"), "success");
            log("\u2705 Auto-inicio exitoso");
            ui.setInitButtonVisible(false);
            const initResult = await initializeBot(true);
            if (initResult) {
              log("\u{1F680} Bot auto-iniciado completamente");
            }
          } else {
            ui.setStatus(t("image.autoInitFailed"), "warning");
            log("\u26A0\uFE0F Auto-inicio fall\xF3, se requiere inicio manual");
          }
        } catch (error) {
          log("\u274C Error en auto-inicio:", error);
          ui.setStatus(t("image.manualInitRequired"), "warning");
        }
      }, 1e3);
    } catch (error) {
      log("\u274C Error inicializando Auto-Image:", error);
      if (window.__wplaceBot) {
        window.__wplaceBot.imageRunning = false;
      }
      throw error;
    }
  }

  // src/slave/Guard/guard.js
  init_logger();

  // src/guard/processor.js
  init_logger();
  init_wplace_api();
  init_wplace_api();
  init_turnstile();
  init_config3();

  // src/guard/patterns.js
  init_logger();
  init_config3();
  function getRandomPattern(changes, count) {
    const changesArray = Array.from(changes);
    const selected = [];
    const available = [...changesArray];
    for (let i = 0; i < Math.min(count, available.length); i++) {
      const randomIndex = Math.floor(Math.random() * available.length);
      selected.push(available.splice(randomIndex, 1)[0]);
    }
    return selected;
  }
  function getLineUpPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const byRow = /* @__PURE__ */ new Map();
    changesArray.forEach((coord) => {
      const [_x, y] = coord.split(",").map(Number);
      if (!byRow.has(y)) byRow.set(y, []);
      byRow.get(y).push(coord);
    });
    const selected = [];
    const sortedRows = Array.from(byRow.keys()).sort((a, b) => a - b);
    for (const row of sortedRows) {
      if (selected.length >= count) break;
      const rowPixels = byRow.get(row).sort((a, b) => {
        const [x1] = a.split(",").map(Number);
        const [x2] = b.split(",").map(Number);
        return x1 - x2;
      });
      for (const coord of rowPixels) {
        if (selected.length >= count) break;
        selected.push(coord);
      }
    }
    return selected.slice(0, count);
  }
  function getLineDownPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const byRow = /* @__PURE__ */ new Map();
    changesArray.forEach((coord) => {
      const [_x, y] = coord.split(",").map(Number);
      if (!byRow.has(y)) byRow.set(y, []);
      byRow.get(y).push(coord);
    });
    const selected = [];
    const sortedRows = Array.from(byRow.keys()).sort((a, b) => b - a);
    for (const row of sortedRows) {
      if (selected.length >= count) break;
      const rowPixels = byRow.get(row).sort((a, b) => {
        const [x1] = a.split(",").map(Number);
        const [x2] = b.split(",").map(Number);
        return x1 - x2;
      });
      for (const coord of rowPixels) {
        if (selected.length >= count) break;
        selected.push(coord);
      }
    }
    return selected.slice(0, count);
  }
  function getLineLeftPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const byCol = /* @__PURE__ */ new Map();
    changesArray.forEach((coord) => {
      const [x, _y] = coord.split(",").map(Number);
      if (!byCol.has(x)) byCol.set(x, []);
      byCol.get(x).push(coord);
    });
    const selected = [];
    const sortedCols = Array.from(byCol.keys()).sort((a, b) => a - b);
    for (const col of sortedCols) {
      if (selected.length >= count) break;
      const colPixels = byCol.get(col).sort((a, b) => {
        const [, y1] = a.split(",").map(Number);
        const [, y2] = b.split(",").map(Number);
        return y1 - y2;
      });
      for (const coord of colPixels) {
        if (selected.length >= count) break;
        selected.push(coord);
      }
    }
    return selected.slice(0, count);
  }
  function getLineRightPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const byCol = /* @__PURE__ */ new Map();
    changesArray.forEach((coord) => {
      const [x, _y] = coord.split(",").map(Number);
      if (!byCol.has(x)) byCol.set(x, []);
      byCol.get(x).push(coord);
    });
    const selected = [];
    const sortedCols = Array.from(byCol.keys()).sort((a, b) => b - a);
    for (const col of sortedCols) {
      if (selected.length >= count) break;
      const colPixels = byCol.get(col).sort((a, b) => {
        const [, y1] = a.split(",").map(Number);
        const [, y2] = b.split(",").map(Number);
        return y1 - y2;
      });
      for (const coord of colPixels) {
        if (selected.length >= count) break;
        selected.push(coord);
      }
    }
    return selected.slice(0, count);
  }
  function getBordersPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity;
    let minY = Infinity, maxY = -Infinity;
    changesArray.forEach((coord) => {
      const [x, y] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    });
    const ringMap = /* @__PURE__ */ new Map();
    changesArray.forEach((coord) => {
      const [x, y] = coord.split(",").map(Number);
      const distToLeft = x - minX;
      const distToRight = maxX - x;
      const distToTop = y - minY;
      const distToBottom = maxY - y;
      const ring = Math.min(distToLeft, distToRight, distToTop, distToBottom);
      if (!ringMap.has(ring)) ringMap.set(ring, []);
      ringMap.get(ring).push(coord);
    });
    const selected = [];
    const sortedRings = Array.from(ringMap.keys()).sort((a, b) => a - b);
    for (const ring of sortedRings) {
      if (selected.length >= count) break;
      const ringPixels = ringMap.get(ring);
      for (const coord of ringPixels) {
        if (selected.length >= count) break;
        selected.push(coord);
      }
    }
    return selected.slice(0, count);
  }
  function getCenterPattern(changes, count) {
    var _a;
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity;
    let minY = Infinity, maxY = -Infinity;
    changesArray.forEach((coord) => {
      const [x, y] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    });
    let centerX;
    let centerY;
    if (((_a = guardState) == null ? void 0 : _a.protectionArea) && typeof guardState.protectionArea.x1 === "number" && typeof guardState.protectionArea.x2 === "number" && typeof guardState.protectionArea.y1 === "number" && typeof guardState.protectionArea.y2 === "number") {
      centerX = (guardState.protectionArea.x1 + guardState.protectionArea.x2) / 2;
      centerY = (guardState.protectionArea.y1 + guardState.protectionArea.y2) / 2;
    } else {
      centerX = (minX + maxX) / 2;
      centerY = (minY + maxY) / 2;
    }
    const withDistance = changesArray.map((coord) => {
      const [x, y] = coord.split(",").map(Number);
      const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));
      return { coord, distance };
    });
    withDistance.sort((a, b) => a.distance - b.distance);
    return withDistance.slice(0, count).map((item) => item.coord);
  }
  function getSpiralPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity;
    let minY = Infinity, maxY = -Infinity;
    changesArray.forEach((coord) => {
      const [x2, y2] = coord.split(",").map(Number);
      minX = Math.min(minX, x2);
      maxX = Math.max(maxX, x2);
      minY = Math.min(minY, y2);
      maxY = Math.max(maxY, y2);
    });
    const centerX = Math.round((minX + maxX) / 2);
    const centerY = Math.round((minY + maxY) / 2);
    const availableCoords = new Set(changesArray);
    const selected = [];
    let x = centerX;
    let y = centerY;
    let dx = 0;
    let dy = -1;
    let steps = 1;
    let stepCount = 0;
    let direction = 0;
    const centerCoord = `${centerX},${centerY}`;
    if (availableCoords.has(centerCoord)) {
      selected.push(centerCoord);
      availableCoords.delete(centerCoord);
    }
    while (selected.length < count && availableCoords.size > 0) {
      x += dx;
      y += dy;
      const coord = `${x},${y}`;
      if (availableCoords.has(coord)) {
        selected.push(coord);
        availableCoords.delete(coord);
      }
      stepCount++;
      if (stepCount === steps) {
        stepCount = 0;
        if (dx === 0 && dy === -1) {
          dx = 1;
          dy = 0;
        } else if (dx === 1 && dy === 0) {
          dx = 0;
          dy = 1;
        } else if (dx === 0 && dy === 1) {
          dx = -1;
          dy = 0;
        } else if (dx === -1 && dy === 0) {
          dx = 0;
          dy = -1;
        }
        direction = (direction + 1) % 4;
        if (direction % 2 === 0) {
          steps++;
        }
      }
      if (Math.abs(x - centerX) > 100 || Math.abs(y - centerY) > 100) {
        break;
      }
    }
    if (selected.length < count && availableCoords.size > 0) {
      const remaining = Array.from(availableCoords);
      const needed = Math.min(count - selected.length, remaining.length);
      for (let i = 0; i < needed; i++) {
        const randomIndex = Math.floor(Math.random() * remaining.length);
        selected.push(remaining.splice(randomIndex, 1)[0]);
      }
    }
    return selected.slice(0, count);
  }
  function getZigzagPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const byRow = /* @__PURE__ */ new Map();
    changesArray.forEach((coord) => {
      const [_x, y] = coord.split(",").map(Number);
      if (!byRow.has(y)) byRow.set(y, []);
      byRow.get(y).push(coord);
    });
    const selected = [];
    const sortedRows = Array.from(byRow.keys()).sort((a, b) => a - b);
    let leftToRight = true;
    for (const row of sortedRows) {
      if (selected.length >= count) break;
      const rowPixels = byRow.get(row).sort((a, b) => {
        const [x1] = a.split(",").map(Number);
        const [x2] = b.split(",").map(Number);
        return leftToRight ? x1 - x2 : x2 - x1;
      });
      for (const coord of rowPixels) {
        if (selected.length >= count) break;
        selected.push(coord);
      }
      leftToRight = !leftToRight;
    }
    return selected.slice(0, count);
  }
  function getDiagonalPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const withDiagonal = changesArray.map((coord) => {
      const [x, y] = coord.split(",").map(Number);
      return { coord, diagonal: x + y, x, y };
    });
    withDiagonal.sort((a, b) => {
      if (a.diagonal !== b.diagonal) return a.diagonal - b.diagonal;
      return a.x - b.x;
    });
    return withDiagonal.slice(0, count).map((item) => item.coord);
  }
  function getClusterPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const selected = [];
    const available = new Set(changesArray);
    while (selected.length < count && available.size > 0) {
      const availableArray = Array.from(available);
      const centerCoord = availableArray[Math.floor(Math.random() * availableArray.length)];
      const [centerX, centerY] = centerCoord.split(",").map(Number);
      const clusterRadius = 3 + Math.floor(Math.random() * 3);
      const cluster = [];
      for (const coord of available) {
        const [x, y] = coord.split(",").map(Number);
        const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));
        if (distance <= clusterRadius) {
          cluster.push(coord);
        }
      }
      const clusterSize = Math.min(cluster.length, Math.min(5, count - selected.length));
      for (let i = 0; i < clusterSize; i++) {
        const randomIndex = Math.floor(Math.random() * cluster.length);
        const coord = cluster.splice(randomIndex, 1)[0];
        selected.push(coord);
        available.delete(coord);
      }
    }
    return selected.slice(0, count);
  }
  function getWavePattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity;
    changesArray.forEach((coord) => {
      const [x] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
    });
    const withWave = changesArray.map((coord) => {
      const [x, y] = coord.split(",").map(Number);
      const normalizedX = (x - minX) / (maxX - minX || 1);
      const waveY = Math.sin(normalizedX * Math.PI * 2) * 10;
      const distance = Math.abs(y - waveY);
      return { coord, distance, x };
    });
    withWave.sort((a, b) => {
      if (Math.abs(a.distance - b.distance) < 2) {
        return a.x - b.x;
      }
      return a.distance - b.distance;
    });
    return withWave.slice(0, count).map((item) => item.coord);
  }
  function getCornersPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity;
    let minY = Infinity, maxY = -Infinity;
    changesArray.forEach((coord) => {
      const [x, y] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    });
    const corners = [
      [minX, minY],
      [maxX, minY],
      [minX, maxY],
      [maxX, maxY]
    ];
    const withCornerDistance = changesArray.map((coord) => {
      const [x, y] = coord.split(",").map(Number);
      let minDistance = Infinity;
      for (const [cornerX, cornerY] of corners) {
        const distance = Math.sqrt(Math.pow(x - cornerX, 2) + Math.pow(y - cornerY, 2));
        minDistance = Math.min(minDistance, distance);
      }
      return { coord, distance: minDistance };
    });
    withCornerDistance.sort((a, b) => a.distance - b.distance);
    return withCornerDistance.slice(0, count).map((item) => item.coord);
  }
  function getSweepPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const sections = /* @__PURE__ */ new Map();
    changesArray.forEach((coord) => {
      const [x, y] = coord.split(",").map(Number);
      const sectionX = Math.floor(x / 8);
      const sectionY = Math.floor(y / 8);
      const sectionKey = `${sectionX},${sectionY}`;
      if (!sections.has(sectionKey)) sections.set(sectionKey, []);
      sections.get(sectionKey).push(coord);
    });
    const selected = [];
    const sectionKeys = Array.from(sections.keys());
    for (const sectionKey of sectionKeys) {
      if (selected.length >= count) break;
      const sectionPixels = sections.get(sectionKey);
      const toTake = Math.min(sectionPixels.length, count - selected.length);
      for (let i = 0; i < toTake; i++) {
        selected.push(sectionPixels[i]);
      }
    }
    return selected.slice(0, count);
  }
  function getPriorityPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity;
    let minY = Infinity, maxY = -Infinity;
    changesArray.forEach((coord) => {
      const [x, y] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    });
    const centerX = (minX + maxX) / 2;
    const centerY = (minY + maxY) / 2;
    const withPriority = changesArray.map((coord) => {
      const [x, y] = coord.split(",").map(Number);
      const centerDistance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));
      const edgeDistance = Math.min(x - minX, maxX - x, y - minY, maxY - y);
      const randomFactor = Math.random() * 0.3;
      const priority = centerDistance * 0.4 - edgeDistance * 0.3 + randomFactor;
      return { coord, priority };
    });
    withPriority.sort((a, b) => a.priority - b.priority);
    return withPriority.slice(0, count).map((item) => item.coord);
  }
  function getProximityPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const selected = [];
    const available = new Set(changesArray);
    let currentCoord = changesArray[Math.floor(Math.random() * changesArray.length)];
    selected.push(currentCoord);
    available.delete(currentCoord);
    while (selected.length < count && available.size > 0) {
      const [currentX, currentY] = currentCoord.split(",").map(Number);
      let closestCoord = null;
      let closestDistance = Infinity;
      for (const coord of available) {
        const [x, y] = coord.split(",").map(Number);
        const distance = Math.sqrt(Math.pow(x - currentX, 2) + Math.pow(y - currentY, 2));
        if (distance < closestDistance) {
          closestDistance = distance;
          closestCoord = coord;
        }
      }
      if (closestCoord) {
        selected.push(closestCoord);
        available.delete(closestCoord);
        currentCoord = closestCoord;
      } else {
        break;
      }
    }
    return selected.slice(0, count);
  }
  function getQuadrantPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity;
    let minY = Infinity, maxY = -Infinity;
    changesArray.forEach((coord) => {
      const [x, y] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    });
    const centerX = (minX + maxX) / 2;
    const centerY = (minY + maxY) / 2;
    const quadrants = [[], [], [], []];
    changesArray.forEach((coord) => {
      const [x, y] = coord.split(",").map(Number);
      if (x <= centerX && y <= centerY) {
        quadrants[0].push(coord);
      } else if (x > centerX && y <= centerY) {
        quadrants[1].push(coord);
      } else if (x <= centerX && y > centerY) {
        quadrants[2].push(coord);
      } else {
        quadrants[3].push(coord);
      }
    });
    const selected = [];
    let quadrantIndex = 0;
    const quadrantPointers = [0, 0, 0, 0];
    while (selected.length < count) {
      const currentQuadrant = quadrants[quadrantIndex];
      const pointer = quadrantPointers[quadrantIndex];
      if (pointer < currentQuadrant.length) {
        selected.push(currentQuadrant[pointer]);
        quadrantPointers[quadrantIndex]++;
      }
      quadrantIndex = (quadrantIndex + 1) % 4;
      if (quadrantPointers.every((p, i) => p >= quadrants[i].length)) {
        break;
      }
    }
    return selected.slice(0, count);
  }
  function getScatteredPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const selected = [];
    const available = [...changesArray];
    while (selected.length < count && available.length > 0) {
      let bestCoord = null;
      let bestScore = -1;
      let bestIndex = -1;
      for (let i = 0; i < available.length; i++) {
        const coord = available[i];
        const [x, y] = coord.split(",").map(Number);
        let minDistance = Infinity;
        for (const selectedCoord of selected) {
          const [sx, sy] = selectedCoord.split(",").map(Number);
          const distance = Math.sqrt(Math.pow(x - sx, 2) + Math.pow(y - sy, 2));
          minDistance = Math.min(minDistance, distance);
        }
        const randomFactor = Math.random() * 0.5;
        const score = minDistance + randomFactor;
        if (score > bestScore) {
          bestScore = score;
          bestCoord = coord;
          bestIndex = i;
        }
      }
      if (bestCoord) {
        selected.push(bestCoord);
        available.splice(bestIndex, 1);
      } else {
        break;
      }
    }
    return selected.slice(0, count);
  }
  function getPixelsByPattern(pattern, changes, count, preferColor = false, preferredColorId = null, preferredColorIds = null, excludeColor = false, excludedColorIds = null) {
    log(`\u{1F3AF} Aplicando patr\xF3n ${pattern} para ${count} p\xEDxeles de ${changes.size} cambios detectados`);
    let selectedCoords;
    const changeKeys = changes instanceof Map ? Array.from(changes.keys()) : Array.from(changes);
    switch (pattern) {
      case "lineUp":
        selectedCoords = getLineUpPattern(changeKeys, count);
        break;
      case "lineDown":
        selectedCoords = getLineDownPattern(changeKeys, count);
        break;
      case "lineLeft":
        selectedCoords = getLineLeftPattern(changeKeys, count);
        break;
      case "lineRight":
        selectedCoords = getLineRightPattern(changeKeys, count);
        break;
      case "center":
        selectedCoords = getCenterPattern(changeKeys, count);
        break;
      case "borders":
        selectedCoords = getBordersPattern(changeKeys, count);
        break;
      case "spiral":
        selectedCoords = getSpiralPattern(changeKeys, count);
        break;
      case "zigzag":
        selectedCoords = getZigzagPattern(changeKeys, count);
        break;
      case "diagonal":
        selectedCoords = getDiagonalPattern(changeKeys, count);
        break;
      case "cluster":
        selectedCoords = getClusterPattern(changeKeys, count);
        break;
      case "wave":
        selectedCoords = getWavePattern(changeKeys, count);
        break;
      case "corners":
        selectedCoords = getCornersPattern(changeKeys, count);
        break;
      case "sweep":
        selectedCoords = getSweepPattern(changeKeys, count);
        break;
      case "priority":
        selectedCoords = getPriorityPattern(changeKeys, count);
        break;
      case "proximity":
        selectedCoords = getProximityPattern(changeKeys, count);
        break;
      case "quadrant":
        selectedCoords = getQuadrantPattern(changeKeys, count);
        break;
      case "scattered":
        selectedCoords = getScatteredPattern(changeKeys, count);
        break;
      case "snake":
        selectedCoords = getSnakePattern(changeKeys, count);
        break;
      case "diagonalSweep":
        selectedCoords = getDiagonalSweepPattern(changeKeys, count);
        break;
      case "spiralClockwise":
        selectedCoords = getDirectionalSpiralPattern(changeKeys, count, true);
        break;
      case "spiralCounterClockwise":
        selectedCoords = getDirectionalSpiralPattern(changeKeys, count, false);
        break;
      case "biasedRandom":
        selectedCoords = getBiasedRandomPattern(changeKeys, count);
        break;
      case "anchorPoints":
        selectedCoords = getAnchorPointsPattern(changeKeys, count);
        break;
      case "random":
      default:
        selectedCoords = getRandomPattern(changeKeys, count);
        break;
    }
    if (preferColor && changes instanceof Map) {
      const ids = Array.isArray(preferredColorIds) && preferredColorIds.length > 0 ? preferredColorIds : preferredColorId !== null ? [preferredColorId] : [];
      if (ids.length > 0) {
        selectedCoords = applyColorPreference(selectedCoords, changes, ids, count);
      }
    }
    if (excludeColor && changes instanceof Map) {
      const excludeIds = Array.isArray(excludedColorIds) && excludedColorIds.length > 0 ? excludedColorIds : [];
      if (excludeIds.length > 0) {
        selectedCoords = applyColorExclusion(selectedCoords, changes, excludeIds);
      }
    }
    return selectedCoords;
  }
  function applyColorPreference(selectedCoords, changesMap, preferredColorIds, maxCount) {
    const preferredPixels = [];
    const otherPixels = [];
    for (const coord of selectedCoords) {
      const changeData = changesMap.get(coord);
      if (changeData && changeData.original && (Array.isArray(preferredColorIds) ? preferredColorIds.includes(changeData.original.colorId) : changeData.original.colorId === preferredColorIds)) {
        preferredPixels.push(coord);
      } else {
        otherPixels.push(coord);
      }
    }
    const result = [];
    if (preferredPixels.length > 0) {
      const takePreferred = preferredPixels.slice(0, Math.min(maxCount, preferredPixels.length));
      result.push(...takePreferred);
    }
    if (result.length < maxCount && otherPixels.length > 0) {
      const remaining = maxCount - result.length;
      const takeOthers = otherPixels.slice(0, remaining);
      result.push(...takeOthers);
    }
    log(`\u{1F3A8} Priorizaci\xF3n de color: ${preferredPixels.length} preferidos disponibles, rellenando hasta ${maxCount}. Seleccionados: ${result.length}`);
    return result;
  }
  function applyColorExclusion(selectedCoords, changesMap, excludedColorIds) {
    const filteredPixels = [];
    let excludedCount = 0;
    for (const coord of selectedCoords) {
      const changeData = changesMap.get(coord);
      if (changeData && changeData.original && excludedColorIds.includes(changeData.original.colorId)) {
        excludedCount++;
      } else {
        filteredPixels.push(coord);
      }
    }
    if (excludedCount > 0) {
      log(`\u{1F6AB} Exclusi\xF3n de colores: ${excludedCount} p\xEDxeles excluidos, ${filteredPixels.length} p\xEDxeles seleccionados`);
    }
    return filteredPixels;
  }
  function getSnakePattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const rowGroups = {};
    for (const coord of changesArray) {
      const [x, y] = coord.split(",").map(Number);
      if (!rowGroups[y]) rowGroups[y] = [];
      rowGroups[y].push({ coord, x, y });
    }
    const sortedRows = Object.keys(rowGroups).map(Number).sort((a, b) => a - b);
    const selected = [];
    for (let i = 0; i < sortedRows.length && selected.length < count; i++) {
      const row = sortedRows[i];
      const pixels = rowGroups[row];
      if (i % 2 === 0) {
        pixels.sort((a, b) => a.x - b.x);
      } else {
        pixels.sort((a, b) => b.x - a.x);
      }
      for (const pixel of pixels) {
        if (selected.length >= count) break;
        selected.push(pixel.coord);
      }
    }
    return selected.slice(0, count);
  }
  function getDiagonalSweepPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    const diagonalGroups = {};
    for (const coord of changesArray) {
      const [x, y] = coord.split(",").map(Number);
      const diagonal = x + y;
      if (!diagonalGroups[diagonal]) diagonalGroups[diagonal] = [];
      diagonalGroups[diagonal].push({ coord, x, y });
    }
    const sortedDiagonals = Object.keys(diagonalGroups).map(Number).sort((a, b) => a - b);
    const selected = [];
    for (const diagonal of sortedDiagonals) {
      if (selected.length >= count) break;
      const pixels = diagonalGroups[diagonal];
      pixels.sort((a, b) => a.x - b.x);
      for (const pixel of pixels) {
        if (selected.length >= count) break;
        selected.push(pixel.coord);
      }
    }
    return selected.slice(0, count);
  }
  function getDirectionalSpiralPattern(changes, count, clockwise = true) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
    const coords = changesArray.map((coord) => {
      const [x, y] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
      return { coord, x, y };
    });
    const centerX = (minX + maxX) / 2;
    const centerY = (minY + maxY) / 2;
    coords.forEach((item) => {
      const dx = item.x - centerX;
      const dy = item.y - centerY;
      item.distance = Math.sqrt(dx * dx + dy * dy);
      item.angle = Math.atan2(dy, dx);
      if (!clockwise) {
        item.angle = -item.angle;
      }
    });
    coords.sort((a, b) => {
      const distDiff = a.distance - b.distance;
      if (Math.abs(distDiff) < 1) {
        return a.angle - b.angle;
      }
      return distDiff;
    });
    return coords.slice(0, count).map((item) => item.coord);
  }
  function getBiasedRandomPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
    for (const coord of changesArray) {
      const [x, y] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    }
    const weightedCoords = changesArray.map((coord) => {
      const [x, y] = coord.split(",").map(Number);
      const distToLeft = x - minX;
      const distToRight = maxX - x;
      const distToTop = y - minY;
      const distToBottom = maxY - y;
      const minDistToBorder = Math.min(distToLeft, distToRight, distToTop, distToBottom);
      const weight = 1 / (minDistToBorder + 1) + Math.random() * 0.5;
      return { coord, weight };
    });
    weightedCoords.sort((a, b) => b.weight - a.weight);
    const selected = [];
    const available = [...weightedCoords];
    while (selected.length < count && available.length > 0) {
      const totalWeight = available.reduce((sum, item) => sum + item.weight, 0);
      let random = Math.random() * totalWeight;
      let selectedIndex = 0;
      for (let i = 0; i < available.length; i++) {
        random -= available[i].weight;
        if (random <= 0) {
          selectedIndex = i;
          break;
        }
      }
      selected.push(available[selectedIndex].coord);
      available.splice(selectedIndex, 1);
    }
    return selected.slice(0, count);
  }
  function getAnchorPointsPattern(changes, count) {
    const changesArray = Array.from(changes);
    if (changesArray.length === 0) return [];
    let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
    const coords = changesArray.map((coord) => {
      const [x, y] = coord.split(",").map(Number);
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
      return { coord, x, y };
    });
    const centerX = (minX + maxX) / 2;
    const centerY = (minY + maxY) / 2;
    const anchorPoints = [
      { x: minX, y: minY, priority: 1 },
      // Esquina superior izquierda
      { x: maxX, y: minY, priority: 1 },
      // Esquina superior derecha
      { x: minX, y: maxY, priority: 1 },
      // Esquina inferior izquierda
      { x: maxX, y: maxY, priority: 1 },
      // Esquina inferior derecha
      { x: centerX, y: centerY, priority: 2 },
      // Centro
      { x: centerX, y: minY, priority: 3 },
      // Centro superior
      { x: centerX, y: maxY, priority: 3 },
      // Centro inferior
      { x: minX, y: centerY, priority: 3 },
      // Centro izquierdo
      { x: maxX, y: centerY, priority: 3 }
      // Centro derecho
    ];
    coords.forEach((item) => {
      let minDistance = Infinity;
      let bestPriority = 10;
      for (const anchor of anchorPoints) {
        const distance = Math.sqrt(
          Math.pow(item.x - anchor.x, 2) + Math.pow(item.y - anchor.y, 2)
        );
        if (distance < minDistance) {
          minDistance = distance;
          bestPriority = anchor.priority;
        }
      }
      item.priority = bestPriority;
      item.distanceToAnchor = minDistance;
    });
    coords.sort((a, b) => {
      if (a.priority !== b.priority) {
        return a.priority - b.priority;
      }
      return a.distanceToAnchor - b.distanceToAnchor;
    });
    return coords.slice(0, count).map((item) => item.coord);
  }

  // src/guard/processor.js
  init_client();
  init_config();
  function rgbToXyz(r, g, b) {
    r = r / 255;
    g = g / 255;
    b = b / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;
    const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;
    const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;
    return { x, y, z };
  }
  function xyzToLab(x, y, z) {
    const xn = 0.95047;
    const yn = 1;
    const zn = 1.08883;
    x = x / xn;
    y = y / yn;
    z = z / zn;
    const fx = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    const fy = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    const fz = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * fy - 16;
    const a = 500 * (fx - fy);
    const b = 200 * (fy - fz);
    return { l, a, b };
  }
  function rgbToLab(r, g, b) {
    const xyz = rgbToXyz(r, g, b);
    return xyzToLab(xyz.x, xyz.y, xyz.z);
  }
  function calculateDeltaE(lab1, lab2) {
    const deltaL = lab1.l - lab2.l;
    const deltaA = lab1.a - lab2.a;
    const deltaB = lab1.b - lab2.b;
    return Math.sqrt(deltaL * deltaL + deltaA * deltaA + deltaB * deltaB);
  }
  var { Image, URL: URL2 } = window;
  async function getTileImage(tileX, tileY) {
    try {
      const url = `${GUARD_DEFAULTS.BACKEND_URL}/files/s0/tiles/${tileX}/${tileY}.png`;
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      return await response.blob();
    } catch (error) {
      log(`Error obteniendo tile ${tileX},${tileY}:`, error);
      return null;
    }
  }
  function detectAvailableColors2() {
    log("\u{1F3A8} Detectando colores disponibles...");
    const colorElements = document.querySelectorAll('[id^="color-"]');
    const colors = [];
    for (const element of colorElements) {
      if (element.querySelector("svg")) continue;
      const colorId = parseInt(element.id.replace("color-", ""));
      if (colorId === 0) continue;
      const bgColor = element.style.backgroundColor;
      if (bgColor) {
        const rgbMatch = bgColor.match(/\d+/g);
        if (rgbMatch && rgbMatch.length >= 3) {
          colors.push({
            id: colorId,
            r: parseInt(rgbMatch[0]),
            g: parseInt(rgbMatch[1]),
            b: parseInt(rgbMatch[2]),
            element
          });
        }
      }
    }
    log(`\u2705 ${colors.length} colores detectados`);
    return colors;
  }
  function findClosestColor2(r, g, b, availableColors) {
    if (!availableColors || availableColors.length === 0) return null;
    const targetLab = rgbToLab(r, g, b);
    let minDeltaE = Infinity;
    let closestColor = null;
    for (const color of availableColors) {
      const lab = rgbToLab(color.r, color.g, color.b);
      const deltaE = calculateDeltaE(targetLab, lab);
      if (deltaE < minDeltaE) {
        minDeltaE = deltaE;
        closestColor = color;
      }
    }
    return closestColor;
  }
  async function analyzeAreaPixels(area, options = {}) {
    const { allowVirtual = false } = options;
    const { x1, y1, x2, y2 } = area;
    const width = x2 - x1 + 1;
    const height = y2 - y1 + 1;
    log(`\u{1F50D} Analizando \xE1rea ${width}x${height} desde (${x1},${y1}) hasta (${x2},${y2})`);
    if (!guardState.availableColors || guardState.availableColors.length === 0) {
      const detected = detectAvailableColors2();
      if (detected.length > 0) {
        guardState.availableColors = detected;
        log(`\u{1F3A8} Colores detectados para an\xE1lisis: ${detected.length}`);
      } else {
        log(`\u26A0\uFE0F Sin colores disponibles para an\xE1lisis. Omitiendo an\xE1lisis para evitar falsos positivos.`);
        return /* @__PURE__ */ new Map();
      }
    }
    const pixelMap = /* @__PURE__ */ new Map();
    const startTileX = Math.floor(x1 / GUARD_DEFAULTS.TILE_SIZE);
    const startTileY = Math.floor(y1 / GUARD_DEFAULTS.TILE_SIZE);
    const endTileX = Math.floor(x2 / GUARD_DEFAULTS.TILE_SIZE);
    const endTileY = Math.floor(y2 / GUARD_DEFAULTS.TILE_SIZE);
    for (let tileY = startTileY; tileY <= endTileY; tileY++) {
      for (let tileX = startTileX; tileX <= endTileX; tileX++) {
        try {
          const tileBlob = await getTileImage(tileX, tileY);
          if (!tileBlob) {
            log(`\u26A0\uFE0F No se pudo obtener tile ${tileX},${tileY}, continuando...`);
            continue;
          }
          const img = new Image();
          const canvas = document.createElement("canvas");
          const ctx = canvas.getContext("2d");
          await new Promise((resolve, reject) => {
            img.onload = resolve;
            img.onerror = reject;
            img.src = URL2.createObjectURL(tileBlob);
          });
          canvas.width = img.width;
          canvas.height = img.height;
          ctx.drawImage(img, 0, 0);
          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
          const data = imageData.data;
          const tileStartX = tileX * GUARD_DEFAULTS.TILE_SIZE;
          const tileStartY = tileY * GUARD_DEFAULTS.TILE_SIZE;
          const tileEndXExclusive = tileStartX + GUARD_DEFAULTS.TILE_SIZE;
          const tileEndYExclusive = tileStartY + GUARD_DEFAULTS.TILE_SIZE;
          const areaEndXExclusive = x2 + 1;
          const areaEndYExclusive = y2 + 1;
          const analyzeStartX = Math.max(x1, tileStartX);
          const analyzeStartY = Math.max(y1, tileStartY);
          const analyzeEndXExclusive = Math.min(areaEndXExclusive, tileEndXExclusive);
          const analyzeEndYExclusive = Math.min(areaEndYExclusive, tileEndYExclusive);
          for (let globalY = analyzeStartY; globalY < analyzeEndYExclusive; globalY++) {
            for (let globalX = analyzeStartX; globalX < analyzeEndXExclusive; globalX++) {
              const localXRaw = globalX - tileStartX;
              const localYRaw = globalY - tileStartY;
              const localX = (localXRaw % 1e3 + 1e3) % 1e3;
              const localY = (localYRaw % 1e3 + 1e3) % 1e3;
              if (localX >= 0 && localX < GUARD_DEFAULTS.TILE_SIZE && localY >= 0 && localY < GUARD_DEFAULTS.TILE_SIZE) {
                if (localX < canvas.width && localY < canvas.height) {
                  const pixelIndex = (localY * canvas.width + localX) * 4;
                  const r = data[pixelIndex];
                  const g = data[pixelIndex + 1];
                  const b = data[pixelIndex + 2];
                  const a = data[pixelIndex + 3];
                  if (a > 0) {
                    const closestColor = findClosestColor2(r, g, b, guardState.availableColors);
                    if (closestColor) {
                      pixelMap.set(`${globalX},${globalY}`, {
                        r,
                        g,
                        b,
                        colorId: closestColor.id,
                        globalX,
                        globalY,
                        localX,
                        localY,
                        tileX,
                        tileY
                      });
                    }
                  }
                }
              }
            }
          }
          URL2.revokeObjectURL(img.src);
        } catch (error) {
          log(`\u274C Error analizando tile ${tileX},${tileY}:`, error);
        }
      }
    }
    log(`\u2705 An\xE1lisis completado: ${pixelMap.size} p\xEDxeles protegidos`);
    if (pixelMap.size === 0) {
      if (allowVirtual) {
        log(`\u26A0\uFE0F No se encontraron p\xEDxeles existentes, creando \xE1rea virtual para protecci\xF3n`);
        const areaEndXExclusive = x2 + 1;
        const areaEndYExclusive = y2 + 1;
        for (let globalY = y1; globalY < areaEndYExclusive; globalY++) {
          for (let globalX = x1; globalX < areaEndXExclusive; globalX++) {
            const tileX = Math.floor(globalX / GUARD_DEFAULTS.TILE_SIZE);
            const tileY = Math.floor(globalY / GUARD_DEFAULTS.TILE_SIZE);
            const localXRaw = globalX - tileX * GUARD_DEFAULTS.TILE_SIZE;
            const localYRaw = globalY - tileY * GUARD_DEFAULTS.TILE_SIZE;
            const localX = (localXRaw % 1e3 + 1e3) % 1e3;
            const localY = (localYRaw % 1e3 + 1e3) % 1e3;
            pixelMap.set(`${globalX},${globalY}`, {
              r: 255,
              g: 255,
              b: 255,
              // Blanco por defecto
              colorId: 5,
              // ID correcto del color blanco
              globalX,
              globalY,
              localX,
              localY,
              tileX,
              tileY
            });
          }
        }
        log(`\u2705 \xC1rea virtual creada: ${pixelMap.size} p\xEDxeles para proteger`);
      } else {
        log(`\u2139\uFE0F An\xE1lisis vac\xEDo y fallback virtual deshabilitado (modo verificaci\xF3n)`);
      }
    }
    return pixelMap;
  }

  // src/slave/Guard/guard.js
  init_client();
  var guardRuntime = {
    analysisInterval: null,
    intervalMs: 3e4,
    lastManualRepair: 0,
    automationInterval: null,
    nextRepairEarliest: 0,
    nextCheckEarliest: 0
  };
  async function ensureGuardColors() {
    try {
      if (typeof window === "undefined") return;
      const gs = window.guardState;
      if (!gs) return;
      if (gs.availableColors && gs.availableColors.length > 0) return;
      const cols1 = detectAvailableColors2();
      if (cols1.length > 0) {
        gs.availableColors = cols1;
        return;
      }
      if (findAndClickPaintButton()) {
        await sleep2(2500);
        const cols2 = detectAvailableColors2();
        if (cols2.length > 0) {
          gs.availableColors = cols2;
          return;
        }
      }
    } catch (e) {
      log("\u26A0\uFE0F ensureGuardColors fallo:", e);
    }
  }
  async function applyGuardConfig(fullConfig, changed, { onIntervalChange } = {}) {
    try {
      if (typeof window === "undefined") return;
      const { guardState: guardState2 } = await Promise.resolve().then(() => (init_config3(), config_exports2));
      if (!guardState2.config) guardState2.config = {};
      const mapping = {
        protectionPattern: "protectionPattern",
        preferColor: "preferColor",
        preferredColorIds: "preferredColorIds",
        excludeColor: "excludeColor",
        excludedColorIds: "excludedColorIds",
        spendAllPixelsOnStart: "spendAllPixelsOnStart",
        minChargesToWait: "minChargesToWait",
        pixelsPerBatch: "pixelsPerBatch",
        randomWaitTime: "randomWaitTime",
        randomWaitMin: "randomWaitMin",
        randomWaitMax: "randomWaitMax",
        watchMode: "watchMode"
      };
      Object.keys(mapping).forEach((k) => {
        if (k in fullConfig) guardState2[mapping[k]] = fullConfig[k];
      });
      if (typeof fullConfig.colorThreshold === "number") guardState2.config.colorThreshold = fullConfig.colorThreshold;
      if (typeof fullConfig.colorComparisonMethod === "string") {
        const method = fullConfig.colorComparisonMethod.toLowerCase();
        if (!guardState2.config) guardState2.config = {};
        guardState2.config.colorComparisonMethod = method === "lab" ? "lab" : "rgb";
      }
      if (fullConfig.randomWaitTime && typeof fullConfig.randomWaitMin === "number" && typeof fullConfig.randomWaitMax === "number") {
        const avg = (fullConfig.randomWaitMin + fullConfig.randomWaitMax) / 2;
        const ms = Math.max(5e3, avg * 1e3);
        onIntervalChange && onIntervalChange(ms);
      }
      log("\u2699\uFE0F Guard config aplicada (modular)");
    } catch (e) {
      log("\u26A0\uFE0F Error aplicando guardConfig (modular):", e);
    }
  }
  async function handleGuardData(message, { setModeIfNeeded, sendPreview, startAnalysisLoop }) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;
    try {
      if (!message.guardData) return;
      const { guardState: guardState2 } = await Promise.resolve().then(() => (init_config3(), config_exports2));
      const data = message.guardData;
      const area = ((_a = data.protectionData) == null ? void 0 : _a.area) || data.protectionArea || data.area;
      if (!area) {
        log("\u274C guardData sin \xE1rea de protecci\xF3n");
        return;
      }
      guardState2.protectionArea = {
        x1: (_d = (_c = (_b = area.x1) != null ? _b : area.x) != null ? _c : area.left) != null ? _d : 0,
        y1: (_g = (_f = (_e = area.y1) != null ? _e : area.y) != null ? _f : area.top) != null ? _g : 0,
        x2: (_k = area.x2) != null ? _k : ((_i = (_h = area.x1) != null ? _h : area.x) != null ? _i : 0) + ((_j = area.width) != null ? _j : 0),
        y2: (_o = area.y2) != null ? _o : ((_m = (_l = area.y1) != null ? _l : area.y) != null ? _m : 0) + ((_n = area.height) != null ? _n : 0)
      };
      const originalPixelsArr = data.originalPixels || ((_p = data.protectionData) == null ? void 0 : _p.originalPixels) || [];
      guardState2.originalPixels = /* @__PURE__ */ new Map();
      for (const p of originalPixelsArr) {
        const key = p.key || `${(_q = p.globalX) != null ? _q : p.x},${(_r = p.globalY) != null ? _r : p.y}`;
        const entry = { r: p.r, g: p.g, b: p.b, colorId: p.colorId || p.id || 0 };
        entry.lab = rgbToLabArray(p.r, p.g, p.b);
        guardState2.originalPixels.set(key, entry);
      }
      log(`\u{1F6E1}\uFE0F GuardData recibido (modular): area=(${guardState2.protectionArea.x1},${guardState2.protectionArea.y1})\u2192(${guardState2.protectionArea.x2},${guardState2.protectionArea.y2}) px=${guardState2.originalPixels.size}`);
      guardState2.changes = /* @__PURE__ */ new Set();
      guardState2.lastCheck = Date.now();
      if (setModeIfNeeded) await setModeIfNeeded();
      await ensureGuardColors();
      if (typeof window !== "undefined") window.guardState = guardState2;
      const preview = await getPreviewData();
      if (preview && sendPreview) sendPreview(preview, { immediate: true });
      if (startAnalysisLoop) startAnalysisLoop();
    } catch (e) {
      log("\u274C Error procesando guardData (modular):", e);
    }
  }
  async function getPreviewData() {
    var _a, _b;
    if (typeof window === "undefined" || !window.guardState) return null;
    const guardState2 = window.guardState;
    if (!guardState2.originalPixels || guardState2.originalPixels.size === 0) return null;
    const analysis = { correctPixels: 0, incorrectPixels: 0, missingPixels: 0 };
    const correctPixelsList = [], incorrectPixelsList = [], missingPixelsList = [], originalPixelsList = [];
    const TOTAL = guardState2.originalPixels.size;
    const MAX_DETAILED_PIXELS = 2e6;
    const MAX_ARRAY_LENGTH = 1e6;
    const DO_FULL_DETAIL = TOTAL <= MAX_DETAILED_PIXELS;
    let truncated = false;
    let sampled = 0;
    try {
      let currentPixels = null;
      if (DO_FULL_DETAIL) {
        currentPixels = await analyzeAreaPixels(guardState2.protectionArea);
      }
      for (const [key, originalPixel] of guardState2.originalPixels) {
        const [x, y] = key.split(",").map(Number);
        if (originalPixelsList.length < MAX_ARRAY_LENGTH) originalPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
        if (DO_FULL_DETAIL && currentPixels) {
          const cur = currentPixels.get(key);
          if (!cur) {
            analysis.missingPixels++;
            if (missingPixelsList.length < MAX_ARRAY_LENGTH) missingPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
            else truncated = true;
          } else {
            const rDiff = Math.abs(originalPixel.r - cur.r);
            const gDiff = Math.abs(originalPixel.g - cur.g);
            const bDiff = Math.abs(originalPixel.b - cur.b);
            if (Math.max(rDiff, gDiff, bDiff) <= 10) {
              analysis.correctPixels++;
              if (correctPixelsList.length < MAX_ARRAY_LENGTH) correctPixelsList.push({ x, y, r: cur.r, g: cur.g, b: cur.b });
              else truncated = true;
            } else {
              analysis.incorrectPixels++;
              if (incorrectPixelsList.length < MAX_ARRAY_LENGTH) incorrectPixelsList.push({ x, y, r: cur.r, g: cur.g, b: cur.b, originalR: originalPixel.r, originalG: originalPixel.g, originalB: originalPixel.b });
              else truncated = true;
            }
          }
        } else if (!DO_FULL_DETAIL) {
          if ((_a = guardState2.lastAnalysis) == null ? void 0 : _a.details) {
            const details = guardState2.lastAnalysis.details;
            if (details.correct && details.correct.has && details.correct.has(key)) {
              analysis.correctPixels++;
              if (correctPixelsList.length < MAX_ARRAY_LENGTH) {
                correctPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
              }
            } else if (details.incorrect && details.incorrect.has && details.incorrect.has(key)) {
              analysis.incorrectPixels++;
              if (incorrectPixelsList.length < MAX_ARRAY_LENGTH) {
                incorrectPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
              }
            } else if (details.missing && details.missing.has && details.missing.has(key)) {
              analysis.missingPixels++;
              if (missingPixelsList.length < MAX_ARRAY_LENGTH) {
                missingPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
              }
            }
          }
        }
        sampled++;
        if (!DO_FULL_DETAIL && sampled >= 1e4) break;
      }
      if (!DO_FULL_DETAIL) {
        if ((_b = guardState2.lastAnalysis) == null ? void 0 : _b.summary) {
          analysis.correctPixels = guardState2.lastAnalysis.summary.correct;
          analysis.incorrectPixels = guardState2.lastAnalysis.summary.incorrect;
          analysis.missingPixels = guardState2.lastAnalysis.summary.missing;
          if (guardState2.lastAnalysis.details) {
            const details = guardState2.lastAnalysis.details;
            const SAMPLE_LIMIT = MAX_ARRAY_LENGTH;
            if (details.correct && typeof details.correct.keys === "function") {
              let correctSampled = 0;
              for (const key of details.correct.keys()) {
                if (correctSampled >= SAMPLE_LIMIT) break;
                const [x, y] = key.split(",").map(Number);
                const originalPixel = guardState2.originalPixels.get(key);
                if (originalPixel) {
                  correctPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
                  correctSampled++;
                }
              }
            }
            if (details.incorrect && typeof details.incorrect.keys === "function") {
              let incorrectSampled = 0;
              for (const key of details.incorrect.keys()) {
                if (incorrectSampled >= SAMPLE_LIMIT) break;
                const [x, y] = key.split(",").map(Number);
                const originalPixel = guardState2.originalPixels.get(key);
                if (originalPixel) {
                  incorrectPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
                  incorrectSampled++;
                }
              }
            }
            if (details.missing && typeof details.missing.keys === "function") {
              let missingSampled = 0;
              for (const key of details.missing.keys()) {
                if (missingSampled >= SAMPLE_LIMIT) break;
                const [x, y] = key.split(",").map(Number);
                const originalPixel = guardState2.originalPixels.get(key);
                if (originalPixel) {
                  missingPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
                  missingSampled++;
                }
              }
            }
          } else {
            const sampleSize = Math.min(MAX_ARRAY_LENGTH, sampled);
            const correctRatio = analysis.correctPixels / TOTAL;
            const incorrectRatio = analysis.incorrectPixels / TOTAL;
            const missingRatio = analysis.missingPixels / TOTAL;
            let sampledCount = 0;
            for (const [key, originalPixel] of guardState2.originalPixels) {
              if (sampledCount >= sampleSize) break;
              const [x, y] = key.split(",").map(Number);
              const rand = Math.random();
              if (rand < correctRatio && correctPixelsList.length < MAX_ARRAY_LENGTH) {
                correctPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
              } else if (rand < correctRatio + incorrectRatio && incorrectPixelsList.length < MAX_ARRAY_LENGTH) {
                incorrectPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
              } else if (rand < correctRatio + incorrectRatio + missingRatio && missingPixelsList.length < MAX_ARRAY_LENGTH) {
                missingPixelsList.push({ x, y, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
              }
              sampledCount++;
            }
          }
        }
        analysis.estimated = true;
        analysis.sampled = sampled;
        analysis.total = TOTAL;
        analysis.note = "Preview resumida (estimada)";
      }
      if (truncated) analysis.truncated = true;
    } catch (err2) {
      console.warn("Error analyzing pixels for preview (modular)", err2);
      analysis.correctPixels = guardState2.originalPixels.size - (guardState2.changes ? guardState2.changes.size : 0);
      analysis.incorrectPixels = guardState2.changes ? guardState2.changes.size : 0;
      analysis.missingPixels = 0;
      analysis.truncated = true;
      analysis.fallback = true;
    }
    const totalPixels = guardState2.originalPixels.size;
    return {
      protectedArea: guardState2.protectionArea,
      analysis,
      originalPixels: originalPixelsList,
      correctPixelsList,
      incorrectPixelsList,
      missingPixelsList,
      changes: guardState2.changes ? Array.from(guardState2.changes) : [],
      totalPixels,
      lastCheck: guardState2.lastCheck || Date.now(),
      isVirtualArea: guardState2.isVirtualArea || false,
      method: guardState2.config && guardState2.config.colorComparisonMethod || "rgb",
      availableColors: Array.isArray(guardState2.availableColors) ? guardState2.availableColors.map((c) => {
        var _a2, _b2;
        return { id: (_b2 = (_a2 = c.id) != null ? _a2 : c.colorId) != null ? _b2 : 0, r: c.r, g: c.g, b: c.b };
      }) : []
    };
  }
  function startGuardAnalysisLoop({ sendPreview } = {}) {
    if (guardRuntime.analysisInterval) return;
    if (typeof window === "undefined" || !window.guardState) return;
    log("\u{1F504} Iniciando loop an\xE1lisis Guard (modular)");
    guardRuntime.analysisInterval = window.setInterval(() => {
      performGuardAnalysis({ sendPreview }).catch((e) => log("\u26A0\uFE0F Error an\xE1lisis Guard modular:", e));
    }, guardRuntime.intervalMs);
    performGuardAnalysis({ sendPreview }).catch(() => {
    });
  }
  function stopGuardAnalysisLoop() {
    if (guardRuntime.analysisInterval) {
      window.clearInterval(guardRuntime.analysisInterval);
      guardRuntime.analysisInterval = null;
    }
  }
  function startGuardAutomation({ sendPreview, sendRepairSuggestion } = {}) {
    if (guardRuntime.automationInterval) return;
    if (typeof window === "undefined" || !window.guardState) return;
    log("\u{1F916} Iniciando automatizaci\xF3n Guard (monitoreo+auto-repair)");
    if (!guardRuntime.analysisInterval) startGuardAnalysisLoop({ sendPreview });
    guardRuntime.automationInterval = window.setInterval(async () => {
      var _a;
      try {
        const gs = window.guardState;
        if (!gs) return;
        const now = Date.now();
        const minCharges = gs.minChargesToWait || 0;
        const currentCharges = gs.currentCharges || 0;
        if (currentCharges < minCharges) {
          return;
        }
        if (gs.randomWaitTime && gs.randomWaitMin != null && gs.randomWaitMax != null) {
          if (now < guardRuntime.nextRepairEarliest) return;
        }
        const diffs = ((_a = gs.lastAnalysis) == null ? void 0 : _a.diffsSample) || [];
        if (!diffs.length) return;
        if (!gs.watchMode) {
          const auto = await manualRepair({}, { sendPreview });
          if (auto && auto.pixels && auto.pixels.length) {
            sendRepairSuggestion && sendRepairSuggestion(auto);
            try {
              trackEvent("auto_repair_trigger", { botVariant: "slave-guard", metadata: { pixels: auto.pixels.length, pattern: auto.patternUsed } });
            } catch {
            }
            if (gs.randomWaitTime) {
              const minMs = Math.max(1e3, (gs.randomWaitMin || 5) * 1e3);
              const maxMs = Math.max(minMs, (gs.randomWaitMax || 15) * 1e3);
              const wait = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
              guardRuntime.nextRepairEarliest = Date.now() + wait;
            } else {
              guardRuntime.nextRepairEarliest = Date.now() + guardRuntime.intervalMs;
            }
          }
        }
      } catch (e) {
        log("\u26A0\uFE0F Error en automation loop Guard:", e);
      }
    }, 5e3);
  }
  function stopGuardAutomation() {
    if (guardRuntime.automationInterval) {
      window.clearInterval(guardRuntime.automationInterval);
      guardRuntime.automationInterval = null;
    }
  }
  async function clearGuardState() {
    try {
      if (typeof window === "undefined") return;
      const { guardState: guardState2 } = await Promise.resolve().then(() => (init_config3(), config_exports2));
      stopGuardAutomation();
      stopGuardAnalysisLoop();
      guardState2.originalPixels = /* @__PURE__ */ new Map();
      guardState2.changes = /* @__PURE__ */ new Set();
      guardState2.lastAnalysis = null;
      guardState2.lastCheck = 0;
      guardState2._spentAllOnce = false;
      guardState2.protectionArea = null;
      guardState2.watchMode = true;
      log("\u{1F9F9} Guard state cleared (modular): reset de pixeles/analisis y watchMode=true");
      return true;
    } catch (e) {
      log("\u26A0\uFE0F Error al limpiar Guard state (modular):", e);
      return false;
    }
  }
  async function performGuardAnalysis({ sendPreview, force } = {}) {
    if (typeof window === "undefined" || !window.guardState) return;
    const guardState2 = window.guardState;
    if (!guardState2 || !guardState2.originalPixels || guardState2.originalPixels.size === 0) return;
    if (guardState2.watchMode && !force) return;
    await ensureGuardColors();
    if (!guardState2.availableColors || guardState2.availableColors.length === 0) {
      log("\u26A0\uFE0F An\xE1lisis omitido: sin colores");
      return;
    }
    const start = Date.now();
    let currentPixels;
    try {
      currentPixels = await analyzeAreaPixels(guardState2.protectionArea);
    } catch (e) {
      log("\u26A0\uFE0F Error analizando \xE1rea (modular):", e);
      return;
    }
    const total = guardState2.originalPixels.size;
    const diffs = [];
    const MAX_DIFFS = 5e3;
    const PREVIEW_LIMIT = 1e6;
    const originalPixelsList = [];
    const correctPixelsList = [];
    const incorrectPixelsList = [];
    const missingPixelsList = [];
    let correct = 0, incorrect = 0, missing = 0;
    const threshold = guardState2.config && typeof guardState2.config.colorThreshold === "number" ? guardState2.config.colorThreshold : 10;
    const method = guardState2.config && guardState2.config.colorComparisonMethod || "rgb";
    for (const [key, originalPixel] of guardState2.originalPixels) {
      if (originalPixelsList.length < PREVIEW_LIMIT) {
        const [ox, oy] = key.split(",").map(Number);
        originalPixelsList.push({ x: ox, y: oy, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
      }
      const cur = currentPixels.get(key);
      if (!cur) {
        missing++;
        const [x2, y2] = key.split(",").map(Number);
        if (diffs.length < MAX_DIFFS) {
          diffs.push({ x: x2, y: y2, type: "missing", expectedColor: originalPixel.colorId });
        }
        if (missingPixelsList.length < PREVIEW_LIMIT) {
          missingPixelsList.push({ x: x2, y: y2, r: originalPixel.r, g: originalPixel.g, b: originalPixel.b });
        }
        continue;
      }
      let isMatch;
      if (method === "lab") {
        const curLab = rgbToLabArray(cur.r, cur.g, cur.b);
        const origLab = originalPixel.lab || rgbToLabArray(originalPixel.r, originalPixel.g, originalPixel.b);
        const dE = deltaE76(origLab, curLab);
        isMatch = dE <= threshold;
      } else {
        const maxDiff = Math.max(Math.abs(originalPixel.r - cur.r), Math.abs(originalPixel.g - cur.g), Math.abs(originalPixel.b - cur.b));
        isMatch = maxDiff <= threshold;
      }
      const [x, y] = key.split(",").map(Number);
      if (isMatch) {
        correct++;
        if (correctPixelsList.length < PREVIEW_LIMIT) {
          correctPixelsList.push({ x, y, r: cur.r, g: cur.g, b: cur.b });
        }
      } else {
        incorrect++;
        if (diffs.length < MAX_DIFFS) {
          diffs.push({ x, y, type: "incorrect", expectedColor: originalPixel.colorId, currentColor: cur.colorId });
        }
        if (incorrectPixelsList.length < PREVIEW_LIMIT) {
          incorrectPixelsList.push({ x, y, r: cur.r, g: cur.g, b: cur.b, originalR: originalPixel.r, originalG: originalPixel.g, originalB: originalPixel.b });
        }
      }
    }
    const accuracy = total > 0 ? (correct / total * 100).toFixed(2) : "0.00";
    try {
      trackEvent("analysis_summary", { botVariant: "slave-guard", metadata: { total, correct, incorrect, missing, accuracy, method, durationMs: Date.now() - start } });
    } catch {
    }
    guardState2.changes = new Set(diffs.filter((d) => d.type !== "missing").map((d) => `${d.x},${d.y}`));
    guardState2.lastCheck = Date.now();
    guardState2.lastAnalysis = { summary: { total, correct, incorrect, missing, accuracy }, diffsSample: diffs, generatedAt: Date.now(), durationMs: (Date.now() - start).toString() };
    if (sendPreview) {
      const previewTruncated = originalPixelsList.length >= PREVIEW_LIMIT || correctPixelsList.length >= PREVIEW_LIMIT || incorrectPixelsList.length >= PREVIEW_LIMIT || missingPixelsList.length >= PREVIEW_LIMIT;
      sendPreview({
        protectedArea: guardState2.protectionArea,
        analysis: { correctPixels: correct, incorrectPixels: incorrect, missingPixels: missing, accuracy: accuracy + "%", truncated: diffs.length >= MAX_DIFFS || previewTruncated, method },
        totalPixels: total,
        // Usamos la clave esperada por la UI: originalPixels. Enviamos también originalPixelsList por compatibilidad.
        originalPixels: originalPixelsList,
        originalPixelsList,
        correctPixelsList,
        incorrectPixelsList,
        missingPixelsList,
        changes: diffs,
        lastCheck: guardState2.lastCheck,
        durationMs: guardState2.lastAnalysis.durationMs,
        availableColors: Array.isArray(guardState2.availableColors) ? guardState2.availableColors.map((c) => {
          var _a, _b;
          return { id: (_b = (_a = c.id) != null ? _a : c.colorId) != null ? _b : 0, r: c.r, g: c.g, b: c.b };
        }) : []
      });
    }
    log(`\u{1F9EA} An\xE1lisis headless modular: total=${total} correct=${correct} incorrect=${incorrect} missing=${missing} diffsSent=${diffs.length}`);
  }
  async function manualCheck({ sendPreview, force } = {}) {
    log("\u{1F50D} manualCheck solicitado");
    await performGuardAnalysis({ sendPreview, force: force != null ? force : true });
  }
  async function manualRepair(params = {}, { sendPreview, force } = {}) {
    var _a, _b, _c, _d;
    log("\u{1F6E0}\uFE0F manualRepair solicitado (simplificado headless)");
    await performGuardAnalysis({ sendPreview, force: force != null ? force : true });
    guardRuntime.lastManualRepair = Date.now();
    if (typeof window === "undefined" || !window.guardState) return { pixels: [] };
    const guardState2 = window.guardState;
    const last = guardState2.lastAnalysis;
    if (!last || !last.diffsSample) return { pixels: [] };
    const limit = params.limit && params.limit > 0 ? params.limit : guardState2.pixelsPerBatch || ((_a = guardState2.config) == null ? void 0 : _a.pixelsPerBatch) || 10;
    let effectiveLimit = limit;
    if (guardState2.spendAllPixelsOnStart && !guardState2._spentAllOnce) {
      effectiveLimit = last.diffsSample.filter((d) => d.type === "incorrect" || d.type === "missing").length || limit;
      guardState2._spentAllOnce = true;
    }
    const changesMap = /* @__PURE__ */ new Map();
    for (const d of last.diffsSample) {
      if (d.type === "incorrect" || d.type === "missing") {
        const key = `${d.x},${d.y}`;
        changesMap.set(key, { original: { colorId: (_c = (_b = d.expectedColor) != null ? _b : d.colorId) != null ? _c : 0 }, current: { colorId: (_d = d.currentColor) != null ? _d : 0 }, type: d.type });
      }
    }
    const pattern = params.pattern || guardState2.protectionPattern || "random";
    const preferColor = guardState2.preferColor;
    const preferredColorIds = guardState2.preferredColorIds || [];
    const excludeColor = guardState2.excludeColor;
    const excludedColorIds = guardState2.excludedColorIds || [];
    const selectedKeys = getPixelsByPattern(pattern, changesMap, effectiveLimit, preferColor, null, preferredColorIds, excludeColor, excludedColorIds);
    const pixels = selectedKeys.map((k) => {
      const [x, y] = k.split(",").map(Number);
      const meta = changesMap.get(k);
      return { x, y, expectedColor: meta.original.colorId, type: meta.type };
    });
    try {
      trackEvent("repair_batch_suggested", { botVariant: "slave-guard", metadata: { count: pixels.length, patternUsed: pattern, totalDiffs: last.diffsSample.length } });
    } catch {
    }
    return { pixels, totalDiffs: last.diffsSample.length, patternUsed: pattern };
  }
  async function toggleWatchMode() {
    if (typeof window === "undefined" || !window.guardState) return null;
    window.guardState.watchMode = !window.guardState.watchMode;
    log(`\u{1F440} watchMode ahora: ${window.guardState.watchMode}`);
    return window.guardState.watchMode;
  }
  function rgbToXyzComponent(v) {
    v = v / 255;
    return v > 0.04045 ? Math.pow((v + 0.055) / 1.055, 2.4) : v / 12.92;
  }
  function rgbToLabArray(r, g, b) {
    const R = rgbToXyzComponent(r);
    const G = rgbToXyzComponent(g);
    const B = rgbToXyzComponent(b);
    const X = (R * 0.4124 + G * 0.3576 + B * 0.1805) / 0.95047;
    const Y = (R * 0.2126 + G * 0.7152 + B * 0.0722) / 1;
    const Z = (R * 0.0193 + G * 0.1192 + B * 0.9505) / 1.08883;
    const fx = X > 8856e-6 ? Math.cbrt(X) : 7.787 * X + 16 / 116;
    const fy = Y > 8856e-6 ? Math.cbrt(Y) : 7.787 * Y + 16 / 116;
    const fz = Z > 8856e-6 ? Math.cbrt(Z) : 7.787 * Z + 16 / 116;
    const L = 116 * fy - 16;
    const a = 500 * (fx - fy);
    const b2 = 200 * (fy - fz);
    return [L, a, b2];
  }
  function deltaE76(lab1, lab2) {
    const dL = lab1[0] - lab2[0];
    const da = lab1[1] - lab2[1];
    const db = lab1[2] - lab2[2];
    return Math.sqrt(dL * dL + da * da + db * db);
  }

  // src/slave/index.js
  init_turnstile();

  // src/slave/paint.js
  init_wplace_api();
  init_turnstile();
  async function paintBatch({ tileX, tileY, coordsFlat, colors, sendToMaster, shouldAbort }) {
    const BATCH = 200;
    let totalPainted = 0;
    let lastStatus = 0;
    let lastSuccess = false;
    for (let i = 0; i < colors.length; i += BATCH) {
      if (shouldAbort && shouldAbort()) {
        sendSafe(sendToMaster, { type: "paint_result", ok: false, aborted: true, tileX, tileY, painted: totalPainted });
        return { success: false, status: lastStatus, painted: totalPainted, aborted: true };
      }
      const subColors = colors.slice(i, i + BATCH);
      const start = i * 2;
      const end = Math.min(colors.length, i + BATCH) * 2;
      const subCoordsFlat = coordsFlat.slice(start, end);
      let t2 = null;
      try {
        t2 = await ensureToken();
      } catch {
      }
      const result = await postPixelBatchImage(tileX, tileY, subCoordsFlat, subColors, t2);
      lastStatus = (result == null ? void 0 : result.status) || 0;
      lastSuccess = !!(result == null ? void 0 : result.success);
      const painted = Math.trunc((result == null ? void 0 : result.painted) || 0);
      totalPainted += painted;
      sendSafe(sendToMaster, { type: "paint_progress", tileX, tileY, painted, batchIndex: Math.floor(i / BATCH), totalBatches: Math.ceil(colors.length / BATCH) });
      await sleepBrief(100);
    }
    sendSafe(sendToMaster, { type: "paint_result", ok: lastSuccess, status: lastStatus, tileX, tileY, painted: totalPainted });
    return { success: lastSuccess, status: lastStatus, painted: totalPainted };
  }
  async function repairPixels({ pixels, tileSize = 1e3, sendToMaster, shouldAbort }) {
    var _a, _b;
    if (!Array.isArray(pixels) || pixels.length === 0) return { painted: 0 };
    const byTile = /* @__PURE__ */ new Map();
    for (const p of pixels) {
      const gx = Math.trunc(p.x);
      const gy = Math.trunc(p.y);
      const color = Math.trunc((_b = (_a = p.expectedColor) != null ? _a : p.color) != null ? _b : 0);
      const tileX = Math.floor(gx / tileSize);
      const tileY = Math.floor(gy / tileSize);
      const lx = gx - tileX * tileSize;
      const ly = gy - tileY * tileSize;
      const key = `${tileX},${tileY}`;
      if (!byTile.has(key)) byTile.set(key, { tileX, tileY, localsFlat: [], colors: [] });
      const bucket = byTile.get(key);
      bucket.localsFlat.push(lx, ly);
      bucket.colors.push(color);
    }
    let totalPainted = 0;
    for (const [, group] of byTile) {
      if (shouldAbort && shouldAbort()) {
        sendSafe(sendToMaster, { type: "paint_result", ok: false, aborted: true, painted: totalPainted });
        return { painted: totalPainted, aborted: true };
      }
      const { tileX, tileY, localsFlat, colors } = group;
      const res = await paintBatch({ tileX, tileY, coordsFlat: localsFlat, colors, sendToMaster, shouldAbort });
      totalPainted += Math.trunc((res == null ? void 0 : res.painted) || 0);
      await sleepBrief(150);
    }
    sendSafe(sendToMaster, { type: "repair_complete", completed: totalPainted, source: "guard_one_batch" });
    return { painted: totalPainted };
  }
  function sendSafe(sendToMaster, msg) {
    try {
      if (typeof sendToMaster === "function") sendToMaster(msg);
    } catch {
    }
  }
  function sleepBrief(ms) {
    return new Promise((r) => setTimeout(r, ms));
  }

  // src/slave/index.js
  init_config3();
  var { setInterval, clearInterval } = window;
  var WPlaceSlave = class {
    constructor() {
      this.ws = null;
      this.slaveId = null;
      this.reconnectAttempts = 0;
      this.currentMode = null;
      this.currentBot = null;
      this.telemetryData = {
        repaired_pixels: 0,
        missing_pixels: 0,
        absent_pixels: 0,
        remaining_charges: 0,
        max_charges: 0
      };
      this.isRunning = false;
      this.projectConfig = null;
      this.masterServerUrl = "ws://localhost:8000/ws/slave";
      this.connectionStatus = "disconnected";
      this.ui = null;
      this.isFavorite = false;
      this.telemetryInterval = null;
      this.manualDisconnect = false;
      this.abortPainting = false;
    }
    // Anexa availableColors del guardState al preview si falta
    augmentPreview(preview) {
      try {
        const p = preview && typeof preview === "object" ? { ...preview } : {};
        const gs = typeof window !== "undefined" && window.guardState ? window.guardState : null;
        const colors = gs && Array.isArray(gs.availableColors) ? gs.availableColors : p.availableColors || [];
        if (!p.availableColors && Array.isArray(colors)) {
          p.availableColors = colors.map((c, idx) => {
            var _a;
            if (c && typeof c === "object" && "r" in c && "g" in c && "b" in c) {
              return { id: (_a = c.id) != null ? _a : idx, r: c.r | 0, g: c.g | 0, b: c.b | 0 };
            }
            return c;
          });
        }
        return p;
      } catch {
        return preview;
      }
    }
    // Envía un mensaje preview_data con preview enriquecido
    sendPreview(preview) {
      try {
        const enriched = this.augmentPreview(preview);
        this.sendToMaster({ type: "preview_data", data: enriched });
      } catch {
        this.sendToMaster({ type: "preview_data", data: preview });
      }
    }
    // Si hay availableColors conocidos, enviarlos en un preview_data mínimo
    sendAvailableColorsIfAny() {
      try {
        const gs = typeof window !== "undefined" && window.guardState ? window.guardState : null;
        const colors = gs && Array.isArray(gs.availableColors) ? gs.availableColors : [];
        if (colors && colors.length) {
          const payload = { availableColors: colors.map((c, i) => {
            var _a;
            return { id: (_a = c.id) != null ? _a : i, r: c.r | 0, g: c.g | 0, b: c.b | 0 };
          }) };
          this.sendToMaster({ type: "preview_data", data: payload });
        }
      } catch {
      }
    }
    async init(masterUrl) {
      this.masterServerUrl = this.normalizeWsUrl(masterUrl);
      log("\u{1F517} Inicializando WPlace Slave...");
      window.__WPA_TURNSTILE_SYSTEM__ = {
        ensureToken,
        invalidateToken,
        getPawtectToken,
        getFingerprint
      };
      await this.connectToMaster();
      this.startTelemetryLoop();
    }
    async derivePersistentId() {
      var _a;
      try {
        const session = await getSession();
        let username = "ANON";
        if ((session == null ? void 0 : session.success) && ((_a = session == null ? void 0 : session.data) == null ? void 0 : _a.user)) {
          const u = session.data.user;
          username = u.username || u.name || u.user || (u.email ? String(u.email).split("@")[0] : "") || "ANON";
        }
        username = String(username).toUpperCase().replace(/[^A-Z0-9]/g, "").slice(0, 18) || "ANON";
        const id = `SLV_${username}`;
        localStorage.setItem("wplace_slave_id", id);
        return id;
      } catch (e) {
        try {
          const fallback = localStorage.getItem("wplace_slave_id");
          if (fallback) return fallback;
        } catch {
        }
        return "SLV_ANON";
      }
    }
    async connectToMaster() {
      var _a;
      try {
        this.connectionStatus = "connecting";
        this.updateUI();
        this.slaveId = await this.derivePersistentId();
        try {
          const pageIsHttps = typeof window !== "undefined" && ((_a = window.location) == null ? void 0 : _a.protocol) === "https:";
          const u = new URL(this.masterServerUrl);
          const isWs = u.protocol === "ws:";
          const isLocal = ["localhost", "127.0.0.1", "::1"].includes(u.hostname);
          if (pageIsHttps && isWs && !isLocal) {
            this.masterServerUrl = this.masterServerUrl.replace(/^ws:\/\//i, "wss://");
            log("\u{1F510} P\xE1gina HTTPS: actualizando conexi\xF3n a wss:// para evitar contenido mixto");
          }
        } catch {
        }
        const urlWithId = this.masterServerUrl.includes("?") ? `${this.masterServerUrl}&id=${encodeURIComponent(this.slaveId)}` : `${this.masterServerUrl}?id=${encodeURIComponent(this.slaveId)}`;
        log(`\u{1F50C} Conectando al servidor maestro: ${urlWithId}`);
        this.ws = new WebSocket(urlWithId);
        this.ws.onopen = async () => {
          log("\u2705 Conectado al servidor maestro");
          this.connectionStatus = "connected";
          this.reconnectAttempts = 0;
          this.updateUI();
          try {
            await sessionStart({
              botVariant: "auto-slave",
              metadata: {
                slaveId: this.slaveId,
                masterUrl: this.masterServerUrl
              }
            });
            const mcfg = getMetricsConfig({ VARIANT: "auto-slave" });
            if (mcfg.ENABLED) {
              if (!window.__wplaceMetrics) window.__wplaceMetrics = {};
              window.__wplaceMetrics.slaveSessionActive = true;
              const pingEvery = Math.max(6e4, mcfg.PING_INTERVAL_MS || 3e5);
              window.__wplaceMetrics.slavePingInterval = window.setInterval(
                () => sessionPing({ botVariant: "auto-slave" }),
                pingEvery
              );
            }
          } catch (error) {
            log(`\u26A0\uFE0F Error enviando m\xE9tricas de inicio: ${error.message}`);
          }
          try {
            await ensureGuardColors();
            this.sendAvailableColorsIfAny();
          } catch (e) {
            log("\u26A0\uFE0F No se pudieron detectar/enviar colores al conectar:", e);
          }
          await this.updateTelemetry();
          this.sendTelemetry();
          this.startTelemetryLoop();
          this.sendToMaster({ type: "status", status: "online" });
        };
        this.ws.onmessage = async (event) => {
          try {
            const data = JSON.parse(event.data);
            const msg = tryDecompressWrapper(data);
            await this.handleMasterMessage(msg);
          } catch (e) {
            log("\u26A0\uFE0F Error procesando mensaje del servidor: " + ((e == null ? void 0 : e.message) || e));
          }
        };
        this.ws.onclose = (event) => {
          log(`\u274C Desconectado del servidor maestro - C\xF3digo: ${event.code}`);
          this.connectionStatus = "disconnected";
          this.updateUI();
          if (!this.manualDisconnect) {
            this.scheduleReconnect();
          }
        };
        this.ws.onerror = (error) => {
          log(`\u274C Error de WebSocket: ${error}`);
          this.connectionStatus = "error";
          this.updateUI();
        };
      } catch (error) {
        log(`\u274C Error de conexi\xF3n: ${error}`);
        this.connectionStatus = "error";
        this.updateUI();
        this.scheduleReconnect();
      }
    }
    scheduleReconnect() {
      if (this.reconnectAttempts < SLAVE_CONFIG.MAX_RECONNECT_ATTEMPTS) {
        this.reconnectAttempts++;
        log(`\u{1F504} Reintentando conexi\xF3n en ${SLAVE_CONFIG.RECONNECT_INTERVAL / 1e3}s (intento ${this.reconnectAttempts})`);
        setTimeout(() => this.connectToMaster(), SLAVE_CONFIG.RECONNECT_INTERVAL);
      } else {
        log("\u274C M\xE1ximo de intentos de reconexi\xF3n alcanzado");
        this.connectionStatus = "error";
        this.updateUI();
      }
    }
    async handleMasterMessage(message) {
      var _a;
      log(`\u{1F4E8} Comando recibido: ${message.type}`);
      switch (message.type) {
        case "connected":
          this.slaveId = message.slave_id || this.slaveId;
          log(`\u{1F194} ID de Slave asignado: ${this.slaveId}`);
          this.updateUI();
          break;
        case "setMode":
          this.setMode(message.mode);
          break;
        case "loadProject":
          this.loadProject(message.config);
          break;
        case "assignChunk":
          this.assignChunk(message.chunk);
          break;
        case "control":
          this.handleControl(message.action);
          break;
        case "paintBatch":
          this.handlePaintBatch(message);
          break;
        case "setFavorite":
          this.isFavorite = message.isFavorite || false;
          log(`\u2B50 Slave marcado como favorito: ${this.isFavorite}`);
          this.updateUI();
          if (this.isFavorite) {
            try {
              await prepareTokensForBot("Slave-Favorite");
            } catch {
            }
            try {
              await ensureGuardColors();
            } catch {
            }
            try {
              this.sendAvailableColorsIfAny();
            } catch {
            }
            try {
              if (this.currentMode !== "Guard") {
                await this.setMode("Guard");
              }
              if (!this.isRunning) {
                await this.startBot();
              }
            } catch (e) {
              log("\u26A0\uFE0F No se pudo auto-iniciar al ser favorito:", e);
            }
          }
          break;
        case "favorite_status":
          this.isFavorite = message.is_favorite || false;
          log(`\u2B50 Estado de favorito actualizado: ${this.isFavorite}`);
          this.updateUI();
          if (this.isFavorite) {
            try {
              await prepareTokensForBot("Slave-Favorite");
            } catch {
            }
            try {
              await ensureGuardColors();
            } catch {
            }
            try {
              this.sendAvailableColorsIfAny();
            } catch {
            }
            try {
              if (this.currentMode !== "Guard") {
                await this.setMode("Guard");
              }
              if (!this.isRunning) {
                await this.startBot();
              }
            } catch (e) {
              log("\u26A0\uFE0F No se pudo auto-iniciar (favorite_status):", e);
            }
          }
          break;
        case "repairOrder":
          log(`\u{1F527} Orden de reparaci\xF3n recibida: ${message.total_repairs} p\xEDxeles a reparar`);
          await this.handleRepairOrder(message);
          break;
        case "guardData":
          await handleGuardData(message, {
            setModeIfNeeded: async () => {
              if (this.currentMode !== "Guard") await this.setMode("Guard");
            },
            sendPreview: (preview) => this.sendPreview(preview),
            startAnalysisLoop: () => startGuardAutomation({
              sendPreview: (data) => this.sendPreview(data),
              sendRepairSuggestion: (res) => this.sendToMaster({ type: "repair_suggestion", pixels: res.pixels, totalDiffs: res.totalDiffs, patternUsed: res.patternUsed, auto: true })
            })
          });
          break;
        case "guardConfig":
          await applyGuardConfig(message.config || {}, message.changed || {}, {
            onIntervalChange: (ms) => {
            }
          });
          if (this.isFavorite) {
            try {
              if (this.currentMode !== "Guard") {
                await this.setMode("Guard");
              }
              if (!this.isRunning) {
                await this.startBot();
              }
            } catch (e) {
              log("\u26A0\uFE0F No se pudo iniciar tras guardConfig:", e);
            }
          }
          break;
        case "guardControl":
          if (this.currentMode !== "Guard") {
            await this.setMode("Guard");
          }
          if (message.action === "check") {
            await manualCheck({ sendPreview: (data) => this.sendPreview(data) });
          } else if (message.action === "repair") {
            const params = message.params || {};
            if (params.limit && params.limit > 0) {
              const suggested = await manualRepair(params, { sendPreview: (data) => this.sendPreview(data) });
              if (suggested && Array.isArray(suggested.pixels) && suggested.pixels.length) {
                this.sendToMaster({ type: "repair_ack", total_repairs: suggested.pixels.length, source: "guard_one_batch" });
                this.abortPainting = false;
                await repairPixels({
                  pixels: suggested.pixels,
                  tileSize: ((_a = GUARD_DEFAULTS) == null ? void 0 : _a.TILE_SIZE) || 1e3,
                  sendToMaster: (m) => this.sendToMaster(m),
                  shouldAbort: () => this.abortPainting === true
                });
              } else {
                this.sendToMaster({ type: "repair_complete", completed: 0, source: "guard_one_batch" });
              }
            } else {
              const result = await manualRepair(params, { sendPreview: (data) => this.sendPreview(data) });
              if (result && Array.isArray(result.pixels)) {
                this.sendToMaster({ type: "repair_suggestion", pixels: result.pixels, totalDiffs: result.totalDiffs || 0 });
              }
            }
          } else if (message.action === "toggleWatch") {
            const newMode = await toggleWatchMode();
            this.sendToMaster({ type: "status", status: "watch_toggled", watchMode: newMode });
          } else if (message.action === "clear") {
            try {
              this.abortPainting = true;
              if (this.isRunning) {
                await this.stopBot();
              }
              const ok = await clearGuardState();
              this.currentMode = null;
              this.projectData = null;
              this.isRunning = false;
              this.telemetryData = {
                repaired_pixels: 0,
                missing_pixels: 0,
                absent_pixels: 0,
                remaining_charges: 0
              };
              this.sendToMaster({ type: "status", status: ok ? "cleared" : "clear_error" });
              await this.updateTelemetry();
              this.sendTelemetry();
              this.updateUI();
              log("\u{1F9F9} Slave completamente limpiado - vuelto a estado inicial");
            } catch (e) {
              this.sendToMaster({ type: "status", status: "clear_error", error: String((e == null ? void 0 : e.message) || e) });
            }
          }
          break;
        default:
          log(`\u2753 Comando desconocido: ${message.type}`);
      }
    }
    // NUEVO: manejar lote de pintura remoto (solo pinta lo que manda el master)
    async handlePaintBatch(message) {
      try {
        const { tileX, tileY, coords, colors, requestId, batchId } = message || {};
        if (!Array.isArray(coords) || !Array.isArray(colors) || coords.length !== colors.length || coords.length === 0) {
          this.sendToMaster({ type: "paint_result", ok: false, error: "Invalid coords/colors", tileX, tileY, painted: 0, requestId, batchId });
          return;
        }
        const cleanCoordsFlat = [];
        for (const c of coords) {
          const x = Math.trunc(c == null ? void 0 : c.x);
          const y = Math.trunc(c == null ? void 0 : c.y);
          if (Number.isFinite(x) && Number.isFinite(y)) {
            const lx = (x % 1e3 + 1e3) % 1e3;
            const ly = (y % 1e3 + 1e3) % 1e3;
            cleanCoordsFlat.push(lx, ly);
          }
        }
        this.abortPainting = false;
        const res = await paintBatch({
          tileX,
          tileY,
          coordsFlat: cleanCoordsFlat,
          colors,
          // Propagar requestId en todos los mensajes de progreso
          sendToMaster: (m) => {
            try {
              if (m && typeof m === "object") {
                this.sendToMaster({ ...m, requestId, batchId });
              } else {
                this.sendToMaster(m);
              }
            } catch {
              this.sendToMaster(m);
            }
          },
          shouldAbort: () => this.abortPainting === true
        });
        await this.updateTelemetry();
        this.sendTelemetry();
        if (!(res == null ? void 0 : res.aborted)) {
          this.sendToMaster({ type: "paint_result", ok: !!(res == null ? void 0 : res.success), status: (res == null ? void 0 : res.status) || 0, tileX, tileY, coords, painted: (res == null ? void 0 : res.painted) || 0, requestId, batchId });
          if ((res == null ? void 0 : res.success) && (res == null ? void 0 : res.painted) > 0) {
            try {
              const { pixelsPainted: pixelsPainted2 } = await Promise.resolve().then(() => (init_client(), client_exports));
              await pixelsPainted2(res.painted, {
                botVariant: "auto-slave",
                metadata: {
                  slaveId: this.slaveId,
                  mode: this.currentMode,
                  tileX,
                  tileY,
                  batchId
                }
              });
            } catch (error) {
            }
          }
        }
      } catch (err2) {
        log(`\u274C Error en handlePaintBatch: ${(err2 == null ? void 0 : err2.message) || err2}`);
        this.sendToMaster({ type: "paint_result", ok: false, error: String((err2 == null ? void 0 : err2.message) || err2), tileX: message == null ? void 0 : message.tileX, tileY: message == null ? void 0 : message.tileY, coords: message == null ? void 0 : message.coords, painted: 0, requestId: message == null ? void 0 : message.requestId, batchId: message == null ? void 0 : message.batchId });
      }
    }
    // NUEVO: procesa una orden de reparación genérica agrupando por tile y usando handlePaintBatch
    async handleRepairOrder(message) {
      var _a;
      log(`\u{1F527} Procesando orden de reparaci\xF3n: ${message.total_repairs} p\xEDxeles`);
      try {
        const { coords, colors, source } = message || {};
        if (!Array.isArray(coords) || !Array.isArray(colors) || coords.length !== colors.length) {
          log("\u274C Orden de reparaci\xF3n inv\xE1lida: coordenadas y colores no coinciden");
          return;
        }
        this.sendToMaster({ type: "repair_ack", total_repairs: coords.length, source });
        const TILE = ((_a = GUARD_DEFAULTS) == null ? void 0 : _a.TILE_SIZE) || 1e3;
        const byTile = /* @__PURE__ */ new Map();
        for (let i = 0; i < coords.length; i++) {
          const c = coords[i] || {};
          const col = colors[i];
          const gx = Math.trunc(c.x);
          const gy = Math.trunc(c.y);
          const tileX = Math.floor(gx / TILE);
          const tileY = Math.floor(gy / TILE);
          const lx = gx - tileX * TILE;
          const ly = gy - tileY * TILE;
          const key = `${tileX},${tileY}`;
          if (!byTile.has(key)) byTile.set(key, { tileX, tileY, coords: [], colors: [] });
          const bucket = byTile.get(key);
          bucket.coords.push({ x: lx, y: ly });
          bucket.colors.push(col);
        }
        const CHUNK = 50;
        let completed = 0;
        const total = coords.length;
        for (const [, group] of byTile) {
          if (this.abortPainting === true) {
            log("\u23F9\uFE0F Reparaci\xF3n abortada por Stop");
            break;
          }
          const { tileX, tileY, coords: lc, colors: cols } = group;
          for (let i = 0; i < lc.length; i += CHUNK) {
            if (this.abortPainting === true) {
              log("\u23F9\uFE0F Reparaci\xF3n abortada durante sub-lote");
              break;
            }
            const partCoords = lc.slice(i, i + CHUNK);
            const partColors = cols.slice(i, i + CHUNK);
            const batchMsg = { tileX, tileY, coords: partCoords, colors: partColors };
            await this.handlePaintBatch(batchMsg);
            completed += partCoords.length;
            this.sendToMaster({ type: "repair_progress", completed, total, source });
            log(`\u{1F3A8} Progreso de reparaci\xF3n: ${completed}/${total}`);
            try {
              const { pixelsRepaired: pixelsRepaired2 } = await Promise.resolve().then(() => (init_client(), client_exports));
              await pixelsRepaired2(partCoords.length, {
                botVariant: "auto-slave",
                metadata: {
                  slaveId: this.slaveId,
                  mode: this.currentMode,
                  source,
                  tileX,
                  tileY,
                  progress: `${completed}/${total}`
                }
              });
            } catch (error) {
            }
            await new Promise((r) => setTimeout(r, 200));
          }
          if (this.abortPainting === true) break;
        }
        if (this.abortPainting === true) {
          this.sendToMaster({ type: "repair_error", error: "aborted", source });
          log("\u23F9\uFE0F Orden de reparaci\xF3n abortada");
        } else {
          this.sendToMaster({ type: "repair_complete", completed, source });
          log(`\u2705 Orden de reparaci\xF3n completada: ${completed} p\xEDxeles reparados`);
        }
      } catch (err2) {
        log(`\u274C Error procesando orden de reparaci\xF3n: ${(err2 == null ? void 0 : err2.message) || err2}`);
        this.sendToMaster({ type: "repair_error", error: String((err2 == null ? void 0 : err2.message) || err2), source: message == null ? void 0 : message.source });
      }
    }
    async setMode(mode) {
      try {
        mode = this.normalizeMode(mode);
        log(`\u{1F3AF} Configurando modo: ${mode}`);
        this.currentMode = mode;
        if (this.currentBot && this.isRunning) {
          await this.stopCurrentBot();
        }
        this.initializeBot(mode);
        this.sendToMaster({
          type: "status",
          status: "mode_set",
          mode
        });
        this.updateUI();
      } catch (error) {
        log(`\u274C Error configurando modo: ${error}`);
        this.sendToMaster({
          type: "status",
          status: "error",
          error: error.message
        });
      }
    }
    initializeBot(mode) {
      mode = this.normalizeMode(mode);
      switch (mode) {
        case "Image":
          this.currentBot = {
            start: async () => {
              log("\u{1F3A8} Iniciando bot de imagen...");
              window.__wplaceBot = { ...window.__wplaceBot, imageRunning: true };
              try {
                await prepareTokensForBot("Image");
              } catch {
              }
              await runImage();
            },
            stop: () => {
              log("\u23F9\uFE0F Deteniendo bot de imagen");
              if (window.__wplaceBot) {
                window.__wplaceBot.imageRunning = false;
              }
            },
            pause: () => log("\u23F8\uFE0F Bot de imagen pausado"),
            getTelemetry: () => this.getImageTelemetry()
          };
          break;
        case "Guard":
          this.currentBot = {
            start: async () => {
              var _a, _b;
              log("\u{1F6E1}\uFE0F Iniciando Guard headless (sin UI)...");
              window.__wplaceBot = { ...window.__wplaceBot, guardRunning: true };
              try {
                await prepareTokensForBot("Guard");
              } catch {
              }
              try {
                if (typeof window !== "undefined" && !window.guardState) {
                  const mod = await Promise.resolve().then(() => (init_config3(), config_exports2));
                  window.guardState = mod.guardState;
                }
                await ensureGuardColors();
                log(`\u{1F3A8} Colores headless disponibles: ${((_b = (_a = window.guardState) == null ? void 0 : _a.availableColors) == null ? void 0 : _b.length) || 0}`);
              } catch (e) {
                log("\u26A0\uFE0F Error inicializando Guard headless:", e);
              }
            },
            stop: () => {
              log("\u23F9\uFE0F Deteniendo bot guardi\xE1n");
              if (window.__wplaceBot) {
                window.__wplaceBot.guardRunning = false;
              }
            },
            pause: () => log("\u23F8\uFE0F Bot guardi\xE1n pausado"),
            getTelemetry: () => this.getGuardTelemetry()
          };
          break;
        case "Farm":
          this.currentBot = {
            start: async () => {
              log("\u{1F33E} Iniciando bot de farming...");
              window.__wplaceBot = { ...window.__wplaceBot, farmRunning: true };
              try {
                await prepareTokensForBot("Farm");
              } catch {
              }
              await runFarm();
            },
            stop: () => {
              log("\u23F9\uFE0F Deteniendo bot de farming");
              if (window.__wplaceBot) {
                window.__wplaceBot.farmRunning = false;
              }
            },
            pause: () => log("\u23F8\uFE0F Bot de farming pausado"),
            getTelemetry: () => this.getFarmTelemetry()
          };
          break;
      }
    }
    normalizeMode(mode) {
      if (!mode || typeof mode !== "string") return mode;
      const m = mode.toLowerCase();
      if (m === "guard") return "Guard";
      if (m === "image" || m === "painter" || m === "overlay") return "Image";
      if (m === "farm") return "Farm";
      return mode;
    }
    async loadProject(config) {
      log("\u{1F4CB} Cargando configuraci\xF3n del proyecto");
      this.projectConfig = config;
      if (this.currentBot && this.currentBot.loadConfig) {
        this.currentBot.loadConfig(config);
      }
      this.sendToMaster({
        type: "status",
        status: "project_loaded"
      });
      if (this.isFavorite && this.currentMode === "Guard") {
        setTimeout(async () => {
          const previewData = await getPreviewData();
          const enriched = this.augmentPreview(previewData);
          if (enriched) {
            this.sendToMaster({ type: "preview_data", data: enriched });
            log("\u{1F4CA} Datos de preview enviados al servidor");
          }
        }, 1e3);
      }
    }
    assignChunk(chunk) {
      log(`\u{1F4E6} Chunk asignado: ${JSON.stringify(chunk)}`);
      if (this.currentBot && this.currentBot.assignChunk) {
        this.currentBot.assignChunk(chunk);
      }
    }
    handleControl(action) {
      log(`\u{1F3AE} Acci\xF3n de control: ${action}`);
      switch (action) {
        case "start":
          this.startBot();
          break;
        case "pause":
          this.pauseBot();
          break;
        case "stop":
          this.stopBot();
          break;
      }
    }
    async startBot() {
      if (!this.currentBot) {
        log("\u274C No hay bot cargado");
        return;
      }
      try {
        try {
          await prepareTokensForBot(this.currentMode || "Bot");
        } catch {
        }
        this.isRunning = true;
        await this.currentBot.start();
        this.sendToMaster({
          type: "status",
          status: "running"
        });
        this.updateUI();
      } catch (error) {
        log(`\u274C Error iniciando bot: ${error}`);
        this.isRunning = false;
        this.updateUI();
      }
    }
    // Normaliza entradas como "host" o "host:puerto" a ws(s)://host/ws/slave
    normalizeWsUrl(raw) {
      var _a;
      try {
        if (!raw) return "";
        let v = String(raw).trim();
        v = v.replace(/^http:\/\//i, "ws://").replace(/^https:\/\//i, "wss://");
        if (!/^[a-z]+:\/\//i.test(v)) {
          const scheme = typeof window !== "undefined" && ((_a = window.location) == null ? void 0 : _a.protocol) === "https:" ? "wss://" : "ws://";
          v = scheme + v;
        }
        try {
          const u = new URL(v);
          if (!u.pathname || u.pathname === "/") {
            u.pathname = "/ws/slave";
            v = u.toString();
          }
        } catch {
        }
        return v;
      } catch {
        return raw;
      }
    }
    pauseBot() {
      if (!this.currentBot || !this.isRunning) {
        log("\u274C No hay bot ejecut\xE1ndose");
        return;
      }
      this.isRunning = false;
      this.currentBot.pause();
      this.sendToMaster({
        type: "status",
        status: "paused"
      });
      this.updateUI();
    }
    stopBot() {
      if (!this.currentBot) {
        log("\u274C No hay bot cargado");
        return;
      }
      this.abortPainting = true;
      this.isRunning = false;
      this.currentBot.stop();
      this.sendToMaster({
        type: "status",
        status: "stopped"
      });
      this.updateUI();
    }
    async stopCurrentBot() {
      if (this.currentBot && this.isRunning) {
        this.abortPainting = true;
        this.isRunning = false;
        this.currentBot.stop();
      }
    }
    startTelemetryLoop() {
      if (this.telemetryInterval) {
        clearInterval(this.telemetryInterval);
      }
      this.telemetryInterval = setInterval(async () => {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
          await this.updateTelemetry();
          this.sendTelemetry();
          try {
            await sessionPing({
              botVariant: "auto-slave",
              metadata: {
                slaveId: this.slaveId,
                currentMode: this.currentMode,
                isRunning: this.isRunning,
                telemetry: this.telemetryData
              }
            });
          } catch (error) {
          }
        }
      }, SLAVE_CONFIG.TELEMETRY_INTERVAL);
    }
    async updateTelemetry() {
      if (this.currentBot && this.currentBot.getTelemetry) {
        const botTelemetry = this.currentBot.getTelemetry();
        this.telemetryData = { ...this.telemetryData, ...botTelemetry };
      }
      if (this.currentMode === "Guard") {
        const guardTelemetry = this.getGuardTelemetry();
        this.telemetryData = { ...this.telemetryData, ...guardTelemetry };
      }
      const ci = await this.getChargeInfo();
      this.telemetryData.remaining_charges = ci.remaining;
      this.telemetryData.max_charges = ci.max;
    }
    async getChargeInfo() {
      try {
        const sessionResult = await getSession();
        if (sessionResult.success) {
          const remaining = Math.floor(sessionResult.data.charges || 0);
          const max = Math.floor(sessionResult.data.maxCharges || 0);
          return { remaining, max };
        }
      } catch (error) {
        log("\u274C Error obteniendo cargas desde API:", error);
      }
      return { remaining: 0, max: 0 };
    }
    getImageTelemetry() {
      return {
        repaired_pixels: Math.floor(Math.random() * 100),
        missing_pixels: Math.floor(Math.random() * 50),
        absent_pixels: Math.floor(Math.random() * 25)
      };
    }
    getGuardTelemetry() {
      if (typeof window !== "undefined" && window.guardState) {
        const guardState2 = window.guardState;
        const totalPixels = guardState2.originalPixels ? guardState2.originalPixels.size : 0;
        const changedPixels = guardState2.changes ? guardState2.changes.size : 0;
        const repairedPixels = guardState2.totalRepaired || 0;
        const accuracy = totalPixels > 0 ? ((totalPixels - changedPixels) / totalPixels * 100).toFixed(1) : "0.0";
        return {
          mode: "guard",
          pixelsFixed: repairedPixels,
          pixelsMissing: changedPixels,
          totalPixels,
          accuracy: accuracy + "%",
          correctPixels: totalPixels - changedPixels,
          // estimado rápido
          incorrectPixels: changedPixels,
          // sin diferenciar missing vs incorrect aquí todavía
          missingPixels: 0,
          // se rellenará tras análisis detallado preview
          protectedArea: guardState2.protectionArea || null,
          status: guardState2.running ? guardState2.watchMode ? "watching" : "protecting" : "stopped",
          charges: Math.floor(guardState2.currentCharges || 0),
          maxCharges: guardState2.maxCharges || 0,
          lastCheck: guardState2.lastCheck || 0,
          isVirtualArea: guardState2.isVirtualArea || false
        };
      }
      return {
        mode: "guard",
        pixelsFixed: 0,
        pixelsMissing: 0,
        totalPixels: 0,
        accuracy: "0.0%",
        correctPixels: 0,
        incorrectPixels: 0,
        missingPixels: 0,
        protectedArea: null,
        status: "unavailable",
        charges: 0,
        maxCharges: 0,
        lastCheck: 0,
        isVirtualArea: false
      };
    }
    getFarmTelemetry() {
      return {
        repaired_pixels: Math.floor(Math.random() * 500),
        missing_pixels: 0,
        absent_pixels: 0
      };
    }
    async sendTelemetry() {
      var _a, _b, _c, _d, _e, _f;
      let telemetryData = { ...this.telemetryData };
      if (this.isFavorite && this.currentMode === "Guard") {
        telemetryData.previewData = await getPreviewData();
        try {
          telemetryData.previewData = this.augmentPreview(telemetryData.previewData);
        } catch {
        }
        if (telemetryData.previewData && telemetryData.previewData.analysis) {
          const a = telemetryData.previewData.analysis;
          telemetryData.correctPixels = (_b = (_a = a.correctPixels) != null ? _a : a.correct) != null ? _b : telemetryData.correctPixels;
          telemetryData.incorrectPixels = (_d = (_c = a.incorrectPixels) != null ? _c : a.incorrect) != null ? _d : telemetryData.incorrectPixels;
          telemetryData.missingPixels = (_f = (_e = a.missingPixels) != null ? _e : a.missing) != null ? _f : telemetryData.missingPixels;
          telemetryData.totalPixels = telemetryData.previewData.totalPixels || telemetryData.totalPixels;
        }
      }
      this.sendToMaster({
        type: "telemetry",
        data: telemetryData
      });
    }
    sendToMaster(message) {
      var _a;
      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        try {
          const { json } = maybeCompressMessage(message);
          this.ws.send(json);
        } catch (e) {
          log(`\u274C Error enviando mensaje: ${e.message}`);
          try {
            this.ws.send(JSON.stringify(message));
          } catch (fallbackError) {
            log(`\u274C Error en fallback: ${fallbackError.message}`);
          }
        }
      } else {
        log(`\u274C WebSocket no disponible para env\xEDo (readyState: ${(_a = this.ws) == null ? void 0 : _a.readyState})`);
      }
    }
    setUI(ui) {
      this.ui = ui;
    }
    updateUI() {
      if (this.ui && this.ui.updateStatus) {
        this.ui.updateStatus({
          connectionStatus: this.connectionStatus,
          slaveId: this.slaveId,
          currentMode: this.currentMode,
          isRunning: this.isRunning,
          telemetryData: this.telemetryData
        });
      }
    }
    disconnect() {
      var _a;
      this.manualDisconnect = true;
      try {
        sessionEnd({
          botVariant: "auto-slave",
          metadata: {
            slaveId: this.slaveId,
            mode: this.currentMode,
            disconnectReason: "manual"
          }
        });
      } catch (error) {
      }
      if (this.ws) {
        this.ws.close();
      }
      if (this.telemetryInterval) {
        clearInterval(this.telemetryInterval);
        this.telemetryInterval = null;
      }
      if ((_a = window.__wplaceMetrics) == null ? void 0 : _a.slavePingInterval) {
        clearInterval(window.__wplaceMetrics.slavePingInterval);
        window.__wplaceMetrics.slavePingInterval = null;
        window.__wplaceMetrics.slaveSessionActive = false;
      }
      this.connectionStatus = "disconnected";
      this.updateUI();
      setTimeout(() => {
        this.manualDisconnect = false;
      }, 500);
    }
  };
  async function runSlave() {
    log("\u{1F680} Iniciando WPlace Slave (versi\xF3n modular)");
    initializeLanguage();
    window.__wplaceBot = { ...window.__wplaceBot, slaveRunning: true };
    try {
      const slave = new WPlaceSlave();
      const ui = createSlaveUI({
        onConnect: async (masterUrl) => {
          await slave.init(masterUrl);
        },
        onDisconnect: () => {
          slave.disconnect();
        },
        onClose: () => {
          log("\u{1F44B} Cerrando slave");
          slave.disconnect();
          window.__wplaceBot.slaveRunning = false;
        }
      });
      slave.setUI(ui);
      window.__wplaceSlave = slave;
      log("\u2705 Slave inicializado correctamente");
      window.addEventListener("beforeunload", () => {
        var _a, _b;
        try {
          slave.disconnect();
        } catch {
        }
        if (window.__wplaceBot) {
          window.__wplaceBot.slaveRunning = false;
        }
        try {
          if ((_a = window.__wplaceMetrics) == null ? void 0 : _a.slavePingInterval) {
            clearInterval(window.__wplaceMetrics.slavePingInterval);
            window.__wplaceMetrics.slavePingInterval = null;
          }
          if ((_b = window.__wplaceMetrics) == null ? void 0 : _b.slaveSessionActive) {
            sessionEnd({ botVariant: "auto-slave" });
            window.__wplaceMetrics.slaveSessionActive = false;
          }
        } catch {
        }
      }, { once: true });
    } catch (error) {
      log("\u274C Error inicializando Slave:", error);
      window.__wplaceBot.slaveRunning = false;
      try {
        trackEvent("error", {
          botVariant: "slave",
          metadata: { message: String((error == null ? void 0 : error.message) || error) }
        });
      } catch {
      }
      throw error;
    }
  }

  // src/entries/slave.js
  runSlave().catch((error) => {
    console.error("[Auto-Slave] Error fatal:", error);
  });
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2NvcmUvbG9nZ2VyLmpzIiwgInNyYy9sb2NhbGVzL2VzLmpzIiwgInNyYy9sb2NhbGVzL2VuLmpzIiwgInNyYy9sb2NhbGVzL2ZyLmpzIiwgInNyYy9sb2NhbGVzL3J1LmpzIiwgInNyYy9sb2NhbGVzL3poLUhhbnMuanMiLCAic3JjL2xvY2FsZXMvemgtSGFudC5qcyIsICJzcmMvbG9jYWxlcy9pbmRleC5qcyIsICJzcmMvY29yZS9odHRwLmpzIiwgInNyYy9jb3JlL21ldHJpY3MvY29uZmlnLmpzIiwgInNyYy9jb3JlL21ldHJpY3MvY2xpZW50LmpzIiwgInNyYy9jb3JlL3R1cm5zdGlsZS5qcyIsICJzcmMvY29yZS9maW5nZXJwcmludC5qcyIsICJzcmMvY29yZS9wYXd0ZWN0LmpzIiwgInNyYy9jb3JlL2pzb24uanMiLCAic3JjL2NvcmUvd3BsYWNlLWFwaS5qcyIsICJzcmMvY29yZS93aW5kb3ctbWFuYWdlci5qcyIsICJzcmMvbG9nX3dpbmRvdy9sb2ctd2luZG93LmpzIiwgInNyYy9sb2dfd2luZG93L2luZGV4LmpzIiwgInNyYy9pbWFnZS9jb25maWcuanMiLCAic3JjL2ltYWdlL3BhdHRlcm5zLmpzIiwgInNyYy9ndWFyZC9jb25maWcuanMiLCAic3JjL3NsYXZlL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9wYWtvL2Rpc3QvcGFrby5lc20ubWpzIiwgInNyYy9jb3JlL2NvbXByZXNzaW9uLmpzIiwgInNyYy9zbGF2ZS91aS5qcyIsICJzcmMvY29yZS91aS11dGlscy5qcyIsICJzcmMvc2xhdmUvY29uZmlnLmpzIiwgInNyYy9mYXJtL2luZGV4LmpzIiwgInNyYy9mYXJtL2NvbmZpZy5qcyIsICJzcmMvZmFybS91aS5qcyIsICJzcmMvZmFybS9wYWxldHRlLmpzIiwgInNyYy9jb3JlL3V0aWxzLmpzIiwgInNyYy9mYXJtL2xvb3AuanMiLCAic3JjL2Zhcm0vY29vcmRzLmpzIiwgInNyYy9jb3JlL3RpbWluZy5qcyIsICJzcmMvY29yZS9zdG9yYWdlLmpzIiwgInNyYy9pbWFnZS9pbmRleC5qcyIsICJzcmMvaW1hZ2UvYmx1ZS1tYXJibGUtcHJvY2Vzc29yLmpzIiwgInNyYy9pbWFnZS9jb2xvci11dGlscy5qcyIsICJzcmMvaW1hZ2UvcHJvY2Vzc29yLmpzIiwgInNyYy9pbWFnZS9wYWludGVyLmpzIiwgInNyYy9pbWFnZS9zYXZlLWxvYWQuanMiLCAic3JjL2ltYWdlL3VpLmpzIiwgInNyYy9pbWFnZS9SZXNpemUtd2luZG93LmpzIiwgInNyYy9pbWFnZS9jb2xvci1wYWxldHRlLXNlbGVjdG9yLmpzIiwgInNyYy9pbWFnZS9wYWxldHRlLmpzIiwgInNyYy9pbWFnZS9zYWZlLWd1YXJkLXdpbmRvdy5qcyIsICJzcmMvY29yZS9kb20uanMiLCAic3JjL2NvcmUvd2FybXVwLmpzIiwgInNyYy9pbWFnZS9wbGFuLW92ZXJsYXktYmx1ZS1tYXJibGUuanMiLCAic3JjL3NsYXZlL0d1YXJkL2d1YXJkLmpzIiwgInNyYy9ndWFyZC9wcm9jZXNzb3IuanMiLCAic3JjL2d1YXJkL3BhdHRlcm5zLmpzIiwgInNyYy9zbGF2ZS9wYWludC5qcyIsICJzcmMvZW50cmllcy9zbGF2ZS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGNvbnN0IGxvZ2dlciA9IHtcbiAgZGVidWdFbmFibGVkOiBmYWxzZSxcbiAgc2V0RGVidWcodikgeyB0aGlzLmRlYnVnRW5hYmxlZCA9ICEhdjsgfSxcbiAgZGVidWcoLi4uYSkgeyBpZiAodGhpcy5kZWJ1Z0VuYWJsZWQpIGNvbnNvbGUuZGVidWcoXCJbQk9UXVwiLCAuLi5hKTsgfSxcbiAgaW5mbyguLi5hKSAgeyBjb25zb2xlLmluZm8oXCJbQk9UXVwiLCAuLi5hKTsgfSxcbiAgd2FybiguLi5hKSAgeyBjb25zb2xlLndhcm4oXCJbQk9UXVwiLCAuLi5hKTsgfSxcbiAgZXJyb3IoLi4uYSkgeyBjb25zb2xlLmVycm9yKFwiW0JPVF1cIiwgLi4uYSk7IH1cbn07XG5cbi8vIEZhcm0tc3BlY2lmaWMgbG9nZ2VyXG5leHBvcnQgY29uc3QgbG9nID0gKC4uLmEpID0+IGNvbnNvbGUubG9nKCdbV1BBLVVJXScsIC4uLmEpO1xuXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xuZXhwb3J0IGNvbnN0IG5vb3AgPSAoKSA9PiB7IC8qIEZ1bmNpXHUwMEYzbiB2YWNcdTAwRURhIGludGVuY2lvbmFsICovIH07XG5leHBvcnQgY29uc3QgY2xhbXAgPSAobiwgYSwgYikgPT4gTWF0aC5tYXgoYSwgTWF0aC5taW4oYiwgbikpO1xuIiwgImV4cG9ydCBjb25zdCBlcyA9IHtcbiAgLy8gTGF1bmNoZXJcbiAgbGF1bmNoZXI6IHtcbiAgICB0aXRsZTogJ1dQbGFjZSBBdXRvQk9UJyxcbiAgICBhdXRvRmFybTogJ1x1RDgzQ1x1REYzRSBBdXRvLUZhcm0nLFxuICAgIGF1dG9JbWFnZTogJ1x1RDgzQ1x1REZBOCBBdXRvLUltYWdlJyxcbiAgICBhdXRvR3VhcmQ6ICdcdUQ4M0RcdURFRTFcdUZFMEYgQXV0by1HdWFyZCcsXG4gICAgc2VsZWN0aW9uOiAnU2VsZWNjaVx1MDBGM24nLFxuICAgIHVzZXI6ICdVc3VhcmlvJyxcbiAgICBjaGFyZ2VzOiAnQ2FyZ2FzJyxcbiAgICBiYWNrZW5kOiAnQmFja2VuZCcsXG4gICAgZGF0YWJhc2U6ICdEYXRhYmFzZScsXG4gICAgdXB0aW1lOiAnVXB0aW1lJyxcbiAgICBjbG9zZTogJ0NlcnJhcicsXG4gICAgbGF1bmNoOiAnTGFuemFyJyxcbiAgICBsb2FkaW5nOiAnQ2FyZ2FuZG9cdTIwMjYnLFxuICAgIGV4ZWN1dGluZzogJ0VqZWN1dGFuZG9cdTIwMjYnLFxuICAgIGRvd25sb2FkaW5nOiAnRGVzY2FyZ2FuZG8gc2NyaXB0XHUyMDI2JyxcbiAgICBjaG9vc2VCb3Q6ICdFbGlnZSB1biBib3QgeSBwcmVzaW9uYSBMYW56YXInLFxuICAgIHJlYWR5VG9MYXVuY2g6ICdMaXN0byBwYXJhIGxhbnphcicsXG4gICAgbG9hZEVycm9yOiAnRXJyb3IgYWwgY2FyZ2FyJyxcbiAgICBsb2FkRXJyb3JNc2c6ICdObyBzZSBwdWRvIGNhcmdhciBlbCBib3Qgc2VsZWNjaW9uYWRvLiBSZXZpc2EgdHUgY29uZXhpXHUwMEYzbiBvIGludFx1MDBFOW50YWxvIGRlIG51ZXZvLicsXG4gICAgY2hlY2tpbmc6ICdcdUQ4M0RcdUREMDQgVmVyaWZpY2FuZG8uLi4nLFxuICAgIG9ubGluZTogJ1x1RDgzRFx1REZFMiBPbmxpbmUnLFxuICAgIG9mZmxpbmU6ICdcdUQ4M0RcdUREMzQgT2ZmbGluZScsXG4gICAgb2s6ICdcdUQ4M0RcdURGRTIgT0snLFxuICAgIGVycm9yOiAnXHVEODNEXHVERDM0IEVycm9yJyxcbiAgICB1bmtub3duOiAnLScsXG4gICAgbG9nV2luZG93OiAnTG9ncycsXG4gICAgbG9nV2luZG93VGl0bGU6ICdMb2dzIC0ge2JvdE5hbWV9JyxcbiAgICBkb3dubG9hZExvZ3M6ICdEZXNjYXJnYXIgTG9ncycsXG4gICAgY2xlYXJMb2dzOiAnTGltcGlhciBMb2dzJyxcbiAgICBjbG9zZUxvZ3M6ICdDZXJyYXInLFxuICAgIGxvY2FsRXhlY3V0aW9uOiAnRWplY3VjaVx1MDBGM24gbG9jYWwgY29uIGFjY2VzbyBjb21wbGV0byBhbCBzaXN0ZW1hIGRlIHRva2VucycsXG4gICAgYm90U3RhcnRpbmc6ICdCb3QgaW5pY2lhbmRvLi4uJ1xuICB9LFxuXG4gIC8vIEltYWdlIE1vZHVsZVxuICBpbWFnZToge1xuICAgIHRpdGxlOiBcIldQbGFjZSBBdXRvLUltYWdlXCIsXG4gICAgaW5pdEJvdDogXCJJbmljaWFyIEF1dG8tQk9UXCIsXG4gICAgdXBsb2FkSW1hZ2U6IFwiU3ViaXIgSW1hZ2VuXCIsXG4gICAgcmVzaXplSW1hZ2U6IFwiUmVkaW1lbnNpb25hciBJbWFnZW5cIixcbiAgICBzZWxlY3RQb3NpdGlvbjogXCJTZWxlY2Npb25hciBQb3NpY2lcdTAwRjNuXCIsXG4gICAgc3RhcnRQYWludGluZzogXCJJbmljaWFyIFBpbnR1cmFcIixcbiAgICBzdG9wUGFpbnRpbmc6IFwiRGV0ZW5lciBQaW50dXJhXCIsXG4gICAgc2F2ZVByb2dyZXNzOiBcIkd1YXJkYXIgUHJvZ3Jlc29cIixcbiAgICBsb2FkUHJvZ3Jlc3M6IFwiQ2FyZ2FyIFByb2dyZXNvXCIsXG5cbiAgICBjaGVja2luZ0NvbG9yczogXCJcdUQ4M0RcdUREMEQgVmVyaWZpY2FuZG8gY29sb3JlcyBkaXNwb25pYmxlcy4uLlwiLFxuICAgIG5vQ29sb3JzRm91bmQ6IFwiXHUyNzRDIFx1MDBBMUFicmUgbGEgcGFsZXRhIGRlIGNvbG9yZXMgZW4gZWwgc2l0aW8gZSBpbnRcdTAwRTludGFsbyBkZSBudWV2byFcIixcbiAgICBjb2xvcnNGb3VuZDogXCJcdTI3MDUge2NvdW50fSBjb2xvcmVzIGRpc3BvbmlibGVzIGVuY29udHJhZG9zXCIsXG4gICAgbG9hZGluZ0ltYWdlOiBcIlx1RDgzRFx1RERCQ1x1RkUwRiBDYXJnYW5kbyBpbWFnZW4uLi5cIixcbiAgICBpbWFnZUxvYWRlZDogXCJcdTI3MDUgSW1hZ2VuIGNhcmdhZGEgY29uIHtjb3VudH0gcFx1MDBFRHhlbGVzIHZcdTAwRTFsaWRvc1wiLFxuICAgIGltYWdlRXJyb3I6IFwiXHUyNzRDIEVycm9yIGFsIGNhcmdhciBsYSBpbWFnZW5cIixcbiAgICBzZWxlY3RQb3NpdGlvbkFsZXJ0OiBcIlx1MDBBMVBpbnRhIGVsIHByaW1lciBwXHUwMEVEeGVsIGVuIGxhIHViaWNhY2lcdTAwRjNuIGRvbmRlIHF1aWVyZXMgcXVlIGNvbWllbmNlIGVsIGFydGUhXCIsXG4gICAgd2FpdGluZ1Bvc2l0aW9uOiBcIlx1RDgzRFx1REM0NiBFc3BlcmFuZG8gcXVlIHBpbnRlcyBlbCBwXHUwMEVEeGVsIGRlIHJlZmVyZW5jaWEuLi5cIixcbiAgICBwb3NpdGlvblNldDogXCJcdTI3MDUgXHUwMEExUG9zaWNpXHUwMEYzbiBlc3RhYmxlY2lkYSBjb24gXHUwMEU5eGl0byFcIixcbiAgICBwb3NpdGlvblRpbWVvdXQ6IFwiXHUyNzRDIFRpZW1wbyBhZ290YWRvIHBhcmEgc2VsZWNjaW9uYXIgcG9zaWNpXHUwMEYzblwiLFxuICAgIHBvc2l0aW9uRGV0ZWN0ZWQ6IFwiXHVEODNDXHVERkFGIFBvc2ljaVx1MDBGM24gZGV0ZWN0YWRhLCBwcm9jZXNhbmRvLi4uXCIsXG4gICAgcG9zaXRpb25FcnJvcjogXCJcdTI3NEMgRXJyb3IgZGV0ZWN0YW5kbyBwb3NpY2lcdTAwRjNuLCBpbnRcdTAwRTludGFsbyBkZSBudWV2b1wiLFxuICAgIHN0YXJ0UGFpbnRpbmdNc2c6IFwiXHVEODNDXHVERkE4IEluaWNpYW5kbyBwaW50dXJhLi4uXCIsXG4gICAgcGFpbnRpbmdQcm9ncmVzczogXCJcdUQ4M0VcdURERjEgUHJvZ3Jlc286IHtwYWludGVkfS97dG90YWx9IHBcdTAwRUR4ZWxlcy4uLlwiLFxuICAgIG5vQ2hhcmdlczogXCJcdTIzMUIgU2luIGNhcmdhcy4gRXNwZXJhbmRvIHt0aW1lfS4uLlwiLFxuICAgIHBhaW50aW5nU3RvcHBlZDogXCJcdTIzRjlcdUZFMEYgUGludHVyYSBkZXRlbmlkYSBwb3IgZWwgdXN1YXJpb1wiLFxuICAgIHBhaW50aW5nQ29tcGxldGU6IFwiXHUyNzA1IFx1MDBBMVBpbnR1cmEgY29tcGxldGFkYSEge2NvdW50fSBwXHUwMEVEeGVsZXMgcGludGFkb3MuXCIsXG4gICAgcGFpbnRpbmdFcnJvcjogXCJcdTI3NEMgRXJyb3IgZHVyYW50ZSBsYSBwaW50dXJhXCIsXG4gICAgbWlzc2luZ1JlcXVpcmVtZW50czogXCJcdTI3NEMgQ2FyZ2EgdW5hIGltYWdlbiB5IHNlbGVjY2lvbmEgdW5hIHBvc2ljaVx1MDBGM24gcHJpbWVyb1wiLFxuICAgIHByb2dyZXNzOiBcIlByb2dyZXNvXCIsXG4gICAgdXNlck5hbWU6IFwiVXN1YXJpb1wiLFxuICAgIHBpeGVsczogXCJQXHUwMEVEeGVsZXNcIixcbiAgICBjaGFyZ2VzOiBcIkNhcmdhc1wiLFxuICAgIGVzdGltYXRlZFRpbWU6IFwiVGllbXBvIGVzdGltYWRvXCIsXG4gICAgaW5pdE1lc3NhZ2U6IFwiSGF6IGNsaWMgZW4gJ0luaWNpYXIgQXV0by1CT1QnIHBhcmEgY29tZW56YXJcIixcbiAgICB3YWl0aW5nSW5pdDogXCJFc3BlcmFuZG8gaW5pY2lhbGl6YWNpXHUwMEYzbi4uLlwiLFxuICAgIHJlc2l6ZVN1Y2Nlc3M6IFwiXHUyNzA1IEltYWdlbiByZWRpbWVuc2lvbmFkYSBhIHt3aWR0aH14e2hlaWdodH1cIixcbiAgICBwYWludGluZ1BhdXNlZDogXCJcdTIzRjhcdUZFMEYgUGludHVyYSBwYXVzYWRhIGVuIGxhIHBvc2ljaVx1MDBGM24gWDoge3h9LCBZOiB7eX1cIixcbiAgICBwaXhlbHNQZXJCYXRjaDogXCJQXHUwMEVEeGVsZXMgcG9yIGxvdGVcIixcbiAgICBiYXRjaFNpemU6IFwiVGFtYVx1MDBGMW8gZGVsIGxvdGVcIixcbiAgICBuZXh0QmF0Y2hUaW1lOiBcIlNpZ3VpZW50ZSBsb3RlIGVuXCIsXG4gICAgdXNlQWxsQ2hhcmdlczogXCJVc2FyIHRvZGFzIGxhcyBjYXJnYXMgZGlzcG9uaWJsZXNcIixcbiAgICBzaG93T3ZlcmxheTogXCJNb3N0cmFyIG92ZXJsYXlcIixcbiAgICBtYXhDaGFyZ2VzOiBcIkNhcmdhcyBtXHUwMEUxeGltYXMgcG9yIGxvdGVcIixcbiAgICB3YWl0aW5nRm9yQ2hhcmdlczogXCJcdTIzRjMgRXNwZXJhbmRvIGNhcmdhczoge2N1cnJlbnR9L3tuZWVkZWR9XCIsXG4gICAgdGltZVJlbWFpbmluZzogXCJUaWVtcG8gcmVzdGFudGVcIixcbiAgICBjb29sZG93bldhaXRpbmc6IFwiXHUyM0YzIEVzcGVyYW5kbyB7dGltZX0gcGFyYSBjb250aW51YXIuLi5cIixcbiAgICBwcm9ncmVzc1NhdmVkOiBcIlx1MjcwNSBQcm9ncmVzbyBndWFyZGFkbyBjb21vIHtmaWxlbmFtZX1cIixcbiAgICBwcm9ncmVzc0xvYWRlZDogXCJcdTI3MDUgUHJvZ3Jlc28gY2FyZ2Fkbzoge3BhaW50ZWR9L3t0b3RhbH0gcFx1MDBFRHhlbGVzIHBpbnRhZG9zXCIsXG4gICAgcHJvZ3Jlc3NMb2FkRXJyb3I6IFwiXHUyNzRDIEVycm9yIGFsIGNhcmdhciBwcm9ncmVzbzoge2Vycm9yfVwiLFxuICAgIHByb2dyZXNzU2F2ZUVycm9yOiBcIlx1Mjc0QyBFcnJvciBhbCBndWFyZGFyIHByb2dyZXNvOiB7ZXJyb3J9XCIsXG5cbiAgICBjb25maXJtU2F2ZVByb2dyZXNzOiBcIlx1MDBCRkRlc2VhcyBndWFyZGFyIGVsIHByb2dyZXNvIGFjdHVhbCBhbnRlcyBkZSBkZXRlbmVyP1wiLFxuICAgIHNhdmVQcm9ncmVzc1RpdGxlOiBcIkd1YXJkYXIgUHJvZ3Jlc29cIixcbiAgICBkaXNjYXJkUHJvZ3Jlc3M6IFwiRGVzY2FydGFyXCIsXG4gICAgY2FuY2VsOiBcIkNhbmNlbGFyXCIsXG4gICAgbWluaW1pemU6IFwiTWluaW1pemFyXCIsXG4gICAgd2lkdGg6IFwiQW5jaG9cIixcbiAgICBoZWlnaHQ6IFwiQWx0b1wiLCBcbiAgICBrZWVwQXNwZWN0OiBcIk1hbnRlbmVyIHByb3BvcmNpXHUwMEYzblwiLFxuICAgIGFwcGx5OiBcIkFwbGljYXJcIixcbiAgb3ZlcmxheU9uOiBcIk92ZXJsYXk6IE9OXCIsXG4gIG92ZXJsYXlPZmY6IFwiT3ZlcmxheTogT0ZGXCIsXG4gICAgcGFzc0NvbXBsZXRlZDogXCJcdTI3MDUgUGFzYWRhIGNvbXBsZXRhZGE6IHtwYWludGVkfSBwXHUwMEVEeGVsZXMgcGludGFkb3MgfCBQcm9ncmVzbzoge3BlcmNlbnR9JSAoe2N1cnJlbnR9L3t0b3RhbH0pXCIsXG4gICAgd2FpdGluZ0NoYXJnZXNSZWdlbjogXCJcdTIzRjMgRXNwZXJhbmRvIHJlZ2VuZXJhY2lcdTAwRjNuIGRlIGNhcmdhczoge2N1cnJlbnR9L3tuZWVkZWR9IC0gVGllbXBvOiB7dGltZX1cIixcbiAgICB3YWl0aW5nQ2hhcmdlc0NvdW50ZG93bjogXCJcdTIzRjMgRXNwZXJhbmRvIGNhcmdhczoge2N1cnJlbnR9L3tuZWVkZWR9IC0gUXVlZGFuOiB7dGltZX1cIixcbiAgICBhdXRvSW5pdGlhbGl6aW5nOiBcIlx1RDgzRVx1REQxNiBJbmljaWFsaXphbmRvIGF1dG9tXHUwMEUxdGljYW1lbnRlLi4uXCIsXG4gICAgYXV0b0luaXRTdWNjZXNzOiBcIlx1MjcwNSBCb3QgaW5pY2lhZG8gYXV0b21cdTAwRTF0aWNhbWVudGVcIixcbiAgICBhdXRvSW5pdEZhaWxlZDogXCJcdTI2QTBcdUZFMEYgTm8gc2UgcHVkbyBpbmljaWFyIGF1dG9tXHUwMEUxdGljYW1lbnRlLiBVc2EgZWwgYm90XHUwMEYzbiBtYW51YWwuXCIsXG4gICAgcGFsZXR0ZURldGVjdGVkOiBcIlx1RDgzQ1x1REZBOCBQYWxldGEgZGUgY29sb3JlcyBkZXRlY3RhZGFcIixcbiAgICBwYWxldHRlTm90Rm91bmQ6IFwiXHVEODNEXHVERDBEIEJ1c2NhbmRvIHBhbGV0YSBkZSBjb2xvcmVzLi4uXCIsXG4gICAgY2xpY2tpbmdQYWludEJ1dHRvbjogXCJcdUQ4M0RcdURDNDYgSGFjaWVuZG8gY2xpYyBlbiBlbCBib3RcdTAwRjNuIFBhaW50Li4uXCIsXG4gICAgcGFpbnRCdXR0b25Ob3RGb3VuZDogXCJcdTI3NEMgQm90XHUwMEYzbiBQYWludCBubyBlbmNvbnRyYWRvXCIsXG4gICAgbWFudWFsSW5pdFJlcXVpcmVkOiBcIlx1RDgzRFx1REQyNyBJbmljaW8gbWFudWFsIHJlcXVlcmlkb1wiLFxuICAgIHJldHJ5QXR0ZW1wdDogXCJcdUQ4M0RcdUREMDQgUmVpbnRlbnRvIHthdHRlbXB0fS97bWF4QXR0ZW1wdHN9IGVuIHtkZWxheX1zLi4uXCIsXG4gICAgcmV0cnlFcnJvcjogXCJcdUQ4M0RcdURDQTUgRXJyb3IgZW4gaW50ZW50byB7YXR0ZW1wdH0ve21heEF0dGVtcHRzfSwgcmVpbnRlbnRhbmRvIGVuIHtkZWxheX1zLi4uXCIsXG4gICAgcmV0cnlGYWlsZWQ6IFwiXHUyNzRDIEZhbGxcdTAwRjMgZGVzcHVcdTAwRTlzIGRlIHttYXhBdHRlbXB0c30gaW50ZW50b3MuIENvbnRpbnVhbmRvIGNvbiBzaWd1aWVudGUgbG90ZS4uLlwiLFxuICAgIG5ldHdvcmtFcnJvcjogXCJcdUQ4M0NcdURGMTAgRXJyb3IgZGUgcmVkLiBSZWludGVudGFuZG8uLi5cIixcbiAgICBzZXJ2ZXJFcnJvcjogXCJcdUQ4M0RcdUREMjUgRXJyb3IgZGVsIHNlcnZpZG9yLiBSZWludGVudGFuZG8uLi5cIixcbiAgICB0aW1lb3V0RXJyb3I6IFwiXHUyM0YwIFRpbWVvdXQgZGVsIHNlcnZpZG9yLiBSZWludGVudGFuZG8uLi5cIixcbiAgICAvLyBOdWV2b3MgdGV4dG9zIHYyLjAgXG4gICAgcGFpbnRQYXR0ZXJuOiBcIlx1RDgzRFx1RENEMCBQYXRyXHUwMEYzbiBkZSBwaW50YWRvXCIsXG4gICAgcGF0dGVybkxpbmVhclN0YXJ0OiBcIkxpbmVhbCAoSW5pY2lvKVwiLFxuICAgIHBhdHRlcm5MaW5lYXJFbmQ6IFwiTGluZWFsIChGaW5hbClcIixcbiAgICBwYXR0ZXJuUmFuZG9tOiBcIkFsZWF0b3Jpb1wiLFxuICAgIHBhdHRlcm5DZW50ZXJPdXQ6IFwiQ2VudHJvIGhhY2lhIGFmdWVyYVwiLFxuICAgIHBhdHRlcm5Db3JuZXJzRmlyc3Q6IFwiRXNxdWluYXMgcHJpbWVyb1wiLFxuICAgIHBhdHRlcm5TcGlyYWw6IFwiRXNwaXJhbFwiLFxuXG4gICAgbG9nV2luZG93OiBcIkxvZ3NcIixcbiAgICBsb2dXaW5kb3dUaXRsZTogXCJMb2dzIC0ge2JvdE5hbWV9XCIsXG4gICAgZG93bmxvYWRMb2dzOiBcIkRlc2NhcmdhciBMb2dzXCIsXG4gICAgY2xlYXJMb2dzOiBcIkxpbXBpYXIgTG9nc1wiLFxuICAgIGNsb3NlTG9nczogXCJDZXJyYXJcIixcbiAgICAvLyBOdWV2YXMgZnVuY2lvbmFsaWRhZGVzXG4gICAgdXNlckluZm86IFwiSW5mb3JtYWNpXHUwMEYzbiBkZWwgVXN1YXJpb1wiLFxuICAgIGltYWdlUHJvZ3Jlc3M6IFwiUHJvZ3Jlc28gZGUgbGEgSW1hZ2VuXCIsXG4gICAgYXZhaWxhYmxlQ29sb3JzOiBcIkNvbG9yZXMgRGlzcG9uaWJsZXNcIixcbiAgICBub0ltYWdlTG9hZGVkOiBcIk5vIGhheSBpbWFnZW4gY2FyZ2FkYVwiLFxuICAgIGNvb2xkb3duOiBcIlRpZW1wbyBkZSBlc3BlcmFcIixcbiAgICB0b3RhbENvbG9yczogXCJUb3RhbCBkZSBDb2xvcmVzXCIsXG4gICAgY29sb3JQYWxldHRlOiBcIlBhbGV0YSBkZSBDb2xvcmVzXCIsXG4gICAgc2hvd0FsbENvbG9yczogXCJNb3N0cmFyIFRvZG9zIGxvcyBDb2xvcmVzIChpbmNsdXllbmRvIG5vIGRpc3BvbmlibGVzKVwiLFxuICAgIHNlbGVjdEFsbENvbG9yczogXCJTZWxlY2Npb25hciBUb2Rvc1wiLFxuICAgIHVuc2VsZWN0QWxsQ29sb3JzOiBcIkRlc2VsZWNjaW9uYXIgVG9kb3NcIixcbiAgICBub0F2YWlsYWJsZTogXCJObyBkaXNwb25pYmxlXCIsXG4gICAgY29sb3JTZWxlY3RlZDogXCJDb2xvciBzZWxlY2Npb25hZG9cIixcbiAgICBzdGF0c1VwZGF0ZWQ6IFwiXHUyNzA1IEVzdGFkXHUwMEVEc3RpY2FzIGFjdHVhbGl6YWRhczoge2NvdW50fSBjb2xvcmVzIGRpc3BvbmlibGVzXCJcbiAgfSxcblxuICAvLyBGYXJtIE1vZHVsZSAocG9yIGltcGxlbWVudGFyKVxuICBmYXJtOiB7XG4gICAgdGl0bGU6IFwiV1BsYWNlIEZhcm0gQm90XCIsXG4gICAgc3RhcnQ6IFwiSW5pY2lhclwiLFxuICAgIHN0b3A6IFwiRGV0ZW5lclwiLCBcbiAgICBzdG9wcGVkOiBcIkJvdCBkZXRlbmlkb1wiLFxuICAgIGNhbGlicmF0ZTogXCJDYWxpYnJhclwiLFxuICAgIHBhaW50T25jZTogXCJVbmEgdmV6XCIsXG4gICAgY2hlY2tpbmdTdGF0dXM6IFwiVmVyaWZpY2FuZG8gZXN0YWRvLi4uXCIsXG4gICAgY29uZmlndXJhdGlvbjogXCJDb25maWd1cmFjaVx1MDBGM25cIixcbiAgICBkZWxheTogXCJEZWxheSAobXMpXCIsXG4gICAgcGl4ZWxzUGVyQmF0Y2g6IFwiUFx1MDBFRHhlbGVzL2xvdGVcIixcbiAgICBtaW5DaGFyZ2VzOiBcIkNhcmdhcyBtXHUwMEVEblwiLFxuICAgIGNvbG9yTW9kZTogXCJNb2RvIGNvbG9yXCIsXG4gICAgcmFuZG9tOiBcIkFsZWF0b3Jpb1wiLFxuICAgIGZpeGVkOiBcIkZpam9cIixcbiAgICByYW5nZTogXCJSYW5nb1wiLFxuICAgIGZpeGVkQ29sb3I6IFwiQ29sb3IgZmlqb1wiLFxuICAgIGFkdmFuY2VkOiBcIkF2YW56YWRvXCIsXG4gICAgdGlsZVg6IFwiVGlsZSBYXCIsXG4gICAgdGlsZVk6IFwiVGlsZSBZXCIsXG4gICAgY3VzdG9tUGFsZXR0ZTogXCJQYWxldGEgcGVyc29uYWxpemFkYVwiLFxuICAgIHBhbGV0dGVFeGFtcGxlOiBcImVqOiAjRkYwMDAwLCMwMEZGMDAsIzAwMDBGRlwiLFxuICBjYXB0dXJlOiBcIkNhcHR1cmFyXCIsXG4gICAgcGFpbnRlZDogXCJQaW50YWRvc1wiLFxuICAgIGNoYXJnZXM6IFwiQ2FyZ2FzXCIsXG4gIHJldHJpZXM6IFwiRmFsbG9zXCIsXG4gIHBvc2l0aW9uOiBcIlBvc2ljaVx1MDBGM25cIixcbiAgICB0aWxlOiBcIlRpbGVcIixcbiAgICBjb25maWdTYXZlZDogXCJDb25maWd1cmFjaVx1MDBGM24gZ3VhcmRhZGFcIixcbiAgICBjb25maWdMb2FkZWQ6IFwiQ29uZmlndXJhY2lcdTAwRjNuIGNhcmdhZGFcIixcbiAgICBjb25maWdSZXNldDogXCJDb25maWd1cmFjaVx1MDBGM24gcmVpbmljaWFkYVwiLFxuICAgIGNhcHR1cmVJbnN0cnVjdGlvbnM6IFwiUGludGEgdW4gcFx1MDBFRHhlbCBtYW51YWxtZW50ZSBwYXJhIGNhcHR1cmFyIGNvb3JkZW5hZGFzLi4uXCIsXG4gICAgYmFja2VuZE9ubGluZTogXCJCYWNrZW5kIE9ubGluZVwiLFxuICAgIGJhY2tlbmRPZmZsaW5lOiBcIkJhY2tlbmQgT2ZmbGluZVwiLFxuICAgIHN0YXJ0aW5nQm90OiBcIkluaWNpYW5kbyBib3QuLi5cIixcbiAgICBzdG9wcGluZ0JvdDogXCJEZXRlbmllbmRvIGJvdC4uLlwiLFxuICAgIGNhbGlicmF0aW5nOiBcIkNhbGlicmFuZG8uLi5cIixcbiAgICBhbHJlYWR5UnVubmluZzogXCJBdXRvLUZhcm0geWEgZXN0XHUwMEUxIGNvcnJpZW5kby5cIixcbiAgICBpbWFnZVJ1bm5pbmdXYXJuaW5nOiBcIkF1dG8tSW1hZ2UgZXN0XHUwMEUxIGVqZWN1dFx1MDBFMW5kb3NlLiBDaVx1MDBFOXJyYWxvIGFudGVzIGRlIGluaWNpYXIgQXV0by1GYXJtLlwiLFxuICAgIHNlbGVjdFBvc2l0aW9uOiBcIlNlbGVjY2lvbmFyIFpvbmFcIixcbiAgICBzZWxlY3RQb3NpdGlvbkFsZXJ0OiBcIlx1RDgzQ1x1REZBRiBQaW50YSB1biBwXHUwMEVEeGVsIGVuIHVuYSB6b25hIERFU1BPQkxBREEgZGVsIG1hcGEgcGFyYSBlc3RhYmxlY2VyIGVsIFx1MDBFMXJlYSBkZSBmYXJtaW5nXCIsXG4gICAgd2FpdGluZ1Bvc2l0aW9uOiBcIlx1RDgzRFx1REM0NiBFc3BlcmFuZG8gcXVlIHBpbnRlcyBlbCBwXHUwMEVEeGVsIGRlIHJlZmVyZW5jaWEuLi5cIixcbiAgcG9zaXRpb25TZXQ6IFwiXHUyNzA1IFx1MDBBMVpvbmEgZXN0YWJsZWNpZGEhXCIsXG4gICAgcG9zaXRpb25UaW1lb3V0OiBcIlx1Mjc0QyBUaWVtcG8gYWdvdGFkbyBwYXJhIHNlbGVjY2lvbmFyIHpvbmFcIixcbiAgICBtaXNzaW5nUG9zaXRpb246IFwiXHUyNzRDIFNlbGVjY2lvbmEgdW5hIHpvbmEgcHJpbWVybyB1c2FuZG8gJ1NlbGVjY2lvbmFyIFpvbmEnXCIsXG4gICAgZmFybVJhZGl1czogXCJSYWRpbyBmYXJtXCIsXG4gICAgcG9zaXRpb25JbmZvOiBcIlpvbmEgYWN0dWFsXCIsXG4gICAgZmFybWluZ0luUmFkaXVzOiBcIlx1RDgzQ1x1REYzRSBGYXJtaW5nIGVuIHJhZGlvIHtyYWRpdXN9cHggZGVzZGUgKHt4fSx7eX0pXCIsXG4gICAgc2VsZWN0RW1wdHlBcmVhOiBcIlx1MjZBMFx1RkUwRiBJTVBPUlRBTlRFOiBTZWxlY2Npb25hIHVuYSB6b25hIERFU1BPQkxBREEgcGFyYSBldml0YXIgY29uZmxpY3Rvc1wiLFxuICAgIG5vUG9zaXRpb246IFwiU2luIHpvbmFcIixcbiAgICBjdXJyZW50Wm9uZTogXCJab25hOiAoe3h9LHt5fSlcIixcbiAgICBhdXRvU2VsZWN0UG9zaXRpb246IFwiXHVEODNDXHVERkFGIFNlbGVjY2lvbmEgdW5hIHpvbmEgcHJpbWVyby4gUGludGEgdW4gcFx1MDBFRHhlbCBlbiBlbCBtYXBhIHBhcmEgZXN0YWJsZWNlciBsYSB6b25hIGRlIGZhcm1pbmdcIixcbiAgICBsb2dXaW5kb3c6IFwiTG9nc1wiLFxuICAgIGxvZ1dpbmRvd1RpdGxlOiBcIkxvZ3MgLSB7Ym90TmFtZX1cIixcbiAgICBkb3dubG9hZExvZ3M6IFwiRGVzY2FyZ2FyIExvZ3NcIixcbiAgICBjbGVhckxvZ3M6IFwiTGltcGlhciBMb2dzXCIsXG4gICAgY2xvc2VMb2dzOiBcIkNlcnJhclwiLFxuXG4gICAgLy8gQ2xhdmVzIGFkaWNpb25hbGVzIHVzYWRhcyBlbiBzcmMvZmFybS91aS5qc1xuICAgIHJlYWR5OiBcIkxpc3RvXCIsXG4gICAgb25jZTogXCJVbmEgdmV6XCIsXG4gICAgcmVjYXB0dXJlOiBcIlJlLWNhcHR1cmFyXCIsXG5cbiAgICAvLyBTZWNjaW9uZXMgYW5pZGFkYXMgcGFyYSBlc3RhZFx1MDBFRHN0aWNhcyB5IGNvbmZpZ3VyYWNpXHUwMEYzblxuICAgIHN0YXRzOiB7XG4gICAgICBwYWludGVkOiBcIlBpbnRhZG9zXCIsXG4gICAgICBjaGFyZ2VzOiBcIkNhcmdhc1wiLFxuICAgICAgZHJvcGxldHM6IFwiR290YXNcIixcbiAgICAgIHVzZXI6IFwiVXN1YXJpb1wiLFxuICAgICAgcmV0cmllczogXCJSZWludGVudG9zXCJcbiAgICB9LFxuICAgIGNvbmZpZzoge1xuICAgICAgbWluQ2hhcmdlczogXCJDYXJnYXMgbVx1MDBFRG5pbWFzXCIsXG4gICAgICBkZWxheTogXCJFc3BlcmEgKHNlZylcIixcbiAgICAgIHBpeGVsc1BlckJhdGNoOiBcIlBcdTAwRUR4ZWxlcyBwb3IgbG90ZVwiXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgZml4ZWQ6IFwiRmlqb1wiLFxuICAgICAgcmFuZ2U6IFwiUmFuZ29cIixcbiAgICAgIHJhbmRvbTogXCJBbGVhdG9yaW9cIixcbiAgICAgIHNlbGVjdGVkOiBcIkNvbG9yIHNlbGVjY2lvbmFkb1wiLFxuICAgICAgbWluOiBcIk1cdTAwRURuXCIsXG4gICAgICBtYXg6IFwiTVx1MDBFMXhcIlxuICAgIH0sXG5cbiAgICAvLyBBdXRvLWNvbXByYSB5IGNvbXByYXMgbWFudWFsZXNcbiAgICBhdXRvYnV5OiB7XG4gICAgICB0aXRsZTogXCJBdXRvLWNvbXByYSAoKzUgY2FyZ2FzKVwiLFxuICAgICAgaGludDogXCJTZSBhY3RpdmFyXHUwMEUxIGF1dG9tXHUwMEUxdGljYW1lbnRlIGN1YW5kbyB0ZW5nYXMgXHUyMjY1IDUwMCBnb3Rhc1wiXG4gICAgfSxcbiAgICBidXlDaGFyZ2VzOiBcIkNvbXByYXIgKzUgY2FyZ2FzXCIsXG4gICAgYnV5aW5nOiBcIkNvbXByYW5kby4uLlwiLFxuICAgIGJ1eU9rOiBcIkNvbXByYSByZWFsaXphZGEuIEFjdHVhbGl6YSBzZXNpXHUwMEYzbi5cIixcbiAgICBidXlGYWlsOiBcIk5vIHNlIHB1ZG8gY29tcHJhclwiXG4gIH0sXG5cbiAgLy8gQ29tbW9uL1NoYXJlZFxuICBjb21tb246IHtcbiAgICB5ZXM6IFwiU1x1MDBFRFwiLFxuICAgIG5vOiBcIk5vXCIsXG4gICAgb2s6IFwiQWNlcHRhclwiLFxuICAgIGNhbmNlbDogXCJDYW5jZWxhclwiLFxuICAgIGNsb3NlOiBcIkNlcnJhclwiLFxuICAgIHNhdmU6IFwiR3VhcmRhclwiLFxuICAgIGxvYWQ6IFwiQ2FyZ2FyXCIsXG4gICAgZGVsZXRlOiBcIkVsaW1pbmFyXCIsXG4gICAgZWRpdDogXCJFZGl0YXJcIixcbiAgICBzdGFydDogXCJJbmljaWFyXCIsXG4gICAgc3RvcDogXCJEZXRlbmVyXCIsXG4gICAgcGF1c2U6IFwiUGF1c2FyXCIsXG4gICAgcmVzdW1lOiBcIlJlYW51ZGFyXCIsXG4gICAgcmVzZXQ6IFwiUmVpbmljaWFyXCIsXG4gICAgc2V0dGluZ3M6IFwiQ29uZmlndXJhY2lcdTAwRjNuXCIsXG4gICAgaGVscDogXCJBeXVkYVwiLFxuICAgIGFib3V0OiBcIkFjZXJjYSBkZVwiLFxuICAgIGxhbmd1YWdlOiBcIklkaW9tYVwiLFxuICAgIGxvYWRpbmc6IFwiQ2FyZ2FuZG8uLi5cIixcbiAgICBlcnJvcjogXCJFcnJvclwiLFxuICAgIHN1Y2Nlc3M6IFwiXHUwMEM5eGl0b1wiLFxuICAgIHdhcm5pbmc6IFwiQWR2ZXJ0ZW5jaWFcIixcbiAgICBpbmZvOiBcIkluZm9ybWFjaVx1MDBGM25cIixcbiAgICBsYW5ndWFnZUNoYW5nZWQ6IFwiSWRpb21hIGNhbWJpYWRvIGEge2xhbmd1YWdlfVwiXG4gIH0sXG5cbiAgLy8gR3VhcmQgTW9kdWxlXG4gIGd1YXJkOiB7XG4gICAgdGl0bGU6IFwiV1BsYWNlIEF1dG8tR3VhcmRcIixcbiAgICBpbml0Qm90OiBcIkluaWNpYWxpemFyIEd1YXJkLUJPVFwiLFxuICAgIHNlbGVjdEFyZWE6IFwiU2VsZWNjaW9uYXIgXHUwMEMxcmVhXCIsXG4gIHNhdmU6IFwiR3VhcmRhclwiLFxuICAgIGNhcHR1cmVBcmVhOiBcIkNhcHR1cmFyIFx1MDBDMXJlYVwiLFxuICAgIHN0YXJ0UHJvdGVjdGlvbjogXCJJbmljaWFyXCIsXG4gICAgc3RvcFByb3RlY3Rpb246IFwiRGV0ZW5lclwiLFxuICAgIHByb3RlY3RlZFBpeGVsczogXCJQXHUwMEVEeGVsZXMgUHJvdGVnaWRvc1wiLFxuICAgIHVwcGVyTGVmdDogXCJFc3F1aW5hIFN1cGVyaW9yIEl6cXVpZXJkYVwiLFxuICAgIGxvd2VyUmlnaHQ6IFwiRXNxdWluYSBJbmZlcmlvciBEZXJlY2hhXCIsXG4gICAgZGV0ZWN0ZWRDaGFuZ2VzOiBcIkNhbWJpb3MgRGV0ZWN0YWRvc1wiLFxuICAgIHJlcGFpcmVkUGl4ZWxzOiBcIlBcdTAwRUR4ZWxlcyBSZXBhcmFkb3NcIixcbiAgICBjaGFyZ2VzOiBcIkNhcmdhc1wiLFxuICAgIHdhaXRpbmdJbml0OiBcIkVzcGVyYW5kbyBpbmljaWFsaXphY2lcdTAwRjNuLi4uXCIsXG4gICAgY2hlY2tpbmdDb2xvcnM6IFwiXHVEODNDXHVERkE4IFZlcmlmaWNhbmRvIGNvbG9yZXMgZGlzcG9uaWJsZXMuLi5cIixcbiAgICBub0NvbG9yc0ZvdW5kOiBcIlx1Mjc0QyBObyBzZSBlbmNvbnRyYXJvbiBjb2xvcmVzLiBBYnJlIGxhIHBhbGV0YSBkZSBjb2xvcmVzIGVuIGVsIHNpdGlvLlwiLFxuICAgIGNvbG9yc0ZvdW5kOiBcIlx1MjcwNSB7Y291bnR9IGNvbG9yZXMgZGlzcG9uaWJsZXMgZW5jb250cmFkb3NcIixcbiAgICBpbml0U3VjY2VzczogXCJcdTI3MDUgR3VhcmQtQk9UIGluaWNpYWxpemFkbyBjb3JyZWN0YW1lbnRlXCIsXG4gICAgaW5pdEVycm9yOiBcIlx1Mjc0QyBFcnJvciBpbmljaWFsaXphbmRvIEd1YXJkLUJPVFwiLFxuICAgIGludmFsaWRDb29yZHM6IFwiXHUyNzRDIENvb3JkZW5hZGFzIGludlx1MDBFMWxpZGFzXCIsXG4gICAgaW52YWxpZEFyZWE6IFwiXHUyNzRDIEVsIFx1MDBFMXJlYSBkZWJlIHRlbmVyIGVzcXVpbmEgc3VwZXJpb3IgaXpxdWllcmRhIG1lbm9yIHF1ZSBpbmZlcmlvciBkZXJlY2hhXCIsXG4gICAgYXJlYVRvb0xhcmdlOiBcIlx1Mjc0QyBcdTAwQzFyZWEgZGVtYXNpYWRvIGdyYW5kZToge3NpemV9IHBcdTAwRUR4ZWxlcyAobVx1MDBFMXhpbW86IHttYXh9KVwiLFxuICAgIGNhcHR1cmluZ0FyZWE6IFwiXHVEODNEXHVEQ0Y4IENhcHR1cmFuZG8gXHUwMEUxcmVhLi4uXCIsXG4gICAgYXJlYUNhcHR1cmVkOiBcIlx1MjcwNSBcdTAwQzFyZWEgY2FwdHVyYWRhOiB7Y291bnR9IHBcdTAwRUR4ZWxlc1wiLFxuICAgIGNhcHR1cmVFcnJvcjogXCJcdTI3NEMgRXJyb3IgY2FwdHVyYW5kbyBcdTAwRTFyZWE6IHtlcnJvcn1cIixcbiAgICBjYXB0dXJlRmlyc3Q6IFwiXHUyNzRDIFByaW1lcm8gY2FwdHVyYSB1biBcdTAwRTFyZWFcIixcbiAgICBub0NoYW5nZXM6IFwiXHUyNzA1IFx1MDBDMXJlYSAtIHNpbiBjYW1iaW9zIGRldGVjdGFkb3NcIixcbiAgICBjaGFuZ2VzRGV0ZWN0ZWQ6IFwiXHVEODNEXHVERUE4IHtjb3VudH0gY2FtYmlvcyBkZXRlY3RhZG9zIGVuIGVsIFx1MDBFMXJlYVwiLFxuICAgIHJlcGFpcmluZzogXCJcdUQ4M0RcdURFRTBcdUZFMEYgUmVwYXJhbmRvIHtjb3VudH0gcFx1MDBFRHhlbGVzIGFsdGVyYWRvcy4uLlwiLFxuICAgIHJlcGFpcmVkU3VjY2VzczogXCJcdTI3MDUgUmVwYXJhZG9zIHtjb3VudH0gcFx1MDBFRHhlbGVzIGNvcnJlY3RhbWVudGVcIixcbiAgICByZXBhaXJFcnJvcjogXCJcdTI3NEMgRXJyb3IgcmVwYXJhbmRvIHBcdTAwRUR4ZWxlczoge2Vycm9yfVwiLFxuICAgIG5vQ2hhcmdlczogXCJcdTI2QTBcdUZFMEYgU2luIGNhcmdhcyBzdWZpY2llbnRlcyBwYXJhIHJlcGFyYXIgY2FtYmlvc1wiLFxuICAgIGNoZWNraW5nQ2hhbmdlczogXCJcdUQ4M0RcdUREMEQgVmVyaWZpY2FuZG8gY2FtYmlvcyBlbiBcdTAwRTFyZWEuLi5cIixcbiAgICBlcnJvckNoZWNraW5nOiBcIlx1Mjc0QyBFcnJvciB2ZXJpZmljYW5kbyBjYW1iaW9zOiB7ZXJyb3J9XCIsXG4gICAgZ3VhcmRBY3RpdmU6IFwiXHVEODNEXHVERUUxXHVGRTBGIEd1YXJkaVx1MDBFMW4gYWN0aXZvIC0gXHUwMEUxcmVhIG1vbml0b3JlYWRhXCIsXG4gICAgbGFzdENoZWNrOiBcIlx1MDBEQWx0aW1hIHZlcmlmaWNhY2lcdTAwRjNuOiB7dGltZX1cIixcbiAgICBuZXh0Q2hlY2s6IFwiUHJcdTAwRjN4aW1hIHZlcmlmaWNhY2lcdTAwRjNuIGVuOiB7dGltZX1zXCIsXG4gICAgYXV0b0luaXRpYWxpemluZzogXCJcdUQ4M0VcdUREMTYgSW5pY2lhbGl6YW5kbyBhdXRvbVx1MDBFMXRpY2FtZW50ZS4uLlwiLFxuICAgIGF1dG9Jbml0U3VjY2VzczogXCJcdTI3MDUgR3VhcmQtQk9UIGluaWNpYWRvIGF1dG9tXHUwMEUxdGljYW1lbnRlXCIsXG4gICAgYXV0b0luaXRGYWlsZWQ6IFwiXHUyNkEwXHVGRTBGIE5vIHNlIHB1ZG8gaW5pY2lhciBhdXRvbVx1MDBFMXRpY2FtZW50ZS4gVXNhIGVsIGJvdFx1MDBGM24gbWFudWFsLlwiLFxuICAgIG1hbnVhbEluaXRSZXF1aXJlZDogXCJcdUQ4M0RcdUREMjcgSW5pY2lvIG1hbnVhbCByZXF1ZXJpZG9cIixcbiAgICBwYWxldHRlRGV0ZWN0ZWQ6IFwiXHVEODNDXHVERkE4IFBhbGV0YSBkZSBjb2xvcmVzIGRldGVjdGFkYVwiLFxuICAgIHBhbGV0dGVOb3RGb3VuZDogXCJcdUQ4M0RcdUREMEQgQnVzY2FuZG8gcGFsZXRhIGRlIGNvbG9yZXMuLi5cIixcbiAgICBjbGlja2luZ1BhaW50QnV0dG9uOiBcIlx1RDgzRFx1REM0NiBIYWNpZW5kbyBjbGljIGVuIGVsIGJvdFx1MDBGM24gUGFpbnQuLi5cIixcbiAgICBwYWludEJ1dHRvbk5vdEZvdW5kOiBcIlx1Mjc0QyBCb3RcdTAwRjNuIFBhaW50IG5vIGVuY29udHJhZG9cIixcbiAgICBwcm90ZWN0aW9uU3RvcHBlZDogXCJcdTIzRjlcdUZFMEYgUHJvdGVjY2lcdTAwRjNuIGRldGVuaWRhXCIsXG4gICAgc2VsZWN0VXBwZXJMZWZ0OiBcIlx1RDgzQ1x1REZBRiBQaW50YSB1biBwXHUwMEVEeGVsIGVuIGxhIGVzcXVpbmEgU1VQRVJJT1IgSVpRVUlFUkRBIGRlbCBcdTAwRTFyZWEgYSBtb25pdG9yZWFyXCIsXG4gICAgc2VsZWN0TG93ZXJSaWdodDogXCJcdUQ4M0NcdURGQUYgQWhvcmEgcGludGEgdW4gcFx1MDBFRHhlbCBlbiBsYSBlc3F1aW5hIElORkVSSU9SIERFUkVDSEEgZGVsIFx1MDBFMXJlYVwiLFxuICAgIHdhaXRpbmdVcHBlckxlZnQ6IFwiXHVEODNEXHVEQzQ2IEVzcGVyYW5kbyBzZWxlY2NpXHUwMEYzbiBkZSBlc3F1aW5hIHN1cGVyaW9yIGl6cXVpZXJkYS4uLlwiLFxuICAgIHdhaXRpbmdMb3dlclJpZ2h0OiBcIlx1RDgzRFx1REM0NiBFc3BlcmFuZG8gc2VsZWNjaVx1MDBGM24gZGUgZXNxdWluYSBpbmZlcmlvciBkZXJlY2hhLi4uXCIsXG4gICAgdXBwZXJMZWZ0Q2FwdHVyZWQ6IFwiXHUyNzA1IEVzcXVpbmEgc3VwZXJpb3IgaXpxdWllcmRhIGNhcHR1cmFkYTogKHt4fSwge3l9KVwiLFxuICAgIGxvd2VyUmlnaHRDYXB0dXJlZDogXCJcdTI3MDUgRXNxdWluYSBpbmZlcmlvciBkZXJlY2hhIGNhcHR1cmFkYTogKHt4fSwge3l9KVwiLFxuICAgIHNlbGVjdGlvblRpbWVvdXQ6IFwiXHUyNzRDIFRpZW1wbyBhZ290YWRvIHBhcmEgc2VsZWNjaVx1MDBGM25cIixcbiAgICBzZWxlY3Rpb25FcnJvcjogXCJcdTI3NEMgRXJyb3IgZW4gc2VsZWNjaVx1MDBGM24sIGludFx1MDBFOW50YWxvIGRlIG51ZXZvXCIsXG4gICAgbG9nV2luZG93OiBcIkxvZ3NcIixcbiAgICBsb2dXaW5kb3dUaXRsZTogXCJMb2dzIC0ge2JvdE5hbWV9XCIsXG4gICAgZG93bmxvYWRMb2dzOiBcIkRlc2NhcmdhciBMb2dzXCIsXG4gICAgY2xlYXJMb2dzOiBcIkxpbXBpYXIgTG9nc1wiLFxuICAgIGNsb3NlTG9nczogXCJDZXJyYXJcIixcbiAgICAvLyBBbmFseXNpcyBXaW5kb3dcbiAgICBhbmFseXNpc1RpdGxlOiBcIkFuXHUwMEUxbGlzaXMgZGUgRGlmZXJlbmNpYXMgLSBKU09OIHZzIENhbnZhcyBBY3R1YWxcIixcbiAgICBjb3JyZWN0UGl4ZWxzOiBcIlBcdTAwRUR4ZWxlcyBDb3JyZWN0b3NcIixcbiAgICBpbmNvcnJlY3RQaXhlbHM6IFwiUFx1MDBFRHhlbGVzIEluY29ycmVjdG9zXCIsXG4gICAgbWlzc2luZ1BpeGVsczogXCJQXHUwMEVEeGVsZXMgRmFsdGFudGVzXCIsXG4gICAgc2hvd0NvcnJlY3Q6IFwiTW9zdHJhciBDb3JyZWN0b3NcIixcbiAgICBzaG93SW5jb3JyZWN0OiBcIk1vc3RyYXIgSW5jb3JyZWN0b3NcIixcbiAgICBzaG93TWlzc2luZzogXCJNb3N0cmFyIEZhbHRhbnRlc1wiLFxuICAgIGF1dG9SZWZyZXNoOiBcIkF1dG8tcmVmcmVzY29cIixcbiAgICB6b29tQWRqdXN0ZWQ6IFwiWm9vbSBhanVzdGFkbyBhdXRvbVx1MDBFMXRpY2FtZW50ZSBhXCIsXG4gICAgYXV0b1JlZnJlc2hFbmFibGVkOiBcIkF1dG8tcmVmcmVzY28gYWN0aXZhZG8gY2FkYVwiLFxuICAgIGF1dG9SZWZyZXNoRGlzYWJsZWQ6IFwiQXV0by1yZWZyZXNjbyBkZXNhY3RpdmFkb1wiLFxuICAgIGF1dG9SZWZyZXNoSW50ZXJ2YWxVcGRhdGVkOiBcIkludGVydmFsbyBkZSBhdXRvLXJlZnJlc2NvIGFjdHVhbGl6YWRvIGFcIixcbiAgICB2aXN1YWxpemF0aW9uVXBkYXRlZDogXCJWaXN1YWxpemFjaVx1MDBGM24gYWN0dWFsaXphZGFcIixcbiAgICAvLyBDb25maWcgV2luZG93XG4gICAgY29uZmlnVGl0bGU6IFwiQ29uZmlndXJhY2lcdTAwRjNuIGRlbCBHdWFyZFwiLFxuICAgIHByb3RlY3Rpb25QYXR0ZXJuczogXCJQYXRyb25lcyBkZSBQcm90ZWNjaVx1MDBGM25cIixcbiAgICBwcmVmZXJTcGVjaWZpY0NvbG9yOiBcIlByaW9yaXphciBjb2xvciBlc3BlY1x1MDBFRGZpY29cIixcbiAgICBleGNsdWRlU3BlY2lmaWNDb2xvcnM6IFwiTm8gcmVwYXJhciBjb2xvcmVzIGVzcGVjXHUwMEVEZmljb3NcIixcbiAgICBsb2FkTWFuYWdlbWVudDogXCJHZXN0aVx1MDBGM24gZGUgQ2FyZ2FzXCIsXG4gICAgbWluTG9hZHNUb1dhaXQ6IFwiTVx1MDBFRG5pbW8gZGUgY2FyZ2FzOlwiLFxuICAgIHBpeGVsc1BlckJhdGNoOiBcIlBcdTAwRUR4ZWxlcyBwb3IgbG90ZVwiLFxuICAgIHNwZW5kQWxsUGl4ZWxzT25TdGFydDogXCJHYXN0YXIgdG9kb3MgbG9zIHBcdTAwRUR4ZWxlcyBhbCBpbmljaWFyXCIsXG4gICAgd2FpdFRpbWVzOiBcIlRpZW1wb3MgZGUgRXNwZXJhXCIsXG4gICAgdXNlUmFuZG9tVGltZXM6IFwiVXNhciB0aWVtcG9zIGFsZWF0b3Jpb3MgZW50cmUgbG90ZXNcIixcbiAgICBtaW5UaW1lOiBcIlRpZW1wbyBtXHUwMEVEbmltbyAocylcIixcbiAgICBtYXhUaW1lOiBcIlRpZW1wbyBtXHUwMEUxeGltbyAocylcIlxuICB9LFxuXG4gIC8vIFNsYXZlIE1vZHVsZVxuICBzbGF2ZToge1xuICAgIHRpdGxlOiBcIldQbGFjZSBTbGF2ZVwiLFxuICAgIG1hc3RlclNlcnZlcjogXCJTZXJ2aWRvciBNYWVzdHJvXCIsXG4gICAgaXBBZGRyZXNzOiBcIkRpcmVjY2lcdTAwRjNuIElQXCIsXG4gICAgY29ubmVjdDogXCJDb25lY3RhclwiLFxuICAgIGRpc2Nvbm5lY3Q6IFwiRGVzY29uZWN0YXJcIixcbiAgICBzdGF0dXM6IFwiRXN0YWRvXCIsXG4gICAgc2xhdmVJZDogXCJJRCBTbGF2ZVwiLFxuICAgIG1vZGU6IFwiTW9kb1wiLFxuICAgIHJ1bm5pbmc6IFwiRWplY3V0YW5kb1wiLFxuICAgIGlkbGU6IFwiSW5hY3Rpdm9cIixcbiAgICBjb25uZWN0ZWQ6IFwiQ29uZWN0YWRvXCIsXG4gICAgY29ubmVjdGluZzogXCJDb25lY3RhbmRvLi4uXCIsXG4gICAgZGlzY29ubmVjdGVkOiBcIkRlc2NvbmVjdGFkb1wiLFxuICAgIGVycm9yOiBcIkVycm9yXCIsXG4gICAgY2xvc2U6IFwiQ2VycmFyXCIsXG4gICAgdGVsZW1ldHJ5OiBcIlRlbGVtZXRyXHUwMEVEYVwiLFxuICAgIHJlcGFpcmVkUGl4ZWxzOiBcIlBcdTAwRUR4ZWxlcyBSZXBhcmFkb3NcIixcbiAgICBtaXNzaW5nUGl4ZWxzOiBcIlBcdTAwRUR4ZWxlcyBGYWx0YW50ZXNcIixcbiAgICBhYnNlbnRQaXhlbHM6IFwiUFx1MDBFRHhlbGVzIEF1c2VudGVzXCIsXG4gICAgcmVtYWluaW5nQ2hhcmdlczogXCJDYXJnYXMgUmVzdGFudGVzXCIsXG4gICAgY29ubmVjdGlvbkVycm9yOiBcIkVycm9yIGRlIGNvbmV4aVx1MDBGM24uIFZlcmlmaWNhIGxhIFVSTCB5IHF1ZSBlbCBzZXJ2aWRvciBlc3RcdTAwRTkgZWplY3V0XHUwMEUxbmRvc2UuXCIsXG4gICAgaW52YWxpZFVybDogXCJQb3IgZmF2b3IgaW5ncmVzYSB1bmEgVVJMIHZcdTAwRTFsaWRhXCIsXG4gICAgc2xhdmVSdW5uaW5nOiBcIlNsYXZlIHlhIGVzdFx1MDBFMSBlamVjdXRcdTAwRTFuZG9zZS5cIixcbiAgICBzbGF2ZUluaXRpYWxpemVkOiBcIlNsYXZlIGluaWNpYWxpemFkbyBjb3JyZWN0YW1lbnRlXCIsXG4gICAgc2xhdmVFcnJvcjogXCJFcnJvciBpbmljaWFsaXphbmRvIFNsYXZlXCIsXG4gICAgbWFzdGVyQ29ubmVjdGVkOiBcIkNvbmVjdGFkbyBhbCBzZXJ2aWRvciBtYWVzdHJvXCIsXG4gICAgbWFzdGVyRGlzY29ubmVjdGVkOiBcIkRlc2NvbmVjdGFkbyBkZWwgc2Vydmlkb3IgbWFlc3Ryb1wiLFxuICAgIHJlY29ubmVjdGluZzogXCJSZWludGVudGFuZG8gY29uZXhpXHUwMEYzblwiLFxuICAgIG1heFJlY29ubmVjdEF0dGVtcHRzOiBcIk1cdTAwRTF4aW1vIGRlIGludGVudG9zIGRlIHJlY29uZXhpXHUwMEYzbiBhbGNhbnphZG9cIixcbiAgICBtb2RlU2V0OiBcIk1vZG8gY29uZmlndXJhZG9cIixcbiAgICBwcm9qZWN0TG9hZGVkOiBcIkNvbmZpZ3VyYWNpXHUwMEYzbiBkZWwgcHJveWVjdG8gY2FyZ2FkYVwiLFxuICAgIGJvdFN0YXJ0ZWQ6IFwiQm90IGluaWNpYWRvXCIsXG4gICAgYm90U3RvcHBlZDogXCJCb3QgZGV0ZW5pZG9cIixcbiAgICBib3RQYXVzZWQ6IFwiQm90IHBhdXNhZG9cIlxuICB9XG59O1xuIiwgImV4cG9ydCBjb25zdCBlbiA9IHtcbiAgLy8gTGF1bmNoZXJcbiAgbGF1bmNoZXI6IHtcbiAgICB0aXRsZTogJ1dQbGFjZSBBdXRvQk9UJyxcbiAgICBhdXRvRmFybTogJ1x1RDgzQ1x1REYzRSBBdXRvLUZhcm0nLFxuICAgIGF1dG9JbWFnZTogJ1x1RDgzQ1x1REZBOCBBdXRvLUltYWdlJyxcbiAgICBhdXRvR3VhcmQ6ICdcdUQ4M0RcdURFRTFcdUZFMEYgQXV0by1HdWFyZCcsXG4gICAgc2VsZWN0aW9uOiAnU2VsZWN0aW9uJyxcbiAgICB1c2VyOiAnVXNlcicsXG4gICAgY2hhcmdlczogJ0NoYXJnZXMnLFxuICAgIGJhY2tlbmQ6ICdCYWNrZW5kJyxcbiAgICBkYXRhYmFzZTogJ0RhdGFiYXNlJyxcbiAgICB1cHRpbWU6ICdVcHRpbWUnLFxuICAgIGNsb3NlOiAnQ2xvc2UnLFxuICAgIGxhdW5jaDogJ0xhdW5jaCcsXG4gICAgbG9hZGluZzogJ0xvYWRpbmdcdTIwMjYnLFxuICAgIGV4ZWN1dGluZzogJ0V4ZWN1dGluZ1x1MjAyNicsXG4gICAgZG93bmxvYWRpbmc6ICdEb3dubG9hZGluZyBzY3JpcHRcdTIwMjYnLFxuICAgIGNob29zZUJvdDogJ0Nob29zZSBhIGJvdCBhbmQgcHJlc3MgTGF1bmNoJyxcbiAgICByZWFkeVRvTGF1bmNoOiAnUmVhZHkgdG8gbGF1bmNoJyxcbiAgICBsb2FkRXJyb3I6ICdMb2FkIGVycm9yJyxcbiAgICBsb2FkRXJyb3JNc2c6ICdDb3VsZCBub3QgbG9hZCB0aGUgc2VsZWN0ZWQgYm90LiBDaGVjayB5b3VyIGNvbm5lY3Rpb24gb3IgdHJ5IGFnYWluLicsXG4gICAgY2hlY2tpbmc6ICdcdUQ4M0RcdUREMDQgQ2hlY2tpbmcuLi4nLFxuICAgIG9ubGluZTogJ1x1RDgzRFx1REZFMiBPbmxpbmUnLFxuICAgIG9mZmxpbmU6ICdcdUQ4M0RcdUREMzQgT2ZmbGluZScsXG4gICAgb2s6ICdcdUQ4M0RcdURGRTIgT0snLFxuICAgIGVycm9yOiAnXHVEODNEXHVERDM0IEVycm9yJyxcbiAgICB1bmtub3duOiAnLScsXG4gICAgbG9nV2luZG93OiAnTG9ncycsXG4gICAgbG9nV2luZG93VGl0bGU6ICdMb2dzIC0ge2JvdE5hbWV9JyxcbiAgICBkb3dubG9hZExvZ3M6ICdEb3dubG9hZCBMb2dzJyxcbiAgICBjbGVhckxvZ3M6ICdDbGVhciBMb2dzJyxcbiAgICBjbG9zZUxvZ3M6ICdDbG9zZScsXG4gICAgbG9jYWxFeGVjdXRpb246ICdMb2NhbCBleGVjdXRpb24gd2l0aCBmdWxsIGFjY2VzcyB0byB0b2tlbiBzeXN0ZW0nLFxuICAgIGJvdFN0YXJ0aW5nOiAnQm90IHN0YXJ0aW5nLi4uJ1xuICB9LFxuXG4gIC8vIEltYWdlIE1vZHVsZVxuICBpbWFnZToge1xuICAgIHRpdGxlOiBcIldQbGFjZSBBdXRvLUltYWdlXCIsXG4gICAgaW5pdEJvdDogXCJJbml0aWFsaXplIEF1dG8tQk9UXCIsXG4gICAgdXBsb2FkSW1hZ2U6IFwiVXBsb2FkIEltYWdlXCIsXG4gICAgcmVzaXplSW1hZ2U6IFwiUmVzaXplIEltYWdlXCIsXG4gICAgc2VsZWN0UG9zaXRpb246IFwiU2VsZWN0IFBvc2l0aW9uXCIsXG4gICAgc3RhcnRQYWludGluZzogXCJTdGFydCBQYWludGluZ1wiLFxuICAgIHN0b3BQYWludGluZzogXCJTdG9wIFBhaW50aW5nXCIsXG4gICAgc2F2ZVByb2dyZXNzOiBcIlNhdmUgUHJvZ3Jlc3NcIixcbiAgICBsb2FkUHJvZ3Jlc3M6IFwiTG9hZCBQcm9ncmVzc1wiLFxuICAgIGNoZWNraW5nQ29sb3JzOiBcIlx1RDgzRFx1REQwRCBDaGVja2luZyBhdmFpbGFibGUgY29sb3JzLi4uXCIsXG4gICAgbm9Db2xvcnNGb3VuZDogXCJcdTI3NEMgT3BlbiB0aGUgY29sb3IgcGFsZXR0ZSBvbiB0aGUgc2l0ZSBhbmQgdHJ5IGFnYWluIVwiLFxuICAgIGNvbG9yc0ZvdW5kOiBcIlx1MjcwNSBGb3VuZCB7Y291bnR9IGF2YWlsYWJsZSBjb2xvcnNcIixcbiAgICBsb2FkaW5nSW1hZ2U6IFwiXHVEODNEXHVEREJDXHVGRTBGIExvYWRpbmcgaW1hZ2UuLi5cIixcbiAgICBpbWFnZUxvYWRlZDogXCJcdTI3MDUgSW1hZ2UgbG9hZGVkIHdpdGgge2NvdW50fSB2YWxpZCBwaXhlbHNcIixcbiAgICBpbWFnZUVycm9yOiBcIlx1Mjc0QyBFcnJvciBsb2FkaW5nIGltYWdlXCIsXG4gICAgc2VsZWN0UG9zaXRpb25BbGVydDogXCJQYWludCB0aGUgZmlyc3QgcGl4ZWwgYXQgdGhlIGxvY2F0aW9uIHdoZXJlIHlvdSB3YW50IHRoZSBhcnQgdG8gc3RhcnQhXCIsXG4gICAgd2FpdGluZ1Bvc2l0aW9uOiBcIlx1RDgzRFx1REM0NiBXYWl0aW5nIGZvciB5b3UgdG8gcGFpbnQgdGhlIHJlZmVyZW5jZSBwaXhlbC4uLlwiLFxuICAgIHBvc2l0aW9uU2V0OiBcIlx1MjcwNSBQb3NpdGlvbiBzZXQgc3VjY2Vzc2Z1bGx5IVwiLFxuICAgIHBvc2l0aW9uVGltZW91dDogXCJcdTI3NEMgVGltZW91dCBmb3IgcG9zaXRpb24gc2VsZWN0aW9uXCIsXG4gICAgcG9zaXRpb25EZXRlY3RlZDogXCJcdUQ4M0NcdURGQUYgUG9zaXRpb24gZGV0ZWN0ZWQsIHByb2Nlc3NpbmcuLi5cIixcbiAgICBwb3NpdGlvbkVycm9yOiBcIlx1Mjc0QyBFcnJvciBkZXRlY3RpbmcgcG9zaXRpb24sIHBsZWFzZSB0cnkgYWdhaW5cIixcbiAgICBzdGFydFBhaW50aW5nTXNnOiBcIlx1RDgzQ1x1REZBOCBTdGFydGluZyBwYWludGluZy4uLlwiLFxuICAgIHBhaW50aW5nUHJvZ3Jlc3M6IFwiXHVEODNFXHVEREYxIFByb2dyZXNzOiB7cGFpbnRlZH0ve3RvdGFsfSBwaXhlbHMuLi5cIixcbiAgICBub0NoYXJnZXM6IFwiXHUyMzFCIE5vIGNoYXJnZXMuIFdhaXRpbmcge3RpbWV9Li4uXCIsXG4gICAgcGFpbnRpbmdTdG9wcGVkOiBcIlx1MjNGOVx1RkUwRiBQYWludGluZyBzdG9wcGVkIGJ5IHVzZXJcIixcbiAgICBwYWludGluZ0NvbXBsZXRlOiBcIlx1MjcwNSBQYWludGluZyBjb21wbGV0ZWQhIHtjb3VudH0gcGl4ZWxzIHBhaW50ZWQuXCIsXG4gICAgcGFpbnRpbmdFcnJvcjogXCJcdTI3NEMgRXJyb3IgZHVyaW5nIHBhaW50aW5nXCIsXG4gICAgbWlzc2luZ1JlcXVpcmVtZW50czogXCJcdTI3NEMgTG9hZCBhbiBpbWFnZSBhbmQgc2VsZWN0IGEgcG9zaXRpb24gZmlyc3RcIixcbiAgICBwcm9ncmVzczogXCJQcm9ncmVzc1wiLFxuICAgIHVzZXJOYW1lOiBcIlVzZXJcIixcbiAgICBwaXhlbHM6IFwiUGl4ZWxzXCIsXG4gICAgY2hhcmdlczogXCJDaGFyZ2VzXCIsXG4gICAgZXN0aW1hdGVkVGltZTogXCJFc3RpbWF0ZWQgdGltZVwiLFxuICAgIGluaXRNZXNzYWdlOiBcIkNsaWNrICdJbml0aWFsaXplIEF1dG8tQk9UJyB0byBiZWdpblwiLFxuICAgIHdhaXRpbmdJbml0OiBcIldhaXRpbmcgZm9yIGluaXRpYWxpemF0aW9uLi4uXCIsXG4gICAgcmVzaXplU3VjY2VzczogXCJcdTI3MDUgSW1hZ2UgcmVzaXplZCB0byB7d2lkdGh9eHtoZWlnaHR9XCIsXG4gICAgcGFpbnRpbmdQYXVzZWQ6IFwiXHUyM0Y4XHVGRTBGIFBhaW50aW5nIHBhdXNlZCBhdCBwb3NpdGlvbiBYOiB7eH0sIFk6IHt5fVwiLFxuICAgIHBpeGVsc1BlckJhdGNoOiBcIlBpeGVscyBwZXIgYmF0Y2hcIixcbiAgICBiYXRjaFNpemU6IFwiQmF0Y2ggc2l6ZVwiLFxuICAgIG5leHRCYXRjaFRpbWU6IFwiTmV4dCBiYXRjaCBpblwiLFxuICAgIHVzZUFsbENoYXJnZXM6IFwiVXNlIGFsbCBhdmFpbGFibGUgY2hhcmdlc1wiLFxuICAgIHNob3dPdmVybGF5OiBcIlNob3cgb3ZlcmxheVwiLFxuICAgIG1heENoYXJnZXM6IFwiTWF4IGNoYXJnZXMgcGVyIGJhdGNoXCIsXG4gICAgd2FpdGluZ0ZvckNoYXJnZXM6IFwiXHUyM0YzIFdhaXRpbmcgZm9yIGNoYXJnZXM6IHtjdXJyZW50fS97bmVlZGVkfVwiLFxuICAgIHRpbWVSZW1haW5pbmc6IFwiVGltZSByZW1haW5pbmdcIixcbiAgICBjb29sZG93bldhaXRpbmc6IFwiXHUyM0YzIFdhaXRpbmcge3RpbWV9IHRvIGNvbnRpbnVlLi4uXCIsXG4gICAgcHJvZ3Jlc3NTYXZlZDogXCJcdTI3MDUgUHJvZ3Jlc3Mgc2F2ZWQgYXMge2ZpbGVuYW1lfVwiLFxuICAgIHByb2dyZXNzTG9hZGVkOiBcIlx1MjcwNSBQcm9ncmVzcyBsb2FkZWQ6IHtwYWludGVkfS97dG90YWx9IHBpeGVscyBwYWludGVkXCIsXG4gICAgcHJvZ3Jlc3NMb2FkRXJyb3I6IFwiXHUyNzRDIEVycm9yIGxvYWRpbmcgcHJvZ3Jlc3M6IHtlcnJvcn1cIixcblxuICAgIHByb2dyZXNzU2F2ZUVycm9yOiBcIlx1Mjc0QyBFcnJvciBzYXZpbmcgcHJvZ3Jlc3M6IHtlcnJvcn1cIixcblxuICAgIGNvbmZpcm1TYXZlUHJvZ3Jlc3M6IFwiRG8geW91IHdhbnQgdG8gc2F2ZSB0aGUgY3VycmVudCBwcm9ncmVzcyBiZWZvcmUgc3RvcHBpbmc/XCIsXG4gICAgc2F2ZVByb2dyZXNzVGl0bGU6IFwiU2F2ZSBQcm9ncmVzc1wiLFxuICAgIGRpc2NhcmRQcm9ncmVzczogXCJEaXNjYXJkXCIsXG4gICAgY2FuY2VsOiBcIkNhbmNlbFwiLFxuICAgIG1pbmltaXplOiBcIk1pbmltaXplXCIsXG4gICAgd2lkdGg6IFwiV2lkdGhcIixcbiAgICBoZWlnaHQ6IFwiSGVpZ2h0XCIsIFxuICAgIGtlZXBBc3BlY3Q6IFwiS2VlcCBhc3BlY3QgcmF0aW9cIixcbiAgICBhcHBseTogXCJBcHBseVwiLFxuICBvdmVybGF5T246IFwiT3ZlcmxheTogT05cIixcbiAgb3ZlcmxheU9mZjogXCJPdmVybGF5OiBPRkZcIixcbiAgICBwYXNzQ29tcGxldGVkOiBcIlx1MjcwNSBQYXNzIGNvbXBsZXRlZDoge3BhaW50ZWR9IHBpeGVscyBwYWludGVkIHwgUHJvZ3Jlc3M6IHtwZXJjZW50fSUgKHtjdXJyZW50fS97dG90YWx9KVwiLFxuICAgIHdhaXRpbmdDaGFyZ2VzUmVnZW46IFwiXHUyM0YzIFdhaXRpbmcgZm9yIGNoYXJnZSByZWdlbmVyYXRpb246IHtjdXJyZW50fS97bmVlZGVkfSAtIFRpbWU6IHt0aW1lfVwiLFxuICAgIHdhaXRpbmdDaGFyZ2VzQ291bnRkb3duOiBcIlx1MjNGMyBXYWl0aW5nIGZvciBjaGFyZ2VzOiB7Y3VycmVudH0ve25lZWRlZH0gLSBSZW1haW5pbmc6IHt0aW1lfVwiLFxuICAgIGF1dG9Jbml0aWFsaXppbmc6IFwiXHVEODNFXHVERDE2IEF1dG8taW5pdGlhbGl6aW5nLi4uXCIsXG4gICAgYXV0b0luaXRTdWNjZXNzOiBcIlx1MjcwNSBCb3QgYXV0by1zdGFydGVkIHN1Y2Nlc3NmdWxseVwiLFxuICAgIGF1dG9Jbml0RmFpbGVkOiBcIlx1MjZBMFx1RkUwRiBDb3VsZCBub3QgYXV0by1zdGFydC4gVXNlIG1hbnVhbCBidXR0b24uXCIsXG4gICAgcGFsZXR0ZURldGVjdGVkOiBcIlx1RDgzQ1x1REZBOCBDb2xvciBwYWxldHRlIGRldGVjdGVkXCIsXG4gICAgcGFsZXR0ZU5vdEZvdW5kOiBcIlx1RDgzRFx1REQwRCBTZWFyY2hpbmcgZm9yIGNvbG9yIHBhbGV0dGUuLi5cIixcbiAgICBjbGlja2luZ1BhaW50QnV0dG9uOiBcIlx1RDgzRFx1REM0NiBDbGlja2luZyBQYWludCBidXR0b24uLi5cIixcbiAgICBwYWludEJ1dHRvbk5vdEZvdW5kOiBcIlx1Mjc0QyBQYWludCBidXR0b24gbm90IGZvdW5kXCIsXG4gICAgbWFudWFsSW5pdFJlcXVpcmVkOiBcIlx1RDgzRFx1REQyNyBNYW51YWwgaW5pdGlhbGl6YXRpb24gcmVxdWlyZWRcIixcbiAgICByZXRyeUF0dGVtcHQ6IFwiXHVEODNEXHVERDA0IFJldHJ5IHthdHRlbXB0fS97bWF4QXR0ZW1wdHN9IGluIHtkZWxheX1zLi4uXCIsXG4gICAgcmV0cnlFcnJvcjogXCJcdUQ4M0RcdURDQTUgRXJyb3IgaW4gYXR0ZW1wdCB7YXR0ZW1wdH0ve21heEF0dGVtcHRzfSwgcmV0cnlpbmcgaW4ge2RlbGF5fXMuLi5cIixcbiAgICByZXRyeUZhaWxlZDogXCJcdTI3NEMgRmFpbGVkIGFmdGVyIHttYXhBdHRlbXB0c30gYXR0ZW1wdHMuIENvbnRpbnVpbmcgd2l0aCBuZXh0IGJhdGNoLi4uXCIsXG4gICAgbmV0d29ya0Vycm9yOiBcIlx1RDgzQ1x1REYxMCBOZXR3b3JrIGVycm9yLiBSZXRyeWluZy4uLlwiLFxuICAgIHNlcnZlckVycm9yOiBcIlx1RDgzRFx1REQyNSBTZXJ2ZXIgZXJyb3IuIFJldHJ5aW5nLi4uXCIsXG4gICAgdGltZW91dEVycm9yOiBcIlx1MjNGMCBTZXJ2ZXIgdGltZW91dCwgcmV0cnlpbmcuLi5cIixcbiAgICAvLyB2Mi4wIC0gUHJvdGVjdGlvbiBhbmQgUGF0dGVybnNcbiAgICBwcm90ZWN0aW9uRW5hYmxlZDogXCJQcm90ZWN0aW9uIGVuYWJsZWRcIixcbiAgICBwcm90ZWN0aW9uRGlzYWJsZWQ6IFwiUHJvdGVjdGlvbiBkaXNhYmxlZFwiLFxuICAgIHBhaW50UGF0dGVybjogXCJQYWludCBwYXR0ZXJuXCIsXG4gICAgcGF0dGVybkxpbmVhclN0YXJ0OiBcIkxpbmVhciAoU3RhcnQpXCIsXG4gICAgcGF0dGVybkxpbmVhckVuZDogXCJMaW5lYXIgKEVuZClcIixcbiAgICBwYXR0ZXJuUmFuZG9tOiBcIlJhbmRvbVwiLFxuICAgIHBhdHRlcm5DZW50ZXJPdXQ6IFwiQ2VudGVyIG91dHdhcmRcIixcbiAgICBwYXR0ZXJuQ29ybmVyc0ZpcnN0OiBcIkNvcm5lcnMgZmlyc3RcIixcbiAgICBwYXR0ZXJuU3BpcmFsOiBcIlNwaXJhbFwiLFxuICAgIHNvbGlkOiBcIlNvbGlkXCIsXG4gICAgc3RyaXBlczogXCJTdHJpcGVzXCIsXG4gICAgY2hlY2tlcmJvYXJkOiBcIkNoZWNrZXJib2FyZFwiLFxuICAgIGdyYWRpZW50OiBcIkdyYWRpZW50XCIsXG4gICAgZG90czogXCJEb3RzXCIsXG4gICAgd2F2ZXM6IFwiV2F2ZXNcIixcbiAgICBzcGlyYWw6IFwiU3BpcmFsXCIsXG4gICAgbW9zYWljOiBcIk1vc2FpY1wiLFxuICAgIGJyaWNrczogXCJCcmlja3NcIixcbiAgICB6aWd6YWc6IFwiWmlnemFnXCIsXG4gICAgcHJvdGVjdGluZ0RyYXdpbmc6IFwiUHJvdGVjdGluZyBkcmF3aW5nLi4uXCIsXG4gICAgY2hhbmdlc0RldGVjdGVkOiBcIlx1RDgzRFx1REVBOCB7Y291bnR9IGNoYW5nZXMgZGV0ZWN0ZWQgaW4gZHJhd2luZ1wiLFxuICAgIHJlcGFpcmluZzogXCJcdUQ4M0RcdUREMjcgUmVwYWlyaW5nIHtjb3VudH0gYWx0ZXJlZCBwaXhlbHMuLi5cIixcbiAgICByZXBhaXJDb21wbGV0ZWQ6IFwiXHUyNzA1IFJlcGFpciBjb21wbGV0ZWQ6IHtjb3VudH0gcGl4ZWxzXCIsXG4gICAgbm9DaGFyZ2VzRm9yUmVwYWlyOiBcIlx1MjZBMSBObyBjaGFyZ2VzIGZvciByZXBhaXIsIHdhaXRpbmcuLi5cIixcbiAgICBwcm90ZWN0aW9uUHJpb3JpdHk6IFwiXHVEODNEXHVERUUxXHVGRTBGIFByb3RlY3Rpb24gcHJpb3JpdHkgYWN0aXZhdGVkXCIsXG4gICAgcGF0dGVybkFwcGxpZWQ6IFwiUGF0dGVybiBhcHBsaWVkXCIsXG4gICAgY3VzdG9tUGF0dGVybjogXCJDdXN0b20gcGF0dGVyblwiLFxuICAgIGxvZ1dpbmRvdzogXCJMb2dzXCIsXG4gICAgbG9nV2luZG93VGl0bGU6IFwiTG9ncyAtIHtib3ROYW1lfVwiLFxuICAgIGRvd25sb2FkTG9nczogXCJEb3dubG9hZCBMb2dzXCIsXG4gICAgY2xlYXJMb2dzOiBcIkNsZWFyIExvZ3NcIixcbiAgICBjbG9zZUxvZ3M6IFwiQ2xvc2VcIlxuICB9LFxuXG4gIC8vIEZhcm0gbW9kdWxlICh0byBiZSBpbXBsZW1lbnRlZClcbiAgZmFybToge1xuICAgIHRpdGxlOiBcIldQbGFjZSBGYXJtIEJvdFwiLFxuICAgIHN0YXJ0OiBcIlN0YXJ0XCIsXG4gICAgc3RvcDogXCJTdG9wXCIsXG4gICAgc3RvcHBlZDogXCJCb3Qgc3RvcHBlZFwiLFxuICAgIGNhbGlicmF0ZTogXCJDYWxpYnJhdGVcIixcbiAgICBwYWludE9uY2U6IFwiT25jZVwiLFxuICAgIGNoZWNraW5nU3RhdHVzOiBcIkNoZWNraW5nIHN0YXR1cy4uLlwiLFxuICAgIGNvbmZpZ3VyYXRpb246IFwiQ29uZmlndXJhdGlvblwiLFxuICAgIGRlbGF5OiBcIkRlbGF5IChtcylcIixcbiAgICBwaXhlbHNQZXJCYXRjaDogXCJQaXhlbHMvYmF0Y2hcIixcbiAgICBtaW5DaGFyZ2VzOiBcIk1pbiBjaGFyZ2VzXCIsXG4gICAgY29sb3JNb2RlOiBcIkNvbG9yIG1vZGVcIixcbiAgICByYW5kb206IFwiUmFuZG9tXCIsXG4gICAgZml4ZWQ6IFwiRml4ZWRcIixcbiAgICByYW5nZTogXCJSYW5nZVwiLFxuICAgIGZpeGVkQ29sb3I6IFwiRml4ZWQgY29sb3JcIixcbiAgICBhZHZhbmNlZDogXCJBZHZhbmNlZFwiLFxuICAgIHRpbGVYOiBcIlRpbGUgWFwiLFxuICAgIHRpbGVZOiBcIlRpbGUgWVwiLFxuICAgIGN1c3RvbVBhbGV0dGU6IFwiQ3VzdG9tIHBhbGV0dGVcIixcbiAgICBwYWxldHRlRXhhbXBsZTogXCJlLmc6ICNGRjAwMDAsIzAwRkYwMCwjMDAwMEZGXCIsXG4gICAgY2FwdHVyZTogXCJDYXB0dXJlXCIsXG4gICAgcGFpbnRlZDogXCJQYWludGVkXCIsXG4gICAgY2hhcmdlczogXCJDaGFyZ2VzXCIsXG4gICAgcmV0cmllczogXCJSZXRyaWVzXCIsXG4gICAgdGlsZTogXCJUaWxlXCIsXG4gICAgY29uZmlnU2F2ZWQ6IFwiQ29uZmlndXJhdGlvbiBzYXZlZFwiLFxuICAgIGNvbmZpZ0xvYWRlZDogXCJDb25maWd1cmF0aW9uIGxvYWRlZFwiLFxuICAgIGNvbmZpZ1Jlc2V0OiBcIkNvbmZpZ3VyYXRpb24gcmVzZXRcIixcbiAgICBjYXB0dXJlSW5zdHJ1Y3Rpb25zOiBcIlBhaW50IGEgcGl4ZWwgbWFudWFsbHkgdG8gY2FwdHVyZSBjb29yZGluYXRlcy4uLlwiLFxuICAgIGJhY2tlbmRPbmxpbmU6IFwiQmFja2VuZCBPbmxpbmVcIixcbiAgICBiYWNrZW5kT2ZmbGluZTogXCJCYWNrZW5kIE9mZmxpbmVcIixcbiAgICBzdGFydGluZ0JvdDogXCJTdGFydGluZyBib3QuLi5cIixcbiAgICBzdG9wcGluZ0JvdDogXCJTdG9wcGluZyBib3QuLi5cIixcbiAgICBjYWxpYnJhdGluZzogXCJDYWxpYnJhdGluZy4uLlwiLFxuICAgIGFscmVhZHlSdW5uaW5nOiBcIkF1dG8tRmFybSBpcyBhbHJlYWR5IHJ1bm5pbmcuXCIsXG4gICAgaW1hZ2VSdW5uaW5nV2FybmluZzogXCJBdXRvLUltYWdlIGlzIHJ1bm5pbmcuIENsb3NlIGl0IGJlZm9yZSBzdGFydGluZyBBdXRvLUZhcm0uXCIsXG4gICAgc2VsZWN0UG9zaXRpb246IFwiU2VsZWN0IEFyZWFcIixcbiAgICBzZWxlY3RQb3NpdGlvbkFsZXJ0OiBcIlx1RDgzQ1x1REZBRiBQYWludCBhIHBpeGVsIGluIGFuIEVNUFRZIGFyZWEgb2YgdGhlIG1hcCB0byBzZXQgdGhlIGZhcm1pbmcgem9uZVwiLFxuICAgIHdhaXRpbmdQb3NpdGlvbjogXCJcdUQ4M0RcdURDNDYgV2FpdGluZyBmb3IgeW91IHRvIHBhaW50IHRoZSByZWZlcmVuY2UgcGl4ZWwuLi5cIixcbiAgICBwb3NpdGlvblNldDogXCJcdTI3MDUgQXJlYSBzZXQhIFJhZGl1czogNTAwcHhcIixcbiAgICBwb3NpdGlvblRpbWVvdXQ6IFwiXHUyNzRDIFRpbWVvdXQgZm9yIGFyZWEgc2VsZWN0aW9uXCIsXG4gICAgbWlzc2luZ1Bvc2l0aW9uOiBcIlx1Mjc0QyBTZWxlY3QgYW4gYXJlYSBmaXJzdCB1c2luZyAnU2VsZWN0IEFyZWEnXCIsXG4gICAgZmFybVJhZGl1czogXCJGYXJtIHJhZGl1c1wiLFxuICAgIHBvc2l0aW9uSW5mbzogXCJDdXJyZW50IGFyZWFcIixcbiAgICBmYXJtaW5nSW5SYWRpdXM6IFwiXHVEODNDXHVERjNFIEZhcm1pbmcgaW4ge3JhZGl1c31weCByYWRpdXMgZnJvbSAoe3h9LHt5fSlcIixcbiAgICBzZWxlY3RFbXB0eUFyZWE6IFwiXHUyNkEwXHVGRTBGIElNUE9SVEFOVDogU2VsZWN0IGFuIEVNUFRZIGFyZWEgdG8gYXZvaWQgY29uZmxpY3RzXCIsXG4gICAgbm9Qb3NpdGlvbjogXCJObyBhcmVhXCIsXG4gICAgY3VycmVudFpvbmU6IFwiWm9uZTogKHt4fSx7eX0pXCIsXG4gICAgYXV0b1NlbGVjdFBvc2l0aW9uOiBcIlx1RDgzQ1x1REZBRiBTZWxlY3QgYW4gYXJlYSBmaXJzdC4gUGFpbnQgYSBwaXhlbCBvbiB0aGUgbWFwIHRvIHNldCB0aGUgZmFybWluZyB6b25lXCIsXG4gICAgbG9nV2luZG93OiBcIkxvZ3NcIixcbiAgICBsb2dXaW5kb3dUaXRsZTogXCJMb2dzIC0ge2JvdE5hbWV9XCIsXG4gICAgZG93bmxvYWRMb2dzOiBcIkRvd25sb2FkIExvZ3NcIixcbiAgICBjbGVhckxvZ3M6IFwiQ2xlYXIgTG9nc1wiLFxuICAgIGNsb3NlTG9nczogXCJDbG9zZVwiXG4gIH0sXG5cbiAgLy8gQ29tbW9uL1NoYXJlZFxuICBjb21tb246IHtcbiAgICB5ZXM6IFwiWWVzXCIsXG4gICAgbm86IFwiTm9cIixcbiAgICBvazogXCJPS1wiLFxuICAgIGNhbmNlbDogXCJDYW5jZWxcIixcbiAgICBjbG9zZTogXCJDbG9zZVwiLFxuICAgIHNhdmU6IFwiU2F2ZVwiLFxuICAgIGxvYWQ6IFwiTG9hZFwiLFxuICAgIGRlbGV0ZTogXCJEZWxldGVcIixcbiAgICBlZGl0OiBcIkVkaXRcIixcbiAgICBzdGFydDogXCJTdGFydFwiLFxuICAgIHN0b3A6IFwiU3RvcFwiLFxuICAgIHBhdXNlOiBcIlBhdXNlXCIsXG4gICAgcmVzdW1lOiBcIlJlc3VtZVwiLFxuICAgIHJlc2V0OiBcIlJlc2V0XCIsXG4gICAgc2V0dGluZ3M6IFwiU2V0dGluZ3NcIixcbiAgICBoZWxwOiBcIkhlbHBcIixcbiAgICBhYm91dDogXCJBYm91dFwiLFxuICAgIGxhbmd1YWdlOiBcIkxhbmd1YWdlXCIsXG4gICAgbG9hZGluZzogXCJMb2FkaW5nLi4uXCIsXG4gICAgZXJyb3I6IFwiRXJyb3JcIixcbiAgICBzdWNjZXNzOiBcIlN1Y2Nlc3NcIixcbiAgICB3YXJuaW5nOiBcIldhcm5pbmdcIixcbiAgICBpbmZvOiBcIkluZm9ybWF0aW9uXCIsXG4gICAgbGFuZ3VhZ2VDaGFuZ2VkOiBcIkxhbmd1YWdlIGNoYW5nZWQgdG8ge2xhbmd1YWdlfVwiXG4gIH0sXG5cbiAgLy8gR3VhcmQgTW9kdWxlXG4gIGd1YXJkOiB7XG4gICAgdGl0bGU6IFwiV1BsYWNlIEF1dG8tR3VhcmRcIixcbiAgICBpbml0Qm90OiBcIkluaXRpYWxpemUgR3VhcmQtQk9UXCIsXG4gICAgc2VsZWN0QXJlYTogXCJTZWxlY3QgQXJlYVwiLFxuICAgIGNhcHR1cmVBcmVhOiBcIkNhcHR1cmUgQXJlYVwiLFxuICAgIHN0YXJ0UHJvdGVjdGlvbjogXCJTdGFydCBQcm90ZWN0aW9uXCIsXG4gICAgc3RvcFByb3RlY3Rpb246IFwiU3RvcCBQcm90ZWN0aW9uXCIsXG4gICAgdXBwZXJMZWZ0OiBcIlVwcGVyIExlZnQgQ29ybmVyXCIsXG4gICAgbG93ZXJSaWdodDogXCJMb3dlciBSaWdodCBDb3JuZXJcIixcbiAgICBwcm90ZWN0ZWRQaXhlbHM6IFwiUHJvdGVjdGVkIFBpeGVsc1wiLFxuICAgIGRldGVjdGVkQ2hhbmdlczogXCJEZXRlY3RlZCBDaGFuZ2VzXCIsXG4gICAgcmVwYWlyZWRQaXhlbHM6IFwiUmVwYWlyZWQgUGl4ZWxzXCIsXG4gICAgY2hhcmdlczogXCJDaGFyZ2VzXCIsXG4gICAgd2FpdGluZ0luaXQ6IFwiV2FpdGluZyBmb3IgaW5pdGlhbGl6YXRpb24uLi5cIixcbiAgICBjaGVja2luZ0NvbG9yczogXCJcdUQ4M0NcdURGQTggQ2hlY2tpbmcgYXZhaWxhYmxlIGNvbG9ycy4uLlwiLFxuICAgIG5vQ29sb3JzRm91bmQ6IFwiXHUyNzRDIE5vIGNvbG9ycyBmb3VuZC4gT3BlbiB0aGUgY29sb3IgcGFsZXR0ZSBvbiB0aGUgc2l0ZS5cIixcbiAgICBjb2xvcnNGb3VuZDogXCJcdTI3MDUgRm91bmQge2NvdW50fSBhdmFpbGFibGUgY29sb3JzXCIsXG4gICAgaW5pdFN1Y2Nlc3M6IFwiXHUyNzA1IEd1YXJkLUJPVCBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHlcIixcbiAgICBpbml0RXJyb3I6IFwiXHUyNzRDIEVycm9yIGluaXRpYWxpemluZyBHdWFyZC1CT1RcIixcbiAgICBpbnZhbGlkQ29vcmRzOiBcIlx1Mjc0QyBJbnZhbGlkIGNvb3JkaW5hdGVzXCIsXG4gICAgaW52YWxpZEFyZWE6IFwiXHUyNzRDIEFyZWEgbXVzdCBoYXZlIHVwcGVyIGxlZnQgY29ybmVyIGxlc3MgdGhhbiBsb3dlciByaWdodCBjb3JuZXJcIixcbiAgICBhcmVhVG9vTGFyZ2U6IFwiXHUyNzRDIEFyZWEgdG9vIGxhcmdlOiB7c2l6ZX0gcGl4ZWxzIChtYXhpbXVtOiB7bWF4fSlcIixcbiAgICBjYXB0dXJpbmdBcmVhOiBcIlx1RDgzRFx1RENGOCBDYXB0dXJpbmcgcHJvdGVjdGlvbiBhcmVhLi4uXCIsXG4gICAgYXJlYUNhcHR1cmVkOiBcIlx1MjcwNSBBcmVhIGNhcHR1cmVkOiB7Y291bnR9IHBpeGVscyB1bmRlciBwcm90ZWN0aW9uXCIsXG4gICAgY2FwdHVyZUVycm9yOiBcIlx1Mjc0QyBFcnJvciBjYXB0dXJpbmcgYXJlYToge2Vycm9yfVwiLFxuICAgIGNhcHR1cmVGaXJzdDogXCJcdTI3NEMgRmlyc3QgY2FwdHVyZSBhIHByb3RlY3Rpb24gYXJlYVwiLFxuICAgIHByb3RlY3Rpb25TdGFydGVkOiBcIlx1RDgzRFx1REVFMVx1RkUwRiBQcm90ZWN0aW9uIHN0YXJ0ZWQgLSBtb25pdG9yaW5nIGFyZWFcIixcbiAgICBwcm90ZWN0aW9uU3RvcHBlZDogXCJcdTIzRjlcdUZFMEYgUHJvdGVjdGlvbiBzdG9wcGVkXCIsXG4gICAgbm9DaGFuZ2VzOiBcIlx1MjcwNSBQcm90ZWN0ZWQgYXJlYSAtIG5vIGNoYW5nZXMgZGV0ZWN0ZWRcIixcbiAgICBjaGFuZ2VzRGV0ZWN0ZWQ6IFwiXHVEODNEXHVERUE4IHtjb3VudH0gY2hhbmdlcyBkZXRlY3RlZCBpbiBwcm90ZWN0ZWQgYXJlYVwiLFxuICAgIHJlcGFpcmluZzogXCJcdUQ4M0RcdURFRTBcdUZFMEYgUmVwYWlyaW5nIHtjb3VudH0gYWx0ZXJlZCBwaXhlbHMuLi5cIixcbiAgICByZXBhaXJlZFN1Y2Nlc3M6IFwiXHUyNzA1IFN1Y2Nlc3NmdWxseSByZXBhaXJlZCB7Y291bnR9IHBpeGVsc1wiLFxuICAgIHJlcGFpckVycm9yOiBcIlx1Mjc0QyBFcnJvciByZXBhaXJpbmcgcGl4ZWxzOiB7ZXJyb3J9XCIsXG4gICAgbm9DaGFyZ2VzOiBcIlx1MjZBMFx1RkUwRiBJbnN1ZmZpY2llbnQgY2hhcmdlcyB0byByZXBhaXIgY2hhbmdlc1wiLFxuICAgIGNoZWNraW5nQ2hhbmdlczogXCJcdUQ4M0RcdUREMEQgQ2hlY2tpbmcgY2hhbmdlcyBpbiBwcm90ZWN0ZWQgYXJlYS4uLlwiLFxuICAgIGVycm9yQ2hlY2tpbmc6IFwiXHUyNzRDIEVycm9yIGNoZWNraW5nIGNoYW5nZXM6IHtlcnJvcn1cIixcbiAgICBndWFyZEFjdGl2ZTogXCJcdUQ4M0RcdURFRTFcdUZFMEYgR3VhcmRpYW4gYWN0aXZlIC0gYXJlYSB1bmRlciBwcm90ZWN0aW9uXCIsXG4gICAgbGFzdENoZWNrOiBcIkxhc3QgY2hlY2s6IHt0aW1lfVwiLFxuICAgIG5leHRDaGVjazogXCJOZXh0IGNoZWNrIGluOiB7dGltZX1zXCIsXG4gICAgYXV0b0luaXRpYWxpemluZzogXCJcdUQ4M0VcdUREMTYgQXV0by1pbml0aWFsaXppbmcuLi5cIixcbiAgICBhdXRvSW5pdFN1Y2Nlc3M6IFwiXHUyNzA1IEd1YXJkLUJPVCBhdXRvLXN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5XCIsXG4gICAgYXV0b0luaXRGYWlsZWQ6IFwiXHUyNkEwXHVGRTBGIENvdWxkIG5vdCBhdXRvLXN0YXJ0LiBVc2UgbWFudWFsIGJ1dHRvbi5cIixcbiAgICBtYW51YWxJbml0UmVxdWlyZWQ6IFwiXHVEODNEXHVERDI3IE1hbnVhbCBpbml0aWFsaXphdGlvbiByZXF1aXJlZFwiLFxuICAgIHBhbGV0dGVEZXRlY3RlZDogXCJcdUQ4M0NcdURGQTggQ29sb3IgcGFsZXR0ZSBkZXRlY3RlZFwiLFxuICAgIHBhbGV0dGVOb3RGb3VuZDogXCJcdUQ4M0RcdUREMEQgU2VhcmNoaW5nIGZvciBjb2xvciBwYWxldHRlLi4uXCIsXG4gICAgY2xpY2tpbmdQYWludEJ1dHRvbjogXCJcdUQ4M0RcdURDNDYgQ2xpY2tpbmcgUGFpbnQgYnV0dG9uLi4uXCIsXG4gICAgcGFpbnRCdXR0b25Ob3RGb3VuZDogXCJcdTI3NEMgUGFpbnQgYnV0dG9uIG5vdCBmb3VuZFwiLFxuICAgIHNlbGVjdFVwcGVyTGVmdDogXCJcdUQ4M0NcdURGQUYgUGFpbnQgYSBwaXhlbCBhdCB0aGUgVVBQRVIgTEVGVCBjb3JuZXIgb2YgdGhlIGFyZWEgdG8gcHJvdGVjdFwiLFxuICAgIHNlbGVjdExvd2VyUmlnaHQ6IFwiXHVEODNDXHVERkFGIE5vdyBwYWludCBhIHBpeGVsIGF0IHRoZSBMT1dFUiBSSUdIVCBjb3JuZXIgb2YgdGhlIGFyZWFcIixcbiAgICB3YWl0aW5nVXBwZXJMZWZ0OiBcIlx1RDgzRFx1REM0NiBXYWl0aW5nIGZvciB1cHBlciBsZWZ0IGNvcm5lciBzZWxlY3Rpb24uLi5cIixcbiAgICB3YWl0aW5nTG93ZXJSaWdodDogXCJcdUQ4M0RcdURDNDYgV2FpdGluZyBmb3IgbG93ZXIgcmlnaHQgY29ybmVyIHNlbGVjdGlvbi4uLlwiLFxuICAgIHVwcGVyTGVmdENhcHR1cmVkOiBcIlx1MjcwNSBVcHBlciBsZWZ0IGNvcm5lciBjYXB0dXJlZDogKHt4fSwge3l9KVwiLFxuICAgIGxvd2VyUmlnaHRDYXB0dXJlZDogXCJcdTI3MDUgTG93ZXIgcmlnaHQgY29ybmVyIGNhcHR1cmVkOiAoe3h9LCB7eX0pXCIsXG4gICAgc2VsZWN0aW9uVGltZW91dDogXCJcdTI3NEMgU2VsZWN0aW9uIHRpbWVvdXRcIixcbiAgICBzZWxlY3Rpb25FcnJvcjogXCJcdTI3NEMgU2VsZWN0aW9uIGVycm9yLCBwbGVhc2UgdHJ5IGFnYWluXCIsXG4gICAgbG9nV2luZG93OiBcIkxvZ3NcIixcbiAgICBsb2dXaW5kb3dUaXRsZTogXCJMb2dzIC0ge2JvdE5hbWV9XCIsXG4gICAgZG93bmxvYWRMb2dzOiBcIkRvd25sb2FkIExvZ3NcIixcbiAgICBjbGVhckxvZ3M6IFwiQ2xlYXIgTG9nc1wiLFxuICAgIGNsb3NlTG9nczogXCJDbG9zZVwiLFxuICAgIC8vIEFuYWx5c2lzIFdpbmRvd1xuICAgIGFuYWx5c2lzVGl0bGU6IFwiRGlmZmVyZW5jZSBBbmFseXNpcyAtIEpTT04gdnMgQ3VycmVudCBDYW52YXNcIixcbiAgICBjb3JyZWN0UGl4ZWxzOiBcIkNvcnJlY3QgUGl4ZWxzXCIsXG4gICAgaW5jb3JyZWN0UGl4ZWxzOiBcIkluY29ycmVjdCBQaXhlbHNcIixcbiAgICBtaXNzaW5nUGl4ZWxzOiBcIk1pc3NpbmcgUGl4ZWxzXCIsXG4gICAgc2hvd0NvcnJlY3Q6IFwiU2hvdyBDb3JyZWN0XCIsXG4gICAgc2hvd0luY29ycmVjdDogXCJTaG93IEluY29ycmVjdFwiLFxuICAgIHNob3dNaXNzaW5nOiBcIlNob3cgTWlzc2luZ1wiLFxuICAgIGF1dG9SZWZyZXNoOiBcIkF1dG8tcmVmcmVzaFwiLFxuICAgIHpvb21BZGp1c3RlZDogXCJab29tIGF1dG9tYXRpY2FsbHkgYWRqdXN0ZWQgdG9cIixcbiAgICBhdXRvUmVmcmVzaEVuYWJsZWQ6IFwiQXV0by1yZWZyZXNoIGVuYWJsZWQgZXZlcnlcIixcbiAgICBhdXRvUmVmcmVzaERpc2FibGVkOiBcIkF1dG8tcmVmcmVzaCBkaXNhYmxlZFwiLFxuICAgIGF1dG9SZWZyZXNoSW50ZXJ2YWxVcGRhdGVkOiBcIkF1dG8tcmVmcmVzaCBpbnRlcnZhbCB1cGRhdGVkIHRvXCIsXG4gICAgdmlzdWFsaXphdGlvblVwZGF0ZWQ6IFwiVmlzdWFsaXphdGlvbiB1cGRhdGVkXCIsXG4gICAgLy8gQ29uZmlnIFdpbmRvd1xuICAgIGNvbmZpZ1RpdGxlOiBcIkd1YXJkIENvbmZpZ3VyYXRpb25cIixcbiAgICBwcm90ZWN0aW9uUGF0dGVybnM6IFwiUHJvdGVjdGlvbiBQYXR0ZXJuc1wiLFxuICAgIHByZWZlclNwZWNpZmljQ29sb3I6IFwiUHJpb3JpdGl6ZSBzcGVjaWZpYyBjb2xvclwiLFxuICAgIGV4Y2x1ZGVTcGVjaWZpY0NvbG9yczogXCJEb24ndCByZXBhaXIgc3BlY2lmaWMgY29sb3JzXCIsXG4gICAgbG9hZE1hbmFnZW1lbnQ6IFwiTG9hZCBNYW5hZ2VtZW50XCIsXG4gICAgbWluTG9hZHNUb1dhaXQ6IFwiTWluaW11bSBsb2FkcyB0byB3YWl0XCIsXG4gICAgcGl4ZWxzUGVyQmF0Y2g6IFwiUGl4ZWxzIHBlciBiYXRjaFwiLFxuICAgIHNwZW5kQWxsUGl4ZWxzT25TdGFydDogXCJTcGVuZCBhbGwgcGl4ZWxzIG9uIHN0YXJ0XCIsXG4gICAgd2FpdFRpbWVzOiBcIldhaXQgVGltZXNcIixcbiAgICB1c2VSYW5kb21UaW1lczogXCJVc2UgcmFuZG9tIHRpbWVzIGJldHdlZW4gYmF0Y2hlc1wiLFxuICAgIG1pblRpbWU6IFwiTWluaW11bSB0aW1lIChzKVwiLFxuICAgIG1heFRpbWU6IFwiTWF4aW11bSB0aW1lIChzKVwiXG4gIH1cbn07XG4iLCAiZXhwb3J0IGNvbnN0IGZyID0ge1xuICAvLyBMYXVuY2hlclxuICBsYXVuY2hlcjoge1xuICAgIHRpdGxlOiAnV1BsYWNlIEF1dG9CT1QnLFxuICAgIGF1dG9GYXJtOiAnXHVEODNDXHVERjNFIEF1dG8tRmFybScsXG4gICAgYXV0b0ltYWdlOiAnXHVEODNDXHVERkE4IEF1dG8tSW1hZ2UnLFxuICAgIGF1dG9HdWFyZDogJ1x1RDgzRFx1REVFMVx1RkUwRiBBdXRvLUd1YXJkJyxcbiAgICBzZWxlY3Rpb246ICdTXHUwMEU5bGVjdGlvbicsXG4gICAgdXNlcjogJ1V0aWxpc2F0ZXVyJyxcbiAgICBjaGFyZ2VzOiAnQ2hhcmdlcycsXG4gICAgYmFja2VuZDogJ0JhY2tlbmQnLFxuICAgIGRhdGFiYXNlOiAnQmFzZSBkZSBkb25uXHUwMEU5ZXMnLFxuICAgIHVwdGltZTogJ1RlbXBzIGFjdGlmJyxcbiAgICBjbG9zZTogJ0Zlcm1lcicsXG4gICAgbGF1bmNoOiAnTGFuY2VyJyxcbiAgICBsb2FkaW5nOiAnQ2hhcmdlbWVudFx1MjAyNicsXG4gICAgZXhlY3V0aW5nOiAnRXhcdTAwRTljdXRpb25cdTIwMjYnLFxuICAgIGRvd25sb2FkaW5nOiAnVFx1MDBFOWxcdTAwRTljaGFyZ2VtZW50IGR1IHNjcmlwdFx1MjAyNicsXG4gICAgY2hvb3NlQm90OiAnQ2hvaXNpc3NleiB1biBib3QgZXQgYXBwdXlleiBzdXIgTGFuY2VyJyxcbiAgICByZWFkeVRvTGF1bmNoOiAnUHJcdTAwRUF0IFx1MDBFMCBsYW5jZXInLFxuICAgIGxvYWRFcnJvcjogJ0VycmV1ciBkZSBjaGFyZ2VtZW50JyxcbiAgICBsb2FkRXJyb3JNc2c6ICdJbXBvc3NpYmxlIGRlIGNoYXJnZXIgbGUgYm90IHNcdTAwRTlsZWN0aW9ublx1MDBFOS4gVlx1MDBFOXJpZmlleiB2b3RyZSBjb25uZXhpb24gb3Ugclx1MDBFOWVzc2F5ZXouJyxcbiAgICBjaGVja2luZzogJ1x1RDgzRFx1REQwNCBWXHUwMEU5cmlmaWNhdGlvbi4uLicsXG4gICAgb25saW5lOiAnXHVEODNEXHVERkUyIEVuIGxpZ25lJyxcbiAgICBvZmZsaW5lOiAnXHVEODNEXHVERDM0IEhvcnMgbGlnbmUnLFxuICAgIG9rOiAnXHVEODNEXHVERkUyIE9LJyxcbiAgICBlcnJvcjogJ1x1RDgzRFx1REQzNCBFcnJldXInLFxuICAgIHVua25vd246ICctJyxcbiAgICBsb2dXaW5kb3c6ICdMb2dzJyxcbiAgICBsb2dXaW5kb3dUaXRsZTogJ0xvZ3MgLSB7Ym90TmFtZX0nLFxuICAgIGRvd25sb2FkTG9nczogJ1RcdTAwRTlsXHUwMEU5Y2hhcmdlciBMb2dzJyxcbiAgICBjbGVhckxvZ3M6ICdFZmZhY2VyIExvZ3MnLFxuICAgIGNsb3NlTG9nczogJ0Zlcm1lcidcbiAgfSxcblxuICAvLyBJbWFnZSBNb2R1bGVcbiAgaW1hZ2U6IHtcbiAgICB0aXRsZTogXCJXUGxhY2UgQXV0by1JbWFnZVwiLFxuICAgIGluaXRCb3Q6IFwiSW5pdGlhbGlzZXIgQXV0by1CT1RcIixcbiAgICB1cGxvYWRJbWFnZTogXCJUXHUwMEU5bFx1MDBFOWNoYXJnZXIgSW1hZ2VcIixcbiAgICByZXNpemVJbWFnZTogXCJSZWRpbWVuc2lvbm5lciBJbWFnZVwiLFxuICAgIHNlbGVjdFBvc2l0aW9uOiBcIlNcdTAwRTlsZWN0aW9ubmVyIFBvc2l0aW9uXCIsXG4gICAgc3RhcnRQYWludGluZzogXCJDb21tZW5jZXIgUGVpbnR1cmVcIixcbiAgICBzdG9wUGFpbnRpbmc6IFwiQXJyXHUwMEVBdGVyIFBlaW50dXJlXCIsXG4gICAgc2F2ZVByb2dyZXNzOiBcIlNhdXZlZ2FyZGVyIFByb2dyXHUwMEU4c1wiLFxuICAgIGxvYWRQcm9ncmVzczogXCJDaGFyZ2VyIFByb2dyXHUwMEU4c1wiLFxuICAgIGNoZWNraW5nQ29sb3JzOiBcIlx1RDgzRFx1REQwRCBWXHUwMEU5cmlmaWNhdGlvbiBkZXMgY291bGV1cnMgZGlzcG9uaWJsZXMuLi5cIixcbiAgICBub0NvbG9yc0ZvdW5kOiBcIlx1Mjc0QyBPdXZyZXogbGEgcGFsZXR0ZSBkZSBjb3VsZXVycyBzdXIgbGUgc2l0ZSBldCByXHUwMEU5ZXNzYXlleiFcIixcbiAgICBjb2xvcnNGb3VuZDogXCJcdTI3MDUge2NvdW50fSBjb3VsZXVycyBkaXNwb25pYmxlcyB0cm91dlx1MDBFOWVzXCIsXG4gICAgbG9hZGluZ0ltYWdlOiBcIlx1RDgzRFx1RERCQ1x1RkUwRiBDaGFyZ2VtZW50IGRlIGwnaW1hZ2UuLi5cIixcbiAgICBpbWFnZUxvYWRlZDogXCJcdTI3MDUgSW1hZ2UgY2hhcmdcdTAwRTllIGF2ZWMge2NvdW50fSBwaXhlbHMgdmFsaWRlc1wiLFxuICAgIGltYWdlRXJyb3I6IFwiXHUyNzRDIEVycmV1ciBsb3JzIGR1IGNoYXJnZW1lbnQgZGUgbCdpbWFnZVwiLFxuICAgIHNlbGVjdFBvc2l0aW9uQWxlcnQ6IFwiUGVpZ25leiBsZSBwcmVtaWVyIHBpeGVsIFx1MDBFMCBsJ2VtcGxhY2VtZW50IG9cdTAwRjkgdm91cyB2b3VsZXogcXVlIGwnYXJ0IGNvbW1lbmNlIVwiLFxuICAgIHdhaXRpbmdQb3NpdGlvbjogXCJcdUQ4M0RcdURDNDYgRW4gYXR0ZW50ZSBxdWUgdm91cyBwZWlnbmlleiBsZSBwaXhlbCBkZSByXHUwMEU5Zlx1MDBFOXJlbmNlLi4uXCIsXG4gICAgcG9zaXRpb25TZXQ6IFwiXHUyNzA1IFBvc2l0aW9uIGRcdTAwRTlmaW5pZSBhdmVjIHN1Y2NcdTAwRThzIVwiLFxuICAgIHBvc2l0aW9uVGltZW91dDogXCJcdTI3NEMgRFx1MDBFOWxhaSBkXHUwMEU5cGFzc1x1MDBFOSBwb3VyIGxhIHNcdTAwRTlsZWN0aW9uIGRlIHBvc2l0aW9uXCIsXG4gICAgcG9zaXRpb25EZXRlY3RlZDogXCJcdUQ4M0NcdURGQUYgUG9zaXRpb24gZFx1MDBFOXRlY3RcdTAwRTllLCB0cmFpdGVtZW50Li4uXCIsXG4gICAgcG9zaXRpb25FcnJvcjogXCJcdTI3NEMgRXJyZXVyIGRcdTAwRTl0ZWN0YW50IGxhIHBvc2l0aW9uLCBlc3NheWV6IFx1MDBFMCBub3V2ZWF1XCIsXG4gICAgc3RhcnRQYWludGluZ01zZzogXCJcdUQ4M0NcdURGQTggRFx1MDBFOWJ1dCBkZSBsYSBwZWludHVyZS4uLlwiLFxuICAgIHBhaW50aW5nUHJvZ3Jlc3M6IFwiXHVEODNFXHVEREYxIFByb2dyXHUwMEU4czoge3BhaW50ZWR9L3t0b3RhbH0gcGl4ZWxzLi4uXCIsXG4gICAgbm9DaGFyZ2VzOiBcIlx1MjMxQiBBdWN1bmUgY2hhcmdlLiBBdHRlbmRyZSB7dGltZX0uLi5cIixcbiAgICBwYWludGluZ1N0b3BwZWQ6IFwiXHUyM0Y5XHVGRTBGIFBlaW50dXJlIGFyclx1MDBFQXRcdTAwRTllIHBhciBsJ3V0aWxpc2F0ZXVyXCIsXG4gICAgcGFpbnRpbmdDb21wbGV0ZTogXCJcdTI3MDUgUGVpbnR1cmUgdGVybWluXHUwMEU5ZSEge2NvdW50fSBwaXhlbHMgcGVpbnRzLlwiLFxuICAgIHBhaW50aW5nRXJyb3I6IFwiXHUyNzRDIEVycmV1ciBwZW5kYW50IGxhIHBlaW50dXJlXCIsXG4gICAgbWlzc2luZ1JlcXVpcmVtZW50czogXCJcdTI3NEMgQ2hhcmdleiB1bmUgaW1hZ2UgZXQgc1x1MDBFOWxlY3Rpb25uZXogdW5lIHBvc2l0aW9uIGQnYWJvcmRcIixcbiAgICBwcm9ncmVzczogXCJQcm9nclx1MDBFOHNcIixcbiAgICB1c2VyTmFtZTogXCJVc2FnZXJcIixcbiAgICBwaXhlbHM6IFwiUGl4ZWxzXCIsXG4gICAgY2hhcmdlczogXCJDaGFyZ2VzXCIsXG4gICAgZXN0aW1hdGVkVGltZTogXCJUZW1wcyBlc3RpbVx1MDBFOVwiLFxuICAgIGluaXRNZXNzYWdlOiBcIkNsaXF1ZXogc3VyICdJbml0aWFsaXNlciBBdXRvLUJPVCcgcG91ciBjb21tZW5jZXJcIixcbiAgICB3YWl0aW5nSW5pdDogXCJFbiBhdHRlbnRlIGQnaW5pdGlhbGlzYXRpb24uLi5cIixcbiAgICByZXNpemVTdWNjZXNzOiBcIlx1MjcwNSBJbWFnZSByZWRpbWVuc2lvbm5cdTAwRTllIFx1MDBFMCB7d2lkdGh9eHtoZWlnaHR9XCIsXG4gICAgcGFpbnRpbmdQYXVzZWQ6IFwiXHUyM0Y4XHVGRTBGIFBlaW50dXJlIG1pc2UgZW4gcGF1c2UgXHUwMEUwIGxhIHBvc2l0aW9uIFg6IHt4fSwgWToge3l9XCIsXG4gICAgcGl4ZWxzUGVyQmF0Y2g6IFwiUGl4ZWxzIHBhciBsb3RcIixcbiAgICBiYXRjaFNpemU6IFwiVGFpbGxlIGR1IGxvdFwiLFxuICAgIG5leHRCYXRjaFRpbWU6IFwiUHJvY2hhaW4gbG90IGRhbnNcIixcbiAgICB1c2VBbGxDaGFyZ2VzOiBcIlV0aWxpc2VyIHRvdXRlcyBsZXMgY2hhcmdlcyBkaXNwb25pYmxlc1wiLFxuICAgIHNob3dPdmVybGF5OiBcIkFmZmljaGVyIGwnb3ZlcmxheVwiLFxuICAgIG1heENoYXJnZXM6IFwiQ2hhcmdlcyBtYXggcGFyIGxvdFwiLFxuICAgIHdhaXRpbmdGb3JDaGFyZ2VzOiBcIlx1MjNGMyBFbiBhdHRlbnRlIGRlIGNoYXJnZXM6IHtjdXJyZW50fS97bmVlZGVkfVwiLFxuICAgIHRpbWVSZW1haW5pbmc6IFwiVGVtcHMgcmVzdGFudFwiLFxuICAgIGNvb2xkb3duV2FpdGluZzogXCJcdTIzRjMgQXR0ZW5kcmUge3RpbWV9IHBvdXIgY29udGludWVyLi4uXCIsXG4gICAgcHJvZ3Jlc3NTYXZlZDogXCJcdTI3MDUgUHJvZ3JcdTAwRThzIHNhdXZlZ2FyZFx1MDBFOSBzb3VzIHtmaWxlbmFtZX1cIixcbiAgICBwcm9ncmVzc0xvYWRlZDogXCJcdTI3MDUgUHJvZ3JcdTAwRThzIGNoYXJnXHUwMEU5OiB7cGFpbnRlZH0ve3RvdGFsfSBwaXhlbHMgcGVpbnRzXCIsXG4gICAgcHJvZ3Jlc3NMb2FkRXJyb3I6IFwiXHUyNzRDIEVycmV1ciBsb3JzIGR1IGNoYXJnZW1lbnQgZHUgcHJvZ3JcdTAwRThzOiB7ZXJyb3J9XCIsXG4gXG4gICAgIHByb2dyZXNzU2F2ZUVycm9yOiBcIlx1Mjc0QyBFcnJldXIgbG9ycyBkZSBsYSBzYXV2ZWdhcmRlIGR1IHByb2dyXHUwMEU4czoge2Vycm9yfVwiLFxuXG4gICAgY29uZmlybVNhdmVQcm9ncmVzczogXCJWb3VsZXotdm91cyBzYXV2ZWdhcmRlciBsZSBwcm9nclx1MDBFOHMgYWN0dWVsIGF2YW50IGQnYXJyXHUwMEVBdGVyP1wiLFxuICAgIHNhdmVQcm9ncmVzc1RpdGxlOiBcIlNhdXZlZ2FyZGVyIFByb2dyXHUwMEU4c1wiLFxuICAgIGRpc2NhcmRQcm9ncmVzczogXCJBYmFuZG9ubmVyXCIsXG4gICAgY2FuY2VsOiBcIkFubnVsZXJcIixcbiAgICBtaW5pbWl6ZTogXCJNaW5pbWlzZXJcIixcbiAgICB3aWR0aDogXCJMYXJnZXVyXCIsXG4gICAgaGVpZ2h0OiBcIkhhdXRldXJcIiwgXG4gICAga2VlcEFzcGVjdDogXCJHYXJkZXIgbGVzIHByb3BvcnRpb25zXCIsXG4gICAgYXBwbHk6IFwiQXBwbGlxdWVyXCIsXG4gIG92ZXJsYXlPbjogXCJPdmVybGF5IDogT05cIixcbiAgb3ZlcmxheU9mZjogXCJPdmVybGF5IDogT0ZGXCIsXG4gICAgcGFzc0NvbXBsZXRlZDogXCJcdTI3MDUgUGFzc2FnZSB0ZXJtaW5cdTAwRTk6IHtwYWludGVkfSBwaXhlbHMgcGVpbnRzIHwgUHJvZ3JcdTAwRThzOiB7cGVyY2VudH0lICh7Y3VycmVudH0ve3RvdGFsfSlcIixcbiAgICB3YWl0aW5nQ2hhcmdlc1JlZ2VuOiBcIlx1MjNGMyBBdHRlbnRlIGRlIHJcdTAwRTlnXHUwMEU5blx1MDBFOXJhdGlvbiBkZXMgY2hhcmdlczoge2N1cnJlbnR9L3tuZWVkZWR9IC0gVGVtcHM6IHt0aW1lfVwiLFxuICAgIHdhaXRpbmdDaGFyZ2VzQ291bnRkb3duOiBcIlx1MjNGMyBBdHRlbnRlIGRlcyBjaGFyZ2VzOiB7Y3VycmVudH0ve25lZWRlZH0gLSBSZXN0YW50OiB7dGltZX1cIixcbiAgICBhdXRvSW5pdGlhbGl6aW5nOiBcIlx1RDgzRVx1REQxNiBJbml0aWFsaXNhdGlvbiBhdXRvbWF0aXF1ZS4uLlwiLFxuICAgIGF1dG9Jbml0U3VjY2VzczogXCJcdTI3MDUgQm90IGRcdTAwRTltYXJyXHUwMEU5IGF1dG9tYXRpcXVlbWVudFwiLFxuICAgIGF1dG9Jbml0RmFpbGVkOiBcIlx1MjZBMFx1RkUwRiBJbXBvc3NpYmxlIGRlIGRcdTAwRTltYXJyZXIgYXV0b21hdGlxdWVtZW50LiBVdGlsaXNleiBsZSBib3V0b24gbWFudWVsLlwiLFxuICAgIHBhbGV0dGVEZXRlY3RlZDogXCJcdUQ4M0NcdURGQTggUGFsZXR0ZSBkZSBjb3VsZXVycyBkXHUwMEU5dGVjdFx1MDBFOWVcIixcbiAgICBwYWxldHRlTm90Rm91bmQ6IFwiXHVEODNEXHVERDBEIFJlY2hlcmNoZSBkZSBsYSBwYWxldHRlIGRlIGNvdWxldXJzLi4uXCIsXG4gICAgY2xpY2tpbmdQYWludEJ1dHRvbjogXCJcdUQ4M0RcdURDNDYgQ2xpYyBzdXIgbGUgYm91dG9uIFBhaW50Li4uXCIsXG4gICAgcGFpbnRCdXR0b25Ob3RGb3VuZDogXCJcdTI3NEMgQm91dG9uIFBhaW50IGludHJvdXZhYmxlXCIsXG4gICAgbWFudWFsSW5pdFJlcXVpcmVkOiBcIlx1RDgzRFx1REQyNyBJbml0aWFsaXNhdGlvbiBtYW51ZWxsZSByZXF1aXNlXCIsXG4gICAgcmV0cnlBdHRlbXB0OiBcIlx1RDgzRFx1REQwNCBUZW50YXRpdmUge2F0dGVtcHR9L3ttYXhBdHRlbXB0c30gZGFucyB7ZGVsYXl9cy4uLlwiLFxuICAgIHJldHJ5RXJyb3I6IFwiXHVEODNEXHVEQ0E1IEVycmV1ciBkYW5zIHRlbnRhdGl2ZSB7YXR0ZW1wdH0ve21heEF0dGVtcHRzfSwgbm91dmVsIGVzc2FpIGRhbnMge2RlbGF5fXMuLi5cIixcbiAgICByZXRyeUZhaWxlZDogXCJcdTI3NEMgXHUwMEM5Y2hlYyBhcHJcdTAwRThzIHttYXhBdHRlbXB0c30gdGVudGF0aXZlcy4gQ29udGludWFudCBhdmVjIGxlIGxvdCBzdWl2YW50Li4uXCIsXG4gICAgbmV0d29ya0Vycm9yOiBcIlx1RDgzQ1x1REYxMCBFcnJldXIgclx1MDBFOXNlYXUuIE5vdXZlbCBlc3NhaS4uLlwiLFxuICAgIHNlcnZlckVycm9yOiBcIlx1RDgzRFx1REQyNSBFcnJldXIgc2VydmV1ci4gTm91dmVsIGVzc2FpLi4uXCIsXG4gICAgdGltZW91dEVycm9yOiBcIlx1MjNGMCBEXHUwMEU5bGFpIGRcdTIwMTlhdHRlbnRlIGR1IHNlcnZldXIsIG5vdXZlbGxlIHRlbnRhdGl2ZS4uLlwiLFxuICAgIC8vIHYyLjAgLSBQcm90ZWN0aW9uIGV0IG1vdGlmc1xuICAgIHByb3RlY3Rpb25FbmFibGVkOiBcIlByb3RlY3Rpb24gYWN0aXZcdTAwRTllXCIsXG4gICAgcHJvdGVjdGlvbkRpc2FibGVkOiBcIlByb3RlY3Rpb24gZFx1MDBFOXNhY3Rpdlx1MDBFOWVcIixcbiAgICBwYWludFBhdHRlcm46IFwiTW90aWYgZGUgcGVpbnR1cmVcIixcbiAgICBwYXR0ZXJuTGluZWFyU3RhcnQ6IFwiTGluXHUwMEU5YWlyZSAoRFx1MDBFOWJ1dClcIixcbiAgICBwYXR0ZXJuTGluZWFyRW5kOiBcIkxpblx1MDBFOWFpcmUgKEZpbilcIixcbiAgICBwYXR0ZXJuUmFuZG9tOiBcIkFsXHUwMEU5YXRvaXJlXCIsXG4gICAgcGF0dGVybkNlbnRlck91dDogXCJDZW50cmUgdmVycyBsXHUyMDE5ZXh0XHUwMEU5cmlldXJcIixcbiAgICBwYXR0ZXJuQ29ybmVyc0ZpcnN0OiBcIkNvaW5zIGRcdTIwMTlhYm9yZFwiLFxuICAgIHBhdHRlcm5TcGlyYWw6IFwiU3BpcmFsZVwiLFxuICAgIHNvbGlkOiBcIlBsZWluXCIsXG4gICAgc3RyaXBlczogXCJSYXl1cmVzXCIsXG4gICAgY2hlY2tlcmJvYXJkOiBcIkRhbWllclwiLFxuICAgIGdyYWRpZW50OiBcIkRcdTAwRTlncmFkXHUwMEU5XCIsXG4gICAgZG90czogXCJQb2ludHNcIixcbiAgICB3YXZlczogXCJWYWd1ZXNcIixcbiAgICBzcGlyYWw6IFwiU3BpcmFsZVwiLFxuICAgIG1vc2FpYzogXCJNb3NhXHUwMEVGcXVlXCIsXG4gICAgYnJpY2tzOiBcIkJyaXF1ZXNcIixcbiAgICB6aWd6YWc6IFwiWmlnemFnXCIsXG4gICAgcHJvdGVjdGluZ0RyYXdpbmc6IFwiUHJvdGVjdGlvbiBkdSBkZXNzaW4uLi5cIixcbiAgICBjaGFuZ2VzRGV0ZWN0ZWQ6IFwiXHVEODNEXHVERUE4IHtjb3VudH0gY2hhbmdlbWVudHMgZFx1MDBFOXRlY3RcdTAwRTlzIGRhbnMgbGUgZGVzc2luXCIsXG4gICAgcmVwYWlyaW5nOiBcIlx1RDgzRFx1REQyNyBSXHUwMEU5cGFyYXRpb24gZGUge2NvdW50fSBwaXhlbHMgbW9kaWZpXHUwMEU5cy4uLlwiLFxuICAgIHJlcGFpckNvbXBsZXRlZDogXCJcdTI3MDUgUlx1MDBFOXBhcmF0aW9uIHRlcm1pblx1MDBFOWUgOiB7Y291bnR9IHBpeGVsc1wiLFxuICAgIG5vQ2hhcmdlc0ZvclJlcGFpcjogXCJcdTI2QTEgUGFzIGRlIGZyYWlzIHBvdXIgbGEgclx1MDBFOXBhcmF0aW9uLCBlbiBhdHRlbnRlLi4uXCIsXG4gICAgcHJvdGVjdGlvblByaW9yaXR5OiBcIlx1RDgzRFx1REVFMVx1RkUwRiBQcmlvcml0XHUwMEU5IFx1MDBFMCBsYSBwcm90ZWN0aW9uIGFjdGl2XHUwMEU5ZVwiLFxuICAgIHBhdHRlcm5BcHBsaWVkOiBcIk1vdGlmIGFwcGxpcXVcdTAwRTlcIixcbiAgICBjdXN0b21QYXR0ZXJuOiBcIk1vdGlmIHBlcnNvbm5hbGlzXHUwMEU5XCIsXG4gICAgbG9nV2luZG93OiBcIkxvZ3NcIixcbiAgICBsb2dXaW5kb3dUaXRsZTogXCJMb2dzIC0ge2JvdE5hbWV9XCIsXG4gICAgZG93bmxvYWRMb2dzOiBcIlRcdTAwRTlsXHUwMEU5Y2hhcmdlciBMb2dzXCIsXG4gICAgY2xlYXJMb2dzOiBcIkVmZmFjZXIgTG9nc1wiLFxuICAgIGNsb3NlTG9nczogXCJGZXJtZXJcIlxuICB9LFxuXG4gIC8vIEZhcm0gTW9kdWxlICh0byBiZSBpbXBsZW1lbnRlZClcbiAgZmFybToge1xuICAgIHRpdGxlOiBcIldQbGFjZSBGYXJtIEJvdFwiLFxuICAgIHN0YXJ0OiBcIkRcdTAwRTltYXJyZXJcIixcbiAgICBzdG9wOiBcIkFyclx1MDBFQXRlclwiLFxuICAgIHN0b3BwZWQ6IFwiQm90IGFyclx1MDBFQXRcdTAwRTlcIixcbiAgICBjYWxpYnJhdGU6IFwiQ2FsaWJyZXJcIixcbiAgICBwYWludE9uY2U6IFwiVW5lIGZvaXNcIixcbiAgICBjaGVja2luZ1N0YXR1czogXCJWXHUwMEU5cmlmaWNhdGlvbiBkdSBzdGF0dXQuLi5cIixcbiAgICBjb25maWd1cmF0aW9uOiBcIkNvbmZpZ3VyYXRpb25cIixcbiAgICBkZWxheTogXCJEXHUwMEU5bGFpIChtcylcIixcbiAgICBwaXhlbHNQZXJCYXRjaDogXCJQaXhlbHMvbG90XCIsXG4gICAgbWluQ2hhcmdlczogXCJDaGFyZ2VzIG1pblwiLFxuICAgIGNvbG9yTW9kZTogXCJNb2RlIGNvdWxldXJcIixcbiAgICByYW5kb206IFwiQWxcdTAwRTlhdG9pcmVcIixcbiAgICBmaXhlZDogXCJGaXhlXCIsXG4gICAgcmFuZ2U6IFwiUGxhZ2VcIixcbiAgICBmaXhlZENvbG9yOiBcIkNvdWxldXIgZml4ZVwiLFxuICAgIGFkdmFuY2VkOiBcIkF2YW5jXHUwMEU5XCIsXG4gICAgdGlsZVg6IFwiVHVpbGUgWFwiLFxuICAgIHRpbGVZOiBcIlR1aWxlIFlcIixcbiAgICBjdXN0b21QYWxldHRlOiBcIlBhbGV0dGUgcGVyc29ubmFsaXNcdTAwRTllXCIsXG4gICAgcGFsZXR0ZUV4YW1wbGU6IFwiZXg6ICNGRjAwMDAsIzAwRkYwMCwjMDAwMEZGXCIsXG4gICAgY2FwdHVyZTogXCJDYXB0dXJlclwiLFxuICAgIHBhaW50ZWQ6IFwiUGVpbnRzXCIsXG4gICAgY2hhcmdlczogXCJDaGFyZ2VzXCIsXG4gICAgcmV0cmllczogXCJcdTAwQzljaGVjc1wiLFxuICAgIHRpbGU6IFwiVHVpbGVcIixcbiAgICBjb25maWdTYXZlZDogXCJDb25maWd1cmF0aW9uIHNhdXZlZ2FyZFx1MDBFOWVcIixcbiAgICBjb25maWdMb2FkZWQ6IFwiQ29uZmlndXJhdGlvbiBjaGFyZ1x1MDBFOWVcIixcbiAgICBjb25maWdSZXNldDogXCJDb25maWd1cmF0aW9uIHJcdTAwRTlpbml0aWFsaXNcdTAwRTllXCIsXG4gICAgY2FwdHVyZUluc3RydWN0aW9uczogXCJQZWluZHJlIHVuIHBpeGVsIG1hbnVlbGxlbWVudCBwb3VyIGNhcHR1cmVyIGxlcyBjb29yZG9ublx1MDBFOWVzLi4uXCIsXG4gICAgYmFja2VuZE9ubGluZTogXCJCYWNrZW5kIEVuIGxpZ25lXCIsXG4gICAgYmFja2VuZE9mZmxpbmU6IFwiQmFja2VuZCBIb3JzIGxpZ25lXCIsXG4gICAgc3RhcnRpbmdCb3Q6IFwiRFx1MDBFOW1hcnJhZ2UgZHUgYm90Li4uXCIsXG4gICAgc3RvcHBpbmdCb3Q6IFwiQXJyXHUwMEVBdCBkdSBib3QuLi5cIixcbiAgICBjYWxpYnJhdGluZzogXCJDYWxpYnJhZ2UuLi5cIixcbiAgICBhbHJlYWR5UnVubmluZzogXCJBdXRvLUZhcm0gZXN0IGRcdTAwRTlqXHUwMEUwIGVuIGNvdXJzIGQnZXhcdTAwRTljdXRpb24uXCIsXG4gICAgaW1hZ2VSdW5uaW5nV2FybmluZzogXCJBdXRvLUltYWdlIGVzdCBlbiBjb3VycyBkJ2V4XHUwMEU5Y3V0aW9uLiBGZXJtZXotbGUgYXZhbnQgZGUgZFx1MDBFOW1hcnJlciBBdXRvLUZhcm0uXCIsXG4gICAgc2VsZWN0UG9zaXRpb246IFwiU1x1MDBFOWxlY3Rpb25uZXIgWm9uZVwiLFxuICAgIHNlbGVjdFBvc2l0aW9uQWxlcnQ6IFwiXHVEODNDXHVERkFGIFBlaWduZXogdW4gcGl4ZWwgZGFucyB1bmUgem9uZSBWSURFIGRlIGxhIGNhcnRlIHBvdXIgZFx1MDBFOWZpbmlyIGxhIHpvbmUgZGUgZmFybWluZ1wiLFxuICAgIHdhaXRpbmdQb3NpdGlvbjogXCJcdUQ4M0RcdURDNDYgRW4gYXR0ZW50ZSBxdWUgdm91cyBwZWlnbmlleiBsZSBwaXhlbCBkZSByXHUwMEU5Zlx1MDBFOXJlbmNlLi4uXCIsXG4gICAgcG9zaXRpb25TZXQ6IFwiXHUyNzA1IFpvbmUgZFx1MDBFOWZpbmllISBSYXlvbjogNTAwcHhcIixcbiAgICBwb3NpdGlvblRpbWVvdXQ6IFwiXHUyNzRDIERcdTAwRTlsYWkgZFx1MDBFOXBhc3NcdTAwRTkgcG91ciBsYSBzXHUwMEU5bGVjdGlvbiBkZSB6b25lXCIsXG4gICAgbWlzc2luZ1Bvc2l0aW9uOiBcIlx1Mjc0QyBTXHUwMEU5bGVjdGlvbm5leiB1bmUgem9uZSBkJ2Fib3JkIGVuIHV0aWxpc2FudCAnU1x1MDBFOWxlY3Rpb25uZXIgWm9uZSdcIixcbiAgICBmYXJtUmFkaXVzOiBcIlJheW9uIGZhcm1cIixcbiAgICBwb3NpdGlvbkluZm86IFwiWm9uZSBhY3R1ZWxsZVwiLFxuICAgIGZhcm1pbmdJblJhZGl1czogXCJcdUQ4M0NcdURGM0UgRmFybWluZyBkYW5zIHVuIHJheW9uIGRlIHtyYWRpdXN9cHggZGVwdWlzICh7eH0se3l9KVwiLFxuICAgIHNlbGVjdEVtcHR5QXJlYTogXCJcdTI2QTBcdUZFMEYgSU1QT1JUQU5UOiBTXHUwMEU5bGVjdGlvbm5leiB1bmUgem9uZSBWSURFIHBvdXIgXHUwMEU5dml0ZXIgbGVzIGNvbmZsaXRzXCIsXG4gICAgbm9Qb3NpdGlvbjogXCJBdWN1bmUgem9uZVwiLFxuICAgIGN1cnJlbnRab25lOiBcIlpvbmU6ICh7eH0se3l9KVwiLFxuICAgIGF1dG9TZWxlY3RQb3NpdGlvbjogXCJcdUQ4M0NcdURGQUYgU1x1MDBFOWxlY3Rpb25uZXogdW5lIHpvbmUgZCdhYm9yZC4gUGVpZ25leiB1biBwaXhlbCBzdXIgbGEgY2FydGUgcG91ciBkXHUwMEU5ZmluaXIgbGEgem9uZSBkZSBmYXJtaW5nXCIsXG4gICAgbG9nV2luZG93OiBcIkxvZ3NcIixcbiAgICBsb2dXaW5kb3dUaXRsZTogXCJMb2dzIC0ge2JvdE5hbWV9XCIsXG4gICAgZG93bmxvYWRMb2dzOiBcIlRcdTAwRTlsXHUwMEU5Y2hhcmdlciBMb2dzXCIsXG4gICAgY2xlYXJMb2dzOiBcIkVmZmFjZXIgTG9nc1wiLFxuICAgIGNsb3NlTG9nczogXCJGZXJtZXJcIlxuICB9LFxuXG4gICAgLy8gQ29tbW9uL1NoYXJlZFxuICBjb21tb246IHtcbiAgICB5ZXM6IFwiT3VpXCIsXG4gICAgbm86IFwiTm9uXCIsXG4gICAgb2s6IFwiT0tcIixcbiAgICBjYW5jZWw6IFwiQW5udWxlclwiLFxuICAgIGNsb3NlOiBcIkZlcm1lclwiLFxuICAgIHNhdmU6IFwiU2F1dmVnYXJkZXJcIixcbiAgICBsb2FkOiBcIkNoYXJnZXJcIixcbiAgICBkZWxldGU6IFwiU3VwcHJpbWVyXCIsXG4gICAgZWRpdDogXCJNb2RpZmllclwiLFxuICAgIHN0YXJ0OiBcIkRcdTAwRTltYXJyZXJcIixcbiAgICBzdG9wOiBcIkFyclx1MDBFQXRlclwiLFxuICAgIHBhdXNlOiBcIlBhdXNlXCIsXG4gICAgcmVzdW1lOiBcIlJlcHJlbmRyZVwiLFxuICAgIHJlc2V0OiBcIlJcdTAwRTlpbml0aWFsaXNlclwiLFxuICAgIHNldHRpbmdzOiBcIlBhcmFtXHUwMEU4dHJlc1wiLFxuICAgIGhlbHA6IFwiQWlkZVwiLFxuICAgIGFib3V0OiBcIlx1MDBDMCBwcm9wb3NcIixcbiAgICBsYW5ndWFnZTogXCJMYW5ndWVcIixcbiAgICBsb2FkaW5nOiBcIkNoYXJnZW1lbnQuLi5cIixcbiAgICBlcnJvcjogXCJFcnJldXJcIixcbiAgICBzdWNjZXNzOiBcIlN1Y2NcdTAwRThzXCIsXG4gICAgd2FybmluZzogXCJBdmVydGlzc2VtZW50XCIsXG4gICAgaW5mbzogXCJJbmZvcm1hdGlvblwiLFxuICAgIGxhbmd1YWdlQ2hhbmdlZDogXCJMYW5ndWUgY2hhbmdcdTAwRTllIGVuIHtsYW5ndWFnZX1cIlxuICB9LFxuXG4gIC8vIEd1YXJkIE1vZHVsZVxuICBndWFyZDoge1xuICAgIHRpdGxlOiBcIldQbGFjZSBBdXRvLUd1YXJkXCIsXG4gICAgaW5pdEJvdDogXCJJbml0aWFsaXNlciBHdWFyZC1CT1RcIixcbiAgICBzZWxlY3RBcmVhOiBcIlNcdTAwRTlsZWN0aW9ubmVyIFpvbmVcIixcbiAgICBjYXB0dXJlQXJlYTogXCJDYXB0dXJlciBab25lXCIsXG4gICAgc3RhcnRQcm90ZWN0aW9uOiBcIkRcdTAwRTltYXJyZXIgUHJvdGVjdGlvblwiLFxuICAgIHN0b3BQcm90ZWN0aW9uOiBcIkFyclx1MDBFQXRlciBQcm90ZWN0aW9uXCIsXG4gICAgdXBwZXJMZWZ0OiBcIkNvaW4gU3VwXHUwMEU5cmlldXIgR2F1Y2hlXCIsXG4gICAgbG93ZXJSaWdodDogXCJDb2luIEluZlx1MDBFOXJpZXVyIERyb2l0XCIsXG4gICAgcHJvdGVjdGVkUGl4ZWxzOiBcIlBpeGVscyBQcm90XHUwMEU5Z1x1MDBFOXNcIixcbiAgICBkZXRlY3RlZENoYW5nZXM6IFwiQ2hhbmdlbWVudHMgRFx1MDBFOXRlY3RcdTAwRTlzXCIsXG4gICAgcmVwYWlyZWRQaXhlbHM6IFwiUGl4ZWxzIFJcdTAwRTlwYXJcdTAwRTlzXCIsXG4gICAgY2hhcmdlczogXCJDaGFyZ2VzXCIsXG4gICAgd2FpdGluZ0luaXQ6IFwiRW4gYXR0ZW50ZSBkJ2luaXRpYWxpc2F0aW9uLi4uXCIsXG4gICAgY2hlY2tpbmdDb2xvcnM6IFwiXHVEODNDXHVERkE4IFZcdTAwRTlyaWZpY2F0aW9uIGRlcyBjb3VsZXVycyBkaXNwb25pYmxlcy4uLlwiLFxuICAgIG5vQ29sb3JzRm91bmQ6IFwiXHUyNzRDIEF1Y3VuZSBjb3VsZXVyIHRyb3V2XHUwMEU5ZS4gT3V2cmV6IGxhIHBhbGV0dGUgZGUgY291bGV1cnMgc3VyIGxlIHNpdGUuXCIsXG4gICAgY29sb3JzRm91bmQ6IFwiXHUyNzA1IHtjb3VudH0gY291bGV1cnMgZGlzcG9uaWJsZXMgdHJvdXZcdTAwRTllc1wiLFxuICAgIGluaXRTdWNjZXNzOiBcIlx1MjcwNSBHdWFyZC1CT1QgaW5pdGlhbGlzXHUwMEU5IGF2ZWMgc3VjY1x1MDBFOHNcIixcbiAgICBpbml0RXJyb3I6IFwiXHUyNzRDIEVycmV1ciBsb3JzIGRlIGwnaW5pdGlhbGlzYXRpb24gZGUgR3VhcmQtQk9UXCIsXG4gICAgaW52YWxpZENvb3JkczogXCJcdTI3NEMgQ29vcmRvbm5cdTAwRTllcyBpbnZhbGlkZXNcIixcbiAgICBpbnZhbGlkQXJlYTogXCJcdTI3NEMgTGEgem9uZSBkb2l0IGF2b2lyIGxlIGNvaW4gc3VwXHUwMEU5cmlldXIgZ2F1Y2hlIGluZlx1MDBFOXJpZXVyIGF1IGNvaW4gaW5mXHUwMEU5cmlldXIgZHJvaXRcIixcbiAgICBhcmVhVG9vTGFyZ2U6IFwiXHUyNzRDIFpvbmUgdHJvcCBncmFuZGU6IHtzaXplfSBwaXhlbHMgKG1heGltdW06IHttYXh9KVwiLFxuICAgIGNhcHR1cmluZ0FyZWE6IFwiXHVEODNEXHVEQ0Y4IENhcHR1cmUgZGUgbGEgem9uZSBkZSBwcm90ZWN0aW9uLi4uXCIsXG4gICAgYXJlYUNhcHR1cmVkOiBcIlx1MjcwNSBab25lIGNhcHR1clx1MDBFOWU6IHtjb3VudH0gcGl4ZWxzIHNvdXMgcHJvdGVjdGlvblwiLFxuICAgIGNhcHR1cmVFcnJvcjogXCJcdTI3NEMgRXJyZXVyIGxvcnMgZGUgbGEgY2FwdHVyZSBkZSB6b25lOiB7ZXJyb3J9XCIsXG4gICAgY2FwdHVyZUZpcnN0OiBcIlx1Mjc0QyBDYXB0dXJleiBkJ2Fib3JkIHVuZSB6b25lIGRlIHByb3RlY3Rpb25cIixcbiAgICBwcm90ZWN0aW9uU3RhcnRlZDogXCJcdUQ4M0RcdURFRTFcdUZFMEYgUHJvdGVjdGlvbiBkXHUwMEU5bWFyclx1MDBFOWUgLSBzdXJ2ZWlsbGFuY2UgZGUgbGEgem9uZVwiLFxuICAgIHByb3RlY3Rpb25TdG9wcGVkOiBcIlx1MjNGOVx1RkUwRiBQcm90ZWN0aW9uIGFyclx1MDBFQXRcdTAwRTllXCIsXG4gICAgbm9DaGFuZ2VzOiBcIlx1MjcwNSBab25lIHByb3RcdTAwRTlnXHUwMEU5ZSAtIGF1Y3VuIGNoYW5nZW1lbnQgZFx1MDBFOXRlY3RcdTAwRTlcIixcbiAgICBjaGFuZ2VzRGV0ZWN0ZWQ6IFwiXHVEODNEXHVERUE4IHtjb3VudH0gY2hhbmdlbWVudHMgZFx1MDBFOXRlY3RcdTAwRTlzIGRhbnMgbGEgem9uZSBwcm90XHUwMEU5Z1x1MDBFOWVcIixcbiAgICByZXBhaXJpbmc6IFwiXHVEODNEXHVERUUwXHVGRTBGIFJcdTAwRTlwYXJhdGlvbiBkZSB7Y291bnR9IHBpeGVscyBhbHRcdTAwRTlyXHUwMEU5cy4uLlwiLFxuICAgIHJlcGFpcmVkU3VjY2VzczogXCJcdTI3MDUge2NvdW50fSBwaXhlbHMgclx1MDBFOXBhclx1MDBFOXMgYXZlYyBzdWNjXHUwMEU4c1wiLFxuICAgIHJlcGFpckVycm9yOiBcIlx1Mjc0QyBFcnJldXIgbG9ycyBkZSBsYSByXHUwMEU5cGFyYXRpb24gZGVzIHBpeGVsczoge2Vycm9yfVwiLFxuICAgIG5vQ2hhcmdlczogXCJcdTI2QTBcdUZFMEYgQ2hhcmdlcyBpbnN1ZmZpc2FudGVzIHBvdXIgclx1MDBFOXBhcmVyIGxlcyBjaGFuZ2VtZW50c1wiLFxuICAgIGNoZWNraW5nQ2hhbmdlczogXCJcdUQ4M0RcdUREMEQgVlx1MDBFOXJpZmljYXRpb24gZGVzIGNoYW5nZW1lbnRzIGRhbnMgbGEgem9uZSBwcm90XHUwMEU5Z1x1MDBFOWUuLi5cIixcbiAgICBlcnJvckNoZWNraW5nOiBcIlx1Mjc0QyBFcnJldXIgbG9ycyBkZSBsYSB2XHUwMEU5cmlmaWNhdGlvbiBkZXMgY2hhbmdlbWVudHM6IHtlcnJvcn1cIixcbiAgICBndWFyZEFjdGl2ZTogXCJcdUQ4M0RcdURFRTFcdUZFMEYgR2FyZGllbiBhY3RpZiAtIHpvbmUgc291cyBwcm90ZWN0aW9uXCIsXG4gICAgbGFzdENoZWNrOiBcIkRlcm5pXHUwMEU4cmUgdlx1MDBFOXJpZmljYXRpb246IHt0aW1lfVwiLFxuICAgIG5leHRDaGVjazogXCJQcm9jaGFpbmUgdlx1MDBFOXJpZmljYXRpb24gZGFuczoge3RpbWV9c1wiLFxuICAgIGF1dG9Jbml0aWFsaXppbmc6IFwiXHVEODNFXHVERDE2IEluaXRpYWxpc2F0aW9uIGF1dG9tYXRpcXVlLi4uXCIsXG4gICAgYXV0b0luaXRTdWNjZXNzOiBcIlx1MjcwNSBHdWFyZC1CT1QgZFx1MDBFOW1hcnJcdTAwRTkgYXV0b21hdGlxdWVtZW50XCIsXG4gICAgYXV0b0luaXRGYWlsZWQ6IFwiXHUyNkEwXHVGRTBGIEltcG9zc2libGUgZGUgZFx1MDBFOW1hcnJlciBhdXRvbWF0aXF1ZW1lbnQuIFV0aWxpc2V6IGxlIGJvdXRvbiBtYW51ZWwuXCIsXG4gICAgbWFudWFsSW5pdFJlcXVpcmVkOiBcIlx1RDgzRFx1REQyNyBJbml0aWFsaXNhdGlvbiBtYW51ZWxsZSByZXF1aXNlXCIsXG4gICAgcGFsZXR0ZURldGVjdGVkOiBcIlx1RDgzQ1x1REZBOCBQYWxldHRlIGRlIGNvdWxldXJzIGRcdTAwRTl0ZWN0XHUwMEU5ZVwiLFxuICAgIHBhbGV0dGVOb3RGb3VuZDogXCJcdUQ4M0RcdUREMEQgUmVjaGVyY2hlIGRlIGxhIHBhbGV0dGUgZGUgY291bGV1cnMuLi5cIixcbiAgICBjbGlja2luZ1BhaW50QnV0dG9uOiBcIlx1RDgzRFx1REM0NiBDbGljIHN1ciBsZSBib3V0b24gUGFpbnQuLi5cIixcbiAgICBwYWludEJ1dHRvbk5vdEZvdW5kOiBcIlx1Mjc0QyBCb3V0b24gUGFpbnQgaW50cm91dmFibGVcIixcbiAgICBzZWxlY3RVcHBlckxlZnQ6IFwiXHVEODNDXHVERkFGIFBlaWduZXogdW4gcGl4ZWwgYXUgY29pbiBTVVBcdTAwQzlSSUVVUiBHQVVDSEUgZGUgbGEgem9uZSBcdTAwRTAgcHJvdFx1MDBFOWdlclwiLFxuICAgIHNlbGVjdExvd2VyUmlnaHQ6IFwiXHVEODNDXHVERkFGIE1haW50ZW5hbnQgcGVpZ25leiB1biBwaXhlbCBhdSBjb2luIElORlx1MDBDOVJJRVVSIERST0lUIGRlIGxhIHpvbmVcIixcbiAgICB3YWl0aW5nVXBwZXJMZWZ0OiBcIlx1RDgzRFx1REM0NiBFbiBhdHRlbnRlIGRlIGxhIHNcdTAwRTlsZWN0aW9uIGR1IGNvaW4gc3VwXHUwMEU5cmlldXIgZ2F1Y2hlLi4uXCIsXG4gICAgd2FpdGluZ0xvd2VyUmlnaHQ6IFwiXHVEODNEXHVEQzQ2IEVuIGF0dGVudGUgZGUgbGEgc1x1MDBFOWxlY3Rpb24gZHUgY29pbiBpbmZcdTAwRTlyaWV1ciBkcm9pdC4uLlwiLFxuICAgIHVwcGVyTGVmdENhcHR1cmVkOiBcIlx1MjcwNSBDb2luIHN1cFx1MDBFOXJpZXVyIGdhdWNoZSBjYXB0dXJcdTAwRTk6ICh7eH0sIHt5fSlcIixcbiAgICBsb3dlclJpZ2h0Q2FwdHVyZWQ6IFwiXHUyNzA1IENvaW4gaW5mXHUwMEU5cmlldXIgZHJvaXQgY2FwdHVyXHUwMEU5OiAoe3h9LCB7eX0pXCIsXG4gICAgc2VsZWN0aW9uVGltZW91dDogXCJcdTI3NEMgRFx1MDBFOWxhaSBkZSBzXHUwMEU5bGVjdGlvbiBkXHUwMEU5cGFzc1x1MDBFOVwiLFxuICAgIHNlbGVjdGlvbkVycm9yOiBcIlx1Mjc0QyBFcnJldXIgZGUgc1x1MDBFOWxlY3Rpb24sIHZldWlsbGV6IHJcdTAwRTllc3NheWVyXCIsXG4gICAgbG9nV2luZG93OiBcIkxvZ3NcIixcbiAgICBsb2dXaW5kb3dUaXRsZTogXCJMb2dzIC0ge2JvdE5hbWV9XCIsXG4gICAgZG93bmxvYWRMb2dzOiBcIlRcdTAwRTlsXHUwMEU5Y2hhcmdlciBMb2dzXCIsXG4gICAgY2xlYXJMb2dzOiBcIkVmZmFjZXIgTG9nc1wiLFxuICAgIGNsb3NlTG9nczogXCJGZXJtZXJcIixcbiAgICAvLyBBbmFseXNpcyBXaW5kb3dcbiAgICBhbmFseXNpc1RpdGxlOiBcIkFuYWx5c2UgZGVzIERpZmZcdTAwRTlyZW5jZXMgLSBKU09OIHZzIENhbnZhcyBBY3R1ZWxcIixcbiAgICBjb3JyZWN0UGl4ZWxzOiBcIlBpeGVscyBDb3JyZWN0c1wiLFxuICAgIGluY29ycmVjdFBpeGVsczogXCJQaXhlbHMgSW5jb3JyZWN0c1wiLFxuICAgIG1pc3NpbmdQaXhlbHM6IFwiUGl4ZWxzIE1hbnF1YW50c1wiLFxuICAgIHNob3dDb3JyZWN0OiBcIkFmZmljaGVyIENvcnJlY3RzXCIsXG4gICAgc2hvd0luY29ycmVjdDogXCJBZmZpY2hlciBJbmNvcnJlY3RzXCIsXG4gICAgc2hvd01pc3Npbmc6IFwiQWZmaWNoZXIgTWFucXVhbnRzXCIsXG4gICAgYXV0b1JlZnJlc2g6IFwiQWN0dWFsaXNhdGlvbiBhdXRvbWF0aXF1ZVwiLFxuICAgIHpvb21BZGp1c3RlZDogXCJab29tIGFqdXN0XHUwMEU5IGF1dG9tYXRpcXVlbWVudCBcdTAwRTBcIixcbiAgICBhdXRvUmVmcmVzaEVuYWJsZWQ6IFwiQWN0dWFsaXNhdGlvbiBhdXRvbWF0aXF1ZSBhY3Rpdlx1MDBFOWUgdG91dGVzIGxlc1wiLFxuICAgIGF1dG9SZWZyZXNoRGlzYWJsZWQ6IFwiQWN0dWFsaXNhdGlvbiBhdXRvbWF0aXF1ZSBkXHUwMEU5c2FjdGl2XHUwMEU5ZVwiLFxuICAgIGF1dG9SZWZyZXNoSW50ZXJ2YWxVcGRhdGVkOiBcIkludGVydmFsbGUgZCdhY3R1YWxpc2F0aW9uIGF1dG9tYXRpcXVlIG1pcyBcdTAwRTAgam91ciBcdTAwRTBcIixcbiAgICB2aXN1YWxpemF0aW9uVXBkYXRlZDogXCJWaXN1YWxpc2F0aW9uIG1pc2UgXHUwMEUwIGpvdXJcIixcbiAgICAvLyBDb25maWcgV2luZG93XG4gICAgY29uZmlnVGl0bGU6IFwiQ29uZmlndXJhdGlvbiBkdSBHdWFyZFwiLFxuICAgIHByb3RlY3Rpb25QYXR0ZXJuczogXCJNb2RcdTAwRThsZXMgZGUgUHJvdGVjdGlvblwiLFxuICAgIHByZWZlclNwZWNpZmljQ29sb3I6IFwiUHJpb3Jpc2VyIHVuZSBjb3VsZXVyIHNwXHUwMEU5Y2lmaXF1ZVwiLFxuICAgIGV4Y2x1ZGVTcGVjaWZpY0NvbG9yczogXCJOZSBwYXMgclx1MDBFOXBhcmVyIGxlcyBjb3VsZXVycyBzcFx1MDBFOWNpZmlxdWVzXCIsXG4gICAgbG9hZE1hbmFnZW1lbnQ6IFwiR2VzdGlvbiBkZXMgQ2hhcmdlc1wiLFxuICAgIG1pbkxvYWRzVG9XYWl0OiBcIk1pbmltdW0gZGUgY2hhcmdlcyBcdTAwRTAgYXR0ZW5kcmVcIixcbiAgICBwaXhlbHNQZXJCYXRjaDogXCJQaXhlbHMgcGFyIGxvdFwiLFxuICAgIHNwZW5kQWxsUGl4ZWxzT25TdGFydDogXCJEXHUwMEU5cGVuc2VyIHRvdXMgbGVzIHBpeGVscyBhdSBkXHUwMEU5bWFycmFnZVwiLFxuICAgIHdhaXRUaW1lczogXCJUZW1wcyBkJ0F0dGVudGVcIixcbiAgICB1c2VSYW5kb21UaW1lczogXCJVdGlsaXNlciBkZXMgdGVtcHMgYWxcdTAwRTlhdG9pcmVzIGVudHJlIGxlcyBsb3RzXCIsXG4gICAgbWluVGltZTogXCJUZW1wcyBtaW5pbXVtIChzKVwiLFxuICAgIG1heFRpbWU6IFwiVGVtcHMgbWF4aW11bSAocylcIlxuICB9XG59O1xuIiwgImV4cG9ydCBjb25zdCBydSA9IHtcbiAgLy8gTGF1bmNoZXJcbiAgbGF1bmNoZXI6IHtcbiAgICB0aXRsZTogJ1dQbGFjZSBBdXRvQk9UJyxcbiAgICBhdXRvRmFybTogJ1x1RDgzQ1x1REYzRSBcdTA0MTBcdTA0MzJcdTA0NDJcdTA0M0UtXHUwNDI0XHUwNDMwXHUwNDQwXHUwNDNDJyxcbiAgICBhdXRvSW1hZ2U6ICdcdUQ4M0NcdURGQTggXHUwNDEwXHUwNDMyXHUwNDQyXHUwNDNFLVx1MDQxOFx1MDQzN1x1MDQzRVx1MDQzMVx1MDQ0MFx1MDQzMFx1MDQzNlx1MDQzNVx1MDQzRFx1MDQzOFx1MDQzNScsXG4gICAgYXV0b0d1YXJkOiAnXHVEODNEXHVERUUxXHVGRTBGIFx1MDQxMFx1MDQzMlx1MDQ0Mlx1MDQzRS1cdTA0MTdcdTA0MzBcdTA0NDlcdTA0MzhcdTA0NDJcdTA0MzAnLFxuICAgIHNlbGVjdGlvbjogJ1x1MDQxMlx1MDQ0Qlx1MDQzMVx1MDQ0MFx1MDQzMFx1MDQzRFx1MDQzRScsXG4gICAgdXNlcjogJ1x1MDQxRlx1MDQzRVx1MDQzQlx1MDQ0Q1x1MDQzN1x1MDQzRVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQzNVx1MDQzQlx1MDQ0QycsXG4gICAgY2hhcmdlczogJ1x1MDQxOFx1MDQzN1x1MDQzQ1x1MDQzNVx1MDQzRFx1MDQzNVx1MDQzRFx1MDQzOFx1MDQ0RicsXG4gICAgYmFja2VuZDogJ1x1MDQxMVx1MDQ0RFx1MDQzQVx1MDQzNVx1MDQzRFx1MDQzNCcsXG4gICAgZGF0YWJhc2U6ICdcdTA0MTFcdTA0MzBcdTA0MzdcdTA0MzAgXHUwNDM0XHUwNDMwXHUwNDNEXHUwNDNEXHUwNDRCXHUwNDQ1JyxcbiAgICB1cHRpbWU6ICdcdTA0MTJcdTA0NDBcdTA0MzVcdTA0M0NcdTA0NEYgXHUwNDQwXHUwNDMwXHUwNDMxXHUwNDNFXHUwNDQyXHUwNDRCJyxcbiAgICBjbG9zZTogJ1x1MDQxN1x1MDQzMFx1MDQzQVx1MDQ0MFx1MDQ0Qlx1MDQ0Mlx1MDQ0QycsXG4gICAgbGF1bmNoOiAnXHUwNDE3XHUwNDMwXHUwNDNGXHUwNDQzXHUwNDQxXHUwNDQyXHUwNDM4XHUwNDQyXHUwNDRDJyxcbiAgICBsb2FkaW5nOiAnXHUwNDE3XHUwNDMwXHUwNDMzXHUwNDQwXHUwNDQzXHUwNDM3XHUwNDNBXHUwNDMwJyxcbiAgICBleGVjdXRpbmc6ICdcdTA0MTJcdTA0NEJcdTA0M0ZcdTA0M0VcdTA0M0JcdTA0M0RcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzUnLFxuICAgIGRvd25sb2FkaW5nOiAnXHUwNDE3XHUwNDMwXHUwNDMzXHUwNDQwXHUwNDQzXHUwNDM3XHUwNDNBXHUwNDMwIFx1MDQ0MVx1MDQzQVx1MDQ0MFx1MDQzOFx1MDQzRlx1MDQ0Mlx1MDQzMC4uLicsXG4gICAgY2hvb3NlQm90OiAnXHUwNDEyXHUwNDRCXHUwNDMxXHUwNDM1XHUwNDQwXHUwNDM4XHUwNDQyXHUwNDM1IFx1MDQzMVx1MDQzRVx1MDQ0Mlx1MDQzMCBcdTA0MzggXHUwNDNEXHUwNDMwXHUwNDM2XHUwNDNDXHUwNDM4XHUwNDQyXHUwNDM1IFx1MDQxN1x1MDQzMFx1MDQzRlx1MDQ0M1x1MDQ0MVx1MDQ0Mlx1MDQzOFx1MDQ0Mlx1MDQ0QycsXG4gICAgcmVhZHlUb0xhdW5jaDogJ1x1MDQxM1x1MDQzRVx1MDQ0Mlx1MDQzRVx1MDQzMlx1MDQzRSBcdTA0M0EgXHUwNDM3XHUwNDMwXHUwNDNGXHUwNDQzXHUwNDQxXHUwNDNBXHUwNDQzJyxcbiAgICBsb2FkRXJyb3I6ICdcdTA0MUVcdTA0NDhcdTA0MzhcdTA0MzFcdTA0M0FcdTA0MzAgXHUwNDM3XHUwNDMwXHUwNDMzXHUwNDQwXHUwNDQzXHUwNDM3XHUwNDNBXHUwNDM4JyxcbiAgICBsb2FkRXJyb3JNc2c6ICdcdTA0MURcdTA0MzVcdTA0MzJcdTA0M0VcdTA0MzdcdTA0M0NcdTA0M0VcdTA0MzZcdTA0M0RcdTA0M0UgXHUwNDM3XHUwNDMwXHUwNDMzXHUwNDQwXHUwNDQzXHUwNDM3XHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQzMlx1MDQ0Qlx1MDQzMVx1MDQ0MFx1MDQzMFx1MDQzRFx1MDQzRFx1MDQzRVx1MDQzM1x1MDQzRSBcdTA0MzFcdTA0M0VcdTA0NDJcdTA0MzAuIFx1MDQxRlx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzNVx1MDQ0MFx1MDQ0Q1x1MDQ0Mlx1MDQzNSBcdTA0M0ZcdTA0M0VcdTA0MzRcdTA0M0FcdTA0M0JcdTA0NEVcdTA0NDdcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDM4XHUwNDNCXHUwNDM4IFx1MDQzRlx1MDQzRVx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQzMVx1MDQ0M1x1MDQzOVx1MDQ0Mlx1MDQzNSBcdTA0MzVcdTA0NDlcdTA0MzUgXHUwNDQwXHUwNDMwXHUwNDM3LicsXG4gICAgY2hlY2tpbmc6ICdcdUQ4M0RcdUREMDQgXHUwNDFGXHUwNDQwXHUwNDNFXHUwNDMyXHUwNDM1XHUwNDQwXHUwNDNBXHUwNDMwLi4uJyxcbiAgICBvbmxpbmU6ICdcdUQ4M0RcdURGRTIgXHUwNDFFXHUwNDNEXHUwNDNCXHUwNDMwXHUwNDM5XHUwNDNEJyxcbiAgICBvZmZsaW5lOiAnXHVEODNEXHVERDM0IFx1MDQxRVx1MDQ0NFx1MDQzQlx1MDQzMFx1MDQzOVx1MDQzRCcsXG4gICAgb2s6ICdcdUQ4M0RcdURGRTIgXHUwNDFFXHUwNDFBJyxcbiAgICBlcnJvcjogJ1x1RDgzRFx1REQzNCBcdTA0MUVcdTA0NDhcdTA0MzhcdTA0MzFcdTA0M0FcdTA0MzAnLFxuICAgIHVua25vd246ICctJyxcbiAgICBsb2dXaW5kb3c6ICdMb2dzJyxcbiAgICBsb2dXaW5kb3dUaXRsZTogJ1x1MDQxQlx1MDQzRVx1MDQzM1x1MDQzOCAtIHtib3ROYW1lfScsXG4gICAgZG93bmxvYWRMb2dzOiAnXHUwNDIxXHUwNDNBXHUwNDMwXHUwNDQ3XHUwNDMwXHUwNDQyXHUwNDRDIFx1MDQxQlx1MDQzRVx1MDQzM1x1MDQzOCcsXG4gICAgY2xlYXJMb2dzOiAnXHUwNDFFXHUwNDQ3XHUwNDM4XHUwNDQxXHUwNDQyXHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQxQlx1MDQzRVx1MDQzM1x1MDQzOCcsXG4gICAgY2xvc2VMb2dzOiAnXHUwNDE3XHUwNDMwXHUwNDNBXHUwNDQwXHUwNDRCXHUwNDQyXHUwNDRDJ1xuICB9LFxuXG4gIC8vIEltYWdlIE1vZHVsZVxuICBpbWFnZToge1xuICAgIHRpdGxlOiBcIldQbGFjZSBcdTA0MTBcdTA0MzJcdTA0NDJcdTA0M0UtXHUwNDE4XHUwNDM3XHUwNDNFXHUwNDMxXHUwNDQwXHUwNDMwXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1XCIsXG4gICAgaW5pdEJvdDogXCJcdTA0MThcdTA0M0RcdTA0MzhcdTA0NDZcdTA0MzhcdTA0MzBcdTA0M0JcdTA0MzhcdTA0MzdcdTA0MzhcdTA0NDBcdTA0M0VcdTA0MzJcdTA0MzBcdTA0NDJcdTA0NEMgQXV0by1CT1RcIixcbiAgICB1cGxvYWRJbWFnZTogXCJcdTA0MTdcdTA0MzBcdTA0MzNcdTA0NDBcdTA0NDNcdTA0MzdcdTA0MzhcdTA0NDJcdTA0NEMgXHUwNDM4XHUwNDM3XHUwNDNFXHUwNDMxXHUwNDQwXHUwNDMwXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1XCIsXG4gICAgcmVzaXplSW1hZ2U6IFwiXHUwNDE4XHUwNDM3XHUwNDNDXHUwNDM1XHUwNDNEXHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQ0MFx1MDQzMFx1MDQzN1x1MDQzQ1x1MDQzNVx1MDQ0MCBcdTA0MzhcdTA0MzdcdTA0M0VcdTA0MzFcdTA0NDBcdTA0MzBcdTA0MzZcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NEZcIixcbiAgICBzZWxlY3RQb3NpdGlvbjogXCJcdTA0MTJcdTA0NEJcdTA0MzFcdTA0NDBcdTA0MzBcdTA0NDJcdTA0NEMgXHUwNDNDXHUwNDM1XHUwNDQxXHUwNDQyXHUwNDNFIFx1MDQzRFx1MDQzMFx1MDQ0N1x1MDQzMFx1MDQzQlx1MDQzMFwiLFxuICAgIHN0YXJ0UGFpbnRpbmc6IFwiXHUwNDFEXHUwNDMwXHUwNDQ3XHUwNDMwXHUwNDQyXHUwNDRDIFx1MDQ0MFx1MDQzOFx1MDQ0MVx1MDQzRVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIHN0b3BQYWludGluZzogXCJcdTA0MUVcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0MzhcdTA0NDJcdTA0NEMgXHUwNDQwXHUwNDM4XHUwNDQxXHUwNDNFXHUwNDMyXHUwNDMwXHUwNDNEXHUwNDM4XHUwNDM1XCIsXG4gICAgc2F2ZVByb2dyZXNzOiBcIlx1MDQyMVx1MDQzRVx1MDQ0NVx1MDQ0MFx1MDQzMFx1MDQzRFx1MDQzOFx1MDQ0Mlx1MDQ0QyBcdTA0M0ZcdTA0NDBcdTA0M0VcdTA0MzNcdTA0NDBcdTA0MzVcdTA0NDFcdTA0NDFcIixcbiAgICBsb2FkUHJvZ3Jlc3M6IFwiXHUwNDE3XHUwNDMwXHUwNDMzXHUwNDQwXHUwNDQzXHUwNDM3XHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQzM1x1MDQ0MFx1MDQzNVx1MDQ0MVx1MDQ0MVwiLFxuICAgIGNoZWNraW5nQ29sb3JzOiBcIlx1RDgzRFx1REQwRCBcdTA0MUZcdTA0NDBcdTA0M0VcdTA0MzJcdTA0MzVcdTA0NDBcdTA0M0FcdTA0MzAgXHUwNDM0XHUwNDNFXHUwNDQxXHUwNDQyXHUwNDQzXHUwNDNGXHUwNDNEXHUwNDRCXHUwNDQ1IFx1MDQ0Nlx1MDQzMlx1MDQzNVx1MDQ0Mlx1MDQzRVx1MDQzMi4uLlwiLFxuICAgIG5vQ29sb3JzRm91bmQ6IFwiXHUyNzRDIFx1MDQxRVx1MDQ0Mlx1MDQzQVx1MDQ0MFx1MDQzRVx1MDQzOVx1MDQ0Mlx1MDQzNSBcdTA0M0ZcdTA0MzBcdTA0M0JcdTA0MzhcdTA0NDJcdTA0NDBcdTA0NDMgXHUwNDQ2XHUwNDMyXHUwNDM1XHUwNDQyXHUwNDNFXHUwNDMyIFx1MDQzRFx1MDQzMCBcdTA0NDFcdTA0MzBcdTA0MzlcdTA0NDJcdTA0MzUgXHUwNDM4IFx1MDQzRlx1MDQzRVx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQzMVx1MDQ0M1x1MDQzOVx1MDQ0Mlx1MDQzNSBcdTA0NDFcdTA0M0RcdTA0M0VcdTA0MzJcdTA0MzAhXCIsXG4gICAgY29sb3JzRm91bmQ6IFwiXHUyNzA1IFx1MDQxRFx1MDQzMFx1MDQzOVx1MDQzNFx1MDQzNVx1MDQzRFx1MDQzRSB7Y291bnR9IFx1MDQzNFx1MDQzRVx1MDQ0MVx1MDQ0Mlx1MDQ0M1x1MDQzRlx1MDQzRFx1MDQ0Qlx1MDQ0NSBcdTA0NDZcdTA0MzJcdTA0MzVcdTA0NDJcdTA0M0VcdTA0MzJcIixcbiAgICBsb2FkaW5nSW1hZ2U6IFwiXHVEODNEXHVEREJDXHVGRTBGIFx1MDQxN1x1MDQzMFx1MDQzM1x1MDQ0MFx1MDQ0M1x1MDQzN1x1MDQzQVx1MDQzMCBcdTA0MzhcdTA0MzdcdTA0M0VcdTA0MzFcdTA0NDBcdTA0MzBcdTA0MzZcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NEYuLi5cIixcbiAgICBpbWFnZUxvYWRlZDogXCJcdTI3MDUgXHUwNDE4XHUwNDM3XHUwNDNFXHUwNDMxXHUwNDQwXHUwNDMwXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQzN1x1MDQzMFx1MDQzM1x1MDQ0MFx1MDQ0M1x1MDQzNlx1MDQzNVx1MDQzRFx1MDQzRSBcdTA0NDEge2NvdW50fSBcdTA0MzRcdTA0MzVcdTA0MzlcdTA0NDFcdTA0NDJcdTA0MzJcdTA0MzhcdTA0NDJcdTA0MzVcdTA0M0JcdTA0NENcdTA0M0RcdTA0NEJcdTA0M0NcdTA0MzggXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDRGXHUwNDNDXHUwNDM4XCIsXG4gICAgaW1hZ2VFcnJvcjogXCJcdTI3NEMgXHUwNDFFXHUwNDQ4XHUwNDM4XHUwNDMxXHUwNDNBXHUwNDMwIFx1MDQzN1x1MDQzMFx1MDQzM1x1MDQ0MFx1MDQ0M1x1MDQzN1x1MDQzQVx1MDQzOCBcdTA0MzhcdTA0MzdcdTA0M0VcdTA0MzFcdTA0NDBcdTA0MzBcdTA0MzZcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NEZcIixcbiAgICBzZWxlY3RQb3NpdGlvbkFsZXJ0OiBcIlx1MDQxRFx1MDQzMFx1MDQ0MFx1MDQzOFx1MDQ0MVx1MDQ0M1x1MDQzOVx1MDQ0Mlx1MDQzNSBcdTA0NDFcdTA0NDJcdTA0MzBcdTA0NDBcdTA0NDJcdTA0M0VcdTA0MzJcdTA0NEJcdTA0MzkgXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDRDIFx1MDQzMiBcdTA0NDJcdTA0M0VcdTA0M0MgXHUwNDNDXHUwNDM1XHUwNDQxXHUwNDQyXHUwNDM1LCBcdTA0MzNcdTA0MzRcdTA0MzUgXHUwNDMyXHUwNDRCIFx1MDQ0NVx1MDQzRVx1MDQ0Mlx1MDQzOFx1MDQ0Mlx1MDQzNSwgXHUwNDQ3XHUwNDQyXHUwNDNFXHUwNDMxXHUwNDRCIFx1MDQ0MFx1MDQzOFx1MDQ0MVx1MDQ0M1x1MDQzRFx1MDQzRVx1MDQzQSBcdTA0M0RcdTA0MzBcdTA0NDdcdTA0MzhcdTA0M0RcdTA0MzBcdTA0M0JcdTA0NDFcdTA0NEYhXCIsXG4gICAgd2FpdGluZ1Bvc2l0aW9uOiBcIlx1RDgzRFx1REM0NiBcdTA0MUVcdTA0MzZcdTA0MzhcdTA0MzRcdTA0MzBcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDQwXHUwNDQyXHUwNDNFXHUwNDMyXHUwNDNFXHUwNDMzXHUwNDNFIFx1MDQzRlx1MDQzOFx1MDQzQVx1MDQ0MVx1MDQzNVx1MDQzQlx1MDQ0Ri4uLi5cIixcbiAgICBwb3NpdGlvblNldDogXCJcdTI3MDUgXHUwNDFGXHUwNDNFXHUwNDM3XHUwNDM4XHUwNDQ2XHUwNDM4XHUwNDRGIFx1MDQ0M1x1MDQ0MVx1MDQ0Mlx1MDQzMFx1MDQzRFx1MDQzRVx1MDQzMlx1MDQzQlx1MDQzNVx1MDQzRFx1MDQzMCBcdTA0NDNcdTA0NDFcdTA0M0ZcdTA0MzVcdTA0NDhcdTA0M0RcdTA0M0UhXCIsXG4gICAgcG9zaXRpb25UaW1lb3V0OiBcIlx1Mjc0QyBcdTA0MjJcdTA0MzBcdTA0MzlcdTA0M0NcdTA0MzBcdTA0NDNcdTA0NDIgXHUwNDMyXHUwNDRCXHUwNDMxXHUwNDNFXHUwNDQwXHUwNDMwIFx1MDQzRlx1MDQzRVx1MDQzN1x1MDQzOFx1MDQ0Nlx1MDQzOFx1MDQzOFwiLFxuICAgIHBvc2l0aW9uRGV0ZWN0ZWQ6IFwiXHVEODNDXHVERkFGIFx1MDQxRlx1MDQzRVx1MDQzN1x1MDQzOFx1MDQ0Nlx1MDQzOFx1MDQ0RiBcdTA0MzJcdTA0NEJcdTA0MzFcdTA0NDBcdTA0MzBcdTA0M0RcdTA0MzAsIFx1MDQzRVx1MDQzMVx1MDQ0MFx1MDQzMFx1MDQzMVx1MDQzRVx1MDQ0Mlx1MDQzQVx1MDQzMC4uLlwiLFxuICAgIHBvc2l0aW9uRXJyb3I6IFwiXHUyNzRDIFx1MDQxRVx1MDQ0OFx1MDQzOFx1MDQzMVx1MDQzQVx1MDQzMCBcdTA0MzJcdTA0NEJcdTA0MzFcdTA0M0VcdTA0NDBcdTA0MzAgXHUwNDNGXHUwNDNFXHUwNDM3XHUwNDM4XHUwNDQ2XHUwNDM4XHUwNDM4LCBcdTA0M0ZcdTA0M0VcdTA0M0ZcdTA0NDBcdTA0M0VcdTA0MzFcdTA0NDNcdTA0MzlcdTA0NDJcdTA0MzUgXHUwNDM1XHUwNDQ5XHUwNDM1IFx1MDQ0MFx1MDQzMFx1MDQzN1wiLFxuICAgIHN0YXJ0UGFpbnRpbmdNc2c6IFwiXHVEODNDXHVERkE4IFx1MDQxRFx1MDQzMFx1MDQ0N1x1MDQzMFx1MDQzQlx1MDQzRSBcdTA0NDBcdTA0MzhcdTA0NDFcdTA0M0VcdTA0MzJcdTA0MzBcdTA0M0RcdTA0MzhcdTA0NEYuLi5cIixcbiAgICBwYWludGluZ1Byb2dyZXNzOiBcIlx1RDgzRVx1RERGMSBcdTA0MUZcdTA0NDBcdTA0M0VcdTA0MzNcdTA0NDBcdTA0MzVcdTA0NDFcdTA0NDE6IHtwYWludGVkfSBcdTA0MzhcdTA0Mzcge3RvdGFsfSBcdTA0M0ZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0MzVcdTA0MzkuLi5cIixcbiAgICBub0NoYXJnZXM6IFwiXHUyMzFCIFx1MDQxRFx1MDQzNVx1MDQ0MiBcdTA0MzdcdTA0MzBcdTA0NDBcdTA0NEZcdTA0MzRcdTA0M0VcdTA0MzIuIFx1MDQxRVx1MDQzNlx1MDQzOFx1MDQzNFx1MDQzMFx1MDQzRFx1MDQzOFx1MDQzNSB7dGltZX0uLi5cIixcbiAgICBwYWludGluZ1N0b3BwZWQ6IFwiXHUyM0Y5XHVGRTBGIFx1MDQyMFx1MDQzOFx1MDQ0MVx1MDQzRVx1MDQzMlx1MDQzMFx1MDQzRFx1MDQzOFx1MDQzNSBcdTA0M0VcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0M0UgXHUwNDNGXHUwNDNFXHUwNDNCXHUwNDRDXHUwNDM3XHUwNDNFXHUwNDMyXHUwNDMwXHUwNDQyXHUwNDM1XHUwNDNCXHUwNDM1XHUwNDNDXCIsXG4gICAgcGFpbnRpbmdDb21wbGV0ZTogXCJcdTI3MDUgXHUwNDIwXHUwNDM4XHUwNDQxXHUwNDNFXHUwNDMyXHUwNDMwXHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQzN1x1MDQzMFx1MDQzMlx1MDQzNVx1MDQ0MFx1MDQ0OFx1MDQzNVx1MDQzRFx1MDQzRSEge2NvdW50fSBcdTA0M0ZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0MzVcdTA0MzkgXHUwNDNEXHUwNDMwXHUwNDQwXHUwNDM4XHUwNDQxXHUwNDNFXHUwNDMyXHUwNDMwXHUwNDNEXHUwNDNFLlwiLFxuICAgIHBhaW50aW5nRXJyb3I6IFwiXHUyNzRDIFx1MDQxRVx1MDQ0OFx1MDQzOFx1MDQzMVx1MDQzQVx1MDQzMCBcdTA0MzIgXHUwNDNGXHUwNDQwXHUwNDNFXHUwNDQ2XHUwNDM1XHUwNDQxXHUwNDQxXHUwNDM1IFx1MDQ0MFx1MDQzOFx1MDQ0MVx1MDQzRVx1MDQzMlx1MDQzMFx1MDQzRFx1MDQzOFx1MDQ0RlwiLFxuICAgIG1pc3NpbmdSZXF1aXJlbWVudHM6IFwiXHUyNzRDIFx1MDQyMVx1MDQzRlx1MDQzNVx1MDQ0MFx1MDQzMlx1MDQzMCBcdTA0MzdcdTA0MzBcdTA0MzNcdTA0NDBcdTA0NDNcdTA0MzdcdTA0MzhcdTA0NDJcdTA0MzUgXHUwNDM4XHUwNDM3XHUwNDNFXHUwNDMxXHUwNDQwXHUwNDMwXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQzOCBcdTA0MzJcdTA0NEJcdTA0MzFcdTA0MzVcdTA0NDBcdTA0MzhcdTA0NDJcdTA0MzUgXHUwNDNDXHUwNDM1XHUwNDQxXHUwNDQyXHUwNDNFIFx1MDQzRFx1MDQzMFx1MDQ0N1x1MDQzMFx1MDQzQlx1MDQzMFwiLFxuICAgIHByb2dyZXNzOiBcIlx1MDQxRlx1MDQ0MFx1MDQzRVx1MDQzM1x1MDQ0MFx1MDQzNVx1MDQ0MVx1MDQ0MVwiLFxuICAgIHVzZXJOYW1lOiBcIlx1MDQxRlx1MDQzRVx1MDQzQlx1MDQ0Q1x1MDQzN1x1MDQzRVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQzNVx1MDQzQlx1MDQ0Q1wiLFxuICAgIHBpeGVsczogXCJcdTA0MUZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0MzhcIixcbiAgICBjaGFyZ2VzOiBcIlx1MDQxN1x1MDQzMFx1MDQ0MFx1MDQ0Rlx1MDQzNFx1MDQ0QlwiLFxuICAgIGVzdGltYXRlZFRpbWU6IFwiXHUwNDFGXHUwNDQwXHUwNDM1XHUwNDM0XHUwNDNGXHUwNDNFXHUwNDNCXHUwNDNFXHUwNDM2XHUwNDM4XHUwNDQyXHUwNDM1XHUwNDNCXHUwNDRDXHUwNDNEXHUwNDNFXHUwNDM1IFx1MDQzMlx1MDQ0MFx1MDQzNVx1MDQzQ1x1MDQ0RlwiLFxuICAgIGluaXRNZXNzYWdlOiBcIlx1MDQxRFx1MDQzMFx1MDQzNlx1MDQzQ1x1MDQzOFx1MDQ0Mlx1MDQzNSBcdTAwQUJcdTA0MTdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDFcdTA0NDJcdTA0MzhcdTA0NDJcdTA0NEMgQXV0by1CT1RcdTAwQkIsIFx1MDQ0N1x1MDQ0Mlx1MDQzRVx1MDQzMVx1MDQ0QiBcdTA0M0RcdTA0MzBcdTA0NDdcdTA0MzBcdTA0NDJcdTA0NENcIixcbiAgICB3YWl0aW5nSW5pdDogXCJcdTA0MUVcdTA0MzZcdTA0MzhcdTA0MzRcdTA0MzBcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDM4XHUwNDNEXHUwNDM4XHUwNDQ2XHUwNDM4XHUwNDMwXHUwNDNCXHUwNDM4XHUwNDM3XHUwNDMwXHUwNDQ2XHUwNDM4XHUwNDM4Li4uXCIsXG4gICAgcmVzaXplU3VjY2VzczogXCJcdTI3MDUgXHUwNDE4XHUwNDM3XHUwNDNFXHUwNDMxXHUwNDQwXHUwNDMwXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQzOFx1MDQzN1x1MDQzQ1x1MDQzNVx1MDQzRFx1MDQzNVx1MDQzRFx1MDQzRSBcdTA0MzRcdTA0M0Uge3dpZHRofXh7aGVpZ2h0fVwiLFxuICAgIHBhaW50aW5nUGF1c2VkOiBcIlx1MjNGOFx1RkUwRiBcdTA0MjBcdTA0MzhcdTA0NDFcdTA0M0VcdTA0MzJcdTA0MzBcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDNGXHUwNDQwXHUwNDM4XHUwNDNFXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDNCXHUwNDM1XHUwNDNEXHUwNDNFIFx1MDQzRFx1MDQzMCBcdTA0M0ZcdTA0M0VcdTA0MzdcdTA0MzhcdTA0NDZcdTA0MzhcdTA0MzggWDoge3h9LCBZOiB7eX1cIixcbiAgICBwaXhlbHNQZXJCYXRjaDogXCJcdTA0MUZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0MzVcdTA0MzkgXHUwNDMyIFx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQ0NVx1MDQzRVx1MDQzNFx1MDQzNVwiLFxuICAgIGJhdGNoU2l6ZTogXCJcdTA0MjBcdTA0MzBcdTA0MzdcdTA0M0NcdTA0MzVcdTA0NDAgXHUwNDNGXHUwNDQwXHUwNDNFXHUwNDQ1XHUwNDNFXHUwNDM0XHUwNDMwXCIsXG4gICAgbmV4dEJhdGNoVGltZTogXCJcdTA0MjFcdTA0M0JcdTA0MzVcdTA0MzRcdTA0NDNcdTA0NEVcdTA0NDlcdTA0MzhcdTA0MzkgXHUwNDNGXHUwNDQwXHUwNDNFXHUwNDQ1XHUwNDNFXHUwNDM0IFx1MDQ0N1x1MDQzNVx1MDQ0MFx1MDQzNVx1MDQzN1wiLFxuICAgIHVzZUFsbENoYXJnZXM6IFwiXHUwNDE4XHUwNDQxXHUwNDNGXHUwNDNFXHUwNDNCXHUwNDRDXHUwNDM3XHUwNDNFXHUwNDMyXHUwNDMwXHUwNDQyXHUwNDRDIFx1MDQzMlx1MDQ0MVx1MDQzNSBcdTA0MzRcdTA0M0VcdTA0NDFcdTA0NDJcdTA0NDNcdTA0M0ZcdTA0M0RcdTA0NEJcdTA0MzUgXHUwNDM3XHUwNDMwXHUwNDQwXHUwNDRGXHUwNDM0XHUwNDRCXCIsXG4gICAgc2hvd092ZXJsYXk6IFwiXHUwNDFGXHUwNDNFXHUwNDNBXHUwNDMwXHUwNDM3XHUwNDMwXHUwNDQyXHUwNDRDIFx1MDQzRFx1MDQzMFx1MDQzQlx1MDQzRVx1MDQzNlx1MDQzNVx1MDQzRFx1MDQzOFx1MDQzNVwiLFxuICAgIG1heENoYXJnZXM6IFwiXHUwNDFDXHUwNDMwXHUwNDNBXHUwNDQxXHUwNDM4XHUwNDNDXHUwNDMwXHUwNDNCXHUwNDRDXHUwNDNEXHUwNDNFXHUwNDM1IFx1MDQzQVx1MDQzRVx1MDQzQi1cdTA0MzJcdTA0M0UgXHUwNDM3XHUwNDMwXHUwNDQwXHUwNDRGXHUwNDM0XHUwNDNFXHUwNDMyIFx1MDQzN1x1MDQzMCBcdTA0M0ZcdTA0NDBcdTA0M0VcdTA0NDVcdTA0M0VcdTA0MzRcIixcbiAgICB3YWl0aW5nRm9yQ2hhcmdlczogXCJcdTIzRjMgXHUwNDFFXHUwNDM2XHUwNDM4XHUwNDM0XHUwNDMwXHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQzN1x1MDQzMFx1MDQ0MFx1MDQ0Rlx1MDQzNFx1MDQzRVx1MDQzMjoge2N1cnJlbnR9IFx1MDQzOFx1MDQzNyB7bmVlZGVkfVwiLFxuICAgIHRpbWVSZW1haW5pbmc6IFwiXHUwNDEyXHUwNDQwXHUwNDM1XHUwNDNDXHUwNDM1XHUwNDNEXHUwNDM4IFx1MDQzRVx1MDQ0MVx1MDQ0Mlx1MDQzMFx1MDQzQlx1MDQzRVx1MDQ0MVx1MDQ0Q1wiLFxuICAgIGNvb2xkb3duV2FpdGluZzogXCJcdTIzRjMgXHUwNDFFXHUwNDM2XHUwNDM4XHUwNDM0XHUwNDMwXHUwNDNEXHUwNDM4XHUwNDM1IHt0aW1lfSBcdTA0MzRcdTA0M0JcdTA0NEYgXHUwNDNGXHUwNDQwXHUwNDNFXHUwNDM0XHUwNDNFXHUwNDNCXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDRGLi4uXCIsXG4gICAgcHJvZ3Jlc3NTYXZlZDogXCJcdTI3MDUgXHUwNDFGXHUwNDQwXHUwNDNFXHUwNDMzXHUwNDQwXHUwNDM1XHUwNDQxXHUwNDQxIFx1MDQ0MVx1MDQzRVx1MDQ0NVx1MDQ0MFx1MDQzMFx1MDQzRFx1MDQzNVx1MDQzRCBcdTA0M0FcdTA0MzBcdTA0M0Ege2ZpbGVuYW1lfVwiLFxuICAgIHByb2dyZXNzTG9hZGVkOiBcIlx1MjcwNSBcdTA0MUZcdTA0NDBcdTA0M0VcdTA0MzNcdTA0NDBcdTA0MzVcdTA0NDFcdTA0NDEgXHUwNDM3XHUwNDMwXHUwNDMzXHUwNDQwXHUwNDQzXHUwNDM2XHUwNDM1XHUwNDNEOiB7cGFpbnRlZH0gXHUwNDM4XHUwNDM3IHt0b3RhbH0gXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM1XHUwNDM5IFx1MDQzRFx1MDQzMFx1MDQ0MFx1MDQzOFx1MDQ0MVx1MDQzRVx1MDQzMlx1MDQzMFx1MDQzRFx1MDQzRVwiLFxuICAgIHByb2dyZXNzTG9hZEVycm9yOiBcIlx1Mjc0QyBcdTA0MUVcdTA0NDhcdTA0MzhcdTA0MzFcdTA0M0FcdTA0MzAgXHUwNDM3XHUwNDMwXHUwNDMzXHUwNDQwXHUwNDQzXHUwNDM3XHUwNDNBXHUwNDM4IFx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQzM1x1MDQ0MFx1MDQzNVx1MDQ0MVx1MDQ0MVx1MDQzMDoge2Vycm9yfVwiLFxuXG4gICAgcHJvZ3Jlc3NTYXZlRXJyb3I6IFwiXHUyNzRDIFx1MDQxRVx1MDQ0OFx1MDQzOFx1MDQzMVx1MDQzQVx1MDQzMCBcdTA0NDFcdTA0M0VcdTA0NDVcdTA0NDBcdTA0MzBcdTA0M0RcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NEYgXHUwNDNGXHUwNDQwXHUwNDNFXHUwNDMzXHUwNDQwXHUwNDM1XHUwNDQxXHUwNDQxXHUwNDMwOiB7ZXJyb3J9XCIsXG5cbiAgICBjb25maXJtU2F2ZVByb2dyZXNzOiBcIlx1MDQyMVx1MDQzRVx1MDQ0NVx1MDQ0MFx1MDQzMFx1MDQzRFx1MDQzOFx1MDQ0Mlx1MDQ0QyBcdTA0NDJcdTA0MzVcdTA0M0FcdTA0NDNcdTA0NDlcdTA0MzhcdTA0MzkgXHUwNDNGXHUwNDQwXHUwNDNFXHUwNDMzXHUwNDQwXHUwNDM1XHUwNDQxXHUwNDQxIFx1MDQzRlx1MDQzNVx1MDQ0MFx1MDQzNVx1MDQzNCBcdTA0M0VcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0FcdTA0M0VcdTA0Mzk/XCIsXG4gICAgc2F2ZVByb2dyZXNzVGl0bGU6IFwiXHUwNDIxXHUwNDNFXHUwNDQ1XHUwNDQwXHUwNDMwXHUwNDNEXHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQzM1x1MDQ0MFx1MDQzNVx1MDQ0MVx1MDQ0MVwiLFxuICAgIGRpc2NhcmRQcm9ncmVzczogXCJcdTA0MURcdTA0MzUgXHUwNDQxXHUwNDNFXHUwNDQ1XHUwNDQwXHUwNDMwXHUwNDNEXHUwNDRGXHUwNDQyXHUwNDRDIFx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQzM1x1MDQ0MFx1MDQzNVx1MDQ0MVx1MDQ0MVwiLFxuICAgIGNhbmNlbDogXCJcdTA0MUVcdTA0NDJcdTA0M0NcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NDJcdTA0NENcIixcbiAgICBtaW5pbWl6ZTogXCJcdTA0MjFcdTA0MzJcdTA0MzVcdTA0NDBcdTA0M0RcdTA0NDNcdTA0NDJcdTA0NENcIixcbiAgICB3aWR0aDogXCJcdTA0MjhcdTA0MzhcdTA0NDBcdTA0MzhcdTA0M0RcdTA0MzBcIixcbiAgICBoZWlnaHQ6IFwiXHUwNDEyXHUwNDRCXHUwNDQxXHUwNDNFXHUwNDQyXHUwNDMwXCIsXG4gICAga2VlcEFzcGVjdDogXCJcdTA0MjFcdTA0M0VcdTA0NDVcdTA0NDBcdTA0MzBcdTA0M0RcdTA0MzhcdTA0NDJcdTA0NEMgXHUwNDQxXHUwNDNFXHUwNDNFXHUwNDQyXHUwNDNEXHUwNDNFXHUwNDQ4XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQ0MVx1MDQ0Mlx1MDQzRVx1MDQ0MFx1MDQzRVx1MDQzRFwiLFxuICAgIGFwcGx5OiBcIlx1MDQxRlx1MDQ0MFx1MDQzOFx1MDQzQ1x1MDQzNVx1MDQzRFx1MDQzOFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIG92ZXJsYXlPbjogXCJcdTA0MURcdTA0MzBcdTA0M0JcdTA0M0VcdTA0MzZcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzU6IFx1MDQxMlx1MDQxQVx1MDQxQlwiLFxuICAgIG92ZXJsYXlPZmY6IFwiXHUwNDFEXHUwNDMwXHUwNDNCXHUwNDNFXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1OiBcdTA0MTJcdTA0MkJcdTA0MUFcdTA0MUJcIixcbiAgICBwYXNzQ29tcGxldGVkOiBcIlx1MjcwNSBcdTA0MUZcdTA0NDBcdTA0M0VcdTA0NDZcdTA0MzVcdTA0NDFcdTA0NDEgXHUwNDM3XHUwNDMwXHUwNDMyXHUwNDM1XHUwNDQwXHUwNDQ4XHUwNDM1XHUwNDNEOiB7cGFpbnRlZH0gXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM1XHUwNDM5IFx1MDQzRFx1MDQzMFx1MDQ0MFx1MDQzOFx1MDQ0MVx1MDQzRVx1MDQzMlx1MDQzMFx1MDQzRFx1MDQzRSB8IFx1MDQxRlx1MDQ0MFx1MDQzRVx1MDQzM1x1MDQ0MFx1MDQzNVx1MDQ0MVx1MDQ0MToge3BlcmNlbnR9JSAoe2N1cnJlbnR9IFx1MDQzOFx1MDQzNyB7dG90YWx9KVwiLFxuICAgIHdhaXRpbmdDaGFyZ2VzUmVnZW46IFwiXHUyM0YzIFx1MDQxRVx1MDQzNlx1MDQzOFx1MDQzNFx1MDQzMFx1MDQzRFx1MDQzOFx1MDQzNSBcdTA0MzJcdTA0M0VcdTA0NDFcdTA0M0ZcdTA0M0VcdTA0M0JcdTA0M0RcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NEYgXHUwNDM3XHUwNDMwXHUwNDQwXHUwNDRGXHUwNDM0XHUwNDMwOiB7Y3VycmVudH0gXHUwNDM4XHUwNDM3IHtuZWVkZWR9IC0gXHUwNDEyXHUwNDQwXHUwNDM1XHUwNDNDXHUwNDRGOiB7dGltZX1cIixcbiAgICB3YWl0aW5nQ2hhcmdlc0NvdW50ZG93bjogXCJcdTIzRjMgXHUwNDFFXHUwNDM2XHUwNDM4XHUwNDM0XHUwNDMwXHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQzN1x1MDQzMFx1MDQ0MFx1MDQ0Rlx1MDQzNFx1MDQzRVx1MDQzMjoge2N1cnJlbnR9IFx1MDQzOFx1MDQzNyB7bmVlZGVkfSAtIFx1MDQyMlx1MDQ0MFx1MDQzNVx1MDQzMVx1MDQ0M1x1MDQzNVx1MDQ0Mlx1MDQ0MVx1MDQ0Rjoge3RpbWV9XCIsXG4gICAgYXV0b0luaXRpYWxpemluZzogXCJcdUQ4M0VcdUREMTYgXHUwNDEwXHUwNDMyXHUwNDQyXHUwNDNFXHUwNDNDXHUwNDMwXHUwNDQyXHUwNDM4XHUwNDQ3XHUwNDM1XHUwNDQxXHUwNDNBXHUwNDMwXHUwNDRGIFx1MDQzOFx1MDQzRFx1MDQzOFx1MDQ0Nlx1MDQzOFx1MDQzMFx1MDQzQlx1MDQzOFx1MDQzN1x1MDQzMFx1MDQ0Nlx1MDQzOFx1MDQ0Ri4uLlwiLFxuICAgIGF1dG9Jbml0U3VjY2VzczogXCJcdTI3MDUgXHUwNDExXHUwNDNFXHUwNDQyIFx1MDQ0M1x1MDQ0MVx1MDQzRlx1MDQzNVx1MDQ0OFx1MDQzRFx1MDQzRSBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDFcdTA0NDJcdTA0MzhcdTA0M0JcdTA0NDFcdTA0NEYgXHUwNDMwXHUwNDMyXHUwNDQyXHUwNDNFXHUwNDNDXHUwNDMwXHUwNDQyXHUwNDM4XHUwNDQ3XHUwNDM1XHUwNDQxXHUwNDNBXHUwNDM4XCIsXG4gICAgYXV0b0luaXRGYWlsZWQ6IFwiXHUyNkEwXHVGRTBGIFx1MDQxRFx1MDQzNSBcdTA0NDNcdTA0MzRcdTA0MzBcdTA0M0JcdTA0M0VcdTA0NDFcdTA0NEMgXHUwNDMyXHUwNDRCXHUwNDNGXHUwNDNFXHUwNDNCXHUwNDNEXHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQzMFx1MDQzMlx1MDQ0Mlx1MDQzRVx1MDQzN1x1MDQzMFx1MDQzRlx1MDQ0M1x1MDQ0MVx1MDQzQS4gXHUwNDE4XHUwNDQxXHUwNDNGXHUwNDNFXHUwNDNCXHUwNDRDXHUwNDM3XHUwNDQzXHUwNDM5XHUwNDQyXHUwNDM1IFx1MDQzQVx1MDQzRFx1MDQzRVx1MDQzRlx1MDQzQVx1MDQ0MyBcdTA0NDBcdTA0NDNcdTA0NDdcdTA0M0RcdTA0M0VcdTA0MzNcdTA0M0UgXHUwNDM3XHUwNDMwXHUwNDNGXHUwNDQzXHUwNDQxXHUwNDNBXHUwNDMwLlwiLFxuICAgIHBhbGV0dGVEZXRlY3RlZDogXCJcdUQ4M0NcdURGQTggXHUwNDI2XHUwNDMyXHUwNDM1XHUwNDQyXHUwNDNFXHUwNDMyXHUwNDMwXHUwNDRGIFx1MDQzRlx1MDQzMFx1MDQzQlx1MDQzOFx1MDQ0Mlx1MDQ0MFx1MDQzMCBcdTA0M0VcdTA0MzFcdTA0M0RcdTA0MzBcdTA0NDBcdTA0NDNcdTA0MzZcdTA0MzVcdTA0M0RcdTA0MzBcIixcbiAgICBwYWxldHRlTm90Rm91bmQ6IFwiXHVEODNEXHVERDBEIFx1MDQxRlx1MDQzRVx1MDQzOFx1MDQ0MVx1MDQzQSBcdTA0NDZcdTA0MzJcdTA0MzVcdTA0NDJcdTA0M0VcdTA0MzJcdTA0M0VcdTA0MzkgXHUwNDNGXHUwNDMwXHUwNDNCXHUwNDM4XHUwNDQyXHUwNDQwXHUwNDRCLi4uXCIsXG4gICAgY2xpY2tpbmdQYWludEJ1dHRvbjogXCJcdUQ4M0RcdURDNDYgXHUwNDFEXHUwNDMwXHUwNDM2XHUwNDMwXHUwNDQyXHUwNDM4XHUwNDM1IFx1MDQzQVx1MDQzRFx1MDQzRVx1MDQzRlx1MDQzQVx1MDQzOCBcdTAwQUJQYWludFx1MDBCQi4uLlwiLFxuICAgIHBhaW50QnV0dG9uTm90Rm91bmQ6IFwiXHUyNzRDIFx1MDQxQVx1MDQzRFx1MDQzRVx1MDQzRlx1MDQzQVx1MDQzMCBcdTAwQUJQYWludFx1MDBCQiBcdTA0M0RcdTA0MzUgXHUwNDNEXHUwNDMwXHUwNDM5XHUwNDM0XHUwNDM1XHUwNDNEXHUwNDMwXCIsXG4gICAgbWFudWFsSW5pdFJlcXVpcmVkOiBcIlx1RDgzRFx1REQyNyBcdTA0MjJcdTA0NDBcdTA0MzVcdTA0MzFcdTA0NDNcdTA0MzVcdTA0NDJcdTA0NDFcdTA0NEYgXHUwNDQwXHUwNDQzXHUwNDQ3XHUwNDNEXHUwNDMwXHUwNDRGIFx1MDQzOFx1MDQzRFx1MDQzOFx1MDQ0Nlx1MDQzOFx1MDQzMFx1MDQzQlx1MDQzOFx1MDQzN1x1MDQzMFx1MDQ0Nlx1MDQzOFx1MDQ0RlwiLFxuICAgIHJldHJ5QXR0ZW1wdDogXCJcdUQ4M0RcdUREMDQgXHUwNDFGXHUwNDNFXHUwNDMyXHUwNDQyXHUwNDNFXHUwNDQwXHUwNDNEXHUwNDMwXHUwNDRGIFx1MDQzRlx1MDQzRVx1MDQzRlx1MDQ0Qlx1MDQ0Mlx1MDQzQVx1MDQzMCB7YXR0ZW1wdH0gXHUwNDM4XHUwNDM3IHttYXhBdHRlbXB0c30gXHUwNDQ3XHUwNDM1XHUwNDQwXHUwNDM1XHUwNDM3IHtkZWxheX1zLi4uXCIsXG4gICAgcmV0cnlFcnJvcjogXCJcdUQ4M0RcdURDQTUgXHUwNDFFXHUwNDQ4XHUwNDM4XHUwNDMxXHUwNDNBXHUwNDMwIFx1MDQzMiBcdTA0M0ZcdTA0M0VcdTA0M0ZcdTA0NEJcdTA0NDJcdTA0M0FcdTA0MzUge2F0dGVtcHR9IFx1MDQzOFx1MDQzNyB7bWF4QXR0ZW1wdHN9LCBcdTA0M0ZcdTA0M0VcdTA0MzJcdTA0NDJcdTA0M0VcdTA0NDBcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDQ3XHUwNDM1XHUwNDQwXHUwNDM1XHUwNDM3IHtkZWxheX1zLi4uXCIsXG4gICAgcmV0cnlGYWlsZWQ6IFwiXHUyNzRDIFx1MDQxRlx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzMFx1MDQzQlx1MDQzNVx1MDQzRFx1MDQzRSBcdTA0NDFcdTA0M0ZcdTA0NDNcdTA0NDFcdTA0NDJcdTA0NEYge21heEF0dGVtcHRzfSBcdTA0M0ZcdTA0M0VcdTA0M0ZcdTA0NEJcdTA0NDJcdTA0M0VcdTA0M0EuIFx1MDQxRlx1MDQ0MFx1MDQzRVx1MDQzNFx1MDQzRVx1MDQzQlx1MDQzNlx1MDQzNVx1MDQzRFx1MDQzOFx1MDQzNSBcdTA0MzIgXHUwNDQxXHUwNDNCXHUwNDM1XHUwNDM0XHUwNDQzXHUwNDRFXHUwNDQ5XHUwNDM1XHUwNDNDIFx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQ0NVx1MDQzRVx1MDQzNFx1MDQzNS4uLlwiLFxuICAgIG5ldHdvcmtFcnJvcjogXCJcdUQ4M0NcdURGMTAgXHUwNDFFXHUwNDQ4XHUwNDM4XHUwNDMxXHUwNDNBXHUwNDMwIFx1MDQ0MVx1MDQzNVx1MDQ0Mlx1MDQzOC4gXHUwNDFGXHUwNDNFXHUwNDMyXHUwNDQyXHUwNDNFXHUwNDQwXHUwNDNEXHUwNDMwXHUwNDRGIFx1MDQzRlx1MDQzRVx1MDQzRlx1MDQ0Qlx1MDQ0Mlx1MDQzQVx1MDQzMC4uLlwiLFxuICAgIHNlcnZlckVycm9yOiBcIlx1RDgzRFx1REQyNSBcdTA0MUVcdTA0NDhcdTA0MzhcdTA0MzFcdTA0M0FcdTA0MzAgXHUwNDQxXHUwNDM1XHUwNDQwXHUwNDMyXHUwNDM1XHUwNDQwXHUwNDMwLiBcdTA0MUZcdTA0M0VcdTA0MzJcdTA0NDJcdTA0M0VcdTA0NDBcdTA0M0RcdTA0MzBcdTA0NEYgXHUwNDNGXHUwNDNFXHUwNDNGXHUwNDRCXHUwNDQyXHUwNDNBXHUwNDMwLi4uXCIsXG4gICAgdGltZW91dEVycm9yOiBcIlx1MjNGMCBcdTA0MjJcdTA0MzBcdTA0MzlcdTA0M0MtXHUwNDMwXHUwNDQzXHUwNDQyIFx1MDQ0MVx1MDQzNVx1MDQ0MFx1MDQzMlx1MDQzNVx1MDQ0MFx1MDQzMCwgXHUwNDNGXHUwNDNFXHUwNDMyXHUwNDQyXHUwNDNFXHUwNDQwXHUwNDNEXHUwNDMwXHUwNDRGIFx1MDQzRlx1MDQzRVx1MDQzRlx1MDQ0Qlx1MDQ0Mlx1MDQzQVx1MDQzMC4uLlwiLFxuICAgIC8vIHYyLjAgLSBcdTA0MTdcdTA0MzBcdTA0NDlcdTA0MzhcdTA0NDJcdTA0MzAgXHUwNDM4IFx1MDQ0OFx1MDQzMFx1MDQzMVx1MDQzQlx1MDQzRVx1MDQzRFx1MDQ0QlxuICAgIHByb3RlY3Rpb25FbmFibGVkOiBcIlx1MDQxN1x1MDQzMFx1MDQ0OVx1MDQzOFx1MDQ0Mlx1MDQzMCBcdTA0MzJcdTA0M0FcdTA0M0JcdTA0NEVcdTA0NDdcdTA0MzVcdTA0M0RcdTA0MzBcIixcbiAgICBwcm90ZWN0aW9uRGlzYWJsZWQ6IFwiXHUwNDE3XHUwNDMwXHUwNDQ5XHUwNDM4XHUwNDQyXHUwNDMwIFx1MDQzRVx1MDQ0Mlx1MDQzQVx1MDQzQlx1MDQ0RVx1MDQ0N1x1MDQzNVx1MDQzRFx1MDQzMFwiLFxuICAgIHBhaW50UGF0dGVybjogXCJcdTA0MjhcdTA0MzBcdTA0MzFcdTA0M0JcdTA0M0VcdTA0M0QgXHUwNDQwXHUwNDM4XHUwNDQxXHUwNDNFXHUwNDMyXHUwNDMwXHUwNDNEXHUwNDM4XHUwNDRGXCIsXG4gICAgcGF0dGVybkxpbmVhclN0YXJ0OiBcIlx1MDQxQlx1MDQzOFx1MDQzRFx1MDQzNVx1MDQzOVx1MDQzRFx1MDQ0Qlx1MDQzOSAoXHUwNDNEXHUwNDMwXHUwNDQ3XHUwNDMwXHUwNDNCXHUwNDNFKVwiLFxuICAgIHBhdHRlcm5MaW5lYXJFbmQ6IFwiXHUwNDFCXHUwNDM4XHUwNDNEXHUwNDM1XHUwNDM5XHUwNDNEXHUwNDRCXHUwNDM5IChcdTA0M0FcdTA0M0VcdTA0M0RcdTA0MzVcdTA0NDYpXCIsXG4gICAgcGF0dGVyblJhbmRvbTogXCJcdTA0MjFcdTA0M0JcdTA0NDNcdTA0NDdcdTA0MzBcdTA0MzlcdTA0M0RcdTA0NEJcdTA0MzlcIixcbiAgICBwYXR0ZXJuQ2VudGVyT3V0OiBcIlx1MDQxOFx1MDQzNyBcdTA0NDZcdTA0MzVcdTA0M0RcdTA0NDJcdTA0NDBcdTA0MzAgXHUwNDNEXHUwNDMwXHUwNDQwXHUwNDQzXHUwNDM2XHUwNDQzXCIsXG4gICAgcGF0dGVybkNvcm5lcnNGaXJzdDogXCJcdTA0MjFcdTA0M0RcdTA0MzBcdTA0NDdcdTA0MzBcdTA0M0JcdTA0MzAgXHUwNDQzXHUwNDMzXHUwNDNCXHUwNDRCXCIsXG4gICAgcGF0dGVyblNwaXJhbDogXCJcdTA0MjFcdTA0M0ZcdTA0MzhcdTA0NDBcdTA0MzBcdTA0M0JcdTA0NENcIixcbiAgICBzb2xpZDogXCJcdTA0MjFcdTA0M0ZcdTA0M0JcdTA0M0VcdTA0NDhcdTA0M0RcdTA0M0VcdTA0MzlcIixcbiAgICBzdHJpcGVzOiBcIlx1MDQxRlx1MDQzRVx1MDQzQlx1MDQzRVx1MDQ0MVx1MDQ0QlwiLFxuICAgIGNoZWNrZXJib2FyZDogXCJcdTA0MjhcdTA0MzBcdTA0NDVcdTA0M0NcdTA0MzBcdTA0NDJcdTA0M0RcdTA0MzBcdTA0NEYgXHUwNDM0XHUwNDNFXHUwNDQxXHUwNDNBXHUwNDMwXCIsXG4gICAgZ3JhZGllbnQ6IFwiXHUwNDEzXHUwNDQwXHUwNDMwXHUwNDM0XHUwNDM4XHUwNDM1XHUwNDNEXHUwNDQyXCIsXG4gICAgZG90czogXCJcdTA0MjJcdTA0M0VcdTA0NDdcdTA0M0FcdTA0MzhcIixcbiAgICB3YXZlczogXCJcdTA0MTJcdTA0M0VcdTA0M0JcdTA0M0RcdTA0NEJcIixcbiAgICBzcGlyYWw6IFwiXHUwNDIxXHUwNDNGXHUwNDM4XHUwNDQwXHUwNDMwXHUwNDNCXHUwNDRDXCIsXG4gICAgbW9zYWljOiBcIlx1MDQxQ1x1MDQzRVx1MDQzN1x1MDQzMFx1MDQzOFx1MDQzQVx1MDQzMFwiLFxuICAgIGJyaWNrczogXCJcdTA0MUFcdTA0MzhcdTA0NDBcdTA0M0ZcdTA0MzhcdTA0NDdcdTA0MzhcIixcbiAgICB6aWd6YWc6IFwiXHUwNDE3XHUwNDM4XHUwNDMzXHUwNDM3XHUwNDMwXHUwNDMzXCIsXG4gICAgcHJvdGVjdGluZ0RyYXdpbmc6IFwiXHUwNDE3XHUwNDMwXHUwNDQ5XHUwNDM4XHUwNDQyXHUwNDMwIFx1MDQ0MFx1MDQzOFx1MDQ0MVx1MDQ0M1x1MDQzRFx1MDQzQVx1MDQzMC4uLlwiLFxuICAgIGNoYW5nZXNEZXRlY3RlZDogXCJcdUQ4M0RcdURFQTggXHUwNDFFXHUwNDMxXHUwNDNEXHUwNDMwXHUwNDQwXHUwNDQzXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDNFIFx1MDQzOFx1MDQzN1x1MDQzQ1x1MDQzNVx1MDQzRFx1MDQzNVx1MDQzRFx1MDQzOFx1MDQzOToge2NvdW50fVwiLFxuICAgIHJlcGFpcmluZzogXCJcdUQ4M0RcdUREMjcgXHUwNDEyXHUwNDNFXHUwNDQxXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDNCXHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1IHtjb3VudH0gXHUwNDM4XHUwNDM3XHUwNDNDXHUwNDM1XHUwNDNEXHUwNDUxXHUwNDNEXHUwNDNEXHUwNDRCXHUwNDQ1IFx1MDQzRlx1MDQzOFx1MDQzQVx1MDQ0MVx1MDQzNVx1MDQzQlx1MDQzNVx1MDQzOS4uLlwiLFxuICAgIHJlcGFpckNvbXBsZXRlZDogXCJcdTI3MDUgXHUwNDEyXHUwNDNFXHUwNDQxXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDNCXHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQzN1x1MDQzMFx1MDQzMlx1MDQzNVx1MDQ0MFx1MDQ0OFx1MDQzNVx1MDQzRFx1MDQzRToge2NvdW50fSBcdTA0M0ZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0MzVcdTA0MzlcIixcbiAgICBub0NoYXJnZXNGb3JSZXBhaXI6IFwiXHUyNkExIFx1MDQxQVx1MDQzRVx1MDQzQ1x1MDQzOFx1MDQ0MVx1MDQ0MVx1MDQzOFx1MDQzOSBcdTA0MzdcdTA0MzAgXHUwNDMyXHUwNDNFXHUwNDQxXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDNCXHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQzRFx1MDQzNVx1MDQ0MiwgXHUwNDNFXHUwNDM2XHUwNDM4XHUwNDM0XHUwNDMwXHUwNDNEXHUwNDM4XHUwNDM1Li4uXCIsXG4gICAgcHJvdGVjdGlvblByaW9yaXR5OiBcIlx1RDgzRFx1REVFMVx1RkUwRiBcdTA0MUZcdTA0NDBcdTA0MzhcdTA0M0VcdTA0NDBcdTA0MzhcdTA0NDJcdTA0MzVcdTA0NDIgXHUwNDM3XHUwNDMwXHUwNDQ5XHUwNDM4XHUwNDQyXHUwNDRCIFx1MDQzMFx1MDQzQVx1MDQ0Mlx1MDQzOFx1MDQzMlx1MDQzOFx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzMFx1MDQzRFwiLFxuICAgIHBhdHRlcm5BcHBsaWVkOiBcIlx1MDQyOFx1MDQzMFx1MDQzMVx1MDQzQlx1MDQzRVx1MDQzRCBcdTA0M0ZcdTA0NDBcdTA0MzhcdTA0M0NcdTA0MzVcdTA0M0RcdTA0NTFcdTA0M0RcIixcbiAgICBjdXN0b21QYXR0ZXJuOiBcIlx1MDQxRlx1MDQzRVx1MDQzQlx1MDQ0Q1x1MDQzN1x1MDQzRVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQzNVx1MDQzQlx1MDQ0Q1x1MDQ0MVx1MDQzQVx1MDQzOFx1MDQzOSBcdTA0NDhcdTA0MzBcdTA0MzFcdTA0M0JcdTA0M0VcdTA0M0RcIixcbiAgICBsb2dXaW5kb3c6IFwiTG9nc1wiLFxuICAgIGxvZ1dpbmRvd1RpdGxlOiBcIlx1MDQxQlx1MDQzRVx1MDQzM1x1MDQzOCAtIHtib3ROYW1lfVwiLFxuICAgIGRvd25sb2FkTG9nczogXCJcdTA0MjFcdTA0M0FcdTA0MzBcdTA0NDdcdTA0MzBcdTA0NDJcdTA0NEMgXHUwNDFCXHUwNDNFXHUwNDMzXHUwNDM4XCIsXG4gICAgY2xlYXJMb2dzOiBcIlx1MDQxRVx1MDQ0N1x1MDQzOFx1MDQ0MVx1MDQ0Mlx1MDQzOFx1MDQ0Mlx1MDQ0QyBcdTA0MUJcdTA0M0VcdTA0MzNcdTA0MzhcIixcbiAgICBjbG9zZUxvZ3M6IFwiXHUwNDE3XHUwNDMwXHUwNDNBXHUwNDQwXHUwNDRCXHUwNDQyXHUwNDRDXCJcbiAgfSxcblxuICAvLyBGYXJtIE1vZHVsZSAodG8gYmUgaW1wbGVtZW50ZWQpXG4gIGZhcm06IHtcbiAgICB0aXRsZTogXCJXUGxhY2UgXHUwNDEwXHUwNDMyXHUwNDQyXHUwNDNFLVx1MDQyNFx1MDQzMFx1MDQ0MFx1MDQzQ1wiLFxuICAgIHN0YXJ0OiBcIlx1MDQxRFx1MDQzMFx1MDQ0N1x1MDQzMFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIHN0b3A6IFwiXHUwNDFFXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDM4XHUwNDQyXHUwNDRDXCIsXG4gICAgc3RvcHBlZDogXCJcdTA0MTFcdTA0M0VcdTA0NDIgXHUwNDNFXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDNCXHUwNDM1XHUwNDNEXCIsXG4gICAgY2FsaWJyYXRlOiBcIlx1MDQxQVx1MDQzMFx1MDQzQlx1MDQzOFx1MDQzMVx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIHBhaW50T25jZTogXCJcdTA0MTVcdTA0MzRcdTA0MzhcdTA0M0RcdTA0M0VcdTA0NDBcdTA0MzBcdTA0MzdcdTA0M0VcdTA0MzJcdTA0M0VcIixcbiAgICBjaGVja2luZ1N0YXR1czogXCJcdTA0MUZcdTA0NDBcdTA0M0VcdTA0MzJcdTA0MzVcdTA0NDBcdTA0M0FcdTA0MzAgXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDQyXHUwNDQzXHUwNDQxXHUwNDMwLi4uXCIsXG4gICAgY29uZmlndXJhdGlvbjogXCJcdTA0MUFcdTA0M0VcdTA0M0RcdTA0NDRcdTA0MzhcdTA0MzNcdTA0NDNcdTA0NDBcdTA0MzBcdTA0NDZcdTA0MzhcdTA0NEZcIixcbiAgICBkZWxheTogXCJcdTA0MTdcdTA0MzBcdTA0MzRcdTA0MzVcdTA0NDBcdTA0MzZcdTA0M0FcdTA0MzAgKFx1MDQzQ1x1MDQ0MSlcIixcbiAgICBwaXhlbHNQZXJCYXRjaDogXCJcdTA0MUZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0MzVcdTA0MzkgXHUwNDM3XHUwNDMwIFx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQ0NVx1MDQzRVx1MDQzNFwiLFxuICAgIG1pbkNoYXJnZXM6IFwiXHUwNDFDXHUwNDM4XHUwNDNEXHUwNDM4XHUwNDNDXHUwNDMwXHUwNDNCXHUwNDRDXHUwNDNEXHUwNDNFXHUwNDM1IFx1MDQzQVx1MDQzRVx1MDQzQi1cdTA0MzJcdTA0M0VcIixcbiAgICBjb2xvck1vZGU6IFwiXHUwNDIwXHUwNDM1XHUwNDM2XHUwNDM4XHUwNDNDIFx1MDQ0Nlx1MDQzMlx1MDQzNVx1MDQ0Mlx1MDQzRVx1MDQzMlwiLFxuICAgIHJhbmRvbTogXCJcdTA0MjFcdTA0M0JcdTA0NDNcdTA0NDdcdTA0MzBcdTA0MzlcdTA0M0RcdTA0NEJcdTA0MzlcIixcbiAgICBmaXhlZDogXCJcdTA0MjRcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzhcdTA0NDBcdTA0M0VcdTA0MzJcdTA0MzBcdTA0M0RcdTA0M0RcdTA0NEJcdTA0MzlcIixcbiAgICByYW5nZTogXCJcdTA0MTRcdTA0MzhcdTA0MzBcdTA0M0ZcdTA0MzBcdTA0MzdcdTA0M0VcdTA0M0RcIixcbiAgICBmaXhlZENvbG9yOiBcIlx1MDQyNFx1MDQzOFx1MDQzQVx1MDQ0MVx1MDQzOFx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzMFx1MDQzRFx1MDQzRFx1MDQ0Qlx1MDQzOSBcdTA0NDZcdTA0MzJcdTA0MzVcdTA0NDJcIixcbiAgICBhZHZhbmNlZDogXCJcdTA0MjBcdTA0MzBcdTA0NDFcdTA0NDhcdTA0MzhcdTA0NDBcdTA0MzVcdTA0M0RcdTA0M0RcdTA0NEJcdTA0MzVcIixcbiAgICB0aWxlWDogXCJcdTA0MUZcdTA0M0JcdTA0MzhcdTA0NDJcdTA0M0FcdTA0MzAgWFwiLFxuICAgIHRpbGVZOiBcIlx1MDQxRlx1MDQzQlx1MDQzOFx1MDQ0Mlx1MDQzQVx1MDQzMCBZXCIsXG4gICAgY3VzdG9tUGFsZXR0ZTogXCJcdTA0MjFcdTA0MzJcdTA0M0VcdTA0NEYgXHUwNDNGXHUwNDMwXHUwNDNCXHUwNDM4XHUwNDQyXHUwNDQwXHUwNDMwXCIsXG4gICAgcGFsZXR0ZUV4YW1wbGU6IFwiXHUwNDNGXHUwNDQwXHUwNDM4XHUwNDNDXHUwNDM1XHUwNDQwOiAjRkYwMDAwLCMwMEZGMDAsIzAwMDBGRlwiLFxuICAgIGNhcHR1cmU6IFwiXHUwNDE3XHUwNDMwXHUwNDQ1XHUwNDMyXHUwNDMwXHUwNDQyXCIsXG4gICAgcGFpbnRlZDogXCJcdTA0MTdcdTA0MzBcdTA0M0FcdTA0NDBcdTA0MzBcdTA0NDhcdTA0MzVcdTA0M0RcdTA0M0VcIixcbiAgICBjaGFyZ2VzOiBcIlx1MDQxN1x1MDQzMFx1MDQ0MFx1MDQ0Rlx1MDQzNFx1MDQ0QlwiLFxuICAgIHJldHJpZXM6IFwiXHUwNDFGXHUwNDNFXHUwNDMyXHUwNDQyXHUwNDNFXHUwNDQwXHUwNDNEXHUwNDRCXHUwNDM1IFx1MDQzRlx1MDQzRVx1MDQzRlx1MDQ0Qlx1MDQ0Mlx1MDQzQVx1MDQzOFwiLFxuICAgIHRpbGU6IFwiXHUwNDFGXHUwNDNCXHUwNDM4XHUwNDQyXHUwNDNBXHUwNDMwXCIsXG4gICAgY29uZmlnU2F2ZWQ6IFwiXHUwNDFBXHUwNDNFXHUwNDNEXHUwNDQ0XHUwNDM4XHUwNDMzXHUwNDQzXHUwNDQwXHUwNDMwXHUwNDQ2XHUwNDM4XHUwNDRGIFx1MDQ0MVx1MDQzRVx1MDQ0NVx1MDQ0MFx1MDQzMFx1MDQzRFx1MDQzNVx1MDQzRFx1MDQzMFwiLFxuICAgIGNvbmZpZ0xvYWRlZDogXCJcdTA0MUFcdTA0M0VcdTA0M0RcdTA0NDRcdTA0MzhcdTA0MzNcdTA0NDNcdTA0NDBcdTA0MzBcdTA0NDZcdTA0MzhcdTA0NEYgXHUwNDM3XHUwNDMwXHUwNDMzXHUwNDQwXHUwNDQzXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDMwXCIsXG4gICAgY29uZmlnUmVzZXQ6IFwiXHUwNDIxXHUwNDMxXHUwNDQwXHUwNDNFXHUwNDQxIFx1MDQzQVx1MDQzRVx1MDQzRFx1MDQ0NFx1MDQzOFx1MDQzM1x1MDQ0M1x1MDQ0MFx1MDQzMFx1MDQ0Nlx1MDQzOFx1MDQzOFwiLFxuICAgIGNhcHR1cmVJbnN0cnVjdGlvbnM6IFwiXHUwNDFEXHUwNDMwXHUwNDQwXHUwNDM4XHUwNDQxXHUwNDQzXHUwNDM5XHUwNDQyXHUwNDM1IFx1MDQzRlx1MDQzOFx1MDQzQVx1MDQ0MVx1MDQzNVx1MDQzQlx1MDQ0QyBcdTA0MzJcdTA0NDBcdTA0NDNcdTA0NDdcdTA0M0RcdTA0NDNcdTA0NEUgXHUwNDM0XHUwNDNCXHUwNDRGIFx1MDQzN1x1MDQzMFx1MDQ0NVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQzMCBcdTA0M0FcdTA0M0VcdTA0M0VcdTA0NDBcdTA0MzRcdTA0MzhcdTA0M0RcdTA0MzBcdTA0NDIuLi5cIixcbiAgICBiYWNrZW5kT25saW5lOiBcIlx1MDQxMVx1MDQ0RFx1MDQzQVx1MDQ0RFx1MDQzRFx1MDQzNCBcdTA0MUVcdTA0M0RcdTA0M0JcdTA0MzBcdTA0MzlcdTA0M0RcIixcbiAgICBiYWNrZW5kT2ZmbGluZTogXCJcdTA0MTFcdTA0NERcdTA0M0FcdTA0NERcdTA0M0RcdTA0MzQgXHUwNDFFXHUwNDQ0XHUwNDNCXHUwNDMwXHUwNDM5XHUwNDNEXCIsXG4gICAgc3RhcnRpbmdCb3Q6IFwiXHUwNDE3XHUwNDMwXHUwNDNGXHUwNDQzXHUwNDQxXHUwNDNBIFx1MDQzMVx1MDQzRVx1MDQ0Mlx1MDQzMC4uLlwiLFxuXG4gICAgc3RvcHBpbmdCb3Q6IFwiXHUwNDFFXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDNBXHUwNDMwIFx1MDQzMVx1MDQzRVx1MDQ0Mlx1MDQzMC4uLlwiLFxuICAgIGNhbGlicmF0aW5nOiBcIlx1MDQxQVx1MDQzMFx1MDQzQlx1MDQzOFx1MDQzMVx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzQVx1MDQzMC4uLlwiLFxuICAgIGFscmVhZHlSdW5uaW5nOiBcIlx1MDQxMFx1MDQzMlx1MDQ0Mlx1MDQzRS1cdTA0MjRcdTA0MzBcdTA0NDBcdTA0M0MgXHUwNDQzXHUwNDM2XHUwNDM1IFx1MDQzN1x1MDQzMFx1MDQzRlx1MDQ0M1x1MDQ0OVx1MDQzNVx1MDQzRFwiLFxuICAgIGltYWdlUnVubmluZ1dhcm5pbmc6IFwiXHUwNDEwXHUwNDMyXHUwNDQyXHUwNDNFLVx1MDQxOFx1MDQzN1x1MDQzRVx1MDQzMVx1MDQ0MFx1MDQzMFx1MDQzNlx1MDQzNVx1MDQzRFx1MDQzOFx1MDQzNSBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDlcdTA0MzVcdTA0M0RcdTA0M0UuIFx1MDQxN1x1MDQzMFx1MDQzQVx1MDQ0MFx1MDQzRVx1MDQzOVx1MDQ0Mlx1MDQzNSBcdTA0MzVcdTA0MzNcdTA0M0UgXHUwNDNGXHUwNDM1XHUwNDQwXHUwNDM1XHUwNDM0IFx1MDQzN1x1MDQzMFx1MDQzRlx1MDQ0M1x1MDQ0MVx1MDQzQVx1MDQzRVx1MDQzQyBcdTA0MTBcdTA0MzJcdTA0NDJcdTA0M0UtXHUwNDI0XHUwNDMwXHUwNDQwXHUwNDNDXHUwNDMwLlwiLFxuICAgIHNlbGVjdFBvc2l0aW9uOiBcIlx1MDQxMlx1MDQ0Qlx1MDQzMVx1MDQ0MFx1MDQzMFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIHNlbGVjdFBvc2l0aW9uQWxlcnQ6IFwiXHVEODNDXHVERkFGIFx1MDQxRFx1MDQzMFx1MDQ0MFx1MDQzOFx1MDQ0MVx1MDQ0M1x1MDQzOVx1MDQ0Mlx1MDQzNSBcdTA0M0ZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0NEMgXHUwNDMyIFx1MDQxRlx1MDQyM1x1MDQyMVx1MDQyMlx1MDQxRVx1MDQxOSBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0MzggXHUwNDNBXHUwNDMwXHUwNDQwXHUwNDQyXHUwNDRCLCBcdTA0NDdcdTA0NDJcdTA0M0VcdTA0MzFcdTA0NEIgXHUwNDNFXHUwNDMxXHUwNDNFXHUwNDM3XHUwNDNEXHUwNDMwXHUwNDQ3XHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQzRVx1MDQzMVx1MDQzQlx1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQ0QyBcdTA0NDRcdTA0MzBcdTA0NDBcdTA0M0NcdTA0MzAuXCIsXG4gICAgd2FpdGluZ1Bvc2l0aW9uOiBcIlx1RDgzRFx1REM0NiBcdTA0MUVcdTA0MzZcdTA0MzhcdTA0MzRcdTA0MzBcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDQwXHUwNDQyXHUwNDNFXHUwNDMyXHUwNDNFXHUwNDMzXHUwNDNFIFx1MDQzRlx1MDQzOFx1MDQzQVx1MDQ0MVx1MDQzNVx1MDQzQlx1MDQ0Ri4uLi5cIixcbiAgICBwb3NpdGlvblNldDogXCJcdTI3MDUgXHUwNDFFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDRDIFx1MDQ0M1x1MDQ0MVx1MDQ0Mlx1MDQzMFx1MDQzRFx1MDQzRVx1MDQzMlx1MDQzQlx1MDQzNVx1MDQzRFx1MDQzMCEgXHUwNDIwXHUwNDMwXHUwNDM0XHUwNDM4XHUwNDQzXHUwNDQxOiA1MDBweFwiLFxuICAgIHBvc2l0aW9uVGltZW91dDogXCJcdTI3NEMgXHUwNDIyXHUwNDMwXHUwNDM5XHUwNDNDXHUwNDMwXHUwNDQzXHUwNDQyIFx1MDQzMlx1MDQ0Qlx1MDQzMVx1MDQzRVx1MDQ0MFx1MDQzMCBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0MzhcIixcbiAgICBtaXNzaW5nUG9zaXRpb246IFwiXHUyNzRDIFx1MDQxMlx1MDQ0Qlx1MDQzMVx1MDQzNVx1MDQ0MFx1MDQzOFx1MDQ0Mlx1MDQzNSBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NEMgXHUwNDQxIFx1MDQzRlx1MDQzRVx1MDQzQ1x1MDQzRVx1MDQ0OVx1MDQ0Q1x1MDQ0RSBcdTAwQUJcdTA0MTJcdTA0NEJcdTA0MzFcdTA0NDBcdTA0MzBcdTA0NDJcdTA0NEMgXHUwNDNFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDRDXHUwMEJCXCIsXG4gICAgZmFybVJhZGl1czogXCJcdTA0MjBcdTA0MzBcdTA0MzRcdTA0MzhcdTA0NDNcdTA0NDEgXHUwNDQ0XHUwNDMwXHUwNDQwXHUwNDNDXHUwNDMwXCIsXG4gICAgcG9zaXRpb25JbmZvOiBcIlx1MDQyMlx1MDQzNVx1MDQzQVx1MDQ0M1x1MDQ0OVx1MDQzMFx1MDQ0RiBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NENcIixcbiAgICBmYXJtaW5nSW5SYWRpdXM6IFwiXHVEODNDXHVERjNFIFx1MDQyNFx1MDQzMFx1MDQ0MFx1MDQzQyBcdTA0MzIgXHUwNDQwXHUwNDMwXHUwNDM0XHUwNDM4XHUwNDQzXHUwNDQxXHUwNDM1IHtyYWRpdXN9cHggXHUwNDNFXHUwNDQyICh7eH0se3l9KVwiLFxuICAgIHNlbGVjdEVtcHR5QXJlYTogXCJcdTI2QTBcdUZFMEYgXHUwNDEyXHUwNDEwXHUwNDE2XHUwNDFEXHUwNDFFOiBcdTA0MTJcdTA0NEJcdTA0MzFcdTA0MzVcdTA0NDBcdTA0MzhcdTA0NDJcdTA0MzUgXHUwNDFGXHUwNDIzXHUwNDIxXHUwNDIyXHUwNDIzXHUwNDJFIFx1MDQzRVx1MDQzMVx1MDQzQlx1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQ0QywgXHUwNDQ3XHUwNDQyXHUwNDNFXHUwNDMxXHUwNDRCIFx1MDQzOFx1MDQzN1x1MDQzMVx1MDQzNVx1MDQzNlx1MDQzMFx1MDQ0Mlx1MDQ0QyBcdTA0M0FcdTA0M0VcdTA0M0RcdTA0NDRcdTA0M0JcdTA0MzhcdTA0M0FcdTA0NDJcdTA0M0VcdTA0MzIuXCIsXG4gICAgbm9Qb3NpdGlvbjogXCJcdTA0MURcdTA0MzVcdTA0NDIgXHUwNDNFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDM4XCIsXG4gICAgY3VycmVudFpvbmU6IFwiXHUwNDFFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDRDOiAoe3h9LHt5fSlcIixcbiAgICBhdXRvU2VsZWN0UG9zaXRpb246IFwiXHVEODNDXHVERkFGIFx1MDQyMVx1MDQzRFx1MDQzMFx1MDQ0N1x1MDQzMFx1MDQzQlx1MDQzMCBcdTA0MzJcdTA0NEJcdTA0MzFcdTA0MzVcdTA0NDBcdTA0MzhcdTA0NDJcdTA0MzUgXHUwNDNFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDRDLiBcdTA0MURcdTA0MzBcdTA0NDBcdTA0MzhcdTA0NDFcdTA0NDNcdTA0MzlcdTA0NDJcdTA0MzUgXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDRDIFx1MDQzRFx1MDQzMCBcdTA0M0FcdTA0MzBcdTA0NDBcdTA0NDJcdTA0MzUsIFx1MDQ0N1x1MDQ0Mlx1MDQzRVx1MDQzMVx1MDQ0QiBcdTA0M0VcdTA0MzFcdTA0M0VcdTA0MzdcdTA0M0RcdTA0MzBcdTA0NDdcdTA0MzhcdTA0NDJcdTA0NEMgXHUwNDNFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDRDIFx1MDQ0NFx1MDQzMFx1MDQ0MFx1MDQzQ1x1MDQzMC5cIixcbiAgICBsb2dXaW5kb3c6IFwiTG9nc1wiLFxuICAgIGxvZ1dpbmRvd1RpdGxlOiBcIlx1MDQxQlx1MDQzRVx1MDQzM1x1MDQzOCAtIHtib3ROYW1lfVwiLFxuICAgIGRvd25sb2FkTG9nczogXCJcdTA0MjFcdTA0M0FcdTA0MzBcdTA0NDdcdTA0MzBcdTA0NDJcdTA0NEMgXHUwNDFCXHUwNDNFXHUwNDMzXHUwNDM4XCIsXG4gICAgY2xlYXJMb2dzOiBcIlx1MDQxRVx1MDQ0N1x1MDQzOFx1MDQ0MVx1MDQ0Mlx1MDQzOFx1MDQ0Mlx1MDQ0QyBcdTA0MUJcdTA0M0VcdTA0MzNcdTA0MzhcIixcbiAgICBjbG9zZUxvZ3M6IFwiXHUwNDE3XHUwNDMwXHUwNDNBXHUwNDQwXHUwNDRCXHUwNDQyXHUwNDRDXCJcbiAgfSxcblxuICAvLyBDb21tb24vU2hhcmVkXG4gIGNvbW1vbjoge1xuICAgIHllczogXCJcdTA0MTRcdTA0MzBcIixcbiAgICBubzogXCJcdTA0MURcdTA0MzVcdTA0NDJcIixcbiAgICBvazogXCJcdTA0MUVcdTA0MUFcIixcbiAgICBjYW5jZWw6IFwiXHUwNDFFXHUwNDQyXHUwNDNDXHUwNDM1XHUwNDNEXHUwNDM4XHUwNDQyXHUwNDRDXCIsXG4gICAgY2xvc2U6IFwiXHUwNDE3XHUwNDMwXHUwNDNBXHUwNDQwXHUwNDRCXHUwNDQyXHUwNDRDXCIsXG4gICAgc2F2ZTogXCJcdTA0MjFcdTA0M0VcdTA0NDVcdTA0NDBcdTA0MzBcdTA0M0RcdTA0MzhcdTA0NDJcdTA0NENcIixcbiAgICBsb2FkOiBcIlx1MDQxN1x1MDQzMFx1MDQzM1x1MDQ0MFx1MDQ0M1x1MDQzN1x1MDQzOFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIGRlbGV0ZTogXCJcdTA0MjNcdTA0MzRcdTA0MzBcdTA0M0JcdTA0MzhcdTA0NDJcdTA0NENcIixcbiAgICBlZGl0OiBcIlx1MDQxOFx1MDQzN1x1MDQzQ1x1MDQzNVx1MDQzRFx1MDQzOFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIHN0YXJ0OiBcIlx1MDQxRFx1MDQzMFx1MDQ0N1x1MDQzMFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIHN0b3A6IFwiXHUwNDE3XHUwNDMwXHUwNDNBXHUwNDNFXHUwNDNEXHUwNDQ3XHUwNDM4XHUwNDQyXHUwNDRDXCIsXG4gICAgcGF1c2U6IFwiXHUwNDFGXHUwNDQwXHUwNDM4XHUwNDNFXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDM4XHUwNDQyXHUwNDRDXCIsXG4gICAgcmVzdW1lOiBcIlx1MDQxRlx1MDQ0MFx1MDQzRVx1MDQzNFx1MDQzRVx1MDQzQlx1MDQzNlx1MDQzOFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIHJlc2V0OiBcIlx1MDQyMVx1MDQzMVx1MDQ0MFx1MDQzRVx1MDQ0MVx1MDQzOFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIHNldHRpbmdzOiBcIlx1MDQxRFx1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQ0MFx1MDQzRVx1MDQzOVx1MDQzQVx1MDQzOFwiLFxuICAgIGhlbHA6IFwiXHUwNDFGXHUwNDNFXHUwNDNDXHUwNDNFXHUwNDQ5XHUwNDRDXCIsXG4gICAgYWJvdXQ6IFwiXHUwNDE4XHUwNDNEXHUwNDQ0XHUwNDNFXHUwNDQwXHUwNDNDXHUwNDMwXHUwNDQ2XHUwNDM4XHUwNDRGXCIsXG4gICAgbGFuZ3VhZ2U6IFwiXHUwNDJGXHUwNDM3XHUwNDRCXHUwNDNBXCIsXG4gICAgbG9hZGluZzogXCJcdTA0MTdcdTA0MzBcdTA0MzNcdTA0NDBcdTA0NDNcdTA0MzdcdTA0M0FcdTA0MzAuLi5cIixcbiAgICBlcnJvcjogXCJcdTA0MUVcdTA0NDhcdTA0MzhcdTA0MzFcdTA0M0FcdTA0MzBcIixcbiAgICBzdWNjZXNzOiBcIlx1MDQyM1x1MDQ0MVx1MDQzRlx1MDQzNVx1MDQ0NVwiLFxuICAgIHdhcm5pbmc6IFwiXHUwNDFGXHUwNDQwXHUwNDM1XHUwNDM0XHUwNDQzXHUwNDNGXHUwNDQwXHUwNDM1XHUwNDM2XHUwNDM0XHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1XCIsXG4gICAgaW5mbzogXCJcdTA0MThcdTA0M0RcdTA0NDRcdTA0M0VcdTA0NDBcdTA0M0NcdTA0MzBcdTA0NDZcdTA0MzhcdTA0NEZcIixcbiAgICBsYW5ndWFnZUNoYW5nZWQ6IFwiXHUwNDJGXHUwNDM3XHUwNDRCXHUwNDNBIFx1MDQzOFx1MDQzN1x1MDQzQ1x1MDQzNVx1MDQzRFx1MDQzNVx1MDQzRCBcdTA0M0RcdTA0MzAge2xhbmd1YWdlfVwiXG4gIH0sXG5cbiAgLy8gR3VhcmQgTW9kdWxlXG4gIGd1YXJkOiB7XG4gICAgdGl0bGU6IFwiV1BsYWNlIFx1MDQxMFx1MDQzMlx1MDQ0Mlx1MDQzRS1cdTA0MTdcdTA0MzBcdTA0NDlcdTA0MzhcdTA0NDJcdTA0MzBcIixcbiAgICBpbml0Qm90OiBcIlx1MDQxOFx1MDQzRFx1MDQzOFx1MDQ0Nlx1MDQzOFx1MDQzMFx1MDQzQlx1MDQzOFx1MDQzN1x1MDQzOFx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQ0QyBHdWFyZC1CT1RcIixcbiAgICBzZWxlY3RBcmVhOiBcIlx1MDQxMlx1MDQ0Qlx1MDQzMVx1MDQ0MFx1MDQzMFx1MDQ0Mlx1MDQ0QyBcdTA0MUVcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NENcIixcbiAgICBjYXB0dXJlQXJlYTogXCJcdTA0MTdcdTA0MzBcdTA0NDVcdTA0MzJcdTA0MzBcdTA0NDJcdTA0MzhcdTA0NDJcdTA0NEMgXHUwNDFFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDRDXCIsXG4gICAgc3RhcnRQcm90ZWN0aW9uOiBcIlx1MDQxRFx1MDQzMFx1MDQ0N1x1MDQzMFx1MDQ0Mlx1MDQ0QyBcdTA0MTdcdTA0MzBcdTA0NDlcdTA0MzhcdTA0NDJcdTA0NDNcIixcbiAgICBzdG9wUHJvdGVjdGlvbjogXCJcdTA0MUVcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0MzhcdTA0NDJcdTA0NEMgXHUwNDE3XHUwNDMwXHUwNDQ5XHUwNDM4XHUwNDQyXHUwNDQzXCIsXG4gICAgdXBwZXJMZWZ0OiBcIlx1MDQxMlx1MDQzNVx1MDQ0MFx1MDQ0NVx1MDQzRFx1MDQzOFx1MDQzOSBcdTA0MUJcdTA0MzVcdTA0MzJcdTA0NEJcdTA0MzkgXHUwNDIzXHUwNDMzXHUwNDNFXHUwNDNCXCIsXG4gICAgbG93ZXJSaWdodDogXCJcdTA0MURcdTA0MzhcdTA0MzZcdTA0M0RcdTA0MzhcdTA0MzkgXHUwNDFGXHUwNDQwXHUwNDMwXHUwNDMyXHUwNDRCXHUwNDM5IFx1MDQyM1x1MDQzM1x1MDQzRVx1MDQzQlwiLFxuICAgIHByb3RlY3RlZFBpeGVsczogXCJcdTA0MTdcdTA0MzBcdTA0NDlcdTA0MzhcdTA0NDlcdTA0MzVcdTA0M0RcdTA0M0RcdTA0NEJcdTA0MzUgXHUwNDFGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM4XCIsXG4gICAgZGV0ZWN0ZWRDaGFuZ2VzOiBcIlx1MDQxRVx1MDQzMVx1MDQzRFx1MDQzMFx1MDQ0MFx1MDQ0M1x1MDQzNlx1MDQzNVx1MDQzRFx1MDQzRFx1MDQ0Qlx1MDQzNSBcdTA0MThcdTA0MzdcdTA0M0NcdTA0MzVcdTA0M0RcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NEZcIixcbiAgICByZXBhaXJlZFBpeGVsczogXCJcdTA0MTJcdTA0M0VcdTA0NDFcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0M0RcdTA0NEJcdTA0MzUgXHUwNDFGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM4XCIsXG4gICAgY2hhcmdlczogXCJcdTA0MTdcdTA0MzBcdTA0NDBcdTA0NEZcdTA0MzRcdTA0NEJcIixcbiAgICB3YWl0aW5nSW5pdDogXCJcdTA0MUVcdTA0MzZcdTA0MzhcdTA0MzRcdTA0MzBcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDM4XHUwNDNEXHUwNDM4XHUwNDQ2XHUwNDM4XHUwNDMwXHUwNDNCXHUwNDM4XHUwNDM3XHUwNDMwXHUwNDQ2XHUwNDM4XHUwNDM4Li4uXCIsXG4gICAgY2hlY2tpbmdDb2xvcnM6IFwiXHVEODNDXHVERkE4IFx1MDQxRlx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzNVx1MDQ0MFx1MDQzQVx1MDQzMCBcdTA0MzRcdTA0M0VcdTA0NDFcdTA0NDJcdTA0NDNcdTA0M0ZcdTA0M0RcdTA0NEJcdTA0NDUgXHUwNDQ2XHUwNDMyXHUwNDM1XHUwNDQyXHUwNDNFXHUwNDMyLi4uXCIsXG4gICAgbm9Db2xvcnNGb3VuZDogXCJcdTI3NEMgXHUwNDI2XHUwNDMyXHUwNDM1XHUwNDQyXHUwNDMwIFx1MDQzRFx1MDQzNSBcdTA0M0RcdTA0MzBcdTA0MzlcdTA0MzRcdTA0MzVcdTA0M0RcdTA0NEIuIFx1MDQxRVx1MDQ0Mlx1MDQzQVx1MDQ0MFx1MDQzRVx1MDQzOVx1MDQ0Mlx1MDQzNSBcdTA0M0ZcdTA0MzBcdTA0M0JcdTA0MzhcdTA0NDJcdTA0NDBcdTA0NDMgXHUwNDQ2XHUwNDMyXHUwNDM1XHUwNDQyXHUwNDNFXHUwNDMyIFx1MDQzRFx1MDQzMCBcdTA0NDFcdTA0MzBcdTA0MzlcdTA0NDJcdTA0MzUuXCIsXG4gICAgY29sb3JzRm91bmQ6IFwiXHUyNzA1IFx1MDQxRFx1MDQzMFx1MDQzOVx1MDQzNFx1MDQzNVx1MDQzRFx1MDQzRSB7Y291bnR9IFx1MDQzNFx1MDQzRVx1MDQ0MVx1MDQ0Mlx1MDQ0M1x1MDQzRlx1MDQzRFx1MDQ0Qlx1MDQ0NSBcdTA0NDZcdTA0MzJcdTA0MzVcdTA0NDJcdTA0M0VcdTA0MzJcIixcbiAgICBpbml0U3VjY2VzczogXCJcdTI3MDUgR3VhcmQtQk9UIFx1MDQ0M1x1MDQ0MVx1MDQzRlx1MDQzNVx1MDQ0OFx1MDQzRFx1MDQzRSBcdTA0MzhcdTA0M0RcdTA0MzhcdTA0NDZcdTA0MzhcdTA0MzBcdTA0M0JcdTA0MzhcdTA0MzdcdTA0MzhcdTA0NDBcdTA0M0VcdTA0MzJcdTA0MzBcdTA0M0RcIixcbiAgICBpbml0RXJyb3I6IFwiXHUyNzRDIFx1MDQxRVx1MDQ0OFx1MDQzOFx1MDQzMVx1MDQzQVx1MDQzMCBcdTA0MzhcdTA0M0RcdTA0MzhcdTA0NDZcdTA0MzhcdTA0MzBcdTA0M0JcdTA0MzhcdTA0MzdcdTA0MzBcdTA0NDZcdTA0MzhcdTA0MzggR3VhcmQtQk9UXCIsXG4gICAgaW52YWxpZENvb3JkczogXCJcdTI3NEMgXHUwNDFEXHUwNDM1XHUwNDM0XHUwNDM1XHUwNDM5XHUwNDQxXHUwNDQyXHUwNDMyXHUwNDM4XHUwNDQyXHUwNDM1XHUwNDNCXHUwNDRDXHUwNDNEXHUwNDRCXHUwNDM1IFx1MDQzQVx1MDQzRVx1MDQzRVx1MDQ0MFx1MDQzNFx1MDQzOFx1MDQzRFx1MDQzMFx1MDQ0Mlx1MDQ0QlwiLFxuICAgIGludmFsaWRBcmVhOiBcIlx1Mjc0QyBcdTA0MUVcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NEMgXHUwNDM0XHUwNDNFXHUwNDNCXHUwNDM2XHUwNDNEXHUwNDMwIFx1MDQzOFx1MDQzQ1x1MDQzNVx1MDQ0Mlx1MDQ0QyBcdTA0MzJcdTA0MzVcdTA0NDBcdTA0NDVcdTA0M0RcdTA0MzhcdTA0MzkgXHUwNDNCXHUwNDM1XHUwNDMyXHUwNDRCXHUwNDM5IFx1MDQ0M1x1MDQzM1x1MDQzRVx1MDQzQiBcdTA0M0NcdTA0MzVcdTA0M0RcdTA0NENcdTA0NDhcdTA0MzUgXHUwNDNEXHUwNDM4XHUwNDM2XHUwNDNEXHUwNDM1XHUwNDMzXHUwNDNFIFx1MDQzRlx1MDQ0MFx1MDQzMFx1MDQzMlx1MDQzRVx1MDQzM1x1MDQzRSBcdTA0NDNcdTA0MzNcdTA0M0JcdTA0MzBcIixcbiAgICBhcmVhVG9vTGFyZ2U6IFwiXHUyNzRDIFx1MDQxRVx1MDQzMVx1MDQzQlx1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQ0QyBcdTA0NDFcdTA0M0JcdTA0MzhcdTA0NDhcdTA0M0FcdTA0M0VcdTA0M0MgXHUwNDMxXHUwNDNFXHUwNDNCXHUwNDRDXHUwNDQ4XHUwNDMwXHUwNDRGOiB7c2l6ZX0gXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM1XHUwNDM5IChcdTA0M0NcdTA0MzBcdTA0M0FcdTA0NDFcdTA0MzhcdTA0M0NcdTA0NDNcdTA0M0M6IHttYXh9KVwiLFxuICAgIGNhcHR1cmluZ0FyZWE6IFwiXHVEODNEXHVEQ0Y4IFx1MDQxN1x1MDQzMFx1MDQ0NVx1MDQzMlx1MDQzMFx1MDQ0MiBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0MzggXHUwNDM3XHUwNDMwXHUwNDQ5XHUwNDM4XHUwNDQyXHUwNDRCLi4uXCIsXG4gICAgYXJlYUNhcHR1cmVkOiBcIlx1MjcwNSBcdTA0MUVcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NEMgXHUwNDM3XHUwNDMwXHUwNDQ1XHUwNDMyXHUwNDMwXHUwNDQ3XHUwNDM1XHUwNDNEXHUwNDMwOiB7Y291bnR9IFx1MDQzRlx1MDQzOFx1MDQzQVx1MDQ0MVx1MDQzNVx1MDQzQlx1MDQzNVx1MDQzOSBcdTA0M0ZcdTA0M0VcdTA0MzQgXHUwNDM3XHUwNDMwXHUwNDQ5XHUwNDM4XHUwNDQyXHUwNDNFXHUwNDM5XCIsXG4gICAgY2FwdHVyZUVycm9yOiBcIlx1Mjc0QyBcdTA0MUVcdTA0NDhcdTA0MzhcdTA0MzFcdTA0M0FcdTA0MzAgXHUwNDM3XHUwNDMwXHUwNDQ1XHUwNDMyXHUwNDMwXHUwNDQyXHUwNDMwIFx1MDQzRVx1MDQzMVx1MDQzQlx1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQzODoge2Vycm9yfVwiLFxuICAgIGNhcHR1cmVGaXJzdDogXCJcdTI3NEMgXHUwNDIxXHUwNDNEXHUwNDMwXHUwNDQ3XHUwNDMwXHUwNDNCXHUwNDMwIFx1MDQzN1x1MDQzMFx1MDQ0NVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQzOFx1MDQ0Mlx1MDQzNSBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NEMgXHUwNDM3XHUwNDMwXHUwNDQ5XHUwNDM4XHUwNDQyXHUwNDRCXCIsXG4gICAgcHJvdGVjdGlvblN0YXJ0ZWQ6IFwiXHVEODNEXHVERUUxXHVGRTBGIFx1MDQxN1x1MDQzMFx1MDQ0OVx1MDQzOFx1MDQ0Mlx1MDQzMCBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDlcdTA0MzVcdTA0M0RcdTA0MzAgLSBcdTA0M0NcdTA0M0VcdTA0M0RcdTA0MzhcdTA0NDJcdTA0M0VcdTA0NDBcdTA0MzhcdTA0M0RcdTA0MzMgXHUwNDNFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDM4XCIsXG4gICAgcHJvdGVjdGlvblN0b3BwZWQ6IFwiXHUyM0Y5XHVGRTBGIFx1MDQxN1x1MDQzMFx1MDQ0OVx1MDQzOFx1MDQ0Mlx1MDQzMCBcdTA0M0VcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0MzBcIixcbiAgICBub0NoYW5nZXM6IFwiXHUyNzA1IFx1MDQxN1x1MDQzMFx1MDQ0OVx1MDQzOFx1MDQ0OVx1MDQzNVx1MDQzRFx1MDQzRFx1MDQzMFx1MDQ0RiBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NEMgLSBcdTA0MzhcdTA0MzdcdTA0M0NcdTA0MzVcdTA0M0RcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzkgXHUwNDNEXHUwNDM1IFx1MDQzRVx1MDQzMVx1MDQzRFx1MDQzMFx1MDQ0MFx1MDQ0M1x1MDQzNlx1MDQzNVx1MDQzRFx1MDQzRVwiLFxuICAgIGNoYW5nZXNEZXRlY3RlZDogXCJcdUQ4M0RcdURFQTgge2NvdW50fSBcdTA0MzhcdTA0MzdcdTA0M0NcdTA0MzVcdTA0M0RcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzkgXHUwNDNFXHUwNDMxXHUwNDNEXHUwNDMwXHUwNDQwXHUwNDQzXHUwNDM2XHUwNDM1XHUwNDNEXHUwNDNFIFx1MDQzMiBcdTA0MzdcdTA0MzBcdTA0NDlcdTA0MzhcdTA0NDlcdTA0MzVcdTA0M0RcdTA0M0RcdTA0M0VcdTA0MzkgXHUwNDNFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDM4XCIsXG4gICAgcmVwYWlyaW5nOiBcIlx1RDgzRFx1REVFMFx1RkUwRiBcdTA0MTJcdTA0M0VcdTA0NDFcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzUge2NvdW50fSBcdTA0MzhcdTA0MzdcdTA0M0NcdTA0MzVcdTA0M0RcdTA0MzVcdTA0M0RcdTA0M0RcdTA0NEJcdTA0NDUgXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM1XHUwNDM5Li4uXCIsXG4gICAgcmVwYWlyZWRTdWNjZXNzOiBcIlx1MjcwNSBcdTA0MjNcdTA0NDFcdTA0M0ZcdTA0MzVcdTA0NDhcdTA0M0RcdTA0M0UgXHUwNDMyXHUwNDNFXHUwNDQxXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDNCXHUwNDM1XHUwNDNEXHUwNDNFIHtjb3VudH0gXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM1XHUwNDM5XCIsXG4gICAgcmVwYWlyRXJyb3I6IFwiXHUyNzRDIFx1MDQxRVx1MDQ0OFx1MDQzOFx1MDQzMVx1MDQzQVx1MDQzMCBcdTA0MzJcdTA0M0VcdTA0NDFcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NEYgXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM1XHUwNDM5OiB7ZXJyb3J9XCIsXG4gICAgbm9DaGFyZ2VzOiBcIlx1MjZBMFx1RkUwRiBcdTA0MURcdTA0MzVcdTA0MzRcdTA0M0VcdTA0NDFcdTA0NDJcdTA0MzBcdTA0NDJcdTA0M0VcdTA0NDdcdTA0M0RcdTA0M0UgXHUwNDM3XHUwNDMwXHUwNDQwXHUwNDRGXHUwNDM0XHUwNDNFXHUwNDMyIFx1MDQzNFx1MDQzQlx1MDQ0RiBcdTA0MzJcdTA0M0VcdTA0NDFcdTA0NDFcdTA0NDJcdTA0MzBcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0MzhcdTA0NEYgXHUwNDM4XHUwNDM3XHUwNDNDXHUwNDM1XHUwNDNEXHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM5XCIsXG4gICAgY2hlY2tpbmdDaGFuZ2VzOiBcIlx1RDgzRFx1REQwRCBcdTA0MUZcdTA0NDBcdTA0M0VcdTA0MzJcdTA0MzVcdTA0NDBcdTA0M0FcdTA0MzAgXHUwNDM4XHUwNDM3XHUwNDNDXHUwNDM1XHUwNDNEXHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM5IFx1MDQzMiBcdTA0MzdcdTA0MzBcdTA0NDlcdTA0MzhcdTA0NDlcdTA0MzVcdTA0M0RcdTA0M0RcdTA0M0VcdTA0MzkgXHUwNDNFXHUwNDMxXHUwNDNCXHUwNDMwXHUwNDQxXHUwNDQyXHUwNDM4Li4uXCIsXG4gICAgZXJyb3JDaGVja2luZzogXCJcdTI3NEMgXHUwNDFFXHUwNDQ4XHUwNDM4XHUwNDMxXHUwNDNBXHUwNDMwIFx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzNVx1MDQ0MFx1MDQzQVx1MDQzOCBcdTA0MzhcdTA0MzdcdTA0M0NcdTA0MzVcdTA0M0RcdTA0MzVcdTA0M0RcdTA0MzhcdTA0Mzk6IHtlcnJvcn1cIixcbiAgICBndWFyZEFjdGl2ZTogXCJcdUQ4M0RcdURFRTFcdUZFMEYgXHUwNDIxXHUwNDQyXHUwNDQwXHUwNDMwXHUwNDM2IFx1MDQzMFx1MDQzQVx1MDQ0Mlx1MDQzOFx1MDQzMlx1MDQzNVx1MDQzRCAtIFx1MDQzRVx1MDQzMVx1MDQzQlx1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQ0QyBcdTA0M0ZcdTA0M0VcdTA0MzQgXHUwNDM3XHUwNDMwXHUwNDQ5XHUwNDM4XHUwNDQyXHUwNDNFXHUwNDM5XCIsXG4gICAgbGFzdENoZWNrOiBcIlx1MDQxRlx1MDQzRVx1MDQ0MVx1MDQzQlx1MDQzNVx1MDQzNFx1MDQzRFx1MDQ0Rlx1MDQ0RiBcdTA0M0ZcdTA0NDBcdTA0M0VcdTA0MzJcdTA0MzVcdTA0NDBcdTA0M0FcdTA0MzA6IHt0aW1lfVwiLFxuICAgIG5leHRDaGVjazogXCJcdTA0MjFcdTA0M0JcdTA0MzVcdTA0MzRcdTA0NDNcdTA0NEVcdTA0NDlcdTA0MzBcdTA0NEYgXHUwNDNGXHUwNDQwXHUwNDNFXHUwNDMyXHUwNDM1XHUwNDQwXHUwNDNBXHUwNDMwIFx1MDQ0N1x1MDQzNVx1MDQ0MFx1MDQzNVx1MDQzNzoge3RpbWV9XHUwNDQxXCIsXG4gICAgYXV0b0luaXRpYWxpemluZzogXCJcdUQ4M0VcdUREMTYgXHUwNDEwXHUwNDMyXHUwNDQyXHUwNDNFXHUwNDNDXHUwNDMwXHUwNDQyXHUwNDM4XHUwNDQ3XHUwNDM1XHUwNDQxXHUwNDNBXHUwNDMwXHUwNDRGIFx1MDQzOFx1MDQzRFx1MDQzOFx1MDQ0Nlx1MDQzOFx1MDQzMFx1MDQzQlx1MDQzOFx1MDQzN1x1MDQzMFx1MDQ0Nlx1MDQzOFx1MDQ0Ri4uLlwiLFxuICAgIGF1dG9Jbml0U3VjY2VzczogXCJcdTI3MDUgR3VhcmQtQk9UIFx1MDQzN1x1MDQzMFx1MDQzRlx1MDQ0M1x1MDQ0OVx1MDQzNVx1MDQzRCBcdTA0MzBcdTA0MzJcdTA0NDJcdTA0M0VcdTA0M0NcdTA0MzBcdTA0NDJcdTA0MzhcdTA0NDdcdTA0MzVcdTA0NDFcdTA0M0FcdTA0MzhcIixcbiAgICBhdXRvSW5pdEZhaWxlZDogXCJcdTI2QTBcdUZFMEYgXHUwNDFEXHUwNDM1IFx1MDQ0M1x1MDQzNFx1MDQzMFx1MDQzQlx1MDQzRVx1MDQ0MVx1MDQ0QyBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDFcdTA0NDJcdTA0MzhcdTA0NDJcdTA0NEMgXHUwNDMwXHUwNDMyXHUwNDQyXHUwNDNFXHUwNDNDXHUwNDMwXHUwNDQyXHUwNDM4XHUwNDQ3XHUwNDM1XHUwNDQxXHUwNDNBXHUwNDM4LiBcdTA0MThcdTA0NDFcdTA0M0ZcdTA0M0VcdTA0M0JcdTA0NENcdTA0MzdcdTA0NDNcdTA0MzlcdTA0NDJcdTA0MzUgXHUwNDNBXHUwNDNEXHUwNDNFXHUwNDNGXHUwNDNBXHUwNDQzIFx1MDQ0MFx1MDQ0M1x1MDQ0N1x1MDQzRFx1MDQzRVx1MDQzM1x1MDQzRSBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDFcdTA0M0FcdTA0MzAuXCIsXG4gICAgbWFudWFsSW5pdFJlcXVpcmVkOiBcIlx1RDgzRFx1REQyNyBcdTA0MjJcdTA0NDBcdTA0MzVcdTA0MzFcdTA0NDNcdTA0MzVcdTA0NDJcdTA0NDFcdTA0NEYgXHUwNDQwXHUwNDQzXHUwNDQ3XHUwNDNEXHUwNDMwXHUwNDRGIFx1MDQzOFx1MDQzRFx1MDQzOFx1MDQ0Nlx1MDQzOFx1MDQzMFx1MDQzQlx1MDQzOFx1MDQzN1x1MDQzMFx1MDQ0Nlx1MDQzOFx1MDQ0RlwiLFxuICAgIHBhbGV0dGVEZXRlY3RlZDogXCJcdUQ4M0NcdURGQTggXHUwNDI2XHUwNDMyXHUwNDM1XHUwNDQyXHUwNDNFXHUwNDMyXHUwNDMwXHUwNDRGIFx1MDQzRlx1MDQzMFx1MDQzQlx1MDQzOFx1MDQ0Mlx1MDQ0MFx1MDQzMCBcdTA0M0VcdTA0MzFcdTA0M0RcdTA0MzBcdTA0NDBcdTA0NDNcdTA0MzZcdTA0MzVcdTA0M0RcdTA0MzBcIixcbiAgICBwYWxldHRlTm90Rm91bmQ6IFwiXHVEODNEXHVERDBEIFx1MDQxRlx1MDQzRVx1MDQzOFx1MDQ0MVx1MDQzQSBcdTA0NDZcdTA0MzJcdTA0MzVcdTA0NDJcdTA0M0VcdTA0MzJcdTA0M0VcdTA0MzkgXHUwNDNGXHUwNDMwXHUwNDNCXHUwNDM4XHUwNDQyXHUwNDQwXHUwNDRCLi4uXCIsXG4gICAgY2xpY2tpbmdQYWludEJ1dHRvbjogXCJcdUQ4M0RcdURDNDYgXHUwNDFEXHUwNDMwXHUwNDM2XHUwNDMwXHUwNDQyXHUwNDM4XHUwNDM1IFx1MDQzQVx1MDQzRFx1MDQzRVx1MDQzRlx1MDQzQVx1MDQzOCBcdTAwQUJQYWludFx1MDBCQi4uLlwiLFxuICAgIHBhaW50QnV0dG9uTm90Rm91bmQ6IFwiXHUyNzRDIFx1MDQxQVx1MDQzRFx1MDQzRVx1MDQzRlx1MDQzQVx1MDQzMCBcdTAwQUJQYWludFx1MDBCQiBcdTA0M0RcdTA0MzUgXHUwNDNEXHUwNDMwXHUwNDM5XHUwNDM0XHUwNDM1XHUwNDNEXHUwNDMwXCIsXG4gICAgc2VsZWN0VXBwZXJMZWZ0OiBcIlx1RDgzQ1x1REZBRiBcdTA0MURcdTA0MzBcdTA0NDBcdTA0MzhcdTA0NDFcdTA0NDNcdTA0MzlcdTA0NDJcdTA0MzUgXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDRDIFx1MDQzMiBcdTA0MTJcdTA0MTVcdTA0MjBcdTA0MjVcdTA0MURcdTA0MTVcdTA0MUMgXHUwNDFCXHUwNDE1XHUwNDEyXHUwNDFFXHUwNDFDIFx1MDQ0M1x1MDQzM1x1MDQzQlx1MDQ0MyBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0MzggXHUwNDM0XHUwNDNCXHUwNDRGIFx1MDQzN1x1MDQzMFx1MDQ0OVx1MDQzOFx1MDQ0Mlx1MDQ0QlwiLFxuICAgIHNlbGVjdExvd2VyUmlnaHQ6IFwiXHVEODNDXHVERkFGIFx1MDQyMlx1MDQzNVx1MDQzRlx1MDQzNVx1MDQ0MFx1MDQ0QyBcdTA0M0RcdTA0MzBcdTA0NDBcdTA0MzhcdTA0NDFcdTA0NDNcdTA0MzlcdTA0NDJcdTA0MzUgXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDRDIFx1MDQzMiBcdTA0MURcdTA0MThcdTA0MTZcdTA0MURcdTA0MTVcdTA0MUMgXHUwNDFGXHUwNDIwXHUwNDEwXHUwNDEyXHUwNDFFXHUwNDFDIFx1MDQ0M1x1MDQzM1x1MDQzQlx1MDQ0MyBcdTA0M0VcdTA0MzFcdTA0M0JcdTA0MzBcdTA0NDFcdTA0NDJcdTA0MzhcIixcbiAgICB3YWl0aW5nVXBwZXJMZWZ0OiBcIlx1RDgzRFx1REM0NiBcdTA0MUVcdTA0MzZcdTA0MzhcdTA0MzRcdTA0MzBcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDMyXHUwNDRCXHUwNDMxXHUwNDNFXHUwNDQwXHUwNDMwIFx1MDQzMlx1MDQzNVx1MDQ0MFx1MDQ0NVx1MDQzRFx1MDQzNVx1MDQzM1x1MDQzRSBcdTA0M0JcdTA0MzVcdTA0MzJcdTA0M0VcdTA0MzNcdTA0M0UgXHUwNDQzXHUwNDMzXHUwNDNCXHUwNDMwLi4uXCIsXG4gICAgd2FpdGluZ0xvd2VyUmlnaHQ6IFwiXHVEODNEXHVEQzQ2IFx1MDQxRVx1MDQzNlx1MDQzOFx1MDQzNFx1MDQzMFx1MDQzRFx1MDQzOFx1MDQzNSBcdTA0MzJcdTA0NEJcdTA0MzFcdTA0M0VcdTA0NDBcdTA0MzAgXHUwNDNEXHUwNDM4XHUwNDM2XHUwNDNEXHUwNDM1XHUwNDMzXHUwNDNFIFx1MDQzRlx1MDQ0MFx1MDQzMFx1MDQzMlx1MDQzRVx1MDQzM1x1MDQzRSBcdTA0NDNcdTA0MzNcdTA0M0JcdTA0MzAuLi5cIixcbiAgICB1cHBlckxlZnRDYXB0dXJlZDogXCJcdTI3MDUgXHUwNDEyXHUwNDM1XHUwNDQwXHUwNDQ1XHUwNDNEXHUwNDM4XHUwNDM5IFx1MDQzQlx1MDQzNVx1MDQzMlx1MDQ0Qlx1MDQzOSBcdTA0NDNcdTA0MzNcdTA0M0VcdTA0M0IgXHUwNDM3XHUwNDMwXHUwNDQ1XHUwNDMyXHUwNDMwXHUwNDQ3XHUwNDM1XHUwNDNEOiAoe3h9LCB7eX0pXCIsXG4gICAgbG93ZXJSaWdodENhcHR1cmVkOiBcIlx1MjcwNSBcdTA0MURcdTA0MzhcdTA0MzZcdTA0M0RcdTA0MzhcdTA0MzkgXHUwNDNGXHUwNDQwXHUwNDMwXHUwNDMyXHUwNDRCXHUwNDM5IFx1MDQ0M1x1MDQzM1x1MDQzRVx1MDQzQiBcdTA0MzdcdTA0MzBcdTA0NDVcdTA0MzJcdTA0MzBcdTA0NDdcdTA0MzVcdTA0M0Q6ICh7eH0sIHt5fSlcIixcbiAgICBzZWxlY3Rpb25UaW1lb3V0OiBcIlx1Mjc0QyBcdTA0MjJcdTA0MzBcdTA0MzlcdTA0M0MtXHUwNDMwXHUwNDQzXHUwNDQyIFx1MDQzMlx1MDQ0Qlx1MDQzMVx1MDQzRVx1MDQ0MFx1MDQzMFwiLFxuICAgIHNlbGVjdGlvbkVycm9yOiBcIlx1Mjc0QyBcdTA0MUVcdTA0NDhcdTA0MzhcdTA0MzFcdTA0M0FcdTA0MzAgXHUwNDMyXHUwNDRCXHUwNDMxXHUwNDNFXHUwNDQwXHUwNDMwLCBcdTA0M0ZcdTA0M0VcdTA0MzZcdTA0MzBcdTA0M0JcdTA0NDNcdTA0MzlcdTA0NDFcdTA0NDJcdTA0MzAsIFx1MDQzRlx1MDQzRVx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQzMVx1MDQ0M1x1MDQzOVx1MDQ0Mlx1MDQzNSBcdTA0NDFcdTA0M0RcdTA0M0VcdTA0MzJcdTA0MzBcIixcbiAgICBsb2dXaW5kb3c6IFwiTG9nc1wiLFxuICAgIGxvZ1dpbmRvd1RpdGxlOiBcIlx1MDQxQlx1MDQzRVx1MDQzM1x1MDQzOCAtIHtib3ROYW1lfVwiLFxuICAgIGRvd25sb2FkTG9nczogXCJcdTA0MjFcdTA0M0FcdTA0MzBcdTA0NDdcdTA0MzBcdTA0NDJcdTA0NEMgXHUwNDFCXHUwNDNFXHUwNDMzXHUwNDM4XCIsXG4gICAgY2xlYXJMb2dzOiBcIlx1MDQxRVx1MDQ0N1x1MDQzOFx1MDQ0MVx1MDQ0Mlx1MDQzOFx1MDQ0Mlx1MDQ0QyBcdTA0MUJcdTA0M0VcdTA0MzNcdTA0MzhcIixcbiAgICBjbG9zZUxvZ3M6IFwiXHUwNDE3XHUwNDMwXHUwNDNBXHUwNDQwXHUwNDRCXHUwNDQyXHUwNDRDXCIsXG4gICAgLy8gQW5hbHlzaXMgV2luZG93XG4gICAgYW5hbHlzaXNUaXRsZTogXCJcdTA0MTBcdTA0M0RcdTA0MzBcdTA0M0JcdTA0MzhcdTA0MzcgXHUwNDIwXHUwNDMwXHUwNDM3XHUwNDNCXHUwNDM4XHUwNDQ3XHUwNDM4XHUwNDM5IC0gSlNPTiB2cyBcdTA0MjJcdTA0MzVcdTA0M0FcdTA0NDNcdTA0NDlcdTA0MzhcdTA0MzkgQ2FudmFzXCIsXG4gICAgY29ycmVjdFBpeGVsczogXCJcdTA0MUZcdTA0NDBcdTA0MzBcdTA0MzJcdTA0MzhcdTA0M0JcdTA0NENcdTA0M0RcdTA0NEJcdTA0MzUgXHUwNDFGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM4XCIsXG4gICAgaW5jb3JyZWN0UGl4ZWxzOiBcIlx1MDQxRFx1MDQzNVx1MDQzRlx1MDQ0MFx1MDQzMFx1MDQzMlx1MDQzOFx1MDQzQlx1MDQ0Q1x1MDQzRFx1MDQ0Qlx1MDQzNSBcdTA0MUZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0MzhcIixcbiAgICBtaXNzaW5nUGl4ZWxzOiBcIlx1MDQxRVx1MDQ0Mlx1MDQ0MVx1MDQ0M1x1MDQ0Mlx1MDQ0MVx1MDQ0Mlx1MDQzMlx1MDQ0M1x1MDQ0RVx1MDQ0OVx1MDQzOFx1MDQzNSBcdTA0MUZcdTA0MzhcdTA0M0FcdTA0NDFcdTA0MzVcdTA0M0JcdTA0MzhcIixcbiAgICBzaG93Q29ycmVjdDogXCJcdTA0MUZcdTA0M0VcdTA0M0FcdTA0MzBcdTA0MzdcdTA0MzBcdTA0NDJcdTA0NEMgXHUwNDFGXHUwNDQwXHUwNDMwXHUwNDMyXHUwNDM4XHUwNDNCXHUwNDRDXHUwNDNEXHUwNDRCXHUwNDM1XCIsXG4gICAgc2hvd0luY29ycmVjdDogXCJcdTA0MUZcdTA0M0VcdTA0M0FcdTA0MzBcdTA0MzdcdTA0MzBcdTA0NDJcdTA0NEMgXHUwNDFEXHUwNDM1XHUwNDNGXHUwNDQwXHUwNDMwXHUwNDMyXHUwNDM4XHUwNDNCXHUwNDRDXHUwNDNEXHUwNDRCXHUwNDM1XCIsXG4gICAgc2hvd01pc3Npbmc6IFwiXHUwNDFGXHUwNDNFXHUwNDNBXHUwNDMwXHUwNDM3XHUwNDMwXHUwNDQyXHUwNDRDIFx1MDQxRVx1MDQ0Mlx1MDQ0MVx1MDQ0M1x1MDQ0Mlx1MDQ0MVx1MDQ0Mlx1MDQzMlx1MDQ0M1x1MDQ0RVx1MDQ0OVx1MDQzOFx1MDQzNVwiLFxuICAgIGF1dG9SZWZyZXNoOiBcIlx1MDQxMFx1MDQzMlx1MDQ0Mlx1MDQzRS1cdTA0M0VcdTA0MzFcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzVcIixcbiAgICB6b29tQWRqdXN0ZWQ6IFwiXHUwNDFDXHUwNDMwXHUwNDQxXHUwNDQ4XHUwNDQyXHUwNDMwXHUwNDMxIFx1MDQzMFx1MDQzMlx1MDQ0Mlx1MDQzRVx1MDQzQ1x1MDQzMFx1MDQ0Mlx1MDQzOFx1MDQ0N1x1MDQzNVx1MDQ0MVx1MDQzQVx1MDQzOCBcdTA0M0RcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NDBcdTA0M0VcdTA0MzVcdTA0M0QgXHUwNDNEXHUwNDMwXCIsXG4gICAgYXV0b1JlZnJlc2hFbmFibGVkOiBcIlx1MDQxMFx1MDQzMlx1MDQ0Mlx1MDQzRS1cdTA0M0VcdTA0MzFcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzUgXHUwNDMyXHUwNDNBXHUwNDNCXHUwNDRFXHUwNDQ3XHUwNDM1XHUwNDNEXHUwNDNFIFx1MDQzQVx1MDQzMFx1MDQzNlx1MDQzNFx1MDQ0Qlx1MDQzNVwiLFxuICAgIGF1dG9SZWZyZXNoRGlzYWJsZWQ6IFwiXHUwNDEwXHUwNDMyXHUwNDQyXHUwNDNFLVx1MDQzRVx1MDQzMVx1MDQzRFx1MDQzRVx1MDQzMlx1MDQzQlx1MDQzNVx1MDQzRFx1MDQzOFx1MDQzNSBcdTA0M0VcdTA0NDJcdTA0M0FcdTA0M0JcdTA0NEVcdTA0NDdcdTA0MzVcdTA0M0RcdTA0M0VcIixcbiAgICBhdXRvUmVmcmVzaEludGVydmFsVXBkYXRlZDogXCJcdTA0MThcdTA0M0RcdTA0NDJcdTA0MzVcdTA0NDBcdTA0MzJcdTA0MzBcdTA0M0IgXHUwNDMwXHUwNDMyXHUwNDQyXHUwNDNFLVx1MDQzRVx1MDQzMVx1MDQzRFx1MDQzRVx1MDQzMlx1MDQzQlx1MDQzNVx1MDQzRFx1MDQzOFx1MDQ0RiBcdTA0M0VcdTA0MzFcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0QgXHUwNDM0XHUwNDNFXCIsXG4gICAgdmlzdWFsaXphdGlvblVwZGF0ZWQ6IFwiXHUwNDEyXHUwNDM4XHUwNDM3XHUwNDQzXHUwNDMwXHUwNDNCXHUwNDM4XHUwNDM3XHUwNDMwXHUwNDQ2XHUwNDM4XHUwNDRGIFx1MDQzRVx1MDQzMVx1MDQzRFx1MDQzRVx1MDQzMlx1MDQzQlx1MDQzNVx1MDQzRFx1MDQzMFwiLFxuICAgIC8vIENvbmZpZyBXaW5kb3dcbiAgICBjb25maWdUaXRsZTogXCJcdTA0MUFcdTA0M0VcdTA0M0RcdTA0NDRcdTA0MzhcdTA0MzNcdTA0NDNcdTA0NDBcdTA0MzBcdTA0NDZcdTA0MzhcdTA0NEYgR3VhcmRcIixcbiAgICBwcm90ZWN0aW9uUGF0dGVybnM6IFwiXHUwNDI4XHUwNDMwXHUwNDMxXHUwNDNCXHUwNDNFXHUwNDNEXHUwNDRCIFx1MDQxN1x1MDQzMFx1MDQ0OVx1MDQzOFx1MDQ0Mlx1MDQ0QlwiLFxuICAgIHByZWZlclNwZWNpZmljQ29sb3I6IFwiXHUwNDFGXHUwNDQwXHUwNDM4XHUwNDNFXHUwNDQwXHUwNDM4XHUwNDQyXHUwNDM1XHUwNDQyIFx1MDQzRVx1MDQzRlx1MDQ0MFx1MDQzNVx1MDQzNFx1MDQzNVx1MDQzQlx1MDQzNVx1MDQzRFx1MDQzRFx1MDQzRVx1MDQzM1x1MDQzRSBcdTA0NDZcdTA0MzJcdTA0MzVcdTA0NDJcdTA0MzBcIixcbiAgICBleGNsdWRlU3BlY2lmaWNDb2xvcnM6IFwiXHUwNDFEXHUwNDM1IFx1MDQzMlx1MDQzRVx1MDQ0MVx1MDQ0MVx1MDQ0Mlx1MDQzMFx1MDQzRFx1MDQzMFx1MDQzMlx1MDQzQlx1MDQzOFx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQ0QyBcdTA0M0VcdTA0M0ZcdTA0NDBcdTA0MzVcdTA0MzRcdTA0MzVcdTA0M0JcdTA0MzVcdTA0M0RcdTA0M0RcdTA0NEJcdTA0MzUgXHUwNDQ2XHUwNDMyXHUwNDM1XHUwNDQyXHUwNDMwXCIsXG4gICAgbG9hZE1hbmFnZW1lbnQ6IFwiXHUwNDIzXHUwNDNGXHUwNDQwXHUwNDMwXHUwNDMyXHUwNDNCXHUwNDM1XHUwNDNEXHUwNDM4XHUwNDM1IFx1MDQxRFx1MDQzMFx1MDQzM1x1MDQ0MFx1MDQ0M1x1MDQzN1x1MDQzQVx1MDQzRVx1MDQzOVwiLFxuICAgIG1pbkxvYWRzVG9XYWl0OiBcIlx1MDQxQ1x1MDQzOFx1MDQzRFx1MDQzOFx1MDQzQ1x1MDQ0M1x1MDQzQyBcdTA0MzdcdTA0MzBcdTA0MzNcdTA0NDBcdTA0NDNcdTA0MzdcdTA0M0VcdTA0M0EgXHUwNDM0XHUwNDNCXHUwNDRGIFx1MDQzRVx1MDQzNlx1MDQzOFx1MDQzNFx1MDQzMFx1MDQzRFx1MDQzOFx1MDQ0RlwiLFxuICAgIHBpeGVsc1BlckJhdGNoOiBcIlx1MDQxRlx1MDQzOFx1MDQzQVx1MDQ0MVx1MDQzNVx1MDQzQlx1MDQzNVx1MDQzOSBcdTA0MzdcdTA0MzAgXHUwNDNGXHUwNDMwXHUwNDQwXHUwNDQyXHUwNDM4XHUwNDRFXCIsXG4gICAgc3BlbmRBbGxQaXhlbHNPblN0YXJ0OiBcIlx1MDQxRlx1MDQzRVx1MDQ0Mlx1MDQ0MFx1MDQzMFx1MDQ0Mlx1MDQzOFx1MDQ0Mlx1MDQ0QyBcdTA0MzJcdTA0NDFcdTA0MzUgXHUwNDNGXHUwNDM4XHUwNDNBXHUwNDQxXHUwNDM1XHUwNDNCXHUwNDM4IFx1MDQzRlx1MDQ0MFx1MDQzOCBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0NDNcdTA0NDFcdTA0M0FcdTA0MzVcIixcbiAgICB3YWl0VGltZXM6IFwiXHUwNDEyXHUwNDQwXHUwNDM1XHUwNDNDXHUwNDRGIFx1MDQxRVx1MDQzNlx1MDQzOFx1MDQzNFx1MDQzMFx1MDQzRFx1MDQzOFx1MDQ0RlwiLFxuICAgIHVzZVJhbmRvbVRpbWVzOiBcIlx1MDQxOFx1MDQ0MVx1MDQzRlx1MDQzRVx1MDQzQlx1MDQ0Q1x1MDQzN1x1MDQzRVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQ0QyBcdTA0NDFcdTA0M0JcdTA0NDNcdTA0NDdcdTA0MzBcdTA0MzlcdTA0M0RcdTA0M0VcdTA0MzUgXHUwNDMyXHUwNDQwXHUwNDM1XHUwNDNDXHUwNDRGIFx1MDQzQ1x1MDQzNVx1MDQzNlx1MDQzNFx1MDQ0MyBcdTA0M0ZcdTA0MzBcdTA0NDBcdTA0NDJcdTA0MzhcdTA0NEZcdTA0M0NcdTA0MzhcIixcbiAgICBtaW5UaW1lOiBcIlx1MDQxQ1x1MDQzOFx1MDQzRFx1MDQzOFx1MDQzQ1x1MDQzMFx1MDQzQlx1MDQ0Q1x1MDQzRFx1MDQzRVx1MDQzNSBcdTA0MzJcdTA0NDBcdTA0MzVcdTA0M0NcdTA0NEYgKFx1MDQ0MSlcIixcbiAgICBtYXhUaW1lOiBcIlx1MDQxQ1x1MDQzMFx1MDQzQVx1MDQ0MVx1MDQzOFx1MDQzQ1x1MDQzMFx1MDQzQlx1MDQ0Q1x1MDQzRFx1MDQzRVx1MDQzNSBcdTA0MzJcdTA0NDBcdTA0MzVcdTA0M0NcdTA0NEYgKFx1MDQ0MSlcIlxuICB9XG59O1xuIiwgImV4cG9ydCBjb25zdCB6aEhhbnMgPSB7XG4gIC8vIFx1NTQyRlx1NTJBOFx1NTY2OFxuICBsYXVuY2hlcjoge1xuICAgIHRpdGxlOiAnV1BsYWNlIFx1ODFFQVx1NTJBOFx1NjczQVx1NTY2OFx1NEVCQScsXG4gICAgYXV0b0Zhcm06ICdcdUQ4M0NcdURGM0UgXHU4MUVBXHU1MkE4XHU1MTlDXHU1NzNBJyxcbiAgICBhdXRvSW1hZ2U6ICdcdUQ4M0NcdURGQTggXHU4MUVBXHU1MkE4XHU3RUQ4XHU1NkZFJyxcbiAgICBhdXRvR3VhcmQ6ICdcdUQ4M0RcdURFRTFcdUZFMEYgXHU4MUVBXHU1MkE4XHU1Qjg4XHU2MkE0JyxcbiAgICBzZWxlY3Rpb246ICdcdTkwMDlcdTYyRTknLFxuICAgIHVzZXI6ICdcdTc1MjhcdTYyMzcnLFxuICAgIGNoYXJnZXM6ICdcdTZCMjFcdTY1NzAnLFxuICAgIGJhY2tlbmQ6ICdcdTU0MEVcdTdBRUYnLFxuICAgIGRhdGFiYXNlOiAnXHU2NTcwXHU2MzZFXHU1RTkzJyxcbiAgICB1cHRpbWU6ICdcdThGRDBcdTg4NENcdTY1RjZcdTk1RjQnLFxuICAgIGNsb3NlOiAnXHU1MTczXHU5NUVEJyxcbiAgICBsYXVuY2g6ICdcdTU0MkZcdTUyQTgnLFxuICAgIGxvYWRpbmc6ICdcdTUyQTBcdThGN0RcdTRFMkRcdTIwMjYnLFxuICAgIGV4ZWN1dGluZzogJ1x1NjI2N1x1ODg0Q1x1NEUyRFx1MjAyNicsXG4gICAgZG93bmxvYWRpbmc6ICdcdTZCNjNcdTU3MjhcdTRFMEJcdThGN0RcdTgxMUFcdTY3MkNcdTIwMjYnLFxuICAgIGNob29zZUJvdDogJ1x1OTAwOVx1NjJFOVx1NEUwMFx1NEUyQVx1NjczQVx1NTY2OFx1NEVCQVx1NUU3Nlx1NzBCOVx1NTFGQlx1NTQyRlx1NTJBOCcsXG4gICAgcmVhZHlUb0xhdW5jaDogJ1x1NTFDNlx1NTkwN1x1NTQyRlx1NTJBOCcsXG4gICAgbG9hZEVycm9yOiAnXHU1MkEwXHU4RjdEXHU5NTE5XHU4QkVGJyxcbiAgICBsb2FkRXJyb3JNc2c6ICdcdTY1RTBcdTZDRDVcdTUyQTBcdThGN0RcdTYyNDBcdTkwMDlcdTY3M0FcdTU2NjhcdTRFQkFcdTMwMDJcdThCRjdcdTY4QzBcdTY3RTVcdTdGNTFcdTdFRENcdThGREVcdTYzQTVcdTYyMTZcdTkxQ0RcdThCRDVcdTMwMDInLFxuICAgIGNoZWNraW5nOiAnXHVEODNEXHVERDA0IFx1NjhDMFx1NjdFNVx1NEUyRC4uLicsXG4gICAgb25saW5lOiAnXHVEODNEXHVERkUyIFx1NTcyOFx1N0VCRicsXG4gICAgb2ZmbGluZTogJ1x1RDgzRFx1REQzNCBcdTc5QkJcdTdFQkYnLFxuICAgIG9rOiAnXHVEODNEXHVERkUyIFx1NkI2M1x1NUUzOCcsXG4gICAgZXJyb3I6ICdcdUQ4M0RcdUREMzQgXHU5NTE5XHU4QkVGJyxcbiAgICB1bmtub3duOiAnLScsXG4gICAgbG9nV2luZG93OiAnXHVEODNEXHVEQ0NCIExvZ3MnLFxuICAgIGxvZ1dpbmRvd1RpdGxlOiAnXHU2NUU1XHU1RkQ3XHU3QTk3XHU1M0UzJyxcbiAgICBkb3dubG9hZExvZ3M6ICdcdTRFMEJcdThGN0RcdTY1RTVcdTVGRDcnLFxuICAgIGNsZWFyTG9nczogJ1x1NkUwNVx1OTY2NFx1NjVFNVx1NUZENycsXG4gICAgY2xvc2VMb2dzOiAnXHU1MTczXHU5NUVEJ1xuICB9LFxuXG4gIC8vIFx1N0VEOFx1NTZGRVx1NkEyMVx1NTc1N1xuICBpbWFnZToge1xuICAgIHRpdGxlOiBcIldQbGFjZSBcdTgxRUFcdTUyQThcdTdFRDhcdTU2RkVcIixcbiAgICBpbml0Qm90OiBcIlx1NTIxRFx1NTlDQlx1NTMxNlx1ODFFQVx1NTJBOFx1NjczQVx1NTY2OFx1NEVCQVwiLFxuICAgIHVwbG9hZEltYWdlOiBcIlx1NEUwQVx1NEYyMFx1NTZGRVx1NzI0N1wiLFxuICAgIHJlc2l6ZUltYWdlOiBcIlx1OEMwM1x1NjU3NFx1NTZGRVx1NzI0N1x1NTkyN1x1NUMwRlwiLFxuICAgIHNlbGVjdFBvc2l0aW9uOiBcIlx1OTAwOVx1NjJFOVx1NEY0RFx1N0Y2RVwiLFxuICAgIHN0YXJ0UGFpbnRpbmc6IFwiXHU1RjAwXHU1OUNCXHU3RUQ4XHU1MjM2XCIsXG4gICAgc3RvcFBhaW50aW5nOiBcIlx1NTA1Q1x1NkI2Mlx1N0VEOFx1NTIzNlwiLFxuICAgIHNhdmVQcm9ncmVzczogXCJcdTRGRERcdTVCNThcdThGREJcdTVFQTZcIixcbiAgICBsb2FkUHJvZ3Jlc3M6IFwiXHU1MkEwXHU4RjdEXHU4RkRCXHU1RUE2XCIsXG4gICAgY2hlY2tpbmdDb2xvcnM6IFwiXHVEODNEXHVERDBEIFx1NjhDMFx1NjdFNVx1NTNFRlx1NzUyOFx1OTg5Q1x1ODI3Mi4uLlwiLFxuICAgIG5vQ29sb3JzRm91bmQ6IFwiXHUyNzRDIFx1OEJGN1x1NTcyOFx1N0Y1MVx1N0FEOVx1NEUwQVx1NjI1M1x1NUYwMFx1OEMwM1x1ODI3Mlx1Njc3Rlx1NTQwRVx1OTFDRFx1OEJENVx1RkYwMVwiLFxuICAgIGNvbG9yc0ZvdW5kOiBcIlx1MjcwNSBcdTYyN0VcdTUyMzAge2NvdW50fSBcdTc5Q0RcdTUzRUZcdTc1MjhcdTk4OUNcdTgyNzJcIixcbiAgICBsb2FkaW5nSW1hZ2U6IFwiXHVEODNEXHVEREJDXHVGRTBGIFx1NkI2M1x1NTcyOFx1NTJBMFx1OEY3RFx1NTZGRVx1NzI0Ny4uLlwiLFxuICAgIGltYWdlTG9hZGVkOiBcIlx1MjcwNSBcdTU2RkVcdTcyNDdcdTVERjJcdTUyQTBcdThGN0RcdUZGMENcdTY3MDlcdTY1NDhcdTUwQ0ZcdTdEMjAge2NvdW50fSBcdTRFMkFcIixcbiAgICBpbWFnZUVycm9yOiBcIlx1Mjc0QyBcdTU2RkVcdTcyNDdcdTUyQTBcdThGN0RcdTU5MzFcdThEMjVcIixcbiAgICBzZWxlY3RQb3NpdGlvbkFsZXJ0OiBcIlx1OEJGN1x1NTcyOFx1NEY2MFx1NjBGM1x1NUYwMFx1NTlDQlx1N0VEOFx1NTIzNlx1NzY4NFx1NTczMFx1NjVCOVx1NkQ4Mlx1N0IyQ1x1NEUwMFx1NEUyQVx1NTBDRlx1N0QyMFx1RkYwMVwiLFxuICAgIHdhaXRpbmdQb3NpdGlvbjogXCJcdUQ4M0RcdURDNDYgXHU3QjQ5XHU1Rjg1XHU0RjYwXHU2RDgyXHU1M0MyXHU4MDAzXHU1MENGXHU3RDIwLi4uXCIsXG4gICAgcG9zaXRpb25TZXQ6IFwiXHUyNzA1IFx1NEY0RFx1N0Y2RVx1OEJCRVx1N0Y2RVx1NjIxMFx1NTI5Rlx1RkYwMVwiLFxuICAgIHBvc2l0aW9uVGltZW91dDogXCJcdTI3NEMgXHU0RjREXHU3RjZFXHU5MDA5XHU2MkU5XHU4RDg1XHU2NUY2XCIsXG4gICAgcG9zaXRpb25EZXRlY3RlZDogXCJcdUQ4M0NcdURGQUYgXHU1REYyXHU2OEMwXHU2RDRCXHU1MjMwXHU0RjREXHU3RjZFXHVGRjBDXHU1OTA0XHU3NDA2XHU0RTJELi4uXCIsXG4gICAgcG9zaXRpb25FcnJvcjogXCJcdTI3NEMgXHU0RjREXHU3RjZFXHU2OEMwXHU2RDRCXHU1OTMxXHU4RDI1XHVGRjBDXHU4QkY3XHU5MUNEXHU4QkQ1XCIsXG4gICAgc3RhcnRQYWludGluZ01zZzogXCJcdUQ4M0NcdURGQTggXHU1RjAwXHU1OUNCXHU3RUQ4XHU1MjM2Li4uXCIsXG4gICAgcGFpbnRpbmdQcm9ncmVzczogXCJcdUQ4M0VcdURERjEgXHU4RkRCXHU1RUE2OiB7cGFpbnRlZH0ve3RvdGFsfSBcdTUwQ0ZcdTdEMjAuLi5cIixcbiAgICBub0NoYXJnZXM6IFwiXHUyMzFCIFx1NkNBMVx1NjcwOVx1NkIyMVx1NjU3MFx1MzAwMlx1N0I0OVx1NUY4NSB7dGltZX0uLi5cIixcbiAgICBwYWludGluZ1N0b3BwZWQ6IFwiXHUyM0Y5XHVGRTBGIFx1NzUyOFx1NjIzN1x1NURGMlx1NTA1Q1x1NkI2Mlx1N0VEOFx1NTIzNlwiLFxuICAgIHBhaW50aW5nQ29tcGxldGU6IFwiXHUyNzA1IFx1N0VEOFx1NTIzNlx1NUI4Q1x1NjIxMFx1RkYwMVx1NTE3MVx1N0VEOFx1NTIzNiB7Y291bnR9IFx1NEUyQVx1NTBDRlx1N0QyMFx1MzAwMlwiLFxuICAgIHBhaW50aW5nRXJyb3I6IFwiXHUyNzRDIFx1N0VEOFx1NTIzNlx1OEZDN1x1N0EwQlx1NEUyRFx1NTFGQVx1OTUxOVwiLFxuICAgIG1pc3NpbmdSZXF1aXJlbWVudHM6IFwiXHUyNzRDIFx1OEJGN1x1NTE0OFx1NTJBMFx1OEY3RFx1NTZGRVx1NzI0N1x1NUU3Nlx1OTAwOVx1NjJFOVx1NEY0RFx1N0Y2RVwiLFxuICAgIHByb2dyZXNzOiBcIlx1OEZEQlx1NUVBNlwiLFxuICAgIHVzZXJOYW1lOiBcIlx1NzUyOFx1NjIzN1wiLFxuICAgIHBpeGVsczogXCJcdTUwQ0ZcdTdEMjBcIixcbiAgICBjaGFyZ2VzOiBcIlx1NkIyMVx1NjU3MFwiLFxuICAgIGVzdGltYXRlZFRpbWU6IFwiXHU5ODg0XHU4QkExXHU2NUY2XHU5NUY0XCIsXG4gICAgaW5pdE1lc3NhZ2U6IFwiXHU3MEI5XHU1MUZCXHUyMDFDXHU1MjFEXHU1OUNCXHU1MzE2XHU4MUVBXHU1MkE4XHU2NzNBXHU1NjY4XHU0RUJBXHUyMDFEXHU1RjAwXHU1OUNCXCIsXG4gICAgd2FpdGluZ0luaXQ6IFwiXHU3QjQ5XHU1Rjg1XHU1MjFEXHU1OUNCXHU1MzE2Li4uXCIsXG4gICAgcmVzaXplU3VjY2VzczogXCJcdTI3MDUgXHU1NkZFXHU3MjQ3XHU1REYyXHU4QzAzXHU2NTc0XHU0RTNBIHt3aWR0aH14e2hlaWdodH1cIixcbiAgICBwYWludGluZ1BhdXNlZDogXCJcdTIzRjhcdUZFMEYgXHU3RUQ4XHU1MjM2XHU2NjgyXHU1MDVDXHU0RThFXHU0RjREXHU3RjZFIFg6IHt4fSwgWToge3l9XCIsXG4gICAgcGl4ZWxzUGVyQmF0Y2g6IFwiXHU2QkNGXHU2Mjc5XHU1MENGXHU3RDIwXHU2NTcwXCIsXG4gICAgYmF0Y2hTaXplOiBcIlx1NjI3OVx1NkIyMVx1NTkyN1x1NUMwRlwiLFxuICAgIG5leHRCYXRjaFRpbWU6IFwiXHU0RTBCXHU2QjIxXHU2Mjc5XHU2QjIxXHU2NUY2XHU5NUY0XCIsXG4gICAgdXNlQWxsQ2hhcmdlczogXCJcdTRGN0ZcdTc1MjhcdTYyNDBcdTY3MDlcdTUzRUZcdTc1MjhcdTZCMjFcdTY1NzBcIixcbiAgICBzaG93T3ZlcmxheTogXCJcdTY2M0VcdTc5M0FcdTg5ODZcdTc2RDZcdTVDNDJcIixcbiAgICBtYXhDaGFyZ2VzOiBcIlx1NkJDRlx1NjI3OVx1NjcwMFx1NTkyN1x1NkIyMVx1NjU3MFwiLFxuICAgIHdhaXRpbmdGb3JDaGFyZ2VzOiBcIlx1MjNGMyBcdTdCNDlcdTVGODVcdTZCMjFcdTY1NzA6IHtjdXJyZW50fS97bmVlZGVkfVwiLFxuICAgIHRpbWVSZW1haW5pbmc6IFwiXHU1MjY5XHU0RjU5XHU2NUY2XHU5NUY0XCIsXG4gICAgY29vbGRvd25XYWl0aW5nOiBcIlx1MjNGMyBcdTdCNDlcdTVGODUge3RpbWV9IFx1NTQwRVx1N0VFN1x1N0VFRC4uLlwiLFxuICAgIHByb2dyZXNzU2F2ZWQ6IFwiXHUyNzA1IFx1OEZEQlx1NUVBNlx1NURGMlx1NEZERFx1NUI1OFx1NEUzQSB7ZmlsZW5hbWV9XCIsXG4gICAgcHJvZ3Jlc3NMb2FkZWQ6IFwiXHUyNzA1IFx1NURGMlx1NTJBMFx1OEY3RFx1OEZEQlx1NUVBNjoge3BhaW50ZWR9L3t0b3RhbH0gXHU1MENGXHU3RDIwXHU1REYyXHU3RUQ4XHU1MjM2XCIsXG4gICAgcHJvZ3Jlc3NMb2FkRXJyb3I6IFwiXHUyNzRDIFx1NTJBMFx1OEY3RFx1OEZEQlx1NUVBNlx1NTkzMVx1OEQyNToge2Vycm9yfVwiLFxuIFxuICAgICBwcm9ncmVzc1NhdmVFcnJvcjogXCJcdTI3NEMgXHU0RkREXHU1QjU4XHU4RkRCXHU1RUE2XHU1OTMxXHU4RDI1OiB7ZXJyb3J9XCIsXG5cbiAgICBjb25maXJtU2F2ZVByb2dyZXNzOiBcIlx1NTcyOFx1NTA1Q1x1NkI2Mlx1NEU0Qlx1NTI0RFx1ODk4MVx1NEZERFx1NUI1OFx1NUY1M1x1NTI0RFx1OEZEQlx1NUVBNlx1NTQxN1x1RkYxRlwiLFxuICAgIHNhdmVQcm9ncmVzc1RpdGxlOiBcIlx1NEZERFx1NUI1OFx1OEZEQlx1NUVBNlwiLFxuICAgIGRpc2NhcmRQcm9ncmVzczogXCJcdTY1M0VcdTVGMDNcIixcbiAgICBjYW5jZWw6IFwiXHU1M0Q2XHU2RDg4XCIsXG4gICAgbWluaW1pemU6IFwiXHU2NzAwXHU1QzBGXHU1MzE2XCIsXG4gICAgd2lkdGg6IFwiXHU1QkJEXHU1RUE2XCIsXG4gICAgaGVpZ2h0OiBcIlx1OUFEOFx1NUVBNlwiLFxuICAgIGtlZXBBc3BlY3Q6IFwiXHU0RkREXHU2MzAxXHU3RUI1XHU2QTJBXHU2QkQ0XCIsXG4gICAgYXBwbHk6IFwiXHU1RTk0XHU3NTI4XCIsXG4gICAgb3ZlcmxheU9uOiBcIlx1ODk4Nlx1NzZENlx1NUM0MjogXHU1RjAwXHU1NDJGXCIsXG4gICAgb3ZlcmxheU9mZjogXCJcdTg5ODZcdTc2RDZcdTVDNDI6IFx1NTE3M1x1OTVFRFwiLFxuICAgIHBhc3NDb21wbGV0ZWQ6IFwiXHUyNzA1IFx1NjI3OVx1NkIyMVx1NUI4Q1x1NjIxMDogXHU1REYyXHU3RUQ4XHU1MjM2IHtwYWludGVkfSBcdTUwQ0ZcdTdEMjAgfCBcdThGREJcdTVFQTY6IHtwZXJjZW50fSUgKHtjdXJyZW50fS97dG90YWx9KVwiLFxuICAgIHdhaXRpbmdDaGFyZ2VzUmVnZW46IFwiXHUyM0YzIFx1N0I0OVx1NUY4NVx1NkIyMVx1NjU3MFx1NjA2Mlx1NTkwRDoge2N1cnJlbnR9L3tuZWVkZWR9IC0gXHU2NUY2XHU5NUY0OiB7dGltZX1cIixcbiAgICB3YWl0aW5nQ2hhcmdlc0NvdW50ZG93bjogXCJcdTIzRjMgXHU3QjQ5XHU1Rjg1XHU2QjIxXHU2NTcwOiB7Y3VycmVudH0ve25lZWRlZH0gLSBcdTUyNjlcdTRGNTk6IHt0aW1lfVwiLFxuICAgIGF1dG9Jbml0aWFsaXppbmc6IFwiXHVEODNFXHVERDE2IFx1NkI2M1x1NTcyOFx1ODFFQVx1NTJBOFx1NTIxRFx1NTlDQlx1NTMxNi4uLlwiLFxuICAgIGF1dG9Jbml0U3VjY2VzczogXCJcdTI3MDUgXHU4MUVBXHU1MkE4XHU1NDJGXHU1MkE4XHU2MjEwXHU1MjlGXCIsXG4gICAgYXV0b0luaXRGYWlsZWQ6IFwiXHUyNkEwXHVGRTBGIFx1NjVFMFx1NkNENVx1ODFFQVx1NTJBOFx1NTQyRlx1NTJBOFx1RkYwQ1x1OEJGN1x1NjI0Qlx1NTJBOFx1NjRDRFx1NEY1Q1x1MzAwMlwiLFxuICAgIHBhbGV0dGVEZXRlY3RlZDogXCJcdUQ4M0NcdURGQTggXHU1REYyXHU2OEMwXHU2RDRCXHU1MjMwXHU4QzAzXHU4MjcyXHU2NzdGXCIsXG4gICAgcGFsZXR0ZU5vdEZvdW5kOiBcIlx1RDgzRFx1REQwRCBcdTZCNjNcdTU3MjhcdTY0MUNcdTdEMjJcdThDMDNcdTgyNzJcdTY3N0YuLi5cIixcbiAgICBjbGlja2luZ1BhaW50QnV0dG9uOiBcIlx1RDgzRFx1REM0NiBcdTZCNjNcdTU3MjhcdTcwQjlcdTUxRkJcdTdFRDhcdTUyMzZcdTYzMDlcdTk0QUUuLi5cIixcbiAgICBwYWludEJ1dHRvbk5vdEZvdW5kOiBcIlx1Mjc0QyBcdTY3MkFcdTYyN0VcdTUyMzBcdTdFRDhcdTUyMzZcdTYzMDlcdTk0QUVcIixcbiAgICBtYW51YWxJbml0UmVxdWlyZWQ6IFwiXHVEODNEXHVERDI3IFx1OTcwMFx1ODk4MVx1NjI0Qlx1NTJBOFx1NTIxRFx1NTlDQlx1NTMxNlwiLFxuICAgIHJldHJ5QXR0ZW1wdDogXCJcdUQ4M0RcdUREMDQgXHU5MUNEXHU4QkQ1IHthdHRlbXB0fS97bWF4QXR0ZW1wdHN9XHVGRjBDXHU3QjQ5XHU1Rjg1IHtkZWxheX0gXHU3OUQyLi4uXCIsXG4gICAgcmV0cnlFcnJvcjogXCJcdUQ4M0RcdURDQTUgXHU3QjJDIHthdHRlbXB0fS97bWF4QXR0ZW1wdHN9IFx1NkIyMVx1NUMxRFx1OEJENVx1NTFGQVx1OTUxOVx1RkYwQ1x1NUMwNlx1NTcyOCB7ZGVsYXl9IFx1NzlEMlx1NTQwRVx1OTFDRFx1OEJENS4uLlwiLFxuICAgIHJldHJ5RmFpbGVkOiBcIlx1Mjc0QyBcdThEODVcdThGQzcge21heEF0dGVtcHRzfSBcdTZCMjFcdTVDMURcdThCRDVcdTU5MzFcdThEMjVcdTMwMDJcdTdFRTdcdTdFRURcdTRFMEJcdTRFMDBcdTYyNzkuLi5cIixcbiAgICBuZXR3b3JrRXJyb3I6IFwiXHVEODNDXHVERjEwIFx1N0Y1MVx1N0VEQ1x1OTUxOVx1OEJFRlx1RkYwQ1x1NkI2M1x1NTcyOFx1OTFDRFx1OEJENS4uLlwiLFxuICAgIHNlcnZlckVycm9yOiBcIlx1RDgzRFx1REQyNSBcdTY3MERcdTUyQTFcdTU2NjhcdTk1MTlcdThCRUZcdUZGMENcdTZCNjNcdTU3MjhcdTkxQ0RcdThCRDUuLi5cIixcbiAgICB0aW1lb3V0RXJyb3I6IFwiXHUyM0YwIFx1NjcwRFx1NTJBMVx1NTY2OFx1OEQ4NVx1NjVGNlx1RkYwQ1x1NkI2M1x1NTcyOFx1OTFDRFx1OEJENS4uLlwiLFxuICAgIC8vIHYyLjAgLSBcdTRGRERcdTYyQTRcdTRFMEVcdTdFRDhcdTUyMzZcdTZBMjFcdTVGMEZcbiAgICBwcm90ZWN0aW9uRW5hYmxlZDogXCJcdTVERjJcdTVGMDBcdTU0MkZcdTRGRERcdTYyQTRcIixcbiAgICBwcm90ZWN0aW9uRGlzYWJsZWQ6IFwiXHU1REYyXHU1MTczXHU5NUVEXHU0RkREXHU2MkE0XCIsXG4gICAgcGFpbnRQYXR0ZXJuOiBcIlx1N0VEOFx1NTIzNlx1NkEyMVx1NUYwRlwiLFxuICAgIHBhdHRlcm5MaW5lYXJTdGFydDogXCJcdTdFQkZcdTYwMjdcdUZGMDhcdThENzdcdTcwQjlcdUZGMDlcIixcbiAgICBwYXR0ZXJuTGluZWFyRW5kOiBcIlx1N0VCRlx1NjAyN1x1RkYwOFx1N0VDOFx1NzBCOVx1RkYwOVwiLFxuICAgIHBhdHRlcm5SYW5kb206IFwiXHU5NjhGXHU2NzNBXCIsXG4gICAgcGF0dGVybkNlbnRlck91dDogXCJcdTRFQ0VcdTRFMkRcdTVGQzNcdTU0MTFcdTU5MTZcIixcbiAgICBwYXR0ZXJuQ29ybmVyc0ZpcnN0OiBcIlx1NTE0OFx1ODlEMlx1ODQzRFwiLFxuICAgIHBhdHRlcm5TcGlyYWw6IFwiXHU4N0JBXHU2NUNCXCIsXG4gICAgc29saWQ6IFwiXHU1QjlFXHU1RkMzXCIsXG4gICAgc3RyaXBlczogXCJcdTY3NjFcdTdFQjlcIixcbiAgICBjaGVja2VyYm9hcmQ6IFwiXHU2OENCXHU3NkQ4XHU2ODNDXCIsXG4gICAgZ3JhZGllbnQ6IFwiXHU2RTEwXHU1M0Q4XCIsXG4gICAgZG90czogXCJcdTcwQjlcdTcyQjZcIixcbiAgICB3YXZlczogXCJcdTZDRTJcdTZENkFcIixcbiAgICBzcGlyYWw6IFwiXHU4N0JBXHU2NUNCXCIsXG4gICAgbW9zYWljOiBcIlx1OUE2Q1x1OEQ1Qlx1NTE0QlwiLFxuICAgIGJyaWNrczogXCJcdTc4MTZcdTU3NTdcIixcbiAgICB6aWd6YWc6IFwiXHU0RTRCXHU1QjU3XHU1RjYyXCIsXG4gICAgcHJvdGVjdGluZ0RyYXdpbmc6IFwiXHU2QjYzXHU1NzI4XHU0RkREXHU2MkE0XHU1NkZFXHU3QTNGLi4uXCIsXG4gICAgY2hhbmdlc0RldGVjdGVkOiBcIlx1RDgzRFx1REVBOCBcdTY4QzBcdTZENEJcdTUyMzAge2NvdW50fSBcdTU5MDRcdTY2RjRcdTY1MzlcIixcbiAgICByZXBhaXJpbmc6IFwiXHVEODNEXHVERDI3IFx1NkI2M1x1NTcyOFx1NEZFRVx1NTkwRCB7Y291bnR9IFx1NEUyQVx1NjZGNFx1NjUzOVx1NzY4NFx1NTBDRlx1N0QyMC4uLlwiLFxuICAgIHJlcGFpckNvbXBsZXRlZDogXCJcdTI3MDUgXHU0RkVFXHU1OTBEXHU1QjhDXHU2MjEwXHVGRjFBe2NvdW50fSBcdTRFMkFcdTUwQ0ZcdTdEMjBcIixcbiAgICBub0NoYXJnZXNGb3JSZXBhaXI6IFwiXHUyNkExIFx1NEZFRVx1NTkwRFx1NEUwRFx1NkQ4OFx1ODAxN1x1NzBCOVx1NjU3MFx1RkYwQ1x1N0I0OVx1NUY4NVx1NEUyRC4uLlwiLFxuICAgIHByb3RlY3Rpb25Qcmlvcml0eTogXCJcdUQ4M0RcdURFRTFcdUZFMEYgXHU1REYyXHU1NDJGXHU3NTI4XHU0RkREXHU2MkE0XHU0RjE4XHU1MTQ4XCIsXG4gICAgcGF0dGVybkFwcGxpZWQ6IFwiXHU1REYyXHU1RTk0XHU3NTI4XHU2QTIxXHU1RjBGXCIsXG4gICAgY3VzdG9tUGF0dGVybjogXCJcdTgxRUFcdTVCOUFcdTRFNDlcdTZBMjFcdTVGMEZcIixcbiAgICBsb2dXaW5kb3c6ICdcdUQ4M0RcdURDQ0IgTG9ncycsXG4gICAgbG9nV2luZG93VGl0bGU6ICdcdTY1RTVcdTVGRDdcdTdBOTdcdTUzRTMnLFxuICAgIGRvd25sb2FkTG9nczogJ1x1NEUwQlx1OEY3RFx1NjVFNVx1NUZENycsXG4gICAgY2xlYXJMb2dzOiAnXHU2RTA1XHU5NjY0XHU2NUU1XHU1RkQ3JyxcbiAgICBjbG9zZUxvZ3M6ICdcdTUxNzNcdTk1RUQnXG4gIH0sXG5cbiAgLy8gXHU1MTlDXHU1NzNBXHU2QTIxXHU1NzU3XHVGRjA4XHU1Rjg1XHU1QjlFXHU3M0IwXHVGRjA5XG4gIGZhcm06IHtcbiAgICB0aXRsZTogXCJXUGxhY2UgXHU1MTlDXHU1NzNBXHU2NzNBXHU1NjY4XHU0RUJBXCIsXG4gICAgc3RhcnQ6IFwiXHU1RjAwXHU1OUNCXCIsXG4gICAgc3RvcDogXCJcdTUwNUNcdTZCNjJcIixcbiAgICBzdG9wcGVkOiBcIlx1NjczQVx1NTY2OFx1NEVCQVx1NURGMlx1NTA1Q1x1NkI2MlwiLFxuICAgIGNhbGlicmF0ZTogXCJcdTY4MjFcdTUxQzZcIixcbiAgICBwYWludE9uY2U6IFwiXHU0RTAwXHU2QjIxXCIsXG4gICAgY2hlY2tpbmdTdGF0dXM6IFwiXHU2OEMwXHU2N0U1XHU3MkI2XHU2MDAxXHU0RTJELi4uXCIsXG4gICAgY29uZmlndXJhdGlvbjogXCJcdTkxNERcdTdGNkVcIixcbiAgICBkZWxheTogXCJcdTVFRjZcdThGREYgKFx1NkJFQlx1NzlEMilcIixcbiAgICBwaXhlbHNQZXJCYXRjaDogXCJcdTZCQ0ZcdTYyNzlcdTUwQ0ZcdTdEMjBcIixcbiAgICBtaW5DaGFyZ2VzOiBcIlx1NjcwMFx1NUMxMVx1NkIyMVx1NjU3MFwiLFxuICAgIGNvbG9yTW9kZTogXCJcdTk4OUNcdTgyNzJcdTZBMjFcdTVGMEZcIixcbiAgICByYW5kb206IFwiXHU5NjhGXHU2NzNBXCIsXG4gICAgZml4ZWQ6IFwiXHU1NkZBXHU1QjlBXCIsXG4gICAgcmFuZ2U6IFwiXHU4MzAzXHU1NkY0XCIsXG4gICAgZml4ZWRDb2xvcjogXCJcdTU2RkFcdTVCOUFcdTk4OUNcdTgyNzJcIixcbiAgICBhZHZhbmNlZDogXCJcdTlBRDhcdTdFQTdcIixcbiAgICB0aWxlWDogXCJcdTc0RTZcdTcyNDcgWFwiLFxuICAgIHRpbGVZOiBcIlx1NzRFNlx1NzI0NyBZXCIsXG4gICAgY3VzdG9tUGFsZXR0ZTogXCJcdTgxRUFcdTVCOUFcdTRFNDlcdThDMDNcdTgyNzJcdTY3N0ZcIixcbiAgICBwYWxldHRlRXhhbXBsZTogXCJcdTRGOEJcdTU5ODI6ICNGRjAwMDAsIzAwRkYwMCwjMDAwMEZGXCIsXG4gICAgY2FwdHVyZTogXCJcdTYzNTVcdTgzQjdcIixcbiAgICBwYWludGVkOiBcIlx1NURGMlx1N0VEOFx1NTIzNlwiLFxuICAgIGNoYXJnZXM6IFwiXHU2QjIxXHU2NTcwXCIsXG4gICAgcmV0cmllczogXCJcdTkxQ0RcdThCRDVcIixcbiAgICB0aWxlOiBcIlx1NzRFNlx1NzI0N1wiLFxuICAgIGNvbmZpZ1NhdmVkOiBcIlx1OTE0RFx1N0Y2RVx1NURGMlx1NEZERFx1NUI1OFwiLFxuICAgIGNvbmZpZ0xvYWRlZDogXCJcdTkxNERcdTdGNkVcdTVERjJcdTUyQTBcdThGN0RcIixcbiAgICBjb25maWdSZXNldDogXCJcdTkxNERcdTdGNkVcdTVERjJcdTkxQ0RcdTdGNkVcIixcbiAgICBjYXB0dXJlSW5zdHJ1Y3Rpb25zOiBcIlx1OEJGN1x1NjI0Qlx1NTJBOFx1N0VEOFx1NTIzNlx1NEUwMFx1NEUyQVx1NTBDRlx1N0QyMFx1NEVFNVx1NjM1NVx1ODNCN1x1NTc1MFx1NjgwNy4uLlwiLFxuICAgIGJhY2tlbmRPbmxpbmU6IFwiXHU1NDBFXHU3QUVGXHU1NzI4XHU3RUJGXCIsXG4gICAgYmFja2VuZE9mZmxpbmU6IFwiXHU1NDBFXHU3QUVGXHU3OUJCXHU3RUJGXCIsXG4gICAgc3RhcnRpbmdCb3Q6IFwiXHU2QjYzXHU1NzI4XHU1NDJGXHU1MkE4XHU2NzNBXHU1NjY4XHU0RUJBLi4uXCIsXG4gICAgc3RvcHBpbmdCb3Q6IFwiXHU2QjYzXHU1NzI4XHU1MDVDXHU2QjYyXHU2NzNBXHU1NjY4XHU0RUJBLi4uXCIsXG4gICAgY2FsaWJyYXRpbmc6IFwiXHU2ODIxXHU1MUM2XHU0RTJELi4uXCIsXG4gICAgYWxyZWFkeVJ1bm5pbmc6IFwiXHU4MUVBXHU1MkE4XHU1MTlDXHU1NzNBXHU1REYyXHU1NzI4XHU4RkQwXHU4ODRDXHUzMDAyXCIsXG4gICAgaW1hZ2VSdW5uaW5nV2FybmluZzogXCJcdTgxRUFcdTUyQThcdTdFRDhcdTU2RkVcdTZCNjNcdTU3MjhcdThGRDBcdTg4NENcdUZGMENcdThCRjdcdTUxNDhcdTUxNzNcdTk1RURcdTUxOERcdTU0MkZcdTUyQThcdTgxRUFcdTUyQThcdTUxOUNcdTU3M0FcdTMwMDJcIixcbiAgICBzZWxlY3RQb3NpdGlvbjogXCJcdTkwMDlcdTYyRTlcdTUzM0FcdTU3REZcIixcbiAgICBzZWxlY3RQb3NpdGlvbkFsZXJ0OiBcIlx1RDgzQ1x1REZBRiBcdTU3MjhcdTU3MzBcdTU2RkVcdTc2ODRcdTdBN0FcdTc2N0RcdTUzM0FcdTU3REZcdTZEODJcdTRFMDBcdTRFMkFcdTUwQ0ZcdTdEMjBcdTRFRTVcdThCQkVcdTdGNkVcdTUxOUNcdTU3M0FcdTUzM0FcdTU3REZcIixcbiAgICB3YWl0aW5nUG9zaXRpb246IFwiXHVEODNEXHVEQzQ2IFx1N0I0OVx1NUY4NVx1NEY2MFx1NkQ4Mlx1NTNDMlx1ODAwM1x1NTBDRlx1N0QyMC4uLlwiLFxuICAgIHBvc2l0aW9uU2V0OiBcIlx1MjcwNSBcdTUzM0FcdTU3REZcdThCQkVcdTdGNkVcdTYyMTBcdTUyOUZcdUZGMDFcdTUzNEFcdTVGODQ6IDUwMHB4XCIsXG4gICAgcG9zaXRpb25UaW1lb3V0OiBcIlx1Mjc0QyBcdTUzM0FcdTU3REZcdTkwMDlcdTYyRTlcdThEODVcdTY1RjZcIixcbiAgICBtaXNzaW5nUG9zaXRpb246IFwiXHUyNzRDIFx1OEJGN1x1NTE0OFx1OTAwOVx1NjJFOVx1NTMzQVx1NTdERlx1RkYwOFx1NEY3Rlx1NzUyOFx1MjAxQ1x1OTAwOVx1NjJFOVx1NTMzQVx1NTdERlx1MjAxRFx1NjMwOVx1OTRBRVx1RkYwOVwiLFxuICAgIGZhcm1SYWRpdXM6IFwiXHU1MTlDXHU1NzNBXHU1MzRBXHU1Rjg0XCIsXG4gICAgcG9zaXRpb25JbmZvOiBcIlx1NUY1M1x1NTI0RFx1NTMzQVx1NTdERlwiLFxuICAgIGZhcm1pbmdJblJhZGl1czogXCJcdUQ4M0NcdURGM0UgXHU2QjYzXHU1NzI4XHU0RUU1XHU1MzRBXHU1Rjg0IHtyYWRpdXN9cHggXHU1NzI4ICh7eH0se3l9KSBcdTUxOUNcdTU3M0FcIixcbiAgICBzZWxlY3RFbXB0eUFyZWE6IFwiXHUyNkEwXHVGRTBGIFx1OTFDRFx1ODk4MTogXHU4QkY3XHU5MDA5XHU2MkU5XHU3QTdBXHU3NjdEXHU1MzNBXHU1N0RGXHU0RUU1XHU5MDdGXHU1MTREXHU1MUIyXHU3QTgxXCIsXG4gICAgbm9Qb3NpdGlvbjogXCJcdTY3MkFcdTkwMDlcdTYyRTlcdTUzM0FcdTU3REZcIixcbiAgICBjdXJyZW50Wm9uZTogXCJcdTUzM0FcdTU3REY6ICh7eH0se3l9KVwiLFxuICAgIGF1dG9TZWxlY3RQb3NpdGlvbjogXCJcdUQ4M0NcdURGQUYgXHU4QkY3XHU1MTQ4XHU5MDA5XHU2MkU5XHU1MzNBXHU1N0RGXHVGRjBDXHU1NzI4XHU1NzMwXHU1NkZFXHU0RTBBXHU2RDgyXHU0RTAwXHU0RTJBXHU1MENGXHU3RDIwXHU0RUU1XHU4QkJFXHU3RjZFXHU1MTlDXHU1NzNBXHU1MzNBXHU1N0RGXCIsXG4gICAgbG9nV2luZG93OiAnXHVEODNEXHVEQ0NCIExvZ3MnLFxuICAgIGxvZ1dpbmRvd1RpdGxlOiAnXHU2NUU1XHU1RkQ3XHU3QTk3XHU1M0UzJyxcbiAgICBkb3dubG9hZExvZ3M6ICdcdTRFMEJcdThGN0RcdTY1RTVcdTVGRDcnLFxuICAgIGNsZWFyTG9nczogJ1x1NkUwNVx1OTY2NFx1NjVFNVx1NUZENycsXG4gICAgY2xvc2VMb2dzOiAnXHU1MTczXHU5NUVEJ1xuICB9LFxuXG4gIC8vIFx1NTE2Q1x1NTE3MVxuICBjb21tb246IHtcbiAgICB5ZXM6IFwiXHU2NjJGXCIsXG4gICAgbm86IFwiXHU1NDI2XCIsXG4gICAgb2s6IFwiXHU3ODZFXHU4QkE0XCIsXG4gICAgY2FuY2VsOiBcIlx1NTNENlx1NkQ4OFwiLFxuICAgIGNsb3NlOiBcIlx1NTE3M1x1OTVFRFwiLFxuICAgIHNhdmU6IFwiXHU0RkREXHU1QjU4XCIsXG4gICAgbG9hZDogXCJcdTUyQTBcdThGN0RcIixcbiAgICBkZWxldGU6IFwiXHU1MjIwXHU5NjY0XCIsXG4gICAgZWRpdDogXCJcdTdGMTZcdThGOTFcIixcbiAgICBzdGFydDogXCJcdTVGMDBcdTU5Q0JcIixcbiAgICBzdG9wOiBcIlx1NTA1Q1x1NkI2MlwiLFxuICAgIHBhdXNlOiBcIlx1NjY4Mlx1NTA1Q1wiLFxuICAgIHJlc3VtZTogXCJcdTdFRTdcdTdFRURcIixcbiAgICByZXNldDogXCJcdTkxQ0RcdTdGNkVcIixcbiAgICBzZXR0aW5nczogXCJcdThCQkVcdTdGNkVcIixcbiAgICBoZWxwOiBcIlx1NUUyRVx1NTJBOVwiLFxuICAgIGFib3V0OiBcIlx1NTE3M1x1NEU4RVwiLFxuICAgIGxhbmd1YWdlOiBcIlx1OEJFRFx1OEEwMFwiLFxuICAgIGxvYWRpbmc6IFwiXHU1MkEwXHU4RjdEXHU0RTJELi4uXCIsXG4gICAgZXJyb3I6IFwiXHU5NTE5XHU4QkVGXCIsXG4gICAgc3VjY2VzczogXCJcdTYyMTBcdTUyOUZcIixcbiAgICB3YXJuaW5nOiBcIlx1OEI2Nlx1NTQ0QVwiLFxuICAgIGluZm86IFwiXHU0RkUxXHU2MDZGXCIsXG4gICAgbGFuZ3VhZ2VDaGFuZ2VkOiBcIlx1OEJFRFx1OEEwMFx1NURGMlx1NTIwN1x1NjM2Mlx1NEUzQSB7bGFuZ3VhZ2V9XCJcbiAgfSxcblxuICAvLyBcdTVCODhcdTYyQTRcdTZBMjFcdTU3NTdcbiAgZ3VhcmQ6IHtcbiAgICB0aXRsZTogXCJXUGxhY2UgXHU4MUVBXHU1MkE4XHU1Qjg4XHU2MkE0XCIsXG4gICAgaW5pdEJvdDogXCJcdTUyMURcdTU5Q0JcdTUzMTZcdTVCODhcdTYyQTRcdTY3M0FcdTU2NjhcdTRFQkFcIixcbiAgICBzZWxlY3RBcmVhOiBcIlx1OTAwOVx1NjJFOVx1NTMzQVx1NTdERlwiLFxuICAgIGNhcHR1cmVBcmVhOiBcIlx1NjM1NVx1ODNCN1x1NTMzQVx1NTdERlwiLFxuICAgIHN0YXJ0UHJvdGVjdGlvbjogXCJcdTVGMDBcdTU5Q0JcdTVCODhcdTYyQTRcIixcbiAgICBzdG9wUHJvdGVjdGlvbjogXCJcdTUwNUNcdTZCNjJcdTVCODhcdTYyQTRcIixcbiAgICB1cHBlckxlZnQ6IFwiXHU1REU2XHU0RTBBXHU4OUQyXCIsXG4gICAgbG93ZXJSaWdodDogXCJcdTUzRjNcdTRFMEJcdTg5RDJcIixcbiAgICBwcm90ZWN0ZWRQaXhlbHM6IFwiXHU1M0Q3XHU0RkREXHU2MkE0XHU1MENGXHU3RDIwXCIsXG4gICAgZGV0ZWN0ZWRDaGFuZ2VzOiBcIlx1NjhDMFx1NkQ0Qlx1NTIzMFx1NzY4NFx1NTNEOFx1NTMxNlwiLFxuICAgIHJlcGFpcmVkUGl4ZWxzOiBcIlx1NEZFRVx1NTkwRFx1NzY4NFx1NTBDRlx1N0QyMFwiLFxuICAgIGNoYXJnZXM6IFwiXHU2QjIxXHU2NTcwXCIsXG4gICAgd2FpdGluZ0luaXQ6IFwiXHU3QjQ5XHU1Rjg1XHU1MjFEXHU1OUNCXHU1MzE2Li4uXCIsXG4gICAgY2hlY2tpbmdDb2xvcnM6IFwiXHVEODNDXHVERkE4IFx1NjhDMFx1NjdFNVx1NTNFRlx1NzUyOFx1OTg5Q1x1ODI3Mi4uLlwiLFxuICAgIG5vQ29sb3JzRm91bmQ6IFwiXHUyNzRDIFx1NjcyQVx1NjI3RVx1NTIzMFx1OTg5Q1x1ODI3Mlx1RkYwQ1x1OEJGN1x1NTcyOFx1N0Y1MVx1N0FEOVx1NEUwQVx1NjI1M1x1NUYwMFx1OEMwM1x1ODI3Mlx1Njc3Rlx1MzAwMlwiLFxuICAgIGNvbG9yc0ZvdW5kOiBcIlx1MjcwNSBcdTYyN0VcdTUyMzAge2NvdW50fSBcdTc5Q0RcdTUzRUZcdTc1MjhcdTk4OUNcdTgyNzJcIixcbiAgICBpbml0U3VjY2VzczogXCJcdTI3MDUgXHU1Qjg4XHU2MkE0XHU2NzNBXHU1NjY4XHU0RUJBXHU1MjFEXHU1OUNCXHU1MzE2XHU2MjEwXHU1MjlGXCIsXG4gICAgaW5pdEVycm9yOiBcIlx1Mjc0QyBcdTVCODhcdTYyQTRcdTY3M0FcdTU2NjhcdTRFQkFcdTUyMURcdTU5Q0JcdTUzMTZcdTU5MzFcdThEMjVcIixcbiAgICBpbnZhbGlkQ29vcmRzOiBcIlx1Mjc0QyBcdTU3NTBcdTY4MDdcdTY1RTBcdTY1NDhcIixcbiAgICBpbnZhbGlkQXJlYTogXCJcdTI3NEMgXHU1MzNBXHU1N0RGXHU2NUUwXHU2NTQ4XHVGRjBDXHU1REU2XHU0RTBBXHU4OUQyXHU1RkM1XHU5ODdCXHU1QzBGXHU0RThFXHU1M0YzXHU0RTBCXHU4OUQyXCIsXG4gICAgYXJlYVRvb0xhcmdlOiBcIlx1Mjc0QyBcdTUzM0FcdTU3REZcdThGQzdcdTU5Mjc6IHtzaXplfSBcdTUwQ0ZcdTdEMjAgKFx1NjcwMFx1NTkyNzoge21heH0pXCIsXG4gICAgY2FwdHVyaW5nQXJlYTogXCJcdUQ4M0RcdURDRjggXHU2MzU1XHU4M0I3XHU1Qjg4XHU2MkE0XHU1MzNBXHU1N0RGXHU0RTJELi4uXCIsXG4gICAgYXJlYUNhcHR1cmVkOiBcIlx1MjcwNSBcdTUzM0FcdTU3REZcdTYzNTVcdTgzQjdcdTYyMTBcdTUyOUY6IHtjb3VudH0gXHU1MENGXHU3RDIwXHU1M0Q3XHU0RkREXHU2MkE0XCIsXG4gICAgY2FwdHVyZUVycm9yOiBcIlx1Mjc0QyBcdTYzNTVcdTgzQjdcdTUzM0FcdTU3REZcdTUxRkFcdTk1MTk6IHtlcnJvcn1cIixcbiAgICBjYXB0dXJlRmlyc3Q6IFwiXHUyNzRDIFx1OEJGN1x1NTE0OFx1NjM1NVx1ODNCN1x1NEUwMFx1NEUyQVx1NUI4OFx1NjJBNFx1NTMzQVx1NTdERlwiLFxuICAgIHByb3RlY3Rpb25TdGFydGVkOiBcIlx1RDgzRFx1REVFMVx1RkUwRiBcdTVCODhcdTYyQTRcdTVERjJcdTU0MkZcdTUyQTggLSBcdTUzM0FcdTU3REZcdTc2RDFcdTYzQTdcdTRFMkRcIixcbiAgICBwcm90ZWN0aW9uU3RvcHBlZDogXCJcdTIzRjlcdUZFMEYgXHU1Qjg4XHU2MkE0XHU1REYyXHU1MDVDXHU2QjYyXCIsXG4gICAgbm9DaGFuZ2VzOiBcIlx1MjcwNSBcdTUzM0FcdTU3REZcdTVCODlcdTUxNjggLSBcdTY3MkFcdTY4QzBcdTZENEJcdTUyMzBcdTUzRDhcdTUzMTZcIixcbiAgICBjaGFuZ2VzRGV0ZWN0ZWQ6IFwiXHVEODNEXHVERUE4IFx1NjhDMFx1NkQ0Qlx1NTIzMCB7Y291bnR9IFx1NEUyQVx1NTNEOFx1NTMxNlwiLFxuICAgIHJlcGFpcmluZzogXCJcdUQ4M0RcdURFRTBcdUZFMEYgXHU2QjYzXHU1NzI4XHU0RkVFXHU1OTBEIHtjb3VudH0gXHU0RTJBXHU1MENGXHU3RDIwLi4uXCIsXG4gICAgcmVwYWlyZWRTdWNjZXNzOiBcIlx1MjcwNSBcdTVERjJcdTYyMTBcdTUyOUZcdTRGRUVcdTU5MEQge2NvdW50fSBcdTRFMkFcdTUwQ0ZcdTdEMjBcIixcbiAgICByZXBhaXJFcnJvcjogXCJcdTI3NEMgXHU0RkVFXHU1OTBEXHU1MUZBXHU5NTE5OiB7ZXJyb3J9XCIsXG4gICAgbm9DaGFyZ2VzOiBcIlx1MjZBMFx1RkUwRiBcdTZCMjFcdTY1NzBcdTRFMERcdThEQjNcdUZGMENcdTY1RTBcdTZDRDVcdTRGRUVcdTU5MERcIixcbiAgICBjaGVja2luZ0NoYW5nZXM6IFwiXHVEODNEXHVERDBEIFx1NkI2M1x1NTcyOFx1NjhDMFx1NjdFNVx1NTMzQVx1NTdERlx1NTNEOFx1NTMxNi4uLlwiLFxuICAgIGVycm9yQ2hlY2tpbmc6IFwiXHUyNzRDIFx1NjhDMFx1NjdFNVx1NTFGQVx1OTUxOToge2Vycm9yfVwiLFxuICAgIGd1YXJkQWN0aXZlOiBcIlx1RDgzRFx1REVFMVx1RkUwRiBcdTVCODhcdTYyQTRcdTRFMkQgLSBcdTUzM0FcdTU3REZcdTUzRDdcdTRGRERcdTYyQTRcIixcbiAgICBsYXN0Q2hlY2s6IFwiXHU0RTBBXHU2QjIxXHU2OEMwXHU2N0U1OiB7dGltZX1cIixcbiAgICBuZXh0Q2hlY2s6IFwiXHU0RTBCXHU2QjIxXHU2OEMwXHU2N0U1OiB7dGltZX0gXHU3OUQyXHU1NDBFXCIsXG4gICAgYXV0b0luaXRpYWxpemluZzogXCJcdUQ4M0VcdUREMTYgXHU2QjYzXHU1NzI4XHU4MUVBXHU1MkE4XHU1MjFEXHU1OUNCXHU1MzE2Li4uXCIsXG4gICAgYXV0b0luaXRTdWNjZXNzOiBcIlx1MjcwNSBcdTgxRUFcdTUyQThcdTU0MkZcdTUyQThcdTYyMTBcdTUyOUZcIixcbiAgICBhdXRvSW5pdEZhaWxlZDogXCJcdTI2QTBcdUZFMEYgXHU2NUUwXHU2Q0Q1XHU4MUVBXHU1MkE4XHU1NDJGXHU1MkE4XHVGRjBDXHU4QkY3XHU2MjRCXHU1MkE4XHU2NENEXHU0RjVDXHUzMDAyXCIsXG4gICAgbWFudWFsSW5pdFJlcXVpcmVkOiBcIlx1RDgzRFx1REQyNyBcdTk3MDBcdTg5ODFcdTYyNEJcdTUyQThcdTUyMURcdTU5Q0JcdTUzMTZcIixcbiAgICBwYWxldHRlRGV0ZWN0ZWQ6IFwiXHVEODNDXHVERkE4IFx1NURGMlx1NjhDMFx1NkQ0Qlx1NTIzMFx1OEMwM1x1ODI3Mlx1Njc3RlwiLFxuICAgIHBhbGV0dGVOb3RGb3VuZDogXCJcdUQ4M0RcdUREMEQgXHU2QjYzXHU1NzI4XHU2NDFDXHU3RDIyXHU4QzAzXHU4MjcyXHU2NzdGLi4uXCIsXG4gICAgY2xpY2tpbmdQYWludEJ1dHRvbjogXCJcdUQ4M0RcdURDNDYgXHU2QjYzXHU1NzI4XHU3MEI5XHU1MUZCXHU3RUQ4XHU1MjM2XHU2MzA5XHU5NEFFLi4uXCIsXG4gICAgcGFpbnRCdXR0b25Ob3RGb3VuZDogXCJcdTI3NEMgXHU2NzJBXHU2MjdFXHU1MjMwXHU3RUQ4XHU1MjM2XHU2MzA5XHU5NEFFXCIsXG4gICAgc2VsZWN0VXBwZXJMZWZ0OiBcIlx1RDgzQ1x1REZBRiBcdTU3MjhcdTk3MDBcdTg5ODFcdTRGRERcdTYyQTRcdTUzM0FcdTU3REZcdTc2ODRcdTVERTZcdTRFMEFcdTg5RDJcdTZEODJcdTRFMDBcdTRFMkFcdTUwQ0ZcdTdEMjBcIixcbiAgICBzZWxlY3RMb3dlclJpZ2h0OiBcIlx1RDgzQ1x1REZBRiBcdTczQjBcdTU3MjhcdTU3MjhcdTUzRjNcdTRFMEJcdTg5RDJcdTZEODJcdTRFMDBcdTRFMkFcdTUwQ0ZcdTdEMjBcIixcbiAgICB3YWl0aW5nVXBwZXJMZWZ0OiBcIlx1RDgzRFx1REM0NiBcdTdCNDlcdTVGODVcdTkwMDlcdTYyRTlcdTVERTZcdTRFMEFcdTg5RDIuLi5cIixcbiAgICB3YWl0aW5nTG93ZXJSaWdodDogXCJcdUQ4M0RcdURDNDYgXHU3QjQ5XHU1Rjg1XHU5MDA5XHU2MkU5XHU1M0YzXHU0RTBCXHU4OUQyLi4uXCIsXG4gICAgdXBwZXJMZWZ0Q2FwdHVyZWQ6IFwiXHUyNzA1IFx1NURGMlx1NjM1NVx1ODNCN1x1NURFNlx1NEUwQVx1ODlEMjogKHt4fSwge3l9KVwiLFxuICAgIGxvd2VyUmlnaHRDYXB0dXJlZDogXCJcdTI3MDUgXHU1REYyXHU2MzU1XHU4M0I3XHU1M0YzXHU0RTBCXHU4OUQyOiAoe3h9LCB7eX0pXCIsXG4gICAgc2VsZWN0aW9uVGltZW91dDogXCJcdTI3NEMgXHU5MDA5XHU2MkU5XHU4RDg1XHU2NUY2XCIsXG4gICAgc2VsZWN0aW9uRXJyb3I6IFwiXHUyNzRDIFx1OTAwOVx1NjJFOVx1NTFGQVx1OTUxOVx1RkYwQ1x1OEJGN1x1OTFDRFx1OEJENVwiLFxuICAgIGxvZ1dpbmRvdzogJ1x1RDgzRFx1RENDQiBMb2dzJyxcbiAgICBsb2dXaW5kb3dUaXRsZTogJ1x1NjVFNVx1NUZEN1x1N0E5N1x1NTNFMycsXG4gICAgZG93bmxvYWRMb2dzOiAnXHU0RTBCXHU4RjdEXHU2NUU1XHU1RkQ3JyxcbiAgICBjbGVhckxvZ3M6ICdcdTZFMDVcdTk2NjRcdTY1RTVcdTVGRDcnLFxuICAgIGNsb3NlTG9nczogJ1x1NTE3M1x1OTVFRCcsXG4gICAgLy8gQW5hbHlzaXMgV2luZG93XG4gICAgYW5hbHlzaXNUaXRsZTogXCJcdTVERUVcdTVGMDJcdTUyMDZcdTY3OTAgLSBKU09OIHZzIFx1NUY1M1x1NTI0RFx1NzUzQlx1NUUwM1wiLFxuICAgIGNvcnJlY3RQaXhlbHM6IFwiXHU2QjYzXHU3ODZFXHU1MENGXHU3RDIwXCIsXG4gICAgaW5jb3JyZWN0UGl4ZWxzOiBcIlx1OTUxOVx1OEJFRlx1NTBDRlx1N0QyMFwiLFxuICAgIG1pc3NpbmdQaXhlbHM6IFwiXHU3RjNBXHU1OTMxXHU1MENGXHU3RDIwXCIsXG4gICAgc2hvd0NvcnJlY3Q6IFwiXHU2NjNFXHU3OTNBXHU2QjYzXHU3ODZFXCIsXG4gICAgc2hvd0luY29ycmVjdDogXCJcdTY2M0VcdTc5M0FcdTk1MTlcdThCRUZcIixcbiAgICBzaG93TWlzc2luZzogXCJcdTY2M0VcdTc5M0FcdTdGM0FcdTU5MzFcIixcbiAgICBhdXRvUmVmcmVzaDogXCJcdTgxRUFcdTUyQThcdTUyMzdcdTY1QjBcIixcbiAgICB6b29tQWRqdXN0ZWQ6IFwiXHU3RjI5XHU2NTNFXHU4MUVBXHU1MkE4XHU4QzAzXHU2NTc0XHU0RTNBXCIsXG4gICAgYXV0b1JlZnJlc2hFbmFibGVkOiBcIlx1ODFFQVx1NTJBOFx1NTIzN1x1NjVCMFx1NURGMlx1NTQyRlx1NzUyOFx1RkYwQ1x1OTVGNFx1OTY5NFwiLFxuICAgIGF1dG9SZWZyZXNoRGlzYWJsZWQ6IFwiXHU4MUVBXHU1MkE4XHU1MjM3XHU2NUIwXHU1REYyXHU3OTgxXHU3NTI4XCIsXG4gICAgYXV0b1JlZnJlc2hJbnRlcnZhbFVwZGF0ZWQ6IFwiXHU4MUVBXHU1MkE4XHU1MjM3XHU2NUIwXHU5NUY0XHU5Njk0XHU1REYyXHU2NkY0XHU2NUIwXHU0RTNBXCIsXG4gICAgdmlzdWFsaXphdGlvblVwZGF0ZWQ6IFwiXHU1M0VGXHU4OUM2XHU1MzE2XHU1REYyXHU2NkY0XHU2NUIwXCIsXG4gICAgLy8gQ29uZmlnIFdpbmRvd1xuICAgIGNvbmZpZ1RpdGxlOiBcIkd1YXJkXHU5MTREXHU3RjZFXCIsXG4gICAgcHJvdGVjdGlvblBhdHRlcm5zOiBcIlx1NEZERFx1NjJBNFx1NkEyMVx1NUYwRlwiLFxuICAgIHByZWZlclNwZWNpZmljQ29sb3I6IFwiXHU0RjE4XHU1MTQ4XHU3Mjc5XHU1QjlBXHU5ODlDXHU4MjcyXCIsXG4gICAgZXhjbHVkZVNwZWNpZmljQ29sb3JzOiBcIlx1NEUwRFx1NEZFRVx1NTkwRFx1NzI3OVx1NUI5QVx1OTg5Q1x1ODI3MlwiLFxuICAgIGxvYWRNYW5hZ2VtZW50OiBcIlx1OEQxRlx1OEY3RFx1N0JBMVx1NzQwNlwiLFxuICAgIG1pbkxvYWRzVG9XYWl0OiBcIlx1N0I0OVx1NUY4NVx1NzY4NFx1NjcwMFx1NUMwRlx1OEQxRlx1OEY3RFx1NjU3MFwiLFxuICAgIHBpeGVsc1BlckJhdGNoOiBcIlx1NkJDRlx1NjI3OVx1NTBDRlx1N0QyMFx1NjU3MFwiLFxuICAgIHNwZW5kQWxsUGl4ZWxzT25TdGFydDogXCJcdTU0MkZcdTUyQThcdTY1RjZcdTZEODhcdTgwMTdcdTYyNDBcdTY3MDlcdTUwQ0ZcdTdEMjBcIixcbiAgICB3YWl0VGltZXM6IFwiXHU3QjQ5XHU1Rjg1XHU2NUY2XHU5NUY0XCIsXG4gICAgdXNlUmFuZG9tVGltZXM6IFwiXHU2Mjc5XHU2QjIxXHU5NUY0XHU0RjdGXHU3NTI4XHU5NjhGXHU2NzNBXHU2NUY2XHU5NUY0XCIsXG4gICAgbWluVGltZTogXCJcdTY3MDBcdTVDMEZcdTY1RjZcdTk1RjQgKFx1NzlEMilcIixcbiAgICBtYXhUaW1lOiBcIlx1NjcwMFx1NTkyN1x1NjVGNlx1OTVGNCAoXHU3OUQyKVwiXG4gIH1cbn07XG4iLCAiZXhwb3J0IGNvbnN0IHpoSGFudCA9IHtcbiAgLy8gXHU1NTUzXHU1MkQ1XHU1NjY4XG4gIGxhdW5jaGVyOiB7XG4gICAgdGl0bGU6ICdXUGxhY2UgXHU4MUVBXHU1MkQ1XHU2QTVGXHU1NjY4XHU0RUJBJyxcbiAgICBhdXRvRmFybTogJ1x1RDgzQ1x1REYzRSBcdTgxRUFcdTUyRDVcdThGQjJcdTU4MzQnLFxuICAgIGF1dG9JbWFnZTogJ1x1RDgzQ1x1REZBOCBcdTgxRUFcdTUyRDVcdTdFNkFcdTU3MTYnLFxuICAgIGF1dG9HdWFyZDogJ1x1RDgzRFx1REVFMVx1RkUwRiBcdTgxRUFcdTUyRDVcdTVCODhcdThCNzcnLFxuICAgIHNlbGVjdGlvbjogJ1x1OTA3OFx1NjRDNycsXG4gICAgdXNlcjogJ1x1NzUyOFx1NjIzNycsXG4gICAgY2hhcmdlczogJ1x1NkIyMVx1NjU3OCcsXG4gICAgYmFja2VuZDogJ1x1NUY4Q1x1N0FFRicsXG4gICAgZGF0YWJhc2U6ICdcdTY1NzhcdTY0REFcdTVFQUInLFxuICAgIHVwdGltZTogJ1x1OTA0Qlx1ODg0Q1x1NjY0Mlx1OTU5MycsXG4gICAgY2xvc2U6ICdcdTk1RENcdTk1ODknLFxuICAgIGxhdW5jaDogJ1x1NTU1M1x1NTJENScsXG4gICAgbG9hZGluZzogJ1x1NTJBMFx1OEYwOVx1NEUyRFx1MjAyNicsXG4gICAgZXhlY3V0aW5nOiAnXHU1N0Y3XHU4ODRDXHU0RTJEXHUyMDI2JyxcbiAgICBkb3dubG9hZGluZzogJ1x1NkI2M1x1NTcyOFx1NEUwQlx1OEYwOVx1ODE3M1x1NjcyQ1x1MjAyNicsXG4gICAgY2hvb3NlQm90OiAnXHU5MDc4XHU2NEM3XHU0RTAwXHU1MDBCXHU2QTVGXHU1NjY4XHU0RUJBXHU0RTI2XHU5RURFXHU2NENBXHU1NTUzXHU1MkQ1JyxcbiAgICByZWFkeVRvTGF1bmNoOiAnXHU2RTk2XHU1MDk5XHU1NTUzXHU1MkQ1JyxcbiAgICBsb2FkRXJyb3I6ICdcdTUyQTBcdThGMDlcdTkzMkZcdThBQTQnLFxuICAgIGxvYWRFcnJvck1zZzogJ1x1NzEyMVx1NkNENVx1NTJBMFx1OEYwOVx1NjI0MFx1OTA3OFx1NkE1Rlx1NTY2OFx1NEVCQVx1MzAwMlx1OEFDQlx1NkFBMlx1NjdFNVx1N0RCMlx1N0Q2MVx1OTAyM1x1NjNBNVx1NjIxNlx1OTFDRFx1OEE2Nlx1MzAwMicsXG4gICAgY2hlY2tpbmc6ICdcdUQ4M0RcdUREMDQgXHU2QUEyXHU2N0U1XHU0RTJELi4uJyxcbiAgICBvbmxpbmU6ICdcdUQ4M0RcdURGRTIgXHU1NzI4XHU3RERBJyxcbiAgICBvZmZsaW5lOiAnXHVEODNEXHVERDM0IFx1OTZFMlx1N0REQScsXG4gICAgb2s6ICdcdUQ4M0RcdURGRTIgXHU2QjYzXHU1RTM4JyxcbiAgICBlcnJvcjogJ1x1RDgzRFx1REQzNCBcdTkzMkZcdThBQTQnLFxuICAgIHVua25vd246ICctJyxcbiAgICBsb2dXaW5kb3c6ICdcdUQ4M0RcdURDQ0IgTG9ncycsXG4gICAgbG9nV2luZG93VGl0bGU6ICdcdTY1RTVcdThBOENcdTg5OTZcdTdBOTcnLFxuICAgIGRvd25sb2FkTG9nczogJ1x1NEUwQlx1OEYwOVx1NjVFNVx1OEE4QycsXG4gICAgY2xlYXJMb2dzOiAnXHU2RTA1XHU5NjY0XHU2NUU1XHU4QThDJyxcbiAgICBjbG9zZUxvZ3M6ICdcdTk1RENcdTk1ODknXG4gIH0sXG5cbiAgLy8gXHU3RTZBXHU1NzE2XHU2QTIxXHU1ODRBXG4gIGltYWdlOiB7XG4gICAgdGl0bGU6IFwiV1BsYWNlIFx1ODFFQVx1NTJENVx1N0U2QVx1NTcxNlwiLFxuICAgIGluaXRCb3Q6IFwiXHU1MjFEXHU1OUNCXHU1MzE2XHU4MUVBXHU1MkQ1XHU2QTVGXHU1NjY4XHU0RUJBXCIsXG4gICAgdXBsb2FkSW1hZ2U6IFwiXHU0RTBBXHU1MEIzXHU1NzE2XHU3MjQ3XCIsXG4gICAgcmVzaXplSW1hZ2U6IFwiXHU4QUJGXHU2NTc0XHU1NzE2XHU3MjQ3XHU1OTI3XHU1QzBGXCIsXG4gICAgc2VsZWN0UG9zaXRpb246IFwiXHU5MDc4XHU2NEM3XHU0RjREXHU3RjZFXCIsXG4gICAgc3RhcnRQYWludGluZzogXCJcdTk1OEJcdTU5Q0JcdTdFNkFcdTg4RkRcIixcbiAgICBzdG9wUGFpbnRpbmc6IFwiXHU1MDVDXHU2QjYyXHU3RTZBXHU4OEZEXCIsXG4gICAgc2F2ZVByb2dyZXNzOiBcIlx1NEZERFx1NUI1OFx1OTAzMlx1NUVBNlwiLFxuICAgIGxvYWRQcm9ncmVzczogXCJcdTUyQTBcdThGMDlcdTkwMzJcdTVFQTZcIixcbiAgICBjaGVja2luZ0NvbG9yczogXCJcdUQ4M0RcdUREMEQgXHU2QUEyXHU2N0U1XHU1M0VGXHU3NTI4XHU5ODRGXHU4MjcyLi4uXCIsXG4gICAgbm9Db2xvcnNGb3VuZDogXCJcdTI3NEMgXHU4QUNCXHU1NzI4XHU3REIyXHU3QUQ5XHU0RTBBXHU2MjUzXHU5NThCXHU4QUJGXHU4MjcyXHU2NzdGXHU1RjhDXHU5MUNEXHU4QTY2XHVGRjAxXCIsXG4gICAgY29sb3JzRm91bmQ6IFwiXHUyNzA1IFx1NjI3RVx1NTIzMCB7Y291bnR9IFx1N0EyRVx1NTNFRlx1NzUyOFx1OTg0Rlx1ODI3MlwiLFxuICAgIGxvYWRpbmdJbWFnZTogXCJcdUQ4M0RcdUREQkNcdUZFMEYgXHU2QjYzXHU1NzI4XHU1MkEwXHU4RjA5XHU1NzE2XHU3MjQ3Li4uXCIsXG4gICAgaW1hZ2VMb2FkZWQ6IFwiXHUyNzA1IFx1NTcxNlx1NzI0N1x1NURGMlx1NTJBMFx1OEYwOVx1RkYwQ1x1NjcwOVx1NjU0OFx1NTBDRlx1N0QyMCB7Y291bnR9IFx1NTAwQlwiLFxuICAgIGltYWdlRXJyb3I6IFwiXHUyNzRDIFx1NTcxNlx1NzI0N1x1NTJBMFx1OEYwOVx1NTkzMVx1NjU1N1wiLFxuICAgIHNlbGVjdFBvc2l0aW9uQWxlcnQ6IFwiXHU4QUNCXHU1NzI4XHU0RjYwXHU2MEYzXHU5NThCXHU1OUNCXHU3RTZBXHU4OEZEXHU3Njg0XHU1NzMwXHU2NUI5XHU1ODU3XHU3QjJDXHU0RTAwXHU1MDBCXHU1MENGXHU3RDIwXHVGRjAxXCIsXG4gICAgd2FpdGluZ1Bvc2l0aW9uOiBcIlx1RDgzRFx1REM0NiBcdTdCNDlcdTVGODVcdTRGNjBcdTU4NTdcdTUzQzNcdTgwMDNcdTUwQ0ZcdTdEMjAuLi5cIixcbiAgICBwb3NpdGlvblNldDogXCJcdTI3MDUgXHU0RjREXHU3RjZFXHU4QTJEXHU3RjZFXHU2MjEwXHU1MjlGXHVGRjAxXCIsXG4gICAgcG9zaXRpb25UaW1lb3V0OiBcIlx1Mjc0QyBcdTRGNERcdTdGNkVcdTkwNzhcdTY0QzdcdThEODVcdTY2NDJcIixcbiAgICBwb3NpdGlvbkRldGVjdGVkOiBcIlx1RDgzQ1x1REZBRiBcdTVERjJcdTZBQTJcdTZFMkNcdTUyMzBcdTRGNERcdTdGNkVcdUZGMENcdTg2NTVcdTc0MDZcdTRFMkQuLi5cIixcbiAgICBwb3NpdGlvbkVycm9yOiBcIlx1Mjc0QyBcdTRGNERcdTdGNkVcdTZBQTJcdTZFMkNcdTU5MzFcdTY1NTdcdUZGMENcdThBQ0JcdTkxQ0RcdThBNjZcIixcbiAgICBzdGFydFBhaW50aW5nTXNnOiBcIlx1RDgzQ1x1REZBOCBcdTk1OEJcdTU5Q0JcdTdFNkFcdTg4RkQuLi5cIixcbiAgICBwYWludGluZ1Byb2dyZXNzOiBcIlx1RDgzRVx1RERGMSBcdTkwMzJcdTVFQTY6IHtwYWludGVkfS97dG90YWx9IFx1NTBDRlx1N0QyMC4uLlwiLFxuICAgIG5vQ2hhcmdlczogXCJcdTIzMUIgXHU2QzkyXHU2NzA5XHU2QjIxXHU2NTc4XHUzMDAyXHU3QjQ5XHU1Rjg1IHt0aW1lfS4uLlwiLFxuICAgIHBhaW50aW5nU3RvcHBlZDogXCJcdTIzRjlcdUZFMEYgXHU3NTI4XHU2MjM3XHU1REYyXHU1MDVDXHU2QjYyXHU3RTZBXHU4OEZEXCIsXG4gICAgcGFpbnRpbmdDb21wbGV0ZTogXCJcdTI3MDUgXHU3RTZBXHU4OEZEXHU1QjhDXHU2MjEwXHVGRjAxXHU1MTcxXHU3RTZBXHU4OEZEIHtjb3VudH0gXHU1MDBCXHU1MENGXHU3RDIwXHUzMDAyXCIsXG4gICAgcGFpbnRpbmdFcnJvcjogXCJcdTI3NEMgXHU3RTZBXHU4OEZEXHU5MDRFXHU3QTBCXHU0RTJEXHU1MUZBXHU5MzJGXCIsXG4gICAgbWlzc2luZ1JlcXVpcmVtZW50czogXCJcdTI3NEMgXHU4QUNCXHU1MTQ4XHU1MkEwXHU4RjA5XHU1NzE2XHU3MjQ3XHU0RTI2XHU5MDc4XHU2NEM3XHU0RjREXHU3RjZFXCIsXG4gICAgcHJvZ3Jlc3M6IFwiXHU5MDMyXHU1RUE2XCIsXG4gICAgdXNlck5hbWU6IFwiXHU3NTI4XHU2MjM3XCIsXG4gICAgcGl4ZWxzOiBcIlx1NTBDRlx1N0QyMFwiLFxuICAgIGNoYXJnZXM6IFwiXHU2QjIxXHU2NTc4XCIsXG4gICAgZXN0aW1hdGVkVGltZTogXCJcdTk4MTBcdThBMDhcdTY2NDJcdTk1OTNcIixcbiAgICBpbml0TWVzc2FnZTogXCJcdTlFREVcdTY0Q0FcdTIwMUNcdTUyMURcdTU5Q0JcdTUzMTZcdTgxRUFcdTUyRDVcdTZBNUZcdTU2NjhcdTRFQkFcdTIwMURcdTk1OEJcdTU5Q0JcIixcbiAgICB3YWl0aW5nSW5pdDogXCJcdTdCNDlcdTVGODVcdTUyMURcdTU5Q0JcdTUzMTYuLi5cIixcbiAgICByZXNpemVTdWNjZXNzOiBcIlx1MjcwNSBcdTU3MTZcdTcyNDdcdTVERjJcdThBQkZcdTY1NzRcdTcwQkEge3dpZHRofXh7aGVpZ2h0fVwiLFxuICAgIHBhaW50aW5nUGF1c2VkOiBcIlx1MjNGOFx1RkUwRiBcdTdFNkFcdTg4RkRcdTY2QUJcdTUwNUNcdTY1QkNcdTRGNERcdTdGNkUgWDoge3h9LCBZOiB7eX1cIixcbiAgICBwaXhlbHNQZXJCYXRjaDogXCJcdTZCQ0ZcdTYyNzlcdTUwQ0ZcdTdEMjBcdTY1NzhcIixcbiAgICBiYXRjaFNpemU6IFwiXHU2Mjc5XHU2QjIxXHU1OTI3XHU1QzBGXCIsXG4gICAgbmV4dEJhdGNoVGltZTogXCJcdTRFMEJcdTZCMjFcdTYyNzlcdTZCMjFcdTY2NDJcdTk1OTNcIixcbiAgICB1c2VBbGxDaGFyZ2VzOiBcIlx1NEY3Rlx1NzUyOFx1NjI0MFx1NjcwOVx1NTNFRlx1NzUyOFx1NkIyMVx1NjU3OFwiLFxuICAgIHNob3dPdmVybGF5OiBcIlx1OTg2Rlx1NzkzQVx1ODk4Nlx1ODRDQlx1NUM2NFwiLFxuICAgIG1heENoYXJnZXM6IFwiXHU2QkNGXHU2Mjc5XHU2NzAwXHU1OTI3XHU2QjIxXHU2NTc4XCIsXG4gICAgd2FpdGluZ0ZvckNoYXJnZXM6IFwiXHUyM0YzIFx1N0I0OVx1NUY4NVx1NkIyMVx1NjU3ODoge2N1cnJlbnR9L3tuZWVkZWR9XCIsXG4gICAgdGltZVJlbWFpbmluZzogXCJcdTUyNjlcdTk5MThcdTY2NDJcdTk1OTNcIixcbiAgICBjb29sZG93bldhaXRpbmc6IFwiXHUyM0YzIFx1N0I0OVx1NUY4NSB7dGltZX0gXHU1RjhDXHU3RTdDXHU3RThDLi4uXCIsXG4gICAgcHJvZ3Jlc3NTYXZlZDogXCJcdTI3MDUgXHU5MDMyXHU1RUE2XHU1REYyXHU0RkREXHU1QjU4XHU3MEJBIHtmaWxlbmFtZX1cIixcbiAgICBwcm9ncmVzc0xvYWRlZDogXCJcdTI3MDUgXHU1REYyXHU1MkEwXHU4RjA5XHU5MDMyXHU1RUE2OiB7cGFpbnRlZH0ve3RvdGFsfSBcdTUwQ0ZcdTdEMjBcdTVERjJcdTdFNkFcdTg4RkRcIixcbiAgICBwcm9ncmVzc0xvYWRFcnJvcjogXCJcdTI3NEMgXHU1MkEwXHU4RjA5XHU5MDMyXHU1RUE2XHU1OTMxXHU2NTU3OiB7ZXJyb3J9XCIsXG4gXG4gICAgIHByb2dyZXNzU2F2ZUVycm9yOiBcIlx1Mjc0QyBcdTRGRERcdTVCNThcdTkwMzJcdTVFQTZcdTU5MzFcdTY1NTc6IHtlcnJvcn1cIixcblxuICAgIGNvbmZpcm1TYXZlUHJvZ3Jlc3M6IFwiXHU1NzI4XHU1MDVDXHU2QjYyXHU0RTRCXHU1MjREXHU4OTgxXHU0RkREXHU1QjU4XHU3NTc2XHU1MjREXHU5MDMyXHU1RUE2XHU1NUNFXHVGRjFGXCIsXG4gICAgc2F2ZVByb2dyZXNzVGl0bGU6IFwiXHU0RkREXHU1QjU4XHU5MDMyXHU1RUE2XCIsXG4gICAgZGlzY2FyZFByb2dyZXNzOiBcIlx1NjUzRVx1NjhDNFwiLFxuICAgIGNhbmNlbDogXCJcdTUzRDZcdTZEODhcIixcbiAgICBtaW5pbWl6ZTogXCJcdTY3MDBcdTVDMEZcdTUzMTZcIixcbiAgICB3aWR0aDogXCJcdTVCRUNcdTVFQTZcIixcbiAgICBoZWlnaHQ6IFwiXHU5QUQ4XHU1RUE2XCIsXG4gICAga2VlcEFzcGVjdDogXCJcdTRGRERcdTYzMDFcdTdFMzFcdTZBNkJcdTZCRDRcIixcbiAgICBhcHBseTogXCJcdTYxQzlcdTc1MjhcIixcbiAgICBvdmVybGF5T246IFwiXHU4OTg2XHU4NENCXHU1QzY0OiBcdTk1OEJcdTU1NTNcIixcbiAgICBvdmVybGF5T2ZmOiBcIlx1ODk4Nlx1ODRDQlx1NUM2NDogXHU5NURDXHU5NTg5XCIsXG4gICAgcGFzc0NvbXBsZXRlZDogXCJcdTI3MDUgXHU2Mjc5XHU2QjIxXHU1QjhDXHU2MjEwOiBcdTVERjJcdTdFNkFcdTg4RkQge3BhaW50ZWR9IFx1NTBDRlx1N0QyMCB8IFx1OTAzMlx1NUVBNjoge3BlcmNlbnR9JSAoe2N1cnJlbnR9L3t0b3RhbH0pXCIsXG4gICAgd2FpdGluZ0NoYXJnZXNSZWdlbjogXCJcdTIzRjMgXHU3QjQ5XHU1Rjg1XHU2QjIxXHU2NTc4XHU2MDYyXHU1RkE5OiB7Y3VycmVudH0ve25lZWRlZH0gLSBcdTY2NDJcdTk1OTM6IHt0aW1lfVwiLFxuICAgIHdhaXRpbmdDaGFyZ2VzQ291bnRkb3duOiBcIlx1MjNGMyBcdTdCNDlcdTVGODVcdTZCMjFcdTY1Nzg6IHtjdXJyZW50fS97bmVlZGVkfSAtIFx1NTI2OVx1OTkxODoge3RpbWV9XCIsXG4gICAgYXV0b0luaXRpYWxpemluZzogXCJcdUQ4M0VcdUREMTYgXHU2QjYzXHU1NzI4XHU4MUVBXHU1MkQ1XHU1MjFEXHU1OUNCXHU1MzE2Li4uXCIsXG4gICAgYXV0b0luaXRTdWNjZXNzOiBcIlx1MjcwNSBcdTgxRUFcdTUyRDVcdTU1NTNcdTUyRDVcdTYyMTBcdTUyOUZcIixcbiAgICBhdXRvSW5pdEZhaWxlZDogXCJcdTI2QTBcdUZFMEYgXHU3MTIxXHU2Q0Q1XHU4MUVBXHU1MkQ1XHU1NTUzXHU1MkQ1XHVGRjBDXHU4QUNCXHU2MjRCXHU1MkQ1XHU2NENEXHU0RjVDXHUzMDAyXCIsXG4gICAgcGFsZXR0ZURldGVjdGVkOiBcIlx1RDgzQ1x1REZBOCBcdTVERjJcdTZBQTJcdTZFMkNcdTUyMzBcdThBQkZcdTgyNzJcdTY3N0ZcIixcbiAgICBwYWxldHRlTm90Rm91bmQ6IFwiXHVEODNEXHVERDBEIFx1NkI2M1x1NTcyOFx1NjQxQ1x1N0QyMlx1OEFCRlx1ODI3Mlx1Njc3Ri4uLlwiLFxuICAgIGNsaWNraW5nUGFpbnRCdXR0b246IFwiXHVEODNEXHVEQzQ2IFx1NkI2M1x1NTcyOFx1OUVERVx1NjRDQVx1N0U2QVx1ODhGRFx1NjMwOVx1OTIxNS4uLlwiLFxuICAgIHBhaW50QnV0dG9uTm90Rm91bmQ6IFwiXHUyNzRDIFx1NjcyQVx1NjI3RVx1NTIzMFx1N0U2QVx1ODhGRFx1NjMwOVx1OTIxNVwiLFxuICAgIG1hbnVhbEluaXRSZXF1aXJlZDogXCJcdUQ4M0RcdUREMjcgXHU5NzAwXHU4OTgxXHU2MjRCXHU1MkQ1XHU1MjFEXHU1OUNCXHU1MzE2XCIsXG4gICAgcmV0cnlBdHRlbXB0OiBcIlx1RDgzRFx1REQwNCBcdTkxQ0RcdThBNjYge2F0dGVtcHR9L3ttYXhBdHRlbXB0c31cdUZGMENcdTdCNDlcdTVGODUge2RlbGF5fSBcdTc5RDIuLi5cIixcbiAgICByZXRyeUVycm9yOiBcIlx1RDgzRFx1RENBNSBcdTdCMkMge2F0dGVtcHR9L3ttYXhBdHRlbXB0c30gXHU2QjIxXHU1NjE3XHU4QTY2XHU1MUZBXHU5MzJGXHVGRjBDXHU1QzA3XHU1NzI4IHtkZWxheX0gXHU3OUQyXHU1RjhDXHU5MUNEXHU4QTY2Li4uXCIsXG4gICAgcmV0cnlGYWlsZWQ6IFwiXHUyNzRDIFx1OEQ4NVx1OTA0RSB7bWF4QXR0ZW1wdHN9IFx1NkIyMVx1NTYxN1x1OEE2Nlx1NTkzMVx1NjU1N1x1MzAwMlx1N0U3Q1x1N0U4Q1x1NEUwQlx1NEUwMFx1NjI3OS4uLlwiLFxuICAgIG5ldHdvcmtFcnJvcjogXCJcdUQ4M0NcdURGMTAgXHU3REIyXHU3RDYxXHU5MzJGXHU4QUE0XHVGRjBDXHU2QjYzXHU1NzI4XHU5MUNEXHU4QTY2Li4uXCIsXG4gICAgc2VydmVyRXJyb3I6IFwiXHVEODNEXHVERDI1IFx1NjcwRFx1NTJEOVx1NTY2OFx1OTMyRlx1OEFBNFx1RkYwQ1x1NkI2M1x1NTcyOFx1OTFDRFx1OEE2Ni4uLlwiLFxuICAgIHRpbWVvdXRFcnJvcjogXCJcdTIzRjAgXHU0RjNBXHU2NzBEXHU1NjY4XHU5MDNFXHU2NjQyXHVGRjBDXHU2QjYzXHU1NzI4XHU5MUNEXHU4QTY2Li4uXCIsXG4gICAgLy8gdjIuMCAtIFx1NEZERFx1OEI3N1x1ODIwN1x1N0U2QVx1ODhGRFx1NkEyMVx1NUYwRlxuICAgIHByb3RlY3Rpb25FbmFibGVkOiBcIlx1NURGMlx1NTU1Rlx1NzUyOFx1NEZERFx1OEI3N1wiLFxuICAgIHByb3RlY3Rpb25EaXNhYmxlZDogXCJcdTVERjJcdTUwNUNcdTc1MjhcdTRGRERcdThCNzdcIixcbiAgICBwYWludFBhdHRlcm46IFwiXHU3RTZBXHU4OEZEXHU2QTIxXHU1RjBGXCIsXG4gICAgcGF0dGVybkxpbmVhclN0YXJ0OiBcIlx1N0REQVx1NjAyN1x1RkYwOFx1OEQ3N1x1OUVERVx1RkYwOVwiLFxuICAgIHBhdHRlcm5MaW5lYXJFbmQ6IFwiXHU3RERBXHU2MDI3XHVGRjA4XHU3RDQyXHU5RURFXHVGRjA5XCIsXG4gICAgcGF0dGVyblJhbmRvbTogXCJcdTk2QThcdTZBNUZcIixcbiAgICBwYXR0ZXJuQ2VudGVyT3V0OiBcIlx1NzUzMVx1NEUyRFx1NUZDM1x1NTQxMVx1NTkxNlwiLFxuICAgIHBhdHRlcm5Db3JuZXJzRmlyc3Q6IFwiXHU1MTQ4XHU4OUQyXHU4NDNEXCIsXG4gICAgcGF0dGVyblNwaXJhbDogXCJcdTg3QkFcdTY1Q0JcIixcbiAgICBzb2xpZDogXCJcdTVCRTZcdTVGQzNcIixcbiAgICBzdHJpcGVzOiBcIlx1Njg5RFx1N0QwQlwiLFxuICAgIGNoZWNrZXJib2FyZDogXCJcdTY4Q0JcdTc2RTRcdTY4M0NcIixcbiAgICBncmFkaWVudDogXCJcdTZGMzhcdTVDNjRcIixcbiAgICBkb3RzOiBcIlx1OUVERVx1NzJDMFwiLFxuICAgIHdhdmVzOiBcIlx1NkNFMlx1NkQ2QVwiLFxuICAgIHNwaXJhbDogXCJcdTg3QkFcdTY1Q0JcIixcbiAgICBtb3NhaWM6IFwiXHU5OUFDXHU4Q0ZEXHU1MTRCXCIsXG4gICAgYnJpY2tzOiBcIlx1NzhEQVx1NTg0QVwiLFxuICAgIHppZ3phZzogXCJcdTRFNEJcdTVCNTdcdTVGNjJcIixcbiAgICBwcm90ZWN0aW5nRHJhd2luZzogXCJcdTZCNjNcdTU3MjhcdTRGRERcdThCNzdcdTdFNkFcdTU3MTYuLi5cIixcbiAgICBjaGFuZ2VzRGV0ZWN0ZWQ6IFwiXHVEODNEXHVERUE4IFx1NTA3NVx1NkUyQ1x1NTIzMCB7Y291bnR9IFx1ODY1NVx1OEI4QVx1NjZGNFwiLFxuICAgIHJlcGFpcmluZzogXCJcdUQ4M0RcdUREMjcgXHU2QjYzXHU1NzI4XHU0RkVFXHU1RkE5IHtjb3VudH0gXHU1MDBCXHU4QjhBXHU2NkY0XHU3Njg0XHU1MENGXHU3RDIwLi4uXCIsXG4gICAgcmVwYWlyQ29tcGxldGVkOiBcIlx1MjcwNSBcdTRGRUVcdTVGQTlcdTVCOENcdTYyMTBcdUZGMUF7Y291bnR9IFx1NTAwQlx1NTBDRlx1N0QyMFwiLFxuICAgIG5vQ2hhcmdlc0ZvclJlcGFpcjogXCJcdTI2QTEgXHU0RkVFXHU1RkE5XHU0RTBEXHU2RDg4XHU4MDE3XHU5RURFXHU2NTc4XHVGRjBDXHU3QjQ5XHU1Rjg1XHU0RTJELi4uXCIsXG4gICAgcHJvdGVjdGlvblByaW9yaXR5OiBcIlx1RDgzRFx1REVFMVx1RkUwRiBcdTVERjJcdTU1NUZcdTc1MjhcdTRGRERcdThCNzdcdTUxMkFcdTUxNDhcIixcbiAgICBwYXR0ZXJuQXBwbGllZDogXCJcdTVERjJcdTU5NTdcdTc1MjhcdTZBMjFcdTVGMEZcIixcbiAgICBjdXN0b21QYXR0ZXJuOiBcIlx1ODFFQVx1OEEwMlx1NkEyMVx1NUYwRlwiLFxuICAgIGxvZ1dpbmRvdzogJ1x1RDgzRFx1RENDQiBMb2dzJyxcbiAgICBsb2dXaW5kb3dUaXRsZTogJ1x1NjVFNVx1OEE4Q1x1ODk5Nlx1N0E5NycsXG4gICAgZG93bmxvYWRMb2dzOiAnXHU0RTBCXHU4RjA5XHU2NUU1XHU4QThDJyxcbiAgICBjbGVhckxvZ3M6ICdcdTZFMDVcdTk2NjRcdTY1RTVcdThBOEMnLFxuICAgIGNsb3NlTG9nczogJ1x1OTVEQ1x1OTU4OSdcbiAgfSxcblxuICAvLyBcdThGQjJcdTU4MzRcdTZBMjFcdTU4NEFcdUZGMDhcdTVGODVcdTVCRTZcdTczRkVcdUZGMDlcbiAgZmFybToge1xuICAgIHRpdGxlOiBcIldQbGFjZSBcdThGQjJcdTU4MzRcdTZBNUZcdTU2NjhcdTRFQkFcIixcbiAgICBzdGFydDogXCJcdTk1OEJcdTU5Q0JcIixcbiAgICBzdG9wOiBcIlx1NTA1Q1x1NkI2MlwiLFxuICAgIHN0b3BwZWQ6IFwiXHU2QTVGXHU1NjY4XHU0RUJBXHU1REYyXHU1MDVDXHU2QjYyXCIsXG4gICAgY2FsaWJyYXRlOiBcIlx1NjgyMVx1NkU5NlwiLFxuICAgIHBhaW50T25jZTogXCJcdTRFMDBcdTZCMjFcIixcbiAgICBjaGVja2luZ1N0YXR1czogXCJcdTZBQTJcdTY3RTVcdTcyQzBcdTYxNEJcdTRFMkQuLi5cIixcbiAgICBjb25maWd1cmF0aW9uOiBcIlx1OTE0RFx1N0Y2RVwiLFxuICAgIGRlbGF5OiBcIlx1NUVGNlx1OTA3MiAoXHU2QkVCXHU3OUQyKVwiLFxuICAgIHBpeGVsc1BlckJhdGNoOiBcIlx1NkJDRlx1NjI3OVx1NTBDRlx1N0QyMFwiLFxuICAgIG1pbkNoYXJnZXM6IFwiXHU2NzAwXHU1QzExXHU2QjIxXHU2NTc4XCIsXG4gICAgY29sb3JNb2RlOiBcIlx1OTg0Rlx1ODI3Mlx1NkEyMVx1NUYwRlwiLFxuICAgIHJhbmRvbTogXCJcdTk2QThcdTZBNUZcIixcbiAgICBmaXhlZDogXCJcdTU2RkFcdTVCOUFcIixcbiAgICByYW5nZTogXCJcdTdCQzRcdTU3MERcIixcbiAgICBmaXhlZENvbG9yOiBcIlx1NTZGQVx1NUI5QVx1OTg0Rlx1ODI3MlwiLFxuICAgIGFkdmFuY2VkOiBcIlx1OUFEOFx1N0QxQVwiLFxuICAgIHRpbGVYOiBcIlx1NzRFNlx1NzI0NyBYXCIsXG4gICAgdGlsZVk6IFwiXHU3NEU2XHU3MjQ3IFlcIixcbiAgICBjdXN0b21QYWxldHRlOiBcIlx1ODFFQVx1NUI5QVx1N0ZBOVx1OEFCRlx1ODI3Mlx1Njc3RlwiLFxuICAgIHBhbGV0dGVFeGFtcGxlOiBcIlx1NEY4Qlx1NTk4MjogI0ZGMDAwMCwjMDBGRjAwLCMwMDAwRkZcIixcbiAgICBjYXB0dXJlOiBcIlx1NjM1NVx1NzM3MlwiLFxuICAgIHBhaW50ZWQ6IFwiXHU1REYyXHU3RTZBXHU4OEZEXCIsXG4gICAgY2hhcmdlczogXCJcdTZCMjFcdTY1NzhcIixcbiAgICByZXRyaWVzOiBcIlx1OTFDRFx1OEE2NlwiLFxuICAgIHRpbGU6IFwiXHU3NEU2XHU3MjQ3XCIsXG4gICAgY29uZmlnU2F2ZWQ6IFwiXHU5MTREXHU3RjZFXHU1REYyXHU0RkREXHU1QjU4XCIsXG4gICAgY29uZmlnTG9hZGVkOiBcIlx1OTE0RFx1N0Y2RVx1NURGMlx1NTJBMFx1OEYwOVwiLFxuICAgIGNvbmZpZ1Jlc2V0OiBcIlx1OTE0RFx1N0Y2RVx1NURGMlx1OTFDRFx1N0Y2RVwiLFxuICAgIGNhcHR1cmVJbnN0cnVjdGlvbnM6IFwiXHU4QUNCXHU2MjRCXHU1MkQ1XHU3RTZBXHU4OEZEXHU0RTAwXHU1MDBCXHU1MENGXHU3RDIwXHU0RUU1XHU2MzU1XHU3MzcyXHU1RUE3XHU2QTE5Li4uXCIsXG4gICAgYmFja2VuZE9ubGluZTogXCJcdTVGOENcdTdBRUZcdTU3MjhcdTdEREFcIixcbiAgICBiYWNrZW5kT2ZmbGluZTogXCJcdTVGOENcdTdBRUZcdTk2RTJcdTdEREFcIixcbiAgICBzdGFydGluZ0JvdDogXCJcdTZCNjNcdTU3MjhcdTU1NTNcdTUyRDVcdTZBNUZcdTU2NjhcdTRFQkEuLi5cIixcbiAgICBzdG9wcGluZ0JvdDogXCJcdTZCNjNcdTU3MjhcdTUwNUNcdTZCNjJcdTZBNUZcdTU2NjhcdTRFQkEuLi5cIixcbiAgICBjYWxpYnJhdGluZzogXCJcdTY4MjFcdTZFOTZcdTRFMkQuLi5cIixcbiAgICBhbHJlYWR5UnVubmluZzogXCJcdTgxRUFcdTUyRDVcdThGQjJcdTU4MzRcdTVERjJcdTU3MjhcdTkwNEJcdTg4NENcdTMwMDJcIixcbiAgICBpbWFnZVJ1bm5pbmdXYXJuaW5nOiBcIlx1ODFFQVx1NTJENVx1N0U2QVx1NTcxNlx1NkI2M1x1NTcyOFx1OTA0Qlx1ODg0Q1x1RkYwQ1x1OEFDQlx1NTE0OFx1OTVEQ1x1OTU4OVx1NTE4RFx1NTU1M1x1NTJENVx1ODFFQVx1NTJENVx1OEZCMlx1NTgzNFx1MzAwMlwiLFxuICAgIHNlbGVjdFBvc2l0aW9uOiBcIlx1OTA3OFx1NjRDN1x1NTM0MFx1NTdERlwiLFxuICAgIHNlbGVjdFBvc2l0aW9uQWxlcnQ6IFwiXHVEODNDXHVERkFGIFx1NTcyOFx1NTczMFx1NTcxNlx1NzY4NFx1N0E3QVx1NzY3RFx1NTM0MFx1NTdERlx1NTg1N1x1NEUwMFx1NTAwQlx1NTBDRlx1N0QyMFx1NEVFNVx1OEEyRFx1N0Y2RVx1OEZCMlx1NTgzNFx1NTM0MFx1NTdERlwiLFxuICAgIHdhaXRpbmdQb3NpdGlvbjogXCJcdUQ4M0RcdURDNDYgXHU3QjQ5XHU1Rjg1XHU0RjYwXHU1ODU3XHU1M0MzXHU4MDAzXHU1MENGXHU3RDIwLi4uXCIsXG4gICAgcG9zaXRpb25TZXQ6IFwiXHUyNzA1IFx1NTM0MFx1NTdERlx1OEEyRFx1N0Y2RVx1NjIxMFx1NTI5Rlx1RkYwMVx1NTM0QVx1NUY5MTogNTAwcHhcIixcbiAgICBwb3NpdGlvblRpbWVvdXQ6IFwiXHUyNzRDIFx1NTM0MFx1NTdERlx1OTA3OFx1NjRDN1x1OEQ4NVx1NjY0MlwiLFxuICAgIG1pc3NpbmdQb3NpdGlvbjogXCJcdTI3NEMgXHU4QUNCXHU1MTQ4XHU5MDc4XHU2NEM3XHU1MzQwXHU1N0RGXHVGRjA4XHU0RjdGXHU3NTI4XHUyMDFDXHU5MDc4XHU2NEM3XHU1MzQwXHU1N0RGXHUyMDFEXHU2MzA5XHU5MjE1XHVGRjA5XCIsXG4gICAgZmFybVJhZGl1czogXCJcdThGQjJcdTU4MzRcdTUzNEFcdTVGOTFcIixcbiAgICBwb3NpdGlvbkluZm86IFwiXHU3NTc2XHU1MjREXHU1MzQwXHU1N0RGXCIsXG4gICAgZmFybWluZ0luUmFkaXVzOiBcIlx1RDgzQ1x1REYzRSBcdTZCNjNcdTU3MjhcdTRFRTVcdTUzNEFcdTVGOTEge3JhZGl1c31weCBcdTU3MjggKHt4fSx7eX0pIFx1OEZCMlx1NTgzNFwiLFxuICAgIHNlbGVjdEVtcHR5QXJlYTogXCJcdTI2QTBcdUZFMEYgXHU5MUNEXHU4OTgxOiBcdThBQ0JcdTkwNzhcdTY0QzdcdTdBN0FcdTc2N0RcdTUzNDBcdTU3REZcdTRFRTVcdTkwN0ZcdTUxNERcdTg4NURcdTdBODFcIixcbiAgICBub1Bvc2l0aW9uOiBcIlx1NjcyQVx1OTA3OFx1NjRDN1x1NTM0MFx1NTdERlwiLFxuICAgIGN1cnJlbnRab25lOiBcIlx1NTM0MFx1NTdERjogKHt4fSx7eX0pXCIsXG4gICAgYXV0b1NlbGVjdFBvc2l0aW9uOiBcIlx1RDgzQ1x1REZBRiBcdThBQ0JcdTUxNDhcdTkwNzhcdTY0QzdcdTUzNDBcdTU3REZcdUZGMENcdTU3MjhcdTU3MzBcdTU3MTZcdTRFMEFcdTU4NTdcdTRFMDBcdTUwMEJcdTUwQ0ZcdTdEMjBcdTRFRTVcdThBMkRcdTdGNkVcdThGQjJcdTU4MzRcdTUzNDBcdTU3REZcIixcbiAgICBsb2dXaW5kb3c6ICdcdUQ4M0RcdURDQ0IgTG9ncycsXG4gICAgbG9nV2luZG93VGl0bGU6ICdcdTY1RTVcdThBOENcdTg5OTZcdTdBOTcnLFxuICAgIGRvd25sb2FkTG9nczogJ1x1NEUwQlx1OEYwOVx1NjVFNVx1OEE4QycsXG4gICAgY2xlYXJMb2dzOiAnXHU2RTA1XHU5NjY0XHU2NUU1XHU4QThDJyxcbiAgICBjbG9zZUxvZ3M6ICdcdTk1RENcdTk1ODknXG4gIH0sXG5cbiAgLy8gXHU1MTZDXHU1MTcxXG4gIGNvbW1vbjoge1xuICAgIHllczogXCJcdTY2MkZcIixcbiAgICBubzogXCJcdTU0MjZcIixcbiAgICBvazogXCJcdTc4QkFcdThBOERcIixcbiAgICBjYW5jZWw6IFwiXHU1M0Q2XHU2RDg4XCIsXG4gICAgY2xvc2U6IFwiXHU5NURDXHU5NTg5XCIsXG4gICAgc2F2ZTogXCJcdTRGRERcdTVCNThcIixcbiAgICBsb2FkOiBcIlx1NTJBMFx1OEYwOVwiLFxuICAgIGRlbGV0ZTogXCJcdTUyMkFcdTk2NjRcIixcbiAgICBlZGl0OiBcIlx1N0RFOFx1OEYyRlwiLFxuICAgIHN0YXJ0OiBcIlx1OTU4Qlx1NTlDQlwiLFxuICAgIHN0b3A6IFwiXHU1MDVDXHU2QjYyXCIsXG4gICAgcGF1c2U6IFwiXHU2NkFCXHU1MDVDXCIsXG4gICAgcmVzdW1lOiBcIlx1N0U3Q1x1N0U4Q1wiLFxuICAgIHJlc2V0OiBcIlx1OTFDRFx1N0Y2RVwiLFxuICAgIHNldHRpbmdzOiBcIlx1OEEyRFx1N0Y2RVwiLFxuICAgIGhlbHA6IFwiXHU1RTZCXHU1MkE5XCIsXG4gICAgYWJvdXQ6IFwiXHU5NURDXHU2NUJDXCIsXG4gICAgbGFuZ3VhZ2U6IFwiXHU4QTlFXHU4QTAwXCIsXG4gICAgbG9hZGluZzogXCJcdTUyQTBcdThGMDlcdTRFMkQuLi5cIixcbiAgICBlcnJvcjogXCJcdTkzMkZcdThBQTRcIixcbiAgICBzdWNjZXNzOiBcIlx1NjIxMFx1NTI5RlwiLFxuICAgIHdhcm5pbmc6IFwiXHU4QjY2XHU1NDRBXCIsXG4gICAgaW5mbzogXCJcdTRGRTFcdTYwNkZcIixcbiAgICBsYW5ndWFnZUNoYW5nZWQ6IFwiXHU4QTlFXHU4QTAwXHU1REYyXHU1MjA3XHU2M0RCXHU3MEJBIHtsYW5ndWFnZX1cIlxuICB9LFxuXG4gIC8vIFx1NUI4OFx1OEI3N1x1NkEyMVx1NTg0QVxuICBndWFyZDoge1xuICAgIHRpdGxlOiBcIldQbGFjZSBcdTgxRUFcdTUyRDVcdTVCODhcdThCNzdcIixcbiAgICBpbml0Qm90OiBcIlx1NTIxRFx1NTlDQlx1NTMxNlx1NUI4OFx1OEI3N1x1NkE1Rlx1NTY2OFx1NEVCQVwiLFxuICAgIHNlbGVjdEFyZWE6IFwiXHU5MDc4XHU2NEM3XHU1MzQwXHU1N0RGXCIsXG4gICAgY2FwdHVyZUFyZWE6IFwiXHU2MzU1XHU3MzcyXHU1MzQwXHU1N0RGXCIsXG4gICAgc3RhcnRQcm90ZWN0aW9uOiBcIlx1OTU4Qlx1NTlDQlx1NUI4OFx1OEI3N1wiLFxuICAgIHN0b3BQcm90ZWN0aW9uOiBcIlx1NTA1Q1x1NkI2Mlx1NUI4OFx1OEI3N1wiLFxuICAgIHVwcGVyTGVmdDogXCJcdTVERTZcdTRFMEFcdTg5RDJcIixcbiAgICBsb3dlclJpZ2h0OiBcIlx1NTNGM1x1NEUwQlx1ODlEMlwiLFxuICAgIHByb3RlY3RlZFBpeGVsczogXCJcdTUzRDdcdTRGRERcdThCNzdcdTUwQ0ZcdTdEMjBcIixcbiAgICBkZXRlY3RlZENoYW5nZXM6IFwiXHU2QUEyXHU2RTJDXHU1MjMwXHU3Njg0XHU4QjhBXHU1MzE2XCIsXG4gICAgcmVwYWlyZWRQaXhlbHM6IFwiXHU0RkVFXHU1RkE5XHU3Njg0XHU1MENGXHU3RDIwXCIsXG4gICAgY2hhcmdlczogXCJcdTZCMjFcdTY1NzhcIixcbiAgICB3YWl0aW5nSW5pdDogXCJcdTdCNDlcdTVGODVcdTUyMURcdTU5Q0JcdTUzMTYuLi5cIixcbiAgICBjaGVja2luZ0NvbG9yczogXCJcdUQ4M0NcdURGQTggXHU2QUEyXHU2N0U1XHU1M0VGXHU3NTI4XHU5ODRGXHU4MjcyLi4uXCIsXG4gICAgbm9Db2xvcnNGb3VuZDogXCJcdTI3NEMgXHU2NzJBXHU2MjdFXHU1MjMwXHU5ODRGXHU4MjcyXHVGRjBDXHU4QUNCXHU1NzI4XHU3REIyXHU3QUQ5XHU0RTBBXHU2MjUzXHU5NThCXHU4QUJGXHU4MjcyXHU2NzdGXHUzMDAyXCIsXG4gICAgY29sb3JzRm91bmQ6IFwiXHUyNzA1IFx1NjI3RVx1NTIzMCB7Y291bnR9IFx1N0EyRVx1NTNFRlx1NzUyOFx1OTg0Rlx1ODI3MlwiLFxuICAgIGluaXRTdWNjZXNzOiBcIlx1MjcwNSBcdTVCODhcdThCNzdcdTZBNUZcdTU2NjhcdTRFQkFcdTUyMURcdTU5Q0JcdTUzMTZcdTYyMTBcdTUyOUZcIixcbiAgICBpbml0RXJyb3I6IFwiXHUyNzRDIFx1NUI4OFx1OEI3N1x1NkE1Rlx1NTY2OFx1NEVCQVx1NTIxRFx1NTlDQlx1NTMxNlx1NTkzMVx1NjU1N1wiLFxuICAgIGludmFsaWRDb29yZHM6IFwiXHUyNzRDIFx1NUVBN1x1NkExOVx1NzEyMVx1NjU0OFwiLFxuICAgIGludmFsaWRBcmVhOiBcIlx1Mjc0QyBcdTUzNDBcdTU3REZcdTcxMjFcdTY1NDhcdUZGMENcdTVERTZcdTRFMEFcdTg5RDJcdTVGQzVcdTk4MDhcdTVDMEZcdTY1QkNcdTUzRjNcdTRFMEJcdTg5RDJcIixcbiAgICBhcmVhVG9vTGFyZ2U6IFwiXHUyNzRDIFx1NTM0MFx1NTdERlx1OTA0RVx1NTkyNzoge3NpemV9IFx1NTBDRlx1N0QyMCAoXHU2NzAwXHU1OTI3OiB7bWF4fSlcIixcbiAgICBjYXB0dXJpbmdBcmVhOiBcIlx1RDgzRFx1RENGOCBcdTYzNTVcdTczNzJcdTVCODhcdThCNzdcdTUzNDBcdTU3REZcdTRFMkQuLi5cIixcbiAgICBhcmVhQ2FwdHVyZWQ6IFwiXHUyNzA1IFx1NTM0MFx1NTdERlx1NjM1NVx1NzM3Mlx1NjIxMFx1NTI5Rjoge2NvdW50fSBcdTUwQ0ZcdTdEMjBcdTUzRDdcdTRGRERcdThCNzdcIixcbiAgICBjYXB0dXJlRXJyb3I6IFwiXHUyNzRDIFx1NjM1NVx1NzM3Mlx1NTM0MFx1NTdERlx1NTFGQVx1OTMyRjoge2Vycm9yfVwiLFxuICAgIGNhcHR1cmVGaXJzdDogXCJcdTI3NEMgXHU4QUNCXHU1MTQ4XHU2MzU1XHU3MzcyXHU0RTAwXHU1MDBCXHU1Qjg4XHU4Qjc3XHU1MzQwXHU1N0RGXCIsXG4gICAgcHJvdGVjdGlvblN0YXJ0ZWQ6IFwiXHVEODNEXHVERUUxXHVGRTBGIFx1NUI4OFx1OEI3N1x1NURGMlx1NTU1M1x1NTJENSAtIFx1NTM0MFx1NTdERlx1NzZFM1x1NjNBN1x1NEUyRFwiLFxuICAgIHByb3RlY3Rpb25TdG9wcGVkOiBcIlx1MjNGOVx1RkUwRiBcdTVCODhcdThCNzdcdTVERjJcdTUwNUNcdTZCNjJcIixcbiAgICBub0NoYW5nZXM6IFwiXHUyNzA1IFx1NTM0MFx1NTdERlx1NUI4OVx1NTE2OCAtIFx1NjcyQVx1NkFBMlx1NkUyQ1x1NTIzMFx1OEI4QVx1NTMxNlwiLFxuICAgIGNoYW5nZXNEZXRlY3RlZDogXCJcdUQ4M0RcdURFQTggXHU2QUEyXHU2RTJDXHU1MjMwIHtjb3VudH0gXHU1MDBCXHU4QjhBXHU1MzE2XCIsXG4gICAgcmVwYWlyaW5nOiBcIlx1RDgzRFx1REVFMFx1RkUwRiBcdTZCNjNcdTU3MjhcdTRGRUVcdTVGQTkge2NvdW50fSBcdTUwMEJcdTUwQ0ZcdTdEMjAuLi5cIixcbiAgICByZXBhaXJlZFN1Y2Nlc3M6IFwiXHUyNzA1IFx1NURGMlx1NjIxMFx1NTI5Rlx1NEZFRVx1NUZBOSB7Y291bnR9IFx1NTAwQlx1NTBDRlx1N0QyMFwiLFxuICAgIHJlcGFpckVycm9yOiBcIlx1Mjc0QyBcdTRGRUVcdTVGQTlcdTUxRkFcdTkzMkY6IHtlcnJvcn1cIixcbiAgICBub0NoYXJnZXM6IFwiXHUyNkEwXHVGRTBGIFx1NkIyMVx1NjU3OFx1NEUwRFx1OERCM1x1RkYwQ1x1NzEyMVx1NkNENVx1NEZFRVx1NUZBOVwiLFxuICAgIGNoZWNraW5nQ2hhbmdlczogXCJcdUQ4M0RcdUREMEQgXHU2QjYzXHU1NzI4XHU2QUEyXHU2N0U1XHU1MzQwXHU1N0RGXHU4QjhBXHU1MzE2Li4uXCIsXG4gICAgZXJyb3JDaGVja2luZzogXCJcdTI3NEMgXHU2QUEyXHU2N0U1XHU1MUZBXHU5MzJGOiB7ZXJyb3J9XCIsXG4gICAgZ3VhcmRBY3RpdmU6IFwiXHVEODNEXHVERUUxXHVGRTBGIFx1NUI4OFx1OEI3N1x1NEUyRCAtIFx1NTM0MFx1NTdERlx1NTNEN1x1NEZERFx1OEI3N1wiLFxuICAgIGxhc3RDaGVjazogXCJcdTRFMEFcdTZCMjFcdTZBQTJcdTY3RTU6IHt0aW1lfVwiLFxuICAgIG5leHRDaGVjazogXCJcdTRFMEJcdTZCMjFcdTZBQTJcdTY3RTU6IHt0aW1lfSBcdTc5RDJcdTVGOENcIixcbiAgICBhdXRvSW5pdGlhbGl6aW5nOiBcIlx1RDgzRVx1REQxNiBcdTZCNjNcdTU3MjhcdTgxRUFcdTUyRDVcdTUyMURcdTU5Q0JcdTUzMTYuLi5cIixcbiAgICBhdXRvSW5pdFN1Y2Nlc3M6IFwiXHUyNzA1IFx1ODFFQVx1NTJENVx1NTU1M1x1NTJENVx1NjIxMFx1NTI5RlwiLFxuICAgIGF1dG9Jbml0RmFpbGVkOiBcIlx1MjZBMFx1RkUwRiBcdTcxMjFcdTZDRDVcdTgxRUFcdTUyRDVcdTU1NTNcdTUyRDVcdUZGMENcdThBQ0JcdTYyNEJcdTUyRDVcdTY0Q0RcdTRGNUNcdTMwMDJcIixcbiAgICBtYW51YWxJbml0UmVxdWlyZWQ6IFwiXHVEODNEXHVERDI3IFx1OTcwMFx1ODk4MVx1NjI0Qlx1NTJENVx1NTIxRFx1NTlDQlx1NTMxNlwiLFxuICAgIHBhbGV0dGVEZXRlY3RlZDogXCJcdUQ4M0NcdURGQTggXHU1REYyXHU2QUEyXHU2RTJDXHU1MjMwXHU4QUJGXHU4MjcyXHU2NzdGXCIsXG4gICAgcGFsZXR0ZU5vdEZvdW5kOiBcIlx1RDgzRFx1REQwRCBcdTZCNjNcdTU3MjhcdTY0MUNcdTdEMjJcdThBQkZcdTgyNzJcdTY3N0YuLi5cIixcbiAgICBjbGlja2luZ1BhaW50QnV0dG9uOiBcIlx1RDgzRFx1REM0NiBcdTZCNjNcdTU3MjhcdTlFREVcdTY0Q0FcdTdFNkFcdTg4RkRcdTYzMDlcdTkyMTUuLi5cIixcbiAgICBwYWludEJ1dHRvbk5vdEZvdW5kOiBcIlx1Mjc0QyBcdTY3MkFcdTYyN0VcdTUyMzBcdTdFNkFcdTg4RkRcdTYzMDlcdTkyMTVcIixcbiAgICBzZWxlY3RVcHBlckxlZnQ6IFwiXHVEODNDXHVERkFGIFx1NTcyOFx1OTcwMFx1ODk4MVx1NEZERFx1OEI3N1x1NTM0MFx1NTdERlx1NzY4NFx1NURFNlx1NEUwQVx1ODlEMlx1NTg1N1x1NEUwMFx1NTAwQlx1NTBDRlx1N0QyMFwiLFxuICAgIHNlbGVjdExvd2VyUmlnaHQ6IFwiXHVEODNDXHVERkFGIFx1NzNGRVx1NTcyOFx1NTcyOFx1NTNGM1x1NEUwQlx1ODlEMlx1NTg1N1x1NEUwMFx1NTAwQlx1NTBDRlx1N0QyMFwiLFxuICAgIHdhaXRpbmdVcHBlckxlZnQ6IFwiXHVEODNEXHVEQzQ2IFx1N0I0OVx1NUY4NVx1OTA3OFx1NjRDN1x1NURFNlx1NEUwQVx1ODlEMi4uLlwiLFxuICAgIHdhaXRpbmdMb3dlclJpZ2h0OiBcIlx1RDgzRFx1REM0NiBcdTdCNDlcdTVGODVcdTkwNzhcdTY0QzdcdTUzRjNcdTRFMEJcdTg5RDIuLi5cIixcbiAgICB1cHBlckxlZnRDYXB0dXJlZDogXCJcdTI3MDUgXHU1REYyXHU2MzU1XHU3MzcyXHU1REU2XHU0RTBBXHU4OUQyOiAoe3h9LCB7eX0pXCIsXG4gICAgbG93ZXJSaWdodENhcHR1cmVkOiBcIlx1MjcwNSBcdTVERjJcdTYzNTVcdTczNzJcdTUzRjNcdTRFMEJcdTg5RDI6ICh7eH0sIHt5fSlcIixcbiAgICBzZWxlY3Rpb25UaW1lb3V0OiBcIlx1Mjc0QyBcdTkwNzhcdTY0QzdcdThEODVcdTY2NDJcIixcbiAgICBzZWxlY3Rpb25FcnJvcjogXCJcdTI3NEMgXHU5MDc4XHU2NEM3XHU1MUZBXHU5MzJGXHVGRjBDXHU4QUNCXHU5MUNEXHU4QTY2XCIsXG4gICAgbG9nV2luZG93OiAnXHVEODNEXHVEQ0NCIExvZ3MnLFxuICAgIGxvZ1dpbmRvd1RpdGxlOiAnXHU2NUU1XHU4QThDXHU4OTk2XHU3QTk3JyxcbiAgICBkb3dubG9hZExvZ3M6ICdcdTRFMEJcdThGMDlcdTY1RTVcdThBOEMnLFxuICAgIGNsZWFyTG9nczogJ1x1NkUwNVx1OTY2NFx1NjVFNVx1OEE4QycsXG4gICAgY2xvc2VMb2dzOiAnXHU5NURDXHU5NTg5JyxcbiAgICAvLyBBbmFseXNpcyBXaW5kb3dcbiAgICBhbmFseXNpc1RpdGxlOiBcIlx1NURFRVx1NzU3MFx1NTIwNlx1Njc5MCAtIEpTT04gdnMgXHU3NTc2XHU1MjREXHU3NTZCXHU1RTAzXCIsXG4gICAgY29ycmVjdFBpeGVsczogXCJcdTZCNjNcdTc4QkFcdTUwQ0ZcdTdEMjBcIixcbiAgICBpbmNvcnJlY3RQaXhlbHM6IFwiXHU5MzJGXHU4QUE0XHU1MENGXHU3RDIwXCIsXG4gICAgbWlzc2luZ1BpeGVsczogXCJcdTdGM0FcdTU5MzFcdTUwQ0ZcdTdEMjBcIixcbiAgICBzaG93Q29ycmVjdDogXCJcdTk4NkZcdTc5M0FcdTZCNjNcdTc4QkFcIixcbiAgICBzaG93SW5jb3JyZWN0OiBcIlx1OTg2Rlx1NzkzQVx1OTMyRlx1OEFBNFwiLFxuICAgIHNob3dNaXNzaW5nOiBcIlx1OTg2Rlx1NzkzQVx1N0YzQVx1NTkzMVwiLFxuICAgIGF1dG9SZWZyZXNoOiBcIlx1ODFFQVx1NTJENVx1NTIzN1x1NjVCMFwiLFxuICAgIHpvb21BZGp1c3RlZDogXCJcdTdFMkVcdTY1M0VcdTgxRUFcdTUyRDVcdThBQkZcdTY1NzRcdTcwQkFcIixcbiAgICBhdXRvUmVmcmVzaEVuYWJsZWQ6IFwiXHU4MUVBXHU1MkQ1XHU1MjM3XHU2NUIwXHU1REYyXHU1NTVGXHU3NTI4XHVGRjBDXHU5NTkzXHU5Njk0XCIsXG4gICAgYXV0b1JlZnJlc2hEaXNhYmxlZDogXCJcdTgxRUFcdTUyRDVcdTUyMzdcdTY1QjBcdTVERjJcdTc5ODFcdTc1MjhcIixcbiAgICBhdXRvUmVmcmVzaEludGVydmFsVXBkYXRlZDogXCJcdTgxRUFcdTUyRDVcdTUyMzdcdTY1QjBcdTk1OTNcdTk2OTRcdTVERjJcdTY2RjRcdTY1QjBcdTcwQkFcIixcbiAgICB2aXN1YWxpemF0aW9uVXBkYXRlZDogXCJcdTg5OTZcdTg5QkFcdTUzMTZcdTVERjJcdTY2RjRcdTY1QjBcIixcbiAgICAvLyBDb25maWcgV2luZG93XG4gICAgY29uZmlnVGl0bGU6IFwiR3VhcmRcdTkxNERcdTdGNkVcIixcbiAgICBwcm90ZWN0aW9uUGF0dGVybnM6IFwiXHU0RkREXHU4Qjc3XHU2QTIxXHU1RjBGXCIsXG4gICAgcHJlZmVyU3BlY2lmaWNDb2xvcjogXCJcdTUxMkFcdTUxNDhcdTcyNzlcdTVCOUFcdTk4NEZcdTgyNzJcIixcbiAgICBleGNsdWRlU3BlY2lmaWNDb2xvcnM6IFwiXHU0RTBEXHU0RkVFXHU1RkE5XHU3Mjc5XHU1QjlBXHU5ODRGXHU4MjcyXCIsXG4gICAgbG9hZE1hbmFnZW1lbnQ6IFwiXHU4Q0EwXHU4RjA5XHU3QkExXHU3NDA2XCIsXG4gICAgbWluTG9hZHNUb1dhaXQ6IFwiXHU3QjQ5XHU1Rjg1XHU3Njg0XHU2NzAwXHU1QzBGXHU4Q0EwXHU4RjA5XHU2NTc4XCIsXG4gICAgcGl4ZWxzUGVyQmF0Y2g6IFwiXHU2QkNGXHU2Mjc5XHU1MENGXHU3RDIwXHU2NTc4XCIsXG4gICAgc3BlbmRBbGxQaXhlbHNPblN0YXJ0OiBcIlx1NTU1Rlx1NTJENVx1NjY0Mlx1NkQ4OFx1ODAxN1x1NjI0MFx1NjcwOVx1NTBDRlx1N0QyMFwiLFxuICAgIHdhaXRUaW1lczogXCJcdTdCNDlcdTVGODVcdTY2NDJcdTk1OTNcIixcbiAgICB1c2VSYW5kb21UaW1lczogXCJcdTYyNzlcdTZCMjFcdTk1OTNcdTRGN0ZcdTc1MjhcdTk2QThcdTZBNUZcdTY2NDJcdTk1OTNcIixcbiAgICBtaW5UaW1lOiBcIlx1NjcwMFx1NUMwRlx1NjY0Mlx1OTU5MyAoXHU3OUQyKVwiLFxuICAgIG1heFRpbWU6IFwiXHU2NzAwXHU1OTI3XHU2NjQyXHU5NTkzIChcdTc5RDIpXCJcbiAgfVxufTsiLCAiaW1wb3J0IHsgZXMgfSBmcm9tICcuL2VzLmpzJztcbmltcG9ydCB7IGVuIH0gZnJvbSAnLi9lbi5qcyc7XG5pbXBvcnQgeyBmciB9IGZyb20gJy4vZnIuanMnO1xuaW1wb3J0IHsgcnUgfSBmcm9tICcuL3J1LmpzJztcbmltcG9ydCB7IHpoSGFucyB9IGZyb20gJy4vemgtSGFucy5qcyc7XG5pbXBvcnQgeyB6aEhhbnQgfSBmcm9tICcuL3poLUhhbnQuanMnO1xuXG4vLyBJZGlvbWFzIGRpc3BvbmlibGVzXG5leHBvcnQgY29uc3QgQVZBSUxBQkxFX0xBTkdVQUdFUyA9IHtcbiAgZXM6IHsgbmFtZTogJ0VzcGFcdTAwRjFvbCcsIGZsYWc6ICdcdUQ4M0NcdURERUFcdUQ4M0NcdURERjgnLCBjb2RlOiAnZXMnIH0sXG4gIGVuOiB7IG5hbWU6ICdFbmdsaXNoJywgZmxhZzogJ1x1RDgzQ1x1RERGQVx1RDgzQ1x1RERGOCcsIGNvZGU6ICdlbicgfSxcbiAgZnI6IHsgbmFtZTogJ0ZyYW5cdTAwRTdhaXMnLCBmbGFnOiAnXHVEODNDXHVEREVCXHVEODNDXHVEREY3JywgY29kZTogJ2ZyJyB9LFxuICBydTogeyBuYW1lOiAnXHUwNDIwXHUwNDQzXHUwNDQxXHUwNDQxXHUwNDNBXHUwNDM4XHUwNDM5JywgZmxhZzogJ1x1RDgzQ1x1RERGN1x1RDgzQ1x1RERGQScsIGNvZGU6ICdydScgfSxcbiAgemhIYW5zOiB7IG5hbWU6ICdcdTdCODBcdTRGNTNcdTRFMkRcdTY1ODcnLCBmbGFnOiAnXHVEODNDXHVEREU4XHVEODNDXHVEREYzJywgY29kZTogJ3poLUhhbnMnIH0sXG4gIHpoSGFudDogeyBuYW1lOiAnXHU3RTQxXHU5QUQ0XHU0RTJEXHU2NTg3JywgZmxhZzogJ1x1RDgzQ1x1RERFOFx1RDgzQ1x1RERGMycsIGNvZGU6ICd6aC1IYW50JyB9XG59O1xuXG4vLyBUb2RhcyBsYXMgdHJhZHVjY2lvbmVzXG5jb25zdCB0cmFuc2xhdGlvbnMgPSB7XG4gIGVzLFxuICBlbixcbiAgZnIsXG4gIHJ1LFxuICB6aEhhbnMsXG4gIHpoSGFudFxufTtcblxuLy8gRXN0YWRvIGRlbCBpZGlvbWEgYWN0dWFsXG5sZXQgY3VycmVudExhbmd1YWdlID0gJ2VzJztcbmxldCBjdXJyZW50VHJhbnNsYXRpb25zID0gdHJhbnNsYXRpb25zW2N1cnJlbnRMYW5ndWFnZV07XG5cbi8qKlxuICogRGV0ZWN0YSBlbCBpZGlvbWEgZGVsIG5hdmVnYWRvclxuICogQHJldHVybnMge3N0cmluZ30gQ1x1MDBGM2RpZ28gZGVsIGlkaW9tYSBkZXRlY3RhZG9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEJyb3dzZXJMYW5ndWFnZSgpIHtcbiAgY29uc3QgYnJvd3NlckxhbmcgPSB3aW5kb3cubmF2aWdhdG9yLmxhbmd1YWdlIHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckxhbmd1YWdlIHx8ICdlcyc7XG5cbiAgLy8gRXh0cmFlciBzb2xvIGVsIGNcdTAwRjNkaWdvIGRlbCBpZGlvbWEgKGVqOiAnZXMtRVMnIC0+ICdlcycpXG4gIGNvbnN0IGxhbmdDb2RlID0gYnJvd3Nlckxhbmcuc3BsaXQoJy0nKVswXS50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIFZlcmlmaWNhciBzaSB0ZW5lbW9zIHNvcG9ydGUgcGFyYSBlc3RlIGlkaW9tYVxuICBpZiAodHJhbnNsYXRpb25zW2xhbmdDb2RlXSkge1xuICAgIHJldHVybiBsYW5nQ29kZTtcbiAgfVxuXG4gIC8vIEZhbGxiYWNrIGEgZXNwYVx1MDBGMW9sIHBvciBkZWZlY3RvXG4gIHJldHVybiAnZXMnO1xufVxuXG4vKipcbiAqIE9idGllbmUgZWwgaWRpb21hIGd1YXJkYWRvIChkZXNoYWJpbGl0YWRvIC0gbm8gdXNhciBsb2NhbFN0b3JhZ2UpXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBTaWVtcHJlIHJldG9ybmEgbnVsbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2F2ZWRMYW5ndWFnZSgpIHtcbiAgLy8gTm8gdXNhciBsb2NhbFN0b3JhZ2UgLSBzaWVtcHJlIHJldG9ybmFyIG51bGxcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogR3VhcmRhIGVsIGlkaW9tYSAoZGVzaGFiaWxpdGFkbyAtIG5vIHVzYXIgbG9jYWxTdG9yYWdlKVxuICogQHBhcmFtIHtzdHJpbmd9IGxhbmdDb2RlIC0gQ1x1MDBGM2RpZ28gZGVsIGlkaW9tYVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2F2ZUxhbmd1YWdlKGxhbmdDb2RlKSB7XG4gIC8vIE5vIGd1YXJkYXIgZW4gbG9jYWxTdG9yYWdlIC0gZnVuY2lcdTAwRjNuIGRlc2hhYmlsaXRhZGFcbiAgcmV0dXJuO1xufVxuXG4vKipcbiAqIEluaWNpYWxpemEgZWwgc2lzdGVtYSBkZSBpZGlvbWFzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDXHUwMEYzZGlnbyBkZWwgaWRpb21hIGluaWNpYWxpemFkb1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUxhbmd1YWdlKCkge1xuICAvLyBQcmlvcmlkYWQ6IGd1YXJkYWRvID4gbmF2ZWdhZG9yID4gZXNwYVx1MDBGMW9sXG4gIGNvbnN0IHNhdmVkTGFuZyA9IGdldFNhdmVkTGFuZ3VhZ2UoKTtcbiAgY29uc3QgYnJvd3NlckxhbmcgPSBkZXRlY3RCcm93c2VyTGFuZ3VhZ2UoKTtcblxuICBsZXQgc2VsZWN0ZWRMYW5nID0gJ2VzJzsgLy8gZmFsbGJhY2sgcG9yIGRlZmVjdG9cblxuICBpZiAoc2F2ZWRMYW5nICYmIHRyYW5zbGF0aW9uc1tzYXZlZExhbmddKSB7XG4gICAgc2VsZWN0ZWRMYW5nID0gc2F2ZWRMYW5nO1xuICB9IGVsc2UgaWYgKGJyb3dzZXJMYW5nICYmIHRyYW5zbGF0aW9uc1ticm93c2VyTGFuZ10pIHtcbiAgICBzZWxlY3RlZExhbmcgPSBicm93c2VyTGFuZztcbiAgfVxuXG4gIHNldExhbmd1YWdlKHNlbGVjdGVkTGFuZyk7XG4gIHJldHVybiBzZWxlY3RlZExhbmc7XG59XG5cbi8qKlxuICogQ2FtYmlhIGVsIGlkaW9tYSBhY3R1YWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBsYW5nQ29kZSAtIENcdTAwRjNkaWdvIGRlbCBpZGlvbWFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldExhbmd1YWdlKGxhbmdDb2RlKSB7XG4gIGlmICghdHJhbnNsYXRpb25zW2xhbmdDb2RlXSkge1xuICAgIGNvbnNvbGUud2FybihgSWRpb21hICcke2xhbmdDb2RlfScgbm8gZGlzcG9uaWJsZS4gVXNhbmRvICcke2N1cnJlbnRMYW5ndWFnZX0nYCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY3VycmVudExhbmd1YWdlID0gbGFuZ0NvZGU7XG4gIGN1cnJlbnRUcmFuc2xhdGlvbnMgPSB0cmFuc2xhdGlvbnNbbGFuZ0NvZGVdO1xuICBzYXZlTGFuZ3VhZ2UobGFuZ0NvZGUpO1xuXG4gIC8vIEVtaXRpciBldmVudG8gcGVyc29uYWxpemFkbyBwYXJhIHF1ZSBsb3MgbVx1MDBGM2R1bG9zIHB1ZWRhbiByZWFjY2lvbmFyXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuQ3VzdG9tRXZlbnQpIHtcbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdsYW5ndWFnZUNoYW5nZWQnLCB7XG4gICAgICBkZXRhaWw6IHsgbGFuZ3VhZ2U6IGxhbmdDb2RlLCB0cmFuc2xhdGlvbnM6IGN1cnJlbnRUcmFuc2xhdGlvbnMgfVxuICAgIH0pKTtcbiAgfVxufVxuXG4vKipcbiAqIE9idGllbmUgZWwgaWRpb21hIGFjdHVhbFxuICogQHJldHVybnMge3N0cmluZ30gQ1x1MDBGM2RpZ28gZGVsIGlkaW9tYSBhY3R1YWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRMYW5ndWFnZSgpIHtcbiAgcmV0dXJuIGN1cnJlbnRMYW5ndWFnZTtcbn1cblxuLyoqXG4gKiBPYnRpZW5lIGxhcyB0cmFkdWNjaW9uZXMgYWN0dWFsZXNcbiAqIEByZXR1cm5zIHtvYmplY3R9IE9iamV0byBjb24gdG9kYXMgbGFzIHRyYWR1Y2Npb25lcyBkZWwgaWRpb21hIGFjdHVhbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFRyYW5zbGF0aW9ucygpIHtcbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGlvbnM7XG59XG5cbi8qKlxuICogT2J0aWVuZSB1biB0ZXh0byB0cmFkdWNpZG8gdXNhbmRvIG5vdGFjaVx1MDBGM24gZGUgcHVudG9cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBDbGF2ZSBkZWwgdGV4dG8gKGVqOiAnaW1hZ2UudGl0bGUnLCAnY29tbW9uLmNhbmNlbCcpXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIC0gUGFyXHUwMEUxbWV0cm9zIHBhcmEgaW50ZXJwb2xhY2lcdTAwRjNuIChlajoge2NvdW50OiA1fSlcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRleHRvIHRyYWR1Y2lkb1xuICovXG5leHBvcnQgZnVuY3Rpb24gdChrZXksIHBhcmFtcyA9IHt9KSB7XG4gIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgbGV0IHZhbHVlID0gY3VycmVudFRyYW5zbGF0aW9ucztcblxuICAvLyBOYXZlZ2FyIHBvciBsYSBlc3RydWN0dXJhIGRlIG9iamV0b3NcbiAgZm9yIChjb25zdCBrIG9mIGtleXMpIHtcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBrIGluIHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlW2tdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oYENsYXZlIGRlIHRyYWR1Y2NpXHUwMEYzbiBubyBlbmNvbnRyYWRhOiAnJHtrZXl9J2ApO1xuICAgICAgcmV0dXJuIGtleTsgLy8gUmV0b3JuYXIgbGEgY2xhdmUgY29tbyBmYWxsYmFja1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgY29uc29sZS53YXJuKGBDbGF2ZSBkZSB0cmFkdWNjaVx1MDBGM24gbm8gZXMgc3RyaW5nOiAnJHtrZXl9J2ApO1xuICAgIHJldHVybiBrZXk7XG4gIH1cblxuICAvLyBJbnRlcnBvbGFyIHBhclx1MDBFMW1ldHJvc1xuICByZXR1cm4gaW50ZXJwb2xhdGUodmFsdWUsIHBhcmFtcyk7XG59XG5cbi8qKlxuICogSW50ZXJwb2xhIHBhclx1MDBFMW1ldHJvcyBlbiB1biBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGV4dG8gY29uIG1hcmNhZG9yZXMge2tleX1cbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgLSBQYXJcdTAwRTFtZXRyb3MgYSBpbnRlcnBvbGFyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUZXh0byBjb24gcGFyXHUwMEUxbWV0cm9zIGludGVycG9sYWRvc1xuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSh0ZXh0LCBwYXJhbXMpIHtcbiAgaWYgKCFwYXJhbXMgfHwgT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoL1xceyhcXHcrKVxcfS9nLCAobWF0Y2gsIGtleSkgPT4ge1xuICAgIHJldHVybiBwYXJhbXNba2V5XSAhPT0gdW5kZWZpbmVkID8gcGFyYW1zW2tleV0gOiBtYXRjaDtcbiAgfSk7XG59XG5cbi8qKlxuICogT2J0aWVuZSB0cmFkdWNjaW9uZXMgZGUgdW5hIHNlY2NpXHUwMEYzbiBlc3BlY1x1MDBFRGZpY2FcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWN0aW9uIC0gU2VjY2lcdTAwRjNuIChlajogJ2ltYWdlJywgJ2xhdW5jaGVyJywgJ2NvbW1vbicpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBPYmpldG8gY29uIGxhcyB0cmFkdWNjaW9uZXMgZGUgbGEgc2VjY2lcdTAwRjNuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWN0aW9uKHNlY3Rpb24pIHtcbiAgaWYgKGN1cnJlbnRUcmFuc2xhdGlvbnNbc2VjdGlvbl0pIHtcbiAgICByZXR1cm4gY3VycmVudFRyYW5zbGF0aW9uc1tzZWN0aW9uXTtcbiAgfVxuXG4gIGNvbnNvbGUud2FybihgU2VjY2lcdTAwRjNuIGRlIHRyYWR1Y2NpXHUwMEYzbiBubyBlbmNvbnRyYWRhOiAnJHtzZWN0aW9ufSdgKTtcbiAgcmV0dXJuIHt9O1xufVxuXG4vKipcbiAqIFZlcmlmaWNhIHNpIHVuIGlkaW9tYSBlc3RcdTAwRTEgZGlzcG9uaWJsZVxuICogQHBhcmFtIHtzdHJpbmd9IGxhbmdDb2RlIC0gQ1x1MDBGM2RpZ28gZGVsIGlkaW9tYVxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgc2kgZXN0XHUwMEUxIGRpc3BvbmlibGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGFuZ3VhZ2VBdmFpbGFibGUobGFuZ0NvZGUpIHtcbiAgcmV0dXJuICEhdHJhbnNsYXRpb25zW2xhbmdDb2RlXTtcbn1cblxuLy8gSW5pY2lhbGl6YXIgYXV0b21cdTAwRTF0aWNhbWVudGUgYWwgY2FyZ2FyIGVsIG1cdTAwRjNkdWxvXG5pbml0aWFsaXplTGFuZ3VhZ2UoKTtcbiIsICJleHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hXaXRoVGltZW91dCh1cmwsIHsgdGltZW91dCA9IDEwMDAwLCAuLi5vcHRzIH0gPSB7fSkge1xuICBjb25zdCBjdHJsID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICBjb25zdCBpZCA9IHNldFRpbWVvdXQoKCkgPT4gY3RybC5hYm9ydChcInRpbWVvdXRcIiksIHRpbWVvdXQpO1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwgeyBzaWduYWw6IGN0cmwuc2lnbmFsLCAuLi5vcHRzIH0pO1xuICAgIHJldHVybiByZXM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gTWFuZWpvIG1lam9yYWRvIGRlIGVycm9yZXMgZGUgdGltZW91dCBwYXJhIGV2aXRhciB1bmNhdWdodCBwcm9taXNlc1xuICAgIGlmIChlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicgfHwgZXJyb3IubWVzc2FnZSA9PT0gJ3RpbWVvdXQnKSB7XG4gICAgICBjb25zdCB0aW1lb3V0RXJyb3IgPSBuZXcgRXJyb3IoYFJlcXVlc3QgdGltZW91dCBhZnRlciAke3RpbWVvdXR9bXNgKTtcbiAgICAgIHRpbWVvdXRFcnJvci5uYW1lID0gJ1RpbWVvdXRFcnJvcic7XG4gICAgICB0aW1lb3V0RXJyb3IudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICB0aHJvdyB0aW1lb3V0RXJyb3I7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9IGZpbmFsbHkge1xuICAgIGNsZWFyVGltZW91dChpZCk7XG4gIH1cbn1cbiIsICIvKipcbiAqIENvbmZpZ3VyYWNpXHUwMEYzbiBkZWwgc2Vydmlkb3IgZGUgbVx1MDBFOXRyaWNhcyAoV1BsYWNlIE1ldHJpY3MgQVBJKVxuICpcbiAqIE9iamV0aXZvXG4gKiAtIENlbnRyYWxpemFyIHkgZmFjaWxpdGFyIGxhIGNvbmZpZ3VyYWNpXHUwMEYzbiBkZSBsYSBBUEkgZGUgbVx1MDBFOXRyaWNhcy5cbiAqIC0gUGVybWl0aXIgb3ZlcnJpZGVzIHZcdTAwRURhOlxuICogICAxKSBQYXJcdTAwRTFtZXRyb3MgZGUgVVJMIChtZXRyaWNzVXJsLCBtZXRyaWNzS2V5LCBtZXRyaWNzU2FsdCwgbWV0cmljc0VuYWJsZWQsIG1ldHJpY3NWYXJpYW50KVxuICogICAyKSBWZW50YW5hIGdsb2JhbDogd2luZG93Ll9fV1BMQUNFX01FVFJJQ1NfXyBvIHdpbmRvdy5fX1dQTEFDRV9DT05GSUdfXy5tZXRyaWNzXG4gKiAgIDMpIE92ZXJyaWRlcyBwcm9ncmFtXHUwMEUxdGljb3MgKHBhclx1MDBFMW1ldHJvIGRlIGdldE1ldHJpY3NDb25maWcpXG4gKlxuICogTm8gaGFjZSBsbGFtYWRhcyBkZSByZWQ7IHNvbG8gcHJvdmVlIGNvbmZpZ3VyYWNpXHUwMEYzbiB5IHV0aWxpZGFkZXMuXG4gKi9cblxuLy8gVmFsb3JlcyBwb3IgZGVmZWN0byBzZWd1cm9zIHBhcmEgZGVzYXJyb2xsbyBsb2NhbFxuY29uc3QgREVGQVVMVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgRU5BQkxFRDogdHJ1ZSwgICAgICAgICAgICAgICAgIC8vIEhhYmlsaXRhci9kZXNoYWJpbGl0YXIgZW52XHUwMEVEbyBkZSBtXHUwMEU5dHJpY2FzXG4gIEJBU0VfVVJMOiAnaHR0cHM6Ly9tZXRyaWNzd3BsYWNlYXBpLmFsYXJpc2NvLnh5eicsIC8vIFVSTCBiYXNlIGRlbCBzZXJ2aWRvciBkZSBtXHUwMEU5dHJpY2FzXG4gIEFQSV9LRVk6ICd3cGxhY2VfMmM4ZTRiMmIxZTBhNGY3Y2I5ZDNhNzZmNGExYzBiNmYnLCAvLyBBUEkgS2V5IHBvciBkZWZlY3RvIHBhcmEgZGVzcGxpZWd1ZSAocHVlZGVzIHNvYnJlZXNjcmliaXIpXG4gIFBVQkxJQ19TQUxUOiAnd3BsYWNlX3B1YmxpY19zYWx0XzIwMjQnLCAvLyBTYWwgcFx1MDBGQWJsaWNhIHBvciBkZWZlY3RvIChhbGluZWFkYSBjb24gZG9ja2VyLWNvbXBvc2UpXG4gIFZBUklBTlQ6ICdhdXRvLWd1YXJkJywgICAgICAgICAvLyBWYXJpYW50IHBvciBkZWZlY3RvOyBjYWRhIGJvdCBkZWJlIHNvYnJlZXNjcmliaXJsb1xuICBUSU1FT1VUX01TOiAxMDAwMCwgICAgICAgICAgICAgLy8gVGltZW91dCBkZSByZXF1ZXN0c1xuICBSRVRSSUVTOiAxLCAgICAgICAgICAgICAgICAgICAgLy8gUmVpbnRlbnRvcyBiXHUwMEUxc2ljb3MgcGFyYSBpbmdlc3RhXG4gIFBJTkdfSU5URVJWQUxfTVM6IDIgKiA2MCAqIDEwMDAgLy8gMiBtaW51dG9zIHBhcmEgc2Vzc2lvbl9waW5nIChtZWpvciByZWZsZWpvIGRlIHVzdWFyaW9zIG9ubGluZSlcbn0pO1xuXG5mdW5jdGlvbiByZWFkRnJvbVVybCgpIHtcbiAgdHJ5IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFnbG9iYWxUaGlzLlVSTFNlYXJjaFBhcmFtcykgcmV0dXJuIHt9O1xuICBjb25zdCBzcCA9IG5ldyBnbG9iYWxUaGlzLlVSTFNlYXJjaFBhcmFtcyhnbG9iYWxUaGlzLmxvY2F0aW9uPy5zZWFyY2ggfHwgJycpO1xuICAgIGNvbnN0IGVuYWJsZWQgPSBzcC5nZXQoJ21ldHJpY3NFbmFibGVkJyk7XG4gICAgY29uc3QgYmFzZVVybCA9IHNwLmdldCgnbWV0cmljc1VybCcpO1xuICAgIGNvbnN0IGFwaUtleSA9IHNwLmdldCgnbWV0cmljc0tleScpO1xuICAgIGNvbnN0IHNhbHQgPSBzcC5nZXQoJ21ldHJpY3NTYWx0Jyk7XG4gICAgY29uc3QgdmFyaWFudCA9IHNwLmdldCgnbWV0cmljc1ZhcmlhbnQnKTtcbiAgICBjb25zdCB0aW1lb3V0ID0gc3AuZ2V0KCdtZXRyaWNzVGltZW91dE1zJyk7XG4gICAgY29uc3QgcmV0cmllcyA9IHNwLmdldCgnbWV0cmljc1JldHJpZXMnKTtcbiAgICBjb25zdCBwaW5nID0gc3AuZ2V0KCdtZXRyaWNzUGluZ01zJyk7XG5cbiAgICBjb25zdCBvdXQgPSB7fTtcbiAgICBpZiAoZW5hYmxlZCAhPSBudWxsKSBvdXQuRU5BQkxFRCA9IGVuYWJsZWQgPT09ICd0cnVlJyB8fCBlbmFibGVkID09PSAnMSc7XG4gICAgaWYgKGJhc2VVcmwpIG91dC5CQVNFX1VSTCA9IGJhc2VVcmw7XG4gICAgaWYgKGFwaUtleSkgb3V0LkFQSV9LRVkgPSBhcGlLZXk7XG4gICAgaWYgKHNhbHQpIG91dC5QVUJMSUNfU0FMVCA9IHNhbHQ7XG4gICAgaWYgKHZhcmlhbnQpIG91dC5WQVJJQU5UID0gdmFyaWFudDtcbiAgICBpZiAodGltZW91dCAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcih0aW1lb3V0KSkpIG91dC5USU1FT1VUX01TID0gTnVtYmVyKHRpbWVvdXQpO1xuICAgIGlmIChyZXRyaWVzICYmICFOdW1iZXIuaXNOYU4oTnVtYmVyKHJldHJpZXMpKSkgb3V0LlJFVFJJRVMgPSBOdW1iZXIocmV0cmllcyk7XG4gICAgaWYgKHBpbmcgJiYgIU51bWJlci5pc05hTihOdW1iZXIocGluZykpKSBvdXQuUElOR19JTlRFUlZBTF9NUyA9IE51bWJlcihwaW5nKTtcbiAgICByZXR1cm4gb3V0O1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4ge307XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhZEZyb21HbG9iYWwoKSB7XG4gIC8vIFByaW9yaWRhZDogd2luZG93Ll9fV1BMQUNFX01FVFJJQ1NfXyA+IHdpbmRvdy5fX1dQTEFDRV9DT05GSUdfXz8ubWV0cmljc1xuICBjb25zdCBnID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICh3aW5kb3cuX19XUExBQ0VfTUVUUklDU19fIHx8IHdpbmRvdy5fX1dQTEFDRV9DT05GSUdfXz8ubWV0cmljcykpIHx8IHt9O1xuICBjb25zdCBvdXQgPSB7fTtcbiAgaWYgKHR5cGVvZiBnLkVOQUJMRUQgPT09ICdib29sZWFuJykgb3V0LkVOQUJMRUQgPSBnLkVOQUJMRUQ7XG4gIGlmICh0eXBlb2YgZy5CQVNFX1VSTCA9PT0gJ3N0cmluZycpIG91dC5CQVNFX1VSTCA9IGcuQkFTRV9VUkw7XG4gIGlmICh0eXBlb2YgZy5BUElfS0VZID09PSAnc3RyaW5nJykgb3V0LkFQSV9LRVkgPSBnLkFQSV9LRVk7XG4gIGlmICh0eXBlb2YgZy5QVUJMSUNfU0FMVCA9PT0gJ3N0cmluZycpIG91dC5QVUJMSUNfU0FMVCA9IGcuUFVCTElDX1NBTFQ7XG4gIGlmICh0eXBlb2YgZy5WQVJJQU5UID09PSAnc3RyaW5nJykgb3V0LlZBUklBTlQgPSBnLlZBUklBTlQ7XG4gIGlmIChOdW1iZXIuaXNGaW5pdGUoZy5USU1FT1VUX01TKSkgb3V0LlRJTUVPVVRfTVMgPSBnLlRJTUVPVVRfTVM7XG4gIGlmIChOdW1iZXIuaXNGaW5pdGUoZy5SRVRSSUVTKSkgb3V0LlJFVFJJRVMgPSBnLlJFVFJJRVM7XG4gIGlmIChOdW1iZXIuaXNGaW5pdGUoZy5QSU5HX0lOVEVSVkFMX01TKSkgb3V0LlBJTkdfSU5URVJWQUxfTVMgPSBnLlBJTkdfSU5URVJWQUxfTVM7XG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHNhbml0aXplKGNmZykge1xuICBjb25zdCBvdXQgPSB7IC4uLmNmZyB9O1xuICAvLyBOb3JtYWxpemFyIFVSTCBiYXNlIHF1aXRhbmRvIHRyYWlsaW5nIHNsYXNoXG4gIGlmICh0eXBlb2Ygb3V0LkJBU0VfVVJMID09PSAnc3RyaW5nJykge1xuICAgIG91dC5CQVNFX1VSTCA9IG91dC5CQVNFX1VSTC5yZXBsYWNlKC9cXC8kLywgJycpO1xuICB9XG4gIC8vIE5vcm1hbGl6YXIgdmFyaWFudFxuICBpZiAoIVsnYXV0by1ndWFyZCcsICdhdXRvLWZhcm0nLCAnYXV0by1pbWFnZScsICdsYXVuY2hlciddLmluY2x1ZGVzKG91dC5WQVJJQU5UKSkge1xuICAgIG91dC5WQVJJQU5UID0gREVGQVVMVFMuVkFSSUFOVDtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuXG4vLyBTbmFwc2hvdCBpbmljaWFsIChzZSByZWNhbGN1bGEgZW4gZ2V0TWV0cmljc0NvbmZpZyBwYXJhIHBlcm1pdGlyIGNhbWJpb3MgZGluXHUwMEUxbWljb3MpXG5sZXQgX2NhY2hlZCA9IG51bGw7XG5cbi8qKlxuICogUmV0b3JuYSBsYSBjb25maWd1cmFjaVx1MDBGM24gZWZlY3RpdmEgZGUgbVx1MDBFOXRyaWNhcy5cbiAqIFByZWNlZGVuY2lhOiBERUZBVUxUUyA8IEdsb2JhbCA8IFVSTCA8IG92ZXJyaWRlcyAocGFyXHUwMEUxbWV0cm8pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXRyaWNzQ29uZmlnKG92ZXJyaWRlcyA9IHt9KSB7XG4gIGNvbnN0IG1lcmdlZCA9IHtcbiAgICAuLi5ERUZBVUxUUyxcbiAgICAuLi5yZWFkRnJvbUdsb2JhbCgpLFxuICAgIC4uLnJlYWRGcm9tVXJsKCksXG4gICAgLi4ub3ZlcnJpZGVzXG4gIH07XG4gIF9jYWNoZWQgPSBzYW5pdGl6ZShtZXJnZWQpO1xuICByZXR1cm4gX2NhY2hlZDtcbn1cblxuLyoqXG4gKiBFc3RhYmxlY2UvYWN0dWFsaXphIGNvbmZpZ3VyYWNpXHUwMEYzbiBnbG9iYWwgZW4gdGllbXBvIGRlIGVqZWN1Y2lcdTAwRjNuLlxuICogXHUwMERBdGlsIHBhcmEgYWp1c3RhciB2YWxvcmVzIGRlc2RlIGxhIGNvbnNvbGEgbyBhbnRlcyBkZSBjYXJnYXIgdW4gYm90LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TWV0cmljc0NvbmZpZyhwYXRjaCA9IHt9KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICB3aW5kb3cuX19XUExBQ0VfTUVUUklDU19fID0geyAuLi4od2luZG93Ll9fV1BMQUNFX01FVFJJQ1NfXyB8fCB7fSksIC4uLnBhdGNoIH07XG4gIF9jYWNoZWQgPSBudWxsOyAvLyBpbnZhbGlkYXIgY2FjaGVcbn1cblxuLyoqXG4gKiBVdGlsaWRhZDogZ2VuZXJhciBTSEEtMjU2IGhleCBkZWwgc3RyaW5nIGRhZG8gKFdlYiBDcnlwdG8gQVBJKS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNoYTI1NkhleChzdHIpIHtcbiAgY29uc3QgRW5jb2RlciA9IGdsb2JhbFRoaXMuVGV4dEVuY29kZXI7XG4gIGNvbnN0IHdlYkNyeXB0byA9IGdsb2JhbFRoaXMuY3J5cHRvO1xuICBpZiAoIUVuY29kZXIgfHwgIXdlYkNyeXB0bz8uc3VidGxlKSB0aHJvdyBuZXcgRXJyb3IoJ1dlYkNyeXB0byBubyBkaXNwb25pYmxlJyk7XG4gIGNvbnN0IGVuYyA9IG5ldyBFbmNvZGVyKCk7XG4gIGNvbnN0IGJ1ZiA9IGF3YWl0IHdlYkNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgZW5jLmVuY29kZShzdHIpKTtcbiAgcmV0dXJuIEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoYnVmKSkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG59XG5cbi8qKlxuICogR2VuZXJhIHVzZXJfaGFzaCB1c2FuZG8gUFVCTElDX1NBTFQgKyB1c2VySWRlbnRpZmllci5cbiAqIFNpIG5vIGhheSBzYWx0IGNvbmZpZ3VyYWRhLCByZXRvcm5hIG51bGwgcGFyYSBldml0YXIgZXhwb25lciBpZGVudGlmaWNhZG9yZXMgZW4gdGV4dG8uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wdXRlVXNlckhhc2godXNlcklkZW50aWZpZXIsIHNhbHRPdmVycmlkZSkge1xuICBjb25zdCBjZmcgPSBfY2FjaGVkIHx8IGdldE1ldHJpY3NDb25maWcoKTtcbiAgY29uc3Qgc2FsdCA9IHR5cGVvZiBzYWx0T3ZlcnJpZGUgPT09ICdzdHJpbmcnID8gc2FsdE92ZXJyaWRlIDogY2ZnLlBVQkxJQ19TQUxUO1xuICBpZiAoIXNhbHQgfHwgIXVzZXJJZGVudGlmaWVyKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHNoYTI1NkhleChTdHJpbmcoc2FsdCkgKyBTdHJpbmcodXNlcklkZW50aWZpZXIpKTtcbn1cblxuLy8gRXhwb3J0YXIgbG9zIGRlZmF1bHRzIHBvciBzaSBzZSByZXF1aWVyZW4gZW4gb3Ryb3MgbVx1MDBGM2R1bG9zXG5leHBvcnQgY29uc3QgTUVUUklDU19ERUZBVUxUUyA9IERFRkFVTFRTO1xuXG4vKipcbiAqIFJldG9ybmEgdW4gaWRlbnRpZmljYWRvciBhblx1MDBGM25pbW8gZXN0YWJsZSBwb3IgbmF2ZWdhZG9yLlxuICogUHJpb3JpemEgd2luZG93Ll9fV1BMQUNFX01FVFJJQ1NfXy5hbm9uSWQsIHNpIG5vIGV4aXN0ZSB1c2EgbG9jYWxTdG9yYWdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5vbnltb3VzSWQoKSB7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gbnVsbDtcbiAgICAvLyBQZXJtaXRpciBvdmVycmlkZSBleHBsXHUwMEVEY2l0b1xuICAgIGlmICh3aW5kb3cuX19XUExBQ0VfTUVUUklDU19fPy5hbm9uSWQpIHJldHVybiBTdHJpbmcod2luZG93Ll9fV1BMQUNFX01FVFJJQ1NfXy5hbm9uSWQpO1xuICAgIGNvbnN0IGtleSA9ICd3cGxhY2VfbWV0cmljc19haWQnO1xuICAgIGxldCB2YWwgPSBudWxsO1xuICAgIHRyeSB7IHZhbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7IH0gY2F0Y2gge31cbiAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsO1xuICAgIC8vIEdlbmVyYXIgYWxlYXRvcmlvIGNyXHUwMEVEcHRvZ3JhZmljYW1lbnRlIHNlZ3VybyAoMTYgYnl0ZXMgLT4gaGV4IDMyKVxuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICAgIChnbG9iYWxUaGlzLmNyeXB0byB8fCB7fSkuZ2V0UmFuZG9tVmFsdWVzPy4oYnl0ZXMpO1xuICAgIGNvbnN0IHJuZCA9IEFycmF5LmZyb20oYnl0ZXMpLm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpO1xuICAgIHRyeSB7IGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgcm5kKTsgfSBjYXRjaCB7fVxuICAgIC8vIEd1YXJkYXIgdGFtYmlcdTAwRTluIGVuIGdsb2JhbCBwYXJhIGVzdGEgc2VzaVx1MDBGM25cbiAgICBpZiAoIXdpbmRvdy5fX1dQTEFDRV9NRVRSSUNTX18pIHdpbmRvdy5fX1dQTEFDRV9NRVRSSUNTX18gPSB7fTtcbiAgICB3aW5kb3cuX19XUExBQ0VfTUVUUklDU19fLmFub25JZCA9IHJuZDtcbiAgICByZXR1cm4gcm5kO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwgImltcG9ydCB7IGZldGNoV2l0aFRpbWVvdXQgfSBmcm9tIFwiLi4vaHR0cC5qc1wiO1xuaW1wb3J0IHsgZ2V0TWV0cmljc0NvbmZpZywgY29tcHV0ZVVzZXJIYXNoLCBnZXRBbm9ueW1vdXNJZCB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2xvZ2dlci5qc1wiO1xuXG4vLyBIZWxwZXI6IFBPU1QgSlNPTiBjb24gaGVhZGVycyB5IEFQSSBrZXlcbmFzeW5jIGZ1bmN0aW9uIHBvc3RKc29uKHVybCwgYm9keSwgeyB0aW1lb3V0LCBhcGlLZXkgfSkge1xuICBjb25zdCBoZWFkZXJzID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XG4gIGlmIChhcGlLZXkpIGhlYWRlcnNbJ1gtQVBJLUtleSddID0gYXBpS2V5O1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaFdpdGhUaW1lb3V0KHVybCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnMsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgdGltZW91dFxuICB9KTtcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2FmZUpzb24ocmVzKSB7XG4gIHJldHVybiByZXMudGV4dCgpLnRoZW4odCA9PiB7XG4gICAgdHJ5IHsgcmV0dXJuIHQgPyBKU09OLnBhcnNlKHQpIDoge307IH0gY2F0Y2ggeyByZXR1cm4ge307IH1cbiAgfSk7XG59XG5cbi8vIEVudlx1MDBFRG8gcm9idXN0byBjb24gcmVpbnRlbnRvcyBtXHUwMEVEbmltb3MsIHNpbGVuY2lvc28gZW4gZXJyb3JcbmFzeW5jIGZ1bmN0aW9uIHNlbmQoYm9keSwgb3ZlcnJpZGVzKSB7XG4gIGNvbnN0IGNmZyA9IGdldE1ldHJpY3NDb25maWcob3ZlcnJpZGVzKTtcbiAgaWYgKCFjZmcuRU5BQkxFRCkgcmV0dXJuIHsgb2s6IGZhbHNlLCBza2lwcGVkOiB0cnVlIH07XG4gIGNvbnN0IHVybCA9IGAke2NmZy5CQVNFX1VSTH0vdjEvZXZlbnRzYDtcblxuICAvLyBMb2cgZGUgZGVwdXJhY2lcdTAwRjNuOiByZWdpc3RyYXIgZGVsdGFzIGRlIHBcdTAwRUR4ZWxlcyBlbnZpYWRvc1xuICB0cnkge1xuICAgIGNvbnN0IHQgPSBib2R5Py5ldmVudF90eXBlO1xuICAgIGNvbnN0IHYgPSBib2R5Py5ib3RfdmFyaWFudDtcbiAgICBpZiAoKHQgPT09ICdwaXhlbF9wYWludGVkJyB8fCB0ID09PSAncGl4ZWxfcmVwYWlyZWQnKSAmJiB0eXBlb2YgYm9keT8ucGl4ZWxfZGVsdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBsb2coYFtNRVRSSUNTXSAke3R9IFx1MjE5MiBcdTAzOTQgJHtib2R5LnBpeGVsX2RlbHRhfSAoJHt2fSlgKTtcbiAgICB9XG4gIH0gY2F0Y2gge31cblxuICBsZXQgYXR0ZW1wdCA9IDA7XG4gIGxldCBsYXN0RXJyID0gbnVsbDtcbiAgd2hpbGUgKGF0dGVtcHQgPD0gY2ZnLlJFVFJJRVMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgcG9zdEpzb24odXJsLCBib2R5LCB7IHRpbWVvdXQ6IGNmZy5USU1FT1VUX01TLCBhcGlLZXk6IGNmZy5BUElfS0VZIH0pO1xuICAgICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHNhZmVKc29uKHJlcyk7XG4gICAgICAgIHJldHVybiB7IG9rOiBmYWxzZSwgc3RhdHVzOiByZXMuc3RhdHVzLCBkYXRhIH07XG4gICAgICB9XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgc2FmZUpzb24ocmVzKTtcbiAgICAgIC8vIExvZyBcdTAwRkFuaWNvOiBzb2xvIHNlc3Npb25fc3RhcnQgcGFyYSBjb25maXJtYXIgaW5pY2lvXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0ID0gYm9keT8uZXZlbnRfdHlwZTtcbiAgICAgICAgY29uc3QgdiA9IGJvZHk/LmJvdF92YXJpYW50O1xuICAgICAgICBpZiAodCA9PT0gJ3Nlc3Npb25fc3RhcnQnKSB7XG4gICAgICAgICAgbG9nKGBbTUVUUklDU10gc2Vzc2lvbl9zdGFydCAoJHt2fSlgKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCB7fVxuICAgICAgcmV0dXJuIHsgb2s6IHRydWUsIGRhdGEgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsYXN0RXJyID0gZTtcbiAgICAgIGF0dGVtcHQrKztcbiAgICAgIGlmIChhdHRlbXB0ID4gY2ZnLlJFVFJJRVMpIGJyZWFrO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UociA9PiBzZXRUaW1lb3V0KHIsIDMwMCAqIGF0dGVtcHQpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgb2s6IGZhbHNlLCBlcnJvcjogbGFzdEVycj8ubWVzc2FnZSB8fCBTdHJpbmcobGFzdEVycikgfTtcbn1cblxuLy8gQVBJIHBcdTAwRkFibGljYSBkZWwgY2xpZW50ZSBkZSBtXHUwMEU5dHJpY2FzXG5cbi8qKlxuICogRW52XHUwMEVEYSB1biBldmVudG8gY3J1ZG8uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kRXZlbnQoeyBib3RWYXJpYW50LCBldmVudFR5cGUsIHBpeGVsRGVsdGEsIHRpbWVzdGFtcCwgbWV0YWRhdGEgfSA9IHt9LCBvdmVycmlkZXMpIHtcbiAgY29uc3QgY2ZnID0gZ2V0TWV0cmljc0NvbmZpZyhvdmVycmlkZXMpO1xuICBpZiAoIWNmZy5FTkFCTEVEKSByZXR1cm4geyBvazogZmFsc2UsIHNraXBwZWQ6IHRydWUgfTtcblxuICBjb25zdCBib2R5ID0ge307XG4gIGJvZHkuYm90X3ZhcmlhbnQgPSBib3RWYXJpYW50IHx8IGNmZy5WQVJJQU5UO1xuICBib2R5LmV2ZW50X3R5cGUgPSBldmVudFR5cGU7XG4gIGlmICh0eXBlb2YgcGl4ZWxEZWx0YSA9PT0gJ251bWJlcicpIGJvZHkucGl4ZWxfZGVsdGEgPSBwaXhlbERlbHRhO1xuICBpZiAodGltZXN0YW1wKSBib2R5LnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgaWYgKG1ldGFkYXRhICYmIHR5cGVvZiBtZXRhZGF0YSA9PT0gJ29iamVjdCcpIGJvZHkuZXZlbnRfbWV0YWRhdGEgPSBtZXRhZGF0YTtcblxuICAvLyBHZW5lcmFyIGhhc2ggYW5cdTAwRjNuaW1vIGVzdGFibGUgcG9yIG5hdmVnYWRvciBzaW4gZXhwb25lciBpZGVudGlkYWRcbiAgY29uc3QgYW5vbiA9IGdldEFub255bW91c0lkKCk7XG4gIGlmIChhbm9uKSB7XG4gICAgY29uc3QgdXNlckhhc2ggPSBhd2FpdCBjb21wdXRlVXNlckhhc2goYW5vbik7XG4gICAgaWYgKHVzZXJIYXNoKSBib2R5LnVzZXJfaGFzaCA9IGF3YWl0IHVzZXJIYXNoO1xuICB9XG5cbiAgcmV0dXJuIHNlbmQoYm9keSwgb3ZlcnJpZGVzKTtcbn1cblxuLyoqXG4gKiBNYXJjYSBpbmljaW8gZGUgc2VzaVx1MDBGM24vdXNvIGRlbCBib3QuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXNzaW9uU3RhcnQoeyBib3RWYXJpYW50LCBtZXRhZGF0YSB9ID0ge30sIG92ZXJyaWRlcykge1xuICByZXR1cm4gc2VuZEV2ZW50KHsgYm90VmFyaWFudCwgZXZlbnRUeXBlOiAnc2Vzc2lvbl9zdGFydCcsIG1ldGFkYXRhIH0sIG92ZXJyaWRlcyk7XG59XG5cbi8qKlxuICogUGluZyBwZXJpXHUwMEYzZGljbyBwYXJhIHNlc2lvbmVzIGFjdGl2YXMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXNzaW9uUGluZyh7IGJvdFZhcmlhbnQsIG1ldGFkYXRhIH0gPSB7fSwgb3ZlcnJpZGVzKSB7XG4gIHJldHVybiBzZW5kRXZlbnQoeyBib3RWYXJpYW50LCBldmVudFR5cGU6ICdzZXNzaW9uX3BpbmcnLCBtZXRhZGF0YSB9LCBvdmVycmlkZXMpO1xufVxuXG4vKipcbiAqIEZpbiBkZSBzZXNpXHUwMEYzbi91c28gZGVsIGJvdC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlc3Npb25FbmQoeyBib3RWYXJpYW50LCBtZXRhZGF0YSB9ID0ge30sIG92ZXJyaWRlcykge1xuICByZXR1cm4gc2VuZEV2ZW50KHsgYm90VmFyaWFudCwgZXZlbnRUeXBlOiAnc2Vzc2lvbl9lbmQnLCBtZXRhZGF0YSB9LCBvdmVycmlkZXMpO1xufVxuXG4vKipcbiAqIFJlcG9ydGEgcFx1MDBFRHhlbGVzIHJlcGFyYWRvcyAoQXV0by1HdWFyZCkgbyBwaW50YWRvcyAob3Ryb3MgYm90cykuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwaXhlbHNSZXBhaXJlZChjb3VudCwgeyBib3RWYXJpYW50LCBtZXRhZGF0YSB9ID0ge30sIG92ZXJyaWRlcykge1xuICBpZiAoIU51bWJlci5pc0Zpbml0ZShjb3VudCkgfHwgY291bnQgPD0gMCkgcmV0dXJuIHsgb2s6IGZhbHNlLCBza2lwcGVkOiB0cnVlIH07XG4gIHJldHVybiBzZW5kRXZlbnQoeyBib3RWYXJpYW50LCBldmVudFR5cGU6ICdwaXhlbF9yZXBhaXJlZCcsIHBpeGVsRGVsdGE6IE1hdGgudHJ1bmMoY291bnQpLCBtZXRhZGF0YSB9LCBvdmVycmlkZXMpO1xufVxuXG4vKipcbiAqIFJlcG9ydGEgZXJyb3JlcyBvcGVyYXRpdm9zLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVwb3J0RXJyb3IobWVzc2FnZSwgeyBib3RWYXJpYW50LCBtZXRhZGF0YSB9ID0ge30sIG92ZXJyaWRlcykge1xuICBjb25zdCBtZCA9IHsgbWVzc2FnZSwgLi4uKG1ldGFkYXRhIHx8IHt9KSB9O1xuICByZXR1cm4gc2VuZEV2ZW50KHsgYm90VmFyaWFudCwgZXZlbnRUeXBlOiAnZXJyb3InLCBtZXRhZGF0YTogbWQgfSwgb3ZlcnJpZGVzKTtcbn1cblxuLyoqXG4gKiBFbnZcdTAwRURhIHVuIGV2ZW50byBnZW5cdTAwRTlyaWNvIGNvbiBub21icmUgeSBtZXRhZGF0b3MuXG4gKiBBelx1MDBGQWNhciBzaW50XHUwMEUxY3RpY28gc29icmUgc2VuZEV2ZW50IHBhcmEgaW5zdHJ1bWVudGFjaVx1MDBGM24gZ3JhbnVsYXIuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0cmFja0V2ZW50KG5hbWUsIHsgYm90VmFyaWFudCwgbWV0YWRhdGEsIHRpbWVzdGFtcCB9ID0ge30sIG92ZXJyaWRlcykge1xuICBpZiAoIW5hbWUpIHJldHVybiB7IG9rOiBmYWxzZSwgc2tpcHBlZDogdHJ1ZSB9O1xuICByZXR1cm4gc2VuZEV2ZW50KHsgYm90VmFyaWFudCwgZXZlbnRUeXBlOiBuYW1lLCBtZXRhZGF0YSwgdGltZXN0YW1wIH0sIG92ZXJyaWRlcyk7XG59XG5cbi8qKlxuICogUmVwb3J0YSBwXHUwMEVEeGVsZXMgcGludGFkb3MgKEF1dG8tSW1hZ2UvQXV0by1GYXJtKS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBpeGVsc1BhaW50ZWQoY291bnQsIHsgYm90VmFyaWFudCwgbWV0YWRhdGEgfSA9IHt9LCBvdmVycmlkZXMpIHtcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoY291bnQpIHx8IGNvdW50IDw9IDApIHJldHVybiB7IG9rOiBmYWxzZSwgc2tpcHBlZDogdHJ1ZSB9O1xuICByZXR1cm4gc2VuZEV2ZW50KHsgYm90VmFyaWFudCwgZXZlbnRUeXBlOiAncGl4ZWxfcGFpbnRlZCcsIHBpeGVsRGVsdGE6IE1hdGgudHJ1bmMoY291bnQpLCBtZXRhZGF0YSB9LCBvdmVycmlkZXMpO1xufVxuIiwgImltcG9ydCB7IGxvZyB9IGZyb20gXCIuL2xvZ2dlci5qc1wiO1xuLy8gRWxpbWluYWRvIHRva2VuLWludGVyY2VwdG9yOiBpbnRlcmNlcHRhY2lcdTAwRjNuIHlhIG5vIG5lY2VzYXJpYVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBUVVJOU1RJTEUgVE9LRU4gTUFOQUdFTUVOVFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBPcHRpbWl6ZWQgVHVybnN0aWxlIHRva2VuIGhhbmRsaW5nIHdpdGggY2FjaGluZyBhbmQgcmV0cnkgbG9naWNcbmxldCB0dXJuc3RpbGVUb2tlbiA9IG51bGw7XG4vLyBOZXcgcHJvdGVjdGlvbiB0b2tlbnMgZnJvbSBzaXRlIChjYXB0dXJlZCk6XG4vLyBVc2FyIHZhcmlhYmxlcyBnbG9iYWxlcyBwYXJhIGNvbXBhcnRpciBlc3RhZG8gZW50cmUgbGF1bmNoZXIgeSBib3RzXG5sZXQgX3Bhd3RlY3RUb2tlbiA9IHdpbmRvdy5fX1dQQV9QQVdURUNUX1RPS0VOX18gfHwgbnVsbDsgLy8gaGVhZGVyOiB4LXBhd3RlY3QtdG9rZW5cbmxldCBfZnAgPSB3aW5kb3cuX19XUEFfRklOR0VSUFJJTlRfXyB8fCBudWxsOyAgICAgICAgICAgLy8gYm9keTogZnBcbmxldCBfZnBDYW5kaWRhdGUgPSB3aW5kb3cuX19XUEFfRlBfQ0FORElEQVRFX18gfHwgbnVsbDsgIC8vIGhldXJpc3RpYyBjYW5kaWRhdGUgZnJvbSBwb3N0TWVzc2FnZSAocGkpLCBub3QgdXNlZCBmb3Igc2VuZGluZ1xubGV0IF9wYXd0ZWN0UmVzb2x2ZSA9IG51bGw7XG5sZXQgX3Bhd3RlY3RQcm9taXNlID0gbmV3IFByb21pc2UoKHJlcykgPT4geyBfcGF3dGVjdFJlc29sdmUgPSByZXM7IH0pO1xubGV0IHRva2VuRXhwaXJ5VGltZSA9IDA7XG5sZXQgdG9rZW5HZW5lcmF0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xubGV0IGN1cnJlbnRHZW5lcmF0aW9uUHJvbWlzZSA9IG51bGw7IC8vIGNvbXBhcnRlIGxhIHByb21lc2EgZW50cmUgbGxhbWFkYXMgY29uY3VycmVudGVzXG5sZXQgX3Jlc29sdmVUb2tlbiA9IG51bGw7XG5sZXQgdG9rZW5Qcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsgX3Jlc29sdmVUb2tlbiA9IHJlc29sdmUgfSk7XG5jb25zdCBUT0tFTl9MSUZFVElNRSA9IDI0MDAwMDsgLy8gNCBtaW51dGVzICh0b2tlbnMgdHlwaWNhbGx5IGxhc3QgNSBtaW4sIHVzZSA0IGZvciBzYWZldHkpXG5cbi8vIFR1cm5zdGlsZSB3aWRnZXQgbWFuYWdlbWVudCAocmVwbGljYXRlZCBmcm9tIGV4YW1wbGUpXG5sZXQgX3R1cm5zdGlsZVdpZGdldElkID0gbnVsbDtcbmxldCBfdHVybnN0aWxlQ29udGFpbmVyID0gbnVsbDtcbmxldCBfdHVybnN0aWxlT3ZlcmxheSA9IG51bGw7XG5sZXQgX2xhc3RTaXRla2V5ID0gbnVsbDtcbmxldCBfY2FjaGVkU2l0ZWtleSA9IG51bGw7XG5cbmZ1bmN0aW9uIHNldFR1cm5zdGlsZVRva2VuKHQpIHtcbiAgaWYgKF9yZXNvbHZlVG9rZW4pIHtcbiAgICBfcmVzb2x2ZVRva2VuKHQpO1xuICAgIF9yZXNvbHZlVG9rZW4gPSBudWxsO1xuICB9XG4gIHR1cm5zdGlsZVRva2VuID0gdDtcbiAgdG9rZW5FeHBpcnlUaW1lID0gRGF0ZS5ub3coKSArIFRPS0VOX0xJRkVUSU1FO1xuICBsb2coXCJcdTI3MDUgVHVybnN0aWxlIHRva2VuIHNldCBzdWNjZXNzZnVsbHlcIik7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZGlzcGF0Y2hFdmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0dXJuc3RpbGU6dG9rZW4nLCB7IGRldGFpbDogeyB0b2tlbjogdCwgZXhwaXJ5OiB0b2tlbkV4cGlyeVRpbWUgfSB9KSk7XG4gICAgfVxuICB9IGNhdGNoIHt9XG59XG5cbmZ1bmN0aW9uIGlzVG9rZW5WYWxpZCgpIHtcbiAgcmV0dXJuIHR1cm5zdGlsZVRva2VuICYmIERhdGUubm93KCkgPCB0b2tlbkV4cGlyeVRpbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWNoZWRUb2tlbigpIHtcbiAgcmV0dXJuIGlzVG9rZW5WYWxpZCgpID8gdHVybnN0aWxlVG9rZW4gOiBudWxsO1xufVxuXG4vLyBGb3JjZSB0b2tlbiBpbnZhbGlkYXRpb24gKGZvciA0MDMgZXJyb3JzKVxuZnVuY3Rpb24gaW52YWxpZGF0ZVRva2VuKCkge1xuICB0dXJuc3RpbGVUb2tlbiA9IG51bGw7XG4gIHRva2VuRXhwaXJ5VGltZSA9IDA7XG4gIGxvZyhcIlx1RDgzRFx1REREMVx1RkUwRiBUb2tlbiBpbnZhbGlkYXRlZCwgd2lsbCBmb3JjZSBmcmVzaCBnZW5lcmF0aW9uXCIpO1xufVxuXG4vLyBNYWluIHRva2VuIGZ1bmN0aW9uIC0gcmVwbGljYXRlZCBmcm9tIGV4YW1wbGVcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbnN1cmVUb2tlbihmb3JjZU5ldyA9IGZhbHNlKSB7XG4gIC8vIFJldHVybiBjYWNoZWQgdG9rZW4gaWYgc3RpbGwgdmFsaWQgYW5kIG5vdCBmb3JjaW5nIG5ld1xuICBpZiAoaXNUb2tlblZhbGlkKCkgJiYgIWZvcmNlTmV3KSB7XG4gICAgcmV0dXJuIHR1cm5zdGlsZVRva2VuO1xuICB9XG5cbiAgLy8gSWYgZm9yY2luZyBuZXcsIGludmFsaWRhdGUgY3VycmVudCB0b2tlblxuICBpZiAoZm9yY2VOZXcpIHtcbiAgICBpbnZhbGlkYXRlVG9rZW4oKTtcbiAgfVxuXG4gIC8vIEF2b2lkIG11bHRpcGxlIHNpbXVsdGFuZW91cyB0b2tlbiBnZW5lcmF0aW9uczogZXNwZXJhciBsYSBwcm9tZXNhIGVuIGN1cnNvXG4gIGlmICh0b2tlbkdlbmVyYXRpb25JblByb2dyZXNzICYmIGN1cnJlbnRHZW5lcmF0aW9uUHJvbWlzZSkge1xuICAgIGxvZyhcIlx1RDgzRFx1REQwNCBUb2tlbiBnZW5lcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHdhaXRpbmcgZm9yIGV4aXN0aW5nIHByb21pc2UuLi5cIik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHQgPSBhd2FpdCBjdXJyZW50R2VuZXJhdGlvblByb21pc2U7XG4gICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA+IDIwID8gdCA6IChpc1Rva2VuVmFsaWQoKSA/IHR1cm5zdGlsZVRva2VuIDogbnVsbCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBTaSBmYWxsYSwgY29udGludWFyIGNvbiB1biBudWV2byBpbnRlbnRvIGFiYWpvXG4gICAgfVxuICB9XG5cbiAgdG9rZW5HZW5lcmF0aW9uSW5Qcm9ncmVzcyA9IHRydWU7XG4gIGN1cnJlbnRHZW5lcmF0aW9uUHJvbWlzZSA9IChhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxvZyhcIlx1RDgzRFx1REQwNCBUb2tlbiBleHBpcmVkIG9yIG1pc3NpbmcsIGdlbmVyYXRpbmcgbmV3IG9uZS4uLlwiKTtcblxuICAgICAgLy8gRmlyc3QgdHJ5IGludmlzaWJsZSBUdXJuc3RpbGVcbiAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgaGFuZGxlQ2FwdGNoYSgpO1xuICAgICAgaWYgKHRva2VuICYmIHRva2VuLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgIHNldFR1cm5zdGlsZVRva2VuKHRva2VuKTtcbiAgICAgICAgbG9nKFwiXHUyNzA1IFRva2VuIGNhcHR1cmVkIGFuZCBjYWNoZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGludmlzaWJsZSBmYWlscywgZm9yY2UgYnJvd3NlciBhdXRvbWF0aW9uXG4gICAgICBsb2coXCJcdTI2QTBcdUZFMEYgSW52aXNpYmxlIFR1cm5zdGlsZSBmYWlsZWQsIGZvcmNpbmcgYnJvd3NlciBhdXRvbWF0aW9uLi4uXCIpO1xuICAgICAgY29uc3QgZmFsbGJhY2tUb2tlbiA9IGF3YWl0IGhhbmRsZUNhcHRjaGFGYWxsYmFjaygpO1xuICAgICAgaWYgKGZhbGxiYWNrVG9rZW4gJiYgZmFsbGJhY2tUb2tlbi5sZW5ndGggPiAyMCkge1xuICAgICAgICBzZXRUdXJuc3RpbGVUb2tlbihmYWxsYmFja1Rva2VuKTtcbiAgICAgICAgbG9nKFwiXHUyNzA1IEZhbGxiYWNrIHRva2VuIGNhcHR1cmVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVG9rZW47XG4gICAgICB9XG5cbiAgICAgIGxvZyhcIlx1Mjc0QyBBbGwgdG9rZW4gZ2VuZXJhdGlvbiBtZXRob2RzIGZhaWxlZFwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0b2tlbkdlbmVyYXRpb25JblByb2dyZXNzID0gZmFsc2U7XG4gICAgICBjdXJyZW50R2VuZXJhdGlvblByb21pc2UgPSBudWxsO1xuICAgIH1cbiAgfSkoKTtcblxuICByZXR1cm4gY3VycmVudEdlbmVyYXRpb25Qcm9taXNlO1xufVxuXG4vLyBNYWluIGNhcHRjaGEgaGFuZGxlciAtIHJlcGxpY2F0ZWQgZnJvbSBleGFtcGxlXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDYXB0Y2hhKCkge1xuICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICB0cnkge1xuICAgIC8vIFVzZSBvcHRpbWl6ZWQgdG9rZW4gZ2VuZXJhdGlvbiB3aXRoIGF1dG9tYXRpYyBzaXRla2V5IGRldGVjdGlvblxuICAgIGNvbnN0IHNpdGVrZXkgPSBkZXRlY3RTaXRla2V5KCk7XG4gICAgbG9nKFwiXHVEODNEXHVERDExIEdlbmVyYXRpbmcgVHVybnN0aWxlIHRva2VuIGZvciBzaXRla2V5OlwiLCBzaXRla2V5KTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvcikge1xuICAgICAgbG9nKCdcdUQ4M0VcdURERUQgVUE6Jywgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQsICdQbGF0Zm9ybTonLCB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgdG9rZW4gPSBhd2FpdCBnZW5lcmF0ZVBhaW50VG9rZW4oc2l0ZWtleSk7XG4gICAgXG4gICAgaWYgKHRva2VuICYmIHRva2VuLmxlbmd0aCA+IDIwKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IE1hdGgucm91bmQoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSk7XG4gICAgICBsb2coYFx1MjcwNSBUdXJuc3RpbGUgdG9rZW4gZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseSBpbiAke2R1cmF0aW9ufW1zYCk7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb3IgZW1wdHkgdG9rZW4gcmVjZWl2ZWRcIik7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGR1cmF0aW9uID0gTWF0aC5yb3VuZChEYXRlLm5vdygpIC0gc3RhcnRUaW1lKTtcbiAgICBsb2coYFx1Mjc0QyBUdXJuc3RpbGUgdG9rZW4gZ2VuZXJhdGlvbiBmYWlsZWQgYWZ0ZXIgJHtkdXJhdGlvbn1tczpgLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7IC8vIFJlLXRocm93IHRvIGJlIGNhdWdodCBieSBlbnN1cmVUb2tlblxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlUGFpbnRUb2tlbihzaXRla2V5KSB7XG4gIHJldHVybiBleGVjdXRlVHVybnN0aWxlKHNpdGVrZXksICdwYWludCcpO1xufVxuXG4vLyBUVVJOU1RJTEUgQ09SRSBGVU5DVElPTlMgKHJlcGxpY2F0ZWQgZnJvbSBleGFtcGxlKVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkVHVybnN0aWxlKCkge1xuICAvLyBJZiBUdXJuc3RpbGUgaXMgYWxyZWFkeSBwcmVzZW50LCBqdXN0IHJlc29sdmUuXG4gIGlmICh3aW5kb3cudHVybnN0aWxlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIFxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIEF2b2lkIGFkZGluZyB0aGUgc2NyaXB0IHR3aWNlXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtzcmNePVwiaHR0cHM6Ly9jaGFsbGVuZ2VzLmNsb3VkZmxhcmUuY29tL3R1cm5zdGlsZS92MC9hcGkuanNcIl0nKSkge1xuICAgICAgY29uc3QgY2hlY2tSZWFkeSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHdpbmRvdy50dXJuc3RpbGUpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0VGltZW91dChjaGVja1JlYWR5LCAxMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGNoZWNrUmVhZHkoKTtcbiAgICB9XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnNyYyA9ICdodHRwczovL2NoYWxsZW5nZXMuY2xvdWRmbGFyZS5jb20vdHVybnN0aWxlL3YwL2FwaS5qcz9yZW5kZXI9ZXhwbGljaXQnO1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcbiAgICBzY3JpcHQub25sb2FkID0gKCkgPT4ge1xuICAgICAgbG9nKFwiXHUyNzA1IFR1cm5zdGlsZSBzY3JpcHQgbG9hZGVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9O1xuICAgIHNjcmlwdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgbG9nKFwiXHUyNzRDIEZhaWxlZCB0byBsb2FkIFR1cm5zdGlsZSBzY3JpcHRcIik7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCBUdXJuc3RpbGUnKSk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVUdXJuc3RpbGVDb250YWluZXIoKSB7XG4gIGlmICghX3R1cm5zdGlsZUNvbnRhaW5lciB8fCAhZG9jdW1lbnQuYm9keS5jb250YWlucyhfdHVybnN0aWxlQ29udGFpbmVyKSkge1xuICAgIC8vIENsZWFuIHVwIG9sZCBjb250YWluZXIgaWYgaXQgZXhpc3RzXG4gICAgaWYgKF90dXJuc3RpbGVDb250YWluZXIpIHtcbiAgICAgIF90dXJuc3RpbGVDb250YWluZXIucmVtb3ZlKCk7XG4gICAgfVxuICAgIFxuICAgIF90dXJuc3RpbGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBfdHVybnN0aWxlQ29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBwb3NpdGlvbjogZml4ZWQgIWltcG9ydGFudDtcbiAgICAgIGxlZnQ6IC05OTk5cHggIWltcG9ydGFudDsgLyoga2VlcCBvZmYtc2NyZWVuIGZvciBpbnZpc2libGUgbW9kZSAqL1xuICAgICAgdG9wOiAtOTk5OXB4ICFpbXBvcnRhbnQ7XG4gICAgICB3aWR0aDogMzAwcHggIWltcG9ydGFudDtcbiAgICAgIGhlaWdodDogNjVweCAhaW1wb3J0YW50O1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmUgIWltcG9ydGFudDtcbiAgICAgIG9wYWNpdHk6IDAgIWltcG9ydGFudDsgLyogZG8gbm90IHVzZSB2aXNpYmlsaXR5OmhpZGRlbiB0byBhdm9pZCBlbmdpbmUgcXVpcmtzICovXG4gICAgICB6LWluZGV4OiAtMSAhaW1wb3J0YW50O1xuICAgIGA7XG4gICAgX3R1cm5zdGlsZUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBfdHVybnN0aWxlQ29udGFpbmVyLmlkID0gJ3R1cm5zdGlsZS13aWRnZXQtY29udGFpbmVyJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKF90dXJuc3RpbGVDb250YWluZXIpO1xuICB9XG4gIHJldHVybiBfdHVybnN0aWxlQ29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVUdXJuc3RpbGVPdmVybGF5Q29udGFpbmVyKCkge1xuICBpZiAoX3R1cm5zdGlsZU92ZXJsYXkgJiYgZG9jdW1lbnQuYm9keS5jb250YWlucyhfdHVybnN0aWxlT3ZlcmxheSkpIHtcbiAgICByZXR1cm4gX3R1cm5zdGlsZU92ZXJsYXk7XG4gIH1cbiAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBvdmVybGF5LmlkID0gJ3R1cm5zdGlsZS1vdmVybGF5LWNvbnRhaW5lcic7XG4gIG92ZXJsYXkuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgcmlnaHQ6IDE2cHg7XG4gICAgYm90dG9tOiAxNnB4O1xuICAgIHdpZHRoOiAzMjBweDtcbiAgICBtaW4taGVpZ2h0OiA4MHB4O1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMC43KTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMik7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBwYWRkaW5nOiAxMnB4O1xuICAgIHotaW5kZXg6IDEwMDAwMDtcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNnB4KTtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBib3gtc2hhZG93OiAwIDhweCAyNHB4IHJnYmEoMCwwLDAsMC40KTtcbiAgYDtcbiAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGl0bGUudGV4dENvbnRlbnQgPSAnQ2xvdWRmbGFyZSBUdXJuc3RpbGUgXHUyMDE0IHBsZWFzZSBjb21wbGV0ZSB0aGUgY2hlY2sgaWYgc2hvd24nO1xuICB0aXRsZS5zdHlsZS5jc3NUZXh0ID0gJ2ZvbnQ6IDYwMCAxMnB4LzEuMyBcIlNlZ29lIFVJXCIsc2Fucy1zZXJpZjsgbWFyZ2luLWJvdHRvbTogOHB4OyBvcGFjaXR5OiAwLjk7JztcbiAgY29uc3Qgd2lkZ2V0SG9zdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB3aWRnZXRIb3N0LmlkID0gJ3R1cm5zdGlsZS1vdmVybGF5LWhvc3QnO1xuICB3aWRnZXRIb3N0LnN0eWxlLmNzc1RleHQgPSAnd2lkdGg6IDEwMCU7IG1pbi1oZWlnaHQ6IDcwcHg7JztcbiAgY29uc3QgY2xvc2VCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgY2xvc2VCdG4udGV4dENvbnRlbnQgPSAnSGlkZSc7XG4gIGNsb3NlQnRuLnN0eWxlLmNzc1RleHQgPSAncG9zaXRpb246YWJzb2x1dGU7IHRvcDo2cHg7IHJpZ2h0OjZweDsgZm9udC1zaXplOjExcHg7IGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7IGNvbG9yOiNmZmY7IGJvcmRlcjoxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpOyBib3JkZXItcmFkaXVzOjZweDsgcGFkZGluZzoycHggNnB4OyBjdXJzb3I6cG9pbnRlcjsnO1xuICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IG92ZXJsYXkucmVtb3ZlKCkpO1xuICBvdmVybGF5LmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgb3ZlcmxheS5hcHBlbmRDaGlsZCh3aWRnZXRIb3N0KTtcbiAgb3ZlcmxheS5hcHBlbmRDaGlsZChjbG9zZUJ0bik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheSk7XG4gIF90dXJuc3RpbGVPdmVybGF5ID0gb3ZlcmxheTtcbiAgcmV0dXJuIG92ZXJsYXk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVUdXJuc3RpbGUoc2l0ZWtleSwgYWN0aW9uID0gJ3BhaW50Jykge1xuICBhd2FpdCBsb2FkVHVybnN0aWxlKCk7XG5cbiAgaWYgKF90dXJuc3RpbGVXaWRnZXRJZCAmJiBfbGFzdFNpdGVrZXkgPT09IHNpdGVrZXkgJiYgd2luZG93LnR1cm5zdGlsZT8uZXhlY3V0ZSkge1xuICAgIHRyeSB7XG4gICAgICBsb2coXCJcdUQ4M0RcdUREMDQgUmV1c2luZyBleGlzdGluZyBUdXJuc3RpbGUgd2lkZ2V0Li4uXCIpO1xuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xuICAgICAgICB3aW5kb3cudHVybnN0aWxlLmV4ZWN1dGUoX3R1cm5zdGlsZVdpZGdldElkLCB7IGFjdGlvbiB9KSxcbiAgICAgICAgbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4gc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdFeGVjdXRlIHRpbWVvdXQnKSksIDE1MDAwKSlcbiAgICAgIF0pO1xuICAgICAgaWYgKHRva2VuICYmIHRva2VuLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgIGxvZyhcIlx1MjcwNSBUb2tlbiBnZW5lcmF0ZWQgdmlhIHdpZGdldCByZXVzZVwiKTtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nKCdcdUQ4M0RcdUREMDQgV2lkZ2V0IHJldXNlIGZhaWxlZCwgd2lsbCBjcmVhdGUgYSBmcmVzaCB3aWRnZXQ6JywgZXJyLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGludmlzaWJsZSA9IGF3YWl0IGNyZWF0ZU5ld1R1cm5zdGlsZVdpZGdldEludmlzaWJsZShzaXRla2V5LCBhY3Rpb24pO1xuICBpZiAoaW52aXNpYmxlICYmIGludmlzaWJsZS5sZW5ndGggPiAyMCkgcmV0dXJuIGludmlzaWJsZTtcblxuICBsb2coJ1x1RDgzRFx1REM0MCBGYWxsaW5nIGJhY2sgdG8gaW50ZXJhY3RpdmUgVHVybnN0aWxlICh2aXNpYmxlKS4nKTtcbiAgLy8gQXZpc28gaW5pY2lhbCBhbCB1c3VhcmlvIGRlbCBwcmltZXIgaW50ZW50byBpbnRlcmFjdGl2b1xuICB0cnkgeyBzaG93VXNlck5vdGlmaWNhdGlvblRvcENlbnRlcignXHVEODNEXHVERDA0IFJlc29sdmllbmRvIENBUFRDSEEuLi4nLCAnaW5mbycpOyB9IGNhdGNoIHt9XG5cbiAgLy8gU2lzdGVtYSBkZSByZWludGVudG9zIGluZGVmaW5pZG9zIGNvbiB0aW1lb3V0IGluaWNpYWwgZGUgMTVzXG4gIGNvbnN0IElOSVRJQUxfVElNRU9VVCA9IDE1MDAwOyAvLyAxNSBzZWd1bmRvcyBwYXJhIGVsIHByaW1lciBpbnRlbnRvXG4gIGNvbnN0IFJFVFJZX0lOVEVSVkFMID0gNTAwMDsgICAvLyA1IHNlZ3VuZG9zIGVudHJlIHJlaW50ZW50b3NcbiAgXG4gIGxldCBhdHRlbXB0ID0gMTtcbiAgbGV0IGhhc1Nob3duRmlyc3RSZXRyeU5vdGlmaWNhdGlvbiA9IGZhbHNlO1xuICBcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCBjdXJyZW50VGltZW91dCA9IGF0dGVtcHQgPT09IDEgPyBJTklUSUFMX1RJTUVPVVQgOiBSRVRSWV9JTlRFUlZBTDtcbiAgICBsb2coYFx1RDgzRFx1REQwNCBJbnRlbnRvICR7YXR0ZW1wdH0gZGUgcmVzb2x1Y2lcdTAwRjNuIGRlbCBDQVBUQ0hBICh0aW1lb3V0OiAke2N1cnJlbnRUaW1lb3V0LzEwMDB9cykuLi5gKTtcbiAgICBcbiAgICAvLyBNb3N0cmFyIG5vdGlmaWNhY2lcdTAwRjNuIGFsIHVzdWFyaW8gYSBwYXJ0aXIgZGVsIHByaW1lciByZWludGVudG9cbiAgICBpZiAoYXR0ZW1wdCA+IDEgJiYgIWhhc1Nob3duRmlyc3RSZXRyeU5vdGlmaWNhdGlvbikge1xuICAgICAgc2hvd1VzZXJOb3RpZmljYXRpb24oYFx1RDgzRFx1REQwNCBDQVBUQ0hBOiBSZWludGVudGFuZG8gYXV0b21cdTAwRTF0aWNhbWVudGUgY2FkYSA1IHNlZ3VuZG9zIChpbnRlbnRvICR7YXR0ZW1wdH0pYCwgJ2luZm8nKTtcbiAgICAgIGhhc1Nob3duRmlyc3RSZXRyeU5vdGlmaWNhdGlvbiA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChhdHRlbXB0ID4gMikge1xuICAgICAgc2hvd1VzZXJOb3RpZmljYXRpb24oYFx1RDgzRFx1REQwNCBDQVBUQ0hBOiBJbnRlbnRvICR7YXR0ZW1wdH0gLSBDb250aW51YW5kbyBhdXRvbVx1MDBFMXRpY2FtZW50ZWAsICdpbmZvJyk7XG4gICAgfVxuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBMaW1waWFyIGN1YWxxdWllciB3aWRnZXQgZXhpc3RlbnRlIGFudGVzIGRlIGNhZGEgaW50ZW50b1xuICAgICAgaWYgKF90dXJuc3RpbGVXaWRnZXRJZCAmJiB3aW5kb3cudHVybnN0aWxlPy5yZW1vdmUpIHtcbiAgICAgICAgdHJ5IHsgXG4gICAgICAgICAgd2luZG93LnR1cm5zdGlsZS5yZW1vdmUoX3R1cm5zdGlsZVdpZGdldElkKTsgXG4gICAgICAgICAgX3R1cm5zdGlsZVdpZGdldElkID0gbnVsbDtcbiAgICAgICAgfSBjYXRjaCB7IC8qIElnbm9yZSByZW1vdmFsIGVycm9ycyAqLyB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENyZWFyIG51ZXZhIHZlbnRhbmEgaW50ZXJhY3RpdmFcbiAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgY3JlYXRlTmV3VHVybnN0aWxlV2lkZ2V0SW50ZXJhY3RpdmVXaXRoUmV0cnkoc2l0ZWtleSwgYWN0aW9uLCB0cnVlLCBjdXJyZW50VGltZW91dCk7XG4gICAgICBcbiAgICAgIGlmICh0b2tlbiAmJiB0b2tlbi5sZW5ndGggPiAyMCkge1xuICAgICAgICBsb2coYFx1MjcwNSBDQVBUQ0hBIHJlc3VlbHRvIGV4aXRvc2FtZW50ZSBlbiBlbCBpbnRlbnRvICR7YXR0ZW1wdH1gKTtcbiAgICAgICAgaWYgKGF0dGVtcHQgPiAxKSB7XG4gICAgICAgICAgc2hvd1VzZXJOb3RpZmljYXRpb24oJ1x1MjcwNSBDQVBUQ0hBIHJlc3VlbHRvIGV4aXRvc2FtZW50ZScsICdzdWNjZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuICAgICAgXG4gICAgICBsb2coYFx1MjZBMFx1RkUwRiBJbnRlbnRvICR7YXR0ZW1wdH0gZmFsbFx1MDBGMywgcmVpbnRlbnRhbmRvIGVuIDUgc2VndW5kb3MuLi5gKTtcbiAgICAgIGlmIChhdHRlbXB0ID4gMSkge1xuICAgICAgICBzaG93VXNlck5vdGlmaWNhdGlvbihgXHUyNkEwXHVGRTBGIEludGVudG8gJHthdHRlbXB0fSBmYWxsXHUwMEYzLCByZWludGVudGFuZG8gZW4gNSBzZWd1bmRvcy4uLmAsICdpbmZvJyk7XG4gICAgICB9XG4gICAgICBhd2FpdCBzbGVlcCg1MDAwKTsgLy8gRXNwZXJhciA1IHNlZ3VuZG9zIGFudGVzIGRlbCBzaWd1aWVudGUgaW50ZW50b1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZyhgXHUyNzRDIEVycm9yIGVuIGludGVudG8gJHthdHRlbXB0fTpgLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIGlmIChhdHRlbXB0ID4gMSkge1xuICAgICAgICBzaG93VXNlck5vdGlmaWNhdGlvbihgXHUyNzRDIEVycm9yIGVuIGludGVudG8gJHthdHRlbXB0fSwgcmVpbnRlbnRhbmRvIGVuIDUgc2VndW5kb3NgLCAnZXJyb3InKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHNsZWVwKDUwMDApO1xuICAgIH1cbiAgICBcbiAgICBhdHRlbXB0Kys7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlTmV3VHVybnN0aWxlV2lkZ2V0SW52aXNpYmxlKHNpdGVrZXksIGFjdGlvbikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKF90dXJuc3RpbGVXaWRnZXRJZCAmJiB3aW5kb3cudHVybnN0aWxlPy5yZW1vdmUpIHtcbiAgICAgICAgdHJ5IHsgd2luZG93LnR1cm5zdGlsZS5yZW1vdmUoX3R1cm5zdGlsZVdpZGdldElkKTsgfSBjYXRjaCB7IC8qIElnbm9yZSByZW1vdmFsIGVycm9ycyAqLyB9XG4gICAgICB9XG4gICAgICBjb25zdCBjb250YWluZXIgPSBlbnN1cmVUdXJuc3RpbGVDb250YWluZXIoKTtcbiAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgIGNvbnN0IHdpZGdldElkID0gd2luZG93LnR1cm5zdGlsZS5yZW5kZXIoY29udGFpbmVyLCB7XG4gICAgICAgIHNpdGVrZXksXG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgc2l6ZTogJ2ludmlzaWJsZScsXG4gICAgICAgIHJldHJ5OiAnYXV0bycsXG4gICAgICAgICdyZXRyeS1pbnRlcnZhbCc6IDgwMDAsXG4gICAgICAgIGNhbGxiYWNrOiAodG9rZW4pID0+IHtcbiAgICAgICAgICBsb2coJ1x1MjcwNSBJbnZpc2libGUgVHVybnN0aWxlIGNhbGxiYWNrJyk7XG4gICAgICAgICAgcmVzb2x2ZSh0b2tlbik7XG4gICAgICAgIH0sXG4gICAgICAgICdlcnJvci1jYWxsYmFjayc6ICgpID0+IHJlc29sdmUobnVsbCksXG4gICAgICAgICd0aW1lb3V0LWNhbGxiYWNrJzogKCkgPT4gcmVzb2x2ZShudWxsKSxcbiAgICAgIH0pO1xuICAgICAgX3R1cm5zdGlsZVdpZGdldElkID0gd2lkZ2V0SWQ7XG4gICAgICBfbGFzdFNpdGVrZXkgPSBzaXRla2V5O1xuICAgICAgaWYgKCF3aWRnZXRJZCkgcmV0dXJuIHJlc29sdmUobnVsbCk7XG4gICAgICBQcm9taXNlLnJhY2UoW1xuICAgICAgICB3aW5kb3cudHVybnN0aWxlLmV4ZWN1dGUod2lkZ2V0SWQsIHsgYWN0aW9uIH0pLFxuICAgICAgICBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoJ0ludmlzaWJsZSBleGVjdXRlIHRpbWVvdXQnKSksIDEyMDAwKSlcbiAgICAgIF0pLnRoZW4ocmVzb2x2ZSkuY2F0Y2goKCkgPT4gcmVzb2x2ZShudWxsKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nKCdJbnZpc2libGUgVHVybnN0aWxlIGZhaWxlZDonLCBlKTtcbiAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gVmVyc2lcdTAwRjNuIGNvbiByZWludGVudG9zIGF1dG9tXHUwMEUxdGljb3MgcGFyYSByZXNvbHVjaVx1MDBGM24gZGVsIENBUFRDSEFcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZU5ld1R1cm5zdGlsZVdpZGdldEludGVyYWN0aXZlV2l0aFJldHJ5KHNpdGVrZXksIGFjdGlvbiwgaXNBdXRvUmV0cnkgPSB0cnVlLCBjdXN0b21UaW1lb3V0ID0gMzAwMDApIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKF90dXJuc3RpbGVXaWRnZXRJZCAmJiB3aW5kb3cudHVybnN0aWxlPy5yZW1vdmUpIHtcbiAgICAgICAgdHJ5IHsgd2luZG93LnR1cm5zdGlsZS5yZW1vdmUoX3R1cm5zdGlsZVdpZGdldElkKTsgfSBjYXRjaCB7IC8qIElnbm9yZSByZW1vdmFsIGVycm9ycyAqLyB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG92ZXJsYXkgPSBlbnN1cmVUdXJuc3RpbGVPdmVybGF5Q29udGFpbmVyKCk7XG4gICAgICBjb25zdCBob3N0ID0gb3ZlcmxheS5xdWVyeVNlbGVjdG9yKCcjdHVybnN0aWxlLW92ZXJsYXktaG9zdCcpO1xuICAgICAgaG9zdC5pbm5lckhUTUwgPSAnJztcblxuICAgICAgLy8gVGltZW91dCBwcm9ncmVzaXZvIHBhcmEgcmVpbnRlbnRvcyBhdXRvbVx1MDBFMXRpY29zXG4gICAgICBjb25zdCB0aW1lb3V0ID0gaXNBdXRvUmV0cnkgPyBjdXN0b21UaW1lb3V0IDogMTIwMDAwOyAvLyBUaW1lb3V0IHBlcnNvbmFsaXphZG8gcGFyYSBhdXRvLXJldHJ5LCAyIG1pbnV0b3MgcGFyYSBtYW51YWxcbiAgICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsb2coYFx1MjNGMCBJbnRlcmFjdGl2ZSBUdXJuc3RpbGUgdGltZWQgb3V0ICgke2lzQXV0b1JldHJ5ID8gJ2F1dG8tcmV0cnknIDogJ21hbnVhbCd9KWApO1xuICAgICAgICAvLyBMaW1waWFyIG92ZXJsYXkgZW4gdGltZW91dFxuICAgICAgICB0cnkgeyBvdmVybGF5LnJlbW92ZSgpOyB9IGNhdGNoIHsgLyogSWdub3JlIHJlbW92YWwgZXJyb3JzICovIH1cbiAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgICBjb25zdCB3aWRnZXRJZCA9IHdpbmRvdy50dXJuc3RpbGUucmVuZGVyKGhvc3QsIHtcbiAgICAgICAgc2l0ZWtleSxcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBzaXplOiAnbm9ybWFsJyxcbiAgICAgICAgcmV0cnk6ICdhdXRvJyxcbiAgICAgICAgJ3JldHJ5LWludGVydmFsJzogaXNBdXRvUmV0cnkgPyAzMDAwIDogODAwMCwgLy8gSW50ZXJ2YWxvIG1cdTAwRTFzIHJcdTAwRTFwaWRvIHBhcmEgYXV0by1yZXRyeVxuICAgICAgICBjYWxsYmFjazogKHRva2VuKSA9PiB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgLy8gSGlkZSBvdmVybGF5IGFmdGVyIHN1Y2Nlc3NcbiAgICAgICAgICB0cnkgeyBvdmVybGF5LnJlbW92ZSgpOyB9IGNhdGNoIHsgLyogSWdub3JlIHJlbW92YWwgZXJyb3JzICovIH1cbiAgICAgICAgICBsb2coYFx1MjcwNSBJbnRlcmFjdGl2ZSBUdXJuc3RpbGUgc29sdmVkICgke2lzQXV0b1JldHJ5ID8gJ2F1dG8tcmV0cnknIDogJ21hbnVhbCd9KWApO1xuICAgICAgICAgIHJlc29sdmUodG9rZW4pO1xuICAgICAgICB9LFxuICAgICAgICAnZXJyb3ItY2FsbGJhY2snOiAoZXJyb3IpID0+IHtcbiAgICAgICAgICBsb2coYFx1RDgzRFx1REVBOCBJbnRlcmFjdGl2ZSBUdXJuc3RpbGUgZXJyb3IgKCR7aXNBdXRvUmV0cnkgPyAnYXV0by1yZXRyeScgOiAnbWFudWFsJ30pOmAsIGVycm9yKTtcbiAgICAgICAgICBpZiAoaXNBdXRvUmV0cnkpIHtcbiAgICAgICAgICAgIC8vIEVuIG1vZG8gYXV0by1yZXRyeSwgcmVzb2x2ZXIgY29uIG51bGwgcGFyYSBjb250aW51YXIgY29uIGVsIHNpZ3VpZW50ZSBpbnRlbnRvXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgIHRyeSB7IG92ZXJsYXkucmVtb3ZlKCk7IH0gY2F0Y2ggeyAvKiBJZ25vcmUgcmVtb3ZhbCBlcnJvcnMgKi8gfVxuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICd0aW1lb3V0LWNhbGxiYWNrJzogKCkgPT4ge1xuICAgICAgICAgIGxvZyhgXHUyM0YwIFR1cm5zdGlsZSB0aW1lb3V0IGNhbGxiYWNrICgke2lzQXV0b1JldHJ5ID8gJ2F1dG8tcmV0cnknIDogJ21hbnVhbCd9KWApO1xuICAgICAgICAgIGlmIChpc0F1dG9SZXRyeSkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICB0cnkgeyBvdmVybGF5LnJlbW92ZSgpOyB9IGNhdGNoIHsgLyogSWdub3JlIHJlbW92YWwgZXJyb3JzICovIH1cbiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZXhwaXJlZC1jYWxsYmFjayc6ICgpID0+IHtcbiAgICAgICAgICBsb2coYFx1MjZBMFx1RkUwRiBJbnRlcmFjdGl2ZSBUdXJuc3RpbGUgdG9rZW4gZXhwaXJlZCAoJHtpc0F1dG9SZXRyeSA/ICdhdXRvLXJldHJ5JyA6ICdtYW51YWwnfSlgKTtcbiAgICAgICAgICBpZiAoaXNBdXRvUmV0cnkpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgdHJ5IHsgb3ZlcmxheS5yZW1vdmUoKTsgfSBjYXRjaCB7IC8qIElnbm9yZSByZW1vdmFsIGVycm9ycyAqLyB9XG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIF90dXJuc3RpbGVXaWRnZXRJZCA9IHdpZGdldElkO1xuICAgICAgX2xhc3RTaXRla2V5ID0gc2l0ZWtleTtcbiAgICAgIGlmICghd2lkZ2V0SWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIHRyeSB7IG92ZXJsYXkucmVtb3ZlKCk7IH0gY2F0Y2ggeyAvKiBJZ25vcmUgcmVtb3ZhbCBlcnJvcnMgKi8gfVxuICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZyhgXHUyNzRDIEVycm9yIGNyZWF0aW5nIGludGVyYWN0aXZlIFR1cm5zdGlsZSB3aWRnZXQgKCR7aXNBdXRvUmV0cnkgPyAnYXV0by1yZXRyeScgOiAnbWFudWFsJ30pOmAsIGVycm9yKTtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZGV0ZWN0U2l0ZWtleShmYWxsYmFjayA9ICcweDRBQUFBQUFCcHFKZThGTzBOODRxMEYnKSB7XG4gIC8vIENhY2hlIHNpdGVrZXkgdG8gYXZvaWQgcmVwZWF0ZWQgRE9NIHF1ZXJpZXNcbiAgaWYgKF9jYWNoZWRTaXRla2V5KSB7XG4gICAgcmV0dXJuIF9jYWNoZWRTaXRla2V5O1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBUcnkgdG8gZmluZCBzaXRla2V5IGluIGRhdGEgYXR0cmlidXRlc1xuICAgIGNvbnN0IHNpdGVrZXlTZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zaXRla2V5XScpO1xuICAgIGlmIChzaXRla2V5U2VsKSB7XG4gICAgICBjb25zdCBzaXRla2V5ID0gc2l0ZWtleVNlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2l0ZWtleScpO1xuICAgICAgaWYgKHNpdGVrZXkgJiYgc2l0ZWtleS5sZW5ndGggPiAxMCkge1xuICAgICAgICBfY2FjaGVkU2l0ZWtleSA9IHNpdGVrZXk7XG4gICAgICAgIGxvZyhcIlx1RDgzRFx1REQwRCBTaXRla2V5IGRldGVjdGVkIGZyb20gZGF0YSBhdHRyaWJ1dGU6XCIsIHNpdGVrZXkpO1xuICAgICAgICByZXR1cm4gc2l0ZWtleTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUcnkgdHVybnN0aWxlIGVsZW1lbnRcbiAgICBjb25zdCB0dXJuc3RpbGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jZi10dXJuc3RpbGUnKTtcbiAgICBpZiAodHVybnN0aWxlRWw/LmRhdGFzZXQ/LnNpdGVrZXkgJiYgdHVybnN0aWxlRWwuZGF0YXNldC5zaXRla2V5Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBfY2FjaGVkU2l0ZWtleSA9IHR1cm5zdGlsZUVsLmRhdGFzZXQuc2l0ZWtleTtcbiAgICAgIGxvZyhcIlx1RDgzRFx1REQwRCBTaXRla2V5IGRldGVjdGVkIGZyb20gdHVybnN0aWxlIGVsZW1lbnQ6XCIsIF9jYWNoZWRTaXRla2V5KTtcbiAgICAgIHJldHVybiBfY2FjaGVkU2l0ZWtleTtcbiAgICB9XG5cbiAgICAvLyBUcnkgZ2xvYmFsIHZhcmlhYmxlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fX1RVUk5TVElMRV9TSVRFS0VZICYmIHdpbmRvdy5fX1RVUk5TVElMRV9TSVRFS0VZLmxlbmd0aCA+IDEwKSB7XG4gICAgICBfY2FjaGVkU2l0ZWtleSA9IHdpbmRvdy5fX1RVUk5TVElMRV9TSVRFS0VZO1xuICAgICAgbG9nKFwiXHVEODNEXHVERDBEIFNpdGVrZXkgZGV0ZWN0ZWQgZnJvbSBnbG9iYWwgdmFyaWFibGU6XCIsIF9jYWNoZWRTaXRla2V5KTtcbiAgICAgIHJldHVybiBfY2FjaGVkU2l0ZWtleTtcbiAgICB9XG5cbiAgICAvLyBUcnkgc2NyaXB0IHRhZ3MgZm9yIGlubGluZSBzaXRla2V5XG4gICAgY29uc3Qgc2NyaXB0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdCcpO1xuICAgIGZvciAoY29uc3Qgc2NyaXB0IG9mIHNjcmlwdHMpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBzY3JpcHQudGV4dENvbnRlbnQgfHwgc2NyaXB0LmlubmVySFRNTDtcbiAgICAgIGNvbnN0IHNpdGVrZXlNYXRjaCA9IGNvbnRlbnQubWF0Y2goL3NpdGVrZXlbJ1wiOlxcc10rKFsnXCIwLTlhLXpBLVpfLV17MjAsfSkvaSk7XG4gICAgICBpZiAoc2l0ZWtleU1hdGNoICYmIHNpdGVrZXlNYXRjaFsxXSAmJiBzaXRla2V5TWF0Y2hbMV0ubGVuZ3RoID4gMTApIHtcbiAgICAgICAgX2NhY2hlZFNpdGVrZXkgPSBzaXRla2V5TWF0Y2hbMV0ucmVwbGFjZSgvWydcIl0vZywgJycpO1xuICAgICAgICBsb2coXCJcdUQ4M0RcdUREMEQgU2l0ZWtleSBkZXRlY3RlZCBmcm9tIHNjcmlwdCBjb250ZW50OlwiLCBfY2FjaGVkU2l0ZWtleSk7XG4gICAgICAgIHJldHVybiBfY2FjaGVkU2l0ZWtleTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nKCdFcnJvciBkZXRlY3Rpbmcgc2l0ZWtleTonLCBlcnJvcik7XG4gIH1cbiAgXG4gIGxvZyhcIlx1RDgzRFx1REQwRCBVc2luZyBmYWxsYmFjayBzaXRla2V5OlwiLCBmYWxsYmFjayk7XG4gIF9jYWNoZWRTaXRla2V5ID0gZmFsbGJhY2s7XG4gIHJldHVybiBmYWxsYmFjaztcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uc1xuZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG4vLyBGdW5jaVx1MDBGM24gcGFyYSBtb3N0cmFyIG5vdGlmaWNhY2lvbmVzIGFsIHVzdWFyaW9cbmZ1bmN0aW9uIHNob3dVc2VyTm90aWZpY2F0aW9uKG1lc3NhZ2UsIHR5cGUgPSAnaW5mbycpIHtcbiAgLy8gQ29tcGF0aWJpbGlkYWQ6IGRlbGVnYXIgYSB0b3AtY2VudGVyIHBhcmEgdW5pZmljYXIgY29uIEF1dG8tRmFybVxuICBzaG93VXNlck5vdGlmaWNhdGlvblRvcENlbnRlcihtZXNzYWdlLCB0eXBlKTtcbn1cblxuLy8gRXN0aWxvIHRvcC1jZW50ZXIgY29tbyBBdXRvLUZhcm1cbmZ1bmN0aW9uIHNob3dVc2VyTm90aWZpY2F0aW9uVG9wQ2VudGVyKG1lc3NhZ2UsIHR5cGUgPSAnaW5mbycsIHRpbWVvdXQgPSAzMDAwKSB7XG4gIGxldCBjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dwbGFjZS10b2FzdC1jb250YWluZXInKTtcbiAgaWYgKCFjKSB7XG4gICAgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGMuaWQgPSAnd3BsYWNlLXRvYXN0LWNvbnRhaW5lcic7XG4gICAgYy5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgdG9wOiAxNnB4O1xuICAgICAgbGVmdDogNTAlO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgICAgei1pbmRleDogMjE0NzQ4MzY0NztcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgZ2FwOiA4cHg7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICBgO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYyk7XG4gIH1cblxuICBjb25zdCBiZyA9IHR5cGUgPT09ICdzdWNjZXNzJyA/ICcjMTBiOTgxJyA6IHR5cGUgPT09ICdlcnJvcicgPyAnI2VmNDQ0NCcgOiAnIzNiODJmNic7XG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGVsLmNsYXNzTmFtZSA9ICd3cGxhY2UtdG9hc3QnO1xuICBlbC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gIGVsLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgbWluLXdpZHRoOiAyNDBweDtcbiAgICBtYXgtd2lkdGg6IDgwdnc7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgYmFja2dyb3VuZDogJHtiZ307XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgYm94LXNoYWRvdzogMCA4cHggMjRweCByZ2JhKDAsMCwwLDAuMzUpO1xuICAgIHBhZGRpbmc6IDEwcHggMTRweDtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxldHRlci1zcGFjaW5nOiAuMnB4O1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMC45OCk7XG4gICAgb3BhY2l0eTogMDtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjI1cyBjdWJpYy1iZXppZXIoMC4yLCAwLjgsIDAuMiwgMSksIG9wYWNpdHkgLjI1cyBlYXNlO1xuICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICBgO1xuICBjLmFwcGVuZENoaWxkKGVsKTtcblxuICBjb25zdCByYWYgPSAoY2IpID0+ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgOiBzZXRUaW1lb3V0KGNiLCAxNikpO1xuICByYWYoKCkgPT4ge1xuICAgIGVsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApIHNjYWxlKDEpJztcbiAgICBlbC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICB9KTtcblxuICBjb25zdCByZW1vdmUgPSAoKSA9PiB7XG4gICAgZWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKDAuOTgpJztcbiAgICBlbC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gZWwucmVtb3ZlKCksIDI1MCk7XG4gIH07XG4gIGlmICh0aW1lb3V0ID4gMCkgc2V0VGltZW91dChyZW1vdmUsIHRpbWVvdXQpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlbW92ZSk7XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JTZWxlY3RvcihzZWxlY3RvciwgaW50ZXJ2YWwgPSAyMDAsIHRpbWVvdXQgPSAxMDAwMCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKSArIHRpbWVvdXQ7XG4gICAgY29uc3QgY2hlY2sgPSAoKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICByZXNvbHZlKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmIChEYXRlLm5vdygpIDwgZW5kVGltZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGNoZWNrLCBpbnRlcnZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgfVxuICAgIH07XG4gICAgY2hlY2soKTtcbiAgfSk7XG59XG5cbi8vIEtlZXAgb3JpZ2luYWwgbWV0aG9kIGFzIGZhbGxiYWNrXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDYXB0Y2hhRmFsbGJhY2soKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgZXhlY3V0ZUZsb3cgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsb2coXCJcdUQ4M0NcdURGQUYgU3RhcnRpbmcgYXV0b21hdGljIENBUFRDSEEgc29sdmluZyBwcm9jZXNzLi4uXCIpO1xuICB0cnkgeyBzaG93VXNlck5vdGlmaWNhdGlvblRvcENlbnRlcignSW50ZW50YW5kbyByZXNvbHZlci4uLiBUaWVtcG8gZGUgZXNwZXJhIG1heGltbyAzMCBzJywgJ2luZm8nKTsgfSBjYXRjaCB7fVxuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIHRva2VuIHRvIGZvcmNlIGZyZXNoIGdlbmVyYXRpb25cbiAgICAgICAgaW52YWxpZGF0ZVRva2VuKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbnN1cmUgd2UgaGF2ZSBhIGZyZXNoIHByb21pc2UgdG8gYXdhaXQgZm9yIGEgbmV3IHRva2VuIGNhcHR1cmVcbiAgICAgICAgdG9rZW5Qcm9taXNlID0gbmV3IFByb21pc2UoKHJlcykgPT4geyBfcmVzb2x2ZVRva2VuID0gcmVzOyB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpbWVvdXRQcm9taXNlID0gc2xlZXAoMzAwMDApLnRoZW4oKCkgPT4gcmVqZWN0KG5ldyBFcnJvcihcIkF1dG8tQ0FQVENIQSB0aW1lZCBvdXQgYWZ0ZXIgMzAgc2Vjb25kcy5cIikpKTtcblxuICAgICAgICBjb25zdCBzb2x2ZVByb21pc2UgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSBtYWluIHBhaW50IGJ1dHRvbiAtIGRpZmZlcmVudCBzZWxlY3RvcnMgZm9yIGRpZmZlcmVudCBzdGF0ZXNcbiAgICAgICAgICBsZXQgbWFpblBhaW50QnRuID0gYXdhaXQgd2FpdEZvclNlbGVjdG9yKCdidXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1sZycsIDIwMCwgMzAwMCk7XG4gICAgICAgICAgaWYgKCFtYWluUGFpbnRCdG4pIHtcbiAgICAgICAgICAgIG1haW5QYWludEJ0biA9IGF3YWl0IHdhaXRGb3JTZWxlY3RvcignYnV0dG9uLmJ0bi1wcmltYXJ5LnNtXFxcXDpidG4teGwnLCAyMDAsIDMwMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIW1haW5QYWludEJ0bikge1xuICAgICAgICAgICAgbWFpblBhaW50QnRuID0gYXdhaXQgd2FpdEZvclNlbGVjdG9yKCdidXR0b24uYnRuLXByaW1hcnknLCAyMDAsIDMwMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIW1haW5QYWludEJ0bikge1xuICAgICAgICAgICAgLy8gSWYgbm8gcGFpbnQgYnV0dG9uLCB0cnkgdG8gdHJpZ2dlciB0aGUgZmxvdyBtYW51YWxseVxuICAgICAgICAgICAgbG9nKFwiXHVEODNDXHVERkFGIE5vIHBhaW50IGJ1dHRvbiBmb3VuZCwgY2xpY2tpbmcgb24gY2FudmFzIGRpcmVjdGx5IHRvIHRyaWdnZXIgQ0FQVENIQS4uLlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IGF3YWl0IHdhaXRGb3JTZWxlY3RvcignY2FudmFzJywgMjAwLCA1MDAwKTtcbiAgICAgICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICAgICAgY2FudmFzLmNsaWNrKCk7XG4gICAgICAgICAgICAgIGF3YWl0IHNsZWVwKDEwMDApO1xuICAgICAgICAgICAgICAvLyBUcnkgYWdhaW4gdG8gZmluZCBwYWludCBidXR0b25cbiAgICAgICAgICAgICAgbWFpblBhaW50QnRuID0gYXdhaXQgd2FpdEZvclNlbGVjdG9yKCdidXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1sZywgYnV0dG9uLmJ0bi1wcmltYXJ5LnNtXFxcXDpidG4teGwsIGJ1dHRvbi5idG4tcHJpbWFyeScsIDIwMCwgNTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGlmICghbWFpblBhaW50QnRuKSB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBhbnkgcGFpbnQgYnV0dG9uIGFmdGVyIGF0dGVtcHRzLlwiKTtcbiAgICAgICAgICBcbiAgICAgICAgICBsb2coXCJcdUQ4M0NcdURGQUYgRm91bmQgcGFpbnQgYnV0dG9uLCBjbGlja2luZy4uLlwiKTtcbiAgICAgICAgICBtYWluUGFpbnRCdG4uY2xpY2soKTtcbiAgICAgICAgICBhd2FpdCBzbGVlcCg1MDApO1xuXG4gICAgICAgICAgLy8gU2VsZWN0IHRyYW5zcGFyZW50IGNvbG9yIChjb2xvciAwKVxuICAgICAgICAgIGxvZyhcIlx1RDgzQ1x1REZBRiBTZWxlY3RpbmcgdHJhbnNwYXJlbnQgY29sb3IuLi5cIik7XG4gICAgICAgICAgY29uc3QgdHJhbnNCdG4gPSBhd2FpdCB3YWl0Rm9yU2VsZWN0b3IoJ2J1dHRvbiNjb2xvci0wJywgMjAwLCA1MDAwKTtcbiAgICAgICAgICBpZiAoIXRyYW5zQnRuKSB7XG4gICAgICAgICAgICBsb2coXCJcdTI2QTBcdUZFMEYgQ291bGQgbm90IGZpbmQgdHJhbnNwYXJlbnQgY29sb3IgYnV0dG9uLCB0cnlpbmcgYWx0ZXJuYXRpdmUgc2VsZWN0b3JzLi4uXCIpO1xuICAgICAgICAgICAgY29uc3QgY29sb3JCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uW2lkXj1cImNvbG9yLVwiXScpO1xuICAgICAgICAgICAgaWYgKGNvbG9yQnRucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbG9yQnRuc1swXS5jbGljaygpO1xuICAgICAgICAgICAgICBsb2coXCJcdUQ4M0NcdURGQUYgQ2xpY2tlZCBmaXJzdCBhdmFpbGFibGUgY29sb3IgYnV0dG9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc0J0bi5jbGljaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBzbGVlcCg1MDApO1xuXG4gICAgICAgICAgLy8gRmluZCBhbmQgaW50ZXJhY3Qgd2l0aCBjYW52YXNcbiAgICAgICAgICBsb2coXCJcdUQ4M0NcdURGQUYgRmluZGluZyBjYW52YXMgZWxlbWVudC4uLlwiKTtcbiAgICAgICAgICBjb25zdCBjYW52YXMgPSBhd2FpdCB3YWl0Rm9yU2VsZWN0b3IoJ2NhbnZhcycsIDIwMCwgNTAwMCk7XG4gICAgICAgICAgaWYgKCFjYW52YXMpIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIHRoZSBjYW52YXMgZWxlbWVudC5cIik7XG5cbiAgICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgICAgY2FudmFzLmZvY3VzKCk7XG4gICAgICAgICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBjb25zdCBjZW50ZXJYID0gTWF0aC5yb3VuZChyZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMik7XG4gICAgICAgICAgY29uc3QgY2VudGVyWSA9IE1hdGgucm91bmQocmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDIpO1xuXG4gICAgICAgICAgbG9nKFwiXHVEODNDXHVERkFGIFNpbXVsYXRpbmcgY2FudmFzIGludGVyYWN0aW9uLi4uXCIpO1xuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTW91c2VFdmVudCAmJiB3aW5kb3cuS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICAgICAgLy8gU2ltdWxhdGUgbW91c2UgbW92ZW1lbnQgYW5kIGNsaWNrXG4gICAgICAgICAgICBjYW52YXMuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93Lk1vdXNlRXZlbnQoJ21vdXNlbW92ZScsIHsgY2xpZW50WDogY2VudGVyWCwgY2xpZW50WTogY2VudGVyWSwgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgICAgICAgICBjYW52YXMuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93Lk1vdXNlRXZlbnQoJ21vdXNlZG93bicsIHsgY2xpZW50WDogY2VudGVyWCwgY2xpZW50WTogY2VudGVyWSwgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgICAgICAgICBhd2FpdCBzbGVlcCg1MCk7XG4gICAgICAgICAgICBjYW52YXMuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93Lk1vdXNlRXZlbnQoJ21vdXNldXAnLCB7IGNsaWVudFg6IGNlbnRlclgsIGNsaWVudFk6IGNlbnRlclksIGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTaW11bGF0ZSBzcGFjZSBrZXkgcHJlc3NcbiAgICAgICAgICAgIGNhbnZhcy5kaXNwYXRjaEV2ZW50KG5ldyB3aW5kb3cuS2V5Ym9hcmRFdmVudCgna2V5ZG93bicsIHsga2V5OiAnICcsIGNvZGU6ICdTcGFjZScsIGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICAgICAgYXdhaXQgc2xlZXAoNTApO1xuICAgICAgICAgICAgY2FudmFzLmRpc3BhdGNoRXZlbnQobmV3IHdpbmRvdy5LZXlib2FyZEV2ZW50KCdrZXl1cCcsIHsga2V5OiAnICcsIGNvZGU6ICdTcGFjZScsIGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBzbGVlcCgxMDAwKTtcblxuICAgICAgICAgIC8vIFdhaXQgYSBiaXQgbW9yZSBmb3IgQ0FQVENIQSB0byBwb3RlbnRpYWxseSBhcHBlYXJcbiAgICAgICAgICBsb2coXCJcdUQ4M0NcdURGQUYgV2FpdGluZyBmb3IgQ0FQVENIQSBjaGFsbGVuZ2UuLi5cIik7XG4gICAgICAgICAgYXdhaXQgc2xlZXAoMjAwMCk7XG5cbiAgICAgICAgICAvLyBLZWVwIGNvbmZpcm1pbmcgdW50aWwgdG9rZW4gaXMgY2FwdHVyZWQgb3IgdGltZW91dFxuICAgICAgICAgIGxvZyhcIlx1RDgzQ1x1REZBRiBTdGFydGluZyBjb25maXJtYXRpb24gbG9vcC4uLlwiKTtcbiAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgIGNvbnN0IGNvbmZpcm1Mb29wID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGF0dGVtcHRzID0gMDtcbiAgICAgICAgICAgIHdoaWxlICghaXNUb2tlblZhbGlkKCkgJiYgRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA8IDI1MDAwKSB7IC8vIDI1IHNlY29uZCB0aW1lb3V0IGZvciBjb25maXJtYXRpb25zXG4gICAgICAgICAgICAgIGF0dGVtcHRzKys7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBMb29rIGZvciBjb25maXJtIGJ1dHRvbiB3aXRoIG11bHRpcGxlIHNlbGVjdG9yc1xuICAgICAgICAgICAgICBsZXQgY29uZmlybUJ0biA9IGF3YWl0IHdhaXRGb3JTZWxlY3RvcignYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS5idG4tbGcnLCAxMDAsIDEwMDApO1xuICAgICAgICAgICAgICBpZiAoIWNvbmZpcm1CdG4pIHtcbiAgICAgICAgICAgICAgICBjb25maXJtQnRuID0gYXdhaXQgd2FpdEZvclNlbGVjdG9yKCdidXR0b24uYnRuLmJ0bi1wcmltYXJ5LnNtXFxcXDpidG4teGwnLCAxMDAsIDEwMDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghY29uZmlybUJ0bikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFByaW1hcnkgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbi5idG4tcHJpbWFyeScpKTtcbiAgICAgICAgICAgICAgICBjb25maXJtQnRuID0gYWxsUHJpbWFyeS5sZW5ndGggPyBhbGxQcmltYXJ5W2FsbFByaW1hcnkubGVuZ3RoIC0gMV0gOiBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBpZiAoY29uZmlybUJ0biAmJiAhY29uZmlybUJ0bi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGxvZyhgXHVEODNDXHVERkFGIENsaWNraW5nIGNvbmZpcm1hdGlvbiBidXR0b24gKGF0dGVtcHQgJHthdHRlbXB0c30pLi4uYCk7XG4gICAgICAgICAgICAgICAgY29uZmlybUJ0bi5jbGljaygpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZyhgXHVEODNDXHVERkFGIE5vIGFjdGl2ZSBjb25maXJtIGJ1dHRvbiBmb3VuZCAoYXR0ZW1wdCAke2F0dGVtcHRzfSlgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoODAwKTsgLy8gU2xpZ2h0bHkgbG9uZ2VyIGRlbGF5IGJldHdlZW4gYXR0ZW1wdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gU3RhcnQgY29uZmlybWF0aW9uIGxvb3AgYW5kIHdhaXQgZm9yIHRva2VuXG4gICAgICAgICAgY29uZmlybUxvb3AoKTtcbiAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRva2VuUHJvbWlzZTtcbiAgICAgICAgICBhd2FpdCBzbGVlcCg1MDApOyAvLyBzbWFsbCBkZWxheSBhZnRlciB0b2tlbiBpcyBjYXB0dXJlZFxuICAgICAgICAgIGxvZyhcIlx1MjcwNSBUb2tlbiBzdWNjZXNzZnVsbHkgY2FwdHVyZWQgdGhyb3VnaCBicm93c2VyIGF1dG9tYXRpb25cIik7XG4gICAgICAgICAgcmVzb2x2ZSh0b2tlbik7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5yYWNlKFtzb2x2ZVByb21pc2UsIHRpbWVvdXRQcm9taXNlXSk7XG5cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZyhcIlx1Mjc0QyBBdXRvLUNBUFRDSEEgcHJvY2VzcyBmYWlsZWQ6XCIsIGVycm9yKTtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZXhlY3V0ZUZsb3coKTtcbiAgfSk7XG59XG5cbi8vIFRPS0VOIENBUFRVUkUgU1lTVEVNIChyZXBsaWNhdGVkIGZyb20gZXhhbXBsZSlcbi8vIFRoaXMgbXVzdCBiZSBjYWxsZWQgYnkgdGhlIHNpdGUgd2hlbiB0aGUgdHVybnN0aWxlIHRva2VuIGlzIHJlY2VpdmVkXG53aW5kb3cuX19XUEFfU0VUX1RVUk5TVElMRV9UT0tFTl9fID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgaWYgKHRva2VuICYmIHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycgJiYgdG9rZW4ubGVuZ3RoID4gMjApIHtcbiAgICBsb2coXCJcdTI3MDUgVHVybnN0aWxlIFRva2VuIENhcHR1cmVkOlwiLCB0b2tlbik7XG4gICAgc2V0VHVybnN0aWxlVG9rZW4odG9rZW4pO1xuICB9XG59O1xuXG4vLyBOb3RlOiBGZXRjaCBpbnRlcmNlcHRpb24gaXMgbm93IGhhbmRsZWQgYnkgdG9rZW4taW50ZXJjZXB0b3IuanNcbi8vIFRoaXMgc2VjdGlvbiBpcyBrZXB0IGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eSBidXQgdGhlIGVuaGFuY2VkIGludGVyY2VwdG9yIHRha2VzIHByZWNlZGVuY2VcblxuLy8gTGlzdGVuIGZvciB0b2tlbiBjYXB0dXJlIG1lc3NhZ2VzIChtb3ZlZCBvdXRzaWRlIElJRkUpXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICBjb25zdCBkYXRhID0gZXZlbnQ/LmRhdGE7XG4gICAgaWYgKCFkYXRhKSByZXR1cm47XG5cbiAgICAvLyAxKSBUb2tlbiBjYXB0dXJlIHZpYSBzeW50aGV0aWMgbWVzc2FnZSBmcm9tIG91ciBmZXRjaCBob29rXG4gICAgaWYgKGRhdGEuc291cmNlID09PSAndHVybnN0aWxlLWNhcHR1cmUnICYmIGRhdGEudG9rZW4pIHtcbiAgICAgIGlmICghaXNUb2tlblZhbGlkKCkgfHwgdHVybnN0aWxlVG9rZW4gIT09IGRhdGEudG9rZW4pIHtcbiAgICAgICAgc2V0VHVybnN0aWxlVG9rZW4oZGF0YS50b2tlbik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gMikgRW5oYW5jZWQgdG9rZW4gaW50ZXJjZXB0b3IgbWVzc2FnZXNcbiAgICBpZiAoZGF0YS5fX3dwbGFjZSA9PT0gdHJ1ZSAmJiBkYXRhLnR5cGUgPT09ICd0b2tlbl9mb3VuZCcpIHtcbiAgICAgIGlmIChkYXRhLnRva2VuICYmICghaXNUb2tlblZhbGlkKCkgfHwgdHVybnN0aWxlVG9rZW4gIT09IGRhdGEudG9rZW4pKSB7XG4gICAgICAgIGxvZygnXHUyNzA1IEVuaGFuY2VkIGludGVyY2VwdG9yIGNhcHR1cmVkIHRva2VuOicsIGRhdGEudG9rZW4pO1xuICAgICAgICBzZXRUdXJuc3RpbGVUb2tlbihkYXRhLnRva2VuKTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLnhwYXcgJiYgKCFfcGF3dGVjdFRva2VuIHx8IF9wYXd0ZWN0VG9rZW4gIT09IGRhdGEueHBhdykpIHtcbiAgICAgICAgX3Bhd3RlY3RUb2tlbiA9IGRhdGEueHBhdztcbiAgICAgICAgd2luZG93Ll9fV1BBX1BBV1RFQ1RfVE9LRU5fXyA9IF9wYXd0ZWN0VG9rZW47XG4gICAgICAgIGxvZygnXHVEODNEXHVERUUxXHVGRTBGIEVuaGFuY2VkIGludGVyY2VwdG9yIGNhcHR1cmVkIHgtcGF3dGVjdC10b2tlbicpO1xuICAgICAgICBpZiAoX3Bhd3RlY3RSZXNvbHZlKSB7IF9wYXd0ZWN0UmVzb2x2ZSh7IHBhd3RlY3Q6IF9wYXd0ZWN0VG9rZW4sIGZwOiBfZnAgfSk7IF9wYXd0ZWN0UmVzb2x2ZSA9IG51bGw7IH1cbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmZwICYmICghX2ZwIHx8IF9mcCAhPT0gZGF0YS5mcCkpIHtcbiAgICAgICAgX2ZwID0gZGF0YS5mcDtcbiAgICAgICAgd2luZG93Ll9fV1BBX0ZJTkdFUlBSSU5UX18gPSBfZnA7XG4gICAgICAgIGxvZygnXHVEODNDXHVERDk0IEVuaGFuY2VkIGludGVyY2VwdG9yIGNhcHR1cmVkIGZpbmdlcnByaW50IChmcCknKTtcbiAgICAgICAgaWYgKF9wYXd0ZWN0UmVzb2x2ZSkgeyBfcGF3dGVjdFJlc29sdmUoeyBwYXd0ZWN0OiBfcGF3dGVjdFRva2VuLCBmcDogX2ZwIH0pOyBfcGF3dGVjdFJlc29sdmUgPSBudWxsOyB9XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gMykgRGlyZWN0IGZwIHB1Ymxpc2hlZCBieSBzaXRlIChpZiBhbnkpXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1zZ0ZwID0gKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZGF0YS5mcCA9PT0gJ3N0cmluZycgJiYgZGF0YS5mcC5sZW5ndGggPiAxMCkgPyBkYXRhLmZwIDogbnVsbDtcbiAgICAgIGlmIChtc2dGcCAmJiAoIV9mcCB8fCBfZnAgIT09IG1zZ0ZwKSkge1xuICAgICAgICBfZnAgPSBtc2dGcDtcbiAgICAgICAgd2luZG93Ll9fV1BBX0ZJTkdFUlBSSU5UX18gPSBfZnA7IC8vIENvbXBhcnRpciBnbG9iYWxtZW50ZVxuICAgICAgICBsb2coJ1x1RDgzQ1x1REQ5NCBGaW5nZXJwcmludCAoZnApIGNhcHR1cmVkIHZpYSBwb3N0TWVzc2FnZScpO1xuICAgICAgICBpZiAoX3Bhd3RlY3RSZXNvbHZlKSB7IF9wYXd0ZWN0UmVzb2x2ZSh7IHBhd3RlY3Q6IF9wYXd0ZWN0VG9rZW4sIGZwOiBfZnAgfSk7IF9wYXd0ZWN0UmVzb2x2ZSA9IG51bGw7IH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggeyAvKiBpZ25vcmUgKi8gfVxuXG4gICAgLy8gNCkgSGV1cmlzdGljOiBvYnNlcnZlIGZpbmdlcnByaW50IGluZ3JlZGllbnRzIChwaSkgbGlrZSB4cC9wZnAvZmZwXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBpID0gKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAoZGF0YS5waSB8fCBkYXRhLnBheWxvYWQ/LnBpKSkgPyAoZGF0YS5waSB8fCBkYXRhLnBheWxvYWQucGkpIDogbnVsbDtcbiAgICAgIGlmIChwaSAmJiB0eXBlb2YgcGkgPT09ICdvYmplY3QnICYmIChwaS54cCB8fCBwaS5wZnAgfHwgcGkuZmZwKSkge1xuICAgICAgICBpZiAoIV9mcENhbmRpZGF0ZSkge1xuICAgICAgICAgIC8vIFN0b3JlIHNoYWxsb3cgc25hcHNob3Q7IGRvIG5vdCB1c2UgZm9yIHNlbmRpbmdcbiAgICAgICAgICB0cnkgeyBfZnBDYW5kaWRhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHsgeHA6IHBpLnhwLCBwZnA6IHBpLnBmcCwgZmZwOiBwaS5mZnAgfSkpOyB9XG4gICAgICAgICAgY2F0Y2ggeyBfZnBDYW5kaWRhdGUgPSB7IHhwOiBTdHJpbmcocGkueHAgfHwgJycpLCBwZnA6IFN0cmluZyhwaS5wZnAgfHwgJycpLCBmZnA6IFN0cmluZyhwaS5mZnAgfHwgJycpIH07IH1cbiAgICAgICAgICB3aW5kb3cuX19XUEFfRlBfQ0FORElEQVRFX18gPSBfZnBDYW5kaWRhdGU7IC8vIENvbXBhcnRpciBnbG9iYWxtZW50ZVxuICAgICAgICAgIGxvZygnXHVEODNEXHVEQ0U2IEZpbmdlcnByaW50IGNhbmRpZGF0ZSAocGkpIG9ic2VydmVkIHZpYSBwb3N0TWVzc2FnZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCB7IC8qIGlnbm9yZSAqLyB9XG4gIH0pO1xuXG4vLyBFeHBvcnQgdGhlIGtleSBmdW5jdGlvbnNcbmV4cG9ydCB7IGhhbmRsZUNhcHRjaGEsIGxvYWRUdXJuc3RpbGUsIGV4ZWN1dGVUdXJuc3RpbGUsIGRldGVjdFNpdGVrZXksIGludmFsaWRhdGVUb2tlbiB9O1xuXG4vLyBMZWdhY3kgY29tcGF0aWJpbGl0eSBmdW5jdGlvbiBcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUdXJuc3RpbGVUb2tlbihfc2l0ZUtleSkge1xuICBsb2coXCJcdTI2QTBcdUZFMEYgVXNpbmcgbGVnYWN5IGdldFR1cm5zdGlsZVRva2VuIGZ1bmN0aW9uLCBjb25zaWRlciBtaWdyYXRpbmcgdG8gZW5zdXJlVG9rZW4oKVwiKTtcbiAgcmV0dXJuIGF3YWl0IGVuc3VyZVRva2VuKCk7XG59XG5cbi8vIE5ldyBleHBvcnRzIGZvciBwYXd0ZWN0L2ZpbmdlcnByaW50IC0gc2llbXByZSB1c2FyIHZhbG9yZXMgZ2xvYmFsZXMgbVx1MDBFMXMgYWN0dWFsaXphZG9zXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF3dGVjdFRva2VuKCkgeyBcbiAgX3Bhd3RlY3RUb2tlbiA9IHdpbmRvdy5fX1dQQV9QQVdURUNUX1RPS0VOX18gfHwgX3Bhd3RlY3RUb2tlbjtcbiAgcmV0dXJuIF9wYXd0ZWN0VG9rZW47IFxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbmdlcnByaW50KCkgeyBcbiAgX2ZwID0gd2luZG93Ll9fV1BBX0ZJTkdFUlBSSU5UX18gfHwgX2ZwO1xuICByZXR1cm4gX2ZwOyBcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaW5nZXJwcmludENhbmRpZGF0ZSgpIHsgXG4gIF9mcENhbmRpZGF0ZSA9IHdpbmRvdy5fX1dQQV9GUF9DQU5ESURBVEVfXyB8fCBfZnBDYW5kaWRhdGU7XG4gIHJldHVybiBfZnBDYW5kaWRhdGU7IFxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JQYXd0ZWN0KHRpbWVvdXQgPSA1MDAwKSB7XG4gIGlmIChfcGF3dGVjdFRva2VuICYmIF9mcCkgcmV0dXJuIHsgcGF3dGVjdDogX3Bhd3RlY3RUb2tlbiwgZnA6IF9mcCB9O1xuICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4geyBpZiAoX3Bhd3RlY3RSZXNvbHZlKSB7IF9wYXd0ZWN0UmVzb2x2ZSh7IHBhd3RlY3Q6IF9wYXd0ZWN0VG9rZW4sIGZwOiBfZnAgfSk7IF9wYXd0ZWN0UmVzb2x2ZSA9IG51bGw7IH0gfSwgdGltZW91dCk7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IF9wYXd0ZWN0UHJvbWlzZS5jYXRjaCgoKSA9PiAoeyBwYXd0ZWN0OiBfcGF3dGVjdFRva2VuLCBmcDogX2ZwIH0pKTtcbiAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgLy8gUHJlcGFyZSBhIG5ldyBwcm9taXNlIGZvciBmdXR1cmUgd2FpdHNcbiAgaWYgKCFfcGF3dGVjdFJlc29sdmUpIHsgX3Bhd3RlY3RQcm9taXNlID0gbmV3IFByb21pc2UoKHJlcykgPT4geyBfcGF3dGVjdFJlc29sdmUgPSByZXM7IH0pOyB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIEludGVyY2VwdG9yIGVsaW1pbmFkbzogZmx1am8gcGFzaXZvL2Rpblx1MDBFMW1pY28gc2luIGhvb2tpbmcgZXhwbFx1MDBFRGNpdG8iLCAiLy8gRmluZ2VycHJpbnQgZ2VuZXJhdGlvbiAoaGV1cmlzdGljLCBkZXRlcm1pbmlzdGljLCBwcml2YWN5LWF3YXJlKVxuLy8gSW50ZW50YSBlbXVsYXIgZW5mb3F1ZSB0XHUwMEVEcGljbzogY29tYmluYWNpXHUwMEYzbiBkZSBVQSwgaGFyZHdhcmUsIGNhbnZhcywgd2ViZ2wsIHBhbnRhbGxhIHkgem9uYSBob3JhcmlhLlxuLy8gUHJvZHVjZSBoYXNoIFNIQS0yNTYgaGV4IChmYWxsYmFjayBGTlYtMWEpIHkgZXhwb25lIGVuc3VyZUZpbmdlcnByaW50KCkuXG5cbmltcG9ydCB7IGxvZyB9IGZyb20gJy4vbG9nZ2VyLmpzJztcblxubGV0IF9mcCA9IG51bGw7XG5sZXQgX2luRmxpZ2h0ID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0Q2FudmFzRmluZ2VycHJpbnQoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNvbnN0IGN0eCA9IGMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoIWN0eCkgcmV0dXJuICdub2NhbnZhcyc7XG4gICAgYy53aWR0aCA9IDIwMDsgYy5oZWlnaHQgPSA0MDtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgY3R4LmZvbnQgPSAnMTRweCBcIkFyaWFsXCInO1xuICAgIGN0eC5maWxsU3R5bGUgPSAnI2Y2MCc7XG4gICAgY3R4LmZpbGxSZWN0KDAsMCwyMDAsNDApO1xuICAgIGN0eC5maWxsU3R5bGUgPSAnIzA2OSc7XG4gICAgY3R4LmZpbGxUZXh0KCd3cGxhY2UtZnAtY2FudmFzJywgMiwgMik7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gJyNmZjAnO1xuICAgIGN0eC5iZWdpblBhdGgoKTsgY3R4LmFyYygxMDAsMjAsMTgsMCxNYXRoLlBJKjIpOyBjdHguc3Ryb2tlKCk7XG4gICAgY29uc3QgZGF0YSA9IGMudG9EYXRhVVJMKCk7XG4gICAgcmV0dXJuIGRhdGEuc2xpY2UoMCw2NCk7XG4gIH0gY2F0Y2ggeyByZXR1cm4gJ25vY2FudmFzJzsgfVxufVxuXG5mdW5jdGlvbiBnZXRXZWJHTEluZm8oKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNvbnN0IGdsID0gYy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8IGMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJyk7XG4gICAgaWYgKCFnbCkgcmV0dXJuICdub3dlYmdsJztcbiAgICBjb25zdCBkYmcgPSBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RlYnVnX3JlbmRlcmVyX2luZm8nKTtcbiAgICBjb25zdCB2ZW5kb3IgPSBkYmcgPyBnbC5nZXRQYXJhbWV0ZXIoZGJnLlVOTUFTS0VEX1ZFTkRPUl9XRUJHTCkgOiBnbC5nZXRQYXJhbWV0ZXIoZ2wuVkVORE9SKTtcbiAgICBjb25zdCByZW5kZXJlciA9IGRiZyA/IGdsLmdldFBhcmFtZXRlcihkYmcuVU5NQVNLRURfUkVOREVSRVJfV0VCR0wpIDogZ2wuZ2V0UGFyYW1ldGVyKGdsLlJFTkRFUkVSKTtcbiAgICByZXR1cm4gdmVuZG9yICsgJ3wnICsgcmVuZGVyZXI7XG4gIH0gY2F0Y2ggeyByZXR1cm4gJ25vd2ViZ2wnOyB9XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUhhc2goc3RyKSB7IC8vIDMyLWJpdCBGTlYtMWFcbiAgbGV0IGggPSAweDgxMWM5ZGM1O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaCA9IChoICsgKChoIDw8IDEpICsgKGggPDwgNCkgKyAoaCA8PCA3KSArIChoIDw8IDgpICsgKGggPDwgMjQpKSkgPj4+IDA7IC8vIGggKiAxNjc3NzYxOVxuICB9XG4gIHJldHVybiAoJzAwMDAwMDAwJyArIGgudG9TdHJpbmcoMTYpKS5zbGljZSgtOCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNoYTI1NkhleChkYXRhKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3J5cHRvPy5zdWJ0bGUpIHtcbiAgICB0cnkge1xuICBjb25zdCBURW5jID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5UZXh0RW5jb2RlcikgPyB3aW5kb3cuVGV4dEVuY29kZXIgOiBudWxsO1xuICBjb25zdCBlbmMgPSBURW5jID8gbmV3IFRFbmMoKS5lbmNvZGUoZGF0YSkgOiBuZXcgVWludDhBcnJheShbLi4udW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGRhdGEpKV0ubWFwKGM9PmMuY2hhckNvZGVBdCgwKSkpO1xuICAgICAgY29uc3QgZGlnZXN0ID0gYXdhaXQgd2luZG93LmNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgZW5jKTtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGRpZ2VzdCkpLm1hcChiPT5iLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCcwJykpLmpvaW4oJycpO1xuICAgIH0gY2F0Y2gge31cbiAgfVxuICByZXR1cm4gc2ltcGxlSGFzaChkYXRhKTtcbn1cblxuZnVuY3Rpb24gY29sbGVjdFJhdygpIHtcbiAgY29uc3QgbmF2ID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpID8gd2luZG93Lm5hdmlnYXRvciA6IHt9O1xuICBjb25zdCBzY3IgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnNjcmVlbikgPyB3aW5kb3cuc2NyZWVuIDoge307XG4gIGNvbnN0IHR6ID0gKHR5cGVvZiBJbnRsICE9PSAndW5kZWZpbmVkJyAmJiBJbnRsLkRhdGVUaW1lRm9ybWF0KSA/IChJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmUgfHwgJycpIDogJyc7XG4gIGNvbnN0IHByb3BzID0ge1xuICAgIHVhOiBuYXYudXNlckFnZW50IHx8ICcnLFxuICAgIHBsYXQ6IG5hdi5wbGF0Zm9ybSB8fCAnJyxcbiAgICBsYW5nOiAobmF2Lmxhbmd1YWdlc3x8W10pLmpvaW4oJywnKSB8fCBuYXYubGFuZ3VhZ2UgfHwgJycsXG4gICAgY29yZXM6IG5hdi5oYXJkd2FyZUNvbmN1cnJlbmN5IHx8IDAsXG4gICAgbWVtOiBuYXYuZGV2aWNlTWVtb3J5IHx8IDAsXG4gICAgd2lkdGg6IHNjci53aWR0aCB8fCAwLFxuICAgIGhlaWdodDogc2NyLmhlaWdodCB8fCAwLFxuICAgIGRlcHRoOiBzY3IuY29sb3JEZXB0aCB8fCAwLFxuICAgIHR6LFxuICAgIGNhbnZhczogZ2V0Q2FudmFzRmluZ2VycHJpbnQoKSxcbiAgICB3ZWJnbDogZ2V0V2ViR0xJbmZvKCksXG4gIH07XG4gIHJldHVybiBwcm9wcztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuc3VyZUZpbmdlcnByaW50KHsgZm9yY2UgPSBmYWxzZSB9ID0ge30pIHtcbiAgaWYgKF9mcCAmJiAhZm9yY2UpIHJldHVybiBfZnA7XG4gIGlmIChfaW5GbGlnaHQpIHJldHVybiBfaW5GbGlnaHQ7XG4gIF9pbkZsaWdodCA9IChhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJhdyA9IGNvbGxlY3RSYXcoKTtcbiAgICAgIGNvbnN0IHN0YWJsZSA9IE9iamVjdC5rZXlzKHJhdykuc29ydCgpLm1hcChrPT5rKyc6JytyYXdba10pLmpvaW4oJ3wnKTtcbiAgICAgIGNvbnN0IGhhc2ggPSBhd2FpdCBzaGEyNTZIZXgoc3RhYmxlKTtcbiAgICAgIF9mcCA9ICdmcDonICsgaGFzaC5zbGljZSgwLDY0KTsgLy8gbGltaXRhclxuICAgICAgdHJ5IHsgd2luZG93Ll9fV1BBX0ZJTkdFUlBSSU5UX18gPSBfZnA7IH0gY2F0Y2gge31cbiAgICAgIGxvZygnW2ZwXSBnZW5lcmFkbyBsZW49JyArIF9mcC5sZW5ndGgpO1xuICAgICAgcmV0dXJuIF9mcDtcbiAgICB9IGZpbmFsbHkgeyBfaW5GbGlnaHQgPSBudWxsOyB9XG4gIH0pKCk7XG4gIHJldHVybiBfaW5GbGlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbEZpbmdlcnByaW50KCkgeyByZXR1cm4gX2ZwIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5fX1dQQV9GSU5HRVJQUklOVF9fIDogbnVsbCk7IH1cbiIsICIvLyBEeW5hbWljIHBhd3RlY3QgY29tcHV0YXRpb24gKHN0dWJiZWQgc2ltaWxhciB0byB3cGxhY2VyIGFwcHJvYWNoKVxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xuXG5sZXQgX3dhc21Nb2QgPSBudWxsO1xubGV0IF93YXNtID0gbnVsbDtcbmxldCBfY2h1bmtVcmwgPSBudWxsO1xubGV0IF9pbml0VXNlciA9IGZhbHNlO1xubGV0IF9idXN5ID0gZmFsc2U7XG5jb25zdCBfY2FjaGUgPSBuZXcgTWFwKCk7IC8vIGtleSAtPiB7IHRva2VuLCB0cyB9XG5jb25zdCBDQUNIRV9UVEwgPSAxMjAwMDA7IC8vIDIgbWluXG5cbmZ1bmN0aW9uIHN0YWJsZUpzb24ob2JqKXtcbiAgdHJ5IHsgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7IH0gY2F0Y2ggeyByZXR1cm4gJyc7IH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZGlzY292ZXJDaHVuaygpIHtcbiAgaWYgKF9jaHVua1VybCkgcmV0dXJuIF9jaHVua1VybDtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgdXJscyA9IG5ldyBTZXQoKTtcbiAgdHJ5IHsgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0W3NyY10nKT8uZm9yRWFjaChzPT57IHRyeSB7IGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVVJMICYmIHdpbmRvdy5sb2NhdGlvbikgdXJscy5hZGQobmV3IHdpbmRvdy5VUkwocy5zcmMsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5ocmVmKTsgfSBjYXRjaCB7fSB9KTsgfSBjYXRjaCB7fVxuICB0cnkgeyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rW3JlbD1cIm1vZHVsZXByZWxvYWRcIl1baHJlZl0sbGlua1thcz1cInNjcmlwdFwiXVtocmVmXScpPy5mb3JFYWNoKGw9PnsgdHJ5IHsgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5VUkwgJiYgd2luZG93LmxvY2F0aW9uKSB1cmxzLmFkZChuZXcgd2luZG93LlVSTChsLmhyZWYsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5ocmVmKTsgfSBjYXRjaCB7fSB9KTsgfSBjYXRjaCB7fVxuICB0cnkgeyBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBlcmZvcm1hbmNlKSAod2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUoJ3Jlc291cmNlJyl8fFtdKS5mb3JFYWNoKGU9PnsgaWYgKGU/Lm5hbWUpIHVybHMuYWRkKGUubmFtZSk7IH0pOyB9IGNhdGNoe31cbiAgICBjb25zdCBjYW5kaWRhdGVzID0gWy4uLnVybHNdLmZpbHRlcih1PT4vXFwvKF9hcHB8YXNzZXRzKVxcL2ltbXV0YWJsZVxcL2NodW5rc1xcLy4qXFwuanMvaS50ZXN0KHUpKTtcbiAgICBmb3IgKGNvbnN0IHNyYyBvZiBjYW5kaWRhdGVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0eHQgPSBhd2FpdCBmZXRjaChzcmMsIHsgY3JlZGVudGlhbHM6J29taXQnIH0pLnRoZW4ocj0+ci50ZXh0KCkpO1xuICAgICAgICBpZiAoL2dldF9wYXd0ZWN0ZWRfZW5kcG9pbnRfcGF5bG9hZHxwYXd0ZWN0L2kudGVzdCh0eHQpKSB7XG4gICAgICAgICAgX2NodW5rVXJsID0gc3JjOyBsb2coJ1twYXd0ZWN0XSBjaHVuayBlbmNvbnRyYWRvJywgc3JjKTsgcmV0dXJuIHNyYztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaHt9XG4gICAgfVxuICB9IGNhdGNoe31cbiAgcmV0dXJuIG51bGw7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRXYXNtKCkge1xuICBpZiAoX3dhc20pIHJldHVybiBfd2FzbTtcbiAgY29uc3QgdXJsID0gYXdhaXQgZGlzY292ZXJDaHVuaygpO1xuICBpZiAoIXVybCkgeyBsb2coJ1twYXd0ZWN0XSBubyBzZSBlbmNvbnRyXHUwMEYzIGNodW5rJyk7IHJldHVybiBudWxsOyB9XG4gIHRyeSB7XG4gICAgX3dhc21Nb2QgPSBhd2FpdCBpbXBvcnQoLyogQHZpdGUtaWdub3JlICovIHVybCk7XG4gICAgaWYgKHR5cGVvZiBfd2FzbU1vZC5fID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBfd2FzbSA9IGF3YWl0IF93YXNtTW9kLl8oKTtcbiAgICAgIGxvZygnW3Bhd3RlY3RdIHdhc20gY2FyZ2FkbycpO1xuICAgIH1cbiAgfSBjYXRjaChlKXsgbG9nKCdbcGF3dGVjdF0gZXJyb3IgaW1wb3J0IHdhc20nLCBlLm1lc3NhZ2UpOyB9XG4gIHJldHVybiBfd2FzbTtcbn1cblxuZnVuY3Rpb24gbWF5YmVJbml0VXNlcihtZSl7XG4gIGlmICghX3dhc21Nb2QgfHwgX2luaXRVc2VyKSByZXR1cm47XG4gIHRyeSB7XG4gICAgaWYgKG1lPy5pZCAmJiB0eXBlb2YgX3dhc21Nb2QuaSA9PT0gJ2Z1bmN0aW9uJykgeyBfd2FzbU1vZC5pKG1lLmlkKTsgX2luaXRVc2VyID0gdHJ1ZTsgfVxuICB9IGNhdGNoe31cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXB1dGVQYXd0ZWN0KGJvZHlPYmosIHsgZm9yY2UgPSBmYWxzZSB9ID0ge30pIHtcbiAgY29uc3QgYm9keVN0ciA9IHN0YWJsZUpzb24oYm9keU9iaik7XG4gIGNvbnN0IGtleSA9IGJvZHlTdHI7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGlmICghZm9yY2UgJiYgX2NhY2hlLmhhcyhrZXkpKSB7XG4gICAgY29uc3QgYyA9IF9jYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAobm93IC0gYy50cyA8IENBQ0hFX1RUTCkgcmV0dXJuIGMudG9rZW47XG4gIH1cbiAgaWYgKF9idXN5KSB7IC8vIHNpbXBsZSBkZS1kdXBlXG4gICAgYXdhaXQgbmV3IFByb21pc2Uocj0+c2V0VGltZW91dChyLCAxNTApKTtcbiAgICBpZiAoIWZvcmNlICYmIF9jYWNoZS5oYXMoa2V5KSkgcmV0dXJuIF9jYWNoZS5nZXQoa2V5KS50b2tlbjtcbiAgfVxuICBfYnVzeSA9IHRydWU7XG4gIHRyeSB7XG4gICAgY29uc3Qgd2FzbSA9IGF3YWl0IGxvYWRXYXNtKCk7XG4gICAgaWYgKCF3YXNtIHx8IHR5cGVvZiB3YXNtLmdldF9wYXd0ZWN0ZWRfZW5kcG9pbnRfcGF5bG9hZCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gICAgLy8gSW50ZW50YXIgaW5pY2lhbGl6YXIgdXNlciBjb24gdW4gL21lIHJcdTAwRTFwaWRvIChiZXN0IGVmZm9ydCB1bmEgdmV6KVxuICAgIGlmICghX2luaXRVc2VyKSB7XG4gICAgICB0cnkgeyBjb25zdCBtZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2JhY2tlbmQud3BsYWNlLmxpdmUvbWUnLHsgY3JlZGVudGlhbHM6J2luY2x1ZGUnfSkudGhlbihyPT5yLm9rP3IuanNvbigpOm51bGwpOyBtYXliZUluaXRVc2VyKG1lKTsgfSBjYXRjaHt9XG4gICAgfVxuICBjb25zdCBlbmMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlRleHRFbmNvZGVyKSA/IG5ldyB3aW5kb3cuVGV4dEVuY29kZXIoKSA6IHsgZW5jb2RlOiAodCk9PiBuZXcgVWludDhBcnJheShbLi4udW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHQpKV0ubWFwKGM9PmMuY2hhckNvZGVBdCgwKSkpIH07XG4gIGNvbnN0IGRlYyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVGV4dERlY29kZXIpID8gbmV3IHdpbmRvdy5UZXh0RGVjb2RlcigpIDogeyBkZWNvZGU6IChiKT0+IGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoU3RyaW5nLmZyb21DaGFyQ29kZSguLi5iKSkpIH07XG4gICAgY29uc3QgYnl0ZXMgPSBlbmMuZW5jb2RlKGJvZHlTdHIpO1xuICAgIGxldCBwdHI7XG4gICAgdHJ5IHtcbiAgICAgIHB0ciA9IHdhc20uX193YmluZGdlbl9tYWxsb2MoYnl0ZXMubGVuZ3RoLCAxKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlciwgcHRyLCBieXRlcy5sZW5ndGgpLnNldChieXRlcyk7XG4gICAgfSBjYXRjaHt9XG4gICAgbGV0IG91dDtcbiAgICB0cnkgeyBvdXQgPSB3YXNtLmdldF9wYXd0ZWN0ZWRfZW5kcG9pbnRfcGF5bG9hZChwdHIsIGJ5dGVzLmxlbmd0aCk7IH0gY2F0Y2goZSl7IGxvZygnW3Bhd3RlY3RdIGZhbGxvIGdldF9wYXd0ZWN0ZWQuLi4nLCBlLm1lc3NhZ2UpOyByZXR1cm4gbnVsbDsgfVxuICAgIGxldCB0b2tlbiA9IG51bGw7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3V0KSkge1xuICAgICAgY29uc3QgW29wLCBvbF0gPSBvdXQ7XG4gICAgICB0b2tlbiA9IGRlYy5kZWNvZGUobmV3IFVpbnQ4QXJyYXkod2FzbS5tZW1vcnkuYnVmZmVyLCBvcCwgb2wpKTtcbiAgICAgIHRyeSB7IHdhc20uX193YmluZGdlbl9mcmVlKG9wLCBvbCwgMSk7IH0gY2F0Y2h7fVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG91dCA9PT0gJ3N0cmluZycpIHsgdG9rZW4gPSBvdXQ7IH1cbiAgICBlbHNlIGlmIChvdXQgJiYgdHlwZW9mIG91dC5wdHIgPT09ICdudW1iZXInICYmIHR5cGVvZiBvdXQubGVuID09PSAnbnVtYmVyJykge1xuICAgICAgdG9rZW4gPSBkZWMuZGVjb2RlKG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlciwgb3V0LnB0ciwgb3V0LmxlbikpO1xuICAgICAgdHJ5IHsgd2FzbS5fX3diaW5kZ2VuX2ZyZWUob3V0LnB0ciwgb3V0LmxlbiwgMSk7IH0gY2F0Y2h7fVxuICAgIH1cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIF9jYWNoZS5zZXQoa2V5LCB7IHRva2VuLCB0czogbm93IH0pO1xuICAgICAgdHJ5IHsgd2luZG93Ll9fV1BBX1BBV1RFQ1RfVE9LRU5fXyA9IHRva2VuOyB9IGNhdGNoe31cbiAgICAgIGxvZygnW3Bhd3RlY3RdIHRva2VuIGNhbGN1bGFkbyBsZW49JyArIHRva2VuLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbjtcbiAgfSBmaW5hbGx5IHsgX2J1c3kgPSBmYWxzZTsgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VlZFBhd3RlY3QoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgY29tcHV0ZVBhd3RlY3QoeyBjb2xvcnM6WzBdLCBjb29yZHM6WzEsMV0sIHQ6J3NlZWQnLCBmcDonc2VlZCcgfSwgeyBmb3JjZTp0cnVlIH0pO1xuICB9IGNhdGNoe31cbn1cbiIsICIvLyBVdGlsaWRhZGVzIGRlIHBhcnNlbyBzZWd1cm8gcGFyYSByZXNwdWVzdGFzIGZldGNoXG4vLyBFdml0YSBtXHUwMEZBbHRpcGxlcyBsZWN0dXJhcyB5IGNlbnRyYWxpemEgbWFuZWpvIGRlIGVycm9yZXNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYWZlUGFyc2VSZXNwb25zZShyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlKSByZXR1cm4geyBvazogZmFsc2UsIHN0YXR1czogMCwganNvbjoge30sIHRleHQ6ICcnLCBwYXJzZUVycm9yOiAnbm8tcmVzcG9uc2UnIH07XG4gIGNvbnN0IHN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgbGV0IHRleHQgPSAnJztcbiAgdHJ5IHsgdGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTsgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IG9rOiByZXNwb25zZS5vaywgc3RhdHVzLCBqc29uOiB7fSwgdGV4dDogJycsIHBhcnNlRXJyb3I6IGUubWVzc2FnZSB9O1xuICB9XG4gIGlmICghdGV4dCkgcmV0dXJuIHsgb2s6IHJlc3BvbnNlLm9rLCBzdGF0dXMsIGpzb246IHt9LCB0ZXh0OiAnJyB9O1xuICB0cnkge1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHRleHQpO1xuICAgIHJldHVybiB7IG9rOiByZXNwb25zZS5vaywgc3RhdHVzLCBqc29uLCB0ZXh0IH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBvazogcmVzcG9uc2Uub2ssIHN0YXR1cywganNvbjoge30sIHRleHQsIHBhcnNlRXJyb3I6IGUubWVzc2FnZSB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYWZlUGFyc2VKc29uU3RyaW5nKHN0cikge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgIXN0cikgcmV0dXJuIG51bGw7XG4gIHRyeSB7IHJldHVybiBKU09OLnBhcnNlKHN0cik7IH0gY2F0Y2ggeyByZXR1cm4gbnVsbDsgfVxufVxuIiwgImltcG9ydCB7IGZldGNoV2l0aFRpbWVvdXQgfSBmcm9tIFwiLi9odHRwLmpzXCI7XG5pbXBvcnQgeyBlbnN1cmVUb2tlbiwgaW52YWxpZGF0ZVRva2VuLCBnZXRQYXd0ZWN0VG9rZW4sIGdldEZpbmdlcnByaW50LCB3YWl0Rm9yUGF3dGVjdCB9IGZyb20gXCIuL3R1cm5zdGlsZS5qc1wiO1xuaW1wb3J0IHsgZW5zdXJlRmluZ2VycHJpbnQgfSBmcm9tICcuL2ZpbmdlcnByaW50LmpzJztcbmltcG9ydCB7IGNvbXB1dGVQYXd0ZWN0IH0gZnJvbSAnLi9wYXd0ZWN0LmpzJztcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL2xvZ2dlci5qc1wiO1xuaW1wb3J0IHsgc2FmZVBhcnNlUmVzcG9uc2UgfSBmcm9tICcuL2pzb24uanMnO1xuLy8gcGl4ZWwtY2xpZW50IGVsaW1pbmFkbzogdXNhbW9zIGRpcmVjdGFtZW50ZSBwb3N0UGl4ZWxCYXRjaEltYWdlL3Bvc3RQaXhlbFxuXG5jb25zdCBCQVNFID0gXCJodHRwczovL2JhY2tlbmQud3BsYWNlLmxpdmVcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNlc3Npb24oKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgbWUgPSBhd2FpdCBmZXRjaChgJHtCQVNFfS9tZWAsIHsgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyB9KS50aGVuKHIgPT4gci5qc29uKCkpO1xuICAgIGNvbnN0IHVzZXIgPSBtZSB8fCBudWxsO1xuICAgIGNvbnN0IGMgPSBtZT8uY2hhcmdlcyB8fCB7fTtcbiAgY29uc3QgZHJvcGxldHMgPSBtZT8uZHJvcGxldHMgPz8gMDtcbiAgICBjb25zdCBjaGFyZ2VzID0ge1xuICAgICAgY291bnQ6IGMuY291bnQgPz8gMCwgICAgICAgIC8vIE1hbnRlbmVyIHZhbG9yIGRlY2ltYWwgb3JpZ2luYWxcbiAgICAgIG1heDogYy5tYXggPz8gMCwgICAgICAgICAgICAvLyBNYW50ZW5lciB2YWxvciBvcmlnaW5hbCAocHVlZGUgdmFyaWFyIHBvciB1c3VhcmlvKVxuICAgICAgY29vbGRvd25NczogYy5jb29sZG93bk1zID8/IDMwMDAwXG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4geyBcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHVzZXIsIFxuICAgICAgICBjaGFyZ2VzOiBjaGFyZ2VzLmNvdW50LFxuICAgICAgICBtYXhDaGFyZ2VzOiBjaGFyZ2VzLm1heCxcbiAgICBjaGFyZ2VSZWdlbjogY2hhcmdlcy5jb29sZG93bk1zLFxuICAgIGRyb3BsZXRzXG4gICAgICB9XG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgXG4gICAgcmV0dXJuIHsgXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgZGF0YToge1xuICAgICAgICB1c2VyOiBudWxsLCBcbiAgICAgICAgY2hhcmdlczogMCxcbiAgICBtYXhDaGFyZ2VzOiAwLFxuICAgIGNoYXJnZVJlZ2VuOiAzMDAwMCxcbiAgICBkcm9wbGV0czogMFxuICAgICAgfVxuICAgIH07IFxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0hlYWx0aCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0V9L2hlYWx0aGAsIHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnXG4gICAgfSk7XG4gICAgXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBoZWFsdGggPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5oZWFsdGgsXG4gICAgICAgIGxhc3RDaGVjazogRGF0ZS5ub3coKSxcbiAgICAgICAgc3RhdHVzOiAnb25saW5lJ1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YWJhc2U6IGZhbHNlLFxuICAgICAgICB1cDogZmFsc2UsXG4gICAgICAgIHVwdGltZTogJ04vQScsXG4gICAgICAgIGxhc3RDaGVjazogRGF0ZS5ub3coKSxcbiAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXNcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBkYXRhYmFzZTogZmFsc2UsXG4gICAgICB1cDogZmFsc2UsXG4gICAgICB1cHRpbWU6ICdOL0EnLFxuICAgICAgbGFzdENoZWNrOiBEYXRlLm5vdygpLFxuICAgICAgc3RhdHVzOiAnb2ZmbGluZScsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgIH07XG4gIH1cbn1cblxuLy8gQ29tcHJhIGRlIHByb2R1Y3RvIChlai4gYXVtZW50YXIgY2FyZ2FzIG1cdTAwRTF4aW1hcyBlbiArNSlcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXJjaGFzZVByb2R1Y3QocHJvZHVjdElkID0gNzAsIGFtb3VudCA9IDEpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBwcm9kdWN0OiB7IGlkOiBwcm9kdWN0SWQsIGFtb3VudCB9IH0pO1xuICAgIGNvbnN0IHIgPSBhd2FpdCBmZXRjaFdpdGhUaW1lb3V0KGAke0JBU0V9L3B1cmNoYXNlYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JyB9LFxuICAgICAgYm9keSxcbiAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICB0aW1lb3V0OiAxNTAwMFxuICAgIH0pO1xuICAgIGxldCBqc29uID0ge307XG4gICAgdHJ5IHsganNvbiA9IGF3YWl0IHIuanNvbigpOyB9IGNhdGNoIHsganNvbiA9IHt9OyB9XG4gICAgcmV0dXJuIHsgc3VjY2Vzczogci5vaywgc3RhdHVzOiByLnN0YXR1cywganNvbiB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBzdGF0dXM6IDAsIGpzb246IHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSB9O1xuICB9XG59XG5cbi8vIHBvc3RQaXhlbEJhdGNoIC8gcG9zdFBpeGVsQmF0Y2hTYWZlIGVsaW1pbmFkb3NcblxuLy8gUG9zdCBwXHUwMEVEeGVsIHBhcmEgZmFybSAocmVwbGljYWRvIGRlbCBlamVtcGxvIGNvbiBtYW5lam8gZGUgNDAzKVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBvc3RQaXhlbChjb29yZHMsIGNvbG9ycywgdHVybnN0aWxlVG9rZW4sIHRpbGVYLCB0aWxlWSkge1xuICB0cnkge1xuICAgIC8vIE5vcm1hbGl6YXIgZm9ybWF0b3MgZGUgZW50cmFkYSAoY29vcmRzIHB1ZWRlIGxsZWdhciBjb21vIFt7eCx5fV0gfCBbW3gseV1dIHwgW3gseSwuLi5dKVxuICAgIGNvbnN0IG5vcm1hbGl6ZUNvb3JkcyA9IChhcnIpID0+IHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gW107XG4gICAgICBjb25zdCBmbGF0ID0gW107XG4gICAgICAvLyBDYXNvIDE6IGFycmF5IHBsYW5vIGRlIG5cdTAwRkFtZXJvc1xuICAgICAgaWYgKGFyci5sZW5ndGggPiAwICYmIHR5cGVvZiBhcnJbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgY29uc3QgeCA9IE1hdGgudHJ1bmMoYXJyW2ldKTtcbiAgICAgICAgICBjb25zdCB5ID0gTWF0aC50cnVuYyhhcnJbaSArIDFdKTtcbiAgICAgICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHgpICYmIE51bWJlci5pc0Zpbml0ZSh5KSkge1xuICAgICAgICAgICAgZmxhdC5wdXNoKCgoeCAlIDEwMDApICsgMTAwMCkgJSAxMDAwLCAoKHkgJSAxMDAwKSArIDEwMDApICUgMTAwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGF0O1xuICAgICAgfVxuICAgICAgLy8gQ2FzbyAyOiBhcnJheSBkZSBvYmpldG9zIHt4LHl9XG4gICAgICBpZiAodHlwZW9mIGFyclswXSA9PT0gJ29iamVjdCcgJiYgYXJyWzBdICYmICgneCcgaW4gYXJyWzBdIHx8ICd5JyBpbiBhcnJbMF0pKSB7XG4gICAgICAgIGZvciAoY29uc3QgcCBvZiBhcnIpIHtcbiAgICAgICAgICBjb25zdCB4ID0gTWF0aC50cnVuYyhwPy54KTtcbiAgICAgICAgICBjb25zdCB5ID0gTWF0aC50cnVuYyhwPy55KTtcbiAgICAgICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHgpICYmIE51bWJlci5pc0Zpbml0ZSh5KSkge1xuICAgICAgICAgICAgZmxhdC5wdXNoKCgoeCAlIDEwMDApICsgMTAwMCkgJSAxMDAwLCAoKHkgJSAxMDAwKSArIDEwMDApICUgMTAwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGF0O1xuICAgICAgfVxuICAgICAgLy8gQ2FzbyAzOiBhcnJheSBkZSBhcnJheXMgW3gseV1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyclswXSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBwIG9mIGFycikge1xuICAgICAgICAgIGNvbnN0IHggPSBNYXRoLnRydW5jKHA/LlswXSk7XG4gICAgICAgICAgY29uc3QgeSA9IE1hdGgudHJ1bmMocD8uWzFdKTtcbiAgICAgICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHgpICYmIE51bWJlci5pc0Zpbml0ZSh5KSkge1xuICAgICAgICAgICAgZmxhdC5wdXNoKCgoeCAlIDEwMDApICsgMTAwMCkgJSAxMDAwLCAoKHkgJSAxMDAwKSArIDEwMDApICUgMTAwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGF0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZsYXQ7XG4gICAgfTtcbiAgICBjb25zdCBub3JtYWxpemVDb2xvcnMgPSAoY29scykgPT4gQXJyYXkuaXNBcnJheShjb2xzKSA/IGNvbHMubWFwKGMgPT4gTWF0aC50cnVuYyhOdW1iZXIoYykpIHx8IDApIDogW107XG5cbiAgICBjb25zdCBjb29yZHNOb3JtID0gbm9ybWFsaXplQ29vcmRzKGNvb3Jkcyk7XG4gICAgY29uc3QgY29sb3JzTm9ybSA9IG5vcm1hbGl6ZUNvbG9ycyhjb2xvcnMpO1xuICAgIGlmIChjb29yZHNOb3JtLmxlbmd0aCA9PT0gMCB8fCBjb2xvcnNOb3JtLmxlbmd0aCA9PT0gMCB8fCAoY29vcmRzTm9ybS5sZW5ndGggLyAyKSAhPT0gY29sb3JzTm9ybS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7IHN0YXR1czogNDAwLCBqc29uOiB7IGVycm9yOiAnSW52YWxpZCBjb29yZHMvY29sb3JzIGZvcm1hdCcgfSwgc3VjY2VzczogZmFsc2UgfTtcbiAgICB9XG4gICAgXG4gICAgLy8gSW50ZW50byBkZSBjXHUwMEUxbGN1bG8gZGluXHUwMEUxbWljbyBkZSBwYXd0ZWN0IGFudGVzIGRlIGVzcGVyYXJcbiAgLy8gRmluZ2VycHJpbnQgcHJvYWN0aXZvIHNpIGZhbHRhXG4gIGxldCBmcCA9IGdldEZpbmdlcnByaW50KCk7XG4gIGlmICghZnApIHsgdHJ5IHsgZnAgPSBhd2FpdCBlbnN1cmVGaW5nZXJwcmludCh7fSk7IH0gY2F0Y2gge30gfVxuICBsZXQgcGF3dGVjdCA9IGdldFBhd3RlY3RUb2tlbigpO1xuICAgIGlmICghcGF3dGVjdCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVXNhciBkYXRvcyBub3JtYWxpemFkb3MgcGFyYSBldml0YXIgZGVzYWp1c3RlcyBjb24gZWwgY3VlcnBvIHJlYWxcbiAgICAgICAgY29uc3QgZHluID0gYXdhaXQgY29tcHV0ZVBhd3RlY3QoeyBjb2xvcnM6IGNvbG9yc05vcm0sIGNvb3JkczogY29vcmRzTm9ybSwgdDogdHVybnN0aWxlVG9rZW4sIC4uLihmcCA/IHsgZnAgfSA6IHt9KSB9KTtcbiAgICAgICAgaWYgKGR5bikgcGF3dGVjdCA9IGR5bjtcbiAgICAgIH0gY2F0Y2gge31cbiAgICB9XG4gICAgaWYgKCFmcCB8fCAhcGF3dGVjdCkge1xuICAgICAgdHJ5IHsgYXdhaXQgd2FpdEZvclBhd3RlY3QoMTUwMCk7IH0gY2F0Y2gge31cbiAgICAgIC8vIFJlbGVlclxuICAgICAgaWYgKCFwYXd0ZWN0KSBwYXd0ZWN0ID0gZ2V0UGF3dGVjdFRva2VuKCk7XG4gICAgICBpZiAoIWZwKSBmcCA9IGdldEZpbmdlcnByaW50KCk7XG4gICAgICBpZiAoIXBhd3RlY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBkeW4yID0gYXdhaXQgY29tcHV0ZVBhd3RlY3QoeyBjb2xvcnM6IGNvbG9yc05vcm0sIGNvb3JkczogY29vcmRzTm9ybSwgdDogdHVybnN0aWxlVG9rZW4sIC4uLihmcCA/IHsgZnAgfSA6IHt9KSB9KTtcbiAgICAgICAgICBpZiAoZHluMikgcGF3dGVjdCA9IGR5bjI7XG4gICAgICAgIH0gY2F0Y2gge31cbiAgICAgIH1cbiAgICB9XG4gIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IGNvbG9yczogY29sb3JzTm9ybSwgY29vcmRzOiBjb29yZHNOb3JtLCB0OiB0dXJuc3RpbGVUb2tlbiwgLi4uKGZwID8geyBmcCB9IDoge30pIH0pO1xuICAgIFxuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiBjb250cm9sbGVyLmFib3J0KCksIDIwMDAwKTsgLy8gQXVtZW50YXIgdGltZW91dCBhIDIwIHNlZ3VuZG9zXG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFfS9zMC9waXhlbC8ke3RpbGVYfS8ke3RpbGVZfWAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcsIC4uLihwYXd0ZWN0ID8geyAneC1wYXd0ZWN0LXRva2VuJzogcGF3dGVjdCB9IDoge30pIH0sXG4gICAgICBib2R5OiBib2R5LFxuICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbFxuICAgIH0pO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG5cbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICB0cnkgeyBhd2FpdCByZXNwb25zZS5qc29uKCk7IH0gY2F0Y2ggeyAvKiBJZ25vcmUgSlNPTiBwYXJzaW5nIGVycm9ycyAqLyB9XG4gICAgICBjb25zb2xlLmVycm9yKFwiXHUyNzRDIDQwMyBGb3JiaWRkZW4uIFR1cm5zdGlsZSB0b2tlbiBtaWdodCBiZSBpbnZhbGlkIG9yIGV4cGlyZWQuXCIpO1xuICAgICAgXG4gICAgICAvLyBUcnkgdG8gZ2VuZXJhdGUgYSBuZXcgdG9rZW4gYW5kIHJldHJ5IG9uY2VcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERDA0IFJlZ2VuZXJhdGluZyBUdXJuc3RpbGUgdG9rZW4gYWZ0ZXIgNDAzLi4uXCIpO1xuICAgICAgICBjb25zdCBuZXdUb2tlbiA9IGF3YWl0IGVuc3VyZVRva2VuKHRydWUpOyAvLyBGb3JjZSBuZXcgdG9rZW4gZ2VuZXJhdGlvblxuICAgICAgICAvLyByZS1jaGVjayBmcC9wYXd0ZWN0IGluIGNhc2UgdGhleSB3ZXJlIGNhcHR1cmVkIGFmdGVyIHRoZSBmaXJzdCB0cnlcbiAgICAgICAgcGF3dGVjdCA9IGdldFBhd3RlY3RUb2tlbigpO1xuICAgICAgICBmcCA9IGdldEZpbmdlcnByaW50KCk7XG4gICAgICAgIGlmICghcGF3dGVjdCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkeW4zID0gYXdhaXQgY29tcHV0ZVBhd3RlY3QoeyBjb2xvcnM6IGNvbG9yc05vcm0sIGNvb3JkczogY29vcmRzTm9ybSwgdDogbmV3VG9rZW4sIC4uLihmcCA/IHsgZnAgfSA6IHt9KSB9KTtcbiAgICAgICAgICAgIGlmIChkeW4zKSBwYXd0ZWN0ID0gZHluMztcbiAgICAgICAgICB9IGNhdGNoIHt9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFJldHJ5IHRoZSByZXF1ZXN0IHdpdGggbmV3IHRva2VuXG4gICAgICAgIGNvbnN0IHJldHJ5Qm9keSA9IEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgICAgY29sb3JzOiBjb2xvcnNOb3JtLCBcbiAgICAgICAgICBjb29yZHM6IGNvb3Jkc05vcm0sIFxuICAgICAgICAgIHQ6IG5ld1Rva2VuLFxuICAgICAgICAgIC4uLihmcCA/IHsgZnAgfSA6IHt9KVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJldHJ5Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgY29uc3QgcmV0cnlUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHJldHJ5Q29udHJvbGxlci5hYm9ydCgpLCAyMDAwMCk7IC8vIEF1bWVudGFyIHRpbWVvdXQgYSAyMCBzZWd1bmRvc1xuXG4gICAgICAgIGNvbnN0IHJldHJ5UmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFfS9zMC9waXhlbC8ke3RpbGVYfS8ke3RpbGVZfWAsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnLCAuLi4ocGF3dGVjdCA/IHsgJ3gtcGF3dGVjdC10b2tlbic6IHBhd3RlY3QgfSA6IHt9KSB9LFxuICAgICAgICAgIGJvZHk6IHJldHJ5Qm9keSxcbiAgICAgICAgICBzaWduYWw6IHJldHJ5Q29udHJvbGxlci5zaWduYWxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHJldHJ5VGltZW91dElkKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXRyeVJlc3BvbnNlLnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICAgICAganNvbjogeyBlcnJvcjogJ0ZyZXNoIHRva2VuIGV4cGlyZWQgb3IgaW52YWxpZCBhZnRlciByZXRyeScgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IHJldHJ5RGF0YSA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJldHJ5UmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgICAgICByZXRyeURhdGEgPSBKU09OLnBhcnNlKHRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgcmV0cnlEYXRhID0ge307IC8vIElnbm9yYXIgZXJyb3JlcyBkZSBKU09OIHBhcnNlXG4gICAgICAgIH1cbiAgICAgICAgXG4gIC8vIE5vIGludmFsaWRhciBlbCB0b2tlbiBlbiBcdTAwRTl4aXRvOiBwZXJtaXRlIHJldXRpbGl6YWNpXHUwMEYzbiBkZW50cm8gZGVsIFRUTC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXM6IHJldHJ5UmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgIGpzb246IHJldHJ5RGF0YSxcbiAgICAgICAgICBzdWNjZXNzOiByZXRyeVJlc3BvbnNlLm9rXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgfSBjYXRjaCAocmV0cnlFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiXHUyNzRDIFRva2VuIHJlZ2VuZXJhdGlvbiBmYWlsZWQ6XCIsIHJldHJ5RXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICAgIGpzb246IHsgZXJyb3I6ICdUb2tlbiByZWdlbmVyYXRpb24gZmFpbGVkJyB9LFxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2kgZWwgc2Vydmlkb3IgZGV2dWVsdmUgNXh4LCBpbnRlbnRhciB1bmEgdmV6IGNvbiB0b2tlbiBudWV2b1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNTAwICYmIHJlc3BvbnNlLnN0YXR1cyA8PSA1MDQpIHtcbiAgICAgIHRyeSB7XG4gIGNvbnN0IG5ld1Rva2VuID0gYXdhaXQgZW5zdXJlVG9rZW4odHJ1ZSk7XG4gIC8vIHJlLWNoZWNrIGZwL3Bhd3RlY3QgYXMgd2VsbFxuICBwYXd0ZWN0ID0gZ2V0UGF3dGVjdFRva2VuKCk7XG4gIGZwID0gZ2V0RmluZ2VycHJpbnQoKTtcbiAgaWYgKCFwYXd0ZWN0KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGR5bjQgPSBhd2FpdCBjb21wdXRlUGF3dGVjdCh7IGNvbG9yczogY29sb3JzTm9ybSwgY29vcmRzOiBjb29yZHNOb3JtLCB0OiBuZXdUb2tlbiwgLi4uKGZwID8geyBmcCB9IDoge30pIH0pO1xuICAgICAgaWYgKGR5bjQpIHBhd3RlY3QgPSBkeW40O1xuICAgIH0gY2F0Y2gge31cbiAgfVxuICBjb25zdCByZXRyeUJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IGNvbG9yczogY29sb3JzTm9ybSwgY29vcmRzOiBjb29yZHNOb3JtLCB0OiBuZXdUb2tlbiwgLi4uKGZwID8geyBmcCB9IDoge30pIH0pO1xuICAgICAgICBjb25zdCByZXRyeUNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgIGNvbnN0IHJldHJ5VGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiByZXRyeUNvbnRyb2xsZXIuYWJvcnQoKSwgMjAwMDApOyAvLyBBdW1lbnRhciB0aW1lb3V0IGEgMjAgc2VndW5kb3NcbiAgICAgICAgY29uc3QgcmV0cnlSZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0V9L3MwL3BpeGVsLyR7dGlsZVh9LyR7dGlsZVl9YCwge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcsIC4uLihwYXd0ZWN0ID8geyAneC1wYXd0ZWN0LXRva2VuJzogcGF3dGVjdCB9IDoge30pIH0sXG4gICAgICAgICAgYm9keTogcmV0cnlCb2R5LFxuICAgICAgICAgIHNpZ25hbDogcmV0cnlDb250cm9sbGVyLnNpZ25hbFxuICAgICAgICB9KTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHJldHJ5VGltZW91dElkKTtcbiAgY29uc3QgcmV0cnlQYXJzZWQgPSBhd2FpdCBzYWZlUGFyc2VSZXNwb25zZShyZXRyeVJlc3BvbnNlKTtcbiAgaWYgKHJldHJ5UmVzcG9uc2Uub2spIHtcbiAgICAgICAgICB0cnkgeyBpbnZhbGlkYXRlVG9rZW4oKTsgfSBjYXRjaCB7fVxuICAgICAgICB9XG4gIHJldHVybiB7IHN0YXR1czogcmV0cnlSZXNwb25zZS5zdGF0dXMsIGpzb246IHJldHJ5UGFyc2VkLmpzb24sIHN1Y2Nlc3M6IHJldHJ5UmVzcG9uc2Uub2sgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gQ29udGludWFyIGRldm9sdmllbmRvIGVsIDV4eCBvcmlnaW5hbCBzaSBmYWxsYVxuICAgICAgfVxuICAgIH1cblxuICBjb25zdCBwYXJzZWQgPSBhd2FpdCBzYWZlUGFyc2VSZXNwb25zZShyZXNwb25zZSk7XG4gIHJldHVybiB7IHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLCBqc29uOiBwYXJzZWQuanNvbiwgc3VjY2VzczogcmVzcG9uc2Uub2sgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBNYW5lam8gZXNwZWNcdTAwRURmaWNvIHBhcmEgdGltZW91dHMgeSBhYm9ydCBlcnJvcnNcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InIHx8IGVycm9yLm5hbWUgPT09ICdUaW1lb3V0RXJyb3InKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IDQwOCxcbiAgICAgICAganNvbjogeyBlcnJvcjogJ1JlcXVlc3QgdGltZW91dCcgfSxcbiAgICAgICAgc3VjY2VzczogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IDAsXG4gICAgICBqc29uOiB7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0sXG4gICAgICBzdWNjZXNzOiBmYWxzZVxuICAgIH07XG4gIH1cbn1cblxuLy8gUG9zdCBwXHUwMEVEeGVsIHBhcmEgQXV0by1JbWFnZSAocmVwbGljYWRvIGRlbCBlamVtcGxvIGNvbiBtYW5lam8gZGUgNDAzKVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBvc3RQaXhlbEJhdGNoSW1hZ2UodGlsZVgsIHRpbGVZLCBjb29yZHMsIGNvbG9ycywgdHVybnN0aWxlVG9rZW4pIHtcbiAgdHJ5IHtcbiAgICAvLyBOb3JtYWxpemFyIGNvb3Jkcy9jb2xvcnMgYWwgZm9ybWF0byBleGFjdG8gcXVlIGVzcGVyYSBlbCBiYWNrZW5kXG4gICAgY29uc3Qgbm9ybWFsaXplQ29vcmRzID0gKGFycikgPT4ge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBbXTtcbiAgICAgIGNvbnN0IGZsYXQgPSBbXTtcbiAgICAgIGlmIChhcnIubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJyWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgIGNvbnN0IHggPSBNYXRoLnRydW5jKGFycltpXSk7XG4gICAgICAgICAgY29uc3QgeSA9IE1hdGgudHJ1bmMoYXJyW2kgKyAxXSk7XG4gICAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZSh4KSAmJiBOdW1iZXIuaXNGaW5pdGUoeSkpIHtcbiAgICAgICAgICAgIGZsYXQucHVzaCgoKHggJSAxMDAwKSArIDEwMDApICUgMTAwMCwgKCh5ICUgMTAwMCkgKyAxMDAwKSAlIDEwMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmxhdDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgYXJyWzBdID09PSAnb2JqZWN0JyAmJiBhcnJbMF0gJiYgKCd4JyBpbiBhcnJbMF0gfHwgJ3knIGluIGFyclswXSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBwIG9mIGFycikge1xuICAgICAgICAgIGNvbnN0IHggPSBNYXRoLnRydW5jKHA/LngpO1xuICAgICAgICAgIGNvbnN0IHkgPSBNYXRoLnRydW5jKHA/LnkpO1xuICAgICAgICAgIGlmIChOdW1iZXIuaXNGaW5pdGUoeCkgJiYgTnVtYmVyLmlzRmluaXRlKHkpKSB7XG4gICAgICAgICAgICBmbGF0LnB1c2goKCh4ICUgMTAwMCkgKyAxMDAwKSAlIDEwMDAsICgoeSAlIDEwMDApICsgMTAwMCkgJSAxMDAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZsYXQ7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJbMF0pKSB7XG4gICAgICAgIGZvciAoY29uc3QgcCBvZiBhcnIpIHtcbiAgICAgICAgICBjb25zdCB4ID0gTWF0aC50cnVuYyhwPy5bMF0pO1xuICAgICAgICAgIGNvbnN0IHkgPSBNYXRoLnRydW5jKHA/LlsxXSk7XG4gICAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZSh4KSAmJiBOdW1iZXIuaXNGaW5pdGUoeSkpIHtcbiAgICAgICAgICAgIGZsYXQucHVzaCgoKHggJSAxMDAwKSArIDEwMDApICUgMTAwMCwgKCh5ICUgMTAwMCkgKyAxMDAwKSAlIDEwMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmxhdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmbGF0O1xuICAgIH07XG4gICAgY29uc3Qgbm9ybWFsaXplQ29sb3JzID0gKGNvbHMpID0+IEFycmF5LmlzQXJyYXkoY29scykgPyBjb2xzLm1hcChjID0+IE1hdGgudHJ1bmMoTnVtYmVyKGMpKSB8fCAwKSA6IFtdO1xuXG4gICAgY29uc3QgY29vcmRzTm9ybSA9IG5vcm1hbGl6ZUNvb3Jkcyhjb29yZHMpO1xuICAgIGNvbnN0IGNvbG9yc05vcm0gPSBub3JtYWxpemVDb2xvcnMoY29sb3JzKTtcbiAgICBpZiAoY29vcmRzTm9ybS5sZW5ndGggPT09IDAgfHwgY29sb3JzTm9ybS5sZW5ndGggPT09IDAgfHwgKGNvb3Jkc05vcm0ubGVuZ3RoIC8gMikgIT09IGNvbG9yc05vcm0ubGVuZ3RoKSB7XG4gICAgICBsb2coYFtBUEldIEludmFsaWQgY29vcmRzL2NvbG9ycyBmb3IgdGlsZSAke3RpbGVYfSwke3RpbGVZfSBcdTIxOTIgY29vcmRzUGFpcnM9JHtjb29yZHNOb3JtLmxlbmd0aC8yfSBjb2xvcnM9JHtjb2xvcnNOb3JtLmxlbmd0aH1gKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogNDAwLCBqc29uOiB7IGVycm9yOiAnSW52YWxpZCBjb29yZHMvY29sb3JzIGZvcm1hdCcgfSwgc3VjY2VzczogZmFsc2UsIHBhaW50ZWQ6IDAgfTtcbiAgICB9XG4gICAgLy8gRW5zdXJlIHBhd3RlY3QgdG9rZW5zIGFyZSBwcmVzZW50IChiZXN0LWVmZm9ydCB3YWl0KVxuICAvLyBGaW5nZXJwcmludCBwcm9hY3Rpdm8gc2kgZmFsdGFcbiAgbGV0IGZwID0gZ2V0RmluZ2VycHJpbnQoKTtcbiAgaWYgKCFmcCkgeyB0cnkgeyBmcCA9IGF3YWl0IGVuc3VyZUZpbmdlcnByaW50KHt9KTsgfSBjYXRjaCB7fSB9XG4gIC8vIFNpZW1wcmUgaW50ZW50YXIgY1x1MDBFMWxjdWxvIGRpblx1MDBFMW1pY28gKG92ZXJyaWRlKSBwYXJhIGV2aXRhciBtaXNtYXRjaCBhbGVhdG9yaW9cbiAgbGV0IHBhd3RlY3QgPSBudWxsO1xuICB0cnkge1xuICAgIGNvbnN0IHByZXZpZXcgPSB7IGNvbG9ycywgY29vcmRzLCB0OiB0dXJuc3RpbGVUb2tlbiB8fCAnc2VlZCcsIC4uLihmcCA/IHsgZnAgfSA6IHsgZnA6ICdzZWVkJyB9KSB9O1xuICAgIGNvbnN0IGR5biA9IGF3YWl0IGNvbXB1dGVQYXd0ZWN0KHByZXZpZXcpO1xuICAgIGlmIChkeW4pIHBhd3RlY3QgPSBkeW47IGVsc2UgcGF3dGVjdCA9IGdldFBhd3RlY3RUb2tlbigpO1xuICB9IGNhdGNoIHsgcGF3dGVjdCA9IGdldFBhd3RlY3RUb2tlbigpOyB9XG4gIGlmICghZnApIHsgdHJ5IHsgYXdhaXQgd2FpdEZvclBhd3RlY3QoMTIwMCk7IH0gY2F0Y2gge30gZnAgPSBnZXRGaW5nZXJwcmludCgpOyB9XG4gICAgLy8gUHJlcGFyZSBleGFjdCBib2R5IGZvcm1hdCBhcyB1c2VkIGluIGV4YW1wbGVcbiAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICBjb2xvcnM6IGNvbG9yc05vcm0sIFxuICAgICAgY29vcmRzOiBjb29yZHNOb3JtLCBcbiAgICAgIHQ6IHR1cm5zdGlsZVRva2VuLFxuICAgICAgLi4uKGZwID8geyBmcCB9IDoge30pXG4gICAgfSk7XG4gIC8vIEhhc2ggZGlhZ25cdTAwRjNzdGljbyAoRk5WLTFhIHNpbXBsaWZpY2FkbykgcGFyYSBkZXRlY3RhciBjdWVycG9zIHJlcGV0aWRvcyBlbiA1MDBcbiAgbGV0IGJvZHlIYXNoID0gJyc7XG4gIHRyeSB7XG4gICAgbGV0IGggPSAweDgxMWM5ZGM1O1xuICAgIGZvciAobGV0IGk9MDtpPGJvZHkubGVuZ3RoO2krKykgeyBoIF49IGJvZHkuY2hhckNvZGVBdChpKTsgaCA9IE1hdGguaW11bChoLCAweDAxMDAwMTkzKTsgfVxuICAgIGJvZHlIYXNoID0gKCcwMDAwMDAwMCcrKGg+Pj4wKS50b1N0cmluZygxNikpLnNsaWNlKC04KTtcbiAgfSBjYXRjaCB7fVxuICAgIFxuICAgIGxvZyhgW0FQSV0gU2VuZGluZyBiYXRjaCB0byB0aWxlICR7dGlsZVh9LCR7dGlsZVl9IHdpdGggJHtjb2xvcnMubGVuZ3RofSBwaXhlbHMsIHRva2VuOiAke3R1cm5zdGlsZVRva2VuID8gdHVybnN0aWxlVG9rZW4uc3Vic3RyaW5nKDAsIDUwKSArICcuLi4nIDogJ251bGwnfWApO1xuICAgIFxuICBsb2coYFtBUEldIHBvc3RQaXhlbEJhdGNoSW1hZ2UgaW5jbHVkZTogcGF3dGVjdD0keyEhcGF3dGVjdH0gZnA9JHshIWZwfSBib2R5SGFzaD0ke2JvZHlIYXNofWApO1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0V9L3MwL3BpeGVsLyR7dGlsZVh9LyR7dGlsZVl9YCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JywgLi4uKHBhd3RlY3QgPyB7ICd4LXBhd3RlY3QtdG9rZW4nOiBwYXd0ZWN0IH0gOiB7fSkgfSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9KTtcblxuICAgIGxvZyhgW0FQSV0gUmVzcG9uc2U6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG5cbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICB0cnkgeyBhd2FpdCByZXNwb25zZS5qc29uKCk7IH0gY2F0Y2ggeyAvKiBJZ25vcmUgSlNPTiBwYXJzaW5nIGVycm9ycyAqLyB9XG4gICAgICBjb25zb2xlLmVycm9yKFwiXHUyNzRDIDQwMyBGb3JiaWRkZW4uIFR1cm5zdGlsZSB0b2tlbiBtaWdodCBiZSBpbnZhbGlkIG9yIGV4cGlyZWQuXCIpO1xuICAgICAgXG4gICAgICAvLyBUcnkgdG8gZ2VuZXJhdGUgYSBuZXcgdG9rZW4gYW5kIHJldHJ5IG9uY2VcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERDA0IFJlZ2VuZXJhdGluZyBUdXJuc3RpbGUgdG9rZW4gYWZ0ZXIgNDAzLi4uXCIpO1xuICAgICAgICBcbiAgICAgICAgLy8gRm9yY2UgaW52YWxpZGF0aW9uIG9mIGN1cnJlbnQgdG9rZW4gYW5kIGdldCBjb21wbGV0ZWx5IGZyZXNoIG9uZVxuICBjb25zdCBuZXdUb2tlbiA9IGF3YWl0IGVuc3VyZVRva2VuKHRydWUpOyAvLyBGb3JjZSBuZXcgdG9rZW4gZ2VuZXJhdGlvblxuICAvLyByZS1jaGVjayBmcC9wYXd0ZWN0IGFzIHRoZXkgbWF5IGJlIGF2YWlsYWJsZSBub3dcbiAgcGF3dGVjdCA9IGdldFBhd3RlY3RUb2tlbigpO1xuICBmcCA9IGdldEZpbmdlcnByaW50KCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIW5ld1Rva2VuKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICAgICAganNvbjogeyBlcnJvcjogJ0NvdWxkIG5vdCBnZW5lcmF0ZSBuZXcgdG9rZW4nIH0sXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIHBhaW50ZWQ6IDBcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBSZXRyeSB0aGUgcmVxdWVzdCB3aXRoIG5ldyB0b2tlblxuICBjb25zdCByZXRyeUJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgICAgIGNvbG9yczogY29sb3JzTm9ybSwgXG4gICAgICAgICAgY29vcmRzOiBjb29yZHNOb3JtLCBcbiAgICAgICAgICB0OiBuZXdUb2tlbixcbiAgICAgICAgICAuLi4oZnAgPyB7IGZwIH0gOiB7fSlcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBsb2coYFtBUEldIFJldHJ5aW5nIHdpdGggZnJlc2ggdG9rZW46ICR7bmV3VG9rZW4uc3Vic3RyaW5nKDAsIDUwKX0uLi5gKTtcbiAgICAgICAgXG4gIGNvbnN0IHJldHJ5UmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFfS9zMC9waXhlbC8ke3RpbGVYfS8ke3RpbGVZfWAsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnLCAuLi4ocGF3dGVjdCA/IHsgJ3gtcGF3dGVjdC10b2tlbic6IHBhd3RlY3QgfSA6IHt9KSB9LFxuICAgICAgICAgIGJvZHk6IHJldHJ5Qm9keVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGxvZyhgW0FQSV0gUmV0cnkgcmVzcG9uc2U6ICR7cmV0cnlSZXNwb25zZS5zdGF0dXN9ICR7cmV0cnlSZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJldHJ5UmVzcG9uc2Uuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgICAgICBqc29uOiB7IGVycm9yOiAnRnJlc2ggdG9rZW4gc3RpbGwgZXhwaXJlZCBvciBpbnZhbGlkIGFmdGVyIHJldHJ5JyB9LFxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBwYWludGVkOiAwXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgY29uc3QgcmV0cnlQYXJzZWQgPSBhd2FpdCBzYWZlUGFyc2VSZXNwb25zZShyZXRyeVJlc3BvbnNlKTtcbiAgY29uc3QgcGFpbnRlZCA9IHJldHJ5UGFyc2VkLmpzb24/LnBhaW50ZWQgfHwgMDtcbiAgICAgICAgbG9nKGBbQVBJXSBSZXRyeSByZXN1bHQ6ICR7cGFpbnRlZH0gcGl4ZWxzIHBhaW50ZWRgKTtcblxuICAvLyBObyBpbnZhbGlkYXIgZWwgdG9rZW4gZW4gXHUwMEU5eGl0bzogcGVybWl0ZSByZXV0aWxpemFjaVx1MDBGM24gZGVudHJvIGRlbCBUVEwuXG5cbiAgcmV0dXJuIHsgc3RhdHVzOiByZXRyeVJlc3BvbnNlLnN0YXR1cywganNvbjogcmV0cnlQYXJzZWQuanNvbiwgc3VjY2VzczogcmV0cnlSZXNwb25zZS5vaywgcGFpbnRlZCB9O1xuICAgICAgICBcbiAgICAgIH0gY2F0Y2ggKHJldHJ5RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlx1Mjc0QyBUb2tlbiByZWdlbmVyYXRpb24gZmFpbGVkOlwiLCByZXRyeUVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgICBqc29uOiB7IGVycm9yOiAnVG9rZW4gcmVnZW5lcmF0aW9uIGZhaWxlZDogJyArIHJldHJ5RXJyb3IubWVzc2FnZSB9LFxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIHBhaW50ZWQ6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbnRlbnRhciB1bmEgdmV6IGNvbiB0b2tlbiBudWV2byBzaSBlcyA1eHhcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDUwMCAmJiByZXNwb25zZS5zdGF0dXMgPD0gNTA0KSB7XG4gICAgICB0cnkge1xuICBjb25zdCBuZXdUb2tlbiA9IGF3YWl0IGVuc3VyZVRva2VuKHRydWUpO1xuICAvLyByZS1jaGVjayBmcC9wYXd0ZWN0IGZvciByZXRyeVxuICBwYXd0ZWN0ID0gZ2V0UGF3dGVjdFRva2VuKCk7XG4gIGZwID0gZ2V0RmluZ2VycHJpbnQoKTtcbiAgY29uc3QgcmV0cnlCb2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBjb2xvcnM6IGNvbG9yc05vcm0sIGNvb3JkczogY29vcmRzTm9ybSwgdDogbmV3VG9rZW4sIC4uLihmcCA/IHsgZnAgfSA6IHt9KSB9KTtcbiAgICAgICAgbG9nKGBbQVBJXSBSZXRyeWluZyBhZnRlciAke3Jlc3BvbnNlLnN0YXR1c30gd2l0aCBmcmVzaCB0b2tlbjogJHtuZXdUb2tlbi5zdWJzdHJpbmcoMCwgNTApfS4uLmApO1xuICAgICAgICBjb25zdCByZXRyeVJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRX0vczAvcGl4ZWwvJHt0aWxlWH0vJHt0aWxlWX1gLCB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JywgLi4uKHBhd3RlY3QgPyB7ICd4LXBhd3RlY3QtdG9rZW4nOiBwYXd0ZWN0IH0gOiB7fSkgfSxcbiAgICAgICAgICBib2R5OiByZXRyeUJvZHlcbiAgICAgICAgfSk7XG4gIGNvbnN0IHJldHJ5UGFyc2VkMiA9IGF3YWl0IHNhZmVQYXJzZVJlc3BvbnNlKHJldHJ5UmVzcG9uc2UpO1xuICBjb25zdCBwYWludGVkID0gcmV0cnlQYXJzZWQyLmpzb24/LnBhaW50ZWQgfHwgMDtcbiAgICAgICAgbG9nKGBbQVBJXSBSZXRyeSBhZnRlciAke3Jlc3BvbnNlLnN0YXR1c306ICR7cGFpbnRlZH0gcGl4ZWxzIHBhaW50ZWRgKTtcbiAgLy8gTm8gaW52YWxpZGFyIGVsIHRva2VuIGVuIFx1MDBFOXhpdG86IHBlcm1pdGUgcmV1dGlsaXphY2lcdTAwRjNuIGRlbnRybyBkZWwgVFRMLlxuICByZXR1cm4geyBzdGF0dXM6IHJldHJ5UmVzcG9uc2Uuc3RhdHVzLCBqc29uOiByZXRyeVBhcnNlZDIuanNvbiwgc3VjY2VzczogcmV0cnlSZXNwb25zZS5vaywgcGFpbnRlZCB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBTZWd1aXIgYWwgbWFuZWpvIGVzdFx1MDBFMW5kYXIgYWJham9cbiAgICAgIH1cbiAgICB9XG5cbiAgY29uc3QgZmluYWxQYXJzZWQgPSBhd2FpdCBzYWZlUGFyc2VSZXNwb25zZShyZXNwb25zZSk7XG4gIGNvbnN0IHBhaW50ZWQgPSBmaW5hbFBhcnNlZC5qc29uPy5wYWludGVkIHx8IDA7XG4gICAgbG9nKGBbQVBJXSBTdWNjZXNzOiAke3BhaW50ZWR9IHBpeGVscyBwYWludGVkYCk7XG5cbiAgLy8gTm8gaW52YWxpZGFyIGVsIHRva2VuIGVuIFx1MDBFOXhpdG86IHBlcm1pdGUgcmV1dGlsaXphY2lcdTAwRjNuIGRlbnRybyBkZWwgVFRMLlxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAganNvbjogZmluYWxQYXJzZWQuanNvbixcbiAgICAgIHN1Y2Nlc3M6IHJlc3BvbnNlLm9rLFxuICAgICAgcGFpbnRlZDogcGFpbnRlZFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gTWFuZWpvIGVzcGVjXHUwMEVEZmljbyBwYXJhIHRpbWVvdXRzIHkgYWJvcnQgZXJyb3JzXG4gICAgaWYgKGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJyB8fCBlcnJvci5uYW1lID09PSAnVGltZW91dEVycm9yJykge1xuICAgICAgbG9nKGBbQVBJXSBSZXF1ZXN0IHRpbWVvdXQgZm9yIHRpbGUgJHt0aWxlWH0sJHt0aWxlWX1gKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogNDA4LFxuICAgICAgICBqc29uOiB7IGVycm9yOiAnUmVxdWVzdCB0aW1lb3V0JyB9LFxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgcGFpbnRlZDogMFxuICAgICAgfTtcbiAgICB9XG4gICAgbG9nKGBbQVBJXSBOZXR3b3JrIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogMCxcbiAgICAgIGpzb246IHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSxcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgcGFpbnRlZDogMFxuICAgIH07XG4gIH1cbn1cblxuLy8gRGVzY2FyZ2EgeSBldmFsXHUwMEZBYSBlbCBib3Qgc2VsZWNjaW9uYWRvIChjb21wYXJ0aWRvIHBhcmEgb3Ryb3MgbGFuemFkb3JlcyBzaSBhcGxpY2EpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRBbmRFeGVjdXRlQm90KGJvdFR5cGUsIHJhd0Jhc2UpIHtcbiAgbG9nKGBcdUQ4M0RcdURDRTUgRGVzY2FyZ2FuZG8gYm90OiAke2JvdFR5cGV9YCk7XG4gIHRyeSB7XG4gICAgY29uc3QgYm90RmlsZXMgPSB7XG4gICAgICAnZmFybSc6ICdBdXRvLUZhcm0uanMnLFxuICAgICAgJ2ltYWdlJzogJ0F1dG8tSW1hZ2UuanMnLFxuICAgICAgJ2d1YXJkJzogJ0F1dG8tR3VhcmQuanMnXG4gICAgfTtcblxuICAgIGNvbnN0IGZpbGVOYW1lID0gYm90RmlsZXNbYm90VHlwZV07XG4gICAgaWYgKCFmaWxlTmFtZSkgdGhyb3cgbmV3IEVycm9yKGBUaXBvIGRlIGJvdCBkZXNjb25vY2lkbzogJHtib3RUeXBlfWApO1xuXG4gICAgY29uc3QgdXJsID0gYCR7cmF3QmFzZX0vJHtmaWxlTmFtZX1gO1xuICAgIGxvZyhgXHVEODNDXHVERjEwIFVSTDogJHt1cmx9YCk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgeyBjYWNoZTogJ25vLWNhY2hlJyB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9YCk7XG5cbiAgICBjb25zdCBjb2RlID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIGxvZyhgXHUyNzA1IEJvdCBkZXNjYXJnYWRvICgke2NvZGUubGVuZ3RofSBjaGFycyksIGlueWVjdGFuZG8uLi5gKTtcblxuICAgIGNvbnN0IHNvdXJjZVVSTCA9IGBcXG4vLyMgc291cmNlVVJMPSR7dXJsfWA7XG4gICAgXG4gICAgLy8gUGFyYSBxdWUgZWwgbGF1bmNoZXIgcHVlZGEgY2FwdHVyYXIgdG9rZW5zIGRlIHR1cm5zdGlsZS5qcyxcbiAgICAvLyBlamVjdXRhbW9zIFNJRU1QUkUgY29uIGV2YWwoKSBlbiBlbCBjb250ZXh0byBnbG9iYWwgYWN0dWFsXG4gICAgLy8gZXZpdGFuZG8gY3JlYXIgY29udGV4dG9zIGFpc2xhZG9zIGNvbiA8c2NyaXB0PiB0YWdzIG8gaW1wb3J0KClcbiAgICBsb2coJ1x1RDgzRFx1REU4MCBFamVjdXRhbmRvIGJvdCBlbiBjb250ZXh0byBnbG9iYWwgKHBhcmEgYWNjZXNvIGEgdHVybnN0aWxlLmpzKS4uLicpO1xuICAgICgwLCBldmFsKShjb2RlICsgc291cmNlVVJMKTtcbiAgICBsb2coJ1x1MjcwNSBCb3QgZWplY3V0YWRvIGNvbiBhY2Nlc28gY29tcGxldG8gYSB0dXJuc3RpbGUuanMnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2coJ1x1Mjc0QyBFcnJvciBkZXNjYXJnYW5kby9lamVjdXRhbmRvIGJvdDonLCBlcnJvci5tZXNzYWdlKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuIiwgIi8vIEdlc3RvciBnbG9iYWwgZGUgdmVudGFuYXMgcGFyYSB0cmFlciBhbCBmcmVudGUgeSBtYW5lamFyIG1vZGFsZXNcbi8qIGdsb2JhbCBNdXRhdGlvbk9ic2VydmVyLCBOb2RlICovXG5sZXQgY3VycmVudE1heFpJbmRleCA9IDEwMDAwMDtcbmNvbnN0IHdpbmRvd0VsZW1lbnRzID0gbmV3IFNldCgpO1xubGV0IG1vZGFsT2JzZXJ2ZXJzU2V0dXAgPSBmYWxzZTtcbmxldCBoaWRkZW5XaW5kb3dzQnlNb2RhbCA9IG5ldyBTZXQoKTtcbmxldCBERUJVR19NT0RBTF9NQU5BR0VSID0gZmFsc2U7XG5cbi8qKlxuICogQWN0aXZhL2Rlc2FjdGl2YSBlbCBtb2RvIGRlYnVnXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgLSBTaSBhY3RpdmFyIGVsIGRlYnVnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRNb2RhbERlYnVnKGVuYWJsZWQpIHtcbiAgREVCVUdfTU9EQUxfTUFOQUdFUiA9IGVuYWJsZWQ7XG59XG5cbi8qKlxuICogRnVuY2lcdTAwRjNuIGRlIGRlYnVnIHBhcmEgbG9nZ2luZ1xuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBNZW5zYWplIGEgbG9nZWFyXG4gKiBAcGFyYW0geyp9IGRhdGEgLSBEYXRvcyBhZGljaW9uYWxlc1xuICovXG5mdW5jdGlvbiBkZWJ1Z0xvZyhtZXNzYWdlLCBkYXRhID0gbnVsbCkge1xuICBpZiAoIURFQlVHX01PREFMX01BTkFHRVIpIHJldHVybjtcbiAgaWYgKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhgW01vZGFsTWFuYWdlcl0gJHttZXNzYWdlfWAsIGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKGBbTW9kYWxNYW5hZ2VyXSAke21lc3NhZ2V9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBWZXJpZmljYSBzaSBoYXkgYWxnXHUwMEZBbiBtb2RhbCBhYmllcnRvXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNBbnlNb2RhbE9wZW4oKSB7XG4gIGNvbnN0IG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpYWxvZy5tb2RhbFtvcGVuXSwgZGlhbG9nW29wZW5dLCAubW9kYWxbb3Blbl0sIC5tb2RhbC5zaG93Jyk7XG4gIHJldHVybiBtb2RhbHMubGVuZ3RoID4gMDtcbn1cblxuLyoqXG4gKiBNYW5lamEgbGEgdmlzaWJpbGlkYWQgZGUgbGFzIHZlbnRhbmFzIHNlZ1x1MDBGQW4gZWwgZXN0YWRvIGRlIGxvcyBtb2RhbGVzXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVdpbmRvd3NWaXNpYmlsaXR5T25Nb2RhbCgpIHtcbiAgY29uc3QgbW9kYWxPcGVuID0gaXNBbnlNb2RhbE9wZW4oKTtcbiAgZGVidWdMb2coYE1vZGFsIHN0YXRlIGNoYW5nZWQuIE9wZW46ICR7bW9kYWxPcGVufWApO1xuICBkZWJ1Z0xvZyhgV2luZG93cyByZWdpc3RlcmVkOiAke3dpbmRvd0VsZW1lbnRzLnNpemV9YCk7XG4gIGRlYnVnTG9nKGBXaW5kb3dzIGN1cnJlbnRseSBoaWRkZW4gYnkgbW9kYWw6ICR7aGlkZGVuV2luZG93c0J5TW9kYWwuc2l6ZX1gKTtcblxuICB3aW5kb3dFbGVtZW50cy5mb3JFYWNoKHdpbmRvd0VsZW1lbnQgPT4ge1xuICAgIGlmIChtb2RhbE9wZW4pIHtcbiAgICAgIC8vIE9jdWx0YXIgdmVudGFuYSBzaSBoYXkgbW9kYWwgYWJpZXJ0b1xuICAgICAgaWYgKCFoaWRkZW5XaW5kb3dzQnlNb2RhbC5oYXMod2luZG93RWxlbWVudCkpIHtcbiAgICAgICAgZGVidWdMb2coJ0hpZGluZyB3aW5kb3cgZHVlIHRvIG1vZGFsJywgd2luZG93RWxlbWVudCk7XG4gICAgICAgIGhpZGRlbldpbmRvd3NCeU1vZGFsLmFkZCh3aW5kb3dFbGVtZW50KTtcbiAgICAgICAgd2luZG93RWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gJ2FsbCAwLjNzIGVhc2Utb3V0JztcbiAgICAgICAgd2luZG93RWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgICAvL3dpbmRvd0VsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlKDAuOCknO1xuICAgICAgICB3aW5kb3dFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG5cbiAgICAgICAgLy8gVGFtYmlcdTAwRTluIG9jdWx0YXIgZWwgaG9zdCBzaSBlc3RcdTAwRTEgZW4gU2hhZG93IERPTVxuICAgICAgICBjb25zdCByb290ID0gd2luZG93RWxlbWVudC5nZXRSb290Tm9kZSAmJiB3aW5kb3dFbGVtZW50LmdldFJvb3ROb2RlKCk7XG4gICAgICAgIGlmIChyb290ICYmIHJvb3QuaG9zdCAmJiByb290Lmhvc3Quc3R5bGUpIHtcbiAgICAgICAgICBkZWJ1Z0xvZygnQWxzbyBoaWRpbmcgU2hhZG93IERPTSBob3N0Jywgcm9vdC5ob3N0KTtcbiAgICAgICAgICByb290Lmhvc3Quc3R5bGUudHJhbnNpdGlvbiA9ICdhbGwgMC4zcyBlYXNlLW91dCc7XG4gICAgICAgICAgcm9vdC5ob3N0LnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICAgICAgLy9yb290Lmhvc3Quc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlKDAuOCknO1xuICAgICAgICAgIHJvb3QuaG9zdC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1vc3RyYXIgdmVudGFuYSBzaSBubyBoYXkgbW9kYWxlcyBhYmllcnRvc1xuICAgICAgaWYgKGhpZGRlbldpbmRvd3NCeU1vZGFsLmhhcyh3aW5kb3dFbGVtZW50KSkge1xuICAgICAgICBkZWJ1Z0xvZygnU2hvd2luZyB3aW5kb3csIG5vIG1vZGFscyBkZXRlY3RlZCcsIHdpbmRvd0VsZW1lbnQpO1xuICAgICAgICBoaWRkZW5XaW5kb3dzQnlNb2RhbC5kZWxldGUod2luZG93RWxlbWVudCk7XG4gICAgICAgIHdpbmRvd0VsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9ICdhbGwgMC4zcyBlYXNlLWluJztcbiAgICAgICAgd2luZG93RWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgICAvL3dpbmRvd0VsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlKDEpJztcbiAgICAgICAgd2luZG93RWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ2F1dG8nO1xuXG4gICAgICAgIC8vIFRhbWJpXHUwMEU5biBtb3N0cmFyIGVsIGhvc3Qgc2kgZXN0XHUwMEUxIGVuIFNoYWRvdyBET01cbiAgICAgICAgY29uc3Qgcm9vdCA9IHdpbmRvd0VsZW1lbnQuZ2V0Um9vdE5vZGUgJiYgd2luZG93RWxlbWVudC5nZXRSb290Tm9kZSgpO1xuICAgICAgICBpZiAocm9vdCAmJiByb290Lmhvc3QgJiYgcm9vdC5ob3N0LnN0eWxlKSB7XG4gICAgICAgICAgZGVidWdMb2coJ0Fsc28gc2hvd2luZyBTaGFkb3cgRE9NIGhvc3QnLCByb290Lmhvc3QpO1xuICAgICAgICAgIHJvb3QuaG9zdC5zdHlsZS50cmFuc2l0aW9uID0gJ2FsbCAwLjNzIGVhc2UtaW4nO1xuICAgICAgICAgIHJvb3QuaG9zdC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgICAgIC8vcm9vdC5ob3N0LnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZSgxKSc7XG4gICAgICAgICAgcm9vdC5ob3N0LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYXV0byc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyYSBsb3Mgb2JzZXJ2YWRvcmVzIGRlIG1vZGFsZXMgY29uIGRlYnVnIG1lam9yYWRvXG4gKi9cbmZ1bmN0aW9uIHNldHVwTW9kYWxPYnNlcnZlcnMoKSB7XG4gIGlmIChtb2RhbE9ic2VydmVyc1NldHVwKSByZXR1cm47XG4gIGRlYnVnTG9nKCdTZXR0aW5nIHVwIG1vZGFsIG9ic2VydmVycycpO1xuXG4gIGNvbnN0IG1vZGFsQXR0cmlidXRlT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4gICAgZGVidWdMb2coYEF0dHJpYnV0ZSBtdXRhdGlvbnMgZGV0ZWN0ZWQ6ICR7bXV0YXRpb25zLmxlbmd0aH1gKTtcbiAgICBtdXRhdGlvbnMuZm9yRWFjaCgobXV0YXRpb24pID0+IHtcbiAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnYXR0cmlidXRlcycgJiZcbiAgICAgICAgKG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgPT09ICdvcGVuJyB8fCBtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lID09PSAnY2xhc3MnKSkge1xuICAgICAgICBkZWJ1Z0xvZyhgQXR0cmlidXRlIGNoYW5nZWQ6ICR7bXV0YXRpb24uYXR0cmlidXRlTmFtZX0gb25gLCBtdXRhdGlvbi50YXJnZXQpO1xuICAgICAgICBkZWJ1Z0xvZyhgT2xkIHZhbHVlOiAke211dGF0aW9uLm9sZFZhbHVlfWApO1xuICAgICAgICBkZWJ1Z0xvZyhgTmV3IHZhbHVlOiAke211dGF0aW9uLnRhcmdldC5nZXRBdHRyaWJ1dGUobXV0YXRpb24uYXR0cmlidXRlTmFtZSl9YCk7XG4gICAgICAgIGhhbmRsZVdpbmRvd3NWaXNpYmlsaXR5T25Nb2RhbCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCBkb21PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICBkZWJ1Z0xvZyhgRE9NIG11dGF0aW9ucyBkZXRlY3RlZDogJHttdXRhdGlvbnMubGVuZ3RofWApO1xuICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgIG11dGF0aW9uLmFkZGVkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgLy8gU2VsZWN0b3JlcyBtXHUwMEUxcyBhbXBsaW9zIHBhcmEgY2FwdHVyYXIgZGlmZXJlbnRlcyB0aXBvcyBkZSBtb2RhbGVzXG4gICAgICAgICAgICBjb25zdCBtb2RhbFNlbGVjdG9ycyA9ICdkaWFsb2cubW9kYWwsIGRpYWxvZywgLm1vZGFsLCBbcm9sZT1cImRpYWxvZ1wiXSwgLm92ZXJsYXksIC5wb3B1cCc7XG4gICAgICAgICAgICBpZiAobm9kZS5tYXRjaGVzICYmIG5vZGUubWF0Y2hlcyhtb2RhbFNlbGVjdG9ycykpIHtcbiAgICAgICAgICAgICAgZGVidWdMb2coJ05ldyBtb2RhbCBlbGVtZW50IGRldGVjdGVkJywgbm9kZSk7XG4gICAgICAgICAgICAgIG1vZGFsQXR0cmlidXRlT2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsnb3BlbicsICdjbGFzcycsICdhcmlhLWhpZGRlbiddLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZU9sZFZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBoYW5kbGVXaW5kb3dzVmlzaWJpbGl0eU9uTW9kYWwoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmVzdGVkTW9kYWxzID0gbm9kZS5xdWVyeVNlbGVjdG9yQWxsID9cbiAgICAgICAgICAgICAgbm9kZS5xdWVyeVNlbGVjdG9yQWxsKG1vZGFsU2VsZWN0b3JzKSA6IFtdO1xuICAgICAgICAgICAgaWYgKG5lc3RlZE1vZGFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGRlYnVnTG9nKGBGb3VuZCAke25lc3RlZE1vZGFscy5sZW5ndGh9IG5lc3RlZCBtb2RhbHNgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmVzdGVkTW9kYWxzLmZvckVhY2goKG1vZGFsKSA9PiB7XG4gICAgICAgICAgICAgIGRlYnVnTG9nKCdPYnNlcnZpbmcgbmVzdGVkIG1vZGFsJywgbW9kYWwpO1xuICAgICAgICAgICAgICBtb2RhbEF0dHJpYnV0ZU9ic2VydmVyLm9ic2VydmUobW9kYWwsIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogWydvcGVuJywgJ2NsYXNzJywgJ2FyaWEtaGlkZGVuJ10sXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG5lc3RlZE1vZGFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGhhbmRsZVdpbmRvd3NWaXNpYmlsaXR5T25Nb2RhbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG11dGF0aW9uLnJlbW92ZWROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGVidWdMb2coYCR7bXV0YXRpb24ucmVtb3ZlZE5vZGVzLmxlbmd0aH0gbm9kZXMgcmVtb3ZlZGApO1xuICAgICAgICAgIGhhbmRsZVdpbmRvd3NWaXNpYmlsaXR5T25Nb2RhbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIE9ic2VydmFyIG1vZGFsZXMgZXhpc3RlbnRlcyBjb24gc2VsZWN0b3JlcyBtXHUwMEUxcyBjb21wbGV0b3NcbiAgY29uc3QgbW9kYWxTZWxlY3RvcnMgPSAnZGlhbG9nLm1vZGFsLCBkaWFsb2csIC5tb2RhbCwgW3JvbGU9XCJkaWFsb2dcIl0sIC5vdmVybGF5LCAucG9wdXAnO1xuICBjb25zdCBleGlzdGluZ01vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwobW9kYWxTZWxlY3RvcnMpO1xuICBkZWJ1Z0xvZyhgRm91bmQgJHtleGlzdGluZ01vZGFscy5sZW5ndGh9IGV4aXN0aW5nIG1vZGFsc2ApO1xuXG4gIGV4aXN0aW5nTW9kYWxzLmZvckVhY2goKG1vZGFsKSA9PiB7XG4gICAgZGVidWdMb2coJ09ic2VydmluZyBleGlzdGluZyBtb2RhbCcsIG1vZGFsKTtcbiAgICBtb2RhbEF0dHJpYnV0ZU9ic2VydmVyLm9ic2VydmUobW9kYWwsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsnb3BlbicsICdjbGFzcycsICdhcmlhLWhpZGRlbiddLFxuICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgZG9tT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7XG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWVcbiAgfSk7XG5cbiAgbW9kYWxPYnNlcnZlcnNTZXR1cCA9IHRydWU7XG4gIGRlYnVnTG9nKCdNb2RhbCBvYnNlcnZlcnMgc2V0dXAgY29tcGxldGUnKTtcbn1cblxuLyoqXG4gKiBSZWdpc3RyYSB1bmEgdmVudGFuYSBwYXJhIGVsIG1hbmVqbyBkZSB6LWluZGV4IHkgbW9kYWxlc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gd2luZG93RWxlbWVudCAtIEVsIGVsZW1lbnRvIGRlIGxhIHZlbnRhbmFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyV2luZG93KHdpbmRvd0VsZW1lbnQpIHtcbiAgaWYgKCF3aW5kb3dFbGVtZW50KSByZXR1cm47XG5cbiAgd2luZG93RWxlbWVudHMuYWRkKHdpbmRvd0VsZW1lbnQpO1xuXG4gIC8vIENvbmZpZ3VyYXIgb2JzZXJ2YWRvcmVzIGRlIG1vZGFsZXMgc2kgZXMgbGEgcHJpbWVyYSB2ZW50YW5hXG4gIGlmICghbW9kYWxPYnNlcnZlcnNTZXR1cCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0dXBNb2RhbE9ic2VydmVycygpO1xuICAgIH0sIDEwMCk7XG4gIH1cblxuICAvLyBBZ3JlZ2FyIGV2ZW50IGxpc3RlbmVyIHBhcmEgdHJhZXIgYWwgZnJlbnRlIGFsIGhhY2VyIGNsaWNrXG4gIGNvbnN0IGJyaW5nVG9Gcm9udEhhbmRsZXIgPSAoZXZlbnQpID0+IHtcbiAgICAvLyBTb2xvIHRyYWVyIGFsIGZyZW50ZSBzaSBlbCBjbGljayBlcyBlbiBsYSB2ZW50YW5hIG1pc21hLCBubyBlbiBlbGVtZW50b3MgaW50ZXJub3MgZXNwZWNcdTAwRURmaWNvc1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IHdpbmRvd0VsZW1lbnQgfHwgd2luZG93RWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICBicmluZ1dpbmRvd1RvRnJvbnQod2luZG93RWxlbWVudCk7XG4gICAgfVxuICB9O1xuXG4gIHdpbmRvd0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgYnJpbmdUb0Zyb250SGFuZGxlcik7XG4gIC8vIEd1YXJkYXIgcmVmZXJlbmNpYSBkZWwgaGFuZGxlciBwYXJhIHBvZGVyIHJlbW92ZXJsbyBkZXNwdVx1MDBFOXNcbiAgd2luZG93RWxlbWVudC5fYnJpbmdUb0Zyb250SGFuZGxlciA9IGJyaW5nVG9Gcm9udEhhbmRsZXI7XG5cbiAgLy8gRXN0YWJsZWNlciB6LWluZGV4IGluaWNpYWwgc2kgbm8gdGllbmUgdW5vXG4gIGlmICghd2luZG93RWxlbWVudC5zdHlsZS56SW5kZXgpIHtcbiAgICB3aW5kb3dFbGVtZW50LnN0eWxlLnpJbmRleCA9IGN1cnJlbnRNYXhaSW5kZXgrKztcblxuICAgIC8vIFNpIGxhIHZlbnRhbmEgZXN0XHUwMEUxIGRlbnRybyBkZSB1biBTaGFkb3cgRE9NLCBzaW5jcm9uaXphciB0YW1iaVx1MDBFOW4gZWwgaG9zdFxuICAgIGNvbnN0IHJvb3QgPSB3aW5kb3dFbGVtZW50LmdldFJvb3ROb2RlICYmIHdpbmRvd0VsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbiAgICBpZiAocm9vdCAmJiByb290Lmhvc3QgJiYgcm9vdC5ob3N0LnN0eWxlKSB7XG4gICAgICByb290Lmhvc3Quc3R5bGUuekluZGV4ID0gd2luZG93RWxlbWVudC5zdHlsZS56SW5kZXg7XG4gICAgfVxuICB9XG5cbiAgLy8gVmVyaWZpY2FyIGVzdGFkbyBpbmljaWFsIGRlIG1vZGFsZXNcbiAgaGFuZGxlV2luZG93c1Zpc2liaWxpdHlPbk1vZGFsKCk7XG5cbiAgZGVidWdMb2coJ1dpbmRvdyByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseScsIHdpbmRvd0VsZW1lbnQpO1xufVxuXG4vKipcbiAqIERlc3JlZ2lzdHJhIHVuYSB2ZW50YW5hIGRlbCBtYW5lam8gZGUgei1pbmRleFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gd2luZG93RWxlbWVudCAtIEVsIGVsZW1lbnRvIGRlIGxhIHZlbnRhbmFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXJXaW5kb3cod2luZG93RWxlbWVudCkge1xuICBpZiAoIXdpbmRvd0VsZW1lbnQpIHJldHVybjtcblxuICB3aW5kb3dFbGVtZW50cy5kZWxldGUod2luZG93RWxlbWVudCk7XG4gIGhpZGRlbldpbmRvd3NCeU1vZGFsLmRlbGV0ZSh3aW5kb3dFbGVtZW50KTtcblxuICAvLyBSZW1vdmVyIGV2ZW50IGxpc3RlbmVyXG4gIGlmICh3aW5kb3dFbGVtZW50Ll9icmluZ1RvRnJvbnRIYW5kbGVyKSB7XG4gICAgd2luZG93RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB3aW5kb3dFbGVtZW50Ll9icmluZ1RvRnJvbnRIYW5kbGVyKTtcbiAgICBkZWxldGUgd2luZG93RWxlbWVudC5fYnJpbmdUb0Zyb250SGFuZGxlcjtcbiAgfVxufVxuXG4vKipcbiAqIFRyYWUgdW5hIHZlbnRhbmEgYWwgZnJlbnRlIChzb2xvIHNpIG5vIGhheSBtb2RhbGVzIGFiaWVydG9zKVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gd2luZG93RWxlbWVudCAtIEVsIGVsZW1lbnRvIGRlIGxhIHZlbnRhbmEgYSB0cmFlciBhbCBmcmVudGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJyaW5nV2luZG93VG9Gcm9udCh3aW5kb3dFbGVtZW50KSB7XG4gIGlmICghd2luZG93RWxlbWVudCB8fCAhd2luZG93RWxlbWVudHMuaGFzKHdpbmRvd0VsZW1lbnQpKSByZXR1cm47XG5cbiAgLy8gTm8gdHJhZXIgYWwgZnJlbnRlIHNpIGhheSB1biBtb2RhbCBhYmllcnRvXG4gIGlmIChpc0FueU1vZGFsT3BlbigpKSByZXR1cm47XG5cbiAgLy8gSW5jcmVtZW50YXIgZWwgei1pbmRleCBtXHUwMEUxeGltbyB5IGFzaWduYXJsbyBhIGVzdGEgdmVudGFuYVxuICBjdXJyZW50TWF4WkluZGV4Kys7XG4gIHdpbmRvd0VsZW1lbnQuc3R5bGUuekluZGV4ID0gY3VycmVudE1heFpJbmRleDtcblxuICAvLyBTaSBlc3RcdTAwRTEgZGVudHJvIGRlIHVuIFNoYWRvdyBET00sIHRhbWJpXHUwMEU5biBlbGV2YXIgZWwgaG9zdCBwYXJhIHF1ZSBlbCBzdGFja2luZyBmdW5jaW9uZSBlbnRyZSBjb250ZXh0b3NcbiAgY29uc3Qgcm9vdCA9IHdpbmRvd0VsZW1lbnQuZ2V0Um9vdE5vZGUgJiYgd2luZG93RWxlbWVudC5nZXRSb290Tm9kZSgpO1xuICBpZiAocm9vdCAmJiByb290Lmhvc3QgJiYgcm9vdC5ob3N0LnN0eWxlKSB7XG4gICAgcm9vdC5ob3N0LnN0eWxlLnpJbmRleCA9IGN1cnJlbnRNYXhaSW5kZXg7XG4gIH1cbn1cblxuLyoqXG4gKiBGdWVyemEgbGEgYWN0dWFsaXphY2lcdTAwRjNuIGRlbCBlc3RhZG8gZGUgdmlzaWJpbGlkYWQgZGUgbGFzIHZlbnRhbmFzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWZyZXNoV2luZG93c1Zpc2liaWxpdHkoKSB7XG4gIGhhbmRsZVdpbmRvd3NWaXNpYmlsaXR5T25Nb2RhbCgpO1xufVxuXG4vKipcbiAqIE9idGllbmUgZWwgei1pbmRleCBtXHUwMEUxeGltbyBhY3R1YWxcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gRWwgei1pbmRleCBtXHUwMEUxeGltbyBhY3R1YWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRNYXhaSW5kZXgoKSB7XG4gIHJldHVybiBjdXJyZW50TWF4WkluZGV4O1xufVxuXG4vKipcbiAqIEVzdGFibGVjZSB1biB6LWluZGV4IG1cdTAwRURuaW1vIHBhcmEgZnV0dXJhcyB2ZW50YW5hc1xuICogQHBhcmFtIHtudW1iZXJ9IG1pblpJbmRleCAtIEVsIHotaW5kZXggbVx1MDBFRG5pbW9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldE1pblpJbmRleChtaW5aSW5kZXgpIHtcbiAgaWYgKG1pblpJbmRleCA+IGN1cnJlbnRNYXhaSW5kZXgpIHtcbiAgICBjdXJyZW50TWF4WkluZGV4ID0gbWluWkluZGV4O1xuICB9XG59XG5cbi8qKlxuICogRnVuY2lcdTAwRjNuIHBhcmEgZGVidWcgbWFudWFsIC0gbGlzdGFyIGVzdGFkbyBhY3R1YWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnTW9kYWxTdGF0ZSgpIHtcbiAgY29uc29sZS5sb2coJz09PSBNT0RBTCBNQU5BR0VSIERFQlVHIFNUQVRFID09PScpO1xuICBjb25zb2xlLmxvZygnRGVidWcgZW5hYmxlZDonLCBERUJVR19NT0RBTF9NQU5BR0VSKTtcbiAgY29uc29sZS5sb2coJ09ic2VydmVycyBzZXR1cDonLCBtb2RhbE9ic2VydmVyc1NldHVwKTtcbiAgY29uc29sZS5sb2coJ1dpbmRvd3MgcmVnaXN0ZXJlZDonLCB3aW5kb3dFbGVtZW50cy5zaXplKTtcbiAgY29uc29sZS5sb2coJ1dpbmRvd3MgaGlkZGVuIGJ5IG1vZGFsOicsIGhpZGRlbldpbmRvd3NCeU1vZGFsLnNpemUpO1xuICBjb25zb2xlLmxvZygnQ3VycmVudCBtYXggWi1JbmRleDonLCBjdXJyZW50TWF4WkluZGV4KTtcbiAgY29uc29sZS5sb2coJ0FueSBtb2RhbCBvcGVuOicsIGlzQW55TW9kYWxPcGVuKCkpO1xuXG4gIC8vIExpc3RhciB0b2RhcyBsYXMgdmVudGFuYXMgcmVnaXN0cmFkYXNcbiAgY29uc29sZS5sb2coJ1xcbi0tLSBSZWdpc3RlcmVkIFdpbmRvd3MgLS0tJyk7XG4gIHdpbmRvd0VsZW1lbnRzLmZvckVhY2goKHdpbmRvdywgaW5kZXgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgV2luZG93ICR7aW5kZXh9OmAsIHtcbiAgICAgIGVsZW1lbnQ6IHdpbmRvdyxcbiAgICAgIHpJbmRleDogd2luZG93LnN0eWxlLnpJbmRleCxcbiAgICAgIG9wYWNpdHk6IHdpbmRvdy5zdHlsZS5vcGFjaXR5LFxuICAgICAgaXNIaWRkZW46IGhpZGRlbldpbmRvd3NCeU1vZGFsLmhhcyh3aW5kb3cpXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExpc3RhciBtb2RhbGVzIGVuY29udHJhZG9zXG4gIGNvbnNvbGUubG9nKCdcXG4tLS0gQ3VycmVudCBNb2RhbHMgLS0tJyk7XG4gIGNvbnN0IG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpYWxvZy5tb2RhbFtvcGVuXSwgZGlhbG9nW29wZW5dLCAubW9kYWxbb3Blbl0sIC5tb2RhbC5zaG93LCBbcm9sZT1cImRpYWxvZ1wiXScpO1xuICBtb2RhbHMuZm9yRWFjaCgobW9kYWwsIGluZGV4KSA9PiB7XG4gICAgY29uc29sZS5sb2coYE1vZGFsICR7aW5kZXh9OmAsIHtcbiAgICAgIGVsZW1lbnQ6IG1vZGFsLFxuICAgICAgaXNPcGVuOiBtb2RhbC5oYXNBdHRyaWJ1dGUoJ29wZW4nKSB8fCBtb2RhbC5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3cnKSxcbiAgICAgIGRpc3BsYXk6IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG1vZGFsKS5kaXNwbGF5LFxuICAgICAgdmlzaWJpbGl0eTogd2luZG93LmdldENvbXB1dGVkU3R5bGUobW9kYWwpLnZpc2liaWxpdHlcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8vID09PSBFWFBPU0lDSVx1MDBEM04gR0xPQkFMIEFVVE9NXHUwMEMxVElDQSA9PT1cbi8vIEhhY2VyIGxhcyBmdW5jaW9uZXMgZGlzcG9uaWJsZXMgZ2xvYmFsbWVudGUgcGFyYSBkZWJ1ZyB5IHVzbyBleHRlcm5vXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93LnNldE1vZGFsRGVidWcgPSBzZXRNb2RhbERlYnVnO1xuICB3aW5kb3cuZGVidWdNb2RhbFN0YXRlID0gZGVidWdNb2RhbFN0YXRlO1xuICB3aW5kb3cucmVnaXN0ZXJXaW5kb3cgPSByZWdpc3RlcldpbmRvdztcbiAgd2luZG93LnVucmVnaXN0ZXJXaW5kb3cgPSB1bnJlZ2lzdGVyV2luZG93O1xuXG4gIC8vIFRhbWJpXHUwMEU5biBleHBvbmVyIHZhcmlhYmxlcyBpbnRlcm5hcyBwYXJhIGRlYnVnXG4gIHdpbmRvdy5fX21vZGFsTWFuYWdlckRlYnVnID0ge1xuICAgIHdpbmRvd0VsZW1lbnRzLFxuICAgIGhpZGRlbldpbmRvd3NCeU1vZGFsLFxuICAgIGlzQW55TW9kYWxPcGVuLFxuICAgIHJlZnJlc2hXaW5kb3dzVmlzaWJpbGl0eVxuICB9O1xuXG4gIGNvbnNvbGUubG9nKCdbV2luZG93TWFuYWdlcl0gRnVuY2lvbmVzIGV4cHVlc3RhcyBnbG9iYWxtZW50ZSBhdXRvbVx1MDBFMXRpY2FtZW50ZScpO1xufVxuIiwgImltcG9ydCB7IGxvZyB9IGZyb20gJy4uL2NvcmUvbG9nZ2VyLmpzJztcbmltcG9ydCB7IHJlZ2lzdGVyV2luZG93LCB1bnJlZ2lzdGVyV2luZG93LCBicmluZ1dpbmRvd1RvRnJvbnQgfSBmcm9tICcuLi9jb3JlL3dpbmRvdy1tYW5hZ2VyLmpzJztcblxuLyogZ2xvYmFsIEJsb2IsIFVSTCAqL1xuXG4vKipcbiAqIFZlbnRhbmEgZGUgbG9ncyB1bmlmaWNhZGEgcGFyYSB0b2RvcyBsb3MgYm90c1xuICogQ2FyYWN0ZXJcdTAwRURzdGljYXM6XG4gKiAtIE11ZXN0cmEgbG9ncyBlbiB0aWVtcG8gcmVhbFxuICogLSBSZWRpbWVuc2lvbmFibGUgbWVkaWFudGUgYXJyYXN0cmVcbiAqIC0gQ29udHJvbGVzIHBhcmEgY2VycmFyIHkgZGVzY2FyZ2FyIGxvZ3NcbiAqIC0gUGVyc2lzdGVuY2lhIGRlbCBlc3RhZG8gZW50cmUgc2VzaW9uZXNcbiAqIC0gSW50ZWdyYWNpXHUwMEYzbiBjb24gdG9kb3MgbG9zIGJvdHNcbiAqL1xuXG5jbGFzcyBMb2dXaW5kb3cge1xuICBjb25zdHJ1Y3Rvcihib3ROYW1lID0gJ0JvdCcpIHtcbiAgICB0aGlzLmJvdE5hbWUgPSBib3ROYW1lO1xuICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5sb2dzID0gW107XG4gICAgdGhpcy5tYXhMb2dzID0gMTAwMDsgLy8gTFx1MDBFRG1pdGUgZGUgbG9ncyBwYXJhIGV2aXRhciBwcm9ibGVtYXMgZGUgbWVtb3JpYVxuICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcbiAgICB0aGlzLmxvZ0NvbnRlbnQgPSBudWxsO1xuICAgIHRoaXMuaXNSZXNpemluZyA9IGZhbHNlO1xuICAgIHRoaXMucmVzaXplSGFuZGxlID0gbnVsbDtcbiAgICB0aGlzLm9yaWdpbmFsQ29uc29sZSA9IHt9O1xuICAgIFxuICAgIC8vIENvbmZpZ3VyYWNpXHUwMEYzbiBwb3IgZGVmZWN0b1xuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgd2lkdGg6IDYwMCxcbiAgICAgIGhlaWdodDogNDAwLFxuICAgICAgeDogd2luZG93LmlubmVyV2lkdGggLSA2MjAsXG4gICAgICB5OiAyMCxcbiAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmxvYWRDb25maWcoKTtcbiAgICB0aGlzLmNyZWF0ZVdpbmRvdygpO1xuICAgIHRoaXMuc2V0dXBMb2dJbnRlcmNlcHRpb24oKTtcbiAgICB0aGlzLnNldHVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYXJnYSBsYSBjb25maWd1cmFjaVx1MDBGM24gZ3VhcmRhZGEgZGVsIGxvY2FsU3RvcmFnZVxuICAgKi9cbiAgbG9hZENvbmZpZygpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2F2ZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgd3BsYWNlLWxvZy13aW5kb3ctJHt0aGlzLmJvdE5hbWV9YCk7XG4gICAgICBpZiAoc2F2ZWQpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSB7IC4uLnRoaXMuY29uZmlnLCAuLi5KU09OLnBhcnNlKHNhdmVkKSB9O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2coJ0Vycm9yIGNhcmdhbmRvIGNvbmZpZ3VyYWNpXHUwMEYzbiBkZSB2ZW50YW5hIGRlIGxvZ3M6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHdWFyZGEgbGEgY29uZmlndXJhY2lcdTAwRjNuIGFjdHVhbCBlbiBsb2NhbFN0b3JhZ2VcbiAgICovXG4gIHNhdmVDb25maWcoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGB3cGxhY2UtbG9nLXdpbmRvdy0ke3RoaXMuYm90TmFtZX1gLCBKU09OLnN0cmluZ2lmeSh0aGlzLmNvbmZpZykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2coJ0Vycm9yIGd1YXJkYW5kbyBjb25maWd1cmFjaVx1MDBGM24gZGUgdmVudGFuYSBkZSBsb2dzOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYSBsYSBlc3RydWN0dXJhIEhUTUwgZGUgbGEgdmVudGFuYVxuICAgKi9cbiAgY3JlYXRlV2luZG93KCkge1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gJ3dwbGFjZS1sb2ctd2luZG93JztcbiAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgbGVmdDogJHt0aGlzLmNvbmZpZy54fXB4O1xuICAgICAgdG9wOiAke3RoaXMuY29uZmlnLnl9cHg7XG4gICAgICB3aWR0aDogJHt0aGlzLmNvbmZpZy53aWR0aH1weDtcbiAgICAgIGhlaWdodDogJHt0aGlzLmNvbmZpZy5oZWlnaHR9cHg7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOSk7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICB6LWluZGV4OiAxMDAwMDE7XG4gICAgICBkaXNwbGF5OiAke3RoaXMuY29uZmlnLnZpc2libGUgPyAnZmxleCcgOiAnbm9uZSd9O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcbiAgICAgIGJveC1zaGFkb3c6IDAgOHB4IDMycHggcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgICAgZm9udC1mYW1pbHk6ICdDb25zb2xhcycsICdNb25hY28nLCAnQ291cmllciBOZXcnLCBtb25vc3BhY2U7XG4gICAgICBjb2xvcjogI2ZmZjtcbiAgICAgIHJlc2l6ZTogbm9uZTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgYDtcblxuICAgIC8vIEhlYWRlciBjb24gdFx1MDBFRHR1bG8geSBjb250cm9sZXNcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBoZWFkZXIuY2xhc3NOYW1lID0gJ2xvZy13aW5kb3ctaGVhZGVyJztcbiAgICBoZWFkZXIuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgcGFkZGluZzogOHB4IDEycHg7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpO1xuICAgICAgY3Vyc29yOiBtb3ZlO1xuICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICBib3JkZXItcmFkaXVzOiA3cHggN3B4IDAgMDtcbiAgICBgO1xuXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9IGBcdUQ4M0RcdURDQ0IgTG9ncyAtICR7dGhpcy5ib3ROYW1lfWA7XG4gICAgdGl0bGUuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgY29sb3I6ICNlMmU4ZjA7XG4gICAgYDtcblxuICAgIGNvbnN0IGNvbnRyb2xzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udHJvbHMuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBnYXA6IDhweDtcbiAgICBgO1xuXG4gICAgLy8gQm90XHUwMEYzbiBkZSBkZXNjYXJnYVxuICAgIGNvbnN0IGRvd25sb2FkQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgZG93bmxvYWRCdG4uaW5uZXJIVE1MID0gJ1x1RDgzRFx1RENCRSc7XG4gICAgZG93bmxvYWRCdG4udGl0bGUgPSAnRGVzY2FyZ2FyIGxvZ3MnO1xuICAgIGRvd25sb2FkQnRuLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDM0LCAxOTcsIDk0LCAwLjgpO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgd2lkdGg6IDI0cHg7XG4gICAgICBoZWlnaHQ6IDI0cHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjJzO1xuICAgIGA7XG4gICAgZG93bmxvYWRCdG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICAgIGRvd25sb2FkQnRuLnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgzNCwgMTk3LCA5NCwgMSknO1xuICAgIH0pO1xuICAgIGRvd25sb2FkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICBkb3dubG9hZEJ0bi5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYmEoMzQsIDE5NywgOTQsIDAuOCknO1xuICAgIH0pO1xuICAgIGRvd25sb2FkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5kb3dubG9hZExvZ3MoKSk7XG5cbiAgICAvLyBCb3RcdTAwRjNuIGRlIGNlcnJhclxuICAgIGNvbnN0IGNsb3NlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgY2xvc2VCdG4uaW5uZXJIVE1MID0gJ1x1MjcxNSc7XG4gICAgY2xvc2VCdG4udGl0bGUgPSAnQ2VycmFyIHZlbnRhbmEnO1xuICAgIGNsb3NlQnRuLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDIzOSwgNjgsIDY4LCAwLjgpO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgd2lkdGg6IDI0cHg7XG4gICAgICBoZWlnaHQ6IDI0cHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjJzO1xuICAgIGA7XG4gICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICAgIGNsb3NlQnRuLnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgyMzksIDY4LCA2OCwgMSknO1xuICAgIH0pO1xuICAgIGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICBjbG9zZUJ0bi5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYmEoMjM5LCA2OCwgNjgsIDAuOCknO1xuICAgIH0pO1xuICAgIGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5oaWRlKCkpO1xuXG4gICAgY29udHJvbHMuYXBwZW5kQ2hpbGQoZG93bmxvYWRCdG4pO1xuICAgIGNvbnRyb2xzLmFwcGVuZENoaWxkKGNsb3NlQnRuKTtcbiAgICBoZWFkZXIuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgIGhlYWRlci5hcHBlbmRDaGlsZChjb250cm9scyk7XG5cbiAgICAvLyBDb250ZW5pZG8gZGUgbG9nc1xuICAgIHRoaXMubG9nQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMubG9nQ29udGVudC5jbGFzc05hbWUgPSAnbG9nLXdpbmRvdy1jb250ZW50JztcbiAgICB0aGlzLmxvZ0NvbnRlbnQuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgIGZsZXg6IDE7XG4gICAgICBwYWRkaW5nOiA4cHg7XG4gICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7XG4gICAgYDtcblxuICAgIC8vIEhhbmRsZSBkZSByZWRpbWVuc2lvbmFtaWVudG9cbiAgICB0aGlzLnJlc2l6ZUhhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMucmVzaXplSGFuZGxlLmNsYXNzTmFtZSA9ICdsb2ctd2luZG93LXJlc2l6ZS1oYW5kbGUnO1xuICAgIHRoaXMucmVzaXplSGFuZGxlLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBib3R0b206IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgY3Vyc29yOiBzZS1yZXNpemU7XG4gICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCB0cmFuc3BhcmVudCAzMCUsIHJnYmEoMjU1LDI1NSwyNTUsMC4zKSAzMCUsIHJnYmEoMjU1LDI1NSwyNTUsMC4zKSA3MCUsIHRyYW5zcGFyZW50IDcwJSk7XG4gICAgICBib3JkZXItcmFkaXVzOiAwIDAgOHB4IDA7XG4gICAgYDtcblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRlcik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5sb2dDb250ZW50KTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnJlc2l6ZUhhbmRsZSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG5cbiAgICAvLyBSZWdpc3RyYXIgdmVudGFuYSBwYXJhIG1hbmVqbyBkZSB6LWluZGV4XG4gICAgcmVnaXN0ZXJXaW5kb3codGhpcy5jb250YWluZXIpO1xuXG4gICAgLy8gQ29uZmlndXJhciBhcnJhc3RyZSBkZSB2ZW50YW5hXG4gICAgdGhpcy5zZXR1cERyYWdnaW5nKGhlYWRlcik7XG4gICAgLy8gQ29uZmlndXJhciByZWRpbWVuc2lvbmFtaWVudG9cbiAgICB0aGlzLnNldHVwUmVzaXppbmcoKTtcblxuICAgIHRoaXMuaXNWaXNpYmxlID0gdGhpcy5jb25maWcudmlzaWJsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmEgZWwgYXJyYXN0cmUgZGUgbGEgdmVudGFuYVxuICAgKi9cbiAgc2V0dXBEcmFnZ2luZyhoZWFkZXIpIHtcbiAgICBsZXQgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIGxldCBkcmFnT2Zmc2V0ID0geyB4OiAwLCB5OiAwIH07XG5cbiAgICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHtcbiAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnQlVUVE9OJykgcmV0dXJuO1xuICAgICAgaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICBkcmFnT2Zmc2V0LnggPSBlLmNsaWVudFggLSB0aGlzLmNvbnRhaW5lci5vZmZzZXRMZWZ0O1xuICAgICAgZHJhZ09mZnNldC55ID0gZS5jbGllbnRZIC0gdGhpcy5jb250YWluZXIub2Zmc2V0VG9wO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlRHJhZyk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3RvcERyYWcpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgaGFuZGxlRHJhZyA9IChlKSA9PiB7XG4gICAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICAgIGNvbnN0IG5ld1ggPSBNYXRoLm1heCgwLCBNYXRoLm1pbih3aW5kb3cuaW5uZXJXaWR0aCAtIHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoLCBlLmNsaWVudFggLSBkcmFnT2Zmc2V0LngpKTtcbiAgICAgIGNvbnN0IG5ld1kgPSBNYXRoLm1heCgwLCBNYXRoLm1pbih3aW5kb3cuaW5uZXJIZWlnaHQgLSB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQsIGUuY2xpZW50WSAtIGRyYWdPZmZzZXQueSkpO1xuICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUubGVmdCA9IG5ld1ggKyAncHgnO1xuICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUudG9wID0gbmV3WSArICdweCc7XG4gICAgICB0aGlzLmNvbmZpZy54ID0gbmV3WDtcbiAgICAgIHRoaXMuY29uZmlnLnkgPSBuZXdZO1xuICAgIH07XG5cbiAgICBjb25zdCBzdG9wRHJhZyA9ICgpID0+IHtcbiAgICAgIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZURyYWcpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0b3BEcmFnKTtcbiAgICAgIHRoaXMuc2F2ZUNvbmZpZygpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJhIGVsIHJlZGltZW5zaW9uYW1pZW50byBkZSBsYSB2ZW50YW5hXG4gICAqL1xuICBzZXR1cFJlc2l6aW5nKCkge1xuICAgIGxldCBpc1Jlc2l6aW5nID0gZmFsc2U7XG4gICAgbGV0IHN0YXJ0WCwgc3RhcnRZLCBzdGFydFdpZHRoLCBzdGFydEhlaWdodDtcblxuICAgIHRoaXMucmVzaXplSGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7XG4gICAgICBpc1Jlc2l6aW5nID0gdHJ1ZTtcbiAgICAgIHN0YXJ0WCA9IGUuY2xpZW50WDtcbiAgICAgIHN0YXJ0WSA9IGUuY2xpZW50WTtcbiAgICAgIHN0YXJ0V2lkdGggPSBwYXJzZUludChkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuY29udGFpbmVyKS53aWR0aCwgMTApO1xuICAgICAgc3RhcnRIZWlnaHQgPSBwYXJzZUludChkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuY29udGFpbmVyKS5oZWlnaHQsIDEwKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3RvcFJlc2l6ZSk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoZSkgPT4ge1xuICAgICAgaWYgKCFpc1Jlc2l6aW5nKSByZXR1cm47XG4gICAgICBjb25zdCBuZXdXaWR0aCA9IE1hdGgubWF4KDMwMCwgc3RhcnRXaWR0aCArIGUuY2xpZW50WCAtIHN0YXJ0WCk7XG4gICAgICBjb25zdCBuZXdIZWlnaHQgPSBNYXRoLm1heCgyMDAsIHN0YXJ0SGVpZ2h0ICsgZS5jbGllbnRZIC0gc3RhcnRZKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnO1xuICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgJ3B4JztcbiAgICAgIHRoaXMuY29uZmlnLndpZHRoID0gbmV3V2lkdGg7XG4gICAgICB0aGlzLmNvbmZpZy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgfTtcblxuICAgIGNvbnN0IHN0b3BSZXNpemUgPSAoKSA9PiB7XG4gICAgICBpc1Jlc2l6aW5nID0gZmFsc2U7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0b3BSZXNpemUpO1xuICAgICAgdGhpcy5zYXZlQ29uZmlnKCk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmEgbGEgaW50ZXJjZXB0YWNpXHUwMEYzbiBkZSBsb2dzIGRlIGNvbnNvbGFcbiAgICovXG4gIHNldHVwTG9nSW50ZXJjZXB0aW9uKCkge1xuICAgIC8vIEd1YXJkYXIgcmVmZXJlbmNpYXMgb3JpZ2luYWxlc1xuICAgIHRoaXMub3JpZ2luYWxDb25zb2xlID0ge1xuICAgICAgbG9nOiBjb25zb2xlLmxvZyxcbiAgICAgIGluZm86IGNvbnNvbGUuaW5mbyxcbiAgICAgIHdhcm46IGNvbnNvbGUud2FybixcbiAgICAgIGVycm9yOiBjb25zb2xlLmVycm9yLFxuICAgICAgZGVidWc6IGNvbnNvbGUuZGVidWdcbiAgICB9O1xuXG4gICAgLy8gSW50ZXJjZXB0YXIgY29uc29sZS5sb2dcbiAgICBjb25zb2xlLmxvZyA9ICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLm9yaWdpbmFsQ29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgICB0aGlzLmFkZExvZygnbG9nJywgYXJncyk7XG4gICAgfTtcblxuICAgIC8vIEludGVyY2VwdGFyIGNvbnNvbGUuaW5mb1xuICAgIGNvbnNvbGUuaW5mbyA9ICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLm9yaWdpbmFsQ29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgICAgdGhpcy5hZGRMb2coJ2luZm8nLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgLy8gSW50ZXJjZXB0YXIgY29uc29sZS53YXJuXG4gICAgY29uc29sZS53YXJuID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHRoaXMub3JpZ2luYWxDb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgICB0aGlzLmFkZExvZygnd2FybicsIGFyZ3MpO1xuICAgIH07XG5cbiAgICAvLyBJbnRlcmNlcHRhciBjb25zb2xlLmVycm9yXG4gICAgY29uc29sZS5lcnJvciA9ICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLm9yaWdpbmFsQ29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgIHRoaXMuYWRkTG9nKCdlcnJvcicsIGFyZ3MpO1xuICAgIH07XG5cbiAgICAvLyBJbnRlcmNlcHRhciBjb25zb2xlLmRlYnVnXG4gICAgY29uc29sZS5kZWJ1ZyA9ICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLm9yaWdpbmFsQ29uc29sZS5kZWJ1Zy5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgIHRoaXMuYWRkTG9nKCdkZWJ1ZycsIGFyZ3MpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQVx1MDBGMWFkZSB1biBsb2cgYSBsYSB2ZW50YW5hXG4gICAqL1xuICBhZGRMb2codHlwZSwgYXJncykge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCk7XG4gICAgY29uc3QgbWVzc2FnZSA9IGFyZ3MubWFwKGFyZyA9PiBcbiAgICAgIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnID8gSlNPTi5zdHJpbmdpZnkoYXJnLCBudWxsLCAyKSA6IFN0cmluZyhhcmcpXG4gICAgKS5qb2luKCcgJyk7XG5cbiAgICBjb25zdCBsb2dFbnRyeSA9IHtcbiAgICAgIHRpbWVzdGFtcCxcbiAgICAgIHR5cGUsXG4gICAgICBtZXNzYWdlLFxuICAgICAgcmF3OiBhcmdzXG4gICAgfTtcblxuICAgIHRoaXMubG9ncy5wdXNoKGxvZ0VudHJ5KTtcblxuICAgIC8vIExpbWl0YXIgblx1MDBGQW1lcm8gZGUgbG9nc1xuICAgIGlmICh0aGlzLmxvZ3MubGVuZ3RoID4gdGhpcy5tYXhMb2dzKSB7XG4gICAgICB0aGlzLmxvZ3Muc2hpZnQoKTtcbiAgICB9XG5cbiAgICAvLyBBY3R1YWxpemFyIFVJIHNpIGVzdFx1MDBFMSB2aXNpYmxlXG4gICAgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUxvZ0Rpc3BsYXkoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWN0dWFsaXphIGxhIHZpc3VhbGl6YWNpXHUwMEYzbiBkZSBsb2dzXG4gICAqL1xuICB1cGRhdGVMb2dEaXNwbGF5KCkge1xuICAgIGlmICghdGhpcy5sb2dDb250ZW50KSByZXR1cm47XG5cbiAgICBjb25zdCBsb2dIdG1sID0gdGhpcy5sb2dzLm1hcChlbnRyeSA9PiB7XG4gICAgICBjb25zdCBjb2xvciA9IHRoaXMuZ2V0TG9nQ29sb3IoZW50cnkudHlwZSk7XG4gICAgICByZXR1cm4gYDxkaXYgc3R5bGU9XCJjb2xvcjogJHtjb2xvcn07IG1hcmdpbi1ib3R0b206IDJweDtcIj5bJHtlbnRyeS50aW1lc3RhbXB9XSAke2VudHJ5Lm1lc3NhZ2V9PC9kaXY+YDtcbiAgICB9KS5qb2luKCcnKTtcblxuICAgIHRoaXMubG9nQ29udGVudC5pbm5lckhUTUwgPSBsb2dIdG1sO1xuICAgIFxuICAgIC8vIEF1dG8tc2Nyb2xsIGFsIGZpbmFsXG4gICAgdGhpcy5sb2dDb250ZW50LnNjcm9sbFRvcCA9IHRoaXMubG9nQ29udGVudC5zY3JvbGxIZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogT2J0aWVuZSBlbCBjb2xvciBwYXJhIGNhZGEgdGlwbyBkZSBsb2dcbiAgICovXG4gIGdldExvZ0NvbG9yKHR5cGUpIHtcbiAgICBjb25zdCBjb2xvcnMgPSB7XG4gICAgICBsb2c6ICcjZTJlOGYwJyxcbiAgICAgIGluZm86ICcjNjBhNWZhJyxcbiAgICAgIHdhcm46ICcjZmJiZjI0JyxcbiAgICAgIGVycm9yOiAnI2Y4NzE3MScsXG4gICAgICBkZWJ1ZzogJyNhNzhiZmEnXG4gICAgfTtcbiAgICByZXR1cm4gY29sb3JzW3R5cGVdIHx8IGNvbG9ycy5sb2c7XG4gIH1cblxuICAvKipcbiAgICogRGVzY2FyZ2EgbG9zIGxvZ3MgY29tbyBhcmNoaXZvXG4gICAqL1xuICBkb3dubG9hZExvZ3MoKSB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBkYXRlU3RyID0gbm93LnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICBjb25zdCB0aW1lU3RyID0gbm93LnRvVGltZVN0cmluZygpLnNwbGl0KCcgJylbMF0ucmVwbGFjZSgvOi9nLCAnLScpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gYGxvZ18ke3RoaXMuYm90TmFtZX1fJHtkYXRlU3RyfV8ke3RpbWVTdHJ9LmxvZ2A7XG5cbiAgICBjb25zdCBsb2dUZXh0ID0gdGhpcy5sb2dzLm1hcChlbnRyeSA9PiBcbiAgICAgIGBbJHtlbnRyeS50aW1lc3RhbXB9XSBbJHtlbnRyeS50eXBlLnRvVXBwZXJDYXNlKCl9XSAke2VudHJ5Lm1lc3NhZ2V9YFxuICAgICkuam9pbignXFxuJyk7XG5cbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2xvZ1RleHRdLCB7IHR5cGU6ICd0ZXh0L3BsYWluJyB9KTtcbiAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIFxuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgYS5ocmVmID0gdXJsO1xuICAgIGEuZG93bmxvYWQgPSBmaWxlbmFtZTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xuICAgIGEuY2xpY2soKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpO1xuICAgIFVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcblxuICAgIGxvZyhgXHVEODNEXHVEQ0U1IExvZ3MgZGVzY2FyZ2Fkb3MgY29tbzogJHtmaWxlbmFtZX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWVzdHJhIGxhIHZlbnRhbmEgZGUgbG9nc1xuICAgKi9cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICBicmluZ1dpbmRvd1RvRnJvbnQodGhpcy5jb250YWluZXIpO1xuICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgdGhpcy5jb25maWcudmlzaWJsZSA9IHRydWU7XG4gICAgICB0aGlzLnVwZGF0ZUxvZ0Rpc3BsYXkoKTtcbiAgICAgIHRoaXMuc2F2ZUNvbmZpZygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPY3VsdGEgbGEgdmVudGFuYSBkZSBsb2dzXG4gICAqL1xuICBoaWRlKCkge1xuICAgIGlmICh0aGlzLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLmNvbmZpZy52aXNpYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLnNhdmVDb25maWcoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWx0ZXJuYSBsYSB2aXNpYmlsaWRhZCBkZSBsYSB2ZW50YW5hXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpbXBpYSB0b2RvcyBsb3MgbG9nc1xuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5sb2dzID0gW107XG4gICAgaWYgKHRoaXMubG9nQ29udGVudCkge1xuICAgICAgdGhpcy5sb2dDb250ZW50LmlubmVySFRNTCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmEgbG9zIGV2ZW50IGxpc3RlbmVycyBnbG9iYWxlc1xuICAgKi9cbiAgc2V0dXBFdmVudExpc3RlbmVycygpIHtcbiAgICAvLyBBanVzdGFyIHBvc2ljaVx1MDBGM24gYWwgcmVkaW1lbnNpb25hciB2ZW50YW5hXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICBjb25zdCBtYXhYID0gd2luZG93LmlubmVyV2lkdGggLSB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgY29uc3QgbWF4WSA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHRoaXMuY29udGFpbmVyLm9mZnNldEhlaWdodDtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy54ID4gbWF4WCkge1xuICAgICAgICAgIHRoaXMuY29uZmlnLnggPSBNYXRoLm1heCgwLCBtYXhYKTtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gdGhpcy5jb25maWcueCArICdweCc7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy55ID4gbWF4WSkge1xuICAgICAgICAgIHRoaXMuY29uZmlnLnkgPSBNYXRoLm1heCgwLCBtYXhZKTtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS50b3AgPSB0aGlzLmNvbmZpZy55ICsgJ3B4JztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zYXZlQ29uZmlnKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJ1eWUgbGEgdmVudGFuYSB5IHJlc3RhdXJhIGNvbnNvbGUgb3JpZ2luYWxcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgLy8gUmVzdGF1cmFyIGNvbnNvbGUgb3JpZ2luYWxcbiAgICBpZiAodGhpcy5vcmlnaW5hbENvbnNvbGUubG9nKSB7XG4gICAgICBjb25zb2xlLmxvZyA9IHRoaXMub3JpZ2luYWxDb25zb2xlLmxvZztcbiAgICAgIGNvbnNvbGUuaW5mbyA9IHRoaXMub3JpZ2luYWxDb25zb2xlLmluZm87XG4gICAgICBjb25zb2xlLndhcm4gPSB0aGlzLm9yaWdpbmFsQ29uc29sZS53YXJuO1xuICAgICAgY29uc29sZS5lcnJvciA9IHRoaXMub3JpZ2luYWxDb25zb2xlLmVycm9yO1xuICAgICAgY29uc29sZS5kZWJ1ZyA9IHRoaXMub3JpZ2luYWxDb25zb2xlLmRlYnVnO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZXIgdmVudGFuYSBkZWwgRE9NXG4gICAgaWYgKHRoaXMuY29udGFpbmVyICYmIHRoaXMuY29udGFpbmVyLnBhcmVudE5vZGUpIHtcbiAgICAgIC8vIERlc3JlZ2lzdHJhciB2ZW50YW5hIGRlbCBnZXN0b3JcbiAgICAgIHVucmVnaXN0ZXJXaW5kb3codGhpcy5jb250YWluZXIpO1xuICAgICAgdGhpcy5jb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xuICAgIHRoaXMubG9nQ29udGVudCA9IG51bGw7XG4gICAgdGhpcy5sb2dzID0gW107XG4gIH1cbn1cblxuLy8gSW5zdGFuY2lhIGdsb2JhbCBwYXJhIGdlc3Rpb25hciB2ZW50YW5hcyBkZSBsb2dzXG53aW5kb3cuX193cGxhY2VMb2dXaW5kb3dzID0gd2luZG93Ll9fd3BsYWNlTG9nV2luZG93cyB8fCB7fTtcblxuLyoqXG4gKiBDcmVhIG8gb2J0aWVuZSB1bmEgdmVudGFuYSBkZSBsb2dzIHBhcmEgdW4gYm90IGVzcGVjXHUwMEVEZmljb1xuICogQHBhcmFtIHtzdHJpbmd9IGJvdE5hbWUgLSBOb21icmUgZGVsIGJvdFxuICogQHJldHVybnMge0xvZ1dpbmRvd30gLSBJbnN0YW5jaWEgZGUgbGEgdmVudGFuYSBkZSBsb2dzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dXaW5kb3coYm90TmFtZSkge1xuICBpZiAoIXdpbmRvdy5fX3dwbGFjZUxvZ1dpbmRvd3NbYm90TmFtZV0pIHtcbiAgICB3aW5kb3cuX193cGxhY2VMb2dXaW5kb3dzW2JvdE5hbWVdID0gbmV3IExvZ1dpbmRvdyhib3ROYW1lKTtcbiAgfVxuICByZXR1cm4gd2luZG93Ll9fd3BsYWNlTG9nV2luZG93c1tib3ROYW1lXTtcbn1cblxuLyoqXG4gKiBPYnRpZW5lIGxhIHZlbnRhbmEgZGUgbG9ncyBkZSB1biBib3QgZXNwZWNcdTAwRURmaWNvXG4gKiBAcGFyYW0ge3N0cmluZ30gYm90TmFtZSAtIE5vbWJyZSBkZWwgYm90XG4gKiBAcmV0dXJucyB7TG9nV2luZG93fG51bGx9IC0gSW5zdGFuY2lhIGRlIGxhIHZlbnRhbmEgZGUgbG9ncyBvIG51bGwgc2kgbm8gZXhpc3RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2dXaW5kb3coYm90TmFtZSkge1xuICByZXR1cm4gd2luZG93Ll9fd3BsYWNlTG9nV2luZG93c1tib3ROYW1lXSB8fCBudWxsO1xufVxuXG4vKipcbiAqIERlc3RydXllIGxhIHZlbnRhbmEgZGUgbG9ncyBkZSB1biBib3QgZXNwZWNcdTAwRURmaWNvXG4gKiBAcGFyYW0ge3N0cmluZ30gYm90TmFtZSAtIE5vbWJyZSBkZWwgYm90XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95TG9nV2luZG93KGJvdE5hbWUpIHtcbiAgaWYgKHdpbmRvdy5fX3dwbGFjZUxvZ1dpbmRvd3NbYm90TmFtZV0pIHtcbiAgICB3aW5kb3cuX193cGxhY2VMb2dXaW5kb3dzW2JvdE5hbWVdLmRlc3Ryb3koKTtcbiAgICBkZWxldGUgd2luZG93Ll9fd3BsYWNlTG9nV2luZG93c1tib3ROYW1lXTtcbiAgfVxufVxuXG4vKipcbiAqIERlc3RydXllIHRvZGFzIGxhcyB2ZW50YW5hcyBkZSBsb2dzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95QWxsTG9nV2luZG93cygpIHtcbiAgT2JqZWN0LmtleXMod2luZG93Ll9fd3BsYWNlTG9nV2luZG93cykuZm9yRWFjaChib3ROYW1lID0+IHtcbiAgICBkZXN0cm95TG9nV2luZG93KGJvdE5hbWUpO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgTG9nV2luZG93IH07IiwgIi8qKlxuICogTVx1MDBGM2R1bG8gZGUgdmVudGFuYSBkZSBsb2dzIHVuaWZpY2FkYVxuICogRXhwb3J0YSBsYXMgZnVuY2lvbmVzIHByaW5jaXBhbGVzIHBhcmEgZ2VzdGlvbmFyIHZlbnRhbmFzIGRlIGxvZ3NcbiAqL1xuXG5leHBvcnQge1xuICBMb2dXaW5kb3csXG4gIGNyZWF0ZUxvZ1dpbmRvdyxcbiAgZ2V0TG9nV2luZG93LFxuICBkZXN0cm95TG9nV2luZG93LFxuICBkZXN0cm95QWxsTG9nV2luZG93c1xufSBmcm9tICcuL2xvZy13aW5kb3cuanMnOyIsICJpbXBvcnQgeyBnZXRTZWN0aW9uIH0gZnJvbSAnLi4vbG9jYWxlcy9pbmRleC5qcyc7XG5cbmV4cG9ydCBjb25zdCBJTUFHRV9ERUZBVUxUUyA9IHtcbiAgU0lURUtFWTogJzB4NEFBQUFBQUJwcUplOEZPME44NHEwRicsXG4gIENPT0xET1dOX0RFRkFVTFQ6IDMxMDAwLFxuICBUUkFOU1BBUkVOQ1lfVEhSRVNIT0xEOiAxMDAsXG4gIFdISVRFX1RIUkVTSE9MRDogMjUwLFxuICBMT0dfSU5URVJWQUw6IDEwLFxuICBUSUxFX1NJWkU6IDMwMDAsXG4gIFBJWEVMU19QRVJfQkFUQ0g6IDIwLFxuICBDSEFSR0VfUkVHRU5fTVM6IDMwMDAwLFxuICBUSEVNRToge1xuICAgIHByaW1hcnk6ICcjMDAwMDAwJyxcbiAgICBzZWNvbmRhcnk6ICcjMTExMTExJyxcbiAgICBhY2NlbnQ6ICcjMjIyMjIyJyxcbiAgICB0ZXh0OiAnI2ZmZmZmZicsXG4gICAgaGlnaGxpZ2h0OiAnIzc3NWNlMycsXG4gICAgc3VjY2VzczogJyMwMGZmMDAnLFxuICAgIGVycm9yOiAnI2ZmMDAwMCcsXG4gICAgd2FybmluZzogJyNmZmFhMDAnXG4gIH1cbn07XG5cbi8vIEVzdGEgZnVuY2lcdTAwRjNuIGFob3JhIHJldG9ybmEgbGFzIHRyYWR1Y2Npb25lcyBkaW5cdTAwRTFtaWNhbWVudGVcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbWFnZVRleHRzKCkge1xuICByZXR1cm4gZ2V0U2VjdGlvbignaW1hZ2UnKTtcbn1cblxuLy8gRnVuY2lcdTAwRjNuIHBhcmEgb2J0ZW5lciB0ZXh0b3MgY29uIHBhclx1MDBFMW1ldHJvc1xuZXhwb3J0IGZ1bmN0aW9uIGdldEltYWdlVGV4dChrZXksIHBhcmFtcyA9IHt9KSB7XG4gIGNvbnN0IHRleHRzID0gZ2V0SW1hZ2VUZXh0cygpO1xuICBsZXQgdGV4dCA9IHRleHRzW2tleV0gfHwga2V5O1xuICBcbiAgLy8gSW50ZXJwb2xhciBwYXJcdTAwRTFtZXRyb3NcbiAgaWYgKHBhcmFtcyAmJiBPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA+IDApIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHsoXFx3KylcXH0vZywgKG1hdGNoLCBwYXJhbUtleSkgPT4ge1xuICAgICAgcmV0dXJuIHBhcmFtc1twYXJhbUtleV0gIT09IHVuZGVmaW5lZCA/IHBhcmFtc1twYXJhbUtleV0gOiBtYXRjaDtcbiAgICB9KTtcbiAgfVxuICBcbiAgcmV0dXJuIHRleHQ7XG59XG5cbi8vIE1hbnRlbmVyIFRFWFRTIHBvciBjb21wYXRpYmlsaWRhZCBwZXJvIG1hcmNhcmxvIGNvbW8gZGVwcmVjYXRlZFxuZXhwb3J0IGNvbnN0IFRFWFRTID0ge1xuICBnZXQgZXMoKSB7XG4gICAgY29uc29sZS53YXJuKCdURVhUUy5lcyBlc3RcdTAwRTEgZGVwcmVjYXRlZC4gVXNhIGdldEltYWdlVGV4dHMoKSBlbiBzdSBsdWdhci4nKTtcbiAgICByZXR1cm4gZ2V0SW1hZ2VUZXh0cygpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgaW1hZ2VTdGF0ZSA9IHtcbiAgcnVubmluZzogZmFsc2UsXG4gIGltYWdlTG9hZGVkOiBmYWxzZSxcbiAgcHJvY2Vzc2luZzogZmFsc2UsXG4gIHRvdGFsUGl4ZWxzOiAwLFxuICBwYWludGVkUGl4ZWxzOiAwLFxuICBhdmFpbGFibGVDb2xvcnM6IFtdLFxuICBjdXJyZW50Q2hhcmdlczogMCxcbiAgY29vbGRvd246IElNQUdFX0RFRkFVTFRTLkNPT0xET1dOX0RFRkFVTFQsXG4gIGltYWdlRGF0YTogbnVsbCxcbiAgc3RvcEZsYWc6IGZhbHNlLFxuICBjb2xvcnNDaGVja2VkOiBmYWxzZSxcbiAgc3RhcnRQb3NpdGlvbjogbnVsbCxcbiAgc2VsZWN0aW5nUG9zaXRpb246IGZhbHNlLFxuICBwb3NpdGlvblRpbWVvdXRJZDogbnVsbCwgLy8gUGFyYSBtYW5lamFyIHRpbWVvdXQgZGUgc2VsZWNjaVx1MDBGM25cbiAgY2xlYW51cE9ic2VydmVyOiBudWxsLCAvLyBQYXJhIGxpbXBpYXIgb2JzZXJ2ZXJzXG4gIHJlZ2lvbjogbnVsbCxcbiAgbWluaW1pemVkOiBmYWxzZSxcbiAgbGFzdFBvc2l0aW9uOiB7IHg6IDAsIHk6IDAgfSxcbiAgZXN0aW1hdGVkVGltZTogMCxcbiAgbGFuZ3VhZ2U6ICdlcycsXG4gIHRpbGVYOiBudWxsLFxuICB0aWxlWTogbnVsbCxcbiAgcGl4ZWxzUGVyQmF0Y2g6IElNQUdFX0RFRkFVTFRTLlBJWEVMU19QRVJfQkFUQ0gsXG4gIHVzZUFsbENoYXJnZXNGaXJzdDogdHJ1ZSwgLy8gVXNhciB0b2RhcyBsYXMgY2FyZ2FzIGVuIGxhIHByaW1lcmEgcGFzYWRhXG4gIGlzRmlyc3RCYXRjaDogdHJ1ZSwgLy8gQ29udHJvbGFyIHNpIGVzIGxhIHByaW1lcmEgcGFzYWRhXG4gIG1heENoYXJnZXM6IDk5OTksIC8vIENhcmdhcyBtXHUwMEUxeGltYXMgZGVsIHVzdWFyaW9cbiAgbmV4dEJhdGNoQ29vbGRvd246IDAsIC8vIFRpZW1wbyBwYXJhIGVsIHNpZ3VpZW50ZSBsb3RlXG4gIGluQ29vbGRvd246IGZhbHNlLFxuICBjb29sZG93bkVuZFRpbWU6IDAsXG4gIHJlbWFpbmluZ1BpeGVsczogW10sXG4gIGxhc3RDaGFyZ2VVcGRhdGU6IDAsXG4gIGNoYXJnZURlY2ltYWxQYXJ0OiAwLFxuICBvcmlnaW5hbEltYWdlTmFtZTogbnVsbCxcbiAgcmV0cnlDb3VudDogMCwgLy8gQ29udGFkb3IgZGUgcmVpbnRlbnRvcyBwYXJhIGVzdGFkXHUwMEVEc3RpY2FzXG4gIC8vIE51ZXZhcyBvcGNpb25lcyBwYXJhIHBhdHJvbmVzXG4gIHBhaW50UGF0dGVybjogJ2xpbmVhcl9zdGFydCcgLy8gUGF0clx1MDBGM24gZGUgcGludGFkbyBwcmVkZXRlcm1pbmFkb1xufTtcbiIsICJpbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vY29yZS9sb2dnZXIuanNcIjtcblxuLyoqXG4gKiBQYXRyb25lcyBkZSBwaW50YWRvIGRpc3BvbmlibGVzXG4gKi9cbmV4cG9ydCBjb25zdCBQQUlOVF9QQVRURVJOUyA9IHtcbiAgTElORUFSX1NUQVJUOiAnbGluZWFyX3N0YXJ0JyxcbiAgTElORUFSX0VORDogJ2xpbmVhcl9lbmQnLCBcbiAgUkFORE9NOiAncmFuZG9tJyxcbiAgQ0VOVEVSX09VVDogJ2NlbnRlcl9vdXQnLFxuICBDT1JORVJTX0ZJUlNUOiAnY29ybmVyc19maXJzdCcsXG4gIFNQSVJBTDogJ3NwaXJhbCcsXG4gIC8vIE51ZXZvcyAoaW5zcGlyYWRvcyBlbiBHdWFyZClcbiAgU05BS0U6ICdzbmFrZScsXG4gIERJQUdPTkFMX1NXRUVQOiAnZGlhZ29uYWxfc3dlZXAnLFxuICBCT1JERVJTOiAnYm9yZGVycycsXG4gIENFTlRFUjogJ2NlbnRlcicsXG4gIFFVQURSQU5UUzogJ3F1YWRyYW50cycsXG4gIEJJQVNFRF9SQU5ET006ICdiaWFzZWRfcmFuZG9tJyxcbiAgQ0xVU1RFUlM6ICdjbHVzdGVycycsXG4gIFBST1hJTUlUWTogJ3Byb3hpbWl0eScsXG4gIFNXRUVQOiAnc3dlZXAnLFxuICBQUklPUklUWTogJ3ByaW9yaXR5JyxcbiAgQU5DSE9SX1BPSU5UUzogJ2FuY2hvcl9wb2ludHMnLFxuICBTUElSQUxfQ1c6ICdzcGlyYWxfY3cnLFxuICBTUElSQUxfQ0NXOiAnc3BpcmFsX2Njdydcbn07XG5cbi8qKlxuICogT2J0ZW5lciBub21icmUgbG9jYWxpemFkbyBkZWwgcGF0clx1MDBGM25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdHRlcm5OYW1lKHBhdHRlcm4pIHtcbiAgY29uc3QgbmFtZXMgPSB7XG4gICAgW1BBSU5UX1BBVFRFUk5TLkxJTkVBUl9TVEFSVF06ICdcdTI3QTFcdUZFMEYgTGluZWFsIChJbmljaW8pJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuTElORUFSX0VORF06ICdcdTJCMDVcdUZFMEYgTGluZWFsIChGaW5hbCknLFxuICAgIFtQQUlOVF9QQVRURVJOUy5SQU5ET01dOiAnXHVEODNDXHVERkIyIEFsZWF0b3JpbycsXG4gICAgW1BBSU5UX1BBVFRFUk5TLkNFTlRFUl9PVVRdOiAnXHVEODNEXHVEQ0E1IENlbnRybyBoYWNpYSBhZnVlcmEnLFxuICAgIFtQQUlOVF9QQVRURVJOUy5DT1JORVJTX0ZJUlNUXTogJ1x1RDgzQ1x1REZDMSBFc3F1aW5hcyBwcmltZXJvJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuU1BJUkFMXTogJ1x1RDgzQ1x1REYwMCBFc3BpcmFsJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuU05BS0VdOiAnXHVEODNEXHVEQzBEIFNlcnBpZW50ZSAoWmlnemFnKScsXG4gICAgW1BBSU5UX1BBVFRFUk5TLkRJQUdPTkFMX1NXRUVQXTogJ1x1RDgzRFx1RENEMCBCYXJyaWRvIGRpYWdvbmFsJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuQk9SREVSU106ICdcdUQ4M0RcdUREQkNcdUZFMEYgQm9yZGVzIHByaW1lcm8nLFxuICAgIFtQQUlOVF9QQVRURVJOUy5DRU5URVJdOiAnXHVEODNDXHVERkFGIENlbnRybyBwcmltZXJvJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuUVVBRFJBTlRTXTogJ1x1RDgzRFx1REQzMiBDdWFkcmFudGVzJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuQklBU0VEX1JBTkRPTV06ICdcdUQ4M0NcdURGQUYgQWxlYXRvcmlvIHNlc2dhZG8gKGJvcmRlcyknLFxuICAgIFtQQUlOVF9QQVRURVJOUy5DTFVTVEVSU106ICdcdUQ4M0NcdURGQUEgQ2x1c3RlcnMnLFxuICAgIFtQQUlOVF9QQVRURVJOUy5QUk9YSU1JVFldOiAnXHVEODNFXHVERDFEIFByb3hpbWlkYWQnLFxuICAgIFtQQUlOVF9QQVRURVJOUy5TV0VFUF06ICdcdUQ4M0VcdURERjkgQmFycmlkbyBwb3Igc2VjY2lvbmVzJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuUFJJT1JJVFldOiAnXHUyQjUwIFByaW9yaWRhZCAobWl4dG8pJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuQU5DSE9SX1BPSU5UU106ICdcdTI2OTMgUHVudG9zIGRlIGFuY2xhamUnLFxuICAgIFtQQUlOVF9QQVRURVJOUy5TUElSQUxfQ1ddOiAnXHVEODNEXHVERDA0IEVzcGlyYWwgKGhvcmFyaWEpJyxcbiAgICBbUEFJTlRfUEFUVEVSTlMuU1BJUkFMX0NDV106ICdcdUQ4M0RcdUREMDMgRXNwaXJhbCAoYW50aWhvcmFyaWEpJ1xuICB9O1xuICByZXR1cm4gbmFtZXNbcGF0dGVybl0gfHwgcGF0dGVybjtcbn0vKipcbiAqIE9yZGVuYXIgcFx1MDBFRHhlbGVzIHNlZ1x1MDBGQW4gZWwgcGF0clx1MDBGM24gc2VsZWNjaW9uYWRvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzb3J0UGl4ZWxzQnlQYXR0ZXJuKHBpeGVscywgcGF0dGVybiwgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQpIHtcbiAgaWYgKCFwaXhlbHMgfHwgcGl4ZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBwaXhlbHM7XG4gIH1cblxuICBsb2coYFx1RDgzQ1x1REZBOCBBcGxpY2FuZG8gcGF0clx1MDBGM24gZGUgcGludGFkbzogJHtnZXRQYXR0ZXJuTmFtZShwYXR0ZXJuKX0gKCR7cGl4ZWxzLmxlbmd0aH0gcFx1MDBFRHhlbGVzKWApO1xuXG4gIGNvbnN0IHNvcnRlZFBpeGVscyA9IFsuLi5waXhlbHNdOyAvLyBDcmVhciBjb3BpYSBwYXJhIG5vIG1vZGlmaWNhciBlbCBvcmlnaW5hbFxuXG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuTElORUFSX1NUQVJUOlxuICAgICAgcmV0dXJuIHNvcnRMaW5lYXJTdGFydChzb3J0ZWRQaXhlbHMpO1xuICAgICAgXG4gICAgY2FzZSBQQUlOVF9QQVRURVJOUy5MSU5FQVJfRU5EOlxuICAgICAgcmV0dXJuIHNvcnRMaW5lYXJFbmQoc29ydGVkUGl4ZWxzKTtcbiAgICAgIFxuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuUkFORE9NOlxuICAgICAgcmV0dXJuIHNvcnRSYW5kb20oc29ydGVkUGl4ZWxzKTtcbiAgICAgIFxuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuQ0VOVEVSX09VVDpcbiAgICAgIHJldHVybiBzb3J0Q2VudGVyT3V0KHNvcnRlZFBpeGVscywgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQpO1xuICAgICAgXG4gICAgY2FzZSBQQUlOVF9QQVRURVJOUy5DT1JORVJTX0ZJUlNUOlxuICAgICAgcmV0dXJuIHNvcnRDb3JuZXJzRmlyc3Qoc29ydGVkUGl4ZWxzLCBpbWFnZVdpZHRoLCBpbWFnZUhlaWdodCk7XG4gICAgICBcbiAgICBjYXNlIFBBSU5UX1BBVFRFUk5TLlNQSVJBTDpcbiAgICAgIHJldHVybiBzb3J0U3BpcmFsKHNvcnRlZFBpeGVscywgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQpO1xuXG4gICAgLy8gTnVldm9zIHBhdHJvbmVzXG4gICAgY2FzZSBQQUlOVF9QQVRURVJOUy5TTkFLRTpcbiAgICAgIHJldHVybiBzb3J0U25ha2Uoc29ydGVkUGl4ZWxzKTtcblxuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuRElBR09OQUxfU1dFRVA6XG4gICAgICByZXR1cm4gc29ydERpYWdvbmFsU3dlZXAoc29ydGVkUGl4ZWxzKTtcblxuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuQk9SREVSUzpcbiAgICAgIHJldHVybiBzb3J0Qm9yZGVycyhzb3J0ZWRQaXhlbHMsIGltYWdlV2lkdGgsIGltYWdlSGVpZ2h0KTtcblxuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuQ0VOVEVSOlxuICAgICAgcmV0dXJuIHNvcnRDZW50ZXIoc29ydGVkUGl4ZWxzLCBpbWFnZVdpZHRoLCBpbWFnZUhlaWdodCk7XG5cbiAgICBjYXNlIFBBSU5UX1BBVFRFUk5TLlFVQURSQU5UUzpcbiAgICAgIHJldHVybiBzb3J0UXVhZHJhbnRzKHNvcnRlZFBpeGVscywgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQpO1xuXG4gICAgY2FzZSBQQUlOVF9QQVRURVJOUy5CSUFTRURfUkFORE9NOlxuICAgICAgcmV0dXJuIHNvcnRCaWFzZWRSYW5kb20oc29ydGVkUGl4ZWxzLCBpbWFnZVdpZHRoLCBpbWFnZUhlaWdodCk7XG5cbiAgICBjYXNlIFBBSU5UX1BBVFRFUk5TLkNMVVNURVJTOlxuICAgICAgcmV0dXJuIHNvcnRDbHVzdGVycyhzb3J0ZWRQaXhlbHMsIGltYWdlV2lkdGgsIGltYWdlSGVpZ2h0KTtcblxuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuUFJPWElNSVRZOlxuICAgICAgcmV0dXJuIHNvcnRQcm94aW1pdHkoc29ydGVkUGl4ZWxzKTtcblxuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuU1dFRVA6XG4gICAgICByZXR1cm4gc29ydFN3ZWVwU2VjdGlvbnMoc29ydGVkUGl4ZWxzKTtcblxuICAgIGNhc2UgUEFJTlRfUEFUVEVSTlMuUFJJT1JJVFk6XG4gICAgICByZXR1cm4gc29ydFByaW9yaXR5KHNvcnRlZFBpeGVscywgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQpO1xuXG4gICAgY2FzZSBQQUlOVF9QQVRURVJOUy5BTkNIT1JfUE9JTlRTOlxuICAgICAgcmV0dXJuIHNvcnRBbmNob3JQb2ludHMoc29ydGVkUGl4ZWxzLCBpbWFnZVdpZHRoLCBpbWFnZUhlaWdodCk7XG5cbiAgICBjYXNlIFBBSU5UX1BBVFRFUk5TLlNQSVJBTF9DVzpcbiAgICAgIHJldHVybiBzb3J0U3BpcmFsRGlyZWN0aW9uYWwoc29ydGVkUGl4ZWxzLCBpbWFnZVdpZHRoLCBpbWFnZUhlaWdodCwgdHJ1ZSk7XG5cbiAgICBjYXNlIFBBSU5UX1BBVFRFUk5TLlNQSVJBTF9DQ1c6XG4gICAgICByZXR1cm4gc29ydFNwaXJhbERpcmVjdGlvbmFsKHNvcnRlZFBpeGVscywgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQsIGZhbHNlKTtcbiAgICAgIFxuICAgIGRlZmF1bHQ6XG4gICAgICBsb2coYFx1MjZBMFx1RkUwRiBQYXRyXHUwMEYzbiBkZXNjb25vY2lkbzogJHtwYXR0ZXJufSwgdXNhbmRvIGxpbmVhcl9zdGFydGApO1xuICAgICAgcmV0dXJuIHNvcnRMaW5lYXJTdGFydChzb3J0ZWRQaXhlbHMpO1xuICB9XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gbGluZWFsIGRlc2RlIGVsIGluaWNpbyAoaXpxdWllcmRhIGEgZGVyZWNoYSwgYXJyaWJhIGEgYWJham8pXG4gKi9cbmZ1bmN0aW9uIHNvcnRMaW5lYXJTdGFydChwaXhlbHMpIHtcbiAgcmV0dXJuIHBpeGVscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgYVkgPSBhLmltYWdlWSAhPT0gdW5kZWZpbmVkID8gYS5pbWFnZVkgOiBhLnk7XG4gICAgY29uc3QgYlkgPSBiLmltYWdlWSAhPT0gdW5kZWZpbmVkID8gYi5pbWFnZVkgOiBiLnk7XG4gICAgY29uc3QgYVggPSBhLmltYWdlWCAhPT0gdW5kZWZpbmVkID8gYS5pbWFnZVggOiBhLng7XG4gICAgY29uc3QgYlggPSBiLmltYWdlWCAhPT0gdW5kZWZpbmVkID8gYi5pbWFnZVggOiBiLng7XG4gICAgXG4gICAgaWYgKGFZICE9PSBiWSkgcmV0dXJuIGFZIC0gYlk7IC8vIFByaW1lcm8gcG9yIFkgKGFycmliYSBhIGFiYWpvKVxuICAgIHJldHVybiBhWCAtIGJYOyAvLyBMdWVnbyBwb3IgWCAoaXpxdWllcmRhIGEgZGVyZWNoYSlcbiAgfSk7XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gbGluZWFsIGRlc2RlIGVsIGZpbmFsIChkZXJlY2hhIGEgaXpxdWllcmRhLCBhYmFqbyBhIGFycmliYSlcbiAqL1xuZnVuY3Rpb24gc29ydExpbmVhckVuZChwaXhlbHMpIHtcbiAgcmV0dXJuIHBpeGVscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgYVkgPSBhLmltYWdlWSAhPT0gdW5kZWZpbmVkID8gYS5pbWFnZVkgOiBhLnk7XG4gICAgY29uc3QgYlkgPSBiLmltYWdlWSAhPT0gdW5kZWZpbmVkID8gYi5pbWFnZVkgOiBiLnk7XG4gICAgY29uc3QgYVggPSBhLmltYWdlWCAhPT0gdW5kZWZpbmVkID8gYS5pbWFnZVggOiBhLng7XG4gICAgY29uc3QgYlggPSBiLmltYWdlWCAhPT0gdW5kZWZpbmVkID8gYi5pbWFnZVggOiBiLng7XG4gICAgXG4gICAgaWYgKGFZICE9PSBiWSkgcmV0dXJuIGJZIC0gYVk7IC8vIFByaW1lcm8gcG9yIFkgKGFiYWpvIGEgYXJyaWJhKVxuICAgIHJldHVybiBiWCAtIGFYOyAvLyBMdWVnbyBwb3IgWCAoZGVyZWNoYSBhIGl6cXVpZXJkYSlcbiAgfSk7XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gc2VycGllbnRlICh6aWd6YWcpIHBvciBmaWxhcyBhbHRlcm5hbmRvIGRpcmVjY2lcdTAwRjNuXG4gKi9cbmZ1bmN0aW9uIHNvcnRTbmFrZShwaXhlbHMpIHtcbiAgcmV0dXJuIHBpeGVscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgYXkgPSBhLmltYWdlWSA/PyBhLnk7IGNvbnN0IGJ5ID0gYi5pbWFnZVkgPz8gYi55O1xuICAgIGlmIChheSAhPT0gYnkpIHJldHVybiBheSAtIGJ5O1xuICAgIGNvbnN0IGF4ID0gYS5pbWFnZVggPz8gYS54OyBjb25zdCBieCA9IGIuaW1hZ2VYID8/IGIueDtcbiAgICAvLyBGaWxhcyBwYXJlcyAoMC1pbmRleGVkKSBpenEtPmRlciwgaW1wYXJlcyBkZXItPml6cVxuICAgIHJldHVybiAoYXkgJSAyID09PSAwKSA/IChheCAtIGJ4KSA6IChieCAtIGF4KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQmFycmlkbyBkaWFnb25hbCBwb3Igc3VtYSBkZSBjb29yZGVuYWRhcyAoeCt5KVxuICovXG5mdW5jdGlvbiBzb3J0RGlhZ29uYWxTd2VlcChwaXhlbHMpIHtcbiAgcmV0dXJuIHBpeGVscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgYXggPSBhLmltYWdlWCA/PyBhLng7IGNvbnN0IGF5ID0gYS5pbWFnZVkgPz8gYS55O1xuICAgIGNvbnN0IGJ4ID0gYi5pbWFnZVggPz8gYi54OyBjb25zdCBieSA9IGIuaW1hZ2VZID8/IGIueTtcbiAgICBjb25zdCBkYSA9IGF4ICsgYXk7IGNvbnN0IGRiID0gYnggKyBieTtcbiAgICBpZiAoZGEgIT09IGRiKSByZXR1cm4gZGEgLSBkYjtcbiAgICByZXR1cm4gYXggLSBieDtcbiAgfSk7XG59XG5cbi8qKlxuICogQm9yZGVzIHByaW1lcm86IGRpc3RhbmNpYSBtXHUwMEVEbmltYSBhIGN1YWxxdWllciBib3JkZVxuICovXG5mdW5jdGlvbiBzb3J0Qm9yZGVycyhwaXhlbHMsIHcsIGgpIHtcbiAgY29uc3QgbWF4WCA9IHcgLSAxLCBtYXhZID0gaCAtIDE7XG4gIHJldHVybiBwaXhlbHMuc29ydCgoYSwgYikgPT4ge1xuICAgIGNvbnN0IGF4ID0gYS5pbWFnZVggPz8gYS54OyBjb25zdCBheSA9IGEuaW1hZ2VZID8/IGEueTtcbiAgICBjb25zdCBieCA9IGIuaW1hZ2VYID8/IGIueDsgY29uc3QgYnkgPSBiLmltYWdlWSA/PyBiLnk7XG4gICAgY29uc3QgZGEgPSBNYXRoLm1pbihheCwgYXksIG1heFggLSBheCwgbWF4WSAtIGF5KTtcbiAgICBjb25zdCBkYiA9IE1hdGgubWluKGJ4LCBieSwgbWF4WCAtIGJ4LCBtYXhZIC0gYnkpO1xuICAgIHJldHVybiBkYSAtIGRiO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDZW50cm8gcHJpbWVybzogcG9yIGRpc3RhbmNpYSBhbCBjZW50cm9cbiAqL1xuZnVuY3Rpb24gc29ydENlbnRlcihwaXhlbHMsIHcsIGgpIHtcbiAgY29uc3QgY3ggPSB3IC8gMiwgY3kgPSBoIC8gMjtcbiAgcmV0dXJuIHBpeGVscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgYXggPSBhLmltYWdlWCA/PyBhLng7IGNvbnN0IGF5ID0gYS5pbWFnZVkgPz8gYS55O1xuICAgIGNvbnN0IGJ4ID0gYi5pbWFnZVggPz8gYi54OyBjb25zdCBieSA9IGIuaW1hZ2VZID8/IGIueTtcbiAgICBjb25zdCBkYSA9IChheCAtIGN4KSAqIChheCAtIGN4KSArIChheSAtIGN5KSAqIChheSAtIGN5KTtcbiAgICBjb25zdCBkYiA9IChieCAtIGN4KSAqIChieCAtIGN4KSArIChieSAtIGN5KSAqIChieSAtIGN5KTtcbiAgICByZXR1cm4gZGEgLSBkYjtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3VhZHJhbnRlcyByb3RhdGl2b3NcbiAqL1xuZnVuY3Rpb24gc29ydFF1YWRyYW50cyhwaXhlbHMsIHcsIGgpIHtcbiAgY29uc3QgY3ggPSB3IC8gMiwgY3kgPSBoIC8gMjtcbiAgY29uc3QgcXVhZEluZGV4ID0gKHgsIHkpID0+ICh5IDwgY3kgPyAoeCA8IGN4ID8gMCA6IDEpIDogKHggPCBjeCA/IDIgOiAzKSk7XG4gIHJldHVybiBwaXhlbHMuc29ydCgoYSwgYikgPT4ge1xuICAgIGNvbnN0IGF4ID0gYS5pbWFnZVggPz8gYS54OyBjb25zdCBheSA9IGEuaW1hZ2VZID8/IGEueTtcbiAgICBjb25zdCBieCA9IGIuaW1hZ2VYID8/IGIueDsgY29uc3QgYnkgPSBiLmltYWdlWSA/PyBiLnk7XG4gICAgY29uc3QgcWEgPSBxdWFkSW5kZXgoYXgsIGF5KTsgY29uc3QgcWIgPSBxdWFkSW5kZXgoYngsIGJ5KTtcbiAgICBpZiAocWEgIT09IHFiKSByZXR1cm4gcWEgLSBxYjtcbiAgICAvLyBEZW50cm8gZGUgY2FkYSBjdWFkcmFudGU6IGNlbnRybyBwcmltZXJvXG4gICAgY29uc3QgZGEgPSAoYXggLSBjeCkgKiAoYXggLSBjeCkgKyAoYXkgLSBjeSkgKiAoYXkgLSBjeSk7XG4gICAgY29uc3QgZGIgPSAoYnggLSBjeCkgKiAoYnggLSBjeCkgKyAoYnkgLSBjeSkgKiAoYnkgLSBjeSk7XG4gICAgcmV0dXJuIGRhIC0gZGI7XG4gIH0pO1xufVxuXG4vKipcbiAqIEFsZWF0b3JpbyBzZXNnYWRvOiBtXHUwMEUxcyBjZXJjYSBkZWwgYm9yZGUsIG1heW9yIHByaW9yaWRhZFxuICogVXNhIGhhc2ggZGV0ZXJtaW5pc3RhIHBhcmEgZXZpdGFyIGNhbWJpb3MgZW4gY2FkYSBsbGFtYWRhXG4gKi9cbmZ1bmN0aW9uIHNvcnRCaWFzZWRSYW5kb20ocGl4ZWxzLCB3LCBoKSB7XG4gIGNvbnN0IG1heFggPSB3IC0gMSwgbWF4WSA9IGggLSAxO1xuICBjb25zdCBlZGdlV2VpZ2h0ID0gKHgsIHkpID0+IDEgKyAoTWF0aC5taW4oeCwgeSwgbWF4WCAtIHgsIG1heFkgLSB5KSk7XG4gIGNvbnN0IGhhc2ggPSAoeCwgeSkgPT4ge1xuICAgIC8vIHhvcnNoaWZ0IHNpbXBsZSBkZXRlcm1pbmlzdGFcbiAgICBsZXQgdiA9ICgoeCArIDEpICogNzM4NTYwOTMpIF4gKCh5ICsgMSkgKiAxOTM0OTY2Myk7XG4gICAgdiBePSB2IDw8IDEzOyB2IF49IHYgPj4gMTc7IHYgXj0gdiA8PCA1OyByZXR1cm4gKHYgPj4+IDApIC8gMHhmZmZmZmZmZjtcbiAgfTtcbiAgcmV0dXJuIHBpeGVscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgYXggPSBhLmltYWdlWCA/PyBhLng7IGNvbnN0IGF5ID0gYS5pbWFnZVkgPz8gYS55O1xuICAgIGNvbnN0IGJ4ID0gYi5pbWFnZVggPz8gYi54OyBjb25zdCBieSA9IGIuaW1hZ2VZID8/IGIueTtcbiAgICBjb25zdCBzYSA9IGVkZ2VXZWlnaHQoYXgsIGF5KSAtIGhhc2goYXgsIGF5KTtcbiAgICBjb25zdCBzYiA9IGVkZ2VXZWlnaHQoYngsIGJ5KSAtIGhhc2goYngsIGJ5KTtcbiAgICByZXR1cm4gc2IgLSBzYTsgLy8gbWF5b3Igc2NvcmUgcHJpbWVyb1xuICB9KTtcbn1cblxuLyoqXG4gKiBDbHVzdGVyczogYWdydXBhIHBvciBjZXJjYW5cdTAwRURhIGEgYWxndW5hcyBzZW1pbGxhc1xuICovXG5mdW5jdGlvbiBzb3J0Q2x1c3RlcnMocGl4ZWxzLCB3LCBoKSB7XG4gIGlmIChwaXhlbHMubGVuZ3RoIDwgNjQpIHJldHVybiBzb3J0Q2VudGVyKHBpeGVscywgdywgaCk7XG4gIC8vIEVsZWdpciA5IHNlbWlsbGFzIGVuIHVuYSBjdWFkclx1MDBFRGN1bGEgM3gzXG4gIGNvbnN0IHNlZWRzID0gW107XG4gIGZvciAobGV0IHN5ID0gMTsgc3kgPD0gMzsgc3krKykge1xuICAgIGZvciAobGV0IHN4ID0gMTsgc3ggPD0gMzsgc3grKykge1xuICAgICAgc2VlZHMucHVzaCh7IHg6IE1hdGgucm91bmQoKHN4ICogdykgLyA0KSwgeTogTWF0aC5yb3VuZCgoc3kgKiBoKSAvIDQpIH0pO1xuICAgIH1cbiAgfVxuICBjb25zdCBzZWVkSW5kZXggPSAoeCwgeSkgPT4ge1xuICAgIGxldCBiZXN0ID0gMCwgYmVzdEQgPSBJbmZpbml0eTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzID0gc2VlZHNbaV07XG4gICAgICBjb25zdCBkID0gKHggLSBzLngpICogKHggLSBzLngpICsgKHkgLSBzLnkpICogKHkgLSBzLnkpO1xuICAgICAgaWYgKGQgPCBiZXN0RCkgeyBiZXN0RCA9IGQ7IGJlc3QgPSBpOyB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0O1xuICB9O1xuICByZXR1cm4gcGl4ZWxzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBheCA9IGEuaW1hZ2VYID8/IGEueDsgY29uc3QgYXkgPSBhLmltYWdlWSA/PyBhLnk7XG4gICAgY29uc3QgYnggPSBiLmltYWdlWCA/PyBiLng7IGNvbnN0IGJ5ID0gYi5pbWFnZVkgPz8gYi55O1xuICAgIGNvbnN0IGNhID0gc2VlZEluZGV4KGF4LCBheSksIGNiID0gc2VlZEluZGV4KGJ4LCBieSk7XG4gICAgaWYgKGNhICE9PSBjYikgcmV0dXJuIGNhIC0gY2I7XG4gICAgLy8gRGVudHJvIGRlbCBjbHVzdGVyOiBjZW50cm8gZGUgc3Ugc2VtaWxsYSBwcmltZXJvXG4gICAgY29uc3QgcyA9IHNlZWRzW2NhXTtcbiAgICBjb25zdCBkYSA9IChheCAtIHMueCkgKiAoYXggLSBzLngpICsgKGF5IC0gcy55KSAqIChheSAtIHMueSk7XG4gICAgY29uc3QgZGIgPSAoYnggLSBzLngpICogKGJ4IC0gcy54KSArIChieSAtIHMueSkgKiAoYnkgLSBzLnkpO1xuICAgIHJldHVybiBkYSAtIGRiO1xuICB9KTtcbn1cblxuLyoqXG4gKiBQcm94aW1pZGFkOiBvcmRlbiBaIChNb3J0b24pIHBhcmEgcHJveGltaWRhZCBlc3BhY2lhbFxuICovXG5mdW5jdGlvbiBzb3J0UHJveGltaXR5KHBpeGVscykge1xuICBjb25zdCBwYXJ0MWJ5MSA9IChuKSA9PiB7XG4gICAgbiAmPSAweDAwMDBmZmZmOyBuID0gKG4gfCAobiA8PCA4KSkgJiAweDAwRkYwMEZGOyBuID0gKG4gfCAobiA8PCA0KSkgJiAweDBGMEYwRjBGOyBuID0gKG4gfCAobiA8PCAyKSkgJiAweDMzMzMzMzMzOyBuID0gKG4gfCAobiA8PCAxKSkgJiAweDU1NTU1NTU1OyByZXR1cm4gbjtcbiAgfTtcbiAgY29uc3QgbW9ydG9uID0gKHgsIHkpID0+IChwYXJ0MWJ5MSh5KSA8PCAxKSB8IHBhcnQxYnkxKHgpO1xuICByZXR1cm4gcGl4ZWxzLnNvcnQoKGEsIGIpID0+IG1vcnRvbihhLmltYWdlWCA/PyBhLngsIGEuaW1hZ2VZID8/IGEueSkgLSBtb3J0b24oYi5pbWFnZVggPz8gYi54LCBiLmltYWdlWSA/PyBiLnkpKTtcbn1cblxuLyoqXG4gKiBCYXJyaWRvIHBvciBzZWNjaW9uZXMgOHg4XG4gKi9cbmZ1bmN0aW9uIHNvcnRTd2VlcFNlY3Rpb25zKHBpeGVscykge1xuICByZXR1cm4gcGl4ZWxzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBheCA9IGEuaW1hZ2VYID8/IGEueDsgY29uc3QgYXkgPSBhLmltYWdlWSA/PyBhLnk7XG4gICAgY29uc3QgYnggPSBiLmltYWdlWCA/PyBiLng7IGNvbnN0IGJ5ID0gYi5pbWFnZVkgPz8gYi55O1xuICAgIGNvbnN0IHNhID0gKE1hdGguZmxvb3IoYXkgLyA4KSA8PCAxNikgfCBNYXRoLmZsb29yKGF4IC8gOCk7XG4gICAgY29uc3Qgc2IgPSAoTWF0aC5mbG9vcihieSAvIDgpIDw8IDE2KSB8IE1hdGguZmxvb3IoYnggLyA4KTtcbiAgICBpZiAoc2EgIT09IHNiKSByZXR1cm4gc2EgLSBzYjtcbiAgICBpZiAoYXkgIT09IGJ5KSByZXR1cm4gYXkgLSBieTtcbiAgICByZXR1cm4gYXggLSBieDtcbiAgfSk7XG59XG5cbi8qKlxuICogUHJpb3JpZGFkIGNvbWJpbmFkYSAoY2VudHJvLCBib3JkZSwgYWxlYXRvcmlvIGxldmUpXG4gKi9cbmZ1bmN0aW9uIHNvcnRQcmlvcml0eShwaXhlbHMsIHcsIGgpIHtcbiAgY29uc3QgY3ggPSB3IC8gMiwgY3kgPSBoIC8gMjsgY29uc3QgbWF4WCA9IHcgLSAxLCBtYXhZID0gaCAtIDE7XG4gIGNvbnN0IGVkZ2UgPSAoeCwgeSkgPT4gTWF0aC5taW4oeCwgeSwgbWF4WCAtIHgsIG1heFkgLSB5KTtcbiAgY29uc3QgaGFzaCA9ICh4LCB5KSA9PiB7IGxldCB2ID0gKCh4ICsgNykgKiAyNjU0NDM1NzYxKSBeICgoeSArIDEzKSAqIDIyNDY4MjI1MTkpOyB2IF49IHYgPDwgMTM7IHYgXj0gdiA+PiAxNzsgdiBePSB2IDw8IDU7IHJldHVybiAodiA+Pj4gMCkgLyAweGZmZmZmZmZmOyB9O1xuICByZXR1cm4gcGl4ZWxzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBheCA9IGEuaW1hZ2VYID8/IGEueDsgY29uc3QgYXkgPSBhLmltYWdlWSA/PyBhLnk7XG4gICAgY29uc3QgYnggPSBiLmltYWdlWCA/PyBiLng7IGNvbnN0IGJ5ID0gYi5pbWFnZVkgPz8gYi55O1xuICAgIGNvbnN0IGNlbnRlckEgPSAoYXggLSBjeCkgKiAoYXggLSBjeCkgKyAoYXkgLSBjeSkgKiAoYXkgLSBjeSk7XG4gICAgY29uc3QgY2VudGVyQiA9IChieCAtIGN4KSAqIChieCAtIGN4KSArIChieSAtIGN5KSAqIChieSAtIGN5KTtcbiAgICBjb25zdCBzY29yZUEgPSAtMC40ICogY2VudGVyQSArIDAuMyAqIGVkZ2UoYXgsIGF5KSArIDAuMyAqIGhhc2goYXgsIGF5KTtcbiAgICBjb25zdCBzY29yZUIgPSAtMC40ICogY2VudGVyQiArIDAuMyAqIGVkZ2UoYngsIGJ5KSArIDAuMyAqIGhhc2goYngsIGJ5KTtcbiAgICByZXR1cm4gc2NvcmVCIC0gc2NvcmVBOyAvLyBtYXlvciBzY29yZSBwcmltZXJvXG4gIH0pO1xufVxuXG4vKipcbiAqIFB1bnRvcyBkZSBhbmNsYWplOiBlc3F1aW5hcyB5IGNlbnRyb1xuICovXG5mdW5jdGlvbiBzb3J0QW5jaG9yUG9pbnRzKHBpeGVscywgdywgaCkge1xuICBjb25zdCBhbmNob3JzID0gW1xuICAgIHsgeDogMCwgeTogMCB9LCB7IHg6IHcgLSAxLCB5OiAwIH0sIHsgeDogMCwgeTogaCAtIDEgfSwgeyB4OiB3IC0gMSwgeTogaCAtIDEgfSxcbiAgICB7IHg6IE1hdGgucm91bmQoKHcgLSAxKSAvIDIpLCB5OiBNYXRoLnJvdW5kKChoIC0gMSkgLyAyKSB9XG4gIF07XG4gIGNvbnN0IGRpc3RBbmNob3IgPSAoeCwgeSkgPT4ge1xuICAgIGxldCBkID0gSW5maW5pdHk7IGZvciAoY29uc3QgYSBvZiBhbmNob3JzKSB7IGNvbnN0IHYgPSAoeCAtIGEueCkgKiAoeCAtIGEueCkgKyAoeSAtIGEueSkgKiAoeSAtIGEueSk7IGlmICh2IDwgZCkgZCA9IHY7IH0gcmV0dXJuIGQ7XG4gIH07XG4gIHJldHVybiBwaXhlbHMuc29ydCgoYSwgYikgPT4ge1xuICAgIGNvbnN0IGF4ID0gYS5pbWFnZVggPz8gYS54OyBjb25zdCBheSA9IGEuaW1hZ2VZID8/IGEueTtcbiAgICBjb25zdCBieCA9IGIuaW1hZ2VYID8/IGIueDsgY29uc3QgYnkgPSBiLmltYWdlWSA/PyBiLnk7XG4gICAgcmV0dXJuIGRpc3RBbmNob3IoYXgsIGF5KSAtIGRpc3RBbmNob3IoYngsIGJ5KTtcbiAgfSk7XG59XG5cbi8qKlxuICogRXNwaXJhbCBjb24gZGlyZWNjaVx1MDBGM25cbiAqL1xuZnVuY3Rpb24gc29ydFNwaXJhbERpcmVjdGlvbmFsKHBpeGVscywgdywgaCwgY2xvY2t3aXNlID0gdHJ1ZSkge1xuICBjb25zdCBjeCA9ICh3IC0gMSkgLyAyLCBjeSA9IChoIC0gMSkgLyAyO1xuICByZXR1cm4gcGl4ZWxzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBheCA9IGEuaW1hZ2VYID8/IGEueDsgY29uc3QgYXkgPSBhLmltYWdlWSA/PyBhLnk7XG4gICAgY29uc3QgYnggPSBiLmltYWdlWCA/PyBiLng7IGNvbnN0IGJ5ID0gYi5pbWFnZVkgPz8gYi55O1xuICAgIGNvbnN0IHJhID0gTWF0aC5oeXBvdChheCAtIGN4LCBheSAtIGN5KTsgY29uc3QgcmIgPSBNYXRoLmh5cG90KGJ4IC0gY3gsIGJ5IC0gY3kpO1xuICAgIGlmIChNYXRoLmFicyhyYSAtIHJiKSA+IDAuNSkgcmV0dXJuIHJhIC0gcmI7IC8vIHJhZGlvIGFzY2VuZGVudGVcbiAgICBjb25zdCBhYSA9IE1hdGguYXRhbjIoYXkgLSBjeSwgYXggLSBjeCk7IGNvbnN0IGFiID0gTWF0aC5hdGFuMihieSAtIGN5LCBieCAtIGN4KTtcbiAgICByZXR1cm4gY2xvY2t3aXNlID8gKGFhIC0gYWIpIDogKGFiIC0gYWEpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBhbGVhdG9yaW9cbiAqL1xuZnVuY3Rpb24gc29ydFJhbmRvbShwaXhlbHMpIHtcbiAgLy8gVXNhciBhbGdvcml0bW8gRmlzaGVyLVlhdGVzIHBhcmEgbWV6Y2xhIGFsZWF0b3JpYVxuICBmb3IgKGxldCBpID0gcGl4ZWxzLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgW3BpeGVsc1tpXSwgcGl4ZWxzW2pdXSA9IFtwaXhlbHNbal0sIHBpeGVsc1tpXV07XG4gIH1cbiAgcmV0dXJuIHBpeGVscztcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBkZXNkZSBlbCBjZW50cm8gaGFjaWEgYWZ1ZXJhXG4gKi9cbmZ1bmN0aW9uIHNvcnRDZW50ZXJPdXQocGl4ZWxzLCBpbWFnZVdpZHRoLCBpbWFnZUhlaWdodCkge1xuICBjb25zdCBjZW50ZXJYID0gaW1hZ2VXaWR0aCAvIDI7XG4gIGNvbnN0IGNlbnRlclkgPSBpbWFnZUhlaWdodCAvIDI7XG4gIFxuICByZXR1cm4gcGl4ZWxzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBhWCA9IGEuaW1hZ2VYICE9PSB1bmRlZmluZWQgPyBhLmltYWdlWCA6IGEueDtcbiAgICBjb25zdCBhWSA9IGEuaW1hZ2VZICE9PSB1bmRlZmluZWQgPyBhLmltYWdlWSA6IGEueTtcbiAgICBjb25zdCBiWCA9IGIuaW1hZ2VYICE9PSB1bmRlZmluZWQgPyBiLmltYWdlWCA6IGIueDtcbiAgICBjb25zdCBiWSA9IGIuaW1hZ2VZICE9PSB1bmRlZmluZWQgPyBiLmltYWdlWSA6IGIueTtcbiAgICBcbiAgICBjb25zdCBkaXN0QSA9IE1hdGguc3FydChNYXRoLnBvdyhhWCAtIGNlbnRlclgsIDIpICsgTWF0aC5wb3coYVkgLSBjZW50ZXJZLCAyKSk7XG4gICAgY29uc3QgZGlzdEIgPSBNYXRoLnNxcnQoTWF0aC5wb3coYlggLSBjZW50ZXJYLCAyKSArIE1hdGgucG93KGJZIC0gY2VudGVyWSwgMikpO1xuICAgIFxuICAgIHJldHVybiBkaXN0QSAtIGRpc3RCOyAvLyBEZXNkZSBlbCBjZW50cm8gaGFjaWEgYWZ1ZXJhXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGVzcXVpbmFzIHByaW1lcm9cbiAqL1xuZnVuY3Rpb24gc29ydENvcm5lcnNGaXJzdChwaXhlbHMsIGltYWdlV2lkdGgsIGltYWdlSGVpZ2h0KSB7XG4gIGNvbnN0IGNvcm5lcnMgPSBbXG4gICAgeyB4OiAwLCB5OiAwIH0sIC8vIFN1cGVyaW9yIGl6cXVpZXJkYVxuICAgIHsgeDogaW1hZ2VXaWR0aCAtIDEsIHk6IDAgfSwgLy8gU3VwZXJpb3IgZGVyZWNoYVxuICAgIHsgeDogMCwgeTogaW1hZ2VIZWlnaHQgLSAxIH0sIC8vIEluZmVyaW9yIGl6cXVpZXJkYVxuICAgIHsgeDogaW1hZ2VXaWR0aCAtIDEsIHk6IGltYWdlSGVpZ2h0IC0gMSB9IC8vIEluZmVyaW9yIGRlcmVjaGFcbiAgXTtcbiAgXG4gIHJldHVybiBwaXhlbHMuc29ydCgoYSwgYikgPT4ge1xuICAgIGNvbnN0IGFYID0gYS5pbWFnZVggIT09IHVuZGVmaW5lZCA/IGEuaW1hZ2VYIDogYS54O1xuICAgIGNvbnN0IGFZID0gYS5pbWFnZVkgIT09IHVuZGVmaW5lZCA/IGEuaW1hZ2VZIDogYS55O1xuICAgIGNvbnN0IGJYID0gYi5pbWFnZVggIT09IHVuZGVmaW5lZCA/IGIuaW1hZ2VYIDogYi54O1xuICAgIGNvbnN0IGJZID0gYi5pbWFnZVkgIT09IHVuZGVmaW5lZCA/IGIuaW1hZ2VZIDogYi55O1xuICAgIFxuICAgIC8vIEVuY29udHJhciBkaXN0YW5jaWEgbVx1MDBFRG5pbWEgYSBjdWFscXVpZXIgZXNxdWluYVxuICAgIGNvbnN0IG1pbkRpc3RBID0gTWF0aC5taW4oLi4uY29ybmVycy5tYXAoY29ybmVyID0+IFxuICAgICAgTWF0aC5zcXJ0KE1hdGgucG93KGFYIC0gY29ybmVyLngsIDIpICsgTWF0aC5wb3coYVkgLSBjb3JuZXIueSwgMikpXG4gICAgKSk7XG4gICAgY29uc3QgbWluRGlzdEIgPSBNYXRoLm1pbiguLi5jb3JuZXJzLm1hcChjb3JuZXIgPT4gXG4gICAgICBNYXRoLnNxcnQoTWF0aC5wb3coYlggLSBjb3JuZXIueCwgMikgKyBNYXRoLnBvdyhiWSAtIGNvcm5lci55LCAyKSlcbiAgICApKTtcbiAgICBcbiAgICByZXR1cm4gbWluRGlzdEEgLSBtaW5EaXN0QjsgLy8gRGVzZGUgbGFzIGVzcXVpbmFzIGhhY2lhIGFkZW50cm9cbiAgfSk7XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gZXNwaXJhbCAoZGVzZGUgYWZ1ZXJhIGhhY2lhIGVsIGNlbnRybylcbiAqL1xuZnVuY3Rpb24gc29ydFNwaXJhbChwaXhlbHMsIGltYWdlV2lkdGgsIGltYWdlSGVpZ2h0KSB7XG4gIC8vIENyZWFyIG1hcGEgZGUgY29vcmRlbmFkYXMgcGFyYSBzb3J0aW5nIGVzcGlyYWxcbiAgY29uc3QgY29vcmRpbmF0ZU1hcCA9IG5ldyBNYXAoKTtcbiAgXG4gIC8vIEdlbmVyYXIgb3JkZW4gZXNwaXJhbFxuICBsZXQgc3BpcmFsSW5kZXggPSAwO1xuICBsZXQgbGVmdCA9IDAsIHJpZ2h0ID0gaW1hZ2VXaWR0aCAtIDE7XG4gIGxldCB0b3AgPSAwLCBib3R0b20gPSBpbWFnZUhlaWdodCAtIDE7XG4gIFxuICB3aGlsZSAobGVmdCA8PSByaWdodCAmJiB0b3AgPD0gYm90dG9tKSB7XG4gICAgLy8gUmVjb3JyZXIgZmlsYSBzdXBlcmlvclxuICAgIGZvciAobGV0IHggPSBsZWZ0OyB4IDw9IHJpZ2h0OyB4KyspIHtcbiAgICAgIGNvb3JkaW5hdGVNYXAuc2V0KGAke3h9LCR7dG9wfWAsIHNwaXJhbEluZGV4KyspO1xuICAgIH1cbiAgICB0b3ArKztcbiAgICBcbiAgICAvLyBSZWNvcnJlciBjb2x1bW5hIGRlcmVjaGFcbiAgICBmb3IgKGxldCB5ID0gdG9wOyB5IDw9IGJvdHRvbTsgeSsrKSB7XG4gICAgICBjb29yZGluYXRlTWFwLnNldChgJHtyaWdodH0sJHt5fWAsIHNwaXJhbEluZGV4KyspO1xuICAgIH1cbiAgICByaWdodC0tO1xuICAgIFxuICAgIC8vIFJlY29ycmVyIGZpbGEgaW5mZXJpb3IgKHNpIHF1ZWRhKVxuICAgIGlmICh0b3AgPD0gYm90dG9tKSB7XG4gICAgICBmb3IgKGxldCB4ID0gcmlnaHQ7IHggPj0gbGVmdDsgeC0tKSB7XG4gICAgICAgIGNvb3JkaW5hdGVNYXAuc2V0KGAke3h9LCR7Ym90dG9tfWAsIHNwaXJhbEluZGV4KyspO1xuICAgICAgfVxuICAgICAgYm90dG9tLS07XG4gICAgfVxuICAgIFxuICAgIC8vIFJlY29ycmVyIGNvbHVtbmEgaXpxdWllcmRhIChzaSBxdWVkYSlcbiAgICBpZiAobGVmdCA8PSByaWdodCkge1xuICAgICAgZm9yIChsZXQgeSA9IGJvdHRvbTsgeSA+PSB0b3A7IHktLSkge1xuICAgICAgICBjb29yZGluYXRlTWFwLnNldChgJHtsZWZ0fSwke3l9YCwgc3BpcmFsSW5kZXgrKyk7XG4gICAgICB9XG4gICAgICBsZWZ0Kys7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gcGl4ZWxzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBhWCA9IGEuaW1hZ2VYICE9PSB1bmRlZmluZWQgPyBhLmltYWdlWCA6IGEueDtcbiAgICBjb25zdCBhWSA9IGEuaW1hZ2VZICE9PSB1bmRlZmluZWQgPyBhLmltYWdlWSA6IGEueTtcbiAgICBjb25zdCBiWCA9IGIuaW1hZ2VYICE9PSB1bmRlZmluZWQgPyBiLmltYWdlWCA6IGIueDtcbiAgICBjb25zdCBiWSA9IGIuaW1hZ2VZICE9PSB1bmRlZmluZWQgPyBiLmltYWdlWSA6IGIueTtcbiAgICBcbiAgICBjb25zdCBpbmRleEEgPSBjb29yZGluYXRlTWFwLmdldChgJHthWH0sJHthWX1gKSB8fCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBjb25zdCBpbmRleEIgPSBjb29yZGluYXRlTWFwLmdldChgJHtiWH0sJHtiWX1gKSB8fCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBcbiAgICByZXR1cm4gaW5kZXhBIC0gaW5kZXhCO1xuICB9KTtcbn1cblxuLyoqXG4gKiBBcGxpY2FyIHBhdHJcdTAwRjNuIGRlIHBpbnRhZG8gYSBsb3MgcFx1MDBFRHhlbGVzIHJlc3RhbnRlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlQYWludFBhdHRlcm4ocmVtYWluaW5nUGl4ZWxzLCBwYXR0ZXJuLCBpbWFnZURhdGEpIHtcbiAgaWYgKCFyZW1haW5pbmdQaXhlbHMgfHwgcmVtYWluaW5nUGl4ZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiByZW1haW5pbmdQaXhlbHM7XG4gIH1cblxuICBjb25zdCBpbWFnZVdpZHRoID0gaW1hZ2VEYXRhPy53aWR0aCB8fCAxMDA7XG4gIGNvbnN0IGltYWdlSGVpZ2h0ID0gaW1hZ2VEYXRhPy5oZWlnaHQgfHwgMTAwO1xuICBcbiAgY29uc3Qgc29ydGVkUGl4ZWxzID0gc29ydFBpeGVsc0J5UGF0dGVybihyZW1haW5pbmdQaXhlbHMsIHBhdHRlcm4sIGltYWdlV2lkdGgsIGltYWdlSGVpZ2h0KTtcbiAgXG4gIGxvZyhgXHUyNzA1IFBhdHJcdTAwRjNuIGFwbGljYWRvOiAke2dldFBhdHRlcm5OYW1lKHBhdHRlcm4pfSBhICR7c29ydGVkUGl4ZWxzLmxlbmd0aH0gcFx1MDBFRHhlbGVzYCk7XG4gIFxuICByZXR1cm4gc29ydGVkUGl4ZWxzO1xufVxuIiwgIi8vIENvbmZpZ3VyYWNpXHUwMEYzbiBwYXJhIEF1dG8tR3VhcmRcbmV4cG9ydCBjb25zdCBHVUFSRF9ERUZBVUxUUyA9IHtcbiAgU0lURUtFWTogXCIweDRBQUFBQUFCcHFKZThGTzBOODRxMEZcIixcbiAgQ09PTERPV05fREVGQVVMVDogMzEwMDAsXG4gIFRJTEVfU0laRTogMTAwMCxcbiAgQ0hFQ0tfSU5URVJWQUw6IDEwMDAwLCAvLyBSZXZpc2FyIGNhZGEgMTAgc2VndW5kb3NcbiAgTUFYX1BST1RFQ1RJT05fU0laRTogSW5maW5pdHksIC8vIFNpbiBsXHUwMEVEbWl0ZSBkZSBwXHUwMEVEeGVsZXMgcHJvdGVnaWRvc1xuICBQSVhFTFNfUEVSX0JBVENIOiAxMCwgLy8gTWVub3MgcXVlIEltYWdlIHBhcmEgc2VyIG1cdTAwRTFzIHN1dGlsXG4gIE1BWF9QSVhFTFNfUEVSX0JBVENIOiA5OTk5LCAvLyBOdWV2byBtXHUwMEUxeGltbyBwYXJhIHRhbWFcdTAwRjFvIGRlIGxvdGVcbiAgTUlOX0NIQVJHRVNfVE9fV0FJVDogMjAsIC8vIENhcmdhcyBtXHUwMEVEbmltYXMgYSBlc3BlcmFyIGFudGVzIGRlIGNvbnRpbnVhclxuICBCQUNLRU5EX1VSTDogXCJodHRwczovL2JhY2tlbmQud3BsYWNlLmxpdmVcIixcbiAgUFJPVEVDVElPTl9QQVRURVJOOiBcInJhbmRvbVwiIC8vIFBhdHJcdTAwRjNuIHBvciBkZWZlY3RvXG59O1xuXG4vLyBQYXRyb25lcyBkZSBwcm90ZWNjaVx1MDBGM24gZGlzcG9uaWJsZXNcbmV4cG9ydCBjb25zdCBQUk9URUNUSU9OX1BBVFRFUk5TID0ge1xuICByYW5kb206IFwiQWxlYXRvcmlvXCIsXG4gIGxpbmVVcDogXCJMaW5lYWwgKEFycmliYSlcIixcbiAgbGluZURvd246IFwiTGluZWFsIChBYmFqbylcIixcbiAgbGluZUxlZnQ6IFwiTGluZWFsIChJenF1aWVyZGEpXCIsXG4gIGxpbmVSaWdodDogXCJMaW5lYWwgKERlcmVjaGEpXCIsXG4gIGNlbnRlcjogXCJDZW50cm9cIixcbiAgYm9yZGVyczogXCJCb3JkZXNcIixcbiAgc3BpcmFsOiBcIkVzcGlyYWxcIixcbiAgXG59O1xuXG4vLyBFc3RhZG8gZ2xvYmFsIGRlbCBHdWFyZFxuZXhwb3J0IGNvbnN0IGd1YXJkU3RhdGUgPSB7XG4gIHJ1bm5pbmc6IGZhbHNlLFxuICBpbml0aWFsaXplZDogZmFsc2UsXG4gIHByb3RlY3Rpb25BcmVhOiBudWxsLCAvLyB7IHgxLCB5MSwgeDIsIHkyLCB0aWxlWCwgdGlsZVkgfVxuICBvcmlnaW5hbFBpeGVsczogbmV3IE1hcCgpLCAvLyBNYXAgZGUgXCJ4LHlcIiAtPiB7ciwgZywgYiwgY29sb3JJZH1cbiAgY2hhbmdlczogbmV3IE1hcCgpLCAvLyBNYXAgZGUgXCJ4LHlcIiAtPiB7dGltZXN0YW1wLCBvcmlnaW5hbENvbG9yLCBjdXJyZW50Q29sb3J9XG4gIGN1cnJlbnRDaGFyZ2VzOiAwLFxuICBtYXhDaGFyZ2VzOiA1MCxcbiAgbGFzdENoZWNrOiAwLFxuICBjaGVja0ludGVydmFsOiBudWxsLFxuICBhdmFpbGFibGVDb2xvcnM6IFtdLFxuICBjb2xvcnNDaGVja2VkOiBmYWxzZSxcbiAgdWk6IG51bGwsXG4gIHRvdGFsUmVwYWlyZWQ6IDAsXG5cbiAgLy8gQ29uZmlndXJhY2lcdTAwRjNuIGVkaXRhYmxlXG4gIHBpeGVsc1BlckJhdGNoOiBHVUFSRF9ERUZBVUxUUy5QSVhFTFNfUEVSX0JBVENILFxuICBtaW5DaGFyZ2VzVG9XYWl0OiBHVUFSRF9ERUZBVUxUUy5NSU5fQ0hBUkdFU19UT19XQUlULFxuICBwcm90ZWN0aW9uUGF0dGVybjogR1VBUkRfREVGQVVMVFMuUFJPVEVDVElPTl9QQVRURVJOLFxuICBcbiAgLy8gTnVldmFzIG9wY2lvbmVzIGRlIGNvbmZpZ3VyYWNpXHUwMEYzblxuICBwcmVmZXJDb2xvcjogZmFsc2UsXG4gIHByZWZlcnJlZENvbG9ySWQ6IG51bGwsIC8vIGxlZ2Fkb1xuICBwcmVmZXJyZWRDb2xvcklkczogW10sXG4gIGV4Y2x1ZGVDb2xvcjogZmFsc2UsIC8vIE51ZXZhIG9wY2lcdTAwRjNuIHBhcmEgZXhjbHVpciBjb2xvcmVzXG4gIGV4Y2x1ZGVkQ29sb3JJZHM6IFtdLCAvLyBDb2xvcmVzIGEgZXhjbHVpciBkZSBsYSByZXBhcmFjaVx1MDBGM25cbiAgc3BlbmRBbGxQaXhlbHNPblN0YXJ0OiBmYWxzZSxcbiAgcmFuZG9tV2FpdFRpbWU6IGZhbHNlLFxuICByYW5kb21XYWl0TWluOiA1LCAvLyBzZWd1bmRvc1xuICByYW5kb21XYWl0TWF4OiAxNSwgLy8gc2VndW5kb3NcbiAgd2F0Y2hNb2RlOiBmYWxzZSwgLy8gTW9kbyB2aWdcdTAwRURhOiBzb2xvIG9ic2VydmEsIG5vIHJlcGFyYVxuICBcbiAgY29uZmlnOiB7XG4gICAgY29sb3JDb21wYXJpc29uTWV0aG9kOiAnbGFiJywgLy8gJ3JnYicgbyAnbGFiJyAtIExBQiBwb3IgZGVmZWN0byBwYXJhIHJlcG9zaWNpb25hbWllbnRvXG4gICAgY29sb3JUaHJlc2hvbGQ6IDEwIC8vIFVtYnJhbCBkZSBkaWZlcmVuY2lhIGRlIGNvbG9yXG4gIH1cbn07XG4iLCAiLy8gTm90YTogV2ViU29ja2V0IHkgc2V0SW50ZXJ2YWwgeWEgZXN0XHUwMEUxbiBkZWZpbmlkb3MgY29tbyBnbG9iYWxzIGVuIGVzbGludC5jb25maWcuanNcblxuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2NvcmUvbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyBtYXliZUNvbXByZXNzTWVzc2FnZSwgdHJ5RGVjb21wcmVzc1dyYXBwZXIgfSBmcm9tIFwiLi4vY29yZS9jb21wcmVzc2lvbi5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlU2xhdmVVSSB9IGZyb20gXCIuL3VpLmpzXCI7XG5pbXBvcnQgeyBTTEFWRV9DT05GSUcgfSBmcm9tIFwiLi9jb25maWcuanNcIjsgLy8gZWxpbWluYWRvIHNsYXZlU3RhdGUgKG5vIHVzYWRvKVxuaW1wb3J0IHsgaW5pdGlhbGl6ZUxhbmd1YWdlIH0gZnJvbSBcIi4uL2xvY2FsZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHNlc3Npb25TdGFydCwgc2Vzc2lvblBpbmcsIHNlc3Npb25FbmQsIHRyYWNrRXZlbnQgfSBmcm9tIFwiLi4vY29yZS9tZXRyaWNzL2NsaWVudC5qc1wiO1xuaW1wb3J0IHsgZ2V0TWV0cmljc0NvbmZpZyB9IGZyb20gXCIuLi9jb3JlL21ldHJpY3MvY29uZmlnLmpzXCI7XG5pbXBvcnQgeyBnZXRTZXNzaW9uIH0gZnJvbSBcIi4uL2NvcmUvd3BsYWNlLWFwaS5qc1wiO1xuLy8gSW1wb3J0YXIgZGlyZWN0YW1lbnRlIGxvcyBtXHUwMEYzZHVsb3MgZGUgbG9zIGJvdHMgcGFyYSBlamVjdWNpXHUwMEYzbiBsb2NhbFxuaW1wb3J0IHsgcnVuRmFybSB9IGZyb20gXCIuLi9mYXJtL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBydW5JbWFnZSB9IGZyb20gXCIuLi9pbWFnZS9pbmRleC5qc1wiO1xuLy8gaW1wb3J0IHsgcnVuR3VhcmQgfSBmcm9tIFwiLi4vZ3VhcmQvaW5kZXguanNcIjsgLy8gVUkgY29tcGxldGEgKG5vIHVzYXIgZW4gaGVhZGxlc3MpXG4vLyAoR3VhcmQgbW9kdWxhcikgZGV0ZWNjaVx1MDBGM24gZGUgY29sb3JlcyB5IGFuXHUwMEUxbGlzaXMgYWhvcmEgZW4gR3VhcmQvZ3VhcmQuanNcbmltcG9ydCB7IGVuc3VyZUd1YXJkQ29sb3JzLCBoYW5kbGVHdWFyZERhdGEgYXMgbW9kdWxhckhhbmRsZUd1YXJkRGF0YSwgZ2V0UHJldmlld0RhdGEgYXMgbW9kdWxhckdldFByZXZpZXdEYXRhLCBzdGFydEd1YXJkQXV0b21hdGlvbiBhcyBtb2R1bGFyU3RhcnRBdXRvbWF0aW9uLCBhcHBseUd1YXJkQ29uZmlnIGFzIG1vZHVsYXJBcHBseUd1YXJkQ29uZmlnLCBtYW51YWxDaGVjayBhcyBndWFyZE1hbnVhbENoZWNrLCBtYW51YWxSZXBhaXIgYXMgZ3VhcmRNYW51YWxSZXBhaXIsIHRvZ2dsZVdhdGNoTW9kZSBhcyBndWFyZFRvZ2dsZVdhdGNoTW9kZSwgY2xlYXJHdWFyZFN0YXRlIGFzIGd1YXJkQ2xlYXJTdGF0ZSB9IGZyb20gXCIuL0d1YXJkL2d1YXJkLmpzXCI7XG4vLyBJbXBvcnRhciBlbCBzaXN0ZW1hIGRlIHR1cm5zdGlsZSBwYXJhIGNvbXBhcnRpciB0b2tlbnNcbmltcG9ydCB7IGVuc3VyZVRva2VuLCBpbnZhbGlkYXRlVG9rZW4sIGdldFBhd3RlY3RUb2tlbiwgZ2V0RmluZ2VycHJpbnQgfSBmcm9tIFwiLi4vY29yZS90dXJuc3RpbGUuanNcIjtcbi8vIE5VRVZPOiBBUEkgcGFyYSBlbnZpYXIgbG90ZXMgZGUgcFx1MDBFRHhlbGVzXG4vLyBpbXBvcnQgeyBwb3N0UGl4ZWxCYXRjaEltYWdlIH0gZnJvbSBcIi4uL2NvcmUvd3BsYWNlLWFwaS5qc1wiOyAvLyBub3cgaGFuZGxlZCBieSBwYWludC5qcyBoZWxwZXJcbmltcG9ydCB7IHBhaW50QmF0Y2ggYXMgbW9kUGFpbnRCYXRjaCwgcmVwYWlyUGl4ZWxzIGFzIG1vZFJlcGFpclBpeGVscyB9IGZyb20gXCIuL3BhaW50LmpzXCI7XG4vLyBQYXJhIGNvbm9jZXIgZWwgdGFtYVx1MDBGMW8gZGUgdGlsZSB5IG5vcm1hbGl6YXIgY29vcmRzIGxvY2FsZXNcbmltcG9ydCB7IEdVQVJEX0RFRkFVTFRTIH0gZnJvbSBcIi4uL2d1YXJkL2NvbmZpZy5qc1wiO1xuaW1wb3J0IHsgcHJlcGFyZVRva2Vuc0ZvckJvdCB9IGZyb20gXCIuLi9jb3JlL3dhcm11cC5qc1wiO1xuXG4vLyBHbG9iYWxzIGRlbCBuYXZlZ2Fkb3JcbmNvbnN0IHsgc2V0SW50ZXJ2YWwsIGNsZWFySW50ZXJ2YWwgfSA9IHdpbmRvdztcblxuY2xhc3MgV1BsYWNlU2xhdmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLndzID0gbnVsbDtcbiAgICB0aGlzLnNsYXZlSWQgPSBudWxsO1xuICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPSAwO1xuICAgIHRoaXMuY3VycmVudE1vZGUgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudEJvdCA9IG51bGw7XG4gICAgdGhpcy50ZWxlbWV0cnlEYXRhID0ge1xuICAgICAgcmVwYWlyZWRfcGl4ZWxzOiAwLFxuICAgICAgbWlzc2luZ19waXhlbHM6IDAsXG4gICAgICBhYnNlbnRfcGl4ZWxzOiAwLFxuICAgICAgcmVtYWluaW5nX2NoYXJnZXM6IDAsXG4gICAgICBtYXhfY2hhcmdlczogMFxuICAgIH07XG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICB0aGlzLnByb2plY3RDb25maWcgPSBudWxsO1xuICAgIHRoaXMubWFzdGVyU2VydmVyVXJsID0gJ3dzOi8vbG9jYWxob3N0OjgwMDAvd3Mvc2xhdmUnO1xuICAgIHRoaXMuY29ubmVjdGlvblN0YXR1cyA9ICdkaXNjb25uZWN0ZWQnOyAvLyBkaXNjb25uZWN0ZWQsIGNvbm5lY3RpbmcsIGNvbm5lY3RlZCwgZXJyb3JcbiAgICB0aGlzLnVpID0gbnVsbDtcbiAgICB0aGlzLmlzRmF2b3JpdGUgPSBmYWxzZTtcbiAgICB0aGlzLnRlbGVtZXRyeUludGVydmFsID0gbnVsbDtcbiAgdGhpcy5tYW51YWxEaXNjb25uZWN0ID0gZmFsc2U7XG4gIHRoaXMuYWJvcnRQYWludGluZyA9IGZhbHNlOyAvLyBudWV2bzogYmFuZGVyYSBwYXJhIGFib3J0YXIgcGludHVyYSBlbiBjdXJzb1xuICAvLyBFbGltaW5hZG8gbG9vcCBwcm9waW8gZGUgYW5cdTAwRTFsaXNpcyBndWFyZCBpbmxpbmU7IHNlIHVzYSBtXHUwMEYzZHVsbyBHdWFyZFxuICB9XG5cbiAgLy8gQW5leGEgYXZhaWxhYmxlQ29sb3JzIGRlbCBndWFyZFN0YXRlIGFsIHByZXZpZXcgc2kgZmFsdGFcbiAgYXVnbWVudFByZXZpZXcocHJldmlldykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwID0gcHJldmlldyAmJiB0eXBlb2YgcHJldmlldyA9PT0gJ29iamVjdCcgPyB7IC4uLnByZXZpZXcgfSA6IHt9O1xuICAgICAgY29uc3QgZ3MgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lmd1YXJkU3RhdGUpID8gd2luZG93Lmd1YXJkU3RhdGUgOiBudWxsO1xuICAgICAgY29uc3QgY29sb3JzID0gKGdzICYmIEFycmF5LmlzQXJyYXkoZ3MuYXZhaWxhYmxlQ29sb3JzKSkgPyBncy5hdmFpbGFibGVDb2xvcnMgOiAocC5hdmFpbGFibGVDb2xvcnMgfHwgW10pO1xuICAgICAgaWYgKCFwLmF2YWlsYWJsZUNvbG9ycyAmJiBBcnJheS5pc0FycmF5KGNvbG9ycykpIHtcbiAgICAgICAgLy8gTm9ybWFsaXphciBhIG9iamV0b3Mge2lkLHIsZyxifVxuICAgICAgICBwLmF2YWlsYWJsZUNvbG9ycyA9IGNvbG9ycy5tYXAoKGMsIGlkeCkgPT4ge1xuICAgICAgICAgIGlmIChjICYmIHR5cGVvZiBjID09PSAnb2JqZWN0JyAmJiAoJ3InIGluIGMpICYmICgnZycgaW4gYykgJiYgKCdiJyBpbiBjKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgaWQ6IChjLmlkID8/IGlkeCksIHI6IGMucnwwLCBnOiBjLmd8MCwgYjogYy5ifDAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gcHJldmlldztcbiAgICB9XG4gIH1cblxuICAvLyBFbnZcdTAwRURhIHVuIG1lbnNhamUgcHJldmlld19kYXRhIGNvbiBwcmV2aWV3IGVucmlxdWVjaWRvXG4gIHNlbmRQcmV2aWV3KHByZXZpZXcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZW5yaWNoZWQgPSB0aGlzLmF1Z21lbnRQcmV2aWV3KHByZXZpZXcpO1xuICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoeyB0eXBlOiAncHJldmlld19kYXRhJywgZGF0YTogZW5yaWNoZWQgfSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aGlzLnNlbmRUb01hc3Rlcih7IHR5cGU6ICdwcmV2aWV3X2RhdGEnLCBkYXRhOiBwcmV2aWV3IH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNpIGhheSBhdmFpbGFibGVDb2xvcnMgY29ub2NpZG9zLCBlbnZpYXJsb3MgZW4gdW4gcHJldmlld19kYXRhIG1cdTAwRURuaW1vXG4gIHNlbmRBdmFpbGFibGVDb2xvcnNJZkFueSgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZ3MgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lmd1YXJkU3RhdGUpID8gd2luZG93Lmd1YXJkU3RhdGUgOiBudWxsO1xuICAgICAgY29uc3QgY29sb3JzID0gKGdzICYmIEFycmF5LmlzQXJyYXkoZ3MuYXZhaWxhYmxlQ29sb3JzKSkgPyBncy5hdmFpbGFibGVDb2xvcnMgOiBbXTtcbiAgICAgIGlmIChjb2xvcnMgJiYgY29sb3JzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0geyBhdmFpbGFibGVDb2xvcnM6IGNvbG9ycy5tYXAoKGMsIGkpID0+ICh7IGlkOiAoYy5pZCA/PyBpKSwgcjogYy5yfDAsIGc6IGMuZ3wwLCBiOiBjLmJ8MCB9KSkgfTtcbiAgICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoeyB0eXBlOiAncHJldmlld19kYXRhJywgZGF0YTogcGF5bG9hZCB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHt9XG4gIH1cblxuICBhc3luYyBpbml0KG1hc3RlclVybCkge1xuICB0aGlzLm1hc3RlclNlcnZlclVybCA9IHRoaXMubm9ybWFsaXplV3NVcmwobWFzdGVyVXJsKTtcbiAgICBsb2coJ1x1RDgzRFx1REQxNyBJbmljaWFsaXphbmRvIFdQbGFjZSBTbGF2ZS4uLicpO1xuICAgIFxuICAgIC8vIEFzZWd1cmFyIHF1ZSBlbCBzaXN0ZW1hIGRlIHR1cm5zdGlsZSBlc3RcdTAwRTkgZGlzcG9uaWJsZSBnbG9iYWxtZW50ZVxuICAgIHdpbmRvdy5fX1dQQV9UVVJOU1RJTEVfU1lTVEVNX18gPSB7XG4gICAgICBlbnN1cmVUb2tlbixcbiAgICAgIGludmFsaWRhdGVUb2tlbixcbiAgICAgIGdldFBhd3RlY3RUb2tlbixcbiAgICAgIGdldEZpbmdlcnByaW50XG4gICAgfTtcbiAgICBcbiAgICBhd2FpdCB0aGlzLmNvbm5lY3RUb01hc3RlcigpO1xuICAgIHRoaXMuc3RhcnRUZWxlbWV0cnlMb29wKCk7XG4gIH1cblxuICBhc3luYyBkZXJpdmVQZXJzaXN0ZW50SWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXNzaW9uKCk7XG4gICAgICBsZXQgdXNlcm5hbWUgPSAnQU5PTic7XG4gICAgICBpZiAoc2Vzc2lvbj8uc3VjY2VzcyAmJiBzZXNzaW9uPy5kYXRhPy51c2VyKSB7XG4gICAgICAgIGNvbnN0IHUgPSBzZXNzaW9uLmRhdGEudXNlcjtcbiAgICAgICAgdXNlcm5hbWUgPSAodS51c2VybmFtZSB8fCB1Lm5hbWUgfHwgdS51c2VyIHx8ICh1LmVtYWlsID8gU3RyaW5nKHUuZW1haWwpLnNwbGl0KCdAJylbMF0gOiAnJykgfHwgJ0FOT04nKTtcbiAgICAgIH1cbiAgICAgIHVzZXJuYW1lID0gU3RyaW5nKHVzZXJuYW1lKS50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoL1teQS1aMC05XS9nLCAnJykuc2xpY2UoMCwgMTgpIHx8ICdBTk9OJztcbiAgICAgIGNvbnN0IGlkID0gYFNMVl8ke3VzZXJuYW1lfWA7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnd3BsYWNlX3NsYXZlX2lkJywgaWQpO1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3dwbGFjZV9zbGF2ZV9pZCcpO1xuICAgICAgICBpZiAoZmFsbGJhY2spIHJldHVybiBmYWxsYmFjaztcbiAgICAgIH0gY2F0Y2gge31cbiAgICAgIHJldHVybiAnU0xWX0FOT04nO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3RUb01hc3RlcigpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdHVzID0gJ2Nvbm5lY3RpbmcnO1xuICAgICAgdGhpcy51cGRhdGVVSSgpO1xuICAgICAgXG4gICAgICAvLyBDYWxjdWxhciBJRCBwZXJzaXN0ZW50ZSB5IGFkanVudGFybG8gY29tbyBxdWVyeSBwYXJhbVxuICAgICAgdGhpcy5zbGF2ZUlkID0gYXdhaXQgdGhpcy5kZXJpdmVQZXJzaXN0ZW50SWQoKTtcbiAgICAgIC8vIE5vcm1hbGl6YXIgZXNxdWVtYSBzZWdcdTAwRkFuIGNvbnRleHRvIHBhcmEgZXZpdGFyIE1peGVkIENvbnRlbnRcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhZ2VJc0h0dHBzID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmxvY2F0aW9uPy5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG4gICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKHRoaXMubWFzdGVyU2VydmVyVXJsKTtcbiAgICAgICAgY29uc3QgaXNXcyA9IHUucHJvdG9jb2wgPT09ICd3czonO1xuICAgICAgICBjb25zdCBpc0xvY2FsID0gWydsb2NhbGhvc3QnLCAnMTI3LjAuMC4xJywgJzo6MSddLmluY2x1ZGVzKHUuaG9zdG5hbWUpO1xuICAgICAgICBpZiAocGFnZUlzSHR0cHMgJiYgaXNXcyAmJiAhaXNMb2NhbCkge1xuICAgICAgICAgIC8vIEF1dG8tdXBncmFkZSBhIHdzcyBjdWFuZG8gbGEgcFx1MDBFMWdpbmEgZXMgaHR0cHMgeSBlbCBkZXN0aW5vIG5vIGVzIGxvY2FsXG4gICAgICAgICAgdGhpcy5tYXN0ZXJTZXJ2ZXJVcmwgPSB0aGlzLm1hc3RlclNlcnZlclVybC5yZXBsYWNlKC9ed3M6XFwvXFwvL2ksICd3c3M6Ly8nKTtcbiAgICAgICAgICBsb2coJ1x1RDgzRFx1REQxMCBQXHUwMEUxZ2luYSBIVFRQUzogYWN0dWFsaXphbmRvIGNvbmV4aVx1MDBGM24gYSB3c3M6Ly8gcGFyYSBldml0YXIgY29udGVuaWRvIG1peHRvJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2gge31cbiAgICAgIGNvbnN0IHVybFdpdGhJZCA9IHRoaXMubWFzdGVyU2VydmVyVXJsLmluY2x1ZGVzKCc/JylcbiAgICAgICAgPyBgJHt0aGlzLm1hc3RlclNlcnZlclVybH0maWQ9JHtlbmNvZGVVUklDb21wb25lbnQodGhpcy5zbGF2ZUlkKX1gXG4gICAgICAgIDogYCR7dGhpcy5tYXN0ZXJTZXJ2ZXJVcmx9P2lkPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuc2xhdmVJZCl9YDtcblxuICAgICAgbG9nKGBcdUQ4M0RcdUREMEMgQ29uZWN0YW5kbyBhbCBzZXJ2aWRvciBtYWVzdHJvOiAke3VybFdpdGhJZH1gKTtcbiAgICAgIHRoaXMud3MgPSBuZXcgV2ViU29ja2V0KHVybFdpdGhJZCk7XG5cbiAgICAgIHRoaXMud3Mub25vcGVuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBsb2coJ1x1MjcwNSBDb25lY3RhZG8gYWwgc2Vydmlkb3IgbWFlc3RybycpO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0dXMgPSAnY29ubmVjdGVkJztcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG4gICAgICAgIHRoaXMudXBkYXRlVUkoKTtcblxuICAgICAgICAvLyBFbnZpYXIgbVx1MDBFOXRyaWNhcyBkZSBpbmljaW8gZGUgc2VzaVx1MDBGM25cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBzZXNzaW9uU3RhcnQoeyBcbiAgICAgICAgICAgIGJvdFZhcmlhbnQ6ICdhdXRvLXNsYXZlJyxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7IFxuICAgICAgICAgICAgICBzbGF2ZUlkOiB0aGlzLnNsYXZlSWQsXG4gICAgICAgICAgICAgIG1hc3RlclVybDogdGhpcy5tYXN0ZXJTZXJ2ZXJVcmwgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ29uZmlndXJhciBwaW5nIGludGVydmFsIHBhcmEgbWFudGVuZXIgbGEgc2VzaVx1MDBGM24gYWN0aXZhXG4gICAgICAgICAgY29uc3QgbWNmZyA9IGdldE1ldHJpY3NDb25maWcoeyBWQVJJQU5UOiAnYXV0by1zbGF2ZScgfSk7XG4gICAgICAgICAgaWYgKG1jZmcuRU5BQkxFRCkge1xuICAgICAgICAgICAgaWYgKCF3aW5kb3cuX193cGxhY2VNZXRyaWNzKSB3aW5kb3cuX193cGxhY2VNZXRyaWNzID0ge307XG4gICAgICAgICAgICB3aW5kb3cuX193cGxhY2VNZXRyaWNzLnNsYXZlU2Vzc2lvbkFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHBpbmdFdmVyeSA9IE1hdGgubWF4KDYwXzAwMCwgbWNmZy5QSU5HX0lOVEVSVkFMX01TIHx8IDMwMF8wMDApO1xuICAgICAgICAgICAgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5zbGF2ZVBpbmdJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbChcbiAgICAgICAgICAgICAgKCkgPT4gc2Vzc2lvblBpbmcoeyBib3RWYXJpYW50OiAnYXV0by1zbGF2ZScgfSksIFxuICAgICAgICAgICAgICBwaW5nRXZlcnlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGxvZyhgXHUyNkEwXHVGRTBGIEVycm9yIGVudmlhbmRvIG1cdTAwRTl0cmljYXMgZGUgaW5pY2lvOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlY3RhciBwYWxldGEgZGUgY29sb3JlcyBsbyBhbnRlcyBwb3NpYmxlIHkgZW52aWFybGEgYWwgbWFzdGVyXG4gICAgICAgIC8vIE5vdGE6IGVzdG8gcGVybWl0ZSBxdWUgZWwgcHJpbWVyIHNsYXZlIGNvbmVjdGFkbyB5YSBjb21wYXJ0YSBhdmFpbGFibGVDb2xvcnNcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBlbnN1cmVHdWFyZENvbG9ycygpO1xuICAgICAgICAgIHRoaXMuc2VuZEF2YWlsYWJsZUNvbG9yc0lmQW55KCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBsb2coJ1x1MjZBMFx1RkUwRiBObyBzZSBwdWRpZXJvbiBkZXRlY3Rhci9lbnZpYXIgY29sb3JlcyBhbCBjb25lY3RhcjonLCBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVudmlhciB0ZWxlbWV0clx1MDBFRGEgaW5pY2lhbCBpbm1lZGlhdGFtZW50ZSAoaW5jbHV5ZSBjYXJnYXMgcmVzdGFudGVzKVxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVRlbGVtZXRyeSgpO1xuICAgICAgICB0aGlzLnNlbmRUZWxlbWV0cnkoKTtcblxuICAgICAgICAvLyBJbmljaWFyIGJ1Y2xlIGRlIHRlbGVtZXRyXHUwMEVEYVxuICAgICAgICB0aGlzLnN0YXJ0VGVsZW1ldHJ5TG9vcCgpO1xuXG4gICAgICAgIC8vIE5vdGlmaWNhciBlc3RhZG8gb25saW5lXG4gICAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3N0YXR1cycsIHN0YXR1czogJ29ubGluZScgfSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLndzLm9ubWVzc2FnZSA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgIGNvbnN0IG1zZyA9IHRyeURlY29tcHJlc3NXcmFwcGVyKGRhdGEpO1xuICAgICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlTWFzdGVyTWVzc2FnZShtc2cpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3IgcHJvY2VzYW5kbyBtZW5zYWplIGRlbCBzZXJ2aWRvcjogJyArIChlPy5tZXNzYWdlIHx8IGUpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy53cy5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGxvZyhgXHUyNzRDIERlc2NvbmVjdGFkbyBkZWwgc2Vydmlkb3IgbWFlc3RybyAtIENcdTAwRjNkaWdvOiAke2V2ZW50LmNvZGV9YCk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXR1cyA9ICdkaXNjb25uZWN0ZWQnO1xuICAgICAgICB0aGlzLnVwZGF0ZVVJKCk7XG4gICAgICAgIC8vIFNvbG8gcmVpbnRlbnRhciBzaSBubyBmdWUgZGVzY29uZXhpXHUwMEYzbiBtYW51YWxcbiAgICAgICAgaWYgKCF0aGlzLm1hbnVhbERpc2Nvbm5lY3QpIHtcbiAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMud3Mub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICBsb2coYFx1Mjc0QyBFcnJvciBkZSBXZWJTb2NrZXQ6ICR7ZXJyb3J9YCk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgICAgIH07XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nKGBcdTI3NEMgRXJyb3IgZGUgY29uZXhpXHUwMEYzbjogJHtlcnJvcn1gKTtcbiAgICAgIHRoaXMuY29ubmVjdGlvblN0YXR1cyA9ICdlcnJvcic7XG4gICAgICB0aGlzLnVwZGF0ZVVJKCk7XG4gICAgICB0aGlzLnNjaGVkdWxlUmVjb25uZWN0KCk7XG4gICAgfVxuICB9XG5cbiAgc2NoZWR1bGVSZWNvbm5lY3QoKSB7XG4gICAgaWYgKHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPCBTTEFWRV9DT05GSUcuTUFYX1JFQ09OTkVDVF9BVFRFTVBUUykge1xuICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cysrO1xuICAgICAgbG9nKGBcdUQ4M0RcdUREMDQgUmVpbnRlbnRhbmRvIGNvbmV4aVx1MDBGM24gZW4gJHtTTEFWRV9DT05GSUcuUkVDT05ORUNUX0lOVEVSVkFMLzEwMDB9cyAoaW50ZW50byAke3RoaXMucmVjb25uZWN0QXR0ZW1wdHN9KWApO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmNvbm5lY3RUb01hc3RlcigpLCBTTEFWRV9DT05GSUcuUkVDT05ORUNUX0lOVEVSVkFMKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nKCdcdTI3NEMgTVx1MDBFMXhpbW8gZGUgaW50ZW50b3MgZGUgcmVjb25leGlcdTAwRjNuIGFsY2FuemFkbycpO1xuICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdHVzID0gJ2Vycm9yJztcbiAgICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYW5kbGVNYXN0ZXJNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBsb2coYFx1RDgzRFx1RENFOCBDb21hbmRvIHJlY2liaWRvOiAke21lc3NhZ2UudHlwZX1gKTtcbiAgICBcbiAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgICAgY2FzZSAnY29ubmVjdGVkJzpcbiAgICAgICAgLy8gVXNhciBlbCBJRCBjb25maXJtYWRvIHBvciBlbCBzZXJ2aWRvciwgbyBtYW50ZW5lciBlbCBjYWxjdWxhZG9cbiAgICAgICAgdGhpcy5zbGF2ZUlkID0gbWVzc2FnZS5zbGF2ZV9pZCB8fCB0aGlzLnNsYXZlSWQ7XG4gICAgICAgIGxvZyhgXHVEODNDXHVERDk0IElEIGRlIFNsYXZlIGFzaWduYWRvOiAke3RoaXMuc2xhdmVJZH1gKTtcbiAgICAgICAgdGhpcy51cGRhdGVVSSgpO1xuICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICBjYXNlICdzZXRNb2RlJzpcbiAgICAgICAgdGhpcy5zZXRNb2RlKG1lc3NhZ2UubW9kZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ2xvYWRQcm9qZWN0JzpcbiAgICAgICAgdGhpcy5sb2FkUHJvamVjdChtZXNzYWdlLmNvbmZpZyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ2Fzc2lnbkNodW5rJzpcbiAgICAgICAgdGhpcy5hc3NpZ25DaHVuayhtZXNzYWdlLmNodW5rKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgY2FzZSAnY29udHJvbCc6XG4gICAgICAgIHRoaXMuaGFuZGxlQ29udHJvbChtZXNzYWdlLmFjdGlvbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgXG4gICAgICAvLyBOVUVWTzogb3JkZW4gZGlyZWN0YSBkZSBwaW50dXJhIGRlc2RlIGVsIG1hc3RlclxuICAgICAgY2FzZSAncGFpbnRCYXRjaCc6XG4gIHRoaXMuaGFuZGxlUGFpbnRCYXRjaChtZXNzYWdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgLy8gTlVFVk86IG5vdGlmaWNhY2lcdTAwRjNuIGRlIHNsYXZlIGZhdm9yaXRvXG4gICAgICBjYXNlICdzZXRGYXZvcml0ZSc6XG4gICAgICAgIHRoaXMuaXNGYXZvcml0ZSA9IG1lc3NhZ2UuaXNGYXZvcml0ZSB8fCBmYWxzZTtcbiAgICAgICAgbG9nKGBcdTJCNTAgU2xhdmUgbWFyY2FkbyBjb21vIGZhdm9yaXRvOiAke3RoaXMuaXNGYXZvcml0ZX1gKTtcbiAgICAgICAgdGhpcy51cGRhdGVVSSgpO1xuICAgICAgICBpZiAodGhpcy5pc0Zhdm9yaXRlKSB7XG4gICAgICAgICAgdHJ5IHsgYXdhaXQgcHJlcGFyZVRva2Vuc0ZvckJvdCgnU2xhdmUtRmF2b3JpdGUnKTsgfSBjYXRjaCB7fVxuICAgICAgICAgIHRyeSB7IGF3YWl0IGVuc3VyZUd1YXJkQ29sb3JzKCk7IH0gY2F0Y2gge31cbiAgICAgICAgICAvLyBFbnZpYXIgcGFsZXRhIGRpc3BvbmlibGUgaW5tZWRpYXRhbWVudGUgc2kgZXhpc3RlXG4gICAgICAgICAgdHJ5IHsgdGhpcy5zZW5kQXZhaWxhYmxlQ29sb3JzSWZBbnkoKTsgfSBjYXRjaCB7fVxuICAgICAgICAgIC8vIEF1dG8taW5pY2lhciBHdWFyZCBoZWFkbGVzcyBwYXJhIGFzZWd1cmFyIHByZXZpZXcvdGVsZW1ldHJcdTAwRURhXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRNb2RlICE9PSAnR3VhcmQnKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0TW9kZSgnR3VhcmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdGFydEJvdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgbG9nKCdcdTI2QTBcdUZFMEYgTm8gc2UgcHVkbyBhdXRvLWluaWNpYXIgYWwgc2VyIGZhdm9yaXRvOicsIGUpOyB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBcbiAgICAgIGNhc2UgJ2Zhdm9yaXRlX3N0YXR1cyc6XG4gICAgICAgIHRoaXMuaXNGYXZvcml0ZSA9IG1lc3NhZ2UuaXNfZmF2b3JpdGUgfHwgZmFsc2U7XG4gICAgICAgIGxvZyhgXHUyQjUwIEVzdGFkbyBkZSBmYXZvcml0byBhY3R1YWxpemFkbzogJHt0aGlzLmlzRmF2b3JpdGV9YCk7XG4gICAgICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNGYXZvcml0ZSkge1xuICAgICAgICAgIHRyeSB7IGF3YWl0IHByZXBhcmVUb2tlbnNGb3JCb3QoJ1NsYXZlLUZhdm9yaXRlJyk7IH0gY2F0Y2gge31cbiAgICAgICAgICB0cnkgeyBhd2FpdCBlbnN1cmVHdWFyZENvbG9ycygpOyB9IGNhdGNoIHt9XG4gICAgICAgICAgLy8gRW52aWFyIHBhbGV0YSBkaXNwb25pYmxlIGlubWVkaWF0YW1lbnRlIHNpIGV4aXN0ZVxuICAgICAgICAgIHRyeSB7IHRoaXMuc2VuZEF2YWlsYWJsZUNvbG9yc0lmQW55KCk7IH0gY2F0Y2gge31cbiAgICAgICAgICAvLyBBdXRvLWluaWNpYXIgR3VhcmQgc2kgYVx1MDBGQW4gbm8gZXN0XHUwMEUxIGNvcnJpZW5kb1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TW9kZSAhPT0gJ0d1YXJkJykge1xuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldE1vZGUoJ0d1YXJkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RhcnRCb3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7IGxvZygnXHUyNkEwXHVGRTBGIE5vIHNlIHB1ZG8gYXV0by1pbmljaWFyIChmYXZvcml0ZV9zdGF0dXMpOicsIGUpOyB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBcbiAgICAgIGNhc2UgJ3JlcGFpck9yZGVyJzpcbiAgICAgICAgbG9nKGBcdUQ4M0RcdUREMjcgT3JkZW4gZGUgcmVwYXJhY2lcdTAwRjNuIHJlY2liaWRhOiAke21lc3NhZ2UudG90YWxfcmVwYWlyc30gcFx1MDBFRHhlbGVzIGEgcmVwYXJhcmApO1xuICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZVJlcGFpck9yZGVyKG1lc3NhZ2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2d1YXJkRGF0YSc6XG4gICAgICAgIGF3YWl0IG1vZHVsYXJIYW5kbGVHdWFyZERhdGEobWVzc2FnZSwge1xuICAgICAgICAgIHNldE1vZGVJZk5lZWRlZDogYXN5bmMgKCkgPT4geyBpZiAodGhpcy5jdXJyZW50TW9kZSAhPT0gJ0d1YXJkJykgYXdhaXQgdGhpcy5zZXRNb2RlKCdHdWFyZCcpOyB9LFxuICAgICAgICAgIHNlbmRQcmV2aWV3OiAocHJldmlldykgPT4gdGhpcy5zZW5kUHJldmlldyhwcmV2aWV3KSxcbiAgICAgICAgICBzdGFydEFuYWx5c2lzTG9vcDogKCkgPT4gbW9kdWxhclN0YXJ0QXV0b21hdGlvbih7XG4gICAgICAgICAgICBzZW5kUHJldmlldzogKGRhdGEpPT4gdGhpcy5zZW5kUHJldmlldyhkYXRhKSxcbiAgICAgICAgICAgIHNlbmRSZXBhaXJTdWdnZXN0aW9uOiAocmVzKT0+IHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3JlcGFpcl9zdWdnZXN0aW9uJywgcGl4ZWxzOiByZXMucGl4ZWxzLCB0b3RhbERpZmZzOiByZXMudG90YWxEaWZmcywgcGF0dGVyblVzZWQ6IHJlcy5wYXR0ZXJuVXNlZCwgYXV0bzogdHJ1ZSB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2d1YXJkQ29uZmlnJzpcbiAgICAgICAgYXdhaXQgbW9kdWxhckFwcGx5R3VhcmRDb25maWcobWVzc2FnZS5jb25maWcgfHwge30sIG1lc3NhZ2UuY2hhbmdlZCB8fCB7fSwge1xuICAgICAgICAgIG9uSW50ZXJ2YWxDaGFuZ2U6IChtcykgPT4geyAvKiBFbCBtXHUwMEYzZHVsbyBtYW5lamEgaW50ZXJuYW1lbnRlIGVsIGxvb3A7IG5hZGEgYWRpY2lvbmFsIGFxdVx1MDBFRCAqLyB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBTaSBlcyBmYXZvcml0bywgZ2FyYW50aXphciBxdWUgZWwgR3VhcmQgZXN0XHUwMEU5IGFjdGl2byBwYXJhIHVzYXIgbGEgY29uZmlnXG4gICAgICAgIGlmICh0aGlzLmlzRmF2b3JpdGUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vZGUgIT09ICdHdWFyZCcpIHtcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRNb2RlKCdHdWFyZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0Qm90KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkgeyBsb2coJ1x1MjZBMFx1RkUwRiBObyBzZSBwdWRvIGluaWNpYXIgdHJhcyBndWFyZENvbmZpZzonLCBlKTsgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZ3VhcmRDb250cm9sJzpcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vZGUgIT09ICdHdWFyZCcpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnNldE1vZGUoJ0d1YXJkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSAnY2hlY2snKSB7XG4gICAgICAgICAgYXdhaXQgZ3VhcmRNYW51YWxDaGVjayh7IHNlbmRQcmV2aWV3OiAoZGF0YSk9PiB0aGlzLnNlbmRQcmV2aWV3KGRhdGEpIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSAncmVwYWlyJykge1xuICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IG1lc3NhZ2UucGFyYW1zIHx8IHt9O1xuICAgICAgICAgIC8vIE1vZG8gbnVldm86IGVqZWN1dGFyIHVuIGxvdGUgaW5tZWRpYXRvIGRlc2RlIHNsYXZlIHNpIGxpbWl0ID4gMFxuICAgICAgICAgIGlmIChwYXJhbXMubGltaXQgJiYgcGFyYW1zLmxpbWl0ID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGVkID0gYXdhaXQgZ3VhcmRNYW51YWxSZXBhaXIocGFyYW1zLCB7IHNlbmRQcmV2aWV3OiAoZGF0YSk9PiB0aGlzLnNlbmRQcmV2aWV3KGRhdGEpIH0pO1xuICAgICAgICAgICAgaWYgKHN1Z2dlc3RlZCAmJiBBcnJheS5pc0FycmF5KHN1Z2dlc3RlZC5waXhlbHMpICYmIHN1Z2dlc3RlZC5waXhlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3JlcGFpcl9hY2snLCB0b3RhbF9yZXBhaXJzOiBzdWdnZXN0ZWQucGl4ZWxzLmxlbmd0aCwgc291cmNlOiAnZ3VhcmRfb25lX2JhdGNoJyB9KTtcbiAgICAgICAgICAgICAgdGhpcy5hYm9ydFBhaW50aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgIGF3YWl0IG1vZFJlcGFpclBpeGVscyh7XG4gICAgICAgICAgICAgICAgcGl4ZWxzOiBzdWdnZXN0ZWQucGl4ZWxzLFxuICAgICAgICAgICAgICAgIHRpbGVTaXplOiBHVUFSRF9ERUZBVUxUUz8uVElMRV9TSVpFIHx8IDEwMDAsXG4gICAgICAgICAgICAgICAgc2VuZFRvTWFzdGVyOiAobSkgPT4gdGhpcy5zZW5kVG9NYXN0ZXIobSksXG4gICAgICAgICAgICAgICAgc2hvdWxkQWJvcnQ6ICgpID0+IHRoaXMuYWJvcnRQYWludGluZyA9PT0gdHJ1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3JlcGFpcl9jb21wbGV0ZScsIGNvbXBsZXRlZDogMCwgc291cmNlOiAnZ3VhcmRfb25lX2JhdGNoJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ29tcG9ydGFtaWVudG8gYW50ZXJpb3I6IHNvbG8gc3VnZXJpclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ3VhcmRNYW51YWxSZXBhaXIocGFyYW1zLCB7IHNlbmRQcmV2aWV3OiAoZGF0YSk9PiB0aGlzLnNlbmRQcmV2aWV3KGRhdGEpIH0pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdC5waXhlbHMpKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3JlcGFpcl9zdWdnZXN0aW9uJywgcGl4ZWxzOiByZXN1bHQucGl4ZWxzLCB0b3RhbERpZmZzOiByZXN1bHQudG90YWxEaWZmcyB8fCAwIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLmFjdGlvbiA9PT0gJ3RvZ2dsZVdhdGNoJykge1xuICAgICAgICAgIGNvbnN0IG5ld01vZGUgPSBhd2FpdCBndWFyZFRvZ2dsZVdhdGNoTW9kZSgpO1xuICAgICAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3N0YXR1cycsIHN0YXR1czogJ3dhdGNoX3RvZ2dsZWQnLCB3YXRjaE1vZGU6IG5ld01vZGUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdjbGVhcicpIHtcbiAgICAgICAgICAvLyBBYm9ydGFyIHBpbnR1cmEgZW4gY3Vyc28geSBsaW1waWFyIGVzdGFkbyBjb21wbGV0byBkZWwgc2xhdmVcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5hYm9ydFBhaW50aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRGV0ZW5lciBjdWFscXVpZXIgYm90IGVuIGVqZWN1Y2lcdTAwRjNuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9wQm90KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExpbXBpYXIgZXN0YWRvIGRlIEd1YXJkXG4gICAgICAgICAgICBjb25zdCBvayA9IGF3YWl0IGd1YXJkQ2xlYXJTdGF0ZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZXNldCBjb21wbGV0byBkZWwgc2xhdmUgLSB2b2x2ZXIgYSBlc3RhZG8gaW5pY2lhbFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TW9kZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnByb2plY3REYXRhID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExpbXBpYXIgdGVsZW1ldHJcdTAwRURhXG4gICAgICAgICAgICB0aGlzLnRlbGVtZXRyeURhdGEgPSB7XG4gICAgICAgICAgICAgIHJlcGFpcmVkX3BpeGVsczogMCxcbiAgICAgICAgICAgICAgbWlzc2luZ19waXhlbHM6IDAsXG4gICAgICAgICAgICAgIGFic2VudF9waXhlbHM6IDAsXG4gICAgICAgICAgICAgIHJlbWFpbmluZ19jaGFyZ2VzOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBFbnZpYXIgZXN0YWRvIGNvbmZpcm1hbmRvIGxpbXBpZXphXG4gICAgICAgICAgICB0aGlzLnNlbmRUb01hc3Rlcih7IHR5cGU6ICdzdGF0dXMnLCBzdGF0dXM6IG9rID8gJ2NsZWFyZWQnIDogJ2NsZWFyX2Vycm9yJyB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRW52aWFyIHRlbGVtZXRyXHUwMEVEYSBpbm1lZGlhdGEgcG9zdC1jbGVhclxuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVUZWxlbWV0cnkoKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZFRlbGVtZXRyeSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBY3R1YWxpemFyIFVJIHBhcmEgcmVmbGVqYXIgZWwgcmVzZXRcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbG9nKCdcdUQ4M0VcdURERjkgU2xhdmUgY29tcGxldGFtZW50ZSBsaW1waWFkbyAtIHZ1ZWx0byBhIGVzdGFkbyBpbmljaWFsJyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoeyB0eXBlOiAnc3RhdHVzJywgc3RhdHVzOiAnY2xlYXJfZXJyb3InLCBlcnJvcjogU3RyaW5nKGU/Lm1lc3NhZ2UgfHwgZSkgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZyhgXHUyNzUzIENvbWFuZG8gZGVzY29ub2NpZG86ICR7bWVzc2FnZS50eXBlfWApO1xuICAgIH1cbiAgfVxuXG4gIC8vIE5VRVZPOiBtYW5lamFyIGxvdGUgZGUgcGludHVyYSByZW1vdG8gKHNvbG8gcGludGEgbG8gcXVlIG1hbmRhIGVsIG1hc3RlcilcbiAgYXN5bmMgaGFuZGxlUGFpbnRCYXRjaChtZXNzYWdlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgdGlsZVgsIHRpbGVZLCBjb29yZHMsIGNvbG9ycywgcmVxdWVzdElkLCBiYXRjaElkIH0gPSBtZXNzYWdlIHx8IHt9O1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvb3JkcykgfHwgIUFycmF5LmlzQXJyYXkoY29sb3JzKSB8fCBjb29yZHMubGVuZ3RoICE9PSBjb2xvcnMubGVuZ3RoIHx8IGNvb3Jkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoeyB0eXBlOiAncGFpbnRfcmVzdWx0Jywgb2s6IGZhbHNlLCBlcnJvcjogJ0ludmFsaWQgY29vcmRzL2NvbG9ycycsIHRpbGVYLCB0aWxlWSwgcGFpbnRlZDogMCwgcmVxdWVzdElkLCBiYXRjaElkIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBDb25zdHJ1aXIgZmxhdCBjb29yZHMgZGVzZGUgb2JqZXRvcyB5YSBsb2NhbGVzXG4gICAgICBjb25zdCBjbGVhbkNvb3Jkc0ZsYXQgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgYyBvZiBjb29yZHMpIHtcbiAgICAgICAgY29uc3QgeCA9IE1hdGgudHJ1bmMoYz8ueCk7XG4gICAgICAgIGNvbnN0IHkgPSBNYXRoLnRydW5jKGM/LnkpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHgpICYmIE51bWJlci5pc0Zpbml0ZSh5KSkge1xuICAgICAgICAgIGNvbnN0IGx4ID0gKCh4ICUgMTAwMCkgKyAxMDAwKSAlIDEwMDA7XG4gICAgICAgICAgY29uc3QgbHkgPSAoKHkgJSAxMDAwKSArIDEwMDApICUgMTAwMDtcbiAgICAgICAgICBjbGVhbkNvb3Jkc0ZsYXQucHVzaChseCwgbHkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWJvcnRQYWludGluZyA9IGZhbHNlO1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgbW9kUGFpbnRCYXRjaCh7IFxuICAgICAgICB0aWxlWCwgXG4gICAgICAgIHRpbGVZLCBcbiAgICAgICAgY29vcmRzRmxhdDogY2xlYW5Db29yZHNGbGF0LCBcbiAgICAgICAgY29sb3JzLCBcbiAgICAgICAgLy8gUHJvcGFnYXIgcmVxdWVzdElkIGVuIHRvZG9zIGxvcyBtZW5zYWplcyBkZSBwcm9ncmVzb1xuICAgIHNlbmRUb01hc3RlcjogKG0pPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAobSAmJiB0eXBlb2YgbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgLi4ubSwgcmVxdWVzdElkLCBiYXRjaElkIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIobSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICB0aGlzLnNlbmRUb01hc3RlcihtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIFxuICAgICAgICBzaG91bGRBYm9ydDogKCk9PiB0aGlzLmFib3J0UGFpbnRpbmcgPT09IHRydWUgXG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0dWFsaXphciBjYXJnYXMgeSB0ZWxlbWV0clx1MDBFRGEgdHJhcyBwaW50YXJcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlVGVsZW1ldHJ5KCk7XG4gICAgICB0aGlzLnNlbmRUZWxlbWV0cnkoKTtcblxuICAgICAgaWYgKCFyZXM/LmFib3J0ZWQpIHtcbiAgICAgICAgLy8gSW5jbHVpciBjb29yZHMgb3JpZ2luYWxlcyBwYXJhIHRyYWNraW5nIGVuIGVsIHNlcnZpZG9yXG4gICAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3BhaW50X3Jlc3VsdCcsIG9rOiAhIXJlcz8uc3VjY2Vzcywgc3RhdHVzOiByZXM/LnN0YXR1cyB8fCAwLCB0aWxlWCwgdGlsZVksIGNvb3JkcywgcGFpbnRlZDogcmVzPy5wYWludGVkIHx8IDAsIHJlcXVlc3RJZCwgYmF0Y2hJZCB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEVudmlhciBtXHUwMEU5dHJpY2FzIGRlIHBcdTAwRUR4ZWxlcyBwaW50YWRvcyBzaSBmdWUgZXhpdG9zb1xuICAgICAgICBpZiAocmVzPy5zdWNjZXNzICYmIHJlcz8ucGFpbnRlZCA+IDApIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBwaXhlbHNQYWludGVkIH0gPSBhd2FpdCBpbXBvcnQoJy4uL2NvcmUvbWV0cmljcy9jbGllbnQuanMnKTtcbiAgICAgICAgICAgIGF3YWl0IHBpeGVsc1BhaW50ZWQocmVzLnBhaW50ZWQsIHtcbiAgICAgICAgICAgICAgYm90VmFyaWFudDogJ2F1dG8tc2xhdmUnLFxuICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgIHNsYXZlSWQ6IHRoaXMuc2xhdmVJZCxcbiAgICAgICAgICAgICAgICBtb2RlOiB0aGlzLmN1cnJlbnRNb2RlLFxuICAgICAgICAgICAgICAgIHRpbGVYLFxuICAgICAgICAgICAgICAgIHRpbGVZLFxuICAgICAgICAgICAgICAgIGJhdGNoSWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFNpbGVuY2lvc28gcGFyYSBubyBpbnRlcnJ1bXBpciBlbCBmbHVqb1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nKGBcdTI3NEMgRXJyb3IgZW4gaGFuZGxlUGFpbnRCYXRjaDogJHtlcnI/Lm1lc3NhZ2UgfHwgZXJyfWApO1xuICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoeyB0eXBlOiAncGFpbnRfcmVzdWx0Jywgb2s6IGZhbHNlLCBlcnJvcjogU3RyaW5nKGVycj8ubWVzc2FnZSB8fCBlcnIpLCB0aWxlWDogbWVzc2FnZT8udGlsZVgsIHRpbGVZOiBtZXNzYWdlPy50aWxlWSwgY29vcmRzOiBtZXNzYWdlPy5jb29yZHMsIHBhaW50ZWQ6IDAsIHJlcXVlc3RJZDogbWVzc2FnZT8ucmVxdWVzdElkLCBiYXRjaElkOiBtZXNzYWdlPy5iYXRjaElkIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIE5VRVZPOiBwcm9jZXNhIHVuYSBvcmRlbiBkZSByZXBhcmFjaVx1MDBGM24gZ2VuXHUwMEU5cmljYSBhZ3J1cGFuZG8gcG9yIHRpbGUgeSB1c2FuZG8gaGFuZGxlUGFpbnRCYXRjaFxuICBhc3luYyBoYW5kbGVSZXBhaXJPcmRlcihtZXNzYWdlKSB7XG4gICAgbG9nKGBcdUQ4M0RcdUREMjcgUHJvY2VzYW5kbyBvcmRlbiBkZSByZXBhcmFjaVx1MDBGM246ICR7bWVzc2FnZS50b3RhbF9yZXBhaXJzfSBwXHUwMEVEeGVsZXNgKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBjb29yZHMsIGNvbG9ycywgc291cmNlIH0gPSBtZXNzYWdlIHx8IHt9O1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvb3JkcykgfHwgIUFycmF5LmlzQXJyYXkoY29sb3JzKSB8fCBjb29yZHMubGVuZ3RoICE9PSBjb2xvcnMubGVuZ3RoKSB7XG4gICAgICAgIGxvZygnXHUyNzRDIE9yZGVuIGRlIHJlcGFyYWNpXHUwMEYzbiBpbnZcdTAwRTFsaWRhOiBjb29yZGVuYWRhcyB5IGNvbG9yZXMgbm8gY29pbmNpZGVuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQXZpc28gZGUgcmVjZXBjaVx1MDBGM25cbiAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3JlcGFpcl9hY2snLCB0b3RhbF9yZXBhaXJzOiBjb29yZHMubGVuZ3RoLCBzb3VyY2UgfSk7XG5cbiAgICAgIC8vIEFncnVwYXIgcG9yIHRpbGUgcGFyYSB1c2FyIGxhIEFQSSAvczAvcGl4ZWwve3RpbGVYfS97dGlsZVl9XG4gICAgICBjb25zdCBUSUxFID0gR1VBUkRfREVGQVVMVFM/LlRJTEVfU0laRSB8fCAxMDAwO1xuICAgICAgY29uc3QgYnlUaWxlID0gbmV3IE1hcCgpOyAvLyBrZXkgXCJ0eCx0eVwiIC0+IHsgdGlsZVgsIHRpbGVZLCBjb29yZHM6IFt7eCx5fV0sIGNvbG9yczogbnVtYmVyW10gfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjID0gY29vcmRzW2ldIHx8IHt9O1xuICAgICAgICBjb25zdCBjb2wgPSBjb2xvcnNbaV07XG4gICAgICAgIGNvbnN0IGd4ID0gTWF0aC50cnVuYyhjLngpO1xuICAgICAgICBjb25zdCBneSA9IE1hdGgudHJ1bmMoYy55KTtcbiAgICAgICAgY29uc3QgdGlsZVggPSBNYXRoLmZsb29yKGd4IC8gVElMRSk7XG4gICAgICAgIGNvbnN0IHRpbGVZID0gTWF0aC5mbG9vcihneSAvIFRJTEUpO1xuICAgICAgICBjb25zdCBseCA9IGd4IC0gdGlsZVggKiBUSUxFOyAvLyBjb29yZCBsb2NhbCBkZW50cm8gZGVsIHRpbGUgWzAuLlRJTEUpXG4gICAgICAgIGNvbnN0IGx5ID0gZ3kgLSB0aWxlWSAqIFRJTEU7XG4gICAgICAgIGNvbnN0IGtleSA9IGAke3RpbGVYfSwke3RpbGVZfWA7XG4gICAgICAgIGlmICghYnlUaWxlLmhhcyhrZXkpKSBieVRpbGUuc2V0KGtleSwgeyB0aWxlWCwgdGlsZVksIGNvb3JkczogW10sIGNvbG9yczogW10gfSk7XG4gICAgICAgIGNvbnN0IGJ1Y2tldCA9IGJ5VGlsZS5nZXQoa2V5KTtcbiAgICAgICAgYnVja2V0LmNvb3Jkcy5wdXNoKHsgeDogbHgsIHk6IGx5IH0pO1xuICAgICAgICBidWNrZXQuY29sb3JzLnB1c2goY29sKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJvY2VzYXIgdGlsZSBwb3IgdGlsZSBlbiBwZXF1ZVx1MDBGMW9zIGxvdGVzIHBhcmEgbm8gc2F0dXJhclxuICAgICAgY29uc3QgQ0hVTksgPSA1MDsgLy8gc3ViLWxvdGVzIHBvciB0aWxlOyBoYW5kbGVQYWludEJhdGNoIGludGVybmFtZW50ZSB0cm9jZWEgYSAyMDBcbiAgICAgIGxldCBjb21wbGV0ZWQgPSAwO1xuICAgICAgY29uc3QgdG90YWwgPSBjb29yZHMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGNvbnN0IFssIGdyb3VwXSBvZiBieVRpbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuYWJvcnRQYWludGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGxvZygnXHUyM0Y5XHVGRTBGIFJlcGFyYWNpXHUwMEYzbiBhYm9ydGFkYSBwb3IgU3RvcCcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdGlsZVgsIHRpbGVZLCBjb29yZHM6IGxjLCBjb2xvcnM6IGNvbHMgfSA9IGdyb3VwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxjLmxlbmd0aDsgaSArPSBDSFVOSykge1xuICAgICAgICAgIGlmICh0aGlzLmFib3J0UGFpbnRpbmcgPT09IHRydWUpIHsgbG9nKCdcdTIzRjlcdUZFMEYgUmVwYXJhY2lcdTAwRjNuIGFib3J0YWRhIGR1cmFudGUgc3ViLWxvdGUnKTsgYnJlYWs7IH1cbiAgICAgICAgICBjb25zdCBwYXJ0Q29vcmRzID0gbGMuc2xpY2UoaSwgaSArIENIVU5LKTtcbiAgICAgICAgICBjb25zdCBwYXJ0Q29sb3JzID0gY29scy5zbGljZShpLCBpICsgQ0hVTkspO1xuICAgICAgICAgIGNvbnN0IGJhdGNoTXNnID0geyB0aWxlWCwgdGlsZVksIGNvb3JkczogcGFydENvb3JkcywgY29sb3JzOiBwYXJ0Q29sb3JzIH07XG4gICAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVQYWludEJhdGNoKGJhdGNoTXNnKTtcbiAgICAgICAgICBjb21wbGV0ZWQgKz0gcGFydENvb3Jkcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoeyB0eXBlOiAncmVwYWlyX3Byb2dyZXNzJywgY29tcGxldGVkLCB0b3RhbCwgc291cmNlIH0pO1xuICAgICAgICAgIGxvZyhgXHVEODNDXHVERkE4IFByb2dyZXNvIGRlIHJlcGFyYWNpXHUwMEYzbjogJHtjb21wbGV0ZWR9LyR7dG90YWx9YCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRW52aWFyIG1cdTAwRTl0cmljYXMgZGUgcFx1MDBFRHhlbGVzIHJlcGFyYWRvc1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IHBpeGVsc1JlcGFpcmVkIH0gPSBhd2FpdCBpbXBvcnQoJy4uL2NvcmUvbWV0cmljcy9jbGllbnQuanMnKTtcbiAgICAgICAgICAgIGF3YWl0IHBpeGVsc1JlcGFpcmVkKHBhcnRDb29yZHMubGVuZ3RoLCB7XG4gICAgICAgICAgICAgIGJvdFZhcmlhbnQ6ICdhdXRvLXNsYXZlJyxcbiAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBzbGF2ZUlkOiB0aGlzLnNsYXZlSWQsXG4gICAgICAgICAgICAgICAgbW9kZTogdGhpcy5jdXJyZW50TW9kZSxcbiAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgdGlsZVgsXG4gICAgICAgICAgICAgICAgdGlsZVksXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IGAke2NvbXBsZXRlZH0vJHt0b3RhbH1gXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBTaWxlbmNpb3NvIHBhcmEgbm8gaW50ZXJydW1waXIgZWwgZmx1am9cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gUGVxdWVcdTAwRjFhIHBhdXNhIHBhcmEgcmVzcGlyYWNpXHUwMEYzbiBkZSByZWQvc2Vydmlkb3JcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgMjAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYWJvcnRQYWludGluZyA9PT0gdHJ1ZSkgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmFib3J0UGFpbnRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoeyB0eXBlOiAncmVwYWlyX2Vycm9yJywgZXJyb3I6ICdhYm9ydGVkJywgc291cmNlIH0pO1xuICAgICAgICBsb2coJ1x1MjNGOVx1RkUwRiBPcmRlbiBkZSByZXBhcmFjaVx1MDBGM24gYWJvcnRhZGEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3JlcGFpcl9jb21wbGV0ZScsIGNvbXBsZXRlZCwgc291cmNlIH0pO1xuICAgICAgICBsb2coYFx1MjcwNSBPcmRlbiBkZSByZXBhcmFjaVx1MDBGM24gY29tcGxldGFkYTogJHtjb21wbGV0ZWR9IHBcdTAwRUR4ZWxlcyByZXBhcmFkb3NgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZyhgXHUyNzRDIEVycm9yIHByb2Nlc2FuZG8gb3JkZW4gZGUgcmVwYXJhY2lcdTAwRjNuOiAke2Vycj8ubWVzc2FnZSB8fCBlcnJ9YCk7XG4gICAgICB0aGlzLnNlbmRUb01hc3Rlcih7IHR5cGU6ICdyZXBhaXJfZXJyb3InLCBlcnJvcjogU3RyaW5nKGVycj8ubWVzc2FnZSB8fCBlcnIpLCBzb3VyY2U6IG1lc3NhZ2U/LnNvdXJjZSB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzZXRNb2RlKG1vZGUpIHtcbiAgICB0cnkge1xuICAvLyBOb3JtYWxpemFyIG1vZG8gcmVjaWJpZG8gKHB1ZWRlIHZlbmlyIGVuIG1pblx1MDBGQXNjdWxhcyBkZXNkZSBsYSBVSSlcbiAgbW9kZSA9IHRoaXMubm9ybWFsaXplTW9kZShtb2RlKTtcbiAgICAgIGxvZyhgXHVEODNDXHVERkFGIENvbmZpZ3VyYW5kbyBtb2RvOiAke21vZGV9YCk7XG4gICAgICB0aGlzLmN1cnJlbnRNb2RlID0gbW9kZTtcbiAgICAgIFxuICAgICAgLy8gRGV0ZW5lciBib3QgYWN0dWFsIHNpIGVzdFx1MDBFMSBlamVjdXRcdTAwRTFuZG9zZVxuICAgICAgaWYgKHRoaXMuY3VycmVudEJvdCAmJiB0aGlzLmlzUnVubmluZykge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3BDdXJyZW50Qm90KCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEluaWNpYWxpemFyIGVsIGJvdCBhcHJvcGlhZG9cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUJvdChtb2RlKTtcbiAgICAgIFxuICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoe1xuICAgICAgICB0eXBlOiAnc3RhdHVzJyxcbiAgICAgICAgc3RhdHVzOiAnbW9kZV9zZXQnLFxuICAgICAgICBtb2RlOiBtb2RlXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgdGhpcy51cGRhdGVVSSgpO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZyhgXHUyNzRDIEVycm9yIGNvbmZpZ3VyYW5kbyBtb2RvOiAke2Vycm9yfWApO1xuICAgICAgdGhpcy5zZW5kVG9NYXN0ZXIoe1xuICAgICAgICB0eXBlOiAnc3RhdHVzJyxcbiAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaW5pdGlhbGl6ZUJvdChtb2RlKSB7XG4gIG1vZGUgPSB0aGlzLm5vcm1hbGl6ZU1vZGUobW9kZSk7XG4gICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICBjYXNlICdJbWFnZSc6XG4gICAgICAgIHRoaXMuY3VycmVudEJvdCA9IHtcbiAgICAgICAgICBzdGFydDogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbG9nKCdcdUQ4M0NcdURGQTggSW5pY2lhbmRvIGJvdCBkZSBpbWFnZW4uLi4nKTtcbiAgICAgICAgICAgIHdpbmRvdy5fX3dwbGFjZUJvdCA9IHsgLi4ud2luZG93Ll9fd3BsYWNlQm90LCBpbWFnZVJ1bm5pbmc6IHRydWUgfTtcbiAgICAgICAgICAgIHRyeSB7IGF3YWl0IHByZXBhcmVUb2tlbnNGb3JCb3QoJ0ltYWdlJyk7IH0gY2F0Y2gge31cbiAgICAgICAgICAgIGF3YWl0IHJ1bkltYWdlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdG9wOiAoKSA9PiB7XG4gICAgICAgICAgICBsb2coJ1x1MjNGOVx1RkUwRiBEZXRlbmllbmRvIGJvdCBkZSBpbWFnZW4nKTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuX193cGxhY2VCb3QpIHtcbiAgICAgICAgICAgICAgd2luZG93Ll9fd3BsYWNlQm90LmltYWdlUnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGF1c2U6ICgpID0+IGxvZygnXHUyM0Y4XHVGRTBGIEJvdCBkZSBpbWFnZW4gcGF1c2FkbycpLFxuICAgICAgICAgIGdldFRlbGVtZXRyeTogKCkgPT4gdGhpcy5nZXRJbWFnZVRlbGVtZXRyeSgpXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ0d1YXJkJzpcbiAgICAgICAgdGhpcy5jdXJyZW50Qm90ID0ge1xuICAgICAgICAgIHN0YXJ0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBIZWFkbGVzcyBndWFyZDogbm8gVUksIHNvbG8gYW5cdTAwRTFsaXNpcyB5IHJlcGFyYWNpXHUwMEYzbiB2XHUwMEVEYSBcdTAwRjNyZGVuZXMgZXh0ZXJuYXNcbiAgICAgICAgICAgIGxvZygnXHVEODNEXHVERUUxXHVGRTBGIEluaWNpYW5kbyBHdWFyZCBoZWFkbGVzcyAoc2luIFVJKS4uLicpO1xuICAgICAgICAgICAgd2luZG93Ll9fd3BsYWNlQm90ID0geyAuLi53aW5kb3cuX193cGxhY2VCb3QsIGd1YXJkUnVubmluZzogdHJ1ZSB9O1xuICAgICAgICAgICAgdHJ5IHsgYXdhaXQgcHJlcGFyZVRva2Vuc0ZvckJvdCgnR3VhcmQnKTsgfSBjYXRjaCB7fVxuICAgICAgICAgICAgLy8gQXNlZ3VyYXIgZ3VhcmRTdGF0ZSBiXHUwMEUxc2ljbyBzaW4gbGFuemFyIFVJIGNvbXBsZXRhXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpbmRvdy5ndWFyZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kID0gYXdhaXQgaW1wb3J0KCcuLi9ndWFyZC9jb25maWcuanMnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZ3VhcmRTdGF0ZSA9IG1vZC5ndWFyZFN0YXRlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIEludGVudGFyIGRldGVjdGFyIGNvbG9yZXMgcGFyYSBwZXJtaXRpciBhblx1MDBFMWxpc2lzXG4gICAgICAgICAgICAgICAgICBhd2FpdCBlbnN1cmVHdWFyZENvbG9ycygpO1xuICAgICAgICAgICAgICBsb2coYFx1RDgzQ1x1REZBOCBDb2xvcmVzIGhlYWRsZXNzIGRpc3BvbmlibGVzOiAke3dpbmRvdy5ndWFyZFN0YXRlPy5hdmFpbGFibGVDb2xvcnM/Lmxlbmd0aCB8fCAwfWApO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBsb2coJ1x1MjZBMFx1RkUwRiBFcnJvciBpbmljaWFsaXphbmRvIEd1YXJkIGhlYWRsZXNzOicsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3RvcDogKCkgPT4ge1xuICAgICAgICAgICAgbG9nKCdcdTIzRjlcdUZFMEYgRGV0ZW5pZW5kbyBib3QgZ3VhcmRpXHUwMEUxbicpO1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5fX3dwbGFjZUJvdCkge1xuICAgICAgICAgICAgICB3aW5kb3cuX193cGxhY2VCb3QuZ3VhcmRSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXVzZTogKCkgPT4gbG9nKCdcdTIzRjhcdUZFMEYgQm90IGd1YXJkaVx1MDBFMW4gcGF1c2FkbycpLFxuICAgICAgICAgIGdldFRlbGVtZXRyeTogKCkgPT4gdGhpcy5nZXRHdWFyZFRlbGVtZXRyeSgpXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ0Zhcm0nOlxuICAgICAgICB0aGlzLmN1cnJlbnRCb3QgPSB7XG4gICAgICAgICAgc3RhcnQ6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxvZygnXHVEODNDXHVERjNFIEluaWNpYW5kbyBib3QgZGUgZmFybWluZy4uLicpO1xuICAgICAgICAgICAgd2luZG93Ll9fd3BsYWNlQm90ID0geyAuLi53aW5kb3cuX193cGxhY2VCb3QsIGZhcm1SdW5uaW5nOiB0cnVlIH07XG4gICAgICAgICAgICB0cnkgeyBhd2FpdCBwcmVwYXJlVG9rZW5zRm9yQm90KCdGYXJtJyk7IH0gY2F0Y2gge31cbiAgICAgICAgICAgIGF3YWl0IHJ1bkZhcm0oKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0b3A6ICgpID0+IHtcbiAgICAgICAgICAgIGxvZygnXHUyM0Y5XHVGRTBGIERldGVuaWVuZG8gYm90IGRlIGZhcm1pbmcnKTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuX193cGxhY2VCb3QpIHtcbiAgICAgICAgICAgICAgd2luZG93Ll9fd3BsYWNlQm90LmZhcm1SdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXVzZTogKCkgPT4gbG9nKCdcdTIzRjhcdUZFMEYgQm90IGRlIGZhcm1pbmcgcGF1c2FkbycpLFxuICAgICAgICAgIGdldFRlbGVtZXRyeTogKCkgPT4gdGhpcy5nZXRGYXJtVGVsZW1ldHJ5KClcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgbm9ybWFsaXplTW9kZShtb2RlKSB7XG4gICAgaWYgKCFtb2RlIHx8IHR5cGVvZiBtb2RlICE9PSAnc3RyaW5nJykgcmV0dXJuIG1vZGU7XG4gICAgY29uc3QgbSA9IG1vZGUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobSA9PT0gJ2d1YXJkJykgcmV0dXJuICdHdWFyZCc7XG4gICAgaWYgKG0gPT09ICdpbWFnZScgfHwgbSA9PT0gJ3BhaW50ZXInIHx8IG0gPT09ICdvdmVybGF5JykgcmV0dXJuICdJbWFnZSc7XG4gICAgaWYgKG0gPT09ICdmYXJtJykgcmV0dXJuICdGYXJtJztcbiAgICByZXR1cm4gbW9kZTsgLy8gZGV2b2x2ZXIgdGFsIGN1YWwgc2kgbm8gY29pbmNpZGlcdTAwRjNcbiAgfVxuXG4gIGFzeW5jIGxvYWRQcm9qZWN0KGNvbmZpZykge1xuICAgIGxvZygnXHVEODNEXHVEQ0NCIENhcmdhbmRvIGNvbmZpZ3VyYWNpXHUwMEYzbiBkZWwgcHJveWVjdG8nKTtcbiAgICB0aGlzLnByb2plY3RDb25maWcgPSBjb25maWc7XG4gICAgXG4gICAgaWYgKHRoaXMuY3VycmVudEJvdCAmJiB0aGlzLmN1cnJlbnRCb3QubG9hZENvbmZpZykge1xuICAgICAgdGhpcy5jdXJyZW50Qm90LmxvYWRDb25maWcoY29uZmlnKTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5zZW5kVG9NYXN0ZXIoe1xuICAgICAgdHlwZTogJ3N0YXR1cycsXG4gICAgICBzdGF0dXM6ICdwcm9qZWN0X2xvYWRlZCdcbiAgICB9KTtcbiAgICBcbiAgICAvLyBTaSBlcyBmYXZvcml0byB5IGVzdFx1MDBFMSBlbiBtb2RvIEd1YXJkLCBlbnZpYXIgZGF0b3MgZGUgcHJldmlld1xuICAgIGlmICh0aGlzLmlzRmF2b3JpdGUgJiYgdGhpcy5jdXJyZW50TW9kZSA9PT0gJ0d1YXJkJykge1xuICAgICAgLy8gRXNwZXJhciB1biBwb2NvIHBhcmEgcXVlIGVsIEd1YXJkIHByb2Nlc2UgZWwgYXJjaGl2b1xuICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXZpZXdEYXRhID0gYXdhaXQgbW9kdWxhckdldFByZXZpZXdEYXRhKCk7XG4gICAgICAgIGNvbnN0IGVucmljaGVkID0gdGhpcy5hdWdtZW50UHJldmlldyhwcmV2aWV3RGF0YSk7XG4gICAgICAgIGlmIChlbnJpY2hlZCkge1xuICAgICAgICAgIHRoaXMuc2VuZFRvTWFzdGVyKHsgdHlwZTogJ3ByZXZpZXdfZGF0YScsIGRhdGE6IGVucmljaGVkIH0pO1xuICAgICAgICAgIGxvZygnXHVEODNEXHVEQ0NBIERhdG9zIGRlIHByZXZpZXcgZW52aWFkb3MgYWwgc2Vydmlkb3InKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9XG5cbiAgYXNzaWduQ2h1bmsoY2h1bmspIHtcbiAgICBsb2coYFx1RDgzRFx1RENFNiBDaHVuayBhc2lnbmFkbzogJHtKU09OLnN0cmluZ2lmeShjaHVuayl9YCk7XG4gICAgXG4gICAgaWYgKHRoaXMuY3VycmVudEJvdCAmJiB0aGlzLmN1cnJlbnRCb3QuYXNzaWduQ2h1bmspIHtcbiAgICAgIHRoaXMuY3VycmVudEJvdC5hc3NpZ25DaHVuayhjaHVuayk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQ29udHJvbChhY3Rpb24pIHtcbiAgICBsb2coYFx1RDgzQ1x1REZBRSBBY2NpXHUwMEYzbiBkZSBjb250cm9sOiAke2FjdGlvbn1gKTtcbiAgICBcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICB0aGlzLnN0YXJ0Qm90KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncGF1c2UnOlxuICAgICAgICB0aGlzLnBhdXNlQm90KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RvcCc6XG4gICAgICAgIHRoaXMuc3RvcEJvdCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdGFydEJvdCgpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudEJvdCkge1xuICAgICAgbG9nKCdcdTI3NEMgTm8gaGF5IGJvdCBjYXJnYWRvJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHRyeSB7XG4gIHRyeSB7IGF3YWl0IHByZXBhcmVUb2tlbnNGb3JCb3QodGhpcy5jdXJyZW50TW9kZSB8fCAnQm90Jyk7IH0gY2F0Y2gge31cbiAgICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcbiAgICAgIGF3YWl0IHRoaXMuY3VycmVudEJvdC5zdGFydCgpO1xuICAgICAgXG4gICAgICB0aGlzLnNlbmRUb01hc3Rlcih7XG4gICAgICAgIHR5cGU6ICdzdGF0dXMnLFxuICAgICAgICBzdGF0dXM6ICdydW5uaW5nJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nKGBcdTI3NEMgRXJyb3IgaW5pY2lhbmRvIGJvdDogJHtlcnJvcn1gKTtcbiAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnVwZGF0ZVVJKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gTm9ybWFsaXphIGVudHJhZGFzIGNvbW8gXCJob3N0XCIgbyBcImhvc3Q6cHVlcnRvXCIgYSB3cyhzKTovL2hvc3Qvd3Mvc2xhdmVcbiAgbm9ybWFsaXplV3NVcmwocmF3KSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghcmF3KSByZXR1cm4gJyc7XG4gICAgICBsZXQgdiA9IFN0cmluZyhyYXcpLnRyaW0oKTtcbiAgICAgIC8vIGh0dHAocykgLT4gd3MocylcbiAgICAgIHYgPSB2LnJlcGxhY2UoL15odHRwOlxcL1xcLy9pLCAnd3M6Ly8nKS5yZXBsYWNlKC9eaHR0cHM6XFwvXFwvL2ksICd3c3M6Ly8nKTtcbiAgICAgIC8vIEFcdTAwRjFhZGlyIGVzcXVlbWEgc2kgZmFsdGFcbiAgICAgIGlmICghL15bYS16XSs6XFwvXFwvL2kudGVzdCh2KSkge1xuICAgICAgICBjb25zdCBzY2hlbWUgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmxvY2F0aW9uPy5wcm90b2NvbCA9PT0gJ2h0dHBzOicpID8gJ3dzczovLycgOiAnd3M6Ly8nO1xuICAgICAgICB2ID0gc2NoZW1lICsgdjtcbiAgICAgIH1cbiAgICAgIC8vIEFzZWd1cmFyIHJ1dGEgcG9yIGRlZmVjdG8gc2kgc29sbyBob3N0WzpwdWVydG9dXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB1ID0gbmV3IFVSTCh2KTtcbiAgICAgICAgaWYgKCF1LnBhdGhuYW1lIHx8IHUucGF0aG5hbWUgPT09ICcvJykge1xuICAgICAgICAgIHUucGF0aG5hbWUgPSAnL3dzL3NsYXZlJztcbiAgICAgICAgICB2ID0gdS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHt9XG4gICAgICByZXR1cm4gdjtcbiAgICB9IGNhdGNoIHsgcmV0dXJuIHJhdzsgfVxuICB9XG5cbiAgcGF1c2VCb3QoKSB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRCb3QgfHwgIXRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICBsb2coJ1x1Mjc0QyBObyBoYXkgYm90IGVqZWN1dFx1MDBFMW5kb3NlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5jdXJyZW50Qm90LnBhdXNlKCk7XG4gICAgXG4gICAgdGhpcy5zZW5kVG9NYXN0ZXIoe1xuICAgICAgdHlwZTogJ3N0YXR1cycsXG4gICAgICBzdGF0dXM6ICdwYXVzZWQnXG4gICAgfSk7XG4gICAgXG4gICAgdGhpcy51cGRhdGVVSSgpO1xuICB9XG5cbiAgc3RvcEJvdCgpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudEJvdCkge1xuICAgICAgbG9nKCdcdTI3NEMgTm8gaGF5IGJvdCBjYXJnYWRvJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAvLyBTZVx1MDBGMWFsIGRlIGFib3J0byBwYXJhIHBpbnR1cmEgZW4gY3Vyc29cbiAgdGhpcy5hYm9ydFBhaW50aW5nID0gdHJ1ZTtcbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xuICAgIHRoaXMuY3VycmVudEJvdC5zdG9wKCk7XG4gICAgXG4gICAgdGhpcy5zZW5kVG9NYXN0ZXIoe1xuICAgICAgdHlwZTogJ3N0YXR1cycsXG4gICAgICBzdGF0dXM6ICdzdG9wcGVkJ1xuICAgIH0pO1xuICAgIFxuICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgfVxuXG4gIGFzeW5jIHN0b3BDdXJyZW50Qm90KCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRCb3QgJiYgdGhpcy5pc1J1bm5pbmcpIHtcbiAgLy8gQWJvcnQgYW55IG9uZ29pbmcgcGFpbnRcbiAgdGhpcy5hYm9ydFBhaW50aW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmN1cnJlbnRCb3Quc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXJ0VGVsZW1ldHJ5TG9vcCgpIHtcbiAgICAvLyBFdml0YXIgbVx1MDBGQWx0aXBsZXMgaW50ZXJ2YWxvc1xuICAgIGlmICh0aGlzLnRlbGVtZXRyeUludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMudGVsZW1ldHJ5SW50ZXJ2YWwpO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLnRlbGVtZXRyeUludGVydmFsID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMud3MgJiYgdGhpcy53cy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVRlbGVtZXRyeSgpO1xuICAgICAgICB0aGlzLnNlbmRUZWxlbWV0cnkoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEVudmlhciBzZXNzaW9uX3BpbmcgcGFyYSBtYW50ZW5lciBtXHUwMEU5dHJpY2FzIGRlIHVzdWFyaW9zIGFjdGl2b3NcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBzZXNzaW9uUGluZyh7IFxuICAgICAgICAgICAgYm90VmFyaWFudDogJ2F1dG8tc2xhdmUnLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHsgXG4gICAgICAgICAgICAgIHNsYXZlSWQ6IHRoaXMuc2xhdmVJZCxcbiAgICAgICAgICAgICAgY3VycmVudE1vZGU6IHRoaXMuY3VycmVudE1vZGUsXG4gICAgICAgICAgICAgIGlzUnVubmluZzogdGhpcy5pc1J1bm5pbmcsXG4gICAgICAgICAgICAgIHRlbGVtZXRyeTogdGhpcy50ZWxlbWV0cnlEYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgLy8gU2lsZW5jaW9zbyBwYXJhIGV2aXRhciBzcGFtIGVuIGxvZ3NcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIFNMQVZFX0NPTkZJRy5URUxFTUVUUllfSU5URVJWQUwpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlVGVsZW1ldHJ5KCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRCb3QgJiYgdGhpcy5jdXJyZW50Qm90LmdldFRlbGVtZXRyeSkge1xuICAgICAgY29uc3QgYm90VGVsZW1ldHJ5ID0gdGhpcy5jdXJyZW50Qm90LmdldFRlbGVtZXRyeSgpO1xuICAgICAgdGhpcy50ZWxlbWV0cnlEYXRhID0geyAuLi50aGlzLnRlbGVtZXRyeURhdGEsIC4uLmJvdFRlbGVtZXRyeSB9O1xuICAgIH1cbiAgICBcbiAgICAvLyBQYXJhIGVsIG1vZG8gR3VhcmQsIG9idGVuZXIgZGF0b3MgZXNwZWNcdTAwRURmaWNvcyBkZSB0ZWxlbWV0clx1MDBFRGFcbiAgICBpZiAodGhpcy5jdXJyZW50TW9kZSA9PT0gJ0d1YXJkJykge1xuICAgICAgY29uc3QgZ3VhcmRUZWxlbWV0cnkgPSB0aGlzLmdldEd1YXJkVGVsZW1ldHJ5KCk7XG4gICAgICB0aGlzLnRlbGVtZXRyeURhdGEgPSB7IC4uLnRoaXMudGVsZW1ldHJ5RGF0YSwgLi4uZ3VhcmRUZWxlbWV0cnkgfTtcbiAgICB9XG4gICAgXG4gICAgLy8gT2J0ZW5lciBjYXJnYXMgKHJlc3RhbnRlcyB5IG1cdTAwRTF4aW1hcykgZGVzZGUgbGEgQVBJIGRlIFdQbGFjZVxuICAgIGNvbnN0IGNpID0gYXdhaXQgdGhpcy5nZXRDaGFyZ2VJbmZvKCk7XG4gICAgdGhpcy50ZWxlbWV0cnlEYXRhLnJlbWFpbmluZ19jaGFyZ2VzID0gY2kucmVtYWluaW5nO1xuICAgIHRoaXMudGVsZW1ldHJ5RGF0YS5tYXhfY2hhcmdlcyA9IGNpLm1heDtcbiAgfVxuXG4gIGFzeW5jIGdldENoYXJnZUluZm8oKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlc3Npb25SZXN1bHQgPSBhd2FpdCBnZXRTZXNzaW9uKCk7XG4gICAgICBpZiAoc2Vzc2lvblJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IE1hdGguZmxvb3Ioc2Vzc2lvblJlc3VsdC5kYXRhLmNoYXJnZXMgfHwgMCk7XG4gICAgICAgIGNvbnN0IG1heCA9IE1hdGguZmxvb3Ioc2Vzc2lvblJlc3VsdC5kYXRhLm1heENoYXJnZXMgfHwgMCk7XG4gICAgICAgIHJldHVybiB7IHJlbWFpbmluZywgbWF4IH07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZygnXHUyNzRDIEVycm9yIG9idGVuaWVuZG8gY2FyZ2FzIGRlc2RlIEFQSTonLCBlcnJvcik7XG4gICAgfVxuICAgIHJldHVybiB7IHJlbWFpbmluZzogMCwgbWF4OiAwIH07XG4gIH1cblxuICBnZXRJbWFnZVRlbGVtZXRyeSgpIHtcbiAgICAvLyBJbnRlZ3JhciBjb24gdGVsZW1ldHJcdTAwRURhIHJlYWwgZGVsIGJvdCBkZSBpbWFnZW5cbiAgICByZXR1cm4ge1xuICAgICAgcmVwYWlyZWRfcGl4ZWxzOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApLFxuICAgICAgbWlzc2luZ19waXhlbHM6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwKSxcbiAgICAgIGFic2VudF9waXhlbHM6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1KVxuICAgIH07XG4gIH1cblxuICBnZXRHdWFyZFRlbGVtZXRyeSgpIHtcbiAgICAvLyBPYnRlbmVyIGRhdG9zIHJlYWxlcyBkZSBhblx1MDBFMWxpc2lzIGRlIEd1YXJkIHNpIGVzdFx1MDBFMSBkaXNwb25pYmxlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5ndWFyZFN0YXRlKSB7XG4gICAgICBjb25zdCBndWFyZFN0YXRlID0gd2luZG93Lmd1YXJkU3RhdGU7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGFyIGVzdGFkXHUwMEVEc3RpY2FzIHJlYWxlcyBiYXNhZGFzIGVuIGVsIGVzdGFkbyBhY3R1YWwgZGUgR3VhcmRcbiAgICAgIGNvbnN0IHRvdGFsUGl4ZWxzID0gZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscyA/IGd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMuc2l6ZSA6IDA7XG4gICAgICBjb25zdCBjaGFuZ2VkUGl4ZWxzID0gZ3VhcmRTdGF0ZS5jaGFuZ2VzID8gZ3VhcmRTdGF0ZS5jaGFuZ2VzLnNpemUgOiAwO1xuICAgICAgY29uc3QgcmVwYWlyZWRQaXhlbHMgPSBndWFyZFN0YXRlLnRvdGFsUmVwYWlyZWQgfHwgMDtcbiAgICAgIGNvbnN0IGFjY3VyYWN5ID0gdG90YWxQaXhlbHMgPiAwID8gKCgodG90YWxQaXhlbHMgLSBjaGFuZ2VkUGl4ZWxzKSAvIHRvdGFsUGl4ZWxzKSAqIDEwMCkudG9GaXhlZCgxKSA6ICcwLjAnO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb2RlOiAnZ3VhcmQnLFxuICAgICAgICBwaXhlbHNGaXhlZDogcmVwYWlyZWRQaXhlbHMsXG4gICAgICAgIHBpeGVsc01pc3Npbmc6IGNoYW5nZWRQaXhlbHMsXG4gICAgICAgIHRvdGFsUGl4ZWxzOiB0b3RhbFBpeGVscyxcbiAgICAgICAgYWNjdXJhY3k6IGFjY3VyYWN5ICsgJyUnLFxuICBjb3JyZWN0UGl4ZWxzOiB0b3RhbFBpeGVscyAtIGNoYW5nZWRQaXhlbHMsIC8vIGVzdGltYWRvIHJcdTAwRTFwaWRvXG4gIGluY29ycmVjdFBpeGVsczogY2hhbmdlZFBpeGVscywgLy8gc2luIGRpZmVyZW5jaWFyIG1pc3NpbmcgdnMgaW5jb3JyZWN0IGFxdVx1MDBFRCB0b2Rhdlx1MDBFRGFcbiAgbWlzc2luZ1BpeGVsczogMCwgLy8gc2UgcmVsbGVuYXJcdTAwRTEgdHJhcyBhblx1MDBFMWxpc2lzIGRldGFsbGFkbyBwcmV2aWV3XG4gICAgICAgIHByb3RlY3RlZEFyZWE6IGd1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEgfHwgbnVsbCxcbiAgICAgICAgc3RhdHVzOiBndWFyZFN0YXRlLnJ1bm5pbmcgPyAoZ3VhcmRTdGF0ZS53YXRjaE1vZGUgPyAnd2F0Y2hpbmcnIDogJ3Byb3RlY3RpbmcnKSA6ICdzdG9wcGVkJyxcbiAgICAgICAgY2hhcmdlczogTWF0aC5mbG9vcihndWFyZFN0YXRlLmN1cnJlbnRDaGFyZ2VzIHx8IDApLFxuICAgICAgICBtYXhDaGFyZ2VzOiBndWFyZFN0YXRlLm1heENoYXJnZXMgfHwgMCxcbiAgICAgICAgbGFzdENoZWNrOiBndWFyZFN0YXRlLmxhc3RDaGVjayB8fCAwLFxuICAgICAgICBpc1ZpcnR1YWxBcmVhOiBndWFyZFN0YXRlLmlzVmlydHVhbEFyZWEgfHwgZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8vIEZhbGxiYWNrIGEgZGF0b3Mgc2ltdWxhZG9zIHNpIEd1YXJkIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlXG4gICAgcmV0dXJuIHtcbiAgICAgIG1vZGU6ICdndWFyZCcsXG4gICAgICBwaXhlbHNGaXhlZDogMCxcbiAgICAgIHBpeGVsc01pc3Npbmc6IDAsXG4gICAgICB0b3RhbFBpeGVsczogMCxcbiAgICAgIGFjY3VyYWN5OiAnMC4wJScsXG4gIGNvcnJlY3RQaXhlbHM6IDAsXG4gIGluY29ycmVjdFBpeGVsczogMCxcbiAgbWlzc2luZ1BpeGVsczogMCxcbiAgICAgIHByb3RlY3RlZEFyZWE6IG51bGwsXG4gICAgICBzdGF0dXM6ICd1bmF2YWlsYWJsZScsXG4gICAgICBjaGFyZ2VzOiAwLFxuICAgICAgbWF4Q2hhcmdlczogMCxcbiAgICAgIGxhc3RDaGVjazogMCxcbiAgICAgIGlzVmlydHVhbEFyZWE6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGdldEZhcm1UZWxlbWV0cnkoKSB7XG4gICAgLy8gSW50ZWdyYXIgY29uIHRlbGVtZXRyXHUwMEVEYSByZWFsIGRlbCBib3QgZGUgZmFybWluZ1xuICAgIHJldHVybiB7XG4gICAgICByZXBhaXJlZF9waXhlbHM6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwMCksXG4gICAgICBtaXNzaW5nX3BpeGVsczogMCxcbiAgICAgIGFic2VudF9waXhlbHM6IDBcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgc2VuZFRlbGVtZXRyeSgpIHtcbiAgICBsZXQgdGVsZW1ldHJ5RGF0YSA9IHsgLi4udGhpcy50ZWxlbWV0cnlEYXRhIH07XG4gICAgXG4gICAgLy8gU2kgZXN0ZSBzbGF2ZSBlcyBmYXZvcml0byB5IGVzdFx1MDBFMSBlbiBtb2RvIEd1YXJkLCBhZ3JlZ2FyIGRhdG9zIGRlIHByZXZpZXdcbiAgICBpZiAodGhpcy5pc0Zhdm9yaXRlICYmIHRoaXMuY3VycmVudE1vZGUgPT09ICdHdWFyZCcpIHtcbiAgICAgIHRlbGVtZXRyeURhdGEucHJldmlld0RhdGEgPSBhd2FpdCBtb2R1bGFyR2V0UHJldmlld0RhdGEoKTtcbiAgICAgIC8vIEFcdTAwRjFhZGlyIGF2YWlsYWJsZUNvbG9ycyBhIGxhIHRlbGVtZXRyXHUwMEVEYSBwYXJhIHBlcnNpc3RlbmNpYSBpbmljaWFsXG4gICAgICB0cnkge1xuICAgICAgICB0ZWxlbWV0cnlEYXRhLnByZXZpZXdEYXRhID0gdGhpcy5hdWdtZW50UHJldmlldyh0ZWxlbWV0cnlEYXRhLnByZXZpZXdEYXRhKTtcbiAgICAgIH0gY2F0Y2gge31cbiAgICAgIGlmICh0ZWxlbWV0cnlEYXRhLnByZXZpZXdEYXRhICYmIHRlbGVtZXRyeURhdGEucHJldmlld0RhdGEuYW5hbHlzaXMpIHtcbiAgICAgICAgY29uc3QgYSA9IHRlbGVtZXRyeURhdGEucHJldmlld0RhdGEuYW5hbHlzaXM7XG4gICAgICAgIC8vIFJlbGxlbmFyIG1cdTAwRTl0cmljYXMgZGV0YWxsYWRhcyBwYXJhIHBhbmVsIHJlYWx0aW1lXG4gICAgICAgIHRlbGVtZXRyeURhdGEuY29ycmVjdFBpeGVscyA9IGEuY29ycmVjdFBpeGVscyA/PyBhLmNvcnJlY3QgPz8gdGVsZW1ldHJ5RGF0YS5jb3JyZWN0UGl4ZWxzO1xuICAgICAgICB0ZWxlbWV0cnlEYXRhLmluY29ycmVjdFBpeGVscyA9IGEuaW5jb3JyZWN0UGl4ZWxzID8/IGEuaW5jb3JyZWN0ID8/IHRlbGVtZXRyeURhdGEuaW5jb3JyZWN0UGl4ZWxzO1xuICAgICAgICB0ZWxlbWV0cnlEYXRhLm1pc3NpbmdQaXhlbHMgPSBhLm1pc3NpbmdQaXhlbHMgPz8gYS5taXNzaW5nID8/IHRlbGVtZXRyeURhdGEubWlzc2luZ1BpeGVscztcbiAgICAgICAgdGVsZW1ldHJ5RGF0YS50b3RhbFBpeGVscyA9IHRlbGVtZXRyeURhdGEucHJldmlld0RhdGEudG90YWxQaXhlbHMgfHwgdGVsZW1ldHJ5RGF0YS50b3RhbFBpeGVscztcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdGhpcy5zZW5kVG9NYXN0ZXIoe1xuICAgICAgdHlwZTogJ3RlbGVtZXRyeScsXG4gICAgICBkYXRhOiB0ZWxlbWV0cnlEYXRhXG4gICAgfSk7XG4gIH1cblxuICBzZW5kVG9NYXN0ZXIobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLndzICYmIHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsganNvbiB9ID0gbWF5YmVDb21wcmVzc01lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIHRoaXMud3Muc2VuZChqc29uKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nKGBcdTI3NEMgRXJyb3IgZW52aWFuZG8gbWVuc2FqZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIC8vIEZhbGxiYWNrIHBsYW5vXG4gICAgICAgIHRyeSB7IFxuICAgICAgICAgIHRoaXMud3Muc2VuZChKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XG4gICAgICAgIH0gY2F0Y2ggKGZhbGxiYWNrRXJyb3IpIHtcbiAgICAgICAgICBsb2coYFx1Mjc0QyBFcnJvciBlbiBmYWxsYmFjazogJHtmYWxsYmFja0Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nKGBcdTI3NEMgV2ViU29ja2V0IG5vIGRpc3BvbmlibGUgcGFyYSBlbnZcdTAwRURvIChyZWFkeVN0YXRlOiAke3RoaXMud3M/LnJlYWR5U3RhdGV9KWApO1xuICAgIH1cbiAgfVxuXG4gIHNldFVJKHVpKSB7XG4gICAgdGhpcy51aSA9IHVpO1xuICB9XG4gIFxuICB1cGRhdGVVSSgpIHtcbiAgICBpZiAodGhpcy51aSAmJiB0aGlzLnVpLnVwZGF0ZVN0YXR1cykge1xuICAgICAgdGhpcy51aS51cGRhdGVTdGF0dXMoe1xuICAgICAgICBjb25uZWN0aW9uU3RhdHVzOiB0aGlzLmNvbm5lY3Rpb25TdGF0dXMsXG4gICAgICAgIHNsYXZlSWQ6IHRoaXMuc2xhdmVJZCxcbiAgICAgICAgY3VycmVudE1vZGU6IHRoaXMuY3VycmVudE1vZGUsXG4gICAgICAgIGlzUnVubmluZzogdGhpcy5pc1J1bm5pbmcsXG4gICAgICAgIHRlbGVtZXRyeURhdGE6IHRoaXMudGVsZW1ldHJ5RGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdCgpIHtcbiAgdGhpcy5tYW51YWxEaXNjb25uZWN0ID0gdHJ1ZTtcbiAgXG4gIC8vIEVudmlhciBtXHUwMEU5dHJpY2FzIGRlIGZpbiBkZSBzZXNpXHUwMEYzblxuICB0cnkge1xuICAgIHNlc3Npb25FbmQoe1xuICAgICAgYm90VmFyaWFudDogJ2F1dG8tc2xhdmUnLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgc2xhdmVJZDogdGhpcy5zbGF2ZUlkLFxuICAgICAgICBtb2RlOiB0aGlzLmN1cnJlbnRNb2RlLFxuICAgICAgICBkaXNjb25uZWN0UmVhc29uOiAnbWFudWFsJ1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIFNpbGVuY2lvc28gcGFyYSBubyBpbnRlcnJ1bXBpciBlbCBmbHVqb1xuICB9XG4gIFxuICBpZiAodGhpcy53cykge1xuICAgICAgdGhpcy53cy5jbG9zZSgpO1xuICAgIH1cbiAgICBcbiAgICAvLyBMaW1waWFyIGludGVydmFsbyBkZSB0ZWxlbWV0clx1MDBFRGFcbiAgICBpZiAodGhpcy50ZWxlbWV0cnlJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRlbGVtZXRyeUludGVydmFsKTtcbiAgICAgIHRoaXMudGVsZW1ldHJ5SW50ZXJ2YWwgPSBudWxsO1xuICAgIH1cbiAgICBcbiAgICAvLyBMaW1waWFyIGludGVydmFsbyBkZSBwaW5nIGRlIG1cdTAwRTl0cmljYXNcbiAgICBpZiAod2luZG93Ll9fd3BsYWNlTWV0cmljcz8uc2xhdmVQaW5nSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwod2luZG93Ll9fd3BsYWNlTWV0cmljcy5zbGF2ZVBpbmdJbnRlcnZhbCk7XG4gICAgICB3aW5kb3cuX193cGxhY2VNZXRyaWNzLnNsYXZlUGluZ0ludGVydmFsID0gbnVsbDtcbiAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3Muc2xhdmVTZXNzaW9uQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuY29ubmVjdGlvblN0YXR1cyA9ICdkaXNjb25uZWN0ZWQnO1xuICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgLy8gUmVzZXRlYXIgZmxhZyB0cmFzIGNvcnRvIHRpZW1wbyBwYXJhIHBlcm1pdGlyIGZ1dHVyYXMgcmVjb25leGlvbmVzIGF1dG9tXHUwMEUxdGljYXNcbiAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMubWFudWFsRGlzY29ubmVjdCA9IGZhbHNlOyB9LCA1MDApO1xuICB9XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwcmluY2lwYWwgcGFyYSBlamVjdXRhciBlbCBtb2RvIHNsYXZlXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuU2xhdmUoKSB7XG4gIGxvZygnXHVEODNEXHVERTgwIEluaWNpYW5kbyBXUGxhY2UgU2xhdmUgKHZlcnNpXHUwMEYzbiBtb2R1bGFyKScpO1xuICBcbiAgLy8gSW5pY2lhbGl6YXIgc2lzdGVtYSBkZSBpZGlvbWFzXG4gIGluaXRpYWxpemVMYW5ndWFnZSgpO1xuICBcbiAgLy8gSW5pY2lhbGl6YXIgbyBwcmVzZXJ2YXIgZWwgZXN0YWRvIGdsb2JhbFxuICB3aW5kb3cuX193cGxhY2VCb3QgPSB7IC4uLndpbmRvdy5fX3dwbGFjZUJvdCwgc2xhdmVSdW5uaW5nOiB0cnVlIH07XG4gIFxuICB0cnkge1xuICAgIC8vIENyZWFyIGluc3RhbmNpYSBkZWwgc2xhdmVcbiAgICBjb25zdCBzbGF2ZSA9IG5ldyBXUGxhY2VTbGF2ZSgpO1xuICAgIFxuICAgIC8vIENyZWFyIGludGVyZmF6IGRlIHVzdWFyaW9cbiAgICBjb25zdCB1aSA9IGNyZWF0ZVNsYXZlVUkoe1xuICAgICAgb25Db25uZWN0OiBhc3luYyAobWFzdGVyVXJsKSA9PiB7XG4gICAgICAgIGF3YWl0IHNsYXZlLmluaXQobWFzdGVyVXJsKTtcbiAgICAgIH0sXG4gICAgICBvbkRpc2Nvbm5lY3Q6ICgpID0+IHtcbiAgICAgICAgc2xhdmUuZGlzY29ubmVjdCgpO1xuICAgICAgfSxcbiAgICAgIG9uQ2xvc2U6ICgpID0+IHtcbiAgICAgICAgbG9nKCdcdUQ4M0RcdURDNEIgQ2VycmFuZG8gc2xhdmUnKTtcbiAgICAgICAgc2xhdmUuZGlzY29ubmVjdCgpO1xuICAgICAgICB3aW5kb3cuX193cGxhY2VCb3Quc2xhdmVSdW5uaW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgLy8gQ29uZWN0YXIgVUkgY29uIHNsYXZlXG4gICAgc2xhdmUuc2V0VUkodWkpO1xuICAgIFxuICAgIC8vIEhhY2VyIGFjY2VzaWJsZSBnbG9iYWxtZW50ZSBwYXJhIGRlYnVnZ2luZ1xuICAgIHdpbmRvdy5fX3dwbGFjZVNsYXZlID0gc2xhdmU7XG4gICAgXG4gICAgbG9nKCdcdTI3MDUgU2xhdmUgaW5pY2lhbGl6YWRvIGNvcnJlY3RhbWVudGUnKTtcbiAgICBcbiAgICAvLyBDbGVhbnVwIGFsIGNlcnJhciBsYSBwXHUwMEUxZ2luYSAoYWxpbmVhZG8gY29uIG90cm9zIGJvdHMpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsICgpID0+IHtcbiAgICAgIHRyeSB7IHNsYXZlLmRpc2Nvbm5lY3QoKTsgfSBjYXRjaCB7fVxuICAgICAgaWYgKHdpbmRvdy5fX3dwbGFjZUJvdCkge1xuICAgICAgICB3aW5kb3cuX193cGxhY2VCb3Quc2xhdmVSdW5uaW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBMaW1waWFyIG1cdTAwRTl0cmljYXMgc2kgcXVlZGFyb24gYWN0aXZhc1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHdpbmRvdy5fX3dwbGFjZU1ldHJpY3M/LnNsYXZlUGluZ0ludGVydmFsKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh3aW5kb3cuX193cGxhY2VNZXRyaWNzLnNsYXZlUGluZ0ludGVydmFsKTtcbiAgICAgICAgICB3aW5kb3cuX193cGxhY2VNZXRyaWNzLnNsYXZlUGluZ0ludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93Ll9fd3BsYWNlTWV0cmljcz8uc2xhdmVTZXNzaW9uQWN0aXZlKSB7XG4gICAgICAgICAgc2Vzc2lvbkVuZCh7IGJvdFZhcmlhbnQ6ICdhdXRvLXNsYXZlJyB9KTtcbiAgICAgICAgICB3aW5kb3cuX193cGxhY2VNZXRyaWNzLnNsYXZlU2Vzc2lvbkFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHt9XG4gICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIFxuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZygnXHUyNzRDIEVycm9yIGluaWNpYWxpemFuZG8gU2xhdmU6JywgZXJyb3IpO1xuICAgIHdpbmRvdy5fX3dwbGFjZUJvdC5zbGF2ZVJ1bm5pbmcgPSBmYWxzZTtcbiAgICB0cnkgeyBcbiAgICAgIHRyYWNrRXZlbnQoJ2Vycm9yJywgeyBcbiAgICAgICAgYm90VmFyaWFudDogJ3NsYXZlJywgXG4gICAgICAgIG1ldGFkYXRhOiB7IG1lc3NhZ2U6IFN0cmluZyhlcnJvcj8ubWVzc2FnZSB8fCBlcnJvcikgfSBcbiAgICAgIH0pOyBcbiAgICB9IGNhdGNoIHt9XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn0iLCAiXG4vKiEgcGFrbyAyLjEuMCBodHRwczovL2dpdGh1Yi5jb20vbm9kZWNhL3Bha28gQGxpY2Vuc2UgKE1JVCBBTkQgWmxpYikgKi9cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtdW5hcnktb3BzICovXG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8vY29uc3QgWl9GSUxURVJFRCAgICAgICAgICA9IDE7XG4vL2NvbnN0IFpfSFVGRk1BTl9PTkxZICAgICAgPSAyO1xuLy9jb25zdCBaX1JMRSAgICAgICAgICAgICAgID0gMztcbmNvbnN0IFpfRklYRUQkMSAgICAgICAgICAgICAgID0gNDtcbi8vY29uc3QgWl9ERUZBVUxUX1NUUkFURUdZICA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbmNvbnN0IFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG5jb25zdCBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy9jb25zdCBaX0FTQ0lJICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcbmNvbnN0IFpfVU5LTk9XTiQxICAgICAgICAgICAgID0gMjtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5mdW5jdGlvbiB6ZXJvJDEoYnVmKSB7IGxldCBsZW4gPSBidWYubGVuZ3RoOyB3aGlsZSAoLS1sZW4gPj0gMCkgeyBidWZbbGVuXSA9IDA7IH0gfVxuXG4vLyBGcm9tIHp1dGlsLmhcblxuY29uc3QgU1RPUkVEX0JMT0NLID0gMDtcbmNvbnN0IFNUQVRJQ19UUkVFUyA9IDE7XG5jb25zdCBEWU5fVFJFRVMgICAgPSAyO1xuLyogVGhlIHRocmVlIGtpbmRzIG9mIGJsb2NrIHR5cGUgKi9cblxuY29uc3QgTUlOX01BVENIJDEgICAgPSAzO1xuY29uc3QgTUFYX01BVENIJDEgICAgPSAyNTg7XG4vKiBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBtYXRjaCBsZW5ndGhzICovXG5cbi8vIEZyb20gZGVmbGF0ZS5oXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEludGVybmFsIGNvbXByZXNzaW9uIHN0YXRlLlxuICovXG5cbmNvbnN0IExFTkdUSF9DT0RFUyQxICA9IDI5O1xuLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXG5cbmNvbnN0IExJVEVSQUxTJDEgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xuXG5jb25zdCBMX0NPREVTJDEgICAgICAgPSBMSVRFUkFMUyQxICsgMSArIExFTkdUSF9DT0RFUyQxO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG5cbmNvbnN0IERfQ09ERVMkMSAgICAgICA9IDMwO1xuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXG5cbmNvbnN0IEJMX0NPREVTJDEgICAgICA9IDE5O1xuLyogbnVtYmVyIG9mIGNvZGVzIHVzZWQgdG8gdHJhbnNmZXIgdGhlIGJpdCBsZW5ndGhzICovXG5cbmNvbnN0IEhFQVBfU0laRSQxICAgICA9IDIgKiBMX0NPREVTJDEgKyAxO1xuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cblxuY29uc3QgTUFYX0JJVFMkMSAgICAgID0gMTU7XG4vKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cblxuY29uc3QgQnVmX3NpemUgICAgICA9IDE2O1xuLyogc2l6ZSBvZiBiaXQgYnVmZmVyIGluIGJpX2J1ZiAqL1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3QgTUFYX0JMX0JJVFMgPSA3O1xuLyogQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0cyAqL1xuXG5jb25zdCBFTkRfQkxPQ0sgICA9IDI1Njtcbi8qIGVuZCBvZiBibG9jayBsaXRlcmFsIGNvZGUgKi9cblxuY29uc3QgUkVQXzNfNiAgICAgPSAxNjtcbi8qIHJlcGVhdCBwcmV2aW91cyBiaXQgbGVuZ3RoIDMtNiB0aW1lcyAoMiBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxuY29uc3QgUkVQWl8zXzEwICAgPSAxNztcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG5jb25zdCBSRVBaXzExXzEzOCA9IDE4O1xuLyogcmVwZWF0IGEgemVybyBsZW5ndGggMTEtMTM4IHRpbWVzICAoNyBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxuLyogZXNsaW50LWRpc2FibGUgY29tbWEtc3BhY2luZyxhcnJheS1icmFja2V0LXNwYWNpbmcgKi9cbmNvbnN0IGV4dHJhX2xiaXRzID0gICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGxlbmd0aCBjb2RlICovXG4gIG5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdKTtcblxuY29uc3QgZXh0cmFfZGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggZGlzdGFuY2UgY29kZSAqL1xuICBuZXcgVWludDhBcnJheShbMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxM10pO1xuXG5jb25zdCBleHRyYV9ibGJpdHMgPSAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBiaXQgbGVuZ3RoIGNvZGUgKi9cbiAgbmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddKTtcblxuY29uc3QgYmxfb3JkZXIgPVxuICBuZXcgVWludDhBcnJheShbMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV0pO1xuLyogZXNsaW50LWVuYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xuXG4vKiBUaGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcyBhcmUgc2VudCBpbiBvcmRlciBvZiBkZWNyZWFzaW5nXG4gKiBwcm9iYWJpbGl0eSwgdG8gYXZvaWQgdHJhbnNtaXR0aW5nIHRoZSBsZW5ndGhzIGZvciB1bnVzZWQgYml0IGxlbmd0aCBjb2Rlcy5cbiAqL1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIExvY2FsIGRhdGEuIFRoZXNlIGFyZSBpbml0aWFsaXplZCBvbmx5IG9uY2UuXG4gKi9cblxuLy8gV2UgcHJlLWZpbGwgYXJyYXlzIHdpdGggMCB0byBhdm9pZCB1bmluaXRpYWxpemVkIGdhcHNcblxuY29uc3QgRElTVF9DT0RFX0xFTiA9IDUxMjsgLyogc2VlIGRlZmluaXRpb24gb2YgYXJyYXkgZGlzdF9jb2RlIGJlbG93ICovXG5cbi8vICEhISEgVXNlIGZsYXQgYXJyYXkgaW5zdGVhZCBvZiBzdHJ1Y3R1cmUsIEZyZXEgPSBpKjIsIExlbiA9IGkqMisxXG5jb25zdCBzdGF0aWNfbHRyZWUgID0gbmV3IEFycmF5KChMX0NPREVTJDEgKyAyKSAqIDIpO1xuemVybyQxKHN0YXRpY19sdHJlZSk7XG4vKiBUaGUgc3RhdGljIGxpdGVyYWwgdHJlZS4gU2luY2UgdGhlIGJpdCBsZW5ndGhzIGFyZSBpbXBvc2VkLCB0aGVyZSBpcyBub1xuICogbmVlZCBmb3IgdGhlIExfQ09ERVMgZXh0cmEgY29kZXMgdXNlZCBkdXJpbmcgaGVhcCBjb25zdHJ1Y3Rpb24uIEhvd2V2ZXJcbiAqIFRoZSBjb2RlcyAyODYgYW5kIDI4NyBhcmUgbmVlZGVkIHRvIGJ1aWxkIGEgY2Fub25pY2FsIHRyZWUgKHNlZSBfdHJfaW5pdFxuICogYmVsb3cpLlxuICovXG5cbmNvbnN0IHN0YXRpY19kdHJlZSAgPSBuZXcgQXJyYXkoRF9DT0RFUyQxICogMik7XG56ZXJvJDEoc3RhdGljX2R0cmVlKTtcbi8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZS4gKEFjdHVhbGx5IGEgdHJpdmlhbCB0cmVlIHNpbmNlIGFsbCBjb2RlcyB1c2VcbiAqIDUgYml0cy4pXG4gKi9cblxuY29uc3QgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8kMShfZGlzdF9jb2RlKTtcbi8qIERpc3RhbmNlIGNvZGVzLiBUaGUgZmlyc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSBkaXN0YW5jZXNcbiAqIDMgLi4gMjU4LCB0aGUgbGFzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIHRvcCA4IGJpdHMgb2ZcbiAqIHRoZSAxNSBiaXQgZGlzdGFuY2VzLlxuICovXG5cbmNvbnN0IF9sZW5ndGhfY29kZSAgPSBuZXcgQXJyYXkoTUFYX01BVENIJDEgLSBNSU5fTUFUQ0gkMSArIDEpO1xuemVybyQxKF9sZW5ndGhfY29kZSk7XG4vKiBsZW5ndGggY29kZSBmb3IgZWFjaCBub3JtYWxpemVkIG1hdGNoIGxlbmd0aCAoMCA9PSBNSU5fTUFUQ0gpICovXG5cbmNvbnN0IGJhc2VfbGVuZ3RoICAgPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTJDEpO1xuemVybyQxKGJhc2VfbGVuZ3RoKTtcbi8qIEZpcnN0IG5vcm1hbGl6ZWQgbGVuZ3RoIGZvciBlYWNoIGNvZGUgKDAgPSBNSU5fTUFUQ0gpICovXG5cbmNvbnN0IGJhc2VfZGlzdCAgICAgPSBuZXcgQXJyYXkoRF9DT0RFUyQxKTtcbnplcm8kMShiYXNlX2Rpc3QpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBkaXN0YW5jZSBmb3IgZWFjaCBjb2RlICgwID0gZGlzdGFuY2Ugb2YgMSkgKi9cblxuXG5mdW5jdGlvbiBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfdHJlZSwgZXh0cmFfYml0cywgZXh0cmFfYmFzZSwgZWxlbXMsIG1heF9sZW5ndGgpIHtcblxuICB0aGlzLnN0YXRpY190cmVlICA9IHN0YXRpY190cmVlOyAgLyogc3RhdGljIHRyZWUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2JpdHMgICA9IGV4dHJhX2JpdHM7ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBjb2RlIG9yIE5VTEwgKi9cbiAgdGhpcy5leHRyYV9iYXNlICAgPSBleHRyYV9iYXNlOyAgIC8qIGJhc2UgaW5kZXggZm9yIGV4dHJhX2JpdHMgKi9cbiAgdGhpcy5lbGVtcyAgICAgICAgPSBlbGVtczsgICAgICAgIC8qIG1heCBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIHRyZWUgKi9cbiAgdGhpcy5tYXhfbGVuZ3RoICAgPSBtYXhfbGVuZ3RoOyAgIC8qIG1heCBiaXQgbGVuZ3RoIGZvciB0aGUgY29kZXMgKi9cblxuICAvLyBzaG93IGlmIGBzdGF0aWNfdHJlZWAgaGFzIGRhdGEgb3IgZHVtbXkgLSBuZWVkZWQgZm9yIG1vbm9tb3JwaGljIG9iamVjdHNcbiAgdGhpcy5oYXNfc3RyZWUgICAgPSBzdGF0aWNfdHJlZSAmJiBzdGF0aWNfdHJlZS5sZW5ndGg7XG59XG5cblxubGV0IHN0YXRpY19sX2Rlc2M7XG5sZXQgc3RhdGljX2RfZGVzYztcbmxldCBzdGF0aWNfYmxfZGVzYztcblxuXG5mdW5jdGlvbiBUcmVlRGVzYyhkeW5fdHJlZSwgc3RhdF9kZXNjKSB7XG4gIHRoaXMuZHluX3RyZWUgPSBkeW5fdHJlZTsgICAgIC8qIHRoZSBkeW5hbWljIHRyZWUgKi9cbiAgdGhpcy5tYXhfY29kZSA9IDA7ICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4gIHRoaXMuc3RhdF9kZXNjID0gc3RhdF9kZXNjOyAgIC8qIHRoZSBjb3JyZXNwb25kaW5nIHN0YXRpYyB0cmVlICovXG59XG5cblxuXG5jb25zdCBkX2NvZGUgPSAoZGlzdCkgPT4ge1xuXG4gIHJldHVybiBkaXN0IDwgMjU2ID8gX2Rpc3RfY29kZVtkaXN0XSA6IF9kaXN0X2NvZGVbMjU2ICsgKGRpc3QgPj4+IDcpXTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBPdXRwdXQgYSBzaG9ydCBMU0IgZmlyc3Qgb24gdGhlIHN0cmVhbS5cbiAqIElOIGFzc2VydGlvbjogdGhlcmUgaXMgZW5vdWdoIHJvb20gaW4gcGVuZGluZ0J1Zi5cbiAqL1xuY29uc3QgcHV0X3Nob3J0ID0gKHMsIHcpID0+IHtcbi8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh3KSAmIDB4ZmYpKTtcbi8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh1c2gpKHcpID4+IDgpKTtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAodykgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3ID4+PiA4KSAmIDB4ZmY7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIHZhbHVlIG9uIGEgZ2l2ZW4gbnVtYmVyIG9mIGJpdHMuXG4gKiBJTiBhc3NlcnRpb246IGxlbmd0aCA8PSAxNiBhbmQgdmFsdWUgZml0cyBpbiBsZW5ndGggYml0cy5cbiAqL1xuY29uc3Qgc2VuZF9iaXRzID0gKHMsIHZhbHVlLCBsZW5ndGgpID0+IHtcblxuICBpZiAocy5iaV92YWxpZCA+IChCdWZfc2l6ZSAtIGxlbmd0aCkpIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgICBzLmJpX2J1ZiA9IHZhbHVlID4+IChCdWZfc2l6ZSAtIHMuYmlfdmFsaWQpO1xuICAgIHMuYmlfdmFsaWQgKz0gbGVuZ3RoIC0gQnVmX3NpemU7XG4gIH0gZWxzZSB7XG4gICAgcy5iaV9idWYgfD0gKHZhbHVlIDw8IHMuYmlfdmFsaWQpICYgMHhmZmZmO1xuICAgIHMuYmlfdmFsaWQgKz0gbGVuZ3RoO1xuICB9XG59O1xuXG5cbmNvbnN0IHNlbmRfY29kZSA9IChzLCBjLCB0cmVlKSA9PiB7XG5cbiAgc2VuZF9iaXRzKHMsIHRyZWVbYyAqIDJdLyouQ29kZSovLCB0cmVlW2MgKiAyICsgMV0vKi5MZW4qLyk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmV2ZXJzZSB0aGUgZmlyc3QgbGVuIGJpdHMgb2YgYSBjb2RlLCB1c2luZyBzdHJhaWdodGZvcndhcmQgY29kZSAoYSBmYXN0ZXJcbiAqIG1ldGhvZCB3b3VsZCB1c2UgYSB0YWJsZSlcbiAqIElOIGFzc2VydGlvbjogMSA8PSBsZW4gPD0gMTVcbiAqL1xuY29uc3QgYmlfcmV2ZXJzZSA9IChjb2RlLCBsZW4pID0+IHtcblxuICBsZXQgcmVzID0gMDtcbiAgZG8ge1xuICAgIHJlcyB8PSBjb2RlICYgMTtcbiAgICBjb2RlID4+Pj0gMTtcbiAgICByZXMgPDw9IDE7XG4gIH0gd2hpbGUgKC0tbGVuID4gMCk7XG4gIHJldHVybiByZXMgPj4+IDE7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggdGhlIGJpdCBidWZmZXIsIGtlZXBpbmcgYXQgbW9zdCA3IGJpdHMgaW4gaXQuXG4gKi9cbmNvbnN0IGJpX2ZsdXNoID0gKHMpID0+IHtcblxuICBpZiAocy5iaV92YWxpZCA9PT0gMTYpIHtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gMDtcbiAgICBzLmJpX3ZhbGlkID0gMDtcblxuICB9IGVsc2UgaWYgKHMuYmlfdmFsaWQgPj0gOCkge1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWYgJiAweGZmO1xuICAgIHMuYmlfYnVmID4+PSA4O1xuICAgIHMuYmlfdmFsaWQgLT0gODtcbiAgfVxufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgZm9yIGEgdHJlZSBhbmQgdXBkYXRlIHRoZSB0b3RhbCBiaXQgbGVuZ3RoXG4gKiBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQsIGhlYXBbaGVhcF9tYXhdIGFuZFxuICogICAgYWJvdmUgYXJlIHRoZSB0cmVlIG5vZGVzIHNvcnRlZCBieSBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cbiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGQgbGVuIGlzIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoLCB0aGVcbiAqICAgICBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgZnJlcXVlbmNpZXMgZm9yIGVhY2ggYml0IGxlbmd0aC5cbiAqICAgICBUaGUgbGVuZ3RoIG9wdF9sZW4gaXMgdXBkYXRlZDsgc3RhdGljX2xlbiBpcyBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXNcbiAqICAgICBub3QgbnVsbC5cbiAqL1xuY29uc3QgZ2VuX2JpdGxlbiA9IChzLCBkZXNjKSA9PiB7XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAgICAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG5cbiAgY29uc3QgdHJlZSAgICAgICAgICAgID0gZGVzYy5keW5fdHJlZTtcbiAgY29uc3QgbWF4X2NvZGUgICAgICAgID0gZGVzYy5tYXhfY29kZTtcbiAgY29uc3Qgc3RyZWUgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIGNvbnN0IGhhc19zdHJlZSAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmhhc19zdHJlZTtcbiAgY29uc3QgZXh0cmEgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYml0cztcbiAgY29uc3QgYmFzZSAgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcbiAgY29uc3QgbWF4X2xlbmd0aCAgICAgID0gZGVzYy5zdGF0X2Rlc2MubWF4X2xlbmd0aDtcbiAgbGV0IGg7ICAgICAgICAgICAgICAvKiBoZWFwIGluZGV4ICovXG4gIGxldCBuLCBtOyAgICAgICAgICAgLyogaXRlcmF0ZSBvdmVyIHRoZSB0cmVlIGVsZW1lbnRzICovXG4gIGxldCBiaXRzOyAgICAgICAgICAgLyogYml0IGxlbmd0aCAqL1xuICBsZXQgeGJpdHM7ICAgICAgICAgIC8qIGV4dHJhIGJpdHMgKi9cbiAgbGV0IGY7ICAgICAgICAgICAgICAvKiBmcmVxdWVuY3kgKi9cbiAgbGV0IG92ZXJmbG93ID0gMDsgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgd2l0aCBiaXQgbGVuZ3RoIHRvbyBsYXJnZSAqL1xuXG4gIGZvciAoYml0cyA9IDA7IGJpdHMgPD0gTUFYX0JJVFMkMTsgYml0cysrKSB7XG4gICAgcy5ibF9jb3VudFtiaXRzXSA9IDA7XG4gIH1cblxuICAvKiBJbiBhIGZpcnN0IHBhc3MsIGNvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgKHdoaWNoIG1heVxuICAgKiBvdmVyZmxvdyBpbiB0aGUgY2FzZSBvZiB0aGUgYml0IGxlbmd0aCB0cmVlKS5cbiAgICovXG4gIHRyZWVbcy5oZWFwW3MuaGVhcF9tYXhdICogMiArIDFdLyouTGVuKi8gPSAwOyAvKiByb290IG9mIHRoZSBoZWFwICovXG5cbiAgZm9yIChoID0gcy5oZWFwX21heCArIDE7IGggPCBIRUFQX1NJWkUkMTsgaCsrKSB7XG4gICAgbiA9IHMuaGVhcFtoXTtcbiAgICBiaXRzID0gdHJlZVt0cmVlW24gKiAyICsgMV0vKi5EYWQqLyAqIDIgKyAxXS8qLkxlbiovICsgMTtcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcbiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoO1xuICAgICAgb3ZlcmZsb3crKztcbiAgICB9XG4gICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovXG5cbiAgICBpZiAobiA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9IC8qIG5vdCBhIGxlYWYgbm9kZSAqL1xuXG4gICAgcy5ibF9jb3VudFtiaXRzXSsrO1xuICAgIHhiaXRzID0gMDtcbiAgICBpZiAobiA+PSBiYXNlKSB7XG4gICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTtcbiAgICB9XG4gICAgZiA9IHRyZWVbbiAqIDJdLyouRnJlcSovO1xuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXS8qLkxlbiovICsgeGJpdHMpO1xuICAgIH1cbiAgfVxuICBpZiAob3ZlcmZsb3cgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgLy8gVHJhY2V2KChzdGRlcnIsXCJcXG5iaXQgbGVuZ3RoIG92ZXJmbG93XFxuXCIpKTtcbiAgLyogVGhpcyBoYXBwZW5zIGZvciBleGFtcGxlIG9uIG9iajIgYW5kIHBpYyBvZiB0aGUgQ2FsZ2FyeSBjb3JwdXMgKi9cblxuICAvKiBGaW5kIHRoZSBmaXJzdCBiaXQgbGVuZ3RoIHdoaWNoIGNvdWxkIGluY3JlYXNlOiAqL1xuICBkbyB7XG4gICAgYml0cyA9IG1heF9sZW5ndGggLSAxO1xuICAgIHdoaWxlIChzLmJsX2NvdW50W2JpdHNdID09PSAwKSB7IGJpdHMtLTsgfVxuICAgIHMuYmxfY291bnRbYml0c10tLTsgICAgICAvKiBtb3ZlIG9uZSBsZWFmIGRvd24gdGhlIHRyZWUgKi9cbiAgICBzLmJsX2NvdW50W2JpdHMgKyAxXSArPSAyOyAvKiBtb3ZlIG9uZSBvdmVyZmxvdyBpdGVtIGFzIGl0cyBicm90aGVyICovXG4gICAgcy5ibF9jb3VudFttYXhfbGVuZ3RoXS0tO1xuICAgIC8qIFRoZSBicm90aGVyIG9mIHRoZSBvdmVyZmxvdyBpdGVtIGFsc28gbW92ZXMgb25lIHN0ZXAgdXAsXG4gICAgICogYnV0IHRoaXMgZG9lcyBub3QgYWZmZWN0IGJsX2NvdW50W21heF9sZW5ndGhdXG4gICAgICovXG4gICAgb3ZlcmZsb3cgLT0gMjtcbiAgfSB3aGlsZSAob3ZlcmZsb3cgPiAwKTtcblxuICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gICAqIGggaXMgc3RpbGwgZXF1YWwgdG8gSEVBUF9TSVpFLiAoSXQgaXMgc2ltcGxlciB0byByZWNvbnN0cnVjdCBhbGxcbiAgICogbGVuZ3RocyBpbnN0ZWFkIG9mIGZpeGluZyBvbmx5IHRoZSB3cm9uZyBvbmVzLiBUaGlzIGlkZWEgaXMgdGFrZW5cbiAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pXG4gICAqL1xuICBmb3IgKGJpdHMgPSBtYXhfbGVuZ3RoOyBiaXRzICE9PSAwOyBiaXRzLS0pIHtcbiAgICBuID0gcy5ibF9jb3VudFtiaXRzXTtcbiAgICB3aGlsZSAobiAhPT0gMCkge1xuICAgICAgbSA9IHMuaGVhcFstLWhdO1xuICAgICAgaWYgKG0gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfVxuICAgICAgaWYgKHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovICE9PSBiaXRzKSB7XG4gICAgICAgIC8vIFRyYWNldigoc3RkZXJyLFwiY29kZSAlZCBiaXRzICVkLT4lZFxcblwiLCBtLCB0cmVlW21dLkxlbiwgYml0cykpO1xuICAgICAgICBzLm9wdF9sZW4gKz0gKGJpdHMgLSB0cmVlW20gKiAyICsgMV0vKi5MZW4qLykgKiB0cmVlW20gKiAyXS8qLkZyZXEqLztcbiAgICAgICAgdHJlZVttICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgICAgfVxuICAgICAgbi0tO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEdlbmVyYXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZVxuICogb3B0aW1hbCkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgYml0IGxlbmd0aCBzdGF0aXN0aWNzIGZvclxuICogdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb246IHRoZSBmaWVsZCBjb2RlIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMgb2Ygbm9uXG4gKiAgICAgemVybyBjb2RlIGxlbmd0aC5cbiAqL1xuY29uc3QgZ2VuX2NvZGVzID0gKHRyZWUsIG1heF9jb2RlLCBibF9jb3VudCkgPT4ge1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgICAgICAgICAgICAgLyogdGhlIHRyZWUgdG8gZGVjb3JhdGUgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgICAgICAgICAgIC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuLy8gICAgdXNoZiAqYmxfY291bnQ7ICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCAqL1xuXG4gIGNvbnN0IG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyQxICsgMSk7IC8qIG5leHQgY29kZSB2YWx1ZSBmb3IgZWFjaCBiaXQgbGVuZ3RoICovXG4gIGxldCBjb2RlID0gMDsgICAgICAgICAgICAgIC8qIHJ1bm5pbmcgY29kZSB2YWx1ZSAqL1xuICBsZXQgYml0czsgICAgICAgICAgICAgICAgICAvKiBiaXQgaW5kZXggKi9cbiAgbGV0IG47ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBpbmRleCAqL1xuXG4gIC8qIFRoZSBkaXN0cmlidXRpb24gY291bnRzIGFyZSBmaXJzdCB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjb2RlIHZhbHVlc1xuICAgKiB3aXRob3V0IGJpdCByZXZlcnNhbC5cbiAgICovXG4gIGZvciAoYml0cyA9IDE7IGJpdHMgPD0gTUFYX0JJVFMkMTsgYml0cysrKSB7XG4gICAgY29kZSA9IChjb2RlICsgYmxfY291bnRbYml0cyAtIDFdKSA8PCAxO1xuICAgIG5leHRfY29kZVtiaXRzXSA9IGNvZGU7XG4gIH1cbiAgLyogQ2hlY2sgdGhhdCB0aGUgYml0IGNvdW50cyBpbiBibF9jb3VudCBhcmUgY29uc2lzdGVudC4gVGhlIGxhc3QgY29kZVxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxuICAgKi9cbiAgLy9Bc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgbGV0IGxlbiA9IHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovO1xuICAgIGlmIChsZW4gPT09IDApIHsgY29udGludWU7IH1cbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuICAgIHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHZhcmlvdXMgJ2NvbnN0YW50JyB0YWJsZXMuXG4gKi9cbmNvbnN0IHRyX3N0YXRpY19pbml0ID0gKCkgPT4ge1xuXG4gIGxldCBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG4gIGxldCBiaXRzOyAgICAgLyogYml0IGNvdW50ZXIgKi9cbiAgbGV0IGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cbiAgbGV0IGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG4gIGxldCBkaXN0OyAgICAgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgY29uc3QgYmxfY291bnQgPSBuZXcgQXJyYXkoTUFYX0JJVFMkMSArIDEpO1xuICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuICAvLyBkbyBjaGVjayBpbiBfdHJfaW5pdCgpXG4gIC8vaWYgKHN0YXRpY19pbml0X2RvbmUpIHJldHVybjtcblxuICAvKiBGb3Igc29tZSBlbWJlZGRlZCB0YXJnZXRzLCBnbG9iYWwgdmFyaWFibGVzIGFyZSBub3QgaW5pdGlhbGl6ZWQ6ICovXG4vKiNpZmRlZiBOT19JTklUX0dMT0JBTF9QT0lOVEVSU1xuICBzdGF0aWNfbF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2x0cmVlO1xuICBzdGF0aWNfbF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9sYml0cztcbiAgc3RhdGljX2RfZGVzYy5zdGF0aWNfdHJlZSA9IHN0YXRpY19kdHJlZTtcbiAgc3RhdGljX2RfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfZGJpdHM7XG4gIHN0YXRpY19ibF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9ibGJpdHM7XG4jZW5kaWYqL1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIG1hcHBpbmcgbGVuZ3RoICgwLi4yNTUpIC0+IGxlbmd0aCBjb2RlICgwLi4yOCkgKi9cbiAgbGVuZ3RoID0gMDtcbiAgZm9yIChjb2RlID0gMDsgY29kZSA8IExFTkdUSF9DT0RFUyQxIC0gMTsgY29kZSsrKSB7XG4gICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2xiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfbGVuZ3RoX2NvZGVbbGVuZ3RoKytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGxlbmd0aCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGxlbmd0aCAhPSAyNTZcIik7XG4gIC8qIE5vdGUgdGhhdCB0aGUgbGVuZ3RoIDI1NSAobWF0Y2ggbGVuZ3RoIDI1OCkgY2FuIGJlIHJlcHJlc2VudGVkXG4gICAqIGluIHR3byBkaWZmZXJlbnQgd2F5czogY29kZSAyODQgKyA1IGJpdHMgb3IgY29kZSAyODUsIHNvIHdlXG4gICAqIG92ZXJ3cml0ZSBsZW5ndGhfY29kZVsyNTVdIHRvIHVzZSB0aGUgYmVzdCBlbmNvZGluZzpcbiAgICovXG4gIF9sZW5ndGhfY29kZVtsZW5ndGggLSAxXSA9IGNvZGU7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovXG4gIGRpc3QgPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgMTY7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3Q7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2RiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlW2Rpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGRpc3QgIT0gMjU2XCIpO1xuICBkaXN0ID4+PSA3OyAvKiBmcm9tIG5vdyBvbiwgYWxsIGRpc3RhbmNlcyBhcmUgZGl2aWRlZCBieSAxMjggKi9cbiAgZm9yICg7IGNvZGUgPCBEX0NPREVTJDE7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3QgPDwgNztcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgKGV4dHJhX2RiaXRzW2NvZGVdIC0gNykpOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbMjU2ICsgZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogMjU2K2Rpc3QgIT0gNTEyXCIpO1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgY29kZXMgb2YgdGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUgKi9cbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUyQxOyBiaXRzKyspIHtcbiAgICBibF9jb3VudFtiaXRzXSA9IDA7XG4gIH1cblxuICBuID0gMDtcbiAgd2hpbGUgKG4gPD0gMTQzKSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDg7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzhdKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjU1KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDk7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzldKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjc5KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDc7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzddKys7XG4gIH1cbiAgd2hpbGUgKG4gPD0gMjg3KSB7XG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDg7XG4gICAgbisrO1xuICAgIGJsX2NvdW50WzhdKys7XG4gIH1cbiAgLyogQ29kZXMgMjg2IGFuZCAyODcgZG8gbm90IGV4aXN0LCBidXQgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlXG4gICAqIHRyZWUgY29uc3RydWN0aW9uIHRvIGdldCBhIGNhbm9uaWNhbCBIdWZmbWFuIHRyZWUgKGxvbmdlc3QgY29kZVxuICAgKiBhbGwgb25lcylcbiAgICovXG4gIGdlbl9jb2RlcyhzdGF0aWNfbHRyZWUsIExfQ09ERVMkMSArIDEsIGJsX2NvdW50KTtcblxuICAvKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUgaXMgdHJpdmlhbDogKi9cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVMkMTsgbisrKSB7XG4gICAgc3RhdGljX2R0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDU7XG4gICAgc3RhdGljX2R0cmVlW24gKiAyXS8qLkNvZGUqLyA9IGJpX3JldmVyc2UobiwgNSk7XG4gIH1cblxuICAvLyBOb3cgZGF0YSByZWFkeSBhbmQgd2UgY2FuIGluaXQgc3RhdGljIHRyZWVzXG4gIHN0YXRpY19sX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2x0cmVlLCBleHRyYV9sYml0cywgTElURVJBTFMkMSArIDEsIExfQ09ERVMkMSwgTUFYX0JJVFMkMSk7XG4gIHN0YXRpY19kX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2R0cmVlLCBleHRyYV9kYml0cywgMCwgICAgICAgICAgRF9DT0RFUyQxLCBNQVhfQklUUyQxKTtcbiAgc3RhdGljX2JsX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2MobmV3IEFycmF5KDApLCBleHRyYV9ibGJpdHMsIDAsICAgICAgICAgQkxfQ09ERVMkMSwgTUFYX0JMX0JJVFMpO1xuXG4gIC8vc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuY29uc3QgaW5pdF9ibG9jayA9IChzKSA9PiB7XG5cbiAgbGV0IG47IC8qIGl0ZXJhdGVzIG92ZXIgdHJlZSBlbGVtZW50cyAqL1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIHRyZWVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDwgTF9DT0RFUyQxOyAgbisrKSB7IHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVMkMTsgIG4rKykgeyBzLmR5bl9kdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBCTF9DT0RFUyQxOyBuKyspIHsgcy5ibF90cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cblxuICBzLmR5bl9sdHJlZVtFTkRfQkxPQ0sgKiAyXS8qLkZyZXEqLyA9IDE7XG4gIHMub3B0X2xlbiA9IHMuc3RhdGljX2xlbiA9IDA7XG4gIHMuc3ltX25leHQgPSBzLm1hdGNoZXMgPSAwO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuICovXG5jb25zdCBiaV93aW5kdXAgPSAocykgPT5cbntcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkge1xuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmO1xuICB9XG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG59O1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXBhcmVzIHRvIHN1YnRyZWVzLCB1c2luZyB0aGUgdHJlZSBkZXB0aCBhcyB0aWUgYnJlYWtlciB3aGVuXG4gKiB0aGUgc3VidHJlZXMgaGF2ZSBlcXVhbCBmcmVxdWVuY3kuIFRoaXMgbWluaW1pemVzIHRoZSB3b3JzdCBjYXNlIGxlbmd0aC5cbiAqL1xuY29uc3Qgc21hbGxlciA9ICh0cmVlLCBuLCBtLCBkZXB0aCkgPT4ge1xuXG4gIGNvbnN0IF9uMiA9IG4gKiAyO1xuICBjb25zdCBfbTIgPSBtICogMjtcbiAgcmV0dXJuICh0cmVlW19uMl0vKi5GcmVxKi8gPCB0cmVlW19tMl0vKi5GcmVxKi8gfHxcbiAgICAgICAgICh0cmVlW19uMl0vKi5GcmVxKi8gPT09IHRyZWVbX20yXS8qLkZyZXEqLyAmJiBkZXB0aFtuXSA8PSBkZXB0aFttXSkpO1xufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXN0b3JlIHRoZSBoZWFwIHByb3BlcnR5IGJ5IG1vdmluZyBkb3duIHRoZSB0cmVlIHN0YXJ0aW5nIGF0IG5vZGUgayxcbiAqIGV4Y2hhbmdpbmcgYSBub2RlIHdpdGggdGhlIHNtYWxsZXN0IG9mIGl0cyB0d28gc29ucyBpZiBuZWNlc3NhcnksIHN0b3BwaW5nXG4gKiB3aGVuIHRoZSBoZWFwIHByb3BlcnR5IGlzIHJlLWVzdGFibGlzaGVkIChlYWNoIGZhdGhlciBzbWFsbGVyIHRoYW4gaXRzXG4gKiB0d28gc29ucykuXG4gKi9cbmNvbnN0IHBxZG93bmhlYXAgPSAocywgdHJlZSwgaykgPT4ge1xuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAvKiB0aGUgdHJlZSB0byByZXN0b3JlICovXG4vLyAgICBpbnQgazsgICAgICAgICAgICAgICAvKiBub2RlIHRvIG1vdmUgZG93biAqL1xuXG4gIGNvbnN0IHYgPSBzLmhlYXBba107XG4gIGxldCBqID0gayA8PCAxOyAgLyogbGVmdCBzb24gb2YgayAqL1xuICB3aGlsZSAoaiA8PSBzLmhlYXBfbGVuKSB7XG4gICAgLyogU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczogKi9cbiAgICBpZiAoaiA8IHMuaGVhcF9sZW4gJiZcbiAgICAgIHNtYWxsZXIodHJlZSwgcy5oZWFwW2ogKyAxXSwgcy5oZWFwW2pdLCBzLmRlcHRoKSkge1xuICAgICAgaisrO1xuICAgIH1cbiAgICAvKiBFeGl0IGlmIHYgaXMgc21hbGxlciB0aGFuIGJvdGggc29ucyAqL1xuICAgIGlmIChzbWFsbGVyKHRyZWUsIHYsIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHsgYnJlYWs7IH1cblxuICAgIC8qIEV4Y2hhbmdlIHYgd2l0aCB0aGUgc21hbGxlc3Qgc29uICovXG4gICAgcy5oZWFwW2tdID0gcy5oZWFwW2pdO1xuICAgIGsgPSBqO1xuXG4gICAgLyogQW5kIGNvbnRpbnVlIGRvd24gdGhlIHRyZWUsIHNldHRpbmcgaiB0byB0aGUgbGVmdCBzb24gb2YgayAqL1xuICAgIGogPDw9IDE7XG4gIH1cbiAgcy5oZWFwW2tdID0gdjtcbn07XG5cblxuLy8gaW5saW5lZCBtYW51YWxseVxuLy8gY29uc3QgU01BTExFU1QgPSAxO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgdGhlIGJsb2NrIGRhdGEgY29tcHJlc3NlZCB1c2luZyB0aGUgZ2l2ZW4gSHVmZm1hbiB0cmVlc1xuICovXG5jb25zdCBjb21wcmVzc19ibG9jayA9IChzLCBsdHJlZSwgZHRyZWUpID0+IHtcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjb25zdCBjdF9kYXRhICpsdHJlZTsgLyogbGl0ZXJhbCB0cmVlICovXG4vLyAgICBjb25zdCBjdF9kYXRhICpkdHJlZTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuXG4gIGxldCBkaXN0OyAgICAgICAgICAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbiAgbGV0IGxjOyAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3QgPT0gMCkgKi9cbiAgbGV0IHN4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIHN5bV9idWYgKi9cbiAgbGV0IGNvZGU7ICAgICAgICAgICAvKiB0aGUgY29kZSB0byBzZW5kICovXG4gIGxldCBleHRyYTsgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgdG8gc2VuZCAqL1xuXG4gIGlmIChzLnN5bV9uZXh0ICE9PSAwKSB7XG4gICAgZG8ge1xuICAgICAgZGlzdCA9IHMucGVuZGluZ19idWZbcy5zeW1fYnVmICsgc3grK10gJiAweGZmO1xuICAgICAgZGlzdCArPSAocy5wZW5kaW5nX2J1ZltzLnN5bV9idWYgKyBzeCsrXSAmIDB4ZmYpIDw8IDg7XG4gICAgICBsYyA9IHMucGVuZGluZ19idWZbcy5zeW1fYnVmICsgc3grK107XG4gICAgICBpZiAoZGlzdCA9PT0gMCkge1xuICAgICAgICBzZW5kX2NvZGUocywgbGMsIGx0cmVlKTsgLyogc2VuZCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsXCIgJyVjJyBcIiwgbGMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICAgICAgY29kZSA9IF9sZW5ndGhfY29kZVtsY107XG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlICsgTElURVJBTFMkMSArIDEsIGx0cmVlKTsgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9sYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgbGMgLT0gYmFzZV9sZW5ndGhbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGxjLCBleHRyYSk7ICAgICAgIC8qIHNlbmQgdGhlIGV4dHJhIGxlbmd0aCBiaXRzICovXG4gICAgICAgIH1cbiAgICAgICAgZGlzdC0tOyAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgICAgIGNvZGUgPSBkX2NvZGUoZGlzdCk7XG4gICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xuXG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlLCBkdHJlZSk7ICAgICAgIC8qIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9kYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGRpc3QsIGV4dHJhKTsgICAvKiBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzICovXG4gICAgICAgIH1cbiAgICAgIH0gLyogbGl0ZXJhbCBvciBtYXRjaCBwYWlyID8gKi9cblxuICAgICAgLyogQ2hlY2sgdGhhdCB0aGUgb3ZlcmxheSBiZXR3ZWVuIHBlbmRpbmdfYnVmIGFuZCBzeW1fYnVmIGlzIG9rOiAqL1xuICAgICAgLy9Bc3NlcnQocy0+cGVuZGluZyA8IHMtPmxpdF9idWZzaXplICsgc3gsIFwicGVuZGluZ0J1ZiBvdmVyZmxvd1wiKTtcblxuICAgIH0gd2hpbGUgKHN4IDwgcy5zeW1fbmV4dCk7XG4gIH1cblxuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBsdHJlZSk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RydWN0IG9uZSBIdWZmbWFuIHRyZWUgYW5kIGFzc2lnbnMgdGhlIGNvZGUgYml0IHN0cmluZ3MgYW5kIGxlbmd0aHMuXG4gKiBVcGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGQgZnJlcSBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzLlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZHMgbGVuIGFuZCBjb2RlIGFyZSBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aFxuICogICAgIGFuZCBjb3JyZXNwb25kaW5nIGNvZGUuIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzXG4gKiAgICAgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzIG5vdCBudWxsLiBUaGUgZmllbGQgbWF4X2NvZGUgaXMgc2V0LlxuICovXG5jb25zdCBidWlsZF90cmVlID0gKHMsIGRlc2MpID0+IHtcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7IC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cblxuICBjb25zdCB0cmVlICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIGNvbnN0IHN0cmVlICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIGNvbnN0IGhhc19zdHJlZSA9IGRlc2Muc3RhdF9kZXNjLmhhc19zdHJlZTtcbiAgY29uc3QgZWxlbXMgICAgPSBkZXNjLnN0YXRfZGVzYy5lbGVtcztcbiAgbGV0IG4sIG07ICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciBoZWFwIGVsZW1lbnRzICovXG4gIGxldCBtYXhfY29kZSA9IC0xOyAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgbGV0IG5vZGU7ICAgICAgICAgIC8qIG5ldyBub2RlIGJlaW5nIGNyZWF0ZWQgKi9cblxuICAvKiBDb25zdHJ1Y3QgdGhlIGluaXRpYWwgaGVhcCwgd2l0aCBsZWFzdCBmcmVxdWVudCBlbGVtZW50IGluXG4gICAqIGhlYXBbU01BTExFU1RdLiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLlxuICAgKiBoZWFwWzBdIGlzIG5vdCB1c2VkLlxuICAgKi9cbiAgcy5oZWFwX2xlbiA9IDA7XG4gIHMuaGVhcF9tYXggPSBIRUFQX1NJWkUkMTtcblxuICBmb3IgKG4gPSAwOyBuIDwgZWxlbXM7IG4rKykge1xuICAgIGlmICh0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47XG4gICAgICBzLmRlcHRoW25dID0gMDtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlIHBremlwIGZvcm1hdCByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IG9uZSBkaXN0YW5jZSBjb2RlIGV4aXN0cyxcbiAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG4gICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XG4gICAqIHR3byBjb2RlcyBvZiBub24gemVybyBmcmVxdWVuY3kuXG4gICAqL1xuICB3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcbiAgICBub2RlID0gcy5oZWFwWysrcy5oZWFwX2xlbl0gPSAobWF4X2NvZGUgPCAyID8gKyttYXhfY29kZSA6IDApO1xuICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gMTtcbiAgICBzLmRlcHRoW25vZGVdID0gMDtcbiAgICBzLm9wdF9sZW4tLTtcblxuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiAtPSBzdHJlZVtub2RlICogMiArIDFdLyouTGVuKi87XG4gICAgfVxuICAgIC8qIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0cyAqL1xuICB9XG4gIGRlc2MubWF4X2NvZGUgPSBtYXhfY29kZTtcblxuICAvKiBUaGUgZWxlbWVudHMgaGVhcFtoZWFwX2xlbi8yKzEgLi4gaGVhcF9sZW5dIGFyZSBsZWF2ZXMgb2YgdGhlIHRyZWUsXG4gICAqIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuICAgKi9cbiAgZm9yIChuID0gKHMuaGVhcF9sZW4gPj4gMS8qaW50IC8yKi8pOyBuID49IDE7IG4tLSkgeyBwcWRvd25oZWFwKHMsIHRyZWUsIG4pOyB9XG5cbiAgLyogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xuICAgKiBmcmVxdWVudCBub2Rlcy5cbiAgICovXG4gIG5vZGUgPSBlbGVtczsgICAgICAgICAgICAgIC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xuICBkbyB7XG4gICAgLy9wcXJlbW92ZShzLCB0cmVlLCBuKTsgIC8qIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeSAqL1xuICAgIC8qKiogcHFyZW1vdmUgKioqL1xuICAgIG4gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gcy5oZWFwW3MuaGVhcF9sZW4tLV07XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcbiAgICAvKioqL1xuXG4gICAgbSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTsgLyogbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3kgKi9cblxuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLyoga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeSAqL1xuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbTtcblxuICAgIC8qIENyZWF0ZSBhIG5ldyBub2RlIGZhdGhlciBvZiBuIGFuZCBtICovXG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSB0cmVlW24gKiAyXS8qLkZyZXEqLyArIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAocy5kZXB0aFtuXSA+PSBzLmRlcHRoW21dID8gcy5kZXB0aFtuXSA6IHMuZGVwdGhbbV0pICsgMTtcbiAgICB0cmVlW24gKiAyICsgMV0vKi5EYWQqLyA9IHRyZWVbbSAqIDIgKyAxXS8qLkRhZCovID0gbm9kZTtcblxuICAgIC8qIGFuZCBpbnNlcnQgdGhlIG5ldyBub2RlIGluIHRoZSBoZWFwICovXG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gbm9kZSsrO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG5cbiAgfSB3aGlsZSAocy5oZWFwX2xlbiA+PSAyKTtcblxuICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcblxuICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XG4gICAqIGdlbmVyYXRlIHRoZSBiaXQgbGVuZ3Rocy5cbiAgICovXG4gIGdlbl9iaXRsZW4ocywgZGVzYyk7XG5cbiAgLyogVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2RlcyAqL1xuICBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIHMuYmxfY291bnQpO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNjYW4gYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgdG8gZGV0ZXJtaW5lIHRoZSBmcmVxdWVuY2llcyBvZiB0aGUgY29kZXNcbiAqIGluIHRoZSBiaXQgbGVuZ3RoIHRyZWUuXG4gKi9cbmNvbnN0IHNjYW5fdHJlZSA9IChzLCB0cmVlLCBtYXhfY29kZSkgPT4ge1xuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cblxuICBsZXQgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXG4gIGxldCBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cbiAgbGV0IGN1cmxlbjsgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqL1xuXG4gIGxldCBuZXh0bGVuID0gdHJlZVswICogMiArIDFdLyouTGVuKi87IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cblxuICBsZXQgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuICBsZXQgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXG4gIGxldCBtaW5fY291bnQgPSA0OyAgICAgICAgIC8qIG1pbiByZXBlYXQgY291bnQgKi9cblxuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG4gIHRyZWVbKG1heF9jb2RlICsgMSkgKiAyICsgMV0vKi5MZW4qLyA9IDB4ZmZmZjsgLyogZ3VhcmQgKi9cblxuICBmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHtcbiAgICBjdXJsZW4gPSBuZXh0bGVuO1xuICAgIG5leHRsZW4gPSB0cmVlWyhuICsgMSkgKiAyICsgMV0vKi5MZW4qLztcblxuICAgIGlmICgrK2NvdW50IDwgbWF4X2NvdW50ICYmIGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgY29udGludWU7XG5cbiAgICB9IGVsc2UgaWYgKGNvdW50IDwgbWluX2NvdW50KSB7XG4gICAgICBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8gKz0gY291bnQ7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuXG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7IHMuYmxfdHJlZVtjdXJsZW4gKiAyXS8qLkZyZXEqLysrOyB9XG4gICAgICBzLmJsX3RyZWVbUkVQXzNfNiAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2UgaWYgKGNvdW50IDw9IDEwKSB7XG4gICAgICBzLmJsX3RyZWVbUkVQWl8zXzEwICogMl0vKi5GcmVxKi8rKztcblxuICAgIH0gZWxzZSB7XG4gICAgICBzLmJsX3RyZWVbUkVQWl8xMV8xMzggKiAyXS8qLkZyZXEqLysrO1xuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgICBwcmV2bGVuID0gY3VybGVuO1xuXG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICAgIG1heF9jb3VudCA9IDEzODtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgbWF4X2NvdW50ID0gNjtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4X2NvdW50ID0gNztcbiAgICAgIG1pbl9jb3VudCA9IDQ7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSBpbiBjb21wcmVzc2VkIGZvcm0sIHVzaW5nIHRoZSBjb2RlcyBpblxuICogYmxfdHJlZS5cbiAqL1xuY29uc3Qgc2VuZF90cmVlID0gKHMsIHRyZWUsIG1heF9jb2RlKSA9PiB7XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cblxuICBsZXQgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXG4gIGxldCBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cbiAgbGV0IGN1cmxlbjsgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqL1xuXG4gIGxldCBuZXh0bGVuID0gdHJlZVswICogMiArIDFdLyouTGVuKi87IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cblxuICBsZXQgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuICBsZXQgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXG4gIGxldCBtaW5fY291bnQgPSA0OyAgICAgICAgIC8qIG1pbiByZXBlYXQgY291bnQgKi9cblxuICAvKiB0cmVlW21heF9jb2RlKzFdLkxlbiA9IC0xOyAqLyAgLyogZ3VhcmQgYWxyZWFkeSBzZXQgKi9cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIGN1cmxlbiA9IG5leHRsZW47XG4gICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXS8qLkxlbiovO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIGRvIHsgc2VuZF9jb2RlKHMsIGN1cmxlbiwgcy5ibF90cmVlKTsgfSB3aGlsZSAoLS1jb3VudCAhPT0gMCk7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikge1xuICAgICAgICBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpO1xuICAgICAgICBjb3VudC0tO1xuICAgICAgfVxuICAgICAgLy9Bc3NlcnQoY291bnQgPj0gMyAmJiBjb3VudCA8PSA2LCBcIiAzXzY/XCIpO1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUF8zXzYsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAyKTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzNfMTAsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAzKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kX2NvZGUocywgUkVQWl8xMV8xMzgsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAxMSwgNyk7XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICAgIHByZXZsZW4gPSBjdXJsZW47XG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICAgIG1heF9jb3VudCA9IDEzODtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgbWF4X2NvdW50ID0gNjtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4X2NvdW50ID0gNztcbiAgICAgIG1pbl9jb3VudCA9IDQ7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgZm9yIHRoZSBiaXQgbGVuZ3RocyBhbmQgcmV0dXJuIHRoZSBpbmRleCBpblxuICogYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gKi9cbmNvbnN0IGJ1aWxkX2JsX3RyZWUgPSAocykgPT4ge1xuXG4gIGxldCBtYXhfYmxpbmRleDsgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIGJpdCBsZW5ndGggZnJlcXVlbmNpZXMgZm9yIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovXG4gIHNjYW5fdHJlZShzLCBzLmR5bl9sdHJlZSwgcy5sX2Rlc2MubWF4X2NvZGUpO1xuICBzY2FuX3RyZWUocywgcy5keW5fZHRyZWUsIHMuZF9kZXNjLm1heF9jb2RlKTtcblxuICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlOiAqL1xuICBidWlsZF90cmVlKHMsIHMuYmxfZGVzYyk7XG4gIC8qIG9wdF9sZW4gbm93IGluY2x1ZGVzIHRoZSBsZW5ndGggb2YgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLCBleGNlcHRcbiAgICogdGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGhzIGNvZGVzIGFuZCB0aGUgNSs1KzQgYml0cyBmb3IgdGhlIGNvdW50cy5cbiAgICovXG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgYml0IGxlbmd0aCBjb2RlcyB0byBzZW5kLiBUaGUgcGt6aXAgZm9ybWF0XG4gICAqIHJlcXVpcmVzIHRoYXQgYXQgbGVhc3QgNCBiaXQgbGVuZ3RoIGNvZGVzIGJlIHNlbnQuIChhcHBub3RlLnR4dCBzYXlzXG4gICAqIDMgYnV0IHRoZSBhY3R1YWwgdmFsdWUgdXNlZCBpcyA0LilcbiAgICovXG4gIGZvciAobWF4X2JsaW5kZXggPSBCTF9DT0RFUyQxIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuICAgIGlmIChzLmJsX3RyZWVbYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCB0aGUgaGVhZGVyIGZvciBhIGJsb2NrIHVzaW5nIGR5bmFtaWMgSHVmZm1hbiB0cmVlczogdGhlIGNvdW50cywgdGhlXG4gKiBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzLCB0aGUgbGl0ZXJhbCB0cmVlIGFuZCB0aGUgZGlzdGFuY2UgdHJlZS5cbiAqIElOIGFzc2VydGlvbjogbGNvZGVzID49IDI1NywgZGNvZGVzID49IDEsIGJsY29kZXMgPj0gNC5cbiAqL1xuY29uc3Qgc2VuZF9hbGxfdHJlZXMgPSAocywgbGNvZGVzLCBkY29kZXMsIGJsY29kZXMpID0+IHtcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXG5cbiAgbGV0IHJhbms7ICAgICAgICAgICAgICAgICAgICAvKiBpbmRleCBpbiBibF9vcmRlciAqL1xuXG4gIC8vQXNzZXJ0IChsY29kZXMgPj0gMjU3ICYmIGRjb2RlcyA+PSAxICYmIGJsY29kZXMgPj0gNCwgXCJub3QgZW5vdWdoIGNvZGVzXCIpO1xuICAvL0Fzc2VydCAobGNvZGVzIDw9IExfQ09ERVMgJiYgZGNvZGVzIDw9IERfQ09ERVMgJiYgYmxjb2RlcyA8PSBCTF9DT0RFUyxcbiAgLy8gICAgICAgIFwidG9vIG1hbnkgY29kZXNcIik7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY291bnRzOiBcIikpO1xuICBzZW5kX2JpdHMocywgbGNvZGVzIC0gMjU3LCA1KTsgLyogbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG4gIHNlbmRfYml0cyhzLCBkY29kZXMgLSAxLCAgIDUpO1xuICBzZW5kX2JpdHMocywgYmxjb2RlcyAtIDQsICA0KTsgLyogbm90IC0zIGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBmb3IgKHJhbmsgPSAwOyByYW5rIDwgYmxjb2RlczsgcmFuaysrKSB7XG4gICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCBjb2RlICUyZCBcIiwgYmxfb3JkZXJbcmFua10pKTtcbiAgICBzZW5kX2JpdHMocywgcy5ibF90cmVlW2JsX29yZGVyW3JhbmtdICogMiArIDFdLyouTGVuKi8sIDMpO1xuICB9XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG5cbiAgc2VuZF90cmVlKHMsIHMuZHluX2x0cmVlLCBsY29kZXMgLSAxKTsgLyogbGl0ZXJhbCB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxubGl0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9kdHJlZSwgZGNvZGVzIC0gMSk7IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5kaXN0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENoZWNrIGlmIHRoZSBkYXRhIHR5cGUgaXMgVEVYVCBvciBCSU5BUlksIHVzaW5nIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtOlxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxuICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJibG9jayBsaXN0XCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS5cbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwiYWxsb3cgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cbiAqIC0gQklOQVJZIG90aGVyd2lzZS5cbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxuICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG4gKiAgICg3IHtCRUx9LCA4IHtCU30sIDExIHtWVH0sIDEyIHtGRn0sIDI2IHtTVUJ9LCAyNyB7RVNDfSkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cbiAqL1xuY29uc3QgZGV0ZWN0X2RhdGFfdHlwZSA9IChzKSA9PiB7XG4gIC8qIGJsb2NrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsb2NrLWxpc3RlZCBieXRlc1xuICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcbiAgICogMHhmM2ZmYzA3ZiA9IGJpbmFyeSAxMTExMDAxMTExMTExMTExMTEwMDAwMDAwMTExMTExMVxuICAgKi9cbiAgbGV0IGJsb2NrX21hc2sgPSAweGYzZmZjMDdmO1xuICBsZXQgbjtcblxuICAvKiBDaGVjayBmb3Igbm9uLXRleHR1YWwgKFwiYmxvY2stbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsb2NrX21hc2sgPj4+PSAxKSB7XG4gICAgaWYgKChibG9ja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX0JJTkFSWTtcbiAgICB9XG4gIH1cblxuICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoXCJhbGxvdy1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxuICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUyQxOyBuKyspIHtcbiAgICBpZiAocy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSB7XG4gICAgICByZXR1cm4gWl9URVhUO1xuICAgIH1cbiAgfVxuXG4gIC8qIFRoZXJlIGFyZSBubyBcImJsb2NrLWxpc3RlZFwiIG9yIFwiYWxsb3ctbGlzdGVkXCIgYnl0ZXM6XG4gICAqIHRoaXMgc3RyZWFtIGVpdGhlciBpcyBlbXB0eSBvciBoYXMgdG9sZXJhdGVkIChcImdyYXktbGlzdGVkXCIpIGJ5dGVzIG9ubHkuXG4gICAqL1xuICByZXR1cm4gWl9CSU5BUlk7XG59O1xuXG5cbmxldCBzdGF0aWNfaW5pdF9kb25lID0gZmFsc2U7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdHJlZSBkYXRhIHN0cnVjdHVyZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtLlxuICovXG5jb25zdCBfdHJfaW5pdCQxID0gKHMpID0+XG57XG5cbiAgaWYgKCFzdGF0aWNfaW5pdF9kb25lKSB7XG4gICAgdHJfc3RhdGljX2luaXQoKTtcbiAgICBzdGF0aWNfaW5pdF9kb25lID0gdHJ1ZTtcbiAgfVxuXG4gIHMubF9kZXNjICA9IG5ldyBUcmVlRGVzYyhzLmR5bl9sdHJlZSwgc3RhdGljX2xfZGVzYyk7XG4gIHMuZF9kZXNjICA9IG5ldyBUcmVlRGVzYyhzLmR5bl9kdHJlZSwgc3RhdGljX2RfZGVzYyk7XG4gIHMuYmxfZGVzYyA9IG5ldyBUcmVlRGVzYyhzLmJsX3RyZWUsIHN0YXRpY19ibF9kZXNjKTtcblxuICBzLmJpX2J1ZiA9IDA7XG4gIHMuYmlfdmFsaWQgPSAwO1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIGZpcnN0IGJsb2NrIG9mIHRoZSBmaXJzdCBmaWxlOiAqL1xuICBpbml0X2Jsb2NrKHMpO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBzdG9yZWQgYmxvY2tcbiAqL1xuY29uc3QgX3RyX3N0b3JlZF9ibG9jayQxID0gKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCkgPT4ge1xuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrICovXG4vL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqL1xuLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG5cbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7ICAgIC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xuICBiaV93aW5kdXAocyk7ICAgICAgICAvKiBhbGlnbiBvbiBieXRlIGJvdW5kYXJ5ICovXG4gIHB1dF9zaG9ydChzLCBzdG9yZWRfbGVuKTtcbiAgcHV0X3Nob3J0KHMsIH5zdG9yZWRfbGVuKTtcbiAgaWYgKHN0b3JlZF9sZW4pIHtcbiAgICBzLnBlbmRpbmdfYnVmLnNldChzLndpbmRvdy5zdWJhcnJheShidWYsIGJ1ZiArIHN0b3JlZF9sZW4pLCBzLnBlbmRpbmcpO1xuICB9XG4gIHMucGVuZGluZyArPSBzdG9yZWRfbGVuO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgb25lIGVtcHR5IHN0YXRpYyBibG9jayB0byBnaXZlIGVub3VnaCBsb29rYWhlYWQgZm9yIGluZmxhdGUuXG4gKiBUaGlzIHRha2VzIDEwIGJpdHMsIG9mIHdoaWNoIDcgbWF5IHJlbWFpbiBpbiB0aGUgYml0IGJ1ZmZlci5cbiAqL1xuY29uc3QgX3RyX2FsaWduJDEgPSAocykgPT4ge1xuICBzZW5kX2JpdHMocywgU1RBVElDX1RSRUVTIDw8IDEsIDMpO1xuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBzdGF0aWNfbHRyZWUpO1xuICBiaV9mbHVzaChzKTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBEZXRlcm1pbmUgdGhlIGJlc3QgZW5jb2RpbmcgZm9yIHRoZSBjdXJyZW50IGJsb2NrOiBkeW5hbWljIHRyZWVzLCBzdGF0aWNcbiAqIHRyZWVzIG9yIHN0b3JlLCBhbmQgd3JpdGUgb3V0IHRoZSBlbmNvZGVkIGJsb2NrLlxuICovXG5jb25zdCBfdHJfZmx1c2hfYmxvY2skMSA9IChzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpID0+IHtcbi8vRGVmbGF0ZVN0YXRlICpzO1xuLy9jaGFyZiAqYnVmOyAgICAgICAvKiBpbnB1dCBibG9jaywgb3IgTlVMTCBpZiB0b28gb2xkICovXG4vL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqL1xuLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG5cbiAgbGV0IG9wdF9sZW5iLCBzdGF0aWNfbGVuYjsgIC8qIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXMgKi9cbiAgbGV0IG1heF9ibGluZGV4ID0gMDsgICAgICAgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBCdWlsZCB0aGUgSHVmZm1hbiB0cmVlcyB1bmxlc3MgYSBzdG9yZWQgYmxvY2sgaXMgZm9yY2VkICovXG4gIGlmIChzLmxldmVsID4gMCkge1xuXG4gICAgLyogQ2hlY2sgaWYgdGhlIGZpbGUgaXMgYmluYXJ5IG9yIHRleHQgKi9cbiAgICBpZiAocy5zdHJtLmRhdGFfdHlwZSA9PT0gWl9VTktOT1dOJDEpIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zeW1fbmV4dCAvIDMpKTtcblxuICAgIGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYikgeyBvcHRfbGVuYiA9IHN0YXRpY19sZW5iOyB9XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBBc3NlcnQoYnVmICE9IChjaGFyKikwLCBcImxvc3QgYnVmXCIpO1xuICAgIG9wdF9sZW5iID0gc3RhdGljX2xlbmIgPSBzdG9yZWRfbGVuICsgNTsgLyogZm9yY2UgYSBzdG9yZWQgYmxvY2sgKi9cbiAgfVxuXG4gIGlmICgoc3RvcmVkX2xlbiArIDQgPD0gb3B0X2xlbmIpICYmIChidWYgIT09IC0xKSkge1xuICAgIC8qIDQ6IHR3byB3b3JkcyBmb3IgdGhlIGxlbmd0aHMgKi9cblxuICAgIC8qIFRoZSB0ZXN0IGJ1ZiAhPSBOVUxMIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIExJVF9CVUZTSVpFID4gV1NJWkUuXG4gICAgICogT3RoZXJ3aXNlIHdlIGNhbid0IGhhdmUgcHJvY2Vzc2VkIG1vcmUgdGhhbiBXU0laRSBpbnB1dCBieXRlcyBzaW5jZVxuICAgICAqIHRoZSBsYXN0IGJsb2NrIGZsdXNoLCBiZWNhdXNlIGNvbXByZXNzaW9uIHdvdWxkIGhhdmUgYmVlblxuICAgICAqIHN1Y2Nlc3NmdWwuIElmIExJVF9CVUZTSVpFIDw9IFdTSVpFLCBpdCBpcyBuZXZlciB0b28gbGF0ZSB0b1xuICAgICAqIHRyYW5zZm9ybSBhIGJsb2NrIGludG8gYSBzdG9yZWQgYmxvY2suXG4gICAgICovXG4gICAgX3RyX3N0b3JlZF9ibG9jayQxKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7XG5cbiAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEJDEgfHwgc3RhdGljX2xlbmIgPT09IG9wdF9sZW5iKSB7XG5cbiAgICBzZW5kX2JpdHMocywgKFNUQVRJQ19UUkVFUyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTtcbiAgICBjb21wcmVzc19ibG9jayhzLCBzdGF0aWNfbHRyZWUsIHN0YXRpY19kdHJlZSk7XG5cbiAgfSBlbHNlIHtcbiAgICBzZW5kX2JpdHMocywgKERZTl9UUkVFUyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTtcbiAgICBzZW5kX2FsbF90cmVlcyhzLCBzLmxfZGVzYy5tYXhfY29kZSArIDEsIHMuZF9kZXNjLm1heF9jb2RlICsgMSwgbWF4X2JsaW5kZXggKyAxKTtcbiAgICBjb21wcmVzc19ibG9jayhzLCBzLmR5bl9sdHJlZSwgcy5keW5fZHRyZWUpO1xuICB9XG4gIC8vIEFzc2VydCAocy0+Y29tcHJlc3NlZF9sZW4gPT0gcy0+Yml0c19zZW50LCBcImJhZCBjb21wcmVzc2VkIHNpemVcIik7XG4gIC8qIFRoZSBhYm92ZSBjaGVjayBpcyBtYWRlIG1vZCAyXjMyLCBmb3IgZmlsZXMgbGFyZ2VyIHRoYW4gNTEyIE1CXG4gICAqIGFuZCB1TG9uZyBpbXBsZW1lbnRlZCBvbiAzMiBiaXRzLlxuICAgKi9cbiAgaW5pdF9ibG9jayhzKTtcblxuICBpZiAobGFzdCkge1xuICAgIGJpX3dpbmR1cChzKTtcbiAgfVxuICAvLyBUcmFjZXYoKHN0ZGVycixcIlxcbmNvbXBybGVuICVsdSglbHUpIFwiLCBzLT5jb21wcmVzc2VkX2xlbj4+MyxcbiAgLy8gICAgICAgcy0+Y29tcHJlc3NlZF9sZW4tNypsYXN0KSk7XG59O1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhdmUgdGhlIG1hdGNoIGluZm8gYW5kIHRhbGx5IHRoZSBmcmVxdWVuY3kgY291bnRzLiBSZXR1cm4gdHJ1ZSBpZlxuICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxuICovXG5jb25zdCBfdHJfdGFsbHkkMSA9IChzLCBkaXN0LCBsYykgPT4ge1xuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHVuc2lnbmVkIGRpc3Q7ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuLy8gICAgdW5zaWduZWQgbGM7ICAgIC8qIG1hdGNoIGxlbmd0aC1NSU5fTUFUQ0ggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3Q9PTApICovXG5cbiAgcy5wZW5kaW5nX2J1ZltzLnN5bV9idWYgKyBzLnN5bV9uZXh0KytdID0gZGlzdDtcbiAgcy5wZW5kaW5nX2J1ZltzLnN5bV9idWYgKyBzLnN5bV9uZXh0KytdID0gZGlzdCA+PiA4O1xuICBzLnBlbmRpbmdfYnVmW3Muc3ltX2J1ZiArIHMuc3ltX25leHQrK10gPSBsYztcbiAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAvKiBsYyBpcyB0aGUgdW5tYXRjaGVkIGNoYXIgKi9cbiAgICBzLmR5bl9sdHJlZVtsYyAqIDJdLyouRnJlcSovKys7XG4gIH0gZWxzZSB7XG4gICAgcy5tYXRjaGVzKys7XG4gICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgIC8vQXNzZXJ0KCh1c2gpZGlzdCA8ICh1c2gpTUFYX0RJU1QocykgJiZcbiAgICAvLyAgICAgICAodXNoKWxjIDw9ICh1c2gpKE1BWF9NQVRDSC1NSU5fTUFUQ0gpICYmXG4gICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xuXG4gICAgcy5keW5fbHRyZWVbKF9sZW5ndGhfY29kZVtsY10gKyBMSVRFUkFMUyQxICsgMSkgKiAyXS8qLkZyZXEqLysrO1xuICAgIHMuZHluX2R0cmVlW2RfY29kZShkaXN0KSAqIDJdLyouRnJlcSovKys7XG4gIH1cblxuICByZXR1cm4gKHMuc3ltX25leHQgPT09IHMuc3ltX2VuZCk7XG59O1xuXG52YXIgX3RyX2luaXRfMSAgPSBfdHJfaW5pdCQxO1xudmFyIF90cl9zdG9yZWRfYmxvY2tfMSA9IF90cl9zdG9yZWRfYmxvY2skMTtcbnZhciBfdHJfZmx1c2hfYmxvY2tfMSAgPSBfdHJfZmx1c2hfYmxvY2skMTtcbnZhciBfdHJfdGFsbHlfMSA9IF90cl90YWxseSQxO1xudmFyIF90cl9hbGlnbl8xID0gX3RyX2FsaWduJDE7XG5cbnZhciB0cmVlcyA9IHtcblx0X3RyX2luaXQ6IF90cl9pbml0XzEsXG5cdF90cl9zdG9yZWRfYmxvY2s6IF90cl9zdG9yZWRfYmxvY2tfMSxcblx0X3RyX2ZsdXNoX2Jsb2NrOiBfdHJfZmx1c2hfYmxvY2tfMSxcblx0X3RyX3RhbGx5OiBfdHJfdGFsbHlfMSxcblx0X3RyX2FsaWduOiBfdHJfYWxpZ25fMVxufTtcblxuLy8gTm90ZTogYWRsZXIzMiB0YWtlcyAxMiUgZm9yIGxldmVsIDAgYW5kIDIlIGZvciBsZXZlbCA2LlxuLy8gSXQgaXNuJ3Qgd29ydGggaXQgdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbnMgYXMgaW4gb3JpZ2luYWwuXG4vLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuY29uc3QgYWRsZXIzMiA9IChhZGxlciwgYnVmLCBsZW4sIHBvcykgPT4ge1xuICBsZXQgczEgPSAoYWRsZXIgJiAweGZmZmYpIHwwLFxuICAgICAgczIgPSAoKGFkbGVyID4+PiAxNikgJiAweGZmZmYpIHwwLFxuICAgICAgbiA9IDA7XG5cbiAgd2hpbGUgKGxlbiAhPT0gMCkge1xuICAgIC8vIFNldCBsaW1pdCB+IHR3aWNlIGxlc3MgdGhhbiA1NTUyLCB0byBrZWVwXG4gICAgLy8gczIgaW4gMzEtYml0cywgYmVjYXVzZSB3ZSBmb3JjZSBzaWduZWQgaW50cy5cbiAgICAvLyBpbiBvdGhlciBjYXNlICU9IHdpbGwgZmFpbC5cbiAgICBuID0gbGVuID4gMjAwMCA/IDIwMDAgOiBsZW47XG4gICAgbGVuIC09IG47XG5cbiAgICBkbyB7XG4gICAgICBzMSA9IChzMSArIGJ1Zltwb3MrK10pIHwwO1xuICAgICAgczIgPSAoczIgKyBzMSkgfDA7XG4gICAgfSB3aGlsZSAoLS1uKTtcblxuICAgIHMxICU9IDY1NTIxO1xuICAgIHMyICU9IDY1NTIxO1xuICB9XG5cbiAgcmV0dXJuIChzMSB8IChzMiA8PCAxNikpIHwwO1xufTtcblxuXG52YXIgYWRsZXIzMl8xID0gYWRsZXIzMjtcblxuLy8gTm90ZTogd2UgY2FuJ3QgZ2V0IHNpZ25pZmljYW50IHNwZWVkIGJvb3N0IGhlcmUuXG4vLyBTbyB3cml0ZSBjb2RlIHRvIG1pbmltaXplIHNpemUgLSBubyBwcmVnZW5lcmF0ZWQgdGFibGVzXG4vLyBhbmQgYXJyYXkgdG9vbHMgZGVwZW5kZW5jaWVzLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlXG5jb25zdCBtYWtlVGFibGUgPSAoKSA9PiB7XG4gIGxldCBjLCB0YWJsZSA9IFtdO1xuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBjID0gbjtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgYyA9ICgoYyAmIDEpID8gKDB4RURCODgzMjAgXiAoYyA+Pj4gMSkpIDogKGMgPj4+IDEpKTtcbiAgICB9XG4gICAgdGFibGVbbl0gPSBjO1xuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufTtcblxuLy8gQ3JlYXRlIHRhYmxlIG9uIGxvYWQuIEp1c3QgMjU1IHNpZ25lZCBsb25ncy4gTm90IGEgcHJvYmxlbS5cbmNvbnN0IGNyY1RhYmxlID0gbmV3IFVpbnQzMkFycmF5KG1ha2VUYWJsZSgpKTtcblxuXG5jb25zdCBjcmMzMiA9IChjcmMsIGJ1ZiwgbGVuLCBwb3MpID0+IHtcbiAgY29uc3QgdCA9IGNyY1RhYmxlO1xuICBjb25zdCBlbmQgPSBwb3MgKyBsZW47XG5cbiAgY3JjIF49IC0xO1xuXG4gIGZvciAobGV0IGkgPSBwb3M7IGkgPCBlbmQ7IGkrKykge1xuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdFsoY3JjIF4gYnVmW2ldKSAmIDB4RkZdO1xuICB9XG5cbiAgcmV0dXJuIChjcmMgXiAoLTEpKTsgLy8gPj4+IDA7XG59O1xuXG5cbnZhciBjcmMzMl8xID0gY3JjMzI7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIG1lc3NhZ2VzID0ge1xuICAyOiAgICAgICduZWVkIGRpY3Rpb25hcnknLCAgICAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi9cbiAgMTogICAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXG4gIDA6ICAgICAgJycsICAgICAgICAgICAgICAgICAgICAvKiBaX09LICAgICAgICAgICAgICAwICAqL1xuICAnLTEnOiAgICdmaWxlIGVycm9yJywgICAgICAgICAgLyogWl9FUlJOTyAgICAgICAgICgtMSkgKi9cbiAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXG4gICctMyc6ICAgJ2RhdGEgZXJyb3InLCAgICAgICAgICAvKiBaX0RBVEFfRVJST1IgICAgKC0zKSAqL1xuICAnLTQnOiAgICdpbnN1ZmZpY2llbnQgbWVtb3J5JywgLyogWl9NRU1fRVJST1IgICAgICgtNCkgKi9cbiAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXG4gICctNic6ICAgJ2luY29tcGF0aWJsZSB2ZXJzaW9uJyAvKiBaX1ZFUlNJT05fRVJST1IgKC02KSAqL1xufTtcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG52YXIgY29uc3RhbnRzJDIgPSB7XG5cbiAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xuICBaX05PX0ZMVVNIOiAgICAgICAgIDAsXG4gIFpfUEFSVElBTF9GTFVTSDogICAgMSxcbiAgWl9TWU5DX0ZMVVNIOiAgICAgICAyLFxuICBaX0ZVTExfRkxVU0g6ICAgICAgIDMsXG4gIFpfRklOSVNIOiAgICAgICAgICAgNCxcbiAgWl9CTE9DSzogICAgICAgICAgICA1LFxuICBaX1RSRUVTOiAgICAgICAgICAgIDYsXG5cbiAgLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAgKi9cbiAgWl9PSzogICAgICAgICAgICAgICAwLFxuICBaX1NUUkVBTV9FTkQ6ICAgICAgIDEsXG4gIFpfTkVFRF9ESUNUOiAgICAgICAgMixcbiAgWl9FUlJOTzogICAgICAgICAgIC0xLFxuICBaX1NUUkVBTV9FUlJPUjogICAgLTIsXG4gIFpfREFUQV9FUlJPUjogICAgICAtMyxcbiAgWl9NRU1fRVJST1I6ICAgICAgIC00LFxuICBaX0JVRl9FUlJPUjogICAgICAgLTUsXG4gIC8vWl9WRVJTSU9OX0VSUk9SOiAtNixcblxuICAvKiBjb21wcmVzc2lvbiBsZXZlbHMgKi9cbiAgWl9OT19DT01QUkVTU0lPTjogICAgICAgICAwLFxuICBaX0JFU1RfU1BFRUQ6ICAgICAgICAgICAgIDEsXG4gIFpfQkVTVF9DT01QUkVTU0lPTjogICAgICAgOSxcbiAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAgIC0xLFxuXG5cbiAgWl9GSUxURVJFRDogICAgICAgICAgICAgICAxLFxuICBaX0hVRkZNQU5fT05MWTogICAgICAgICAgIDIsXG4gIFpfUkxFOiAgICAgICAgICAgICAgICAgICAgMyxcbiAgWl9GSVhFRDogICAgICAgICAgICAgICAgICA0LFxuICBaX0RFRkFVTFRfU1RSQVRFR1k6ICAgICAgIDAsXG5cbiAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xuICBaX0JJTkFSWTogICAgICAgICAgICAgICAgIDAsXG4gIFpfVEVYVDogICAgICAgICAgICAgICAgICAgMSxcbiAgLy9aX0FTQ0lJOiAgICAgICAgICAgICAgICAxLCAvLyA9IFpfVEVYVCAoZGVwcmVjYXRlZClcbiAgWl9VTktOT1dOOiAgICAgICAgICAgICAgICAyLFxuXG4gIC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xuICBaX0RFRkxBVEVEOiAgICAgICAgICAgICAgIDhcbiAgLy9aX05VTEw6ICAgICAgICAgICAgICAgICBudWxsIC8vIFVzZSAtMSBvciBudWxsIGlubGluZSwgZGVwZW5kaW5nIG9uIHZhciB0eXBlXG59O1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmNvbnN0IHsgX3RyX2luaXQsIF90cl9zdG9yZWRfYmxvY2ssIF90cl9mbHVzaF9ibG9jaywgX3RyX3RhbGx5LCBfdHJfYWxpZ24gfSA9IHRyZWVzO1xuXG5cblxuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuY29uc3Qge1xuICBaX05PX0ZMVVNIOiBaX05PX0ZMVVNIJDIsIFpfUEFSVElBTF9GTFVTSCwgWl9GVUxMX0ZMVVNIOiBaX0ZVTExfRkxVU0gkMSwgWl9GSU5JU0g6IFpfRklOSVNIJDMsIFpfQkxPQ0s6IFpfQkxPQ0skMSxcbiAgWl9PSzogWl9PSyQzLCBaX1NUUkVBTV9FTkQ6IFpfU1RSRUFNX0VORCQzLCBaX1NUUkVBTV9FUlJPUjogWl9TVFJFQU1fRVJST1IkMiwgWl9EQVRBX0VSUk9SOiBaX0RBVEFfRVJST1IkMiwgWl9CVUZfRVJST1I6IFpfQlVGX0VSUk9SJDEsXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTjogWl9ERUZBVUxUX0NPTVBSRVNTSU9OJDEsXG4gIFpfRklMVEVSRUQsIFpfSFVGRk1BTl9PTkxZLCBaX1JMRSwgWl9GSVhFRCwgWl9ERUZBVUxUX1NUUkFURUdZOiBaX0RFRkFVTFRfU1RSQVRFR1kkMSxcbiAgWl9VTktOT1dOLFxuICBaX0RFRkxBVEVEOiBaX0RFRkxBVEVEJDJcbn0gPSBjb25zdGFudHMkMjtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5jb25zdCBNQVhfTUVNX0xFVkVMID0gOTtcbi8qIE1heGltdW0gdmFsdWUgZm9yIG1lbUxldmVsIGluIGRlZmxhdGVJbml0MiAqL1xuY29uc3QgTUFYX1dCSVRTJDEgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xuY29uc3QgREVGX01FTV9MRVZFTCA9IDg7XG5cblxuY29uc3QgTEVOR1RIX0NPREVTICA9IDI5O1xuLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXG5jb25zdCBMSVRFUkFMUyAgICAgID0gMjU2O1xuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG5jb25zdCBMX0NPREVTICAgICAgID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG5jb25zdCBEX0NPREVTICAgICAgID0gMzA7XG4vKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi9cbmNvbnN0IEJMX0NPREVTICAgICAgPSAxOTtcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xuY29uc3QgSEVBUF9TSVpFICAgICA9IDIgKiBMX0NPREVTICsgMTtcbi8qIG1heGltdW0gaGVhcCBzaXplICovXG5jb25zdCBNQVhfQklUUyAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG5jb25zdCBNSU5fTUFUQ0ggPSAzO1xuY29uc3QgTUFYX01BVENIID0gMjU4O1xuY29uc3QgTUlOX0xPT0tBSEVBRCA9IChNQVhfTUFUQ0ggKyBNSU5fTUFUQ0ggKyAxKTtcblxuY29uc3QgUFJFU0VUX0RJQ1QgPSAweDIwO1xuXG5jb25zdCBJTklUX1NUQVRFICAgID0gIDQyOyAgICAvKiB6bGliIGhlYWRlciAtPiBCVVNZX1NUQVRFICovXG4vLyNpZmRlZiBHWklQXG5jb25zdCBHWklQX1NUQVRFICAgID0gIDU3OyAgICAvKiBnemlwIGhlYWRlciAtPiBCVVNZX1NUQVRFIHwgRVhUUkFfU1RBVEUgKi9cbi8vI2VuZGlmXG5jb25zdCBFWFRSQV9TVEFURSAgID0gIDY5OyAgICAvKiBnemlwIGV4dHJhIGJsb2NrIC0+IE5BTUVfU1RBVEUgKi9cbmNvbnN0IE5BTUVfU1RBVEUgICAgPSAgNzM7ICAgIC8qIGd6aXAgZmlsZSBuYW1lIC0+IENPTU1FTlRfU1RBVEUgKi9cbmNvbnN0IENPTU1FTlRfU1RBVEUgPSAgOTE7ICAgIC8qIGd6aXAgY29tbWVudCAtPiBIQ1JDX1NUQVRFICovXG5jb25zdCBIQ1JDX1NUQVRFICAgID0gMTAzOyAgICAvKiBnemlwIGhlYWRlciBDUkMgLT4gQlVTWV9TVEFURSAqL1xuY29uc3QgQlVTWV9TVEFURSAgICA9IDExMzsgICAgLyogZGVmbGF0ZSAtPiBGSU5JU0hfU1RBVEUgKi9cbmNvbnN0IEZJTklTSF9TVEFURSAgPSA2NjY7ICAgIC8qIHN0cmVhbSBjb21wbGV0ZSAqL1xuXG5jb25zdCBCU19ORUVEX01PUkUgICAgICA9IDE7IC8qIGJsb2NrIG5vdCBjb21wbGV0ZWQsIG5lZWQgbW9yZSBpbnB1dCBvciBtb3JlIG91dHB1dCAqL1xuY29uc3QgQlNfQkxPQ0tfRE9ORSAgICAgPSAyOyAvKiBibG9jayBmbHVzaCBwZXJmb3JtZWQgKi9cbmNvbnN0IEJTX0ZJTklTSF9TVEFSVEVEID0gMzsgLyogZmluaXNoIHN0YXJ0ZWQsIG5lZWQgb25seSBtb3JlIG91dHB1dCBhdCBuZXh0IGRlZmxhdGUgKi9cbmNvbnN0IEJTX0ZJTklTSF9ET05FICAgID0gNDsgLyogZmluaXNoIGRvbmUsIGFjY2VwdCBubyBtb3JlIGlucHV0IG9yIG91dHB1dCAqL1xuXG5jb25zdCBPU19DT0RFID0gMHgwMzsgLy8gVW5peCA6KSAuIERvbid0IGRldGVjdCwgdXNlIHRoaXMgZGVmYXVsdC5cblxuY29uc3QgZXJyID0gKHN0cm0sIGVycm9yQ29kZSkgPT4ge1xuICBzdHJtLm1zZyA9IG1lc3NhZ2VzW2Vycm9yQ29kZV07XG4gIHJldHVybiBlcnJvckNvZGU7XG59O1xuXG5jb25zdCByYW5rID0gKGYpID0+IHtcbiAgcmV0dXJuICgoZikgKiAyKSAtICgoZikgPiA0ID8gOSA6IDApO1xufTtcblxuY29uc3QgemVybyA9IChidWYpID0+IHtcbiAgbGV0IGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfVxufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTbGlkZSB0aGUgaGFzaCB0YWJsZSB3aGVuIHNsaWRpbmcgdGhlIHdpbmRvdyBkb3duIChjb3VsZCBiZSBhdm9pZGVkIHdpdGggMzJcbiAqIGJpdCB2YWx1ZXMgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDAgdG9cbiAqIGtlZXAgdGhlIGhhc2ggdGFibGUgY29uc2lzdGVudCBpZiB3ZSBzd2l0Y2ggYmFjayB0byBsZXZlbCA+IDAgbGF0ZXIuXG4gKi9cbmNvbnN0IHNsaWRlX2hhc2ggPSAocykgPT4ge1xuICBsZXQgbiwgbTtcbiAgbGV0IHA7XG4gIGxldCB3c2l6ZSA9IHMud19zaXplO1xuXG4gIG4gPSBzLmhhc2hfc2l6ZTtcbiAgcCA9IG47XG4gIGRvIHtcbiAgICBtID0gcy5oZWFkWy0tcF07XG4gICAgcy5oZWFkW3BdID0gKG0gPj0gd3NpemUgPyBtIC0gd3NpemUgOiAwKTtcbiAgfSB3aGlsZSAoLS1uKTtcbiAgbiA9IHdzaXplO1xuLy8jaWZuZGVmIEZBU1RFU1RcbiAgcCA9IG47XG4gIGRvIHtcbiAgICBtID0gcy5wcmV2Wy0tcF07XG4gICAgcy5wcmV2W3BdID0gKG0gPj0gd3NpemUgPyBtIC0gd3NpemUgOiAwKTtcbiAgICAvKiBJZiBuIGlzIG5vdCBvbiBhbnkgaGFzaCBjaGFpbiwgcHJldltuXSBpcyBnYXJiYWdlIGJ1dFxuICAgICAqIGl0cyB2YWx1ZSB3aWxsIG5ldmVyIGJlIHVzZWQuXG4gICAgICovXG4gIH0gd2hpbGUgKC0tbik7XG4vLyNlbmRpZlxufTtcblxuLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xubGV0IEhBU0hfWkxJQiA9IChzLCBwcmV2LCBkYXRhKSA9PiAoKHByZXYgPDwgcy5oYXNoX3NoaWZ0KSBeIGRhdGEpICYgcy5oYXNoX21hc2s7XG4vLyBUaGlzIGhhc2ggY2F1c2VzIGxlc3MgY29sbGlzaW9ucywgaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvL2lzc3Vlcy8xMzVcbi8vIEJ1dCBicmVha3MgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vbGV0IEhBU0hfRkFTVCA9IChzLCBwcmV2LCBkYXRhKSA9PiAoKHByZXYgPDwgOCkgKyAocHJldiA+PiA4KSArIChkYXRhIDw8IDQpKSAmIHMuaGFzaF9tYXNrO1xubGV0IEhBU0ggPSBIQVNIX1pMSUI7XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZS4gQWxsIGRlZmxhdGUoKSBvdXRwdXQsIGV4Y2VwdCBmb3JcbiAqIHNvbWUgZGVmbGF0ZV9zdG9yZWQoKSBvdXRwdXQsIGdvZXMgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNvIHNvbWVcbiAqIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlXG4gKiBzdHJtLT5uZXh0X291dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC4gKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuICovXG5jb25zdCBmbHVzaF9wZW5kaW5nID0gKHN0cm0pID0+IHtcbiAgY29uc3QgcyA9IHN0cm0uc3RhdGU7XG5cbiAgLy9fdHJfZmx1c2hfYml0cyhzKTtcbiAgbGV0IGxlbiA9IHMucGVuZGluZztcbiAgaWYgKGxlbiA+IHN0cm0uYXZhaWxfb3V0KSB7XG4gICAgbGVuID0gc3RybS5hdmFpbF9vdXQ7XG4gIH1cbiAgaWYgKGxlbiA9PT0gMCkgeyByZXR1cm47IH1cblxuICBzdHJtLm91dHB1dC5zZXQocy5wZW5kaW5nX2J1Zi5zdWJhcnJheShzLnBlbmRpbmdfb3V0LCBzLnBlbmRpbmdfb3V0ICsgbGVuKSwgc3RybS5uZXh0X291dCk7XG4gIHN0cm0ubmV4dF9vdXQgICs9IGxlbjtcbiAgcy5wZW5kaW5nX291dCAgKz0gbGVuO1xuICBzdHJtLnRvdGFsX291dCArPSBsZW47XG4gIHN0cm0uYXZhaWxfb3V0IC09IGxlbjtcbiAgcy5wZW5kaW5nICAgICAgLT0gbGVuO1xuICBpZiAocy5wZW5kaW5nID09PSAwKSB7XG4gICAgcy5wZW5kaW5nX291dCA9IDA7XG4gIH1cbn07XG5cblxuY29uc3QgZmx1c2hfYmxvY2tfb25seSA9IChzLCBsYXN0KSA9PiB7XG4gIF90cl9mbHVzaF9ibG9jayhzLCAocy5ibG9ja19zdGFydCA+PSAwID8gcy5ibG9ja19zdGFydCA6IC0xKSwgcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQsIGxhc3QpO1xuICBzLmJsb2NrX3N0YXJ0ID0gcy5zdHJzdGFydDtcbiAgZmx1c2hfcGVuZGluZyhzLnN0cm0pO1xufTtcblxuXG5jb25zdCBwdXRfYnl0ZSA9IChzLCBiKSA9PiB7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUHV0IGEgc2hvcnQgaW4gdGhlIHBlbmRpbmcgYnVmZmVyLiBUaGUgMTYtYml0IHZhbHVlIGlzIHB1dCBpbiBNU0Igb3JkZXIuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBzdHJlYW0gc3RhdGUgaXMgY29ycmVjdCBhbmQgdGhlcmUgaXMgZW5vdWdoIHJvb20gaW5cbiAqIHBlbmRpbmdfYnVmLlxuICovXG5jb25zdCBwdXRTaG9ydE1TQiA9IChzLCBiKSA9PiB7XG5cbiAgLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiID4+IDgpKTtcbi8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiAmIDB4ZmYpKTtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAoYiA+Pj4gOCkgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGIgJiAweGZmO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcbiAqIGFuZCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC4gIEFsbCBkZWZsYXRlKCkgaW5wdXQgZ29lcyB0aHJvdWdoXG4gKiB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdCB0byBhdm9pZFxuICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxuICogKFNlZSBhbHNvIGZsdXNoX3BlbmRpbmcoKSkuXG4gKi9cbmNvbnN0IHJlYWRfYnVmID0gKHN0cm0sIGJ1Ziwgc3RhcnQsIHNpemUpID0+IHtcblxuICBsZXQgbGVuID0gc3RybS5hdmFpbF9pbjtcblxuICBpZiAobGVuID4gc2l6ZSkgeyBsZW4gPSBzaXplOyB9XG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuIDA7IH1cblxuICBzdHJtLmF2YWlsX2luIC09IGxlbjtcblxuICAvLyB6bWVtY3B5KGJ1Ziwgc3RybS0+bmV4dF9pbiwgbGVuKTtcbiAgYnVmLnNldChzdHJtLmlucHV0LnN1YmFycmF5KHN0cm0ubmV4dF9pbiwgc3RybS5uZXh0X2luICsgbGVuKSwgc3RhcnQpO1xuICBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAxKSB7XG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzJfMShzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpO1xuICB9XG5cbiAgZWxzZSBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAyKSB7XG4gICAgc3RybS5hZGxlciA9IGNyYzMyXzEoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiArPSBsZW47XG4gIHN0cm0udG90YWxfaW4gKz0gbGVuO1xuXG4gIHJldHVybiBsZW47XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2V0IG1hdGNoX3N0YXJ0IHRvIHRoZSBsb25nZXN0IG1hdGNoIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBzdHJpbmcgYW5kXG4gKiByZXR1cm4gaXRzIGxlbmd0aC4gTWF0Y2hlcyBzaG9ydGVyIG9yIGVxdWFsIHRvIHByZXZfbGVuZ3RoIGFyZSBkaXNjYXJkZWQsXG4gKiBpbiB3aGljaCBjYXNlIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gcHJldl9sZW5ndGggYW5kIG1hdGNoX3N0YXJ0IGlzXG4gKiBnYXJiYWdlLlxuICogSU4gYXNzZXJ0aW9uczogY3VyX21hdGNoIGlzIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluIGZvciB0aGUgY3VycmVudFxuICogICBzdHJpbmcgKHN0cnN0YXJ0KSBhbmQgaXRzIGRpc3RhbmNlIGlzIDw9IE1BWF9ESVNULCBhbmQgcHJldl9sZW5ndGggPj0gMVxuICogT1VUIGFzc2VydGlvbjogdGhlIG1hdGNoIGxlbmd0aCBpcyBub3QgZ3JlYXRlciB0aGFuIHMtPmxvb2thaGVhZC5cbiAqL1xuY29uc3QgbG9uZ2VzdF9tYXRjaCA9IChzLCBjdXJfbWF0Y2gpID0+IHtcblxuICBsZXQgY2hhaW5fbGVuZ3RoID0gcy5tYXhfY2hhaW5fbGVuZ3RoOyAgICAgIC8qIG1heCBoYXNoIGNoYWluIGxlbmd0aCAqL1xuICBsZXQgc2NhbiA9IHMuc3Ryc3RhcnQ7IC8qIGN1cnJlbnQgc3RyaW5nICovXG4gIGxldCBtYXRjaDsgICAgICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoZWQgc3RyaW5nICovXG4gIGxldCBsZW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgbWF0Y2ggKi9cbiAgbGV0IGJlc3RfbGVuID0gcy5wcmV2X2xlbmd0aDsgICAgICAgICAgICAgIC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqL1xuICBsZXQgbmljZV9tYXRjaCA9IHMubmljZV9tYXRjaDsgICAgICAgICAgICAgLyogc3RvcCBpZiBtYXRjaCBsb25nIGVub3VnaCAqL1xuICBjb25zdCBsaW1pdCA9IChzLnN0cnN0YXJ0ID4gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpID9cbiAgICAgIHMuc3Ryc3RhcnQgLSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSA6IDAvKk5JTCovO1xuXG4gIGNvbnN0IF93aW4gPSBzLndpbmRvdzsgLy8gc2hvcnRjdXRcblxuICBjb25zdCB3bWFzayA9IHMud19tYXNrO1xuICBjb25zdCBwcmV2ICA9IHMucHJldjtcblxuICAvKiBTdG9wIHdoZW4gY3VyX21hdGNoIGJlY29tZXMgPD0gbGltaXQuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLFxuICAgKiB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nIG9mIHdpbmRvdyBpbmRleCAwLlxuICAgKi9cblxuICBjb25zdCBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuICBsZXQgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gIGxldCBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuXG4gIC8qIFRoZSBjb2RlIGlzIG9wdGltaXplZCBmb3IgSEFTSF9CSVRTID49IDggYW5kIE1BWF9NQVRDSC0yIG11bHRpcGxlIG9mIDE2LlxuICAgKiBJdCBpcyBlYXN5IHRvIGdldCByaWQgb2YgdGhpcyBvcHRpbWl6YXRpb24gaWYgbmVjZXNzYXJ5LlxuICAgKi9cbiAgLy8gQXNzZXJ0KHMtPmhhc2hfYml0cyA+PSA4ICYmIE1BWF9NQVRDSCA9PSAyNTgsIFwiQ29kZSB0b28gY2xldmVyXCIpO1xuXG4gIC8qIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6ICovXG4gIGlmIChzLnByZXZfbGVuZ3RoID49IHMuZ29vZF9tYXRjaCkge1xuICAgIGNoYWluX2xlbmd0aCA+Pj0gMjtcbiAgfVxuICAvKiBEbyBub3QgbG9vayBmb3IgbWF0Y2hlcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgaW5wdXQuIFRoaXMgaXMgbmVjZXNzYXJ5XG4gICAqIHRvIG1ha2UgZGVmbGF0ZSBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgaWYgKG5pY2VfbWF0Y2ggPiBzLmxvb2thaGVhZCkgeyBuaWNlX21hdGNoID0gcy5sb29rYWhlYWQ7IH1cblxuICAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCBcIm5lZWQgbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICAvLyBBc3NlcnQoY3VyX21hdGNoIDwgcy0+c3Ryc3RhcnQsIFwibm8gZnV0dXJlXCIpO1xuICAgIG1hdGNoID0gY3VyX21hdGNoO1xuXG4gICAgLyogU2tpcCB0byBuZXh0IG1hdGNoIGlmIHRoZSBtYXRjaCBsZW5ndGggY2Fubm90IGluY3JlYXNlXG4gICAgICogb3IgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBsZXNzIHRoYW4gMi4gIE5vdGUgdGhhdCB0aGUgY2hlY2tzIGJlbG93XG4gICAgICogZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBvY2N1ciBvY2Nhc2lvbmFsbHkgZm9yIHBlcmZvcm1hbmNlXG4gICAgICogcmVhc29ucy4gIFRoZXJlZm9yZSB1bmluaXRpYWxpemVkIG1lbW9yeSB3aWxsIGJlIGFjY2Vzc2VkLCBhbmRcbiAgICAgKiBjb25kaXRpb25hbCBqdW1wcyB3aWxsIGJlIG1hZGUgdGhhdCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzLlxuICAgICAqIEhvd2V2ZXIgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2ggaXMgbGltaXRlZCB0byB0aGUgbG9va2FoZWFkLCBzb1xuICAgICAqIHRoZSBvdXRwdXQgb2YgZGVmbGF0ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHVuaW5pdGlhbGl6ZWQgdmFsdWVzLlxuICAgICAqL1xuXG4gICAgaWYgKF93aW5bbWF0Y2ggKyBiZXN0X2xlbl0gICAgICE9PSBzY2FuX2VuZCAgfHxcbiAgICAgICAgX3dpblttYXRjaCArIGJlc3RfbGVuIC0gMV0gIT09IHNjYW5fZW5kMSB8fFxuICAgICAgICBfd2luW21hdGNoXSAgICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuXSB8fFxuICAgICAgICBfd2luWysrbWF0Y2hdICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuICsgMV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlXG4gICAgICogYWdhaW4gbGF0ZXIuIChUaGlzIGhldXJpc3RpYyBpcyBub3QgYWx3YXlzIGEgd2luLilcbiAgICAgKiBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXBhcmUgc2NhblsyXSBhbmQgbWF0Y2hbMl0gc2luY2UgdGhleVxuICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hlbiB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXRcbiAgICAgKiB0aGUgaGFzaCBrZXlzIGFyZSBlcXVhbCBhbmQgdGhhdCBIQVNIX0JJVFMgPj0gOC5cbiAgICAgKi9cbiAgICBzY2FuICs9IDI7XG4gICAgbWF0Y2grKztcbiAgICAvLyBBc3NlcnQoKnNjYW4gPT0gKm1hdGNoLCBcIm1hdGNoWzJdP1wiKTtcblxuICAgIC8qIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247XG4gICAgICogdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguXG4gICAgICovXG4gICAgZG8ge1xuICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgfSB3aGlsZSAoX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuXG4gICAgLy8gQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1bnNpZ25lZCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuXG4gICAgbGVuID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgIHNjYW4gPSBzdHJlbmQgLSBNQVhfTUFUQ0g7XG5cbiAgICBpZiAobGVuID4gYmVzdF9sZW4pIHtcbiAgICAgIHMubWF0Y2hfc3RhcnQgPSBjdXJfbWF0Y2g7XG4gICAgICBiZXN0X2xlbiA9IGxlbjtcbiAgICAgIGlmIChsZW4gPj0gbmljZV9tYXRjaCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNjYW5fZW5kMSAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdO1xuICAgICAgc2Nhbl9lbmQgICA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTtcbiAgICB9XG4gIH0gd2hpbGUgKChjdXJfbWF0Y2ggPSBwcmV2W2N1cl9tYXRjaCAmIHdtYXNrXSkgPiBsaW1pdCAmJiAtLWNoYWluX2xlbmd0aCAhPT0gMCk7XG5cbiAgaWYgKGJlc3RfbGVuIDw9IHMubG9va2FoZWFkKSB7XG4gICAgcmV0dXJuIGJlc3RfbGVuO1xuICB9XG4gIHJldHVybiBzLmxvb2thaGVhZDtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGaWxsIHRoZSB3aW5kb3cgd2hlbiB0aGUgbG9va2FoZWFkIGJlY29tZXMgaW5zdWZmaWNpZW50LlxuICogVXBkYXRlcyBzdHJzdGFydCBhbmQgbG9va2FoZWFkLlxuICpcbiAqIElOIGFzc2VydGlvbjogbG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRFxuICogT1VUIGFzc2VydGlvbnM6IHN0cnN0YXJ0IDw9IHdpbmRvd19zaXplLU1JTl9MT09LQUhFQURcbiAqICAgIEF0IGxlYXN0IG9uZSBieXRlIGhhcyBiZWVuIHJlYWQsIG9yIGF2YWlsX2luID09IDA7IHJlYWRzIGFyZVxuICogICAgcGVyZm9ybWVkIGZvciBhdCBsZWFzdCB0d28gYnl0ZXMgKHJlcXVpcmVkIGZvciB0aGUgemlwIHRyYW5zbGF0ZV9lb2xcbiAqICAgIG9wdGlvbiAtLSBub3Qgc3VwcG9ydGVkIGhlcmUpLlxuICovXG5jb25zdCBmaWxsX3dpbmRvdyA9IChzKSA9PiB7XG5cbiAgY29uc3QgX3dfc2l6ZSA9IHMud19zaXplO1xuICBsZXQgbiwgbW9yZSwgc3RyO1xuXG4gIC8vQXNzZXJ0KHMtPmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQsIFwiYWxyZWFkeSBlbm91Z2ggbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICBtb3JlID0gcy53aW5kb3dfc2l6ZSAtIHMubG9va2FoZWFkIC0gcy5zdHJzdGFydDtcblxuICAgIC8vIEpTIGludHMgaGF2ZSAzMiBiaXQsIGJsb2NrIGJlbG93IG5vdCBuZWVkZWRcbiAgICAvKiBEZWFsIHdpdGggIUAjJCUgNjRLIGxpbWl0OiAqL1xuICAgIC8vaWYgKHNpemVvZihpbnQpIDw9IDIpIHtcbiAgICAvLyAgICBpZiAobW9yZSA9PSAwICYmIHMtPnN0cnN0YXJ0ID09IDAgJiYgcy0+bG9va2FoZWFkID09IDApIHtcbiAgICAvLyAgICAgICAgbW9yZSA9IHdzaXplO1xuICAgIC8vXG4gICAgLy8gIH0gZWxzZSBpZiAobW9yZSA9PSAodW5zaWduZWQpKC0xKSkge1xuICAgIC8vICAgICAgICAvKiBWZXJ5IHVubGlrZWx5LCBidXQgcG9zc2libGUgb24gMTYgYml0IG1hY2hpbmUgaWZcbiAgICAvLyAgICAgICAgICogc3Ryc3RhcnQgPT0gMCAmJiBsb29rYWhlYWQgPT0gMSAoaW5wdXQgZG9uZSBhIGJ5dGUgYXQgdGltZSlcbiAgICAvLyAgICAgICAgICovXG4gICAgLy8gICAgICAgIG1vcmUtLTtcbiAgICAvLyAgICB9XG4gICAgLy99XG5cblxuICAgIC8qIElmIHRoZSB3aW5kb3cgaXMgYWxtb3N0IGZ1bGwgYW5kIHRoZXJlIGlzIGluc3VmZmljaWVudCBsb29rYWhlYWQsXG4gICAgICogbW92ZSB0aGUgdXBwZXIgaGFsZiB0byB0aGUgbG93ZXIgb25lIHRvIG1ha2Ugcm9vbSBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCA+PSBfd19zaXplICsgKF93X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuXG4gICAgICBzLndpbmRvdy5zZXQocy53aW5kb3cuc3ViYXJyYXkoX3dfc2l6ZSwgX3dfc2l6ZSArIF93X3NpemUgLSBtb3JlKSwgMCk7XG4gICAgICBzLm1hdGNoX3N0YXJ0IC09IF93X3NpemU7XG4gICAgICBzLnN0cnN0YXJ0IC09IF93X3NpemU7XG4gICAgICAvKiB3ZSBub3cgaGF2ZSBzdHJzdGFydCA+PSBNQVhfRElTVCAqL1xuICAgICAgcy5ibG9ja19zdGFydCAtPSBfd19zaXplO1xuICAgICAgaWYgKHMuaW5zZXJ0ID4gcy5zdHJzdGFydCkge1xuICAgICAgICBzLmluc2VydCA9IHMuc3Ryc3RhcnQ7XG4gICAgICB9XG4gICAgICBzbGlkZV9oYXNoKHMpO1xuICAgICAgbW9yZSArPSBfd19zaXplO1xuICAgIH1cbiAgICBpZiAocy5zdHJtLmF2YWlsX2luID09PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBJZiB0aGVyZSB3YXMgbm8gc2xpZGluZzpcbiAgICAgKiAgICBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJlxuICAgICAqICAgIG1vcmUgPT0gd2luZG93X3NpemUgLSBsb29rYWhlYWQgLSBzdHJzdGFydFxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAoTUlOX0xPT0tBSEVBRC0xICsgV1NJWkUgKyBNQVhfRElTVC0xKVxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMlxuICAgICAqIEluIHRoZSBCSUdfTUVNIG9yIE1NQVAgY2FzZSAobm90IHlldCBzdXBwb3J0ZWQpLFxuICAgICAqICAgd2luZG93X3NpemUgPT0gaW5wdXRfc2l6ZSArIE1JTl9MT09LQUhFQUQgICYmXG4gICAgICogICBzdHJzdGFydCArIHMtPmxvb2thaGVhZCA8PSBpbnB1dF9zaXplID0+IG1vcmUgPj0gTUlOX0xPT0tBSEVBRC5cbiAgICAgKiBPdGhlcndpc2UsIHdpbmRvd19zaXplID09IDIqV1NJWkUgc28gbW9yZSA+PSAyLlxuICAgICAqIElmIHRoZXJlIHdhcyBzbGlkaW5nLCBtb3JlID49IFdTSVpFLiBTbyBpbiBhbGwgY2FzZXMsIG1vcmUgPj0gMi5cbiAgICAgKi9cbiAgICAvL0Fzc2VydChtb3JlID49IDIsIFwibW9yZSA8IDJcIik7XG4gICAgbiA9IHJlYWRfYnVmKHMuc3RybSwgcy53aW5kb3csIHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCwgbW9yZSk7XG4gICAgcy5sb29rYWhlYWQgKz0gbjtcblxuICAgIC8qIEluaXRpYWxpemUgdGhlIGhhc2ggdmFsdWUgbm93IHRoYXQgd2UgaGF2ZSBzb21lIGlucHV0OiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCkge1xuICAgICAgc3RyID0gcy5zdHJzdGFydCAtIHMuaW5zZXJ0O1xuICAgICAgcy5pbnNfaCA9IHMud2luZG93W3N0cl07XG5cbiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbc3RyICsgMV0pO1xuLy8jaWYgTUlOX01BVENIICE9IDNcbi8vICAgICAgICBDYWxsIHVwZGF0ZV9oYXNoKCkgTUlOX01BVENILTMgbW9yZSB0aW1lc1xuLy8jZW5kaWZcbiAgICAgIHdoaWxlIChzLmluc2VydCkge1xuICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSk7ICovXG4gICAgICAgIHMuaW5zX2ggPSBIQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKTtcblxuICAgICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7XG4gICAgICAgIHN0cisrO1xuICAgICAgICBzLmluc2VydC0tO1xuICAgICAgICBpZiAocy5sb29rYWhlYWQgKyBzLmluc2VydCA8IE1JTl9NQVRDSCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qIElmIHRoZSB3aG9sZSBpbnB1dCBoYXMgbGVzcyB0aGFuIE1JTl9NQVRDSCBieXRlcywgaW5zX2ggaXMgZ2FyYmFnZSxcbiAgICAgKiBidXQgdGhpcyBpcyBub3QgaW1wb3J0YW50IHNpbmNlIG9ubHkgbGl0ZXJhbCBieXRlcyB3aWxsIGJlIGVtaXR0ZWQuXG4gICAgICovXG5cbiAgfSB3aGlsZSAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIHMuc3RybS5hdmFpbF9pbiAhPT0gMCk7XG5cbiAgLyogSWYgdGhlIFdJTl9JTklUIGJ5dGVzIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgZGF0YSBoYXZlIG5ldmVyIGJlZW5cbiAgICogd3JpdHRlbiwgdGhlbiB6ZXJvIHRob3NlIGJ5dGVzIGluIG9yZGVyIHRvIGF2b2lkIG1lbW9yeSBjaGVjayByZXBvcnRzIG9mXG4gICAqIHRoZSB1c2Ugb2YgdW5pbml0aWFsaXplZCAob3IgdW5pbml0aWFsaXNlZCBhcyBKdWxpYW4gd3JpdGVzKSBieXRlcyBieVxuICAgKiB0aGUgbG9uZ2VzdCBtYXRjaCByb3V0aW5lcy4gIFVwZGF0ZSB0aGUgaGlnaCB3YXRlciBtYXJrIGZvciB0aGUgbmV4dFxuICAgKiB0aW1lIHRocm91Z2ggaGVyZS4gIFdJTl9JTklUIGlzIHNldCB0byBNQVhfTUFUQ0ggc2luY2UgdGhlIGxvbmdlc3QgbWF0Y2hcbiAgICogcm91dGluZXMgYWxsb3cgc2Nhbm5pbmcgdG8gc3Ryc3RhcnQgKyBNQVhfTUFUQ0gsIGlnbm9yaW5nIGxvb2thaGVhZC5cbiAgICovXG4vLyAgaWYgKHMuaGlnaF93YXRlciA8IHMud2luZG93X3NpemUpIHtcbi8vICAgIGNvbnN0IGN1cnIgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQ7XG4vLyAgICBsZXQgaW5pdCA9IDA7XG4vL1xuLy8gICAgaWYgKHMuaGlnaF93YXRlciA8IGN1cnIpIHtcbi8vICAgICAgLyogUHJldmlvdXMgaGlnaCB3YXRlciBtYXJrIGJlbG93IGN1cnJlbnQgZGF0YSAtLSB6ZXJvIFdJTl9JTklUXG4vLyAgICAgICAqIGJ5dGVzIG9yIHVwIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9IHMud2luZG93X3NpemUgLSBjdXJyO1xuLy8gICAgICBpZiAoaW5pdCA+IFdJTl9JTklUKVxuLy8gICAgICAgIGluaXQgPSBXSU5fSU5JVDtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgY3VyciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyID0gY3VyciArIGluaXQ7XG4vLyAgICB9XG4vLyAgICBlbHNlIGlmIChzLT5oaWdoX3dhdGVyIDwgKHVsZyljdXJyICsgV0lOX0lOSVQpIHtcbi8vICAgICAgLyogSGlnaCB3YXRlciBtYXJrIGF0IG9yIGFib3ZlIGN1cnJlbnQgZGF0YSwgYnV0IGJlbG93IGN1cnJlbnQgZGF0YVxuLy8gICAgICAgKiBwbHVzIFdJTl9JTklUIC0tIHplcm8gb3V0IHRvIGN1cnJlbnQgZGF0YSBwbHVzIFdJTl9JTklULCBvciB1cFxuLy8gICAgICAgKiB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy5cbi8vICAgICAgICovXG4vLyAgICAgIGluaXQgPSAodWxnKWN1cnIgKyBXSU5fSU5JVCAtIHMtPmhpZ2hfd2F0ZXI7XG4vLyAgICAgIGlmIChpbml0ID4gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyKVxuLy8gICAgICAgIGluaXQgPSBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXI7XG4vLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIHMtPmhpZ2hfd2F0ZXIsICh1bnNpZ25lZClpbml0KTtcbi8vICAgICAgcy0+aGlnaF93YXRlciArPSBpbml0O1xuLy8gICAgfVxuLy8gIH1cbi8vXG4vLyAgQXNzZXJ0KCh1bGcpcy0+c3Ryc3RhcnQgPD0gcy0+d2luZG93X3NpemUgLSBNSU5fTE9PS0FIRUFELFxuLy8gICAgXCJub3QgZW5vdWdoIHJvb20gZm9yIHNlYXJjaFwiKTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSB3aXRob3V0IGNvbXByZXNzaW9uIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm5cbiAqIHRoZSBjdXJyZW50IGJsb2NrIHN0YXRlLlxuICpcbiAqIEluIGNhc2UgZGVmbGF0ZVBhcmFtcygpIGlzIHVzZWQgdG8gbGF0ZXIgc3dpdGNoIHRvIGEgbm9uLXplcm8gY29tcHJlc3Npb25cbiAqIGxldmVsLCBzLT5tYXRjaGVzIChvdGhlcndpc2UgdW51c2VkIHdoZW4gc3RvcmluZykga2VlcHMgdHJhY2sgb2YgdGhlIG51bWJlclxuICogb2YgaGFzaCB0YWJsZSBzbGlkZXMgdG8gcGVyZm9ybS4gSWYgcy0+bWF0Y2hlcyBpcyAxLCB0aGVuIG9uZSBoYXNoIHRhYmxlXG4gKiBzbGlkZSB3aWxsIGJlIGRvbmUgd2hlbiBzd2l0Y2hpbmcuIElmIHMtPm1hdGNoZXMgaXMgMiwgdGhlIG1heGltdW0gdmFsdWVcbiAqIGFsbG93ZWQgaGVyZSwgdGhlbiB0aGUgaGFzaCB0YWJsZSB3aWxsIGJlIGNsZWFyZWQsIHNpbmNlIHR3byBvciBtb3JlIHNsaWRlc1xuICogaXMgdGhlIHNhbWUgYXMgYSBjbGVhci5cbiAqXG4gKiBkZWZsYXRlX3N0b3JlZCgpIGlzIHdyaXR0ZW4gdG8gbWluaW1pemUgdGhlIG51bWJlciBvZiB0aW1lcyBhbiBpbnB1dCBieXRlIGlzXG4gKiBjb3BpZWQuIEl0IGlzIG1vc3QgZWZmaWNpZW50IHdpdGggbGFyZ2UgaW5wdXQgYW5kIG91dHB1dCBidWZmZXJzLCB3aGljaFxuICogbWF4aW1pemVzIHRoZSBvcHBvcnR1bml0ZXMgdG8gaGF2ZSBhIHNpbmdsZSBjb3B5IGZyb20gbmV4dF9pbiB0byBuZXh0X291dC5cbiAqL1xuY29uc3QgZGVmbGF0ZV9zdG9yZWQgPSAocywgZmx1c2gpID0+IHtcblxuICAvKiBTbWFsbGVzdCB3b3J0aHkgYmxvY2sgc2l6ZSB3aGVuIG5vdCBmbHVzaGluZyBvciBmaW5pc2hpbmcuIEJ5IGRlZmF1bHRcbiAgICogdGhpcyBpcyAzMksuIFRoaXMgY2FuIGJlIGFzIHNtYWxsIGFzIDUwNyBieXRlcyBmb3IgbWVtTGV2ZWwgPT0gMS4gRm9yXG4gICAqIGxhcmdlIGlucHV0IGFuZCBvdXRwdXQgYnVmZmVycywgdGhlIHN0b3JlZCBibG9jayBzaXplIHdpbGwgYmUgbGFyZ2VyLlxuICAgKi9cbiAgbGV0IG1pbl9ibG9jayA9IHMucGVuZGluZ19idWZfc2l6ZSAtIDUgPiBzLndfc2l6ZSA/IHMud19zaXplIDogcy5wZW5kaW5nX2J1Zl9zaXplIC0gNTtcblxuICAvKiBDb3B5IGFzIG1hbnkgbWluX2Jsb2NrIG9yIGxhcmdlciBzdG9yZWQgYmxvY2tzIGRpcmVjdGx5IHRvIG5leHRfb3V0IGFzXG4gICAqIHBvc3NpYmxlLiBJZiBmbHVzaGluZywgY29weSB0aGUgcmVtYWluaW5nIGF2YWlsYWJsZSBpbnB1dCB0byBuZXh0X291dCBhc1xuICAgKiBzdG9yZWQgYmxvY2tzLCBpZiB0aGVyZSBpcyBlbm91Z2ggc3BhY2UuXG4gICAqL1xuICBsZXQgbGVuLCBsZWZ0LCBoYXZlLCBsYXN0ID0gMDtcbiAgbGV0IHVzZWQgPSBzLnN0cm0uYXZhaWxfaW47XG4gIGRvIHtcbiAgICAvKiBTZXQgbGVuIHRvIHRoZSBtYXhpbXVtIHNpemUgYmxvY2sgdGhhdCB3ZSBjYW4gY29weSBkaXJlY3RseSB3aXRoIHRoZVxuICAgICAqIGF2YWlsYWJsZSBpbnB1dCBkYXRhIGFuZCBvdXRwdXQgc3BhY2UuIFNldCBsZWZ0IHRvIGhvdyBtdWNoIG9mIHRoYXRcbiAgICAgKiB3b3VsZCBiZSBjb3BpZWQgZnJvbSB3aGF0J3MgbGVmdCBpbiB0aGUgd2luZG93LlxuICAgICAqL1xuICAgIGxlbiA9IDY1NTM1LyogTUFYX1NUT1JFRCAqLzsgICAgIC8qIG1heGltdW0gZGVmbGF0ZSBzdG9yZWQgYmxvY2sgbGVuZ3RoICovXG4gICAgaGF2ZSA9IChzLmJpX3ZhbGlkICsgNDIpID4+IDM7ICAgICAvKiBudW1iZXIgb2YgaGVhZGVyIGJ5dGVzICovXG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPCBoYXZlKSB7ICAgICAgICAgLyogbmVlZCByb29tIGZvciBoZWFkZXIgKi9cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAgIC8qIG1heGltdW0gc3RvcmVkIGJsb2NrIGxlbmd0aCB0aGF0IHdpbGwgZml0IGluIGF2YWlsX291dDogKi9cbiAgICBoYXZlID0gcy5zdHJtLmF2YWlsX291dCAtIGhhdmU7XG4gICAgbGVmdCA9IHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0OyAgLyogYnl0ZXMgbGVmdCBpbiB3aW5kb3cgKi9cbiAgICBpZiAobGVuID4gbGVmdCArIHMuc3RybS5hdmFpbF9pbikge1xuICAgICAgbGVuID0gbGVmdCArIHMuc3RybS5hdmFpbF9pbjsgICAvKiBsaW1pdCBsZW4gdG8gdGhlIGlucHV0ICovXG4gICAgfVxuICAgIGlmIChsZW4gPiBoYXZlKSB7XG4gICAgICBsZW4gPSBoYXZlOyAgICAgICAgICAgICAvKiBsaW1pdCBsZW4gdG8gdGhlIG91dHB1dCAqL1xuICAgIH1cblxuICAgIC8qIElmIHRoZSBzdG9yZWQgYmxvY2sgd291bGQgYmUgbGVzcyB0aGFuIG1pbl9ibG9jayBpbiBsZW5ndGgsIG9yIGlmXG4gICAgICogdW5hYmxlIHRvIGNvcHkgYWxsIG9mIHRoZSBhdmFpbGFibGUgaW5wdXQgd2hlbiBmbHVzaGluZywgdGhlbiB0cnlcbiAgICAgKiBjb3B5aW5nIHRvIHRoZSB3aW5kb3cgYW5kIHRoZSBwZW5kaW5nIGJ1ZmZlciBpbnN0ZWFkLiBBbHNvIGRvbid0XG4gICAgICogd3JpdGUgYW4gZW1wdHkgYmxvY2sgd2hlbiBmbHVzaGluZyAtLSBkZWZsYXRlKCkgZG9lcyB0aGF0LlxuICAgICAqL1xuICAgIGlmIChsZW4gPCBtaW5fYmxvY2sgJiYgKChsZW4gPT09IDAgJiYgZmx1c2ggIT09IFpfRklOSVNIJDMpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBmbHVzaCA9PT0gWl9OT19GTFVTSCQyIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW4gIT09IGxlZnQgKyBzLnN0cm0uYXZhaWxfaW4pKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBNYWtlIGEgZHVtbXkgc3RvcmVkIGJsb2NrIGluIHBlbmRpbmcgdG8gZ2V0IHRoZSBoZWFkZXIgYnl0ZXMsXG4gICAgICogaW5jbHVkaW5nIGFueSBwZW5kaW5nIGJpdHMuIFRoaXMgYWxzbyB1cGRhdGVzIHRoZSBkZWJ1Z2dpbmcgY291bnRzLlxuICAgICAqL1xuICAgIGxhc3QgPSBmbHVzaCA9PT0gWl9GSU5JU0gkMyAmJiBsZW4gPT09IGxlZnQgKyBzLnN0cm0uYXZhaWxfaW4gPyAxIDogMDtcbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIDAsIDAsIGxhc3QpO1xuXG4gICAgLyogUmVwbGFjZSB0aGUgbGVuZ3RocyBpbiB0aGUgZHVtbXkgc3RvcmVkIGJsb2NrIHdpdGggbGVuLiAqL1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nIC0gNF0gPSBsZW47XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcgLSAzXSA9IGxlbiA+PiA4O1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nIC0gMl0gPSB+bGVuO1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nIC0gMV0gPSB+bGVuID4+IDg7XG5cbiAgICAvKiBXcml0ZSB0aGUgc3RvcmVkIGJsb2NrIGhlYWRlciBieXRlcy4gKi9cbiAgICBmbHVzaF9wZW5kaW5nKHMuc3RybSk7XG5cbi8vI2lmZGVmIFpMSUJfREVCVUdcbi8vICAgIC8qIFVwZGF0ZSBkZWJ1Z2dpbmcgY291bnRzIGZvciB0aGUgZGF0YSBhYm91dCB0byBiZSBjb3BpZWQuICovXG4vLyAgICBzLT5jb21wcmVzc2VkX2xlbiArPSBsZW4gPDwgMztcbi8vICAgIHMtPmJpdHNfc2VudCArPSBsZW4gPDwgMztcbi8vI2VuZGlmXG5cbiAgICAvKiBDb3B5IHVuY29tcHJlc3NlZCBieXRlcyBmcm9tIHRoZSB3aW5kb3cgdG8gbmV4dF9vdXQuICovXG4gICAgaWYgKGxlZnQpIHtcbiAgICAgIGlmIChsZWZ0ID4gbGVuKSB7XG4gICAgICAgIGxlZnQgPSBsZW47XG4gICAgICB9XG4gICAgICAvL3ptZW1jcHkocy0+c3RybS0+bmV4dF9vdXQsIHMtPndpbmRvdyArIHMtPmJsb2NrX3N0YXJ0LCBsZWZ0KTtcbiAgICAgIHMuc3RybS5vdXRwdXQuc2V0KHMud2luZG93LnN1YmFycmF5KHMuYmxvY2tfc3RhcnQsIHMuYmxvY2tfc3RhcnQgKyBsZWZ0KSwgcy5zdHJtLm5leHRfb3V0KTtcbiAgICAgIHMuc3RybS5uZXh0X291dCArPSBsZWZ0O1xuICAgICAgcy5zdHJtLmF2YWlsX291dCAtPSBsZWZ0O1xuICAgICAgcy5zdHJtLnRvdGFsX291dCArPSBsZWZ0O1xuICAgICAgcy5ibG9ja19zdGFydCArPSBsZWZ0O1xuICAgICAgbGVuIC09IGxlZnQ7XG4gICAgfVxuXG4gICAgLyogQ29weSB1bmNvbXByZXNzZWQgYnl0ZXMgZGlyZWN0bHkgZnJvbSBuZXh0X2luIHRvIG5leHRfb3V0LCB1cGRhdGluZ1xuICAgICAqIHRoZSBjaGVjayB2YWx1ZS5cbiAgICAgKi9cbiAgICBpZiAobGVuKSB7XG4gICAgICByZWFkX2J1ZihzLnN0cm0sIHMuc3RybS5vdXRwdXQsIHMuc3RybS5uZXh0X291dCwgbGVuKTtcbiAgICAgIHMuc3RybS5uZXh0X291dCArPSBsZW47XG4gICAgICBzLnN0cm0uYXZhaWxfb3V0IC09IGxlbjtcbiAgICAgIHMuc3RybS50b3RhbF9vdXQgKz0gbGVuO1xuICAgIH1cbiAgfSB3aGlsZSAobGFzdCA9PT0gMCk7XG5cbiAgLyogVXBkYXRlIHRoZSBzbGlkaW5nIHdpbmRvdyB3aXRoIHRoZSBsYXN0IHMtPndfc2l6ZSBieXRlcyBvZiB0aGUgY29waWVkXG4gICAqIGRhdGEsIG9yIGFwcGVuZCBhbGwgb2YgdGhlIGNvcGllZCBkYXRhIHRvIHRoZSBleGlzdGluZyB3aW5kb3cgaWYgbGVzc1xuICAgKiB0aGFuIHMtPndfc2l6ZSBieXRlcyB3ZXJlIGNvcGllZC4gQWxzbyB1cGRhdGUgdGhlIG51bWJlciBvZiBieXRlcyB0b1xuICAgKiBpbnNlcnQgaW4gdGhlIGhhc2ggdGFibGVzLCBpbiB0aGUgZXZlbnQgdGhhdCBkZWZsYXRlUGFyYW1zKCkgc3dpdGNoZXMgdG9cbiAgICogYSBub24temVybyBjb21wcmVzc2lvbiBsZXZlbC5cbiAgICovXG4gIHVzZWQgLT0gcy5zdHJtLmF2YWlsX2luOyAgICAvKiBudW1iZXIgb2YgaW5wdXQgYnl0ZXMgZGlyZWN0bHkgY29waWVkICovXG4gIGlmICh1c2VkKSB7XG4gICAgLyogSWYgYW55IGlucHV0IHdhcyB1c2VkLCB0aGVuIG5vIHVudXNlZCBpbnB1dCByZW1haW5zIGluIHRoZSB3aW5kb3csXG4gICAgICogdGhlcmVmb3JlIHMtPmJsb2NrX3N0YXJ0ID09IHMtPnN0cnN0YXJ0LlxuICAgICAqL1xuICAgIGlmICh1c2VkID49IHMud19zaXplKSB7ICAvKiBzdXBwbGFudCB0aGUgcHJldmlvdXMgaGlzdG9yeSAqL1xuICAgICAgcy5tYXRjaGVzID0gMjsgICAgIC8qIGNsZWFyIGhhc2ggKi9cbiAgICAgIC8vem1lbWNweShzLT53aW5kb3csIHMtPnN0cm0tPm5leHRfaW4gLSBzLT53X3NpemUsIHMtPndfc2l6ZSk7XG4gICAgICBzLndpbmRvdy5zZXQocy5zdHJtLmlucHV0LnN1YmFycmF5KHMuc3RybS5uZXh0X2luIC0gcy53X3NpemUsIHMuc3RybS5uZXh0X2luKSwgMCk7XG4gICAgICBzLnN0cnN0YXJ0ID0gcy53X3NpemU7XG4gICAgICBzLmluc2VydCA9IHMuc3Ryc3RhcnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKHMud2luZG93X3NpemUgLSBzLnN0cnN0YXJ0IDw9IHVzZWQpIHtcbiAgICAgICAgLyogU2xpZGUgdGhlIHdpbmRvdyBkb3duLiAqL1xuICAgICAgICBzLnN0cnN0YXJ0IC09IHMud19zaXplO1xuICAgICAgICAvL3ptZW1jcHkocy0+d2luZG93LCBzLT53aW5kb3cgKyBzLT53X3NpemUsIHMtPnN0cnN0YXJ0KTtcbiAgICAgICAgcy53aW5kb3cuc2V0KHMud2luZG93LnN1YmFycmF5KHMud19zaXplLCBzLndfc2l6ZSArIHMuc3Ryc3RhcnQpLCAwKTtcbiAgICAgICAgaWYgKHMubWF0Y2hlcyA8IDIpIHtcbiAgICAgICAgICBzLm1hdGNoZXMrKzsgICAvKiBhZGQgYSBwZW5kaW5nIHNsaWRlX2hhc2goKSAqL1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmluc2VydCA+IHMuc3Ryc3RhcnQpIHtcbiAgICAgICAgICBzLmluc2VydCA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vem1lbWNweShzLT53aW5kb3cgKyBzLT5zdHJzdGFydCwgcy0+c3RybS0+bmV4dF9pbiAtIHVzZWQsIHVzZWQpO1xuICAgICAgcy53aW5kb3cuc2V0KHMuc3RybS5pbnB1dC5zdWJhcnJheShzLnN0cm0ubmV4dF9pbiAtIHVzZWQsIHMuc3RybS5uZXh0X2luKSwgcy5zdHJzdGFydCk7XG4gICAgICBzLnN0cnN0YXJ0ICs9IHVzZWQ7XG4gICAgICBzLmluc2VydCArPSB1c2VkID4gcy53X3NpemUgLSBzLmluc2VydCA/IHMud19zaXplIC0gcy5pbnNlcnQgOiB1c2VkO1xuICAgIH1cbiAgICBzLmJsb2NrX3N0YXJ0ID0gcy5zdHJzdGFydDtcbiAgfVxuICBpZiAocy5oaWdoX3dhdGVyIDwgcy5zdHJzdGFydCkge1xuICAgIHMuaGlnaF93YXRlciA9IHMuc3Ryc3RhcnQ7XG4gIH1cblxuICAvKiBJZiB0aGUgbGFzdCBibG9jayB3YXMgd3JpdHRlbiB0byBuZXh0X291dCwgdGhlbiBkb25lLiAqL1xuICBpZiAobGFzdCkge1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuXG4gIC8qIElmIGZsdXNoaW5nIGFuZCBhbGwgaW5wdXQgaGFzIGJlZW4gY29uc3VtZWQsIHRoZW4gZG9uZS4gKi9cbiAgaWYgKGZsdXNoICE9PSBaX05PX0ZMVVNIJDIgJiYgZmx1c2ggIT09IFpfRklOSVNIJDMgJiZcbiAgICBzLnN0cm0uYXZhaWxfaW4gPT09IDAgJiYgcy5zdHJzdGFydCA9PT0gcy5ibG9ja19zdGFydCkge1xuICAgIHJldHVybiBCU19CTE9DS19ET05FO1xuICB9XG5cbiAgLyogRmlsbCB0aGUgd2luZG93IHdpdGggYW55IHJlbWFpbmluZyBpbnB1dC4gKi9cbiAgaGF2ZSA9IHMud2luZG93X3NpemUgLSBzLnN0cnN0YXJ0O1xuICBpZiAocy5zdHJtLmF2YWlsX2luID4gaGF2ZSAmJiBzLmJsb2NrX3N0YXJ0ID49IHMud19zaXplKSB7XG4gICAgLyogU2xpZGUgdGhlIHdpbmRvdyBkb3duLiAqL1xuICAgIHMuYmxvY2tfc3RhcnQgLT0gcy53X3NpemU7XG4gICAgcy5zdHJzdGFydCAtPSBzLndfc2l6ZTtcbiAgICAvL3ptZW1jcHkocy0+d2luZG93LCBzLT53aW5kb3cgKyBzLT53X3NpemUsIHMtPnN0cnN0YXJ0KTtcbiAgICBzLndpbmRvdy5zZXQocy53aW5kb3cuc3ViYXJyYXkocy53X3NpemUsIHMud19zaXplICsgcy5zdHJzdGFydCksIDApO1xuICAgIGlmIChzLm1hdGNoZXMgPCAyKSB7XG4gICAgICBzLm1hdGNoZXMrKzsgICAgICAgLyogYWRkIGEgcGVuZGluZyBzbGlkZV9oYXNoKCkgKi9cbiAgICB9XG4gICAgaGF2ZSArPSBzLndfc2l6ZTsgICAgICAvKiBtb3JlIHNwYWNlIG5vdyAqL1xuICAgIGlmIChzLmluc2VydCA+IHMuc3Ryc3RhcnQpIHtcbiAgICAgIHMuaW5zZXJ0ID0gcy5zdHJzdGFydDtcbiAgICB9XG4gIH1cbiAgaWYgKGhhdmUgPiBzLnN0cm0uYXZhaWxfaW4pIHtcbiAgICBoYXZlID0gcy5zdHJtLmF2YWlsX2luO1xuICB9XG4gIGlmIChoYXZlKSB7XG4gICAgcmVhZF9idWYocy5zdHJtLCBzLndpbmRvdywgcy5zdHJzdGFydCwgaGF2ZSk7XG4gICAgcy5zdHJzdGFydCArPSBoYXZlO1xuICAgIHMuaW5zZXJ0ICs9IGhhdmUgPiBzLndfc2l6ZSAtIHMuaW5zZXJ0ID8gcy53X3NpemUgLSBzLmluc2VydCA6IGhhdmU7XG4gIH1cbiAgaWYgKHMuaGlnaF93YXRlciA8IHMuc3Ryc3RhcnQpIHtcbiAgICBzLmhpZ2hfd2F0ZXIgPSBzLnN0cnN0YXJ0O1xuICB9XG5cbiAgLyogVGhlcmUgd2FzIG5vdCBlbm91Z2ggYXZhaWxfb3V0IHRvIHdyaXRlIGEgY29tcGxldGUgd29ydGh5IG9yIGZsdXNoZWRcbiAgICogc3RvcmVkIGJsb2NrIHRvIG5leHRfb3V0LiBXcml0ZSBhIHN0b3JlZCBibG9jayB0byBwZW5kaW5nIGluc3RlYWQsIGlmIHdlXG4gICAqIGhhdmUgZW5vdWdoIGlucHV0IGZvciBhIHdvcnRoeSBibG9jaywgb3IgaWYgZmx1c2hpbmcgYW5kIHRoZXJlIGlzIGVub3VnaFxuICAgKiByb29tIGZvciB0aGUgcmVtYWluaW5nIGlucHV0IGFzIGEgc3RvcmVkIGJsb2NrIGluIHRoZSBwZW5kaW5nIGJ1ZmZlci5cbiAgICovXG4gIGhhdmUgPSAocy5iaV92YWxpZCArIDQyKSA+PiAzOyAgICAgLyogbnVtYmVyIG9mIGhlYWRlciBieXRlcyAqL1xuICAgIC8qIG1heGltdW0gc3RvcmVkIGJsb2NrIGxlbmd0aCB0aGF0IHdpbGwgZml0IGluIHBlbmRpbmc6ICovXG4gIGhhdmUgPSBzLnBlbmRpbmdfYnVmX3NpemUgLSBoYXZlID4gNjU1MzUvKiBNQVhfU1RPUkVEICovID8gNjU1MzUvKiBNQVhfU1RPUkVEICovIDogcy5wZW5kaW5nX2J1Zl9zaXplIC0gaGF2ZTtcbiAgbWluX2Jsb2NrID0gaGF2ZSA+IHMud19zaXplID8gcy53X3NpemUgOiBoYXZlO1xuICBsZWZ0ID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7XG4gIGlmIChsZWZ0ID49IG1pbl9ibG9jayB8fFxuICAgICAoKGxlZnQgfHwgZmx1c2ggPT09IFpfRklOSVNIJDMpICYmIGZsdXNoICE9PSBaX05PX0ZMVVNIJDIgJiZcbiAgICAgcy5zdHJtLmF2YWlsX2luID09PSAwICYmIGxlZnQgPD0gaGF2ZSkpIHtcbiAgICBsZW4gPSBsZWZ0ID4gaGF2ZSA/IGhhdmUgOiBsZWZ0O1xuICAgIGxhc3QgPSBmbHVzaCA9PT0gWl9GSU5JU0gkMyAmJiBzLnN0cm0uYXZhaWxfaW4gPT09IDAgJiZcbiAgICAgICAgIGxlbiA9PT0gbGVmdCA/IDEgOiAwO1xuICAgIF90cl9zdG9yZWRfYmxvY2socywgcy5ibG9ja19zdGFydCwgbGVuLCBsYXN0KTtcbiAgICBzLmJsb2NrX3N0YXJ0ICs9IGxlbjtcbiAgICBmbHVzaF9wZW5kaW5nKHMuc3RybSk7XG4gIH1cblxuICAvKiBXZSd2ZSBkb25lIGFsbCB3ZSBjYW4gd2l0aCB0aGUgYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQuICovXG4gIHJldHVybiBsYXN0ID8gQlNfRklOSVNIX1NUQVJURUQgOiBCU19ORUVEX01PUkU7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHJlc3MgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVybiB0aGUgY3VycmVudFxuICogYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHBlcmZvcm0gbGF6eSBldmFsdWF0aW9uIG9mIG1hdGNoZXMgYW5kIGluc2VydHNcbiAqIG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IG9ubHkgZm9yIHVubWF0Y2hlZCBzdHJpbmdzIG9yIGZvciBzaG9ydFxuICogbWF0Y2hlcy4gSXQgaXMgdXNlZCBvbmx5IGZvciB0aGUgZmFzdCBjb21wcmVzc2lvbiBvcHRpb25zLlxuICovXG5jb25zdCBkZWZsYXRlX2Zhc3QgPSAocywgZmx1c2gpID0+IHtcblxuICBsZXQgaGFzaF9oZWFkOyAgICAgICAgLyogaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiAqL1xuICBsZXQgYmZsdXNoOyAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gkMikge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGJyZWFrOyAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEluc2VydCB0aGUgc3RyaW5nIHdpbmRvd1tzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcbiAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjpcbiAgICAgKi9cbiAgICBoYXNoX2hlYWQgPSAwLypOSUwqLztcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKTtcbiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgIC8qKiovXG4gICAgfVxuXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cbiAgICAgKiBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYWx3YXlzIG1hdGNoX2xlbmd0aCA8IE1JTl9NQVRDSFxuICAgICAqL1xuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmICgocy5zdHJzdGFydCAtIGhhc2hfaGVhZCkgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpKSB7XG4gICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG4gICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xuICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi9cbiAgICB9XG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuICAgICAgLy8gY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGgpOyAvLyBmb3IgZGVidWcgb25seVxuXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IF90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcblxuICAgICAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aFxuICAgICAgICogaXMgbm90IHRvbyBsYXJnZS4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2gvKm1heF9pbnNlcnRfbGVuZ3RoKi8gJiYgcy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoLS07IC8qIHN0cmluZyBhdCBzdHJzdGFydCBhbHJlYWR5IGluIHRhYmxlICovXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgICAvKiBzdHJzdGFydCBuZXZlciBleGNlZWRzIFdTSVpFLU1BWF9NQVRDSCwgc28gdGhlcmUgYXJlXG4gICAgICAgICAgICogYWx3YXlzIE1JTl9NQVRDSCBieXRlcyBhaGVhZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgfSB3aGlsZSAoLS1zLm1hdGNoX2xlbmd0aCAhPT0gMCk7XG4gICAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIH0gZWxzZVxuICAgICAge1xuICAgICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzLnN0cnN0YXJ0XTtcbiAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCsxXSk7ICovXG4gICAgICAgIHMuaW5zX2ggPSBIQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3Muc3Ryc3RhcnQgKyAxXSk7XG5cbi8vI2lmIE1JTl9NQVRDSCAhPSAzXG4vLyAgICAgICAgICAgICAgICBDYWxsIFVQREFURV9IQVNIKCkgTUlOX01BVENILTMgbW9yZSB0aW1lc1xuLy8jZW5kaWZcbiAgICAgICAgLyogSWYgbG9va2FoZWFkIDwgTUlOX01BVENILCBpbnNfaCBpcyBnYXJiYWdlLCBidXQgaXQgZG9lcyBub3RcbiAgICAgICAgICogbWF0dGVyIHNpbmNlIGl0IHdpbGwgYmUgcmVjb21wdXRlZCBhdCBuZXh0IGRlZmxhdGUgY2FsbC5cbiAgICAgICAgICovXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy53aW5kb3dbcy5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcblxuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAoKHMuc3Ryc3RhcnQgPCAoTUlOX01BVENIIC0gMSkpID8gcy5zdHJzdGFydCA6IE1JTl9NQVRDSCAtIDEpO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIJDMpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5zeW1fbmV4dCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2FtZSBhcyBhYm92ZSwgYnV0IGFjaGlldmVzIGJldHRlciBjb21wcmVzc2lvbi4gV2UgdXNlIGEgbGF6eVxuICogZXZhbHVhdGlvbiBmb3IgbWF0Y2hlczogYSBtYXRjaCBpcyBmaW5hbGx5IGFkb3B0ZWQgb25seSBpZiB0aGVyZSBpc1xuICogbm8gYmV0dGVyIG1hdGNoIGF0IHRoZSBuZXh0IHdpbmRvdyBwb3NpdGlvbi5cbiAqL1xuY29uc3QgZGVmbGF0ZV9zbG93ID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGhhc2hfaGVhZDsgICAgICAgICAgLyogaGVhZCBvZiBoYXNoIGNoYWluICovXG4gIGxldCBiZmx1c2g7ICAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICBsZXQgbWF4X2luc2VydDtcblxuICAvKiBQcm9jZXNzIHRoZSBpbnB1dCBibG9jay4gKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gkMikge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqL1xuICAgIHMucHJldl9sZW5ndGggPSBzLm1hdGNoX2xlbmd0aDtcbiAgICBzLnByZXZfbWF0Y2ggPSBzLm1hdGNoX3N0YXJ0O1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcblxuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmIHMucHJldl9sZW5ndGggPCBzLm1heF9sYXp5X21hdGNoICYmXG4gICAgICAgIHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkvKk1BWF9ESVNUKHMpKi8pIHtcbiAgICAgIC8qIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG4gICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xuXG4gICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gNSAmJlxuICAgICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfRklMVEVSRUQgfHwgKHMubWF0Y2hfbGVuZ3RoID09PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQgPiA0MDk2LypUT09fRkFSKi8pKSkge1xuXG4gICAgICAgIC8qIElmIHByZXZfbWF0Y2ggaXMgYWxzbyBNSU5fTUFUQ0gsIG1hdGNoX3N0YXJ0IGlzIGdhcmJhZ2VcbiAgICAgICAgICogYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS5cbiAgICAgICAgICovXG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50XG4gICAgICogbWF0Y2ggaXMgbm90IGJldHRlciwgb3V0cHV0IHRoZSBwcmV2aW91cyBtYXRjaDpcbiAgICAgKi9cbiAgICBpZiAocy5wcmV2X2xlbmd0aCA+PSBNSU5fTUFUQ0ggJiYgcy5tYXRjaF9sZW5ndGggPD0gcy5wcmV2X2xlbmd0aCkge1xuICAgICAgbWF4X2luc2VydCA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCAtIE1JTl9NQVRDSDtcbiAgICAgIC8qIERvIG5vdCBpbnNlcnQgc3RyaW5ncyBpbiBoYXNoIHRhYmxlIGJleW9uZCB0aGlzLiAqL1xuXG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQtMSwgcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoKTtcblxuICAgICAgLyoqKl90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSAxIC0gcy5wcmV2X21hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuICAgICAgLyogSW5zZXJ0IGluIGhhc2ggdGFibGUgYWxsIHN0cmluZ3MgdXAgdG8gdGhlIGVuZCBvZiB0aGUgbWF0Y2guXG4gICAgICAgKiBzdHJzdGFydC0xIGFuZCBzdHJzdGFydCBhcmUgYWxyZWFkeSBpbnNlcnRlZC4gSWYgdGhlcmUgaXMgbm90XG4gICAgICAgKiBlbm91Z2ggbG9va2FoZWFkLCB0aGUgbGFzdCB0d28gc3RyaW5ncyBhcmUgbm90IGluc2VydGVkIGluXG4gICAgICAgKiB0aGUgaGFzaCB0YWJsZS5cbiAgICAgICAqL1xuICAgICAgcy5sb29rYWhlYWQgLT0gcy5wcmV2X2xlbmd0aCAtIDE7XG4gICAgICBzLnByZXZfbGVuZ3RoIC09IDI7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgrK3Muc3Ryc3RhcnQgPD0gbWF4X2luc2VydCkge1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKTtcbiAgICAgICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgICAgIC8qKiovXG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKC0tcy5wcmV2X2xlbmd0aCAhPT0gMCk7XG4gICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgICBzLnN0cnN0YXJ0Kys7XG5cbiAgICAgIGlmIChiZmx1c2gpIHtcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIC8qKiovXG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgICAvKiBJZiB0aGVyZSB3YXMgbm8gbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHBvc2l0aW9uLCBvdXRwdXQgYVxuICAgICAgICogc2luZ2xlIGxpdGVyYWwuIElmIHRoZXJlIHdhcyBhIG1hdGNoIGJ1dCB0aGUgY3VycmVudCBtYXRjaFxuICAgICAgICogaXMgbG9uZ2VyLCB0cnVuY2F0ZSB0aGUgcHJldmlvdXMgbWF0Y2ggdG8gYSBzaW5nbGUgbGl0ZXJhbC5cbiAgICAgICAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTtcblxuICAgICAgaWYgKGJmbHVzaCkge1xuICAgICAgICAvKioqIEZMVVNIX0JMT0NLX09OTFkocywgMCkgKioqL1xuICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgICAgLyoqKi9cbiAgICAgIH1cbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBUaGVyZSBpcyBubyBwcmV2aW91cyBtYXRjaCB0byBjb21wYXJlIHdpdGgsIHdhaXQgZm9yXG4gICAgICAgKiB0aGUgbmV4dCBzdGVwIHRvIGRlY2lkZS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAxO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGZsdXNoICE9IFpfTk9fRkxVU0gsIFwibm8gZmx1c2g/XCIpO1xuICBpZiAocy5tYXRjaF9hdmFpbGFibGUpIHtcbiAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydC0xXSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXG4gICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnQgLSAxXSk7XG5cbiAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIH1cbiAgcy5pbnNlcnQgPSBzLnN0cnN0YXJ0IDwgTUlOX01BVENIIC0gMSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0ggLSAxO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIJDMpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5zeW1fbmV4dCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuXG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZvciBaX1JMRSwgc2ltcGx5IGxvb2sgZm9yIHJ1bnMgb2YgYnl0ZXMsIGdlbmVyYXRlIG1hdGNoZXMgb25seSBvZiBkaXN0YW5jZVxuICogb25lLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS4gIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mXG4gKiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBaX1JMRS4pXG4gKi9cbmNvbnN0IGRlZmxhdGVfcmxlID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGJmbHVzaDsgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cbiAgbGV0IHByZXY7ICAgICAgICAgICAgICAvKiBieXRlIGF0IGRpc3RhbmNlIG9uZSB0byBtYXRjaCAqL1xuICBsZXQgc2Nhbiwgc3RyZW5kOyAgICAgIC8qIHNjYW4gZ29lcyB1cCB0byBzdHJlbmQgZm9yIGxlbmd0aCBvZiBydW4gKi9cblxuICBjb25zdCBfd2luID0gcy53aW5kb3c7XG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBsb25nZXN0IHJ1biwgcGx1cyBvbmUgZm9yIHRoZSB1bnJvbGxlZCBsb29wLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSBNQVhfTUFUQ0gpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCQyKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsgYnJlYWs7IH0gLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG5cbiAgICAvKiBTZWUgaG93IG1hbnkgdGltZXMgdGhlIHByZXZpb3VzIGJ5dGUgcmVwZWF0cyAqL1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgPiAwKSB7XG4gICAgICBzY2FuID0gcy5zdHJzdGFydCAtIDE7XG4gICAgICBwcmV2ID0gX3dpbltzY2FuXTtcbiAgICAgIGlmIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSkge1xuICAgICAgICBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgICAgIH0gd2hpbGUgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPiBzLmxvb2thaGVhZCkge1xuICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gcy5sb29rYWhlYWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1SW50KShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG4gICAgfVxuXG4gICAgLyogRW1pdCBtYXRjaCBpZiBoYXZlIHJ1biBvZiBNSU5fTUFUQ0ggb3IgbG9uZ2VyLCBlbHNlIGVtaXQgbGl0ZXJhbCAqL1xuICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5zdHJzdGFydCAtIDEsIHMubWF0Y2hfbGVuZ3RoKTtcblxuICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcblxuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIJDMpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5zeW1fbmV4dCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRm9yIFpfSFVGRk1BTl9PTkxZLCBkbyBub3QgbG9vayBmb3IgbWF0Y2hlcy4gIERvIG5vdCBtYWludGFpbiBhIGhhc2ggdGFibGUuXG4gKiAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBIdWZmbWFuLilcbiAqL1xuY29uc3QgZGVmbGF0ZV9odWZmID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGJmbHVzaDsgICAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgYSBsaXRlcmFsIHRvIHdyaXRlLiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX05PX0ZMVVNIJDIpIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IF90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG4gICAgcy5sb29rYWhlYWQtLTtcbiAgICBzLnN0cnN0YXJ0Kys7XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIJDMpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5zeW1fbmV4dCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvblxuICogdGhlIGRlc2lyZWQgcGFjayBsZXZlbCAoMC4uOSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gYmVsb3cgaGF2ZSBiZWVuIHR1bmVkIHRvXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcbiAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuXG4gIHRoaXMuZ29vZF9sZW5ndGggPSBnb29kX2xlbmd0aDtcbiAgdGhpcy5tYXhfbGF6eSA9IG1heF9sYXp5O1xuICB0aGlzLm5pY2VfbGVuZ3RoID0gbmljZV9sZW5ndGg7XG4gIHRoaXMubWF4X2NoYWluID0gbWF4X2NoYWluO1xuICB0aGlzLmZ1bmMgPSBmdW5jO1xufVxuXG5jb25zdCBjb25maWd1cmF0aW9uX3RhYmxlID0gW1xuICAvKiAgICAgIGdvb2QgbGF6eSBuaWNlIGNoYWluICovXG4gIG5ldyBDb25maWcoMCwgMCwgMCwgMCwgZGVmbGF0ZV9zdG9yZWQpLCAgICAgICAgICAvKiAwIHN0b3JlIG9ubHkgKi9cbiAgbmV3IENvbmZpZyg0LCA0LCA4LCA0LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgIC8qIDEgbWF4IHNwZWVkLCBubyBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgIC8qIDIgKi9cbiAgbmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIGRlZmxhdGVfZmFzdCksICAgICAgICAgIC8qIDMgKi9cblxuICBuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAgLyogNCBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMzIsIDMyLCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgIC8qIDUgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDYgKi9cbiAgbmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDcgKi9cbiAgbmV3IENvbmZpZygzMiwgMTI4LCAyNTgsIDEwMjQsIGRlZmxhdGVfc2xvdyksICAgIC8qIDggKi9cbiAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgICAgIC8qIDkgbWF4IGNvbXByZXNzaW9uICovXG5dO1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgXCJsb25nZXN0IG1hdGNoXCIgcm91dGluZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtXG4gKi9cbmNvbnN0IGxtX2luaXQgPSAocykgPT4ge1xuXG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XG5cbiAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAvKiBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOlxuICAgKi9cbiAgcy5tYXhfbGF6eV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2xhenk7XG4gIHMuZ29vZF9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZ29vZF9sZW5ndGg7XG4gIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XG4gIHMubWF4X2NoYWluX2xlbmd0aCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2NoYWluO1xuXG4gIHMuc3Ryc3RhcnQgPSAwO1xuICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLmluc2VydCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgcy5pbnNfaCA9IDA7XG59O1xuXG5cbmZ1bmN0aW9uIERlZmxhdGVTdGF0ZSgpIHtcbiAgdGhpcy5zdHJtID0gbnVsbDsgICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuICB0aGlzLnN0YXR1cyA9IDA7ICAgICAgICAgICAgLyogYXMgdGhlIG5hbWUgaW1wbGllcyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmID0gbnVsbDsgICAgICAvKiBvdXRwdXQgc3RpbGwgcGVuZGluZyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwOyAgLyogc2l6ZSBvZiBwZW5kaW5nX2J1ZiAqL1xuICB0aGlzLnBlbmRpbmdfb3V0ID0gMDsgICAgICAgLyogbmV4dCBwZW5kaW5nIGJ5dGUgdG8gb3V0cHV0IHRvIHRoZSBzdHJlYW0gKi9cbiAgdGhpcy5wZW5kaW5nID0gMDsgICAgICAgICAgIC8qIG5iIG9mIGJ5dGVzIGluIHRoZSBwZW5kaW5nIGJ1ZmZlciAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmd6aGVhZCA9IG51bGw7ICAgICAgICAgLyogZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gdG8gd3JpdGUgKi9cbiAgdGhpcy5nemluZGV4ID0gMDsgICAgICAgICAgIC8qIHdoZXJlIGluIGV4dHJhLCBuYW1lLCBvciBjb21tZW50ICovXG4gIHRoaXMubWV0aG9kID0gWl9ERUZMQVRFRCQyOyAvKiBjYW4gb25seSBiZSBERUZMQVRFRCAqL1xuICB0aGlzLmxhc3RfZmx1c2ggPSAtMTsgICAvKiB2YWx1ZSBvZiBmbHVzaCBwYXJhbSBmb3IgcHJldmlvdXMgZGVmbGF0ZSBjYWxsICovXG5cbiAgdGhpcy53X3NpemUgPSAwOyAgLyogTFo3NyB3aW5kb3cgc2l6ZSAoMzJLIGJ5IGRlZmF1bHQpICovXG4gIHRoaXMud19iaXRzID0gMDsgIC8qIGxvZzIod19zaXplKSAgKDguLjE2KSAqL1xuICB0aGlzLndfbWFzayA9IDA7ICAvKiB3X3NpemUgLSAxICovXG5cbiAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAvKiBTbGlkaW5nIHdpbmRvdy4gSW5wdXQgYnl0ZXMgYXJlIHJlYWQgaW50byB0aGUgc2Vjb25kIGhhbGYgb2YgdGhlIHdpbmRvdyxcbiAgICogYW5kIG1vdmUgdG8gdGhlIGZpcnN0IGhhbGYgbGF0ZXIgdG8ga2VlcCBhIGRpY3Rpb25hcnkgb2YgYXQgbGVhc3Qgd1NpemVcbiAgICogYnl0ZXMuIFdpdGggdGhpcyBvcmdhbml6YXRpb24sIG1hdGNoZXMgYXJlIGxpbWl0ZWQgdG8gYSBkaXN0YW5jZSBvZlxuICAgKiB3U2l6ZS1NQVhfTUFUQ0ggYnl0ZXMsIGJ1dCB0aGlzIGVuc3VyZXMgdGhhdCBJTyBpcyBhbHdheXNcbiAgICogcGVyZm9ybWVkIHdpdGggYSBsZW5ndGggbXVsdGlwbGUgb2YgdGhlIGJsb2NrIHNpemUuXG4gICAqL1xuXG4gIHRoaXMud2luZG93X3NpemUgPSAwO1xuICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlclxuICAgKiBpcyBkaXJlY3RseSB1c2VkIGFzIHNsaWRpbmcgd2luZG93LlxuICAgKi9cblxuICB0aGlzLnByZXYgPSBudWxsO1xuICAvKiBMaW5rIHRvIG9sZGVyIHN0cmluZyB3aXRoIHNhbWUgaGFzaCBpbmRleC4gVG8gbGltaXQgdGhlIHNpemUgb2YgdGhpc1xuICAgKiBhcnJheSB0byA2NEssIHRoaXMgbGluayBpcyBtYWludGFpbmVkIG9ubHkgZm9yIHRoZSBsYXN0IDMySyBzdHJpbmdzLlxuICAgKiBBbiBpbmRleCBpbiB0aGlzIGFycmF5IGlzIHRodXMgYSB3aW5kb3cgaW5kZXggbW9kdWxvIDMySy5cbiAgICovXG5cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAvKiBIZWFkcyBvZiB0aGUgaGFzaCBjaGFpbnMgb3IgTklMLiAqL1xuXG4gIHRoaXMuaW5zX2ggPSAwOyAgICAgICAvKiBoYXNoIGluZGV4IG9mIHN0cmluZyB0byBiZSBpbnNlcnRlZCAqL1xuICB0aGlzLmhhc2hfc2l6ZSA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIGhhc2ggdGFibGUgKi9cbiAgdGhpcy5oYXNoX2JpdHMgPSAwOyAgIC8qIGxvZzIoaGFzaF9zaXplKSAqL1xuICB0aGlzLmhhc2hfbWFzayA9IDA7ICAgLyogaGFzaF9zaXplLTEgKi9cblxuICB0aGlzLmhhc2hfc2hpZnQgPSAwO1xuICAvKiBOdW1iZXIgb2YgYml0cyBieSB3aGljaCBpbnNfaCBtdXN0IGJlIHNoaWZ0ZWQgYXQgZWFjaCBpbnB1dFxuICAgKiBzdGVwLiBJdCBtdXN0IGJlIHN1Y2ggdGhhdCBhZnRlciBNSU5fTUFUQ0ggc3RlcHMsIHRoZSBvbGRlc3RcbiAgICogYnl0ZSBubyBsb25nZXIgdGFrZXMgcGFydCBpbiB0aGUgaGFzaCBrZXksIHRoYXQgaXM6XG4gICAqICAgaGFzaF9zaGlmdCAqIE1JTl9NQVRDSCA+PSBoYXNoX2JpdHNcbiAgICovXG5cbiAgdGhpcy5ibG9ja19zdGFydCA9IDA7XG4gIC8qIFdpbmRvdyBwb3NpdGlvbiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjdXJyZW50IG91dHB1dCBibG9jay4gR2V0c1xuICAgKiBuZWdhdGl2ZSB3aGVuIHRoZSB3aW5kb3cgaXMgbW92ZWQgYmFja3dhcmRzLlxuICAgKi9cblxuICB0aGlzLm1hdGNoX2xlbmd0aCA9IDA7ICAgICAgLyogbGVuZ3RoIG9mIGJlc3QgbWF0Y2ggKi9cbiAgdGhpcy5wcmV2X21hdGNoID0gMDsgICAgICAgIC8qIHByZXZpb3VzIG1hdGNoICovXG4gIHRoaXMubWF0Y2hfYXZhaWxhYmxlID0gMDsgICAvKiBzZXQgaWYgcHJldmlvdXMgbWF0Y2ggZXhpc3RzICovXG4gIHRoaXMuc3Ryc3RhcnQgPSAwOyAgICAgICAgICAvKiBzdGFydCBvZiBzdHJpbmcgdG8gaW5zZXJ0ICovXG4gIHRoaXMubWF0Y2hfc3RhcnQgPSAwOyAgICAgICAvKiBzdGFydCBvZiBtYXRjaGluZyBzdHJpbmcgKi9cbiAgdGhpcy5sb29rYWhlYWQgPSAwOyAgICAgICAgIC8qIG51bWJlciBvZiB2YWxpZCBieXRlcyBhaGVhZCBpbiB3aW5kb3cgKi9cblxuICB0aGlzLnByZXZfbGVuZ3RoID0gMDtcbiAgLyogTGVuZ3RoIG9mIHRoZSBiZXN0IG1hdGNoIGF0IHByZXZpb3VzIHN0ZXAuIE1hdGNoZXMgbm90IGdyZWF0ZXIgdGhhbiB0aGlzXG4gICAqIGFyZSBkaXNjYXJkZWQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgbGF6eSBtYXRjaCBldmFsdWF0aW9uLlxuICAgKi9cblxuICB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwO1xuICAvKiBUbyBzcGVlZCB1cCBkZWZsYXRpb24sIGhhc2ggY2hhaW5zIGFyZSBuZXZlciBzZWFyY2hlZCBiZXlvbmQgdGhpc1xuICAgKiBsZW5ndGguICBBIGhpZ2hlciBsaW1pdCBpbXByb3ZlcyBjb21wcmVzc2lvbiByYXRpbyBidXQgZGVncmFkZXMgdGhlXG4gICAqIHNwZWVkLlxuICAgKi9cblxuICB0aGlzLm1heF9sYXp5X21hdGNoID0gMDtcbiAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseVxuICAgKiBzbWFsbGVyIHRoYW4gdGhpcyB2YWx1ZS4gVGhpcyBtZWNoYW5pc20gaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvblxuICAgKiBsZXZlbHMgPj0gNC5cbiAgICovXG4gIC8vIFRoYXQncyBhbGlhcyB0byBtYXhfbGF6eV9tYXRjaCwgZG9uJ3QgdXNlIGRpcmVjdGx5XG4gIC8vdGhpcy5tYXhfaW5zZXJ0X2xlbmd0aCA9IDA7XG4gIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbm90XG4gICAqIGdyZWF0ZXIgdGhhbiB0aGlzIGxlbmd0aC4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICogbWF4X2luc2VydF9sZW5ndGggaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvbiBsZXZlbHMgPD0gMy5cbiAgICovXG5cbiAgdGhpcy5sZXZlbCA9IDA7ICAgICAvKiBjb21wcmVzc2lvbiBsZXZlbCAoMS4uOSkgKi9cbiAgdGhpcy5zdHJhdGVneSA9IDA7ICAvKiBmYXZvciBvciBmb3JjZSBIdWZmbWFuIGNvZGluZyovXG5cbiAgdGhpcy5nb29kX21hdGNoID0gMDtcbiAgLyogVXNlIGEgZmFzdGVyIHNlYXJjaCB3aGVuIHRoZSBwcmV2aW91cyBtYXRjaCBpcyBsb25nZXIgdGhhbiB0aGlzICovXG5cbiAgdGhpcy5uaWNlX21hdGNoID0gMDsgLyogU3RvcCBzZWFyY2hpbmcgd2hlbiBjdXJyZW50IG1hdGNoIGV4Y2VlZHMgdGhpcyAqL1xuXG4gICAgICAgICAgICAgIC8qIHVzZWQgYnkgdHJlZXMuYzogKi9cblxuICAvKiBEaWRuJ3QgdXNlIGN0X2RhdGEgdHlwZWRlZiBiZWxvdyB0byBzdXBwcmVzcyBjb21waWxlciB3YXJuaW5nICovXG5cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fbHRyZWVbSEVBUF9TSVpFXTsgICAvKiBsaXRlcmFsIGFuZCBsZW5ndGggdHJlZSAqL1xuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9kdHJlZVsyKkRfQ09ERVMrMV07IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBibF90cmVlWzIqQkxfQ09ERVMrMV07ICAvKiBIdWZmbWFuIHRyZWUgZm9yIGJpdCBsZW5ndGhzICovXG5cbiAgLy8gVXNlIGZsYXQgYXJyYXkgb2YgRE9VQkxFIHNpemUsIHdpdGggaW50ZXJsZWF2ZWQgZmF0YSxcbiAgLy8gYmVjYXVzZSBKUyBkb2VzIG5vdCBzdXBwb3J0IGVmZmVjdGl2ZVxuICB0aGlzLmR5bl9sdHJlZSAgPSBuZXcgVWludDE2QXJyYXkoSEVBUF9TSVpFICogMik7XG4gIHRoaXMuZHluX2R0cmVlICA9IG5ldyBVaW50MTZBcnJheSgoMiAqIERfQ09ERVMgKyAxKSAqIDIpO1xuICB0aGlzLmJsX3RyZWUgICAgPSBuZXcgVWludDE2QXJyYXkoKDIgKiBCTF9DT0RFUyArIDEpICogMik7XG4gIHplcm8odGhpcy5keW5fbHRyZWUpO1xuICB6ZXJvKHRoaXMuZHluX2R0cmVlKTtcbiAgemVybyh0aGlzLmJsX3RyZWUpO1xuXG4gIHRoaXMubF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi9cbiAgdGhpcy5kX2Rlc2MgICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGRpc3RhbmNlIHRyZWUgKi9cbiAgdGhpcy5ibF9kZXNjICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGJpdCBsZW5ndGggdHJlZSAqL1xuXG4gIC8vdXNoIGJsX2NvdW50W01BWF9CSVRTKzFdO1xuICB0aGlzLmJsX2NvdW50ID0gbmV3IFVpbnQxNkFycmF5KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vaW50IGhlYXBbMipMX0NPREVTKzFdOyAgICAgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB0aGlzLmhlYXAgPSBuZXcgVWludDE2QXJyYXkoMiAqIExfQ09ERVMgKyAxKTsgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB6ZXJvKHRoaXMuaGVhcCk7XG5cbiAgdGhpcy5oZWFwX2xlbiA9IDA7ICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwICovXG4gIHRoaXMuaGVhcF9tYXggPSAwOyAgICAgICAgICAgICAgIC8qIGVsZW1lbnQgb2YgbGFyZ2VzdCBmcmVxdWVuY3kgKi9cbiAgLyogVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS4gaGVhcFswXSBpcyBub3QgdXNlZC5cbiAgICogVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbCB0cmVlcy5cbiAgICovXG5cbiAgdGhpcy5kZXB0aCA9IG5ldyBVaW50MTZBcnJheSgyICogTF9DT0RFUyArIDEpOyAvL3VjaCBkZXB0aFsyKkxfQ09ERVMrMV07XG4gIHplcm8odGhpcy5kZXB0aCk7XG4gIC8qIERlcHRoIG9mIGVhY2ggc3VidHJlZSB1c2VkIGFzIHRpZSBicmVha2VyIGZvciB0cmVlcyBvZiBlcXVhbCBmcmVxdWVuY3lcbiAgICovXG5cbiAgdGhpcy5zeW1fYnVmID0gMDsgICAgICAgIC8qIGJ1ZmZlciBmb3IgZGlzdGFuY2VzIGFuZCBsaXRlcmFscy9sZW5ndGhzICovXG5cbiAgdGhpcy5saXRfYnVmc2l6ZSA9IDA7XG4gIC8qIFNpemUgb2YgbWF0Y2ggYnVmZmVyIGZvciBsaXRlcmFscy9sZW5ndGhzLiAgVGhlcmUgYXJlIDQgcmVhc29ucyBmb3JcbiAgICogbGltaXRpbmcgbGl0X2J1ZnNpemUgdG8gNjRLOlxuICAgKiAgIC0gZnJlcXVlbmNpZXMgY2FuIGJlIGtlcHQgaW4gMTYgYml0IGNvdW50ZXJzXG4gICAqICAgLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgdGhlIGZpcnN0IGJsb2NrLCBhbGwgaW5wdXRcbiAgICogICAgIGRhdGEgaXMgc3RpbGwgaW4gdGhlIHdpbmRvdyBzbyB3ZSBjYW4gc3RpbGwgZW1pdCBhIHN0b3JlZCBibG9jayBldmVuXG4gICAqICAgICB3aGVuIGlucHV0IGNvbWVzIGZyb20gc3RhbmRhcmQgaW5wdXQuICAoVGhpcyBjYW4gYWxzbyBiZSBkb25lIGZvclxuICAgKiAgICAgYWxsIGJsb2NrcyBpZiBsaXRfYnVmc2l6ZSBpcyBub3QgZ3JlYXRlciB0aGFuIDMySy4pXG4gICAqICAgLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgYSBmaWxlIHNtYWxsZXIgdGhhbiA2NEssIHdlIGNhblxuICAgKiAgICAgZXZlbiBlbWl0IGEgc3RvcmVkIGZpbGUgaW5zdGVhZCBvZiBhIHN0b3JlZCBibG9jayAoc2F2aW5nIDUgYnl0ZXMpLlxuICAgKiAgICAgVGhpcyBpcyBhcHBsaWNhYmxlIG9ubHkgZm9yIHppcCAobm90IGd6aXAgb3IgemxpYikuXG4gICAqICAgLSBjcmVhdGluZyBuZXcgSHVmZm1hbiB0cmVlcyBsZXNzIGZyZXF1ZW50bHkgbWF5IG5vdCBwcm92aWRlIGZhc3RcbiAgICogICAgIGFkYXB0YXRpb24gdG8gY2hhbmdlcyBpbiB0aGUgaW5wdXQgZGF0YSBzdGF0aXN0aWNzLiAoVGFrZSBmb3JcbiAgICogICAgIGV4YW1wbGUgYSBiaW5hcnkgZmlsZSB3aXRoIHBvb3JseSBjb21wcmVzc2libGUgY29kZSBmb2xsb3dlZCBieVxuICAgKiAgICAgYSBoaWdobHkgY29tcHJlc3NpYmxlIHN0cmluZyB0YWJsZS4pIFNtYWxsZXIgYnVmZmVyIHNpemVzIGdpdmVcbiAgICogICAgIGZhc3QgYWRhcHRhdGlvbiBidXQgaGF2ZSBvZiBjb3Vyc2UgdGhlIG92ZXJoZWFkIG9mIHRyYW5zbWl0dGluZ1xuICAgKiAgICAgdHJlZXMgbW9yZSBmcmVxdWVudGx5LlxuICAgKiAgIC0gSSBjYW4ndCBjb3VudCBhYm92ZSA0XG4gICAqL1xuXG4gIHRoaXMuc3ltX25leHQgPSAwOyAgICAgIC8qIHJ1bm5pbmcgaW5kZXggaW4gc3ltX2J1ZiAqL1xuICB0aGlzLnN5bV9lbmQgPSAwOyAgICAgICAvKiBzeW1ib2wgdGFibGUgZnVsbCB3aGVuIHN5bV9uZXh0IHJlYWNoZXMgdGhpcyAqL1xuXG4gIHRoaXMub3B0X2xlbiA9IDA7ICAgICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIG9wdGltYWwgdHJlZXMgKi9cbiAgdGhpcy5zdGF0aWNfbGVuID0gMDsgICAgLyogYml0IGxlbmd0aCBvZiBjdXJyZW50IGJsb2NrIHdpdGggc3RhdGljIHRyZWVzICovXG4gIHRoaXMubWF0Y2hlcyA9IDA7ICAgICAgIC8qIG51bWJlciBvZiBzdHJpbmcgbWF0Y2hlcyBpbiBjdXJyZW50IGJsb2NrICovXG4gIHRoaXMuaW5zZXJ0ID0gMDsgICAgICAgIC8qIGJ5dGVzIGF0IGVuZCBvZiB3aW5kb3cgbGVmdCB0byBpbnNlcnQgKi9cblxuXG4gIHRoaXMuYmlfYnVmID0gMDtcbiAgLyogT3V0cHV0IGJ1ZmZlci4gYml0cyBhcmUgaW5zZXJ0ZWQgc3RhcnRpbmcgYXQgdGhlIGJvdHRvbSAobGVhc3RcbiAgICogc2lnbmlmaWNhbnQgYml0cykuXG4gICAqL1xuICB0aGlzLmJpX3ZhbGlkID0gMDtcbiAgLyogTnVtYmVyIG9mIHZhbGlkIGJpdHMgaW4gYmlfYnVmLiAgQWxsIGJpdHMgYWJvdmUgdGhlIGxhc3QgdmFsaWQgYml0XG4gICAqIGFyZSBhbHdheXMgemVyby5cbiAgICovXG5cbiAgLy8gVXNlZCBmb3Igd2luZG93IG1lbW9yeSBpbml0LiBXZSBzYWZlbHkgaWdub3JlIGl0IGZvciBKUy4gVGhhdCBtYWtlc1xuICAvLyBzZW5zZSBvbmx5IGZvciBwb2ludGVycyBhbmQgbWVtb3J5IGNoZWNrIHRvb2xzLlxuICAvL3RoaXMuaGlnaF93YXRlciA9IDA7XG4gIC8qIEhpZ2ggd2F0ZXIgbWFyayBvZmZzZXQgaW4gd2luZG93IGZvciBpbml0aWFsaXplZCBieXRlcyAtLSBieXRlcyBhYm92ZVxuICAgKiB0aGlzIGFyZSBzZXQgdG8gemVybyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgd2FybmluZ3Mgd2hlblxuICAgKiBsb25nZXN0IG1hdGNoIHJvdXRpbmVzIGFjY2VzcyBieXRlcyBwYXN0IHRoZSBpbnB1dC4gIFRoaXMgaXMgdGhlblxuICAgKiB1cGRhdGVkIHRvIHRoZSBuZXcgaGlnaCB3YXRlciBtYXJrLlxuICAgKi9cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDaGVjayBmb3IgYSB2YWxpZCBkZWZsYXRlIHN0cmVhbSBzdGF0ZS4gUmV0dXJuIDAgaWYgb2ssIDEgaWYgbm90LlxuICovXG5jb25zdCBkZWZsYXRlU3RhdGVDaGVjayA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKCFzdHJtKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgY29uc3QgcyA9IHN0cm0uc3RhdGU7XG4gIGlmICghcyB8fCBzLnN0cm0gIT09IHN0cm0gfHwgKHMuc3RhdHVzICE9PSBJTklUX1NUQVRFICYmXG4vLyNpZmRlZiBHWklQXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc3RhdHVzICE9PSBHWklQX1NUQVRFICYmXG4vLyNlbmRpZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnN0YXR1cyAhPT0gRVhUUkFfU1RBVEUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zdGF0dXMgIT09IE5BTUVfU1RBVEUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zdGF0dXMgIT09IENPTU1FTlRfU1RBVEUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zdGF0dXMgIT09IEhDUkNfU1RBVEUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zdGF0dXMgIT09IEJVU1lfU1RBVEUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zdGF0dXMgIT09IEZJTklTSF9TVEFURSkpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cblxuY29uc3QgZGVmbGF0ZVJlc2V0S2VlcCA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKGRlZmxhdGVTdGF0ZUNoZWNrKHN0cm0pKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUiQyKTtcbiAgfVxuXG4gIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IDA7XG4gIHN0cm0uZGF0YV90eXBlID0gWl9VTktOT1dOO1xuXG4gIGNvbnN0IHMgPSBzdHJtLnN0YXRlO1xuICBzLnBlbmRpbmcgPSAwO1xuICBzLnBlbmRpbmdfb3V0ID0gMDtcblxuICBpZiAocy53cmFwIDwgMCkge1xuICAgIHMud3JhcCA9IC1zLndyYXA7XG4gICAgLyogd2FzIG1hZGUgbmVnYXRpdmUgYnkgZGVmbGF0ZSguLi4sIFpfRklOSVNIKTsgKi9cbiAgfVxuICBzLnN0YXR1cyA9XG4vLyNpZmRlZiBHWklQXG4gICAgcy53cmFwID09PSAyID8gR1pJUF9TVEFURSA6XG4vLyNlbmRpZlxuICAgIHMud3JhcCA/IElOSVRfU1RBVEUgOiBCVVNZX1NUQVRFO1xuICBzdHJtLmFkbGVyID0gKHMud3JhcCA9PT0gMikgP1xuICAgIDAgIC8vIGNyYzMyKDAsIFpfTlVMTCwgMClcbiAgOlxuICAgIDE7IC8vIGFkbGVyMzIoMCwgWl9OVUxMLCAwKVxuICBzLmxhc3RfZmx1c2ggPSAtMjtcbiAgX3RyX2luaXQocyk7XG4gIHJldHVybiBaX09LJDM7XG59O1xuXG5cbmNvbnN0IGRlZmxhdGVSZXNldCA9IChzdHJtKSA9PiB7XG5cbiAgY29uc3QgcmV0ID0gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKTtcbiAgaWYgKHJldCA9PT0gWl9PSyQzKSB7XG4gICAgbG1faW5pdChzdHJtLnN0YXRlKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuXG5jb25zdCBkZWZsYXRlU2V0SGVhZGVyID0gKHN0cm0sIGhlYWQpID0+IHtcblxuICBpZiAoZGVmbGF0ZVN0YXRlQ2hlY2soc3RybSkgfHwgc3RybS5zdGF0ZS53cmFwICE9PSAyKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDI7XG4gIH1cbiAgc3RybS5zdGF0ZS5nemhlYWQgPSBoZWFkO1xuICByZXR1cm4gWl9PSyQzO1xufTtcblxuXG5jb25zdCBkZWZsYXRlSW5pdDIgPSAoc3RybSwgbGV2ZWwsIG1ldGhvZCwgd2luZG93Qml0cywgbWVtTGV2ZWwsIHN0cmF0ZWd5KSA9PiB7XG5cbiAgaWYgKCFzdHJtKSB7IC8vID09PSBaX05VTExcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMjtcbiAgfVxuICBsZXQgd3JhcCA9IDE7XG5cbiAgaWYgKGxldmVsID09PSBaX0RFRkFVTFRfQ09NUFJFU1NJT04kMSkge1xuICAgIGxldmVsID0gNjtcbiAgfVxuXG4gIGlmICh3aW5kb3dCaXRzIDwgMCkgeyAvKiBzdXBwcmVzcyB6bGliIHdyYXBwZXIgKi9cbiAgICB3cmFwID0gMDtcbiAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7XG4gIH1cblxuICBlbHNlIGlmICh3aW5kb3dCaXRzID4gMTUpIHtcbiAgICB3cmFwID0gMjsgICAgICAgICAgIC8qIHdyaXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkICovXG4gICAgd2luZG93Qml0cyAtPSAxNjtcbiAgfVxuXG5cbiAgaWYgKG1lbUxldmVsIDwgMSB8fCBtZW1MZXZlbCA+IE1BWF9NRU1fTEVWRUwgfHwgbWV0aG9kICE9PSBaX0RFRkxBVEVEJDIgfHxcbiAgICB3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUgfHwgbGV2ZWwgPCAwIHx8IGxldmVsID4gOSB8fFxuICAgIHN0cmF0ZWd5IDwgMCB8fCBzdHJhdGVneSA+IFpfRklYRUQgfHwgKHdpbmRvd0JpdHMgPT09IDggJiYgd3JhcCAhPT0gMSkpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SJDIpO1xuICB9XG5cblxuICBpZiAod2luZG93Qml0cyA9PT0gOCkge1xuICAgIHdpbmRvd0JpdHMgPSA5O1xuICB9XG4gIC8qIHVudGlsIDI1Ni1ieXRlIHdpbmRvdyBidWcgZml4ZWQgKi9cblxuICBjb25zdCBzID0gbmV3IERlZmxhdGVTdGF0ZSgpO1xuXG4gIHN0cm0uc3RhdGUgPSBzO1xuICBzLnN0cm0gPSBzdHJtO1xuICBzLnN0YXR1cyA9IElOSVRfU1RBVEU7ICAgICAvKiB0byBwYXNzIHN0YXRlIHRlc3QgaW4gZGVmbGF0ZVJlc2V0KCkgKi9cblxuICBzLndyYXAgPSB3cmFwO1xuICBzLmd6aGVhZCA9IG51bGw7XG4gIHMud19iaXRzID0gd2luZG93Qml0cztcbiAgcy53X3NpemUgPSAxIDw8IHMud19iaXRzO1xuICBzLndfbWFzayA9IHMud19zaXplIC0gMTtcblxuICBzLmhhc2hfYml0cyA9IG1lbUxldmVsICsgNztcbiAgcy5oYXNoX3NpemUgPSAxIDw8IHMuaGFzaF9iaXRzO1xuICBzLmhhc2hfbWFzayA9IHMuaGFzaF9zaXplIC0gMTtcbiAgcy5oYXNoX3NoaWZ0ID0gfn4oKHMuaGFzaF9iaXRzICsgTUlOX01BVENIIC0gMSkgLyBNSU5fTUFUQ0gpO1xuXG4gIHMud2luZG93ID0gbmV3IFVpbnQ4QXJyYXkocy53X3NpemUgKiAyKTtcbiAgcy5oZWFkID0gbmV3IFVpbnQxNkFycmF5KHMuaGFzaF9zaXplKTtcbiAgcy5wcmV2ID0gbmV3IFVpbnQxNkFycmF5KHMud19zaXplKTtcblxuICAvLyBEb24ndCBuZWVkIG1lbSBpbml0IG1hZ2ljIGZvciBKUy5cbiAgLy9zLmhpZ2hfd2F0ZXIgPSAwOyAgLyogbm90aGluZyB3cml0dGVuIHRvIHMtPndpbmRvdyB5ZXQgKi9cblxuICBzLmxpdF9idWZzaXplID0gMSA8PCAobWVtTGV2ZWwgKyA2KTsgLyogMTZLIGVsZW1lbnRzIGJ5IGRlZmF1bHQgKi9cblxuICAvKiBXZSBvdmVybGF5IHBlbmRpbmdfYnVmIGFuZCBzeW1fYnVmLiBUaGlzIHdvcmtzIHNpbmNlIHRoZSBhdmVyYWdlIHNpemVcbiAgICogZm9yIGxlbmd0aC9kaXN0YW5jZSBwYWlycyBvdmVyIGFueSBjb21wcmVzc2VkIGJsb2NrIGlzIGFzc3VyZWQgdG8gYmUgMzFcbiAgICogYml0cyBvciBsZXNzLlxuICAgKlxuICAgKiBBbmFseXNpczogVGhlIGxvbmdlc3QgZml4ZWQgY29kZXMgYXJlIGEgbGVuZ3RoIGNvZGUgb2YgOCBiaXRzIHBsdXMgNVxuICAgKiBleHRyYSBiaXRzLCBmb3IgbGVuZ3RocyAxMzEgdG8gMjU3LiBUaGUgbG9uZ2VzdCBmaXhlZCBkaXN0YW5jZSBjb2RlcyBhcmVcbiAgICogNSBiaXRzIHBsdXMgMTMgZXh0cmEgYml0cywgZm9yIGRpc3RhbmNlcyAxNjM4NSB0byAzMjc2OC4gVGhlIGxvbmdlc3RcbiAgICogcG9zc2libGUgZml4ZWQtY29kZXMgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgdGhlbiAzMSBiaXRzIHRvdGFsLlxuICAgKlxuICAgKiBzeW1fYnVmIHN0YXJ0cyBvbmUtZm91cnRoIG9mIHRoZSB3YXkgaW50byBwZW5kaW5nX2J1Zi4gU28gdGhlcmUgYXJlXG4gICAqIHRocmVlIGJ5dGVzIGluIHN5bV9idWYgZm9yIGV2ZXJ5IGZvdXIgYnl0ZXMgaW4gcGVuZGluZ19idWYuIEVhY2ggc3ltYm9sXG4gICAqIGluIHN5bV9idWYgaXMgdGhyZWUgYnl0ZXMgLS0gdHdvIGZvciB0aGUgZGlzdGFuY2UgYW5kIG9uZSBmb3IgdGhlXG4gICAqIGxpdGVyYWwvbGVuZ3RoLiBBcyBlYWNoIHN5bWJvbCBpcyBjb25zdW1lZCwgdGhlIHBvaW50ZXIgdG8gdGhlIG5leHRcbiAgICogc3ltX2J1ZiB2YWx1ZSB0byByZWFkIG1vdmVzIGZvcndhcmQgdGhyZWUgYnl0ZXMuIEZyb20gdGhhdCBzeW1ib2wsIHVwIHRvXG4gICAqIDMxIGJpdHMgYXJlIHdyaXR0ZW4gdG8gcGVuZGluZ19idWYuIFRoZSBjbG9zZXN0IHRoZSB3cml0dGVuIHBlbmRpbmdfYnVmXG4gICAqIGJpdHMgZ2V0cyB0byB0aGUgbmV4dCBzeW1fYnVmIHN5bWJvbCB0byByZWFkIGlzIGp1c3QgYmVmb3JlIHRoZSBsYXN0XG4gICAqIGNvZGUgaXMgd3JpdHRlbi4gQXQgdGhhdCB0aW1lLCAzMSoobi0yKSBiaXRzIGhhdmUgYmVlbiB3cml0dGVuLCBqdXN0XG4gICAqIGFmdGVyIDI0KihuLTIpIGJpdHMgaGF2ZSBiZWVuIGNvbnN1bWVkIGZyb20gc3ltX2J1Zi4gc3ltX2J1ZiBzdGFydHMgYXRcbiAgICogOCpuIGJpdHMgaW50byBwZW5kaW5nX2J1Zi4gKE5vdGUgdGhhdCB0aGUgc3ltYm9sIGJ1ZmZlciBmaWxscyB3aGVuIG4tMVxuICAgKiBzeW1ib2xzIGFyZSB3cml0dGVuLikgVGhlIGNsb3Nlc3QgdGhlIHdyaXRpbmcgZ2V0cyB0byB3aGF0IGlzIHVucmVhZCBpc1xuICAgKiB0aGVuIG4rMTQgYml0cy4gSGVyZSBuIGlzIGxpdF9idWZzaXplLCB3aGljaCBpcyAxNjM4NCBieSBkZWZhdWx0LCBhbmRcbiAgICogY2FuIHJhbmdlIGZyb20gMTI4IHRvIDMyNzY4LlxuICAgKlxuICAgKiBUaGVyZWZvcmUsIGF0IGEgbWluaW11bSwgdGhlcmUgYXJlIDE0MiBiaXRzIG9mIHNwYWNlIGJldHdlZW4gd2hhdCBpc1xuICAgKiB3cml0dGVuIGFuZCB3aGF0IGlzIHJlYWQgaW4gdGhlIG92ZXJsYWluIGJ1ZmZlcnMsIHNvIHRoZSBzeW1ib2xzIGNhbm5vdFxuICAgKiBiZSBvdmVyd3JpdHRlbiBieSB0aGUgY29tcHJlc3NlZCBkYXRhLiBUaGF0IHNwYWNlIGlzIGFjdHVhbGx5IDEzOSBiaXRzLFxuICAgKiBkdWUgdG8gdGhlIHRocmVlLWJpdCBmaXhlZC1jb2RlIGJsb2NrIGhlYWRlci5cbiAgICpcbiAgICogVGhhdCBjb3ZlcnMgdGhlIGNhc2Ugd2hlcmUgZWl0aGVyIFpfRklYRUQgaXMgc3BlY2lmaWVkLCBmb3JjaW5nIGZpeGVkXG4gICAqIGNvZGVzLCBvciB3aGVuIHRoZSB1c2Ugb2YgZml4ZWQgY29kZXMgaXMgY2hvc2VuLCBiZWNhdXNlIHRoYXQgY2hvaWNlXG4gICAqIHJlc3VsdHMgaW4gYSBzbWFsbGVyIGNvbXByZXNzZWQgYmxvY2sgdGhhbiBkeW5hbWljIGNvZGVzLiBUaGF0IGxhdHRlclxuICAgKiBjb25kaXRpb24gdGhlbiBhc3N1cmVzIHRoYXQgdGhlIGFib3ZlIGFuYWx5c2lzIGFsc28gY292ZXJzIGFsbCBkeW5hbWljXG4gICAqIGJsb2Nrcy4gQSBkeW5hbWljLWNvZGUgYmxvY2sgd2lsbCBvbmx5IGJlIGNob3NlbiB0byBiZSBlbWl0dGVkIGlmIGl0IGhhc1xuICAgKiBmZXdlciBiaXRzIHRoYW4gYSBmaXhlZC1jb2RlIGJsb2NrIHdvdWxkIGZvciB0aGUgc2FtZSBzZXQgb2Ygc3ltYm9scy5cbiAgICogVGhlcmVmb3JlIGl0cyBhdmVyYWdlIHN5bWJvbCBsZW5ndGggaXMgYXNzdXJlZCB0byBiZSBsZXNzIHRoYW4gMzEuIFNvXG4gICAqIHRoZSBjb21wcmVzc2VkIGRhdGEgZm9yIGEgZHluYW1pYyBibG9jayBhbHNvIGNhbm5vdCBvdmVyd3JpdGUgdGhlXG4gICAqIHN5bWJvbHMgZnJvbSB3aGljaCBpdCBpcyBiZWluZyBjb25zdHJ1Y3RlZC5cbiAgICovXG5cbiAgcy5wZW5kaW5nX2J1Zl9zaXplID0gcy5saXRfYnVmc2l6ZSAqIDQ7XG4gIHMucGVuZGluZ19idWYgPSBuZXcgVWludDhBcnJheShzLnBlbmRpbmdfYnVmX3NpemUpO1xuXG4gIC8vIEl0IGlzIG9mZnNldCBmcm9tIGBzLnBlbmRpbmdfYnVmYCAoc2l6ZSBpcyBgcy5saXRfYnVmc2l6ZSAqIDJgKVxuICAvL3MtPnN5bV9idWYgPSBzLT5wZW5kaW5nX2J1ZiArIHMtPmxpdF9idWZzaXplO1xuICBzLnN5bV9idWYgPSBzLmxpdF9idWZzaXplO1xuXG4gIC8vcy0+c3ltX2VuZCA9IChzLT5saXRfYnVmc2l6ZSAtIDEpICogMztcbiAgcy5zeW1fZW5kID0gKHMubGl0X2J1ZnNpemUgLSAxKSAqIDM7XG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUqMyBiZWNhdXNlIG9mIHdyYXBhcm91bmQgYXQgNjRLXG4gICAqIG9uIDE2IGJpdCBtYWNoaW5lcyBhbmQgYmVjYXVzZSBzdG9yZWQgYmxvY2tzIGFyZSByZXN0cmljdGVkIHRvXG4gICAqIDY0Sy0xIGJ5dGVzLlxuICAgKi9cblxuICBzLmxldmVsID0gbGV2ZWw7XG4gIHMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgcy5tZXRob2QgPSBtZXRob2Q7XG5cbiAgcmV0dXJuIGRlZmxhdGVSZXNldChzdHJtKTtcbn07XG5cbmNvbnN0IGRlZmxhdGVJbml0ID0gKHN0cm0sIGxldmVsKSA9PiB7XG5cbiAgcmV0dXJuIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgWl9ERUZMQVRFRCQyLCBNQVhfV0JJVFMkMSwgREVGX01FTV9MRVZFTCwgWl9ERUZBVUxUX1NUUkFURUdZJDEpO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5jb25zdCBkZWZsYXRlJDIgPSAoc3RybSwgZmx1c2gpID0+IHtcblxuICBpZiAoZGVmbGF0ZVN0YXRlQ2hlY2soc3RybSkgfHwgZmx1c2ggPiBaX0JMT0NLJDEgfHwgZmx1c2ggPCAwKSB7XG4gICAgcmV0dXJuIHN0cm0gPyBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IkMikgOiBaX1NUUkVBTV9FUlJPUiQyO1xuICB9XG5cbiAgY29uc3QgcyA9IHN0cm0uc3RhdGU7XG5cbiAgaWYgKCFzdHJtLm91dHB1dCB8fFxuICAgICAgKHN0cm0uYXZhaWxfaW4gIT09IDAgJiYgIXN0cm0uaW5wdXQpIHx8XG4gICAgICAocy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBmbHVzaCAhPT0gWl9GSU5JU0gkMykpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIChzdHJtLmF2YWlsX291dCA9PT0gMCkgPyBaX0JVRl9FUlJPUiQxIDogWl9TVFJFQU1fRVJST1IkMik7XG4gIH1cblxuICBjb25zdCBvbGRfZmx1c2ggPSBzLmxhc3RfZmx1c2g7XG4gIHMubGFzdF9mbHVzaCA9IGZsdXNoO1xuXG4gIC8qIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUgKi9cbiAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAvKiBTaW5jZSBhdmFpbF9vdXQgaXMgMCwgZGVmbGF0ZSB3aWxsIGJlIGNhbGxlZCBhZ2FpbiB3aXRoXG4gICAgICAgKiBtb3JlIG91dHB1dCBzcGFjZSwgYnV0IHBvc3NpYmx5IHdpdGggYm90aCBwZW5kaW5nIGFuZFxuICAgICAgICogYXZhaWxfaW4gZXF1YWwgdG8gemVyby4gVGhlcmUgd29uJ3QgYmUgYW55dGhpbmcgdG8gZG8sXG4gICAgICAgKiBidXQgdGhpcyBpcyBub3QgYW4gZXJyb3Igc2l0dWF0aW9uIHNvIG1ha2Ugc3VyZSB3ZVxuICAgICAgICogcmV0dXJuIE9LIGluc3RlYWQgb2YgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCBvZiBkZWZsYXRlOlxuICAgICAgICovXG4gICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgIHJldHVybiBaX09LJDM7XG4gICAgfVxuXG4gICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlXG4gICAgICogZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcbiAgICAgKiByZXR1cm5pbmcgWl9TVFJFQU1fRU5EIGluc3RlYWQgb2YgWl9CVUZfRVJST1IuXG4gICAgICovXG4gIH0gZWxzZSBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiByYW5rKGZsdXNoKSA8PSByYW5rKG9sZF9mbHVzaCkgJiZcbiAgICBmbHVzaCAhPT0gWl9GSU5JU0gkMykge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IkMSk7XG4gIH1cblxuICAvKiBVc2VyIG11c3Qgbm90IHByb3ZpZGUgbW9yZSBpbnB1dCBhZnRlciB0aGUgZmlyc3QgRklOSVNIOiAqL1xuICBpZiAocy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX0JVRl9FUlJPUiQxKTtcbiAgfVxuXG4gIC8qIFdyaXRlIHRoZSBoZWFkZXIgKi9cbiAgaWYgKHMuc3RhdHVzID09PSBJTklUX1NUQVRFICYmIHMud3JhcCA9PT0gMCkge1xuICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IElOSVRfU1RBVEUpIHtcbiAgICAvKiB6bGliIGhlYWRlciAqL1xuICAgIGxldCBoZWFkZXIgPSAoWl9ERUZMQVRFRCQyICsgKChzLndfYml0cyAtIDgpIDw8IDQpKSA8PCA4O1xuICAgIGxldCBsZXZlbF9mbGFncyA9IC0xO1xuXG4gICAgaWYgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIpIHtcbiAgICAgIGxldmVsX2ZsYWdzID0gMDtcbiAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPCA2KSB7XG4gICAgICBsZXZlbF9mbGFncyA9IDE7XG4gICAgfSBlbHNlIGlmIChzLmxldmVsID09PSA2KSB7XG4gICAgICBsZXZlbF9mbGFncyA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldmVsX2ZsYWdzID0gMztcbiAgICB9XG4gICAgaGVhZGVyIHw9IChsZXZlbF9mbGFncyA8PCA2KTtcbiAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkgeyBoZWFkZXIgfD0gUFJFU0VUX0RJQ1Q7IH1cbiAgICBoZWFkZXIgKz0gMzEgLSAoaGVhZGVyICUgMzEpO1xuXG4gICAgcHV0U2hvcnRNU0IocywgaGVhZGVyKTtcblxuICAgIC8qIFNhdmUgdGhlIGFkbGVyMzIgb2YgdGhlIHByZXNldCBkaWN0aW9uYXJ5OiAqL1xuICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7XG4gICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG4gICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgICB9XG4gICAgc3RybS5hZGxlciA9IDE7IC8vIGFkbGVyMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuXG4gICAgLyogQ29tcHJlc3Npb24gbXVzdCBzdGFydCB3aXRoIGFuIGVtcHR5IHBlbmRpbmcgYnVmZmVyICovXG4gICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgIHJldHVybiBaX09LJDM7XG4gICAgfVxuICB9XG4vLyNpZmRlZiBHWklQXG4gIGlmIChzLnN0YXR1cyA9PT0gR1pJUF9TVEFURSkge1xuICAgIC8qIGd6aXAgaGVhZGVyICovXG4gICAgc3RybS5hZGxlciA9IDA7ICAvL2NyYzMyKDBMLCBaX05VTEwsIDApO1xuICAgIHB1dF9ieXRlKHMsIDMxKTtcbiAgICBwdXRfYnl0ZShzLCAxMzkpO1xuICAgIHB1dF9ieXRlKHMsIDgpO1xuICAgIGlmICghcy5nemhlYWQpIHsgLy8gcy0+Z3poZWFkID09IFpfTlVMTFxuICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cbiAgICAgICAgICAgICAgICAgICA0IDogMCkpO1xuICAgICAgcHV0X2J5dGUocywgT1NfQ09ERSk7XG4gICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG5cbiAgICAgIC8qIENvbXByZXNzaW9uIG11c3Qgc3RhcnQgd2l0aCBhbiBlbXB0eSBwZW5kaW5nIGJ1ZmZlciAqL1xuICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgIGlmIChzLnBlbmRpbmcgIT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgIHJldHVybiBaX09LJDM7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgK1xuICAgICAgICAgICAgICAgICAgKHMuZ3poZWFkLmhjcmMgPyAyIDogMCkgK1xuICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5leHRyYSA/IDAgOiA0KSArXG4gICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgK1xuICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5jb21tZW50ID8gMCA6IDE2KVxuICAgICAgKTtcbiAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLnRpbWUgJiAweGZmKTtcbiAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDgpICYgMHhmZik7XG4gICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAxNikgJiAweGZmKTtcbiAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDI0KSAmIDB4ZmYpO1xuICAgICAgcHV0X2J5dGUocywgcy5sZXZlbCA9PT0gOSA/IDIgOlxuICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5vcyAmIDB4ZmYpO1xuICAgICAgaWYgKHMuZ3poZWFkLmV4dHJhICYmIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCA+PiA4KSAmIDB4ZmYpO1xuICAgICAgfVxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyXzEoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nLCAwKTtcbiAgICAgIH1cbiAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICBzLnN0YXR1cyA9IEVYVFJBX1NUQVRFO1xuICAgIH1cbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IEVYVFJBX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmV4dHJhLyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGxldCBiZWcgPSBzLnBlbmRpbmc7ICAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgbGV0IGxlZnQgPSAocy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZmZmKSAtIHMuZ3ppbmRleDtcbiAgICAgIHdoaWxlIChzLnBlbmRpbmcgKyBsZWZ0ID4gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIGxldCBjb3B5ID0gcy5wZW5kaW5nX2J1Zl9zaXplIC0gcy5wZW5kaW5nO1xuICAgICAgICAvLyB6bWVtY3B5KHMucGVuZGluZ19idWYgKyBzLnBlbmRpbmcsXG4gICAgICAgIC8vICAgIHMuZ3poZWFkLmV4dHJhICsgcy5nemluZGV4LCBjb3B5KTtcbiAgICAgICAgcy5wZW5kaW5nX2J1Zi5zZXQocy5nemhlYWQuZXh0cmEuc3ViYXJyYXkocy5nemluZGV4LCBzLmd6aW5kZXggKyBjb3B5KSwgcy5wZW5kaW5nKTtcbiAgICAgICAgcy5wZW5kaW5nID0gcy5wZW5kaW5nX2J1Zl9zaXplO1xuICAgICAgICAvLy0tLSBIQ1JDX1VQREFURShiZWcpIC0tLS8vXG4gICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgfVxuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHMuZ3ppbmRleCArPSBjb3B5O1xuICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgICAgcmV0dXJuIFpfT0skMztcbiAgICAgICAgfVxuICAgICAgICBiZWcgPSAwO1xuICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICB9XG4gICAgICAvLyBKUyBzcGVjaWZpYzogcy5nemhlYWQuZXh0cmEgbWF5IGJlIFR5cGVkQXJyYXkgb3IgQXJyYXkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgIC8vICAgICAgICAgICAgICBUeXBlZEFycmF5LnNsaWNlIGFuZCBUeXBlZEFycmF5LmZyb20gZG9uJ3QgZXhpc3QgaW4gSUUxMC1JRTExXG4gICAgICBsZXQgZ3poZWFkX2V4dHJhID0gbmV3IFVpbnQ4QXJyYXkocy5nemhlYWQuZXh0cmEpO1xuICAgICAgLy8gem1lbWNweShzLT5wZW5kaW5nX2J1ZiArIHMtPnBlbmRpbmcsXG4gICAgICAvLyAgICAgcy0+Z3poZWFkLT5leHRyYSArIHMtPmd6aW5kZXgsIGxlZnQpO1xuICAgICAgcy5wZW5kaW5nX2J1Zi5zZXQoZ3poZWFkX2V4dHJhLnN1YmFycmF5KHMuZ3ppbmRleCwgcy5nemluZGV4ICsgbGVmdCksIHMucGVuZGluZyk7XG4gICAgICBzLnBlbmRpbmcgKz0gbGVmdDtcbiAgICAgIC8vLS0tIEhDUkNfVVBEQVRFKGJlZykgLS0tLy9cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzJfMShzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICAvLy0tLS8vXG4gICAgICBzLmd6aW5kZXggPSAwO1xuICAgIH1cbiAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBOQU1FX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLm5hbWUvKiAhPSBaX05VTEwqLykge1xuICAgICAgbGV0IGJlZyA9IHMucGVuZGluZzsgICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG4gICAgICBsZXQgdmFsO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAvLy0tLSBIQ1JDX1VQREFURShiZWcpIC0tLS8vXG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzJfMShzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGlmIChzLnBlbmRpbmcgIT09IDApIHtcbiAgICAgICAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIFpfT0skMztcbiAgICAgICAgICB9XG4gICAgICAgICAgYmVnID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZ1xuICAgICAgICBpZiAocy5nemluZGV4IDwgcy5nemhlYWQubmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5uYW1lLmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7XG4gICAgICB9IHdoaWxlICh2YWwgIT09IDApO1xuICAgICAgLy8tLS0gSENSQ19VUERBVEUoYmVnKSAtLS0vL1xuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIC8vLS0tLy9cbiAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgfVxuICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IENPTU1FTlRfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuY29tbWVudC8qICE9IFpfTlVMTCovKSB7XG4gICAgICBsZXQgYmVnID0gcy5wZW5kaW5nOyAgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cbiAgICAgIGxldCB2YWw7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIC8vLS0tIEhDUkNfVVBEQVRFKGJlZykgLS0tLy9cbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgICAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgICAgICByZXR1cm4gWl9PSyQzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiZWcgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5jb21tZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG4gICAgICAvLy0tLSBIQ1JDX1VQREFURShiZWcpIC0tLS8vXG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyXzEoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgLy8tLS0vL1xuICAgIH1cbiAgICBzLnN0YXR1cyA9IEhDUkNfU1RBVEU7XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgIGlmIChzLnBlbmRpbmcgKyAyID4gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgIT09IDApIHtcbiAgICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgICAgICByZXR1cm4gWl9PSyQzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7XG4gICAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgICAgc3RybS5hZGxlciA9IDA7IC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgfVxuICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcblxuICAgIC8qIENvbXByZXNzaW9uIG11c3Qgc3RhcnQgd2l0aCBhbiBlbXB0eSBwZW5kaW5nIGJ1ZmZlciAqL1xuICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICByZXR1cm4gWl9PSyQzO1xuICAgIH1cbiAgfVxuLy8jZW5kaWZcblxuICAvKiBTdGFydCBhIG5ldyBibG9jayBvciBjb250aW51ZSB0aGUgY3VycmVudCBvbmUuXG4gICAqL1xuICBpZiAoc3RybS5hdmFpbF9pbiAhPT0gMCB8fCBzLmxvb2thaGVhZCAhPT0gMCB8fFxuICAgIChmbHVzaCAhPT0gWl9OT19GTFVTSCQyICYmIHMuc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUpKSB7XG4gICAgbGV0IGJzdGF0ZSA9IHMubGV2ZWwgPT09IDAgPyBkZWZsYXRlX3N0b3JlZChzLCBmbHVzaCkgOlxuICAgICAgICAgICAgICAgICBzLnN0cmF0ZWd5ID09PSBaX0hVRkZNQU5fT05MWSA/IGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgOlxuICAgICAgICAgICAgICAgICBzLnN0cmF0ZWd5ID09PSBaX1JMRSA/IGRlZmxhdGVfcmxlKHMsIGZsdXNoKSA6XG4gICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZnVuYyhzLCBmbHVzaCk7XG5cbiAgICBpZiAoYnN0YXRlID09PSBCU19GSU5JU0hfU1RBUlRFRCB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9ET05FKSB7XG4gICAgICBzLnN0YXR1cyA9IEZJTklTSF9TVEFURTtcbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfTkVFRF9NT1JFIHx8IGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQpIHtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgICAgLyogYXZvaWQgQlVGX0VSUk9SIG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG4gICAgICB9XG4gICAgICByZXR1cm4gWl9PSyQzO1xuICAgICAgLyogSWYgZmx1c2ggIT0gWl9OT19GTFVTSCAmJiBhdmFpbF9vdXQgPT0gMCwgdGhlIG5leHQgY2FsbFxuICAgICAgICogb2YgZGVmbGF0ZSBzaG91bGQgdXNlIHRoZSBzYW1lIGZsdXNoIHBhcmFtZXRlciB0byBtYWtlIHN1cmVcbiAgICAgICAqIHRoYXQgdGhlIGZsdXNoIGlzIGNvbXBsZXRlLiBTbyB3ZSBkb24ndCBoYXZlIHRvIG91dHB1dCBhblxuICAgICAgICogZW1wdHkgYmxvY2sgaGVyZSwgdGhpcyB3aWxsIGJlIGRvbmUgYXQgbmV4dCBjYWxsLiBUaGlzIGFsc29cbiAgICAgICAqIGVuc3VyZXMgdGhhdCBmb3IgYSB2ZXJ5IHNtYWxsIG91dHB1dCBidWZmZXIsIHdlIGVtaXQgYXQgbW9zdFxuICAgICAgICogb25lIGVtcHR5IGJsb2NrLlxuICAgICAgICovXG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX0JMT0NLX0RPTkUpIHtcbiAgICAgIGlmIChmbHVzaCA9PT0gWl9QQVJUSUFMX0ZMVVNIKSB7XG4gICAgICAgIF90cl9hbGlnbihzKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZsdXNoICE9PSBaX0JMT0NLJDEpIHsgLyogRlVMTF9GTFVTSCBvciBTWU5DX0ZMVVNIICovXG5cbiAgICAgICAgX3RyX3N0b3JlZF9ibG9jayhzLCAwLCAwLCBmYWxzZSk7XG4gICAgICAgIC8qIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkXG4gICAgICAgICAqIGFzIGEgc3BlY2lhbCBtYXJrZXIgYnkgaW5mbGF0ZV9zeW5jKCkuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCQxKSB7XG4gICAgICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovICAgICAgICAgICAgIC8qIGZvcmdldCBoaXN0b3J5ICovXG4gICAgICAgICAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuXG4gICAgICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgICAgICBzLnN0cnN0YXJ0ID0gMDtcbiAgICAgICAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xuICAgICAgICAgICAgcy5pbnNlcnQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTsgLyogYXZvaWQgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG4gICAgICAgIHJldHVybiBaX09LJDM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGZsdXNoICE9PSBaX0ZJTklTSCQzKSB7IHJldHVybiBaX09LJDM7IH1cbiAgaWYgKHMud3JhcCA8PSAwKSB7IHJldHVybiBaX1NUUkVBTV9FTkQkMzsgfVxuXG4gIC8qIFdyaXRlIHRoZSB0cmFpbGVyICovXG4gIGlmIChzLndyYXAgPT09IDIpIHtcbiAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gOCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAxNikgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAyNCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCBzdHJtLnRvdGFsX2luICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gOCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAxNikgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAyNCkgJiAweGZmKTtcbiAgfVxuICBlbHNlXG4gIHtcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG4gICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciAmIDB4ZmZmZik7XG4gIH1cblxuICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAvKiBJZiBhdmFpbF9vdXQgaXMgemVybywgdGhlIGFwcGxpY2F0aW9uIHdpbGwgY2FsbCBkZWZsYXRlIGFnYWluXG4gICAqIHRvIGZsdXNoIHRoZSByZXN0LlxuICAgKi9cbiAgaWYgKHMud3JhcCA+IDApIHsgcy53cmFwID0gLXMud3JhcDsgfVxuICAvKiB3cml0ZSB0aGUgdHJhaWxlciBvbmx5IG9uY2UhICovXG4gIHJldHVybiBzLnBlbmRpbmcgIT09IDAgPyBaX09LJDMgOiBaX1NUUkVBTV9FTkQkMztcbn07XG5cblxuY29uc3QgZGVmbGF0ZUVuZCA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKGRlZmxhdGVTdGF0ZUNoZWNrKHN0cm0pKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDI7XG4gIH1cblxuICBjb25zdCBzdGF0dXMgPSBzdHJtLnN0YXRlLnN0YXR1cztcblxuICBzdHJtLnN0YXRlID0gbnVsbDtcblxuICByZXR1cm4gc3RhdHVzID09PSBCVVNZX1NUQVRFID8gZXJyKHN0cm0sIFpfREFUQV9FUlJPUiQyKSA6IFpfT0skMztcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZXMgdGhlIGNvbXByZXNzaW9uIGRpY3Rpb25hcnkgZnJvbSB0aGUgZ2l2ZW4gYnl0ZVxuICogc2VxdWVuY2Ugd2l0aG91dCBwcm9kdWNpbmcgYW55IGNvbXByZXNzZWQgb3V0cHV0LlxuICovXG5jb25zdCBkZWZsYXRlU2V0RGljdGlvbmFyeSA9IChzdHJtLCBkaWN0aW9uYXJ5KSA9PiB7XG5cbiAgbGV0IGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcblxuICBpZiAoZGVmbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMjtcbiAgfVxuXG4gIGNvbnN0IHMgPSBzdHJtLnN0YXRlO1xuICBjb25zdCB3cmFwID0gcy53cmFwO1xuXG4gIGlmICh3cmFwID09PSAyIHx8ICh3cmFwID09PSAxICYmIHMuc3RhdHVzICE9PSBJTklUX1NUQVRFKSB8fCBzLmxvb2thaGVhZCkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQyO1xuICB9XG5cbiAgLyogd2hlbiB1c2luZyB6bGliIHdyYXBwZXJzLCBjb21wdXRlIEFkbGVyLTMyIGZvciBwcm92aWRlZCBkaWN0aW9uYXJ5ICovXG4gIGlmICh3cmFwID09PSAxKSB7XG4gICAgLyogYWRsZXIzMihzdHJtLT5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovXG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzJfMShzdHJtLmFkbGVyLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcbiAgfVxuXG4gIHMud3JhcCA9IDA7ICAgLyogYXZvaWQgY29tcHV0aW5nIEFkbGVyLTMyIGluIHJlYWRfYnVmICovXG5cbiAgLyogaWYgZGljdGlvbmFyeSB3b3VsZCBmaWxsIHdpbmRvdywganVzdCByZXBsYWNlIHRoZSBoaXN0b3J5ICovXG4gIGlmIChkaWN0TGVuZ3RoID49IHMud19zaXplKSB7XG4gICAgaWYgKHdyYXAgPT09IDApIHsgICAgICAgICAgICAvKiBhbHJlYWR5IGVtcHR5IG90aGVyd2lzZSAqL1xuICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG4gICAgICBzLnN0cnN0YXJ0ID0gMDtcbiAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xuICAgICAgcy5pbnNlcnQgPSAwO1xuICAgIH1cbiAgICAvKiB1c2UgdGhlIHRhaWwgKi9cbiAgICAvLyBkaWN0aW9uYXJ5ID0gZGljdGlvbmFyeS5zbGljZShkaWN0TGVuZ3RoIC0gcy53X3NpemUpO1xuICAgIGxldCB0bXBEaWN0ID0gbmV3IFVpbnQ4QXJyYXkocy53X3NpemUpO1xuICAgIHRtcERpY3Quc2V0KGRpY3Rpb25hcnkuc3ViYXJyYXkoZGljdExlbmd0aCAtIHMud19zaXplLCBkaWN0TGVuZ3RoKSwgMCk7XG4gICAgZGljdGlvbmFyeSA9IHRtcERpY3Q7XG4gICAgZGljdExlbmd0aCA9IHMud19zaXplO1xuICB9XG4gIC8qIGluc2VydCBkaWN0aW9uYXJ5IGludG8gd2luZG93IGFuZCBoYXNoICovXG4gIGNvbnN0IGF2YWlsID0gc3RybS5hdmFpbF9pbjtcbiAgY29uc3QgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgY29uc3QgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBzdHJtLmF2YWlsX2luID0gZGljdExlbmd0aDtcbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5pbnB1dCA9IGRpY3Rpb25hcnk7XG4gIGZpbGxfd2luZG93KHMpO1xuICB3aGlsZSAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgbGV0IHN0ciA9IHMuc3Ryc3RhcnQ7XG4gICAgbGV0IG4gPSBzLmxvb2thaGVhZCAtIChNSU5fTUFUQ0ggLSAxKTtcbiAgICBkbyB7XG4gICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSk7ICovXG4gICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzdHIgKyBNSU5fTUFUQ0ggLSAxXSk7XG5cbiAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG5cbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcbiAgICAgIHN0cisrO1xuICAgIH0gd2hpbGUgKC0tbik7XG4gICAgcy5zdHJzdGFydCA9IHN0cjtcbiAgICBzLmxvb2thaGVhZCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgZmlsbF93aW5kb3cocyk7XG4gIH1cbiAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIHMuaW5zZXJ0ID0gcy5sb29rYWhlYWQ7XG4gIHMubG9va2FoZWFkID0gMDtcbiAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICBzdHJtLmlucHV0ID0gaW5wdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSBhdmFpbDtcbiAgcy53cmFwID0gd3JhcDtcbiAgcmV0dXJuIFpfT0skMztcbn07XG5cblxudmFyIGRlZmxhdGVJbml0XzEgPSBkZWZsYXRlSW5pdDtcbnZhciBkZWZsYXRlSW5pdDJfMSA9IGRlZmxhdGVJbml0MjtcbnZhciBkZWZsYXRlUmVzZXRfMSA9IGRlZmxhdGVSZXNldDtcbnZhciBkZWZsYXRlUmVzZXRLZWVwXzEgPSBkZWZsYXRlUmVzZXRLZWVwO1xudmFyIGRlZmxhdGVTZXRIZWFkZXJfMSA9IGRlZmxhdGVTZXRIZWFkZXI7XG52YXIgZGVmbGF0ZV8yJDEgPSBkZWZsYXRlJDI7XG52YXIgZGVmbGF0ZUVuZF8xID0gZGVmbGF0ZUVuZDtcbnZhciBkZWZsYXRlU2V0RGljdGlvbmFyeV8xID0gZGVmbGF0ZVNldERpY3Rpb25hcnk7XG52YXIgZGVmbGF0ZUluZm8gPSAncGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbi8qIE5vdCBpbXBsZW1lbnRlZFxubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZUJvdW5kID0gZGVmbGF0ZUJvdW5kO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZUNvcHkgPSBkZWZsYXRlQ29weTtcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGVHZXREaWN0aW9uYXJ5ID0gZGVmbGF0ZUdldERpY3Rpb25hcnk7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUGFyYW1zID0gZGVmbGF0ZVBhcmFtcztcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGVQZW5kaW5nID0gZGVmbGF0ZVBlbmRpbmc7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUHJpbWUgPSBkZWZsYXRlUHJpbWU7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlVHVuZSA9IGRlZmxhdGVUdW5lO1xuKi9cblxudmFyIGRlZmxhdGVfMSQyID0ge1xuXHRkZWZsYXRlSW5pdDogZGVmbGF0ZUluaXRfMSxcblx0ZGVmbGF0ZUluaXQyOiBkZWZsYXRlSW5pdDJfMSxcblx0ZGVmbGF0ZVJlc2V0OiBkZWZsYXRlUmVzZXRfMSxcblx0ZGVmbGF0ZVJlc2V0S2VlcDogZGVmbGF0ZVJlc2V0S2VlcF8xLFxuXHRkZWZsYXRlU2V0SGVhZGVyOiBkZWZsYXRlU2V0SGVhZGVyXzEsXG5cdGRlZmxhdGU6IGRlZmxhdGVfMiQxLFxuXHRkZWZsYXRlRW5kOiBkZWZsYXRlRW5kXzEsXG5cdGRlZmxhdGVTZXREaWN0aW9uYXJ5OiBkZWZsYXRlU2V0RGljdGlvbmFyeV8xLFxuXHRkZWZsYXRlSW5mbzogZGVmbGF0ZUluZm9cbn07XG5cbmNvbnN0IF9oYXMgPSAob2JqLCBrZXkpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59O1xuXG52YXIgYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIGNvbnN0IHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XG4gICAgaWYgKCFzb3VyY2UpIHsgY29udGludWU7IH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzb3VyY2UgKyAnbXVzdCBiZSBub24tb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxudmFyIGZsYXR0ZW5DaHVua3MgPSAoY2h1bmtzKSA9PiB7XG4gIC8vIGNhbGN1bGF0ZSBkYXRhIGxlbmd0aFxuICBsZXQgbGVuID0gMDtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgfVxuXG4gIC8vIGpvaW4gY2h1bmtzXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGNodW5rID0gY2h1bmtzW2ldO1xuICAgIHJlc3VsdC5zZXQoY2h1bmssIHBvcyk7XG4gICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgY29tbW9uID0ge1xuXHRhc3NpZ246IGFzc2lnbixcblx0ZmxhdHRlbkNodW5rczogZmxhdHRlbkNodW5rc1xufTtcblxuLy8gU3RyaW5nIGVuY29kZS9kZWNvZGUgaGVscGVyc1xuXG5cbi8vIFF1aWNrIGNoZWNrIGlmIHdlIGNhbiB1c2UgZmFzdCBhcnJheSB0byBiaW4gc3RyaW5nIGNvbnZlcnNpb25cbi8vXG4vLyAtIGFwcGx5KEFycmF5KSBjYW4gZmFpbCBvbiBBbmRyb2lkIDIuMlxuLy8gLSBhcHBseShVaW50OEFycmF5KSBjYW4gZmFpbCBvbiBpT1MgNS4xIFNhZmFyaVxuLy9cbmxldCBTVFJfQVBQTFlfVUlBX09LID0gdHJ1ZTtcblxudHJ5IHsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7IH0gY2F0Y2ggKF9fKSB7IFNUUl9BUFBMWV9VSUFfT0sgPSBmYWxzZTsgfVxuXG5cbi8vIFRhYmxlIHdpdGggdXRmOCBsZW5ndGhzIChjYWxjdWxhdGVkIGJ5IGZpcnN0IGJ5dGUgb2Ygc2VxdWVuY2UpXG4vLyBOb3RlLCB0aGF0IDUgJiA2LWJ5dGUgdmFsdWVzIGFuZCBzb21lIDQtYnl0ZSB2YWx1ZXMgY2FuIG5vdCBiZSByZXByZXNlbnRlZCBpbiBKUyxcbi8vIGJlY2F1c2UgbWF4IHBvc3NpYmxlIGNvZGVwb2ludCBpcyAweDEwZmZmZlxuY29uc3QgX3V0ZjhsZW4gPSBuZXcgVWludDhBcnJheSgyNTYpO1xuZm9yIChsZXQgcSA9IDA7IHEgPCAyNTY7IHErKykge1xuICBfdXRmOGxlbltxXSA9IChxID49IDI1MiA/IDYgOiBxID49IDI0OCA/IDUgOiBxID49IDI0MCA/IDQgOiBxID49IDIyNCA/IDMgOiBxID49IDE5MiA/IDIgOiAxKTtcbn1cbl91dGY4bGVuWzI1NF0gPSBfdXRmOGxlblsyNTRdID0gMTsgLy8gSW52YWxpZCBzZXF1ZW5jZSBzdGFydFxuXG5cbi8vIGNvbnZlcnQgc3RyaW5nIHRvIGFycmF5ICh0eXBlZCwgd2hlbiBwb3NzaWJsZSlcbnZhciBzdHJpbmcyYnVmID0gKHN0cikgPT4ge1xuICBpZiAodHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nICYmIFRleHRFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG4gIH1cblxuICBsZXQgYnVmLCBjLCBjMiwgbV9wb3MsIGksIHN0cl9sZW4gPSBzdHIubGVuZ3RoLCBidWZfbGVuID0gMDtcblxuICAvLyBjb3VudCBiaW5hcnkgc2l6ZVxuICBmb3IgKG1fcG9zID0gMDsgbV9wb3MgPCBzdHJfbGVuOyBtX3BvcysrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zICsgMSA8IHN0cl9sZW4pKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7XG4gICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtX3BvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBidWZfbGVuICs9IGMgPCAweDgwID8gMSA6IGMgPCAweDgwMCA/IDIgOiBjIDwgMHgxMDAwMCA/IDMgOiA0O1xuICB9XG5cbiAgLy8gYWxsb2NhdGUgYnVmZmVyXG4gIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGJ1Zl9sZW4pO1xuXG4gIC8vIGNvbnZlcnRcbiAgZm9yIChpID0gMCwgbV9wb3MgPSAwOyBpIDwgYnVmX2xlbjsgbV9wb3MrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChtX3Bvcyk7XG4gICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIChtX3BvcyArIDEgPCBzdHJfbGVuKSkge1xuICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcyArIDEpO1xuICAgICAgaWYgKChjMiAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xuICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcbiAgICAgICAgbV9wb3MrKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAvKiBvbmUgYnl0ZSAqL1xuICAgICAgYnVmW2krK10gPSBjO1xuICAgIH0gZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAvKiB0d28gYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhDMCB8IChjID4+PiA2KTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgLyogdGhyZWUgYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhFMCB8IChjID4+PiAxMik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogZm91ciBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweGYwIHwgKGMgPj4+IDE4KTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiAxMiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDYgJiAweDNmKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1Zjtcbn07XG5cbi8vIEhlbHBlclxuY29uc3QgYnVmMmJpbnN0cmluZyA9IChidWYsIGxlbikgPT4ge1xuICAvLyBPbiBDaHJvbWUsIHRoZSBhcmd1bWVudHMgaW4gYSBmdW5jdGlvbiBjYWxsIHRoYXQgYXJlIGFsbG93ZWQgaXMgYDY1NTM0YC5cbiAgLy8gSWYgdGhlIGxlbmd0aCBvZiB0aGUgYnVmZmVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0LCB3ZSBjYW4gdXNlIHRoaXMgb3B0aW1pemF0aW9uLFxuICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCB0YWtlIGEgc2xvd2VyIHBhdGguXG4gIGlmIChsZW4gPCA2NTUzNCkge1xuICAgIGlmIChidWYuc3ViYXJyYXkgJiYgU1RSX0FQUExZX1VJQV9PSykge1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnVmLmxlbmd0aCA9PT0gbGVuID8gYnVmIDogYnVmLnN1YmFycmF5KDAsIGxlbikpO1xuICAgIH1cbiAgfVxuXG4gIGxldCByZXN1bHQgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLy8gY29udmVydCBhcnJheSB0byBzdHJpbmdcbnZhciBidWYyc3RyaW5nID0gKGJ1ZiwgbWF4KSA9PiB7XG4gIGNvbnN0IGxlbiA9IG1heCB8fCBidWYubGVuZ3RoO1xuXG4gIGlmICh0eXBlb2YgVGV4dERlY29kZXIgPT09ICdmdW5jdGlvbicgJiYgVGV4dERlY29kZXIucHJvdG90eXBlLmRlY29kZSkge1xuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYnVmLnN1YmFycmF5KDAsIG1heCkpO1xuICB9XG5cbiAgbGV0IGksIG91dDtcblxuICAvLyBSZXNlcnZlIG1heCBwb3NzaWJsZSBsZW5ndGggKDIgd29yZHMgcGVyIGNoYXIpXG4gIC8vIE5COiBieSB1bmtub3duIHJlYXNvbnMsIEFycmF5IGlzIHNpZ25pZmljYW50bHkgZmFzdGVyIGZvclxuICAvLyAgICAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSB0aGFuIFVpbnQxNkFycmF5LlxuICBjb25zdCB1dGYxNmJ1ZiA9IG5ldyBBcnJheShsZW4gKiAyKTtcblxuICBmb3IgKG91dCA9IDAsIGkgPSAwOyBpIDwgbGVuOykge1xuICAgIGxldCBjID0gYnVmW2krK107XG4gICAgLy8gcXVpY2sgcHJvY2VzcyBhc2NpaVxuICAgIGlmIChjIDwgMHg4MCkgeyB1dGYxNmJ1ZltvdXQrK10gPSBjOyBjb250aW51ZTsgfVxuXG4gICAgbGV0IGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG4gICAgaWYgKGNfbGVuID4gNCkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGkgKz0gY19sZW4gLSAxOyBjb250aW51ZTsgfVxuXG4gICAgLy8gYXBwbHkgbWFzayBvbiBmaXJzdCBieXRlXG4gICAgYyAmPSBjX2xlbiA9PT0gMiA/IDB4MWYgOiBjX2xlbiA9PT0gMyA/IDB4MGYgOiAweDA3O1xuICAgIC8vIGpvaW4gdGhlIHJlc3RcbiAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHtcbiAgICAgIGMgPSAoYyA8PCA2KSB8IChidWZbaSsrXSAmIDB4M2YpO1xuICAgICAgY19sZW4tLTtcbiAgICB9XG5cbiAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBzdHJpbmc/XG4gICAgaWYgKGNfbGVuID4gMSkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8ICgoYyA+PiAxMCkgJiAweDNmZik7XG4gICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmMmJpbnN0cmluZyh1dGYxNmJ1Ziwgb3V0KTtcbn07XG5cblxuLy8gQ2FsY3VsYXRlIG1heCBwb3NzaWJsZSBwb3NpdGlvbiBpbiB1dGY4IGJ1ZmZlcixcbi8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcbi8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuXG4vL1xuLy8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG4vLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTtcbnZhciB1dGY4Ym9yZGVyID0gKGJ1ZiwgbWF4KSA9PiB7XG5cbiAgbWF4ID0gbWF4IHx8IGJ1Zi5sZW5ndGg7XG4gIGlmIChtYXggPiBidWYubGVuZ3RoKSB7IG1heCA9IGJ1Zi5sZW5ndGg7IH1cblxuICAvLyBnbyBiYWNrIGZyb20gbGFzdCBwb3NpdGlvbiwgdW50aWwgc3RhcnQgb2Ygc2VxdWVuY2UgZm91bmRcbiAgbGV0IHBvcyA9IG1heCAtIDE7XG4gIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG4gIC8vIFZlcnkgc21hbGwgYW5kIGJyb2tlbiBzZXF1ZW5jZSxcbiAgLy8gcmV0dXJuIG1heCwgYmVjYXVzZSB3ZSBzaG91bGQgcmV0dXJuIHNvbWV0aGluZyBhbnl3YXkuXG4gIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuICAvLyBJZiB3ZSBjYW1lIHRvIHN0YXJ0IG9mIGJ1ZmZlciAtIHRoYXQgbWVhbnMgYnVmZmVyIGlzIHRvbyBzbWFsbCxcbiAgLy8gcmV0dXJuIG1heCB0b28uXG4gIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gIHJldHVybiAocG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4KSA/IHBvcyA6IG1heDtcbn07XG5cbnZhciBzdHJpbmdzID0ge1xuXHRzdHJpbmcyYnVmOiBzdHJpbmcyYnVmLFxuXHRidWYyc3RyaW5nOiBidWYyc3RyaW5nLFxuXHR1dGY4Ym9yZGVyOiB1dGY4Ym9yZGVyXG59O1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIFpTdHJlYW0oKSB7XG4gIC8qIG5leHQgaW5wdXQgYnl0ZSAqL1xuICB0aGlzLmlucHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfaW4gPSAwO1xuICAvKiBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlIGF0IGlucHV0ICovXG4gIHRoaXMuYXZhaWxfaW4gPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgaW5wdXQgYnl0ZXMgcmVhZCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9pbiA9IDA7XG4gIC8qIG5leHQgb3V0cHV0IGJ5dGUgc2hvdWxkIGJlIHB1dCB0aGVyZSAqL1xuICB0aGlzLm91dHB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X291dCA9IDA7XG4gIC8qIHJlbWFpbmluZyBmcmVlIHNwYWNlIGF0IG91dHB1dCAqL1xuICB0aGlzLmF2YWlsX291dCA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovXG4gIHRoaXMudG90YWxfb3V0ID0gMDtcbiAgLyogbGFzdCBlcnJvciBtZXNzYWdlLCBOVUxMIGlmIG5vIGVycm9yICovXG4gIHRoaXMubXNnID0gJycvKlpfTlVMTCovO1xuICAvKiBub3QgdmlzaWJsZSBieSBhcHBsaWNhdGlvbnMgKi9cbiAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gIC8qIGJlc3QgZ3Vlc3MgYWJvdXQgdGhlIGRhdGEgdHlwZTogYmluYXJ5IG9yIHRleHQgKi9cbiAgdGhpcy5kYXRhX3R5cGUgPSAyLypaX1VOS05PV04qLztcbiAgLyogYWRsZXIzMiB2YWx1ZSBvZiB0aGUgdW5jb21wcmVzc2VkIGRhdGEgKi9cbiAgdGhpcy5hZGxlciA9IDA7XG59XG5cbnZhciB6c3RyZWFtID0gWlN0cmVhbTtcblxuY29uc3QgdG9TdHJpbmckMSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5jb25zdCB7XG4gIFpfTk9fRkxVU0g6IFpfTk9fRkxVU0gkMSwgWl9TWU5DX0ZMVVNILCBaX0ZVTExfRkxVU0gsIFpfRklOSVNIOiBaX0ZJTklTSCQyLFxuICBaX09LOiBaX09LJDIsIFpfU1RSRUFNX0VORDogWl9TVFJFQU1fRU5EJDIsXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTixcbiAgWl9ERUZBVUxUX1NUUkFURUdZLFxuICBaX0RFRkxBVEVEOiBaX0RFRkxBVEVEJDFcbn0gPSBjb25zdGFudHMkMjtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vKipcbiAqIGNsYXNzIERlZmxhdGVcbiAqXG4gKiBHZW5lcmljIEpTLXN0eWxlIHdyYXBwZXIgZm9yIHpsaWIgY2FsbHMuIElmIHlvdSBkb24ndCBuZWVkXG4gKiBzdHJlYW1pbmcgYmVoYXZpb3VyIC0gdXNlIG1vcmUgc2ltcGxlIGZ1bmN0aW9uczogW1tkZWZsYXRlXV0sXG4gKiBbW2RlZmxhdGVSYXddXSBhbmQgW1tnemlwXV0uXG4gKiovXG5cbi8qIGludGVybmFsXG4gKiBEZWZsYXRlLmNodW5rcyAtPiBBcnJheVxuICpcbiAqIENodW5rcyBvZiBvdXRwdXQgZGF0YSwgaWYgW1tEZWZsYXRlI29uRGF0YV1dIG5vdCBvdmVycmlkZGVuLlxuICoqL1xuXG4vKipcbiAqIERlZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXlcbiAqXG4gKiBDb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tEZWZsYXRlI29uRGF0YV1dXG4gKiBhbmQgW1tEZWZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rXG4gKiAoY2FsbCBbW0RlZmxhdGUjcHVzaF1dIHdpdGggYFpfRklOSVNIYCAvIGB0cnVlYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogRGVmbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBkZWZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogWW91IHdpbGwgbm90IG5lZWQgaXQgaW4gcmVhbCBsaWZlLCBiZWNhdXNlIGRlZmxhdGUgZXJyb3JzXG4gKiBhcmUgcG9zc2libGUgb25seSBvbiB3cm9uZyBvcHRpb25zIG9yIGJhZCBgb25EYXRhYCAvIGBvbkVuZGBcbiAqIGN1c3RvbSBoYW5kbGVycy5cbiAqKi9cblxuLyoqXG4gKiBEZWZsYXRlLm1zZyAtPiBTdHJpbmdcbiAqXG4gKiBFcnJvciBtZXNzYWdlLCBpZiBbW0RlZmxhdGUuZXJyXV0gIT0gMFxuICoqL1xuXG5cbi8qKlxuICogbmV3IERlZmxhdGUob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ3JlYXRlcyBuZXcgZGVmbGF0b3IgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpZWQgcGFyYW1zLiBUaHJvd3MgZXhjZXB0aW9uXG4gKiBvbiBiYWQgcGFyYW1zLiBTdXBwb3J0ZWQgb3B0aW9uczpcbiAqXG4gKiAtIGBsZXZlbGBcbiAqIC0gYHdpbmRvd0JpdHNgXG4gKiAtIGBtZW1MZXZlbGBcbiAqIC0gYHN0cmF0ZWd5YFxuICogLSBgZGljdGlvbmFyeWBcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBBZGRpdGlvbmFsIG9wdGlvbnMsIGZvciBpbnRlcm5hbCBuZWVkczpcbiAqXG4gKiAtIGBjaHVua1NpemVgIC0gc2l6ZSBvZiBnZW5lcmF0ZWQgZGF0YSBjaHVua3MgKDE2SyBieSBkZWZhdWx0KVxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBkbyByYXcgZGVmbGF0ZVxuICogLSBgZ3ppcGAgKEJvb2xlYW4pIC0gY3JlYXRlIGd6aXAgd3JhcHBlclxuICogLSBgaGVhZGVyYCAoT2JqZWN0KSAtIGN1c3RvbSBoZWFkZXIgZm9yIGd6aXBcbiAqICAgLSBgdGV4dGAgKEJvb2xlYW4pIC0gdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dFxuICogICAtIGB0aW1lYCAoTnVtYmVyKSAtIG1vZGlmaWNhdGlvbiB0aW1lLCB1bml4IHRpbWVzdGFtcFxuICogICAtIGBvc2AgKE51bWJlcikgLSBvcGVyYXRpb24gc3lzdGVtIGNvZGVcbiAqICAgLSBgZXh0cmFgIChBcnJheSkgLSBhcnJheSBvZiBieXRlcyB3aXRoIGV4dHJhIGRhdGEgKG1heCA2NTUzNilcbiAqICAgLSBgbmFtZWAgKFN0cmluZykgLSBmaWxlIG5hbWUgKGJpbmFyeSBzdHJpbmcpXG4gKiAgIC0gYGNvbW1lbnRgIChTdHJpbmcpIC0gY29tbWVudCAoYmluYXJ5IHN0cmluZylcbiAqICAgLSBgaGNyY2AgKEJvb2xlYW4pIC0gdHJ1ZSBpZiBoZWFkZXIgY3JjIHNob3VsZCBiZSBhZGRlZFxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKVxuICogICAsIGNodW5rMSA9IG5ldyBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pXG4gKiAgICwgY2h1bmsyID0gbmV3IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogY29uc3QgZGVmbGF0ZSA9IG5ldyBwYWtvLkRlZmxhdGUoeyBsZXZlbDogM30pO1xuICpcbiAqIGRlZmxhdGUucHVzaChjaHVuazEsIGZhbHNlKTtcbiAqIGRlZmxhdGUucHVzaChjaHVuazIsIHRydWUpOyAgLy8gdHJ1ZSAtPiBsYXN0IGNodW5rXG4gKlxuICogaWYgKGRlZmxhdGUuZXJyKSB7IHRocm93IG5ldyBFcnJvcihkZWZsYXRlLmVycik7IH1cbiAqXG4gKiBjb25zb2xlLmxvZyhkZWZsYXRlLnJlc3VsdCk7XG4gKiBgYGBcbiAqKi9cbmZ1bmN0aW9uIERlZmxhdGUkMShvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IGNvbW1vbi5hc3NpZ24oe1xuICAgIGxldmVsOiBaX0RFRkFVTFRfQ09NUFJFU1NJT04sXG4gICAgbWV0aG9kOiBaX0RFRkxBVEVEJDEsXG4gICAgY2h1bmtTaXplOiAxNjM4NCxcbiAgICB3aW5kb3dCaXRzOiAxNSxcbiAgICBtZW1MZXZlbDogOCxcbiAgICBzdHJhdGVneTogWl9ERUZBVUxUX1NUUkFURUdZXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIGxldCBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKG9wdC5yYXcgJiYgKG9wdC53aW5kb3dCaXRzID4gMCkpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKG9wdC5nemlwICYmIChvcHQud2luZG93Qml0cyA+IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSkge1xuICAgIG9wdC53aW5kb3dCaXRzICs9IDE2O1xuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtID0gbmV3IHpzdHJlYW0oKTtcbiAgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7XG5cbiAgbGV0IHN0YXR1cyA9IGRlZmxhdGVfMSQyLmRlZmxhdGVJbml0MihcbiAgICB0aGlzLnN0cm0sXG4gICAgb3B0LmxldmVsLFxuICAgIG9wdC5tZXRob2QsXG4gICAgb3B0LndpbmRvd0JpdHMsXG4gICAgb3B0Lm1lbUxldmVsLFxuICAgIG9wdC5zdHJhdGVneVxuICApO1xuXG4gIGlmIChzdGF0dXMgIT09IFpfT0skMikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlc1tzdGF0dXNdKTtcbiAgfVxuXG4gIGlmIChvcHQuaGVhZGVyKSB7XG4gICAgZGVmbGF0ZV8xJDIuZGVmbGF0ZVNldEhlYWRlcih0aGlzLnN0cm0sIG9wdC5oZWFkZXIpO1xuICB9XG5cbiAgaWYgKG9wdC5kaWN0aW9uYXJ5KSB7XG4gICAgbGV0IGRpY3Q7XG4gICAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2Ygb3B0LmRpY3Rpb25hcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBJZiB3ZSBuZWVkIHRvIGNvbXByZXNzIHRleHQsIGNoYW5nZSBlbmNvZGluZyB0byB1dGY4LlxuICAgICAgZGljdCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihvcHQuZGljdGlvbmFyeSk7XG4gICAgfSBlbHNlIGlmICh0b1N0cmluZyQxLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBkaWN0ID0gbmV3IFVpbnQ4QXJyYXkob3B0LmRpY3Rpb25hcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaWN0ID0gb3B0LmRpY3Rpb25hcnk7XG4gICAgfVxuXG4gICAgc3RhdHVzID0gZGVmbGF0ZV8xJDIuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBkaWN0KTtcblxuICAgIGlmIChzdGF0dXMgIT09IFpfT0skMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzW3N0YXR1c10pO1xuICAgIH1cblxuICAgIHRoaXMuX2RpY3Rfc2V0ID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmxhdGUjcHVzaChkYXRhWywgZmx1c2hfbW9kZV0pIC0+IEJvb2xlYW5cbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcnxTdHJpbmcpOiBpbnB1dCBkYXRhLiBTdHJpbmdzIHdpbGwgYmVcbiAqICAgY29udmVydGVkIHRvIHV0ZjggYnl0ZSBzZXF1ZW5jZS5cbiAqIC0gZmx1c2hfbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy5cbiAqICAgU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGRlZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0RlZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IGNvbXByZXNzZWQgY2h1bmtzLiBSZXR1cm5zIGB0cnVlYCBvbiBzdWNjZXNzLiBUaGUgbGFzdCBkYXRhIGJsb2NrIG11c3RcbiAqIGhhdmUgYGZsdXNoX21vZGVgIFpfRklOSVNIIChvciBgdHJ1ZWApLiBUaGF0IHdpbGwgZmx1c2ggaW50ZXJuYWwgcGVuZGluZ1xuICogYnVmZmVycyBhbmQgY2FsbCBbW0RlZmxhdGUjb25FbmRdXS5cbiAqXG4gKiBPbiBmYWlsIGNhbGwgW1tEZWZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3NcbiAqIC4uLlxuICogcHVzaChjaHVuaywgdHJ1ZSk7ICAvLyBwdXNoIGxhc3QgY2h1bmtcbiAqIGBgYFxuICoqL1xuRGVmbGF0ZSQxLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGRhdGEsIGZsdXNoX21vZGUpIHtcbiAgY29uc3Qgc3RybSA9IHRoaXMuc3RybTtcbiAgY29uc3QgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgbGV0IHN0YXR1cywgX2ZsdXNoX21vZGU7XG5cbiAgaWYgKHRoaXMuZW5kZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKGZsdXNoX21vZGUgPT09IH5+Zmx1c2hfbW9kZSkgX2ZsdXNoX21vZGUgPSBmbHVzaF9tb2RlO1xuICBlbHNlIF9mbHVzaF9tb2RlID0gZmx1c2hfbW9kZSA9PT0gdHJ1ZSA/IFpfRklOSVNIJDIgOiBaX05PX0ZMVVNIJDE7XG5cbiAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gSWYgd2UgbmVlZCB0byBjb21wcmVzcyB0ZXh0LCBjaGFuZ2UgZW5jb2RpbmcgdG8gdXRmOC5cbiAgICBzdHJtLmlucHV0ID0gc3RyaW5ncy5zdHJpbmcyYnVmKGRhdGEpO1xuICB9IGVsc2UgaWYgKHRvU3RyaW5nJDEuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJtLmlucHV0ID0gZGF0YTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDtcblxuICBmb3IgKDs7KSB7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBzdHJtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rU2l6ZSk7XG4gICAgICBzdHJtLm5leHRfb3V0ID0gMDtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSBhdmFpbF9vdXQgPiA2IHRvIGF2b2lkIHJlcGVhdGluZyBtYXJrZXJzXG4gICAgaWYgKChfZmx1c2hfbW9kZSA9PT0gWl9TWU5DX0ZMVVNIIHx8IF9mbHVzaF9tb2RlID09PSBaX0ZVTExfRkxVU0gpICYmIHN0cm0uYXZhaWxfb3V0IDw9IDYpIHtcbiAgICAgIHRoaXMub25EYXRhKHN0cm0ub3V0cHV0LnN1YmFycmF5KDAsIHN0cm0ubmV4dF9vdXQpKTtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHN0YXR1cyA9IGRlZmxhdGVfMSQyLmRlZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuXG4gICAgLy8gRW5kZWQgPT4gZmx1c2ggYW5kIGZpbmlzaFxuICAgIGlmIChzdGF0dXMgPT09IFpfU1RSRUFNX0VORCQyKSB7XG4gICAgICBpZiAoc3RybS5uZXh0X291dCA+IDApIHtcbiAgICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgfVxuICAgICAgc3RhdHVzID0gZGVmbGF0ZV8xJDIuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gc3RhdHVzID09PSBaX09LJDI7XG4gICAgfVxuXG4gICAgLy8gRmx1c2ggaWYgb3V0IGJ1ZmZlciBmdWxsXG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICB0aGlzLm9uRGF0YShzdHJtLm91dHB1dCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBGbHVzaCBpZiByZXF1ZXN0ZWQgYW5kIGhhcyBkYXRhXG4gICAgaWYgKF9mbHVzaF9tb2RlID4gMCAmJiBzdHJtLm5leHRfb3V0ID4gMCkge1xuICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDApIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogRGVmbGF0ZSNvbkRhdGEoY2h1bmspIC0+IFZvaWRcbiAqIC0gY2h1bmsgKFVpbnQ4QXJyYXkpOiBvdXRwdXQgZGF0YS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAqKi9cbkRlZmxhdGUkMS5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xufTtcblxuXG4vKipcbiAqIERlZmxhdGUjb25FbmQoc3RhdHVzKSAtPiBWb2lkXG4gKiAtIHN0YXR1cyAoTnVtYmVyKTogZGVmbGF0ZSBzdGF0dXMuIDAgKFpfT0spIG9uIHN1Y2Nlc3MsXG4gKiAgIG90aGVyIGlmIG5vdC5cbiAqXG4gKiBDYWxsZWQgb25jZSBhZnRlciB5b3UgdGVsbCBkZWZsYXRlIHRoYXQgdGhlIGlucHV0IHN0cmVhbSBpc1xuICogY29tcGxldGUgKFpfRklOSVNIKS4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcbiAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gKiovXG5EZWZsYXRlJDEucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBaX09LJDIpIHtcbiAgICB0aGlzLnJlc3VsdCA9IGNvbW1vbi5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKTtcbiAgfVxuICB0aGlzLmNodW5rcyA9IFtdO1xuICB0aGlzLmVyciA9IHN0YXR1cztcbiAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xufTtcblxuXG4vKipcbiAqIGRlZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5XG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXlCdWZmZXJ8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ29tcHJlc3MgYGRhdGFgIHdpdGggZGVmbGF0ZSBhbGdvcml0aG0gYW5kIGBvcHRpb25zYC5cbiAqXG4gKiBTdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gKlxuICogLSBsZXZlbFxuICogLSB3aW5kb3dCaXRzXG4gKiAtIG1lbUxldmVsXG4gKiAtIHN0cmF0ZWd5XG4gKiAtIGRpY3Rpb25hcnlcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBTdWdhciAob3B0aW9ucyk6XG4gKlxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeVxuICogICBuZWdhdGl2ZSB3aW5kb3dCaXRzIGltcGxpY2l0bHkuXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSk7XG4gKlxuICogY29uc29sZS5sb2cocGFrby5kZWZsYXRlKGRhdGEpKTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gZGVmbGF0ZSQxKGlucHV0LCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmxhdG9yID0gbmV3IERlZmxhdGUkMShvcHRpb25zKTtcblxuICBkZWZsYXRvci5wdXNoKGlucHV0LCB0cnVlKTtcblxuICAvLyBUaGF0IHdpbGwgbmV2ZXIgaGFwcGVucywgaWYgeW91IGRvbid0IGNoZWF0IHdpdGggb3B0aW9ucyA6KVxuICBpZiAoZGVmbGF0b3IuZXJyKSB7IHRocm93IGRlZmxhdG9yLm1zZyB8fCBtZXNzYWdlc1tkZWZsYXRvci5lcnJdOyB9XG5cbiAgcmV0dXJuIGRlZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGRlZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5XG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXlCdWZmZXJ8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tkZWZsYXRlXV0sIGJ1dCBjcmVhdGVzIHJhdyBkYXRhLCB3aXRob3V0IHdyYXBwZXJcbiAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS5cbiAqKi9cbmZ1bmN0aW9uIGRlZmxhdGVSYXckMShpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG4vKipcbiAqIGd6aXAoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5XG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXlCdWZmZXJ8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tkZWZsYXRlXV0sIGJ1dCBjcmVhdGUgZ3ppcCB3cmFwcGVyIGluc3RlYWQgb2ZcbiAqIGRlZmxhdGUgb25lLlxuICoqL1xuZnVuY3Rpb24gZ3ppcCQxKGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmd6aXAgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG52YXIgRGVmbGF0ZV8xJDEgPSBEZWZsYXRlJDE7XG52YXIgZGVmbGF0ZV8yID0gZGVmbGF0ZSQxO1xudmFyIGRlZmxhdGVSYXdfMSQxID0gZGVmbGF0ZVJhdyQxO1xudmFyIGd6aXBfMSQxID0gZ3ppcCQxO1xudmFyIGNvbnN0YW50cyQxID0gY29uc3RhbnRzJDI7XG5cbnZhciBkZWZsYXRlXzEkMSA9IHtcblx0RGVmbGF0ZTogRGVmbGF0ZV8xJDEsXG5cdGRlZmxhdGU6IGRlZmxhdGVfMixcblx0ZGVmbGF0ZVJhdzogZGVmbGF0ZVJhd18xJDEsXG5cdGd6aXA6IGd6aXBfMSQxLFxuXHRjb25zdGFudHM6IGNvbnN0YW50cyQxXG59O1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFNlZSBzdGF0ZSBkZWZzIGZyb20gaW5mbGF0ZS5qc1xuY29uc3QgQkFEJDEgPSAxNjIwOTsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuY29uc3QgVFlQRSQxID0gMTYxOTE7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xuXG4vKlxuICAgRGVjb2RlIGxpdGVyYWwsIGxlbmd0aCwgYW5kIGRpc3RhbmNlIGNvZGVzIGFuZCB3cml0ZSBvdXQgdGhlIHJlc3VsdGluZ1xuICAgbGl0ZXJhbCBhbmQgbWF0Y2ggYnl0ZXMgdW50aWwgZWl0aGVyIG5vdCBlbm91Z2ggaW5wdXQgb3Igb3V0cHV0IGlzXG4gICBhdmFpbGFibGUsIGFuIGVuZC1vZi1ibG9jayBpcyBlbmNvdW50ZXJlZCwgb3IgYSBkYXRhIGVycm9yIGlzIGVuY291bnRlcmVkLlxuICAgV2hlbiBsYXJnZSBlbm91Z2ggaW5wdXQgYW5kIG91dHB1dCBidWZmZXJzIGFyZSBzdXBwbGllZCB0byBpbmZsYXRlKCksIGZvclxuICAgZXhhbXBsZSwgYSAxNksgaW5wdXQgYnVmZmVyIGFuZCBhIDY0SyBvdXRwdXQgYnVmZmVyLCBtb3JlIHRoYW4gOTUlIG9mIHRoZVxuICAgaW5mbGF0ZSBleGVjdXRpb24gdGltZSBpcyBzcGVudCBpbiB0aGlzIHJvdXRpbmUuXG5cbiAgIEVudHJ5IGFzc3VtcHRpb25zOlxuXG4gICAgICAgIHN0YXRlLm1vZGUgPT09IExFTlxuICAgICAgICBzdHJtLmF2YWlsX2luID49IDZcbiAgICAgICAgc3RybS5hdmFpbF9vdXQgPj0gMjU4XG4gICAgICAgIHN0YXJ0ID49IHN0cm0uYXZhaWxfb3V0XG4gICAgICAgIHN0YXRlLmJpdHMgPCA4XG5cbiAgIE9uIHJldHVybiwgc3RhdGUubW9kZSBpcyBvbmUgb2Y6XG5cbiAgICAgICAgTEVOIC0tIHJhbiBvdXQgb2YgZW5vdWdoIG91dHB1dCBzcGFjZSBvciBlbm91Z2ggYXZhaWxhYmxlIGlucHV0XG4gICAgICAgIFRZUEUgLS0gcmVhY2hlZCBlbmQgb2YgYmxvY2sgY29kZSwgaW5mbGF0ZSgpIHRvIGludGVycHJldCBuZXh0IGJsb2NrXG4gICAgICAgIEJBRCAtLSBlcnJvciBpbiBibG9jayBkYXRhXG5cbiAgIE5vdGVzOlxuXG4gICAgLSBUaGUgbWF4aW11bSBpbnB1dCBiaXRzIHVzZWQgYnkgYSBsZW5ndGgvZGlzdGFuY2UgcGFpciBpcyAxNSBiaXRzIGZvciB0aGVcbiAgICAgIGxlbmd0aCBjb2RlLCA1IGJpdHMgZm9yIHRoZSBsZW5ndGggZXh0cmEsIDE1IGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBjb2RlLFxuICAgICAgYW5kIDEzIGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBleHRyYS4gIFRoaXMgdG90YWxzIDQ4IGJpdHMsIG9yIHNpeCBieXRlcy5cbiAgICAgIFRoZXJlZm9yZSBpZiBzdHJtLmF2YWlsX2luID49IDYsIHRoZW4gdGhlcmUgaXMgZW5vdWdoIGlucHV0IHRvIGF2b2lkXG4gICAgICBjaGVja2luZyBmb3IgYXZhaWxhYmxlIGlucHV0IHdoaWxlIGRlY29kaW5nLlxuXG4gICAgLSBUaGUgbWF4aW11bSBieXRlcyB0aGF0IGEgc2luZ2xlIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGNhbiBvdXRwdXQgaXMgMjU4XG4gICAgICBieXRlcywgd2hpY2ggaXMgdGhlIG1heGltdW0gbGVuZ3RoIHRoYXQgY2FuIGJlIGNvZGVkLiAgaW5mbGF0ZV9mYXN0KClcbiAgICAgIHJlcXVpcmVzIHN0cm0uYXZhaWxfb3V0ID49IDI1OCBmb3IgZWFjaCBsb29wIHRvIGF2b2lkIGNoZWNraW5nIGZvclxuICAgICAgb3V0cHV0IHNwYWNlLlxuICovXG52YXIgaW5mZmFzdCA9IGZ1bmN0aW9uIGluZmxhdGVfZmFzdChzdHJtLCBzdGFydCkge1xuICBsZXQgX2luOyAgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5pbnB1dCAqL1xuICBsZXQgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogaGF2ZSBlbm91Z2ggaW5wdXQgd2hpbGUgaW4gPCBsYXN0ICovXG4gIGxldCBfb3V0OyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLm91dHB1dCAqL1xuICBsZXQgYmVnOyAgICAgICAgICAgICAgICAgICAgLyogaW5mbGF0ZSgpJ3MgaW5pdGlhbCBzdHJtLm91dHB1dCAqL1xuICBsZXQgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogd2hpbGUgb3V0IDwgZW5kLCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlICovXG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICBsZXQgZG1heDsgICAgICAgICAgICAgICAgICAgLyogbWF4aW11bSBkaXN0YW5jZSBmcm9tIHpsaWIgaGVhZGVyICovXG4vLyNlbmRpZlxuICBsZXQgd3NpemU7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIGxldCB3aGF2ZTsgICAgICAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIGxldCB3bmV4dDsgICAgICAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgLy8gVXNlIGBzX3dpbmRvd2AgaW5zdGVhZCBgd2luZG93YCwgYXZvaWQgY29uZmxpY3Qgd2l0aCBpbnN0cnVtZW50YXRpb24gdG9vbHNcbiAgbGV0IHNfd2luZG93OyAgICAgICAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgd3NpemUgIT0gMCAqL1xuICBsZXQgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5ob2xkICovXG4gIGxldCBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmJpdHMgKi9cbiAgbGV0IGxjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0ubGVuY29kZSAqL1xuICBsZXQgZGNvZGU7ICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5kaXN0Y29kZSAqL1xuICBsZXQgbG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgbGVuZ3RoIGNvZGVzICovXG4gIGxldCBkbWFzazsgICAgICAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuICBsZXQgaGVyZTsgICAgICAgICAgICAgICAgICAgLyogcmV0cmlldmVkIHRhYmxlIGVudHJ5ICovXG4gIGxldCBvcDsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICB3aW5kb3cgcG9zaXRpb24sIHdpbmRvdyBieXRlcyB0byBjb3B5ICovXG4gIGxldCBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGgsIHVudXNlZCBieXRlcyAqL1xuICBsZXQgZGlzdDsgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggZGlzdGFuY2UgKi9cbiAgbGV0IGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggZnJvbSAqL1xuICBsZXQgZnJvbV9zb3VyY2U7XG5cblxuICBsZXQgaW5wdXQsIG91dHB1dDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuXG4gIC8qIGNvcHkgc3RhdGUgdG8gbG9jYWwgdmFyaWFibGVzICovXG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgLy9oZXJlID0gc3RhdGUuaGVyZTtcbiAgX2luID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGxhc3QgPSBfaW4gKyAoc3RybS5hdmFpbF9pbiAtIDUpO1xuICBfb3V0ID0gc3RybS5uZXh0X291dDtcbiAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gIGJlZyA9IF9vdXQgLSAoc3RhcnQgLSBzdHJtLmF2YWlsX291dCk7XG4gIGVuZCA9IF9vdXQgKyAoc3RybS5hdmFpbF9vdXQgLSAyNTcpO1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgZG1heCA9IHN0YXRlLmRtYXg7XG4vLyNlbmRpZlxuICB3c2l6ZSA9IHN0YXRlLndzaXplO1xuICB3aGF2ZSA9IHN0YXRlLndoYXZlO1xuICB3bmV4dCA9IHN0YXRlLnduZXh0O1xuICBzX3dpbmRvdyA9IHN0YXRlLndpbmRvdztcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICBsY29kZSA9IHN0YXRlLmxlbmNvZGU7XG4gIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XG4gIGxtYXNrID0gKDEgPDwgc3RhdGUubGVuYml0cykgLSAxO1xuICBkbWFzayA9ICgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDE7XG5cblxuICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2hcbiAgICAgaW5wdXQgZGF0YSBvciBvdXRwdXQgc3BhY2UgKi9cblxuICB0b3A6XG4gIGRvIHtcbiAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgYml0cyArPSA4O1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICB9XG5cbiAgICBoZXJlID0gbGNvZGVbaG9sZCAmIGxtYXNrXTtcblxuICAgIGRvbGVuOlxuICAgIGZvciAoOzspIHsgLy8gR290byBlbXVsYXRpb25cbiAgICAgIG9wID0gaGVyZSA+Pj4gMjQvKmhlcmUuYml0cyovO1xuICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgYml0cyAtPSBvcDtcbiAgICAgIG9wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmYvKmhlcmUub3AqLztcbiAgICAgIGlmIChvcCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGl0ZXJhbCAqL1xuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIGJhc2UgKi9cbiAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgb3AgJj0gMTU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgaWYgKG9wKSB7XG4gICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgbGVuKSk7XG4gICAgICAgIGlmIChiaXRzIDwgMTUpIHtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTtcblxuICAgICAgICBkb2Rpc3Q6XG4gICAgICAgIGZvciAoOzspIHsgLy8gZ290byBlbXVsYXRpb25cbiAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgICAgICBob2xkID4+Pj0gb3A7XG4gICAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG5cbiAgICAgICAgICBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYXNlICovXG4gICAgICAgICAgICBkaXN0ID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpc3QgKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgICAgICAgICBpZiAoZGlzdCA+IGRtYXgpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgICAgICBob2xkID4+Pj0gb3A7XG4gICAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBkaXN0KSk7XG4gICAgICAgICAgICBvcCA9IF9vdXQgLSBiZWc7ICAgICAgICAgICAgICAgIC8qIG1heCBkaXN0YW5jZSBpbiBvdXRwdXQgKi9cbiAgICAgICAgICAgIGlmIChkaXN0ID4gb3ApIHsgICAgICAgICAgICAgICAgLyogc2VlIGlmIGNvcHkgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgb3AgPSBkaXN0IC0gb3A7ICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFjayBpbiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgaWYgKG9wID4gd2hhdmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xuICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG4vLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG4vLyAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbi8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0O1xuLy8gICAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKChvcCAmIDY0KSA9PT0gMCkgeyAgICAgICAgICAgICAgLyogMm5kIGxldmVsIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGhlcmUgPSBsY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuICAgICAgICBjb250aW51ZSBkb2xlbjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG9wICYgMzIpIHsgICAgICAgICAgICAgICAgICAgICAvKiBlbmQtb2YtYmxvY2sgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRSQxO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlJztcbiAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgfVxuICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpO1xuXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICBsZW4gPSBiaXRzID4+IDM7XG4gIF9pbiAtPSBsZW47XG4gIGJpdHMgLT0gbGVuIDw8IDM7XG4gIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXG4gIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcbiAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgcmV0dXJuO1xufTtcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5jb25zdCBNQVhCSVRTID0gMTU7XG5jb25zdCBFTk9VR0hfTEVOUyQxID0gODUyO1xuY29uc3QgRU5PVUdIX0RJU1RTJDEgPSA1OTI7XG4vL2NvbnN0IEVOT1VHSCA9IChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG5jb25zdCBDT0RFUyQxID0gMDtcbmNvbnN0IExFTlMkMSA9IDE7XG5jb25zdCBESVNUUyQxID0gMjtcblxuY29uc3QgbGJhc2UgPSBuZXcgVWludDE2QXJyYXkoWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgYmFzZSAqL1xuICAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLFxuICAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMFxuXSk7XG5cbmNvbnN0IGxleHQgPSBuZXcgVWludDhBcnJheShbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBleHRyYSAqL1xuICAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCxcbiAgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMTYsIDcyLCA3OFxuXSk7XG5cbmNvbnN0IGRiYXNlID0gbmV3IFVpbnQxNkFycmF5KFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgYmFzZSAqL1xuICAxLCAyLCAzLCA0LCA1LCA3LCA5LCAxMywgMTcsIDI1LCAzMywgNDksIDY1LCA5NywgMTI5LCAxOTMsXG4gIDI1NywgMzg1LCA1MTMsIDc2OSwgMTAyNSwgMTUzNywgMjA0OSwgMzA3MywgNDA5NywgNjE0NSxcbiAgODE5MywgMTIyODksIDE2Mzg1LCAyNDU3NywgMCwgMFxuXSk7XG5cbmNvbnN0IGRleHQgPSBuZXcgVWludDhBcnJheShbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE4LCAxOCwgMTksIDE5LCAyMCwgMjAsIDIxLCAyMSwgMjIsIDIyLFxuICAyMywgMjMsIDI0LCAyNCwgMjUsIDI1LCAyNiwgMjYsIDI3LCAyNyxcbiAgMjgsIDI4LCAyOSwgMjksIDY0LCA2NFxuXSk7XG5cbmNvbnN0IGluZmxhdGVfdGFibGUgPSAodHlwZSwgbGVucywgbGVuc19pbmRleCwgY29kZXMsIHRhYmxlLCB0YWJsZV9pbmRleCwgd29yaywgb3B0cykgPT5cbntcbiAgY29uc3QgYml0cyA9IG9wdHMuYml0cztcbiAgICAgIC8vaGVyZSA9IG9wdHMuaGVyZTsgLyogdGFibGUgZW50cnkgZm9yIGR1cGxpY2F0aW9uICovXG5cbiAgbGV0IGxlbiA9IDA7ICAgICAgICAgICAgICAgLyogYSBjb2RlJ3MgbGVuZ3RoIGluIGJpdHMgKi9cbiAgbGV0IHN5bSA9IDA7ICAgICAgICAgICAgICAgLyogaW5kZXggb2YgY29kZSBzeW1ib2xzICovXG4gIGxldCBtaW4gPSAwLCBtYXggPSAwOyAgICAgICAgICAvKiBtaW5pbXVtIGFuZCBtYXhpbXVtIGNvZGUgbGVuZ3RocyAqL1xuICBsZXQgcm9vdCA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3Igcm9vdCB0YWJsZSAqL1xuICBsZXQgY3VyciA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgY3VycmVudCB0YWJsZSAqL1xuICBsZXQgZHJvcCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMgdG8gZHJvcCBmb3Igc3ViLXRhYmxlICovXG4gIGxldCBsZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHByZWZpeCBjb2RlcyBhdmFpbGFibGUgKi9cbiAgbGV0IHVzZWQgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBlbnRyaWVzIGluIHRhYmxlIHVzZWQgKi9cbiAgbGV0IGh1ZmYgPSAwOyAgICAgICAgICAgICAgLyogSHVmZm1hbiBjb2RlICovXG4gIGxldCBpbmNyOyAgICAgICAgICAgICAgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqL1xuICBsZXQgZmlsbDsgICAgICAgICAgICAgIC8qIGluZGV4IGZvciByZXBsaWNhdGluZyBlbnRyaWVzICovXG4gIGxldCBsb3c7ICAgICAgICAgICAgICAgLyogbG93IGJpdHMgZm9yIGN1cnJlbnQgcm9vdCBlbnRyeSAqL1xuICBsZXQgbWFzazsgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyByb290IGJpdHMgKi9cbiAgbGV0IG5leHQ7ICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIHRhYmxlICovXG4gIGxldCBiYXNlID0gbnVsbDsgICAgIC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovXG4vLyAgbGV0IHNob2V4dHJhOyAgICAvKiBleHRyYSBiaXRzIHRhYmxlIHRvIHVzZSAqL1xuICBsZXQgbWF0Y2g7ICAgICAgICAgICAgICAgICAgLyogdXNlIGJhc2UgYW5kIGV4dHJhIGZvciBzeW1ib2wgPj0gbWF0Y2ggKi9cbiAgY29uc3QgY291bnQgPSBuZXcgVWludDE2QXJyYXkoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAvKiBudW1iZXIgb2YgY29kZXMgb2YgZWFjaCBsZW5ndGggKi9cbiAgY29uc3Qgb2ZmcyA9IG5ldyBVaW50MTZBcnJheShNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgICAvKiBvZmZzZXRzIGluIHRhYmxlIGZvciBlYWNoIGxlbmd0aCAqL1xuICBsZXQgZXh0cmEgPSBudWxsO1xuXG4gIGxldCBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsO1xuXG4gIC8qXG4gICBQcm9jZXNzIGEgc2V0IG9mIGNvZGUgbGVuZ3RocyB0byBjcmVhdGUgYSBjYW5vbmljYWwgSHVmZm1hbiBjb2RlLiAgVGhlXG4gICBjb2RlIGxlbmd0aHMgYXJlIGxlbnNbMC4uY29kZXMtMV0uICBFYWNoIGxlbmd0aCBjb3JyZXNwb25kcyB0byB0aGVcbiAgIHN5bWJvbHMgMC4uY29kZXMtMS4gIFRoZSBIdWZmbWFuIGNvZGUgaXMgZ2VuZXJhdGVkIGJ5IGZpcnN0IHNvcnRpbmcgdGhlXG4gICBzeW1ib2xzIGJ5IGxlbmd0aCBmcm9tIHNob3J0IHRvIGxvbmcsIGFuZCByZXRhaW5pbmcgdGhlIHN5bWJvbCBvcmRlclxuICAgZm9yIGNvZGVzIHdpdGggZXF1YWwgbGVuZ3Rocy4gIFRoZW4gdGhlIGNvZGUgc3RhcnRzIHdpdGggYWxsIHplcm8gYml0c1xuICAgZm9yIHRoZSBmaXJzdCBjb2RlIG9mIHRoZSBzaG9ydGVzdCBsZW5ndGgsIGFuZCB0aGUgY29kZXMgYXJlIGludGVnZXJcbiAgIGluY3JlbWVudHMgZm9yIHRoZSBzYW1lIGxlbmd0aCwgYW5kIHplcm9zIGFyZSBhcHBlbmRlZCBhcyB0aGUgbGVuZ3RoXG4gICBpbmNyZWFzZXMuICBGb3IgdGhlIGRlZmxhdGUgZm9ybWF0LCB0aGVzZSBiaXRzIGFyZSBzdG9yZWQgYmFja3dhcmRzXG4gICBmcm9tIHRoZWlyIG1vcmUgbmF0dXJhbCBpbnRlZ2VyIGluY3JlbWVudCBvcmRlcmluZywgYW5kIHNvIHdoZW4gdGhlXG4gICBkZWNvZGluZyB0YWJsZXMgYXJlIGJ1aWx0IGluIHRoZSBsYXJnZSBsb29wIGJlbG93LCB0aGUgaW50ZWdlciBjb2Rlc1xuICAgYXJlIGluY3JlbWVudGVkIGJhY2t3YXJkcy5cblxuICAgVGhpcyByb3V0aW5lIGFzc3VtZXMsIGJ1dCBkb2VzIG5vdCBjaGVjaywgdGhhdCBhbGwgb2YgdGhlIGVudHJpZXMgaW5cbiAgIGxlbnNbXSBhcmUgaW4gdGhlIHJhbmdlIDAuLk1BWEJJVFMuICBUaGUgY2FsbGVyIG11c3QgYXNzdXJlIHRoaXMuXG4gICAxLi5NQVhCSVRTIGlzIGludGVycHJldGVkIGFzIHRoYXQgY29kZSBsZW5ndGguICB6ZXJvIG1lYW5zIHRoYXQgdGhhdFxuICAgc3ltYm9sIGRvZXMgbm90IG9jY3VyIGluIHRoaXMgY29kZS5cblxuICAgVGhlIGNvZGVzIGFyZSBzb3J0ZWQgYnkgY29tcHV0aW5nIGEgY291bnQgb2YgY29kZXMgZm9yIGVhY2ggbGVuZ3RoLFxuICAgY3JlYXRpbmcgZnJvbSB0aGF0IGEgdGFibGUgb2Ygc3RhcnRpbmcgaW5kaWNlcyBmb3IgZWFjaCBsZW5ndGggaW4gdGhlXG4gICBzb3J0ZWQgdGFibGUsIGFuZCB0aGVuIGVudGVyaW5nIHRoZSBzeW1ib2xzIGluIG9yZGVyIGluIHRoZSBzb3J0ZWRcbiAgIHRhYmxlLiAgVGhlIHNvcnRlZCB0YWJsZSBpcyB3b3JrW10sIHdpdGggdGhhdCBzcGFjZSBiZWluZyBwcm92aWRlZCBieVxuICAgdGhlIGNhbGxlci5cblxuICAgVGhlIGxlbmd0aCBjb3VudHMgYXJlIHVzZWQgZm9yIG90aGVyIHB1cnBvc2VzIGFzIHdlbGwsIGkuZS4gZmluZGluZ1xuICAgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gbGVuZ3RoIGNvZGVzLCBkZXRlcm1pbmluZyBpZiB0aGVyZSBhcmUgYW55XG4gICBjb2RlcyBhdCBhbGwsIGNoZWNraW5nIGZvciBhIHZhbGlkIHNldCBvZiBsZW5ndGhzLCBhbmQgbG9va2luZyBhaGVhZFxuICAgYXQgbGVuZ3RoIGNvdW50cyB0byBkZXRlcm1pbmUgc3ViLXRhYmxlIHNpemVzIHdoZW4gYnVpbGRpbmcgdGhlXG4gICBkZWNvZGluZyB0YWJsZXMuXG4gICAqL1xuXG4gIC8qIGFjY3VtdWxhdGUgbGVuZ3RocyBmb3IgY29kZXMgKGFzc3VtZXMgbGVuc1tdIGFsbCBpbiAwLi5NQVhCSVRTKSAqL1xuICBmb3IgKGxlbiA9IDA7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuICAgIGNvdW50W2xlbl0gPSAwO1xuICB9XG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgY291bnRbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rKztcbiAgfVxuXG4gIC8qIGJvdW5kIGNvZGUgbGVuZ3RocywgZm9yY2Ugcm9vdCB0byBiZSB3aXRoaW4gY29kZSBsZW5ndGhzICovXG4gIHJvb3QgPSBiaXRzO1xuICBmb3IgKG1heCA9IE1BWEJJVFM7IG1heCA+PSAxOyBtYXgtLSkge1xuICAgIGlmIChjb3VudFttYXhdICE9PSAwKSB7IGJyZWFrOyB9XG4gIH1cbiAgaWYgKHJvb3QgPiBtYXgpIHtcbiAgICByb290ID0gbWF4O1xuICB9XG4gIGlmIChtYXggPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAvKiBubyBzeW1ib2xzIHRvIGNvZGUgYXQgYWxsICovXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0OyAgLy9oZXJlLm9wID0gKHZhciBjaGFyKTY0OyAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsgICAvL2hlcmUuYml0cyA9ICh2YXIgY2hhcikxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwOyAgIC8vaGVyZS52YWwgPSAodmFyIHNob3J0KTA7XG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0O1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7XG4gICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7XG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuICAgIG9wdHMuYml0cyA9IDE7XG4gICAgcmV0dXJuIDA7ICAgICAvKiBubyBzeW1ib2xzLCBidXQgd2FpdCBmb3IgZGVjb2RpbmcgdG8gcmVwb3J0IGVycm9yICovXG4gIH1cbiAgZm9yIChtaW4gPSAxOyBtaW4gPCBtYXg7IG1pbisrKSB7XG4gICAgaWYgKGNvdW50W21pbl0gIT09IDApIHsgYnJlYWs7IH1cbiAgfVxuICBpZiAocm9vdCA8IG1pbikge1xuICAgIHJvb3QgPSBtaW47XG4gIH1cblxuICAvKiBjaGVjayBmb3IgYW4gb3Zlci1zdWJzY3JpYmVkIG9yIGluY29tcGxldGUgc2V0IG9mIGxlbmd0aHMgKi9cbiAgbGVmdCA9IDE7XG4gIGZvciAobGVuID0gMTsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgbGVmdCA8PD0gMTtcbiAgICBsZWZ0IC09IGNvdW50W2xlbl07XG4gICAgaWYgKGxlZnQgPCAwKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSAgICAgICAgLyogb3Zlci1zdWJzY3JpYmVkICovXG4gIH1cbiAgaWYgKGxlZnQgPiAwICYmICh0eXBlID09PSBDT0RFUyQxIHx8IG1heCAhPT0gMSkpIHtcbiAgICByZXR1cm4gLTE7ICAgICAgICAgICAgICAgICAgICAgIC8qIGluY29tcGxldGUgc2V0ICovXG4gIH1cblxuICAvKiBnZW5lcmF0ZSBvZmZzZXRzIGludG8gc3ltYm9sIHRhYmxlIGZvciBlYWNoIGxlbmd0aCBmb3Igc29ydGluZyAqL1xuICBvZmZzWzFdID0gMDtcbiAgZm9yIChsZW4gPSAxOyBsZW4gPCBNQVhCSVRTOyBsZW4rKykge1xuICAgIG9mZnNbbGVuICsgMV0gPSBvZmZzW2xlbl0gKyBjb3VudFtsZW5dO1xuICB9XG5cbiAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqL1xuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgIGlmIChsZW5zW2xlbnNfaW5kZXggKyBzeW1dICE9PSAwKSB7XG4gICAgICB3b3JrW29mZnNbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rK10gPSBzeW07XG4gICAgfVxuICB9XG5cbiAgLypcbiAgIENyZWF0ZSBhbmQgZmlsbCBpbiBkZWNvZGluZyB0YWJsZXMuICBJbiB0aGlzIGxvb3AsIHRoZSB0YWJsZSBiZWluZ1xuICAgZmlsbGVkIGlzIGF0IG5leHQgYW5kIGhhcyBjdXJyIGluZGV4IGJpdHMuICBUaGUgY29kZSBiZWluZyB1c2VkIGlzIGh1ZmZcbiAgIHdpdGggbGVuZ3RoIGxlbi4gIFRoYXQgY29kZSBpcyBjb252ZXJ0ZWQgdG8gYW4gaW5kZXggYnkgZHJvcHBpbmcgZHJvcFxuICAgYml0cyBvZmYgb2YgdGhlIGJvdHRvbS4gIEZvciBjb2RlcyB3aGVyZSBsZW4gaXMgbGVzcyB0aGFuIGRyb3AgKyBjdXJyLFxuICAgdGhvc2UgdG9wIGRyb3AgKyBjdXJyIC0gbGVuIGJpdHMgYXJlIGluY3JlbWVudGVkIHRocm91Z2ggYWxsIHZhbHVlcyB0b1xuICAgZmlsbCB0aGUgdGFibGUgd2l0aCByZXBsaWNhdGVkIGVudHJpZXMuXG5cbiAgIHJvb3QgaXMgdGhlIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciB0aGUgcm9vdCB0YWJsZS4gIFdoZW4gbGVuIGV4Y2VlZHNcbiAgIHJvb3QsIHN1Yi10YWJsZXMgYXJlIGNyZWF0ZWQgcG9pbnRlZCB0byBieSB0aGUgcm9vdCBlbnRyeSB3aXRoIGFuIGluZGV4XG4gICBvZiB0aGUgbG93IHJvb3QgYml0cyBvZiBodWZmLiAgVGhpcyBpcyBzYXZlZCBpbiBsb3cgdG8gY2hlY2sgZm9yIHdoZW4gYVxuICAgbmV3IHN1Yi10YWJsZSBzaG91bGQgYmUgc3RhcnRlZC4gIGRyb3AgaXMgemVybyB3aGVuIHRoZSByb290IHRhYmxlIGlzXG4gICBiZWluZyBmaWxsZWQsIGFuZCBkcm9wIGlzIHJvb3Qgd2hlbiBzdWItdGFibGVzIGFyZSBiZWluZyBmaWxsZWQuXG5cbiAgIFdoZW4gYSBuZXcgc3ViLXRhYmxlIGlzIG5lZWRlZCwgaXQgaXMgbmVjZXNzYXJ5IHRvIGxvb2sgYWhlYWQgaW4gdGhlXG4gICBjb2RlIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHdoYXQgc2l6ZSBzdWItdGFibGUgaXMgbmVlZGVkLiAgVGhlIGxlbmd0aFxuICAgY291bnRzIGFyZSB1c2VkIGZvciB0aGlzLCBhbmQgc28gY291bnRbXSBpcyBkZWNyZW1lbnRlZCBhcyBjb2RlcyBhcmVcbiAgIGVudGVyZWQgaW4gdGhlIHRhYmxlcy5cblxuICAgdXNlZCBrZWVwcyB0cmFjayBvZiBob3cgbWFueSB0YWJsZSBlbnRyaWVzIGhhdmUgYmVlbiBhbGxvY2F0ZWQgZnJvbSB0aGVcbiAgIHByb3ZpZGVkICp0YWJsZSBzcGFjZS4gIEl0IGlzIGNoZWNrZWQgZm9yIExFTlMgYW5kIERJU1QgdGFibGVzIGFnYWluc3RcbiAgIHRoZSBjb25zdGFudHMgRU5PVUdIX0xFTlMgYW5kIEVOT1VHSF9ESVNUUyB0byBndWFyZCBhZ2FpbnN0IGNoYW5nZXMgaW5cbiAgIHRoZSBpbml0aWFsIHJvb3QgdGFibGUgc2l6ZSBjb25zdGFudHMuICBTZWUgdGhlIGNvbW1lbnRzIGluIGluZnRyZWVzLmhcbiAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4gICBzeW0gaW5jcmVtZW50cyB0aHJvdWdoIGFsbCBzeW1ib2xzLCBhbmQgdGhlIGxvb3AgdGVybWluYXRlcyB3aGVuXG4gICBhbGwgY29kZXMgb2YgbGVuZ3RoIG1heCwgaS5lLiBhbGwgY29kZXMsIGhhdmUgYmVlbiBwcm9jZXNzZWQuICBUaGlzXG4gICByb3V0aW5lIHBlcm1pdHMgaW5jb21wbGV0ZSBjb2Rlcywgc28gYW5vdGhlciBsb29wIGFmdGVyIHRoaXMgb25lIGZpbGxzXG4gICBpbiB0aGUgcmVzdCBvZiB0aGUgZGVjb2RpbmcgdGFibGVzIHdpdGggaW52YWxpZCBjb2RlIG1hcmtlcnMuXG4gICAqL1xuXG4gIC8qIHNldCB1cCBmb3IgY29kZSB0eXBlICovXG4gIC8vIHBvb3IgbWFuIG9wdGltaXphdGlvbiAtIHVzZSBpZi1lbHNlIGluc3RlYWQgb2Ygc3dpdGNoLFxuICAvLyB0byBhdm9pZCBkZW9wdHMgaW4gb2xkIHY4XG4gIGlmICh0eXBlID09PSBDT0RFUyQxKSB7XG4gICAgYmFzZSA9IGV4dHJhID0gd29yazsgICAgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG4gICAgbWF0Y2ggPSAyMDtcblxuICB9IGVsc2UgaWYgKHR5cGUgPT09IExFTlMkMSkge1xuICAgIGJhc2UgPSBsYmFzZTtcbiAgICBleHRyYSA9IGxleHQ7XG4gICAgbWF0Y2ggPSAyNTc7XG5cbiAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgIC8qIERJU1RTICovXG4gICAgYmFzZSA9IGRiYXNlO1xuICAgIGV4dHJhID0gZGV4dDtcbiAgICBtYXRjaCA9IDA7XG4gIH1cblxuICAvKiBpbml0aWFsaXplIG9wdHMgZm9yIGxvb3AgKi9cbiAgaHVmZiA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgKi9cbiAgc3ltID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgc3ltYm9sICovXG4gIGxlbiA9IG1pbjsgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIGxlbmd0aCAqL1xuICBuZXh0ID0gdGFibGVfaW5kZXg7ICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIHRvIGZpbGwgaW4gKi9cbiAgY3VyciA9IHJvb3Q7ICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgaW5kZXggYml0cyAqL1xuICBkcm9wID0gMDsgICAgICAgICAgICAgICAgICAgLyogY3VycmVudCBiaXRzIHRvIGRyb3AgZnJvbSBjb2RlIGZvciBpbmRleCAqL1xuICBsb3cgPSAtMTsgICAgICAgICAgICAgICAgICAgLyogdHJpZ2dlciBuZXcgc3ViLXRhYmxlIHdoZW4gbGVuID4gcm9vdCAqL1xuICB1c2VkID0gMSA8PCByb290OyAgICAgICAgICAvKiB1c2Ugcm9vdCB0YWJsZSBlbnRyaWVzICovXG4gIG1hc2sgPSB1c2VkIC0gMTsgICAgICAgICAgICAvKiBtYXNrIGZvciBjb21wYXJpbmcgbG93ICovXG5cbiAgLyogY2hlY2sgYXZhaWxhYmxlIHRhYmxlIHNwYWNlICovXG4gIGlmICgodHlwZSA9PT0gTEVOUyQxICYmIHVzZWQgPiBFTk9VR0hfTEVOUyQxKSB8fFxuICAgICh0eXBlID09PSBESVNUUyQxICYmIHVzZWQgPiBFTk9VR0hfRElTVFMkMSkpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8qIHByb2Nlc3MgYWxsIGNvZGVzIGFuZCBtYWtlIHRhYmxlIGVudHJpZXMgKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIGNyZWF0ZSB0YWJsZSBlbnRyeSAqL1xuICAgIGhlcmVfYml0cyA9IGxlbiAtIGRyb3A7XG4gICAgaWYgKHdvcmtbc3ltXSArIDEgPCBtYXRjaCkge1xuICAgICAgaGVyZV9vcCA9IDA7XG4gICAgICBoZXJlX3ZhbCA9IHdvcmtbc3ltXTtcbiAgICB9XG4gICAgZWxzZSBpZiAod29ya1tzeW1dID49IG1hdGNoKSB7XG4gICAgICBoZXJlX29wID0gZXh0cmFbd29ya1tzeW1dIC0gbWF0Y2hdO1xuICAgICAgaGVyZV92YWwgPSBiYXNlW3dvcmtbc3ltXSAtIG1hdGNoXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBoZXJlX29wID0gMzIgKyA2NDsgICAgICAgICAvKiBlbmQgb2YgYmxvY2sgKi9cbiAgICAgIGhlcmVfdmFsID0gMDtcbiAgICB9XG5cbiAgICAvKiByZXBsaWNhdGUgZm9yIHRob3NlIGluZGljZXMgd2l0aCBsb3cgbGVuIGJpdHMgZXF1YWwgdG8gaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSBkcm9wKTtcbiAgICBmaWxsID0gMSA8PCBjdXJyO1xuICAgIG1pbiA9IGZpbGw7ICAgICAgICAgICAgICAgICAvKiBzYXZlIG9mZnNldCB0byBuZXh0IHRhYmxlICovXG4gICAgZG8ge1xuICAgICAgZmlsbCAtPSBpbmNyO1xuICAgICAgdGFibGVbbmV4dCArIChodWZmID4+IGRyb3ApICsgZmlsbF0gPSAoaGVyZV9iaXRzIDw8IDI0KSB8IChoZXJlX29wIDw8IDE2KSB8IGhlcmVfdmFsIHwwO1xuICAgIH0gd2hpbGUgKGZpbGwgIT09IDApO1xuXG4gICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cbiAgICBpbmNyID0gMSA8PCAobGVuIC0gMSk7XG4gICAgd2hpbGUgKGh1ZmYgJiBpbmNyKSB7XG4gICAgICBpbmNyID4+PSAxO1xuICAgIH1cbiAgICBpZiAoaW5jciAhPT0gMCkge1xuICAgICAgaHVmZiAmPSBpbmNyIC0gMTtcbiAgICAgIGh1ZmYgKz0gaW5jcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaHVmZiA9IDA7XG4gICAgfVxuXG4gICAgLyogZ28gdG8gbmV4dCBzeW1ib2wsIHVwZGF0ZSBjb3VudCwgbGVuICovXG4gICAgc3ltKys7XG4gICAgaWYgKC0tY291bnRbbGVuXSA9PT0gMCkge1xuICAgICAgaWYgKGxlbiA9PT0gbWF4KSB7IGJyZWFrOyB9XG4gICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cblxuICAgIC8qIGNyZWF0ZSBuZXcgc3ViLXRhYmxlIGlmIG5lZWRlZCAqL1xuICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuICAgICAgLyogaWYgZmlyc3QgdGltZSwgdHJhbnNpdGlvbiB0byBzdWItdGFibGVzICovXG4gICAgICBpZiAoZHJvcCA9PT0gMCkge1xuICAgICAgICBkcm9wID0gcm9vdDtcbiAgICAgIH1cblxuICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqL1xuICAgICAgbmV4dCArPSBtaW47ICAgICAgICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovXG5cbiAgICAgIC8qIGRldGVybWluZSBsZW5ndGggb2YgbmV4dCB0YWJsZSAqL1xuICAgICAgY3VyciA9IGxlbiAtIGRyb3A7XG4gICAgICBsZWZ0ID0gMSA8PCBjdXJyO1xuICAgICAgd2hpbGUgKGN1cnIgKyBkcm9wIDwgbWF4KSB7XG4gICAgICAgIGxlZnQgLT0gY291bnRbY3VyciArIGRyb3BdO1xuICAgICAgICBpZiAobGVmdCA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIGN1cnIrKztcbiAgICAgICAgbGVmdCA8PD0gMTtcbiAgICAgIH1cblxuICAgICAgLyogY2hlY2sgZm9yIGVub3VnaCBzcGFjZSAqL1xuICAgICAgdXNlZCArPSAxIDw8IGN1cnI7XG4gICAgICBpZiAoKHR5cGUgPT09IExFTlMkMSAmJiB1c2VkID4gRU5PVUdIX0xFTlMkMSkgfHxcbiAgICAgICAgKHR5cGUgPT09IERJU1RTJDEgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUyQxKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLyogcG9pbnQgZW50cnkgaW4gcm9vdCB0YWJsZSB0byBzdWItdGFibGUgKi9cbiAgICAgIGxvdyA9IGh1ZmYgJiBtYXNrO1xuICAgICAgLyp0YWJsZS5vcFtsb3ddID0gY3VycjtcbiAgICAgIHRhYmxlLmJpdHNbbG93XSA9IHJvb3Q7XG4gICAgICB0YWJsZS52YWxbbG93XSA9IG5leHQgLSBvcHRzLnRhYmxlX2luZGV4OyovXG4gICAgICB0YWJsZVtsb3ddID0gKHJvb3QgPDwgMjQpIHwgKGN1cnIgPDwgMTYpIHwgKG5leHQgLSB0YWJsZV9pbmRleCkgfDA7XG4gICAgfVxuICB9XG5cbiAgLyogZmlsbCBpbiByZW1haW5pbmcgdGFibGUgZW50cnkgaWYgY29kZSBpcyBpbmNvbXBsZXRlIChndWFyYW50ZWVkIHRvIGhhdmVcbiAgIGF0IG1vc3Qgb25lIHJlbWFpbmluZyBlbnRyeSwgc2luY2UgaWYgdGhlIGNvZGUgaXMgaW5jb21wbGV0ZSwgdGhlXG4gICBtYXhpbXVtIGNvZGUgbGVuZ3RoIHRoYXQgd2FzIGFsbG93ZWQgdG8gZ2V0IHRoaXMgZmFyIGlzIG9uZSBiaXQpICovXG4gIGlmIChodWZmICE9PSAwKSB7XG4gICAgLy90YWJsZS5vcFtuZXh0ICsgaHVmZl0gPSA2NDsgICAgICAgICAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW25leHQgKyBodWZmXSA9IGxlbiAtIGRyb3A7XG4gICAgLy90YWJsZS52YWxbbmV4dCArIGh1ZmZdID0gMDtcbiAgICB0YWJsZVtuZXh0ICsgaHVmZl0gPSAoKGxlbiAtIGRyb3ApIDw8IDI0KSB8ICg2NCA8PCAxNikgfDA7XG4gIH1cblxuICAvKiBzZXQgcmV0dXJuIHBhcmFtZXRlcnMgKi9cbiAgLy9vcHRzLnRhYmxlX2luZGV4ICs9IHVzZWQ7XG4gIG9wdHMuYml0cyA9IHJvb3Q7XG4gIHJldHVybiAwO1xufTtcblxuXG52YXIgaW5mdHJlZXMgPSBpbmZsYXRlX3RhYmxlO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cblxuXG5cblxuXG5jb25zdCBDT0RFUyA9IDA7XG5jb25zdCBMRU5TID0gMTtcbmNvbnN0IERJU1RTID0gMjtcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmNvbnN0IHtcbiAgWl9GSU5JU0g6IFpfRklOSVNIJDEsIFpfQkxPQ0ssIFpfVFJFRVMsXG4gIFpfT0s6IFpfT0skMSwgWl9TVFJFQU1fRU5EOiBaX1NUUkVBTV9FTkQkMSwgWl9ORUVEX0RJQ1Q6IFpfTkVFRF9ESUNUJDEsIFpfU1RSRUFNX0VSUk9SOiBaX1NUUkVBTV9FUlJPUiQxLCBaX0RBVEFfRVJST1I6IFpfREFUQV9FUlJPUiQxLCBaX01FTV9FUlJPUjogWl9NRU1fRVJST1IkMSwgWl9CVUZfRVJST1IsXG4gIFpfREVGTEFURURcbn0gPSBjb25zdGFudHMkMjtcblxuXG4vKiBTVEFURVMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5jb25zdCAgICBIRUFEID0gMTYxODA7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1hZ2ljIGhlYWRlciAqL1xuY29uc3QgICAgRkxBR1MgPSAxNjE4MTsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtZXRob2QgYW5kIGZsYWdzIChnemlwKSAqL1xuY29uc3QgICAgVElNRSA9IDE2MTgyOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtb2RpZmljYXRpb24gdGltZSAoZ3ppcCkgKi9cbmNvbnN0ICAgIE9TID0gMTYxODM7ICAgICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovXG5jb25zdCAgICBFWExFTiA9IDE2MTg0OyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGxlbmd0aCAoZ3ppcCkgKi9cbmNvbnN0ICAgIEVYVFJBID0gMTYxODU7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgYnl0ZXMgKGd6aXApICovXG5jb25zdCAgICBOQU1FID0gMTYxODY7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBmaWxlIG5hbWUgKGd6aXApICovXG5jb25zdCAgICBDT01NRU5UID0gMTYxODc7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBjb21tZW50IChnemlwKSAqL1xuY29uc3QgICAgSENSQyA9IDE2MTg4OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBoZWFkZXIgY3JjIChnemlwKSAqL1xuY29uc3QgICAgRElDVElEID0gMTYxODk7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi9cbmNvbnN0ICAgIERJQ1QgPSAxNjE5MDsgICAgICAvKiB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGNhbGwgKi9cbmNvbnN0ICAgICAgICBUWVBFID0gMTYxOTE7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xuY29uc3QgICAgICAgIFRZUEVETyA9IDE2MTkyOyAgICAvKiBpOiBzYW1lLCBidXQgc2tpcCBjaGVjayB0byBleGl0IGluZmxhdGUgb24gbmV3IGJsb2NrICovXG5jb25zdCAgICAgICAgU1RPUkVEID0gMTYxOTM7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovXG5jb25zdCAgICAgICAgQ09QWV8gPSAxNjE5NDsgICAgIC8qIGkvbzogc2FtZSBhcyBDT1BZIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG5jb25zdCAgICAgICAgQ09QWSA9IDE2MTk1OyAgICAgIC8qIGkvbzogd2FpdGluZyBmb3IgaW5wdXQgb3Igb3V0cHV0IHRvIGNvcHkgc3RvcmVkIGJsb2NrICovXG5jb25zdCAgICAgICAgVEFCTEUgPSAxNjE5NjsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGR5bmFtaWMgYmxvY2sgdGFibGUgbGVuZ3RocyAqL1xuY29uc3QgICAgICAgIExFTkxFTlMgPSAxNjE5NzsgICAvKiBpOiB3YWl0aW5nIGZvciBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbmNvbnN0ICAgICAgICBDT0RFTEVOUyA9IDE2MTk4OyAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdCBhbmQgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG5jb25zdCAgICAgICAgICAgIExFTl8gPSAxNjE5OTsgICAgICAvKiBpOiBzYW1lIGFzIExFTiBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xuY29uc3QgICAgICAgICAgICBMRU4gPSAxNjIwMDsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdC9lb2IgY29kZSAqL1xuY29uc3QgICAgICAgICAgICBMRU5FWFQgPSAxNjIwMTsgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoIGV4dHJhIGJpdHMgKi9cbmNvbnN0ICAgICAgICAgICAgRElTVCA9IDE2MjAyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi9cbmNvbnN0ICAgICAgICAgICAgRElTVEVYVCA9IDE2MjAzOyAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGV4dHJhIGJpdHMgKi9cbmNvbnN0ICAgICAgICAgICAgTUFUQ0ggPSAxNjIwNDsgICAgIC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byBjb3B5IHN0cmluZyAqL1xuY29uc3QgICAgICAgICAgICBMSVQgPSAxNjIwNTsgICAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi9cbmNvbnN0ICAgIENIRUNLID0gMTYyMDY7ICAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgY2hlY2sgdmFsdWUgKi9cbmNvbnN0ICAgIExFTkdUSCA9IDE2MjA3OyAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgbGVuZ3RoIChnemlwKSAqL1xuY29uc3QgICAgRE9ORSA9IDE2MjA4OyAgICAgIC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG5jb25zdCAgICBCQUQgPSAxNjIwOTsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuY29uc3QgICAgTUVNID0gMTYyMTA7ICAgICAgIC8qIGdvdCBhbiBpbmZsYXRlKCkgbWVtb3J5IGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG5jb25zdCAgICBTWU5DID0gMTYyMTE7ICAgICAgLyogbG9va2luZyBmb3Igc3luY2hyb25pemF0aW9uIGJ5dGVzIHRvIHJlc3RhcnQgaW5mbGF0ZSgpICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuXG5jb25zdCBFTk9VR0hfTEVOUyA9IDg1MjtcbmNvbnN0IEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vY29uc3QgRU5PVUdIID0gIChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG5jb25zdCBNQVhfV0JJVFMgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xuY29uc3QgREVGX1dCSVRTID0gTUFYX1dCSVRTO1xuXG5cbmNvbnN0IHpzd2FwMzIgPSAocSkgPT4ge1xuXG4gIHJldHVybiAgKCgocSA+Pj4gMjQpICYgMHhmZikgK1xuICAgICAgICAgICgocSA+Pj4gOCkgJiAweGZmMDApICtcbiAgICAgICAgICAoKHEgJiAweGZmMDApIDw8IDgpICtcbiAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xufTtcblxuXG5mdW5jdGlvbiBJbmZsYXRlU3RhdGUoKSB7XG4gIHRoaXMuc3RybSA9IG51bGw7ICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuICB0aGlzLm1vZGUgPSAwOyAgICAgICAgICAgICAgLyogY3VycmVudCBpbmZsYXRlIG1vZGUgKi9cbiAgdGhpcy5sYXN0ID0gZmFsc2U7ICAgICAgICAgIC8qIHRydWUgaWYgcHJvY2Vzc2luZyBsYXN0IGJsb2NrICovXG4gIHRoaXMud3JhcCA9IDA7ICAgICAgICAgICAgICAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYml0IDIgdHJ1ZSB0byB2YWxpZGF0ZSBjaGVjayB2YWx1ZSAqL1xuICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7ICAgICAgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovXG4gIHRoaXMuZmxhZ3MgPSAwOyAgICAgICAgICAgICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpLCBvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgaWYgcmF3IG9yIG5vIGhlYWRlciB5ZXQgKi9cbiAgdGhpcy5kbWF4ID0gMDsgICAgICAgICAgICAgIC8qIHpsaWIgaGVhZGVyIG1heCBkaXN0YW5jZSAoSU5GTEFURV9TVFJJQ1QpICovXG4gIHRoaXMuY2hlY2sgPSAwOyAgICAgICAgICAgICAvKiBwcm90ZWN0ZWQgY29weSBvZiBjaGVjayB2YWx1ZSAqL1xuICB0aGlzLnRvdGFsID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2Ygb3V0cHV0IGNvdW50ICovXG4gIC8vIFRPRE86IG1heSBiZSB7fVxuICB0aGlzLmhlYWQgPSBudWxsOyAgICAgICAgICAgLyogd2hlcmUgdG8gc2F2ZSBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiAqL1xuXG4gIC8qIHNsaWRpbmcgd2luZG93ICovXG4gIHRoaXMud2JpdHMgPSAwOyAgICAgICAgICAgICAvKiBsb2cgYmFzZSAyIG9mIHJlcXVlc3RlZCB3aW5kb3cgc2l6ZSAqL1xuICB0aGlzLndzaXplID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIHRoaXMud2hhdmUgPSAwOyAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIHRoaXMud25leHQgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgdGhpcy53aW5kb3cgPSBudWxsOyAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgbmVlZGVkICovXG5cbiAgLyogYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuaG9sZCA9IDA7ICAgICAgICAgICAgICAvKiBpbnB1dCBiaXQgYWNjdW11bGF0b3IgKi9cbiAgdGhpcy5iaXRzID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBiaXRzIGluIFwiaW5cIiAqL1xuXG4gIC8qIGZvciBzdHJpbmcgYW5kIHN0b3JlZCBibG9jayBjb3B5aW5nICovXG4gIHRoaXMubGVuZ3RoID0gMDsgICAgICAgICAgICAvKiBsaXRlcmFsIG9yIGxlbmd0aCBvZiBkYXRhIHRvIGNvcHkgKi9cbiAgdGhpcy5vZmZzZXQgPSAwOyAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgdG8gY29weSBzdHJpbmcgZnJvbSAqL1xuXG4gIC8qIGZvciB0YWJsZSBhbmQgY29kZSBkZWNvZGluZyAqL1xuICB0aGlzLmV4dHJhID0gMDsgICAgICAgICAgICAgLyogZXh0cmEgYml0cyBuZWVkZWQgKi9cblxuICAvKiBmaXhlZCBhbmQgZHluYW1pYyBjb2RlIHRhYmxlcyAqL1xuICB0aGlzLmxlbmNvZGUgPSBudWxsOyAgICAgICAgICAvKiBzdGFydGluZyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKi9cbiAgdGhpcy5kaXN0Y29kZSA9IG51bGw7ICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzICovXG4gIHRoaXMubGVuYml0cyA9IDA7ICAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBsZW5jb2RlICovXG4gIHRoaXMuZGlzdGJpdHMgPSAwOyAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBkaXN0Y29kZSAqL1xuXG4gIC8qIGR5bmFtaWMgdGFibGUgYnVpbGRpbmcgKi9cbiAgdGhpcy5uY29kZSA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy5ubGVuID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gIHRoaXMubmRpc3QgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG4gIHRoaXMuaGF2ZSA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGhzIGluIGxlbnNbXSAqL1xuICB0aGlzLm5leHQgPSBudWxsOyAgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gY29kZXNbXSAqL1xuXG4gIHRoaXMubGVucyA9IG5ldyBVaW50MTZBcnJheSgzMjApOyAvKiB0ZW1wb3Jhcnkgc3RvcmFnZSBmb3IgY29kZSBsZW5ndGhzICovXG4gIHRoaXMud29yayA9IG5ldyBVaW50MTZBcnJheSgyODgpOyAvKiB3b3JrIGFyZWEgZm9yIGNvZGUgdGFibGUgYnVpbGRpbmcgKi9cblxuICAvKlxuICAgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHBvaW50ZXJzIGluIGpzLCB3ZSB1c2UgbGVuY29kZSBhbmQgZGlzdGNvZGUgZGlyZWN0bHlcbiAgIGFzIGJ1ZmZlcnMgc28gd2UgZG9uJ3QgbmVlZCBjb2Rlc1xuICAqL1xuICAvL3RoaXMuY29kZXMgPSBuZXcgSW50MzJBcnJheShFTk9VR0gpOyAgICAgICAvKiBzcGFjZSBmb3IgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5keW4gPSBudWxsOyAgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuICB0aGlzLmRpc3RkeW4gPSBudWxsOyAgICAgICAgICAgICAvKiBkeW5hbWljIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAoSlMgc3BlY2lmaWMpICovXG4gIHRoaXMuc2FuZSA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGlmIGZhbHNlLCBhbGxvdyBpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgKi9cbiAgdGhpcy5iYWNrID0gMDsgICAgICAgICAgICAgICAgICAgLyogYml0cyBiYWNrIG9mIGxhc3QgdW5wcm9jZXNzZWQgbGVuZ3RoL2xpdCAqL1xuICB0aGlzLndhcyA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBpbml0aWFsIGxlbmd0aCBvZiBtYXRjaCAqL1xufVxuXG5cbmNvbnN0IGluZmxhdGVTdGF0ZUNoZWNrID0gKHN0cm0pID0+IHtcblxuICBpZiAoIXN0cm0pIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmICghc3RhdGUgfHwgc3RhdGUuc3RybSAhPT0gc3RybSB8fFxuICAgIHN0YXRlLm1vZGUgPCBIRUFEIHx8IHN0YXRlLm1vZGUgPiBTWU5DKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVSZXNldEtlZXAgPSAoc3RybSkgPT4ge1xuXG4gIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IHN0YXRlLnRvdGFsID0gMDtcbiAgc3RybS5tc2cgPSAnJzsgLypaX05VTEwqL1xuICBpZiAoc3RhdGUud3JhcCkgeyAgICAgICAvKiB0byBzdXBwb3J0IGlsbC1jb25jZWl2ZWQgSmF2YSB0ZXN0IHN1aXRlICovXG4gICAgc3RybS5hZGxlciA9IHN0YXRlLndyYXAgJiAxO1xuICB9XG4gIHN0YXRlLm1vZGUgPSBIRUFEO1xuICBzdGF0ZS5sYXN0ID0gMDtcbiAgc3RhdGUuaGF2ZWRpY3QgPSAwO1xuICBzdGF0ZS5mbGFncyA9IC0xO1xuICBzdGF0ZS5kbWF4ID0gMzI3Njg7XG4gIHN0YXRlLmhlYWQgPSBudWxsLypaX05VTEwqLztcbiAgc3RhdGUuaG9sZCA9IDA7XG4gIHN0YXRlLmJpdHMgPSAwO1xuICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQgPSBzdGF0ZS5jb2RlcztcbiAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5biA9IG5ldyBJbnQzMkFycmF5KEVOT1VHSF9MRU5TKTtcbiAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluID0gbmV3IEludDMyQXJyYXkoRU5PVUdIX0RJU1RTKTtcblxuICBzdGF0ZS5zYW5lID0gMTtcbiAgc3RhdGUuYmFjayA9IC0xO1xuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IHJlc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0skMTtcbn07XG5cblxuY29uc3QgaW5mbGF0ZVJlc2V0ID0gKHN0cm0pID0+IHtcblxuICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cbiAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdGF0ZS53c2l6ZSA9IDA7XG4gIHN0YXRlLndoYXZlID0gMDtcbiAgc3RhdGUud25leHQgPSAwO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKTtcblxufTtcblxuXG5jb25zdCBpbmZsYXRlUmVzZXQyID0gKHN0cm0sIHdpbmRvd0JpdHMpID0+IHtcbiAgbGV0IHdyYXA7XG5cbiAgLyogZ2V0IHRoZSBzdGF0ZSAqL1xuICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cbiAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIC8qIGV4dHJhY3Qgd3JhcCByZXF1ZXN0IGZyb20gd2luZG93Qml0cyBwYXJhbWV0ZXIgKi9cbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7XG4gICAgd3JhcCA9IDA7XG4gICAgd2luZG93Qml0cyA9IC13aW5kb3dCaXRzO1xuICB9XG4gIGVsc2Uge1xuICAgIHdyYXAgPSAod2luZG93Qml0cyA+PiA0KSArIDU7XG4gICAgaWYgKHdpbmRvd0JpdHMgPCA0OCkge1xuICAgICAgd2luZG93Qml0cyAmPSAxNTtcbiAgICB9XG4gIH1cblxuICAvKiBzZXQgbnVtYmVyIG9mIHdpbmRvdyBiaXRzLCBmcmVlIHdpbmRvdyBpZiBkaWZmZXJlbnQgKi9cbiAgaWYgKHdpbmRvd0JpdHMgJiYgKHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSkpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTtcbiAgfVxuICBpZiAoc3RhdGUud2luZG93ICE9PSBudWxsICYmIHN0YXRlLndiaXRzICE9PSB3aW5kb3dCaXRzKSB7XG4gICAgc3RhdGUud2luZG93ID0gbnVsbDtcbiAgfVxuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmVzZXQgdGhlIHJlc3Qgb2YgaXQgKi9cbiAgc3RhdGUud3JhcCA9IHdyYXA7XG4gIHN0YXRlLndiaXRzID0gd2luZG93Qml0cztcbiAgcmV0dXJuIGluZmxhdGVSZXNldChzdHJtKTtcbn07XG5cblxuY29uc3QgaW5mbGF0ZUluaXQyID0gKHN0cm0sIHdpbmRvd0JpdHMpID0+IHtcblxuICBpZiAoIXN0cm0pIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cbiAgLy9zdHJtLm1zZyA9IFpfTlVMTDsgICAgICAgICAgICAgICAgIC8qIGluIGNhc2Ugd2UgcmV0dXJuIGFuIGVycm9yICovXG5cbiAgY29uc3Qgc3RhdGUgPSBuZXcgSW5mbGF0ZVN0YXRlKCk7XG5cbiAgLy9pZiAoc3RhdGUgPT09IFpfTlVMTCkgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IGFsbG9jYXRlZFxcblwiKSk7XG4gIHN0cm0uc3RhdGUgPSBzdGF0ZTtcbiAgc3RhdGUuc3RybSA9IHN0cm07XG4gIHN0YXRlLndpbmRvdyA9IG51bGwvKlpfTlVMTCovO1xuICBzdGF0ZS5tb2RlID0gSEVBRDsgICAgIC8qIHRvIHBhc3Mgc3RhdGUgdGVzdCBpbiBpbmZsYXRlUmVzZXQyKCkgKi9cbiAgY29uc3QgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTtcbiAgaWYgKHJldCAhPT0gWl9PSyQxKSB7XG4gICAgc3RybS5zdGF0ZSA9IG51bGwvKlpfTlVMTCovO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVJbml0ID0gKHN0cm0pID0+IHtcblxuICByZXR1cm4gaW5mbGF0ZUluaXQyKHN0cm0sIERFRl9XQklUUyk7XG59O1xuXG5cbi8qXG4gUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0b1xuIGZpeGVkIGNvZGUgZGVjb2RpbmcuICBOb3JtYWxseSB0aGlzIHJldHVybnMgZml4ZWQgdGFibGVzIGZyb20gaW5mZml4ZWQuaC5cbiBJZiBCVUlMREZJWEVEIGlzIGRlZmluZWQsIHRoZW4gaW5zdGVhZCB0aGlzIHJvdXRpbmUgYnVpbGRzIHRoZSB0YWJsZXMgdGhlXG4gZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZFxuIHRoZXJlYWZ0ZXIuICBUaGlzIHJlZHVjZXMgdGhlIHNpemUgb2YgdGhlIGNvZGUgYnkgYWJvdXQgMksgYnl0ZXMsIGluXG4gZXhjaGFuZ2UgZm9yIGEgbGl0dGxlIGV4ZWN1dGlvbiB0aW1lLiAgSG93ZXZlciwgQlVJTERGSVhFRCBzaG91bGQgbm90IGJlXG4gdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpblxuIG1heSBub3QgYmUgdGhyZWFkLXNhZmUuXG4gKi9cbmxldCB2aXJnaW4gPSB0cnVlO1xuXG5sZXQgbGVuZml4LCBkaXN0Zml4OyAvLyBXZSBoYXZlIG5vIHBvaW50ZXJzIGluIEpTLCBzbyBrZWVwIHRhYmxlcyBzZXBhcmF0ZVxuXG5cbmNvbnN0IGZpeGVkdGFibGVzID0gKHN0YXRlKSA9PiB7XG5cbiAgLyogYnVpbGQgZml4ZWQgaHVmZm1hbiB0YWJsZXMgaWYgZmlyc3QgY2FsbCAobWF5IG5vdCBiZSB0aHJlYWQgc2FmZSkgKi9cbiAgaWYgKHZpcmdpbikge1xuICAgIGxlbmZpeCA9IG5ldyBJbnQzMkFycmF5KDUxMik7XG4gICAgZGlzdGZpeCA9IG5ldyBJbnQzMkFycmF5KDMyKTtcblxuICAgIC8qIGxpdGVyYWwvbGVuZ3RoIHRhYmxlICovXG4gICAgbGV0IHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDE0NCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjU2KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gOTsgfVxuICAgIHdoaWxlIChzeW0gPCAyODApIHsgc3RhdGUubGVuc1tzeW0rK10gPSA3OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI4OCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cblxuICAgIGluZnRyZWVzKExFTlMsICBzdGF0ZS5sZW5zLCAwLCAyODgsIGxlbmZpeCwgICAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDkgfSk7XG5cbiAgICAvKiBkaXN0YW5jZSB0YWJsZSAqL1xuICAgIHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDMyKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNTsgfVxuXG4gICAgaW5mdHJlZXMoRElTVFMsIHN0YXRlLmxlbnMsIDAsIDMyLCAgIGRpc3RmaXgsIDAsIHN0YXRlLndvcmssIHsgYml0czogNSB9KTtcblxuICAgIC8qIGRvIHRoaXMganVzdCBvbmNlICovXG4gICAgdmlyZ2luID0gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5sZW5jb2RlID0gbGVuZml4O1xuICBzdGF0ZS5sZW5iaXRzID0gOTtcbiAgc3RhdGUuZGlzdGNvZGUgPSBkaXN0Zml4O1xuICBzdGF0ZS5kaXN0Yml0cyA9IDU7XG59O1xuXG5cbi8qXG4gVXBkYXRlIHRoZSB3aW5kb3cgd2l0aCB0aGUgbGFzdCB3c2l6ZSAobm9ybWFsbHkgMzJLKSBieXRlcyB3cml0dGVuIGJlZm9yZVxuIHJldHVybmluZy4gIElmIHdpbmRvdyBkb2VzIG5vdCBleGlzdCB5ZXQsIGNyZWF0ZSBpdC4gIFRoaXMgaXMgb25seSBjYWxsZWRcbiB3aGVuIGEgd2luZG93IGlzIGFscmVhZHkgaW4gdXNlLCBvciB3aGVuIG91dHB1dCBoYXMgYmVlbiB3cml0dGVuIGR1cmluZyB0aGlzXG4gaW5mbGF0ZSBjYWxsLCBidXQgdGhlIGVuZCBvZiB0aGUgZGVmbGF0ZSBzdHJlYW0gaGFzIG5vdCBiZWVuIHJlYWNoZWQgeWV0LlxuIEl0IGlzIGFsc28gY2FsbGVkIHRvIGNyZWF0ZSBhIHdpbmRvdyBmb3IgZGljdGlvbmFyeSBkYXRhIHdoZW4gYSBkaWN0aW9uYXJ5XG4gaXMgbG9hZGVkLlxuXG4gUHJvdmlkaW5nIG91dHB1dCBidWZmZXJzIGxhcmdlciB0aGFuIDMySyB0byBpbmZsYXRlKCkgc2hvdWxkIHByb3ZpZGUgYSBzcGVlZFxuIGFkdmFudGFnZSwgc2luY2Ugb25seSB0aGUgbGFzdCAzMksgb2Ygb3V0cHV0IGlzIGNvcGllZCB0byB0aGUgc2xpZGluZyB3aW5kb3dcbiB1cG9uIHJldHVybiBmcm9tIGluZmxhdGUoKSwgYW5kIHNpbmNlIGFsbCBkaXN0YW5jZXMgYWZ0ZXIgdGhlIGZpcnN0IDMySyBvZlxuIG91dHB1dCB3aWxsIGZhbGwgaW4gdGhlIG91dHB1dCBkYXRhLCBtYWtpbmcgbWF0Y2ggY29waWVzIHNpbXBsZXIgYW5kIGZhc3Rlci5cbiBUaGUgYWR2YW50YWdlIG1heSBiZSBkZXBlbmRlbnQgb24gdGhlIHNpemUgb2YgdGhlIHByb2Nlc3NvcidzIGRhdGEgY2FjaGVzLlxuICovXG5jb25zdCB1cGRhdGV3aW5kb3cgPSAoc3RybSwgc3JjLCBlbmQsIGNvcHkpID0+IHtcblxuICBsZXQgZGlzdDtcbiAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIC8qIGlmIGl0IGhhc24ndCBiZWVuIGRvbmUgYWxyZWFkeSwgYWxsb2NhdGUgc3BhY2UgZm9yIHRoZSB3aW5kb3cgKi9cbiAgaWYgKHN0YXRlLndpbmRvdyA9PT0gbnVsbCkge1xuICAgIHN0YXRlLndzaXplID0gMSA8PCBzdGF0ZS53Yml0cztcbiAgICBzdGF0ZS53bmV4dCA9IDA7XG4gICAgc3RhdGUud2hhdmUgPSAwO1xuXG4gICAgc3RhdGUud2luZG93ID0gbmV3IFVpbnQ4QXJyYXkoc3RhdGUud3NpemUpO1xuICB9XG5cbiAgLyogY29weSBzdGF0ZS0+d3NpemUgb3IgbGVzcyBvdXRwdXQgYnl0ZXMgaW50byB0aGUgY2lyY3VsYXIgd2luZG93ICovXG4gIGlmIChjb3B5ID49IHN0YXRlLndzaXplKSB7XG4gICAgc3RhdGUud2luZG93LnNldChzcmMuc3ViYXJyYXkoZW5kIC0gc3RhdGUud3NpemUsIGVuZCksIDApO1xuICAgIHN0YXRlLnduZXh0ID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICB9XG4gIGVsc2Uge1xuICAgIGRpc3QgPSBzdGF0ZS53c2l6ZSAtIHN0YXRlLnduZXh0O1xuICAgIGlmIChkaXN0ID4gY29weSkge1xuICAgICAgZGlzdCA9IGNvcHk7XG4gICAgfVxuICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93ICsgc3RhdGUtPnduZXh0LCBlbmQgLSBjb3B5LCBkaXN0KTtcbiAgICBzdGF0ZS53aW5kb3cuc2V0KHNyYy5zdWJhcnJheShlbmQgLSBjb3B5LCBlbmQgLSBjb3B5ICsgZGlzdCksIHN0YXRlLnduZXh0KTtcbiAgICBjb3B5IC09IGRpc3Q7XG4gICAgaWYgKGNvcHkpIHtcbiAgICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93LCBlbmQgLSBjb3B5LCBjb3B5KTtcbiAgICAgIHN0YXRlLndpbmRvdy5zZXQoc3JjLnN1YmFycmF5KGVuZCAtIGNvcHksIGVuZCksIDApO1xuICAgICAgc3RhdGUud25leHQgPSBjb3B5O1xuICAgICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzdGF0ZS53bmV4dCArPSBkaXN0O1xuICAgICAgaWYgKHN0YXRlLnduZXh0ID09PSBzdGF0ZS53c2l6ZSkgeyBzdGF0ZS53bmV4dCA9IDA7IH1cbiAgICAgIGlmIChzdGF0ZS53aGF2ZSA8IHN0YXRlLndzaXplKSB7IHN0YXRlLndoYXZlICs9IGRpc3Q7IH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5cbmNvbnN0IGluZmxhdGUkMiA9IChzdHJtLCBmbHVzaCkgPT4ge1xuXG4gIGxldCBzdGF0ZTtcbiAgbGV0IGlucHV0LCBvdXRwdXQ7ICAgICAgICAgIC8vIGlucHV0L291dHB1dCBidWZmZXJzXG4gIGxldCBuZXh0OyAgICAgICAgICAgICAgICAgICAvKiBuZXh0IGlucHV0IElOREVYICovXG4gIGxldCBwdXQ7ICAgICAgICAgICAgICAgICAgICAvKiBuZXh0IG91dHB1dCBJTkRFWCAqL1xuICBsZXQgaGF2ZSwgbGVmdDsgICAgICAgICAgICAgLyogYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cbiAgbGV0IGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGJpdCBidWZmZXIgKi9cbiAgbGV0IGJpdHM7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgaW4gYml0IGJ1ZmZlciAqL1xuICBsZXQgX2luLCBfb3V0OyAgICAgICAgICAgICAgLyogc2F2ZSBzdGFydGluZyBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICBsZXQgY29weTsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHN0b3JlZCBvciBtYXRjaCBieXRlcyB0byBjb3B5ICovXG4gIGxldCBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGJ5dGVzIGZyb20gKi9cbiAgbGV0IGZyb21fc291cmNlO1xuICBsZXQgaGVyZSA9IDA7ICAgICAgICAgICAgICAgLyogY3VycmVudCBkZWNvZGluZyB0YWJsZSBlbnRyeSAqL1xuICBsZXQgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsgLy8gcGFrZWQgXCJoZXJlXCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYylcbiAgLy9sZXQgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogcGFyZW50IHRhYmxlIGVudHJ5ICovXG4gIGxldCBsYXN0X2JpdHMsIGxhc3Rfb3AsIGxhc3RfdmFsOyAvLyBwYWtlZCBcImxhc3RcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICBsZXQgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIHRvIGNvcHkgZm9yIHJlcGVhdHMsIGJpdHMgdG8gZHJvcCAqL1xuICBsZXQgcmV0OyAgICAgICAgICAgICAgICAgICAgLyogcmV0dXJuIGNvZGUgKi9cbiAgY29uc3QgaGJ1ZiA9IG5ldyBVaW50OEFycmF5KDQpOyAgICAvKiBidWZmZXIgZm9yIGd6aXAgaGVhZGVyIGNyYyBjYWxjdWxhdGlvbiAqL1xuICBsZXQgb3B0cztcblxuICBsZXQgbjsgLy8gdGVtcG9yYXJ5IHZhcmlhYmxlIGZvciBORUVEX0JJVFNcblxuICBjb25zdCBvcmRlciA9IC8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqL1xuICAgIG5ldyBVaW50OEFycmF5KFsgMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNSBdKTtcblxuXG4gIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSB8fCAhc3RybS5vdXRwdXQgfHxcbiAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxO1xuICB9XG5cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkgeyBzdGF0ZS5tb2RlID0gVFlQRURPOyB9ICAgIC8qIHNraXAgY2hlY2sgKi9cblxuXG4gIC8vLS0tIExPQUQoKSAtLS1cbiAgcHV0ID0gc3RybS5uZXh0X291dDtcbiAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcbiAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBoYXZlID0gc3RybS5hdmFpbF9pbjtcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICAvLy0tLVxuXG4gIF9pbiA9IGhhdmU7XG4gIF9vdXQgPSBsZWZ0O1xuICByZXQgPSBaX09LJDE7XG5cbiAgaW5mX2xlYXZlOiAvLyBnb3RvIGVtdWxhdGlvblxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChzdGF0ZS5tb2RlKSB7XG4gICAgICBjYXNlIEhFQUQ6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwID09PSAwKSB7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEVETztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLz09PSBORUVEQklUUygxNik7XG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKChzdGF0ZS53cmFwICYgMikgJiYgaG9sZCA9PT0gMHg4YjFmKSB7ICAvKiBnemlwIGhlYWRlciAqL1xuICAgICAgICAgIGlmIChzdGF0ZS53Yml0cyA9PT0gMCkge1xuICAgICAgICAgICAgc3RhdGUud2JpdHMgPSAxNTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSAwLypjcmMzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyXzEoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cblxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBGTEFHUztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHN0YXRlLndyYXAgJiAxKSB8fCAgIC8qIGNoZWNrIGlmIHpsaWIgaGVhZGVyIGFsbG93ZWQgKi9cbiAgICAgICAgICAoKChob2xkICYgMHhmZikvKkJJVFMoOCkqLyA8PCA4KSArIChob2xkID4+IDgpKSAlIDMxKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGhlYWRlciBjaGVjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICE9PSBaX0RFRkxBVEVEKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDQ7XG4gICAgICAgIGJpdHMgLT0gNDtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBsZW4gPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA4O1xuICAgICAgICBpZiAoc3RhdGUud2JpdHMgPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuID4gMTUgfHwgbGVuID4gc3RhdGUud2JpdHMpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHdpbmRvdyBzaXplJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gISEhIHBha28gcGF0Y2guIEZvcmNlIHVzZSBgb3B0aW9ucy53aW5kb3dCaXRzYCBpZiBwYXNzZWQuXG4gICAgICAgIC8vIFJlcXVpcmVkIHRvIGFsd2F5cyB1c2UgbWF4IHdpbmRvdyBzaXplIGJ5IGRlZmF1bHQuXG4gICAgICAgIHN0YXRlLmRtYXggPSAxIDw8IHN0YXRlLndiaXRzO1xuICAgICAgICAvL3N0YXRlLmRtYXggPSAxIDw8IGxlbjtcblxuICAgICAgICBzdGF0ZS5mbGFncyA9IDA7ICAgICAgICAgICAgICAgLyogaW5kaWNhdGUgemxpYiBoZWFkZXIgKi9cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIHpsaWIgaGVhZGVyIG9rXFxuXCIpKTtcbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDB4MjAwID8gRElDVElEIDogVFlQRTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGTEFHUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmZsYWdzID0gaG9sZDtcbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4ZmYpICE9PSBaX0RFRkxBVEVEKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHhlMDAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gKChob2xkID4+IDgpICYgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgJiYgKHN0YXRlLndyYXAgJiA0KSkge1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyXzEoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IFRJTUU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgVElNRTpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50aW1lID0gaG9sZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHgwMjAwKSAmJiAoc3RhdGUud3JhcCAmIDQpKSB7XG4gICAgICAgICAgLy89PT0gQ1JDNChzdGF0ZS5jaGVjaywgaG9sZClcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsyXSA9IChob2xkID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhidWZbM10gPSAoaG9sZCA+Pj4gMjQpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyXzEoc3RhdGUuY2hlY2ssIGhidWYsIDQsIDApO1xuICAgICAgICAgIC8vPT09XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBPUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBPUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpO1xuICAgICAgICAgIHN0YXRlLmhlYWQub3MgPSAoaG9sZCA+PiA4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHgwMjAwKSAmJiAoc3RhdGUud3JhcCAmIDQpKSB7XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gRVhMRU47XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhMRU46XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZDtcbiAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9sZW4gPSBob2xkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHgwMjAwKSAmJiAoc3RhdGUud3JhcCAmIDQpKSB7XG4gICAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBudWxsLypaX05VTEwqLztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gRVhUUkE7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhUUkE6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7IGNvcHkgPSBoYXZlOyB9XG4gICAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmhlYWQuZXh0cmFfbGVuIC0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgICAgICBpZiAoIXN0YXRlLmhlYWQuZXh0cmEpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdW50eXBlZCBhcnJheSBmb3IgbW9yZSBjb252ZW5pZW50IHByb2Nlc3NpbmcgbGF0ZXJcbiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbmV3IFVpbnQ4QXJyYXkoc3RhdGUuaGVhZC5leHRyYV9sZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEuc2V0KFxuICAgICAgICAgICAgICAgIGlucHV0LnN1YmFycmF5KFxuICAgICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICAgIC8vIGV4dHJhIGZpZWxkIGlzIGxpbWl0ZWQgdG8gNjU1MzYgYnl0ZXNcbiAgICAgICAgICAgICAgICAgIC8vIC0gbm8gbmVlZCBmb3IgYWRkaXRpb25hbCBzaXplIGNoZWNrXG4gICAgICAgICAgICAgICAgICBuZXh0ICsgY29weVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgLypsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gPyBzdGF0ZS5oZWFkLmV4dHJhX21heCA6IGNvcHksKi9cbiAgICAgICAgICAgICAgICBsZW5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgLy96bWVtY3B5KHN0YXRlLmhlYWQuZXh0cmEgKyBsZW4sIG5leHQsXG4gICAgICAgICAgICAgIC8vICAgICAgICBsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggP1xuICAgICAgICAgICAgICAvLyAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gOiBjb3B5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgJiAweDAyMDApICYmIChzdGF0ZS53cmFwICYgNCkpIHtcbiAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTkFNRTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBOQU1FOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA4MDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBUT0RPOiAyIG9yIDEgYnl0ZXM/XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLm5hbWVfbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcblxuICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgJiAweDAyMDApICYmIChzdGF0ZS53cmFwICYgNCkpIHtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubGVuZ3RoID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IENPTU1FTlQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09NTUVOVDpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgxMDAwKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgY29weSA9IDA7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107XG4gICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmXG4gICAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5jb21tX21heCovKSkge1xuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG4gICAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgJiYgKHN0YXRlLndyYXAgJiA0KSkge1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gSENSQztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBIQ1JDOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDQpICYmIGhvbGQgIT09IChzdGF0ZS5jaGVjayAmIDB4ZmZmZikpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2hlYWRlciBjcmMgbWlzbWF0Y2gnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuaGNyYyA9ICgoc3RhdGUuZmxhZ3MgPj4gOSkgJiAxKTtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElDVElEOlxuICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0genN3YXAzMihob2xkKTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBESUNUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJQ1Q6XG4gICAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUJDE7XG4gICAgICAgIH1cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUWVBFOlxuICAgICAgICBpZiAoZmx1c2ggPT09IFpfQkxPQ0sgfHwgZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgVFlQRURPOlxuICAgICAgICBpZiAoc3RhdGUubGFzdCkge1xuICAgICAgICAgIC8vLS0tIEJZVEVCSVRTKCkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7XG4gICAgICAgICAgYml0cyAtPSBiaXRzICYgNztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUubW9kZSA9IENIRUNLO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubGFzdCA9IChob2xkICYgMHgwMSkvKkJJVFMoMSkqLztcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoMSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDE7XG4gICAgICAgIGJpdHMgLT0gMTtcbiAgICAgICAgLy8tLS0vL1xuXG4gICAgICAgIHN3aXRjaCAoKGhvbGQgJiAweDAzKS8qQklUUygyKSovKSB7XG4gICAgICAgICAgY2FzZSAwOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RvcmVkIGJsb2NrICovXG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBzdG9yZWQgYmxvY2slc1xcblwiLFxuICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBTVE9SRUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBmaXhlZCBibG9jayAqL1xuICAgICAgICAgICAgZml4ZWR0YWJsZXMoc3RhdGUpO1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZml4ZWQgY29kZXMgYmxvY2slc1xcblwiLFxuICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fOyAgICAgICAgICAgICAvKiBkZWNvZGUgY29kZXMgKi9cbiAgICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykge1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGR5bmFtaWMgYmxvY2sgKi9cbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIGR5bmFtaWMgY29kZXMgYmxvY2slc1xcblwiLFxuICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUQUJMRTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYmxvY2sgdHlwZSc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNUT1JFRDpcbiAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vLyAvKiBnbyB0byBieXRlIGJvdW5kYXJ5ICovXG4gICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcbiAgICAgICAgYml0cyAtPSBiaXRzICYgNztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKChob2xkICYgMHhmZmZmKSAhPT0gKChob2xkID4+PiAxNikgXiAweGZmZmYpKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3Rocyc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkICYgMHhmZmZmO1xuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBsZW5ndGggJXVcXG5cIixcbiAgICAgICAgLy8gICAgICAgIHN0YXRlLmxlbmd0aCkpO1xuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFlfO1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09QWV86XG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPUFk6XG4gICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7IGNvcHkgPSBoYXZlOyB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gICAgICAgICAgaWYgKGNvcHkgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgLy8tLS0gem1lbWNweShwdXQsIG5leHQsIGNvcHkpOyAtLS1cbiAgICAgICAgICBvdXRwdXQuc2V0KGlucHV0LnN1YmFycmF5KG5leHQsIG5leHQgKyBjb3B5KSwgcHV0KTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICAgICAgcHV0ICs9IGNvcHk7XG4gICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBzdG9yZWQgZW5kXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUQUJMRTpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTQpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE0KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm5sZW4gPSAoaG9sZCAmIDB4MWYpLypCSVRTKDUpKi8gKyAyNTc7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgICBiaXRzIC09IDU7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUubmRpc3QgPSAoaG9sZCAmIDB4MWYpLypCSVRTKDUpKi8gKyAxO1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg1KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNTtcbiAgICAgICAgYml0cyAtPSA1O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLm5jb2RlID0gKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICsgNDtcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDQ7XG4gICAgICAgIGJpdHMgLT0gNDtcbiAgICAgICAgLy8tLS0vL1xuLy8jaWZuZGVmIFBLWklQX0JVR19XT1JLQVJPVU5EXG4gICAgICAgIGlmIChzdGF0ZS5ubGVuID4gMjg2IHx8IHN0YXRlLm5kaXN0ID4gMzApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9scyc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOTEVOUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5MRU5TOlxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5jb2RlKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IDE5KSB7XG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy9zdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gICAgICAgIC8vc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluO1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gNztcblxuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07XG4gICAgICAgIHJldCA9IGluZnRyZWVzKENPREVTLCBzdGF0ZS5sZW5zLCAwLCAxOSwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSBsZW5ndGhzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIGNvZGUgbGVuZ3RocyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09ERUxFTlM6XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsvKkJJVFMoc3RhdGUubGVuYml0cykqL1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGVyZV92YWwgPCAxNikge1xuICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGhlcmVfdmFsID09PSAxNikge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAyKTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDI7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTtcbiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDMpOy8vQklUUygyKTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGVyZV92YWwgPT09IDE3KSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDMpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMztcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDcpOy8vQklUUygzKTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDcpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNztcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgICAgY29weSA9IDExICsgKGhvbGQgJiAweDdmKTsvL0JJVFMoNyk7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDcpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSA3O1xuICAgICAgICAgICAgICBiaXRzIC09IDc7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlICsgY29weSA+IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoY29weS0tKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGxlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovXG4gICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBCQUQpIHsgYnJlYWs7IH1cblxuICAgICAgICAvKiBjaGVjayBmb3IgZW5kLW9mLWJsb2NrIGNvZGUgKGJldHRlciBoYXZlIG9uZSkgKi9cbiAgICAgICAgaWYgKHN0YXRlLmxlbnNbMjU2XSA9PT0gMCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9jayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGJ1aWxkIGNvZGUgdGFibGVzIC0tIG5vdGU6IGRvIG5vdCBjaGFuZ2UgdGhlIGxlbmJpdHMgb3IgZGlzdGJpdHNcbiAgICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgICAgICAgICBjb25jZXJuaW5nIHRoZSBFTk9VR0ggY29uc3RhbnRzLCB3aGljaCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzICovXG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA5O1xuXG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mdHJlZXMoTEVOUywgc3RhdGUubGVucywgMCwgc3RhdGUubmxlbiwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG4gICAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4O1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzO1xuICAgICAgICAvLyBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSA2O1xuICAgICAgICAvL3N0YXRlLmRpc3Rjb2RlLmNvcHkoc3RhdGUuY29kZXMpO1xuICAgICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGVcbiAgICAgICAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluO1xuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5kaXN0Yml0cyB9O1xuICAgICAgICByZXQgPSBpbmZ0cmVlcyhESVNUUywgc3RhdGUubGVucywgc3RhdGUubmxlbiwgc3RhdGUubmRpc3QsIHN0YXRlLmRpc3Rjb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gb3B0cy5iaXRzO1xuICAgICAgICAvLyBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2VzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAnaW5mbGF0ZTogICAgICAgY29kZXMgb2tcXG4nKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fO1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOXzpcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU46XG4gICAgICAgIGlmIChoYXZlID49IDYgJiYgbGVmdCA+PSAyNTgpIHtcbiAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAgICAgICAvLy0tLVxuICAgICAgICAgIGluZmZhc3Qoc3RybSwgX291dCk7XG4gICAgICAgICAgLy8tLS0gTE9BRCgpIC0tLVxuICAgICAgICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gICAgICAgICAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gICAgICAgICAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuICAgICAgICAgIG5leHQgPSBzdHJtLm5leHRfaW47XG4gICAgICAgICAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICAgICAgICAgIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuICAgICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICAgICAgICAgIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICAgICAgICAgIC8vLS0tXG5cbiAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkge1xuICAgICAgICAgICAgc3RhdGUuYmFjayA9IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5iYWNrID0gMDtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUubGVuYml0cykgLSAxKV07ICAvKkJJVFMoc3RhdGUubGVuYml0cykqL1xuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICBpZiAoaGVyZV9iaXRzIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiYgKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGxhc3RfYml0cyArIGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsO1xuICAgICAgICBpZiAoaGVyZV9vcCA9PT0gMCkge1xuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBoZXJlLnZhbCA+PSAweDIwICYmIGhlcmUudmFsIDwgMHg3ZiA/XG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBMSVQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiAzMikge1xuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5leHRyYSA9IGhlcmVfb3AgJiAxNTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkVYVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5FWFQ6XG4gICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuZ3RoICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIHN0YXRlLndhcyA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1Q7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElTVDpcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDEpXTsvKkJJVFMoc3RhdGUuZGlzdGJpdHMpKi9cbiAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKChoZXJlX29wICYgMHhmMCkgPT09IDApIHtcbiAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XG4gICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG4gICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbbGFzdF92YWwgK1xuICAgICAgICAgICAgICAgICAgICAoKGhvbGQgJiAoKDEgPDwgKGxhc3RfYml0cyArIGxhc3Rfb3ApKSAtIDEpKS8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldO1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0cztcbiAgICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0cztcbiAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5vZmZzZXQgPSBoZXJlX3ZhbDtcbiAgICAgICAgc3RhdGUuZXh0cmEgPSAoaGVyZV9vcCkgJiAxNTtcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1RFWFQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElTVEVYVDpcbiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpO1xuICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5vZmZzZXQgKz0gaG9sZCAmICgoMSA8PCBzdGF0ZS5leHRyYSkgLSAxKS8qQklUUyhzdGF0ZS5leHRyYSkqLztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgfVxuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IHN0YXRlLmRtYXgpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBzdGF0ZS5vZmZzZXQpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IE1BVENIO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE1BVENIOlxuICAgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgY29weSA9IF9vdXQgLSBsZWZ0O1xuICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gY29weSkgeyAgICAgICAgIC8qIGNvcHkgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICBjb3B5ID0gc3RhdGUub2Zmc2V0IC0gY29weTtcbiAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLndoYXZlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgVHJhY2UoKHN0ZGVyciwgXCJpbmZsYXRlLmMgdG9vIGZhclxcblwiKSk7XG4vLyAgICAgICAgICBjb3B5IC09IHN0YXRlLndoYXZlO1xuLy8gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuLy8gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4vLyAgICAgICAgICBsZWZ0IC09IGNvcHk7XG4vLyAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbi8vICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IDA7XG4vLyAgICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xuLy8gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4vLyAgICAgICAgICBicmVhaztcbi8vI2VuZGlmXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud25leHQpIHtcbiAgICAgICAgICAgIGNvcHkgLT0gc3RhdGUud25leHQ7XG4gICAgICAgICAgICBmcm9tID0gc3RhdGUud3NpemUgLSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7IGNvcHkgPSBzdGF0ZS5sZW5ndGg7IH1cbiAgICAgICAgICBmcm9tX3NvdXJjZSA9IHN0YXRlLndpbmRvdztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjb3B5IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgZnJvbSA9IHB1dCAtIHN0YXRlLm9mZnNldDtcbiAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxuICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4gICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsgc3RhdGUubW9kZSA9IExFTjsgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTElUOlxuICAgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgb3V0cHV0W3B1dCsrXSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgbGVmdC0tO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ0hFQ0s6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgLy8gVXNlICd8JyBpbnN0ZWFkIG9mICcrJyB0byBtYWtlIHN1cmUgdGhhdCByZXN1bHQgaXMgc2lnbmVkXG4gICAgICAgICAgICBob2xkIHw9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIF9vdXQgLT0gbGVmdDtcbiAgICAgICAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICAgICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gICAgICAgICAgaWYgKChzdGF0ZS53cmFwICYgNCkgJiYgX291dCkge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID1cbiAgICAgICAgICAgICAgICAvKlVQREFURV9DSEVDSyhzdGF0ZS5jaGVjaywgcHV0IC0gX291dCwgX291dCk7Ki9cbiAgICAgICAgICAgICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpIDogYWRsZXIzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTtcblxuICAgICAgICAgIH1cbiAgICAgICAgICBfb3V0ID0gbGVmdDtcbiAgICAgICAgICAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCB6c3dhcDMyIHJldHVybnMgc2lnbmVkIHRvb1xuICAgICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDQpICYmIChzdGF0ZS5mbGFncyA/IGhvbGQgOiB6c3dhcDMyKGhvbGQpKSAhPT0gc3RhdGUuY2hlY2spIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBkYXRhIGNoZWNrJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGNoZWNrIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkdUSDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5HVEg6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwICYmIHN0YXRlLmZsYWdzKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoKHN0YXRlLndyYXAgJiA0KSAmJiBob2xkICE9PSAoc3RhdGUudG90YWwgJiAweGZmZmZmZmZmKSkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGxlbmd0aCBjaGVjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBsZW5ndGggbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gRE9ORTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBET05FOlxuICAgICAgICByZXQgPSBaX1NUUkVBTV9FTkQkMTtcbiAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgY2FzZSBCQUQ6XG4gICAgICAgIHJldCA9IFpfREFUQV9FUlJPUiQxO1xuICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICBjYXNlIE1FTTpcbiAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SJDE7XG4gICAgICBjYXNlIFNZTkM6XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxO1xuICAgIH1cbiAgfVxuXG4gIC8vIGluZl9sZWF2ZSA8LSBoZXJlIGlzIHJlYWwgcGxhY2UgZm9yIFwiZ290byBpbmZfbGVhdmVcIiwgZW11bGF0ZWQgdmlhIFwiYnJlYWsgaW5mX2xlYXZlXCJcblxuICAvKlxuICAgICBSZXR1cm4gZnJvbSBpbmZsYXRlKCksIHVwZGF0aW5nIHRoZSB0b3RhbCBjb3VudHMgYW5kIHRoZSBjaGVjayB2YWx1ZS5cbiAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlclxuICAgICBlcnJvci4gIENhbGwgdXBkYXRld2luZG93KCkgdG8gY3JlYXRlIGFuZC9vciB1cGRhdGUgdGhlIHdpbmRvdyBzdGF0ZS5cbiAgICAgTm90ZTogYSBtZW1vcnkgZXJyb3IgZnJvbSBpbmZsYXRlKCkgaXMgbm9uLXJlY292ZXJhYmxlLlxuICAgKi9cblxuICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgLy8tLS1cblxuICBpZiAoc3RhdGUud3NpemUgfHwgKF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA8IENIRUNLIHx8IGZsdXNoICE9PSBaX0ZJTklTSCQxKSkpIHtcbiAgICBpZiAodXBkYXRld2luZG93KHN0cm0sIHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0LCBfb3V0IC0gc3RybS5hdmFpbF9vdXQpKSA7XG4gIH1cbiAgX2luIC09IHN0cm0uYXZhaWxfaW47XG4gIF9vdXQgLT0gc3RybS5hdmFpbF9vdXQ7XG4gIHN0cm0udG90YWxfaW4gKz0gX2luO1xuICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICBzdGF0ZS50b3RhbCArPSBfb3V0O1xuICBpZiAoKHN0YXRlLndyYXAgJiA0KSAmJiBfb3V0KSB7XG4gICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gLypVUERBVEVfQ0hFQ0soc3RhdGUuY2hlY2ssIHN0cm0ubmV4dF9vdXQgLSBfb3V0LCBfb3V0KTsqL1xuICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzJfMShzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkgOiBhZGxlcjMyXzEoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpKTtcbiAgfVxuICBzdHJtLmRhdGFfdHlwZSA9IHN0YXRlLmJpdHMgKyAoc3RhdGUubGFzdCA/IDY0IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gVFlQRSA/IDEyOCA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKHN0YXRlLm1vZGUgPT09IExFTl8gfHwgc3RhdGUubW9kZSA9PT0gQ09QWV8gPyAyNTYgOiAwKTtcbiAgaWYgKCgoX2luID09PSAwICYmIF9vdXQgPT09IDApIHx8IGZsdXNoID09PSBaX0ZJTklTSCQxKSAmJiByZXQgPT09IFpfT0skMSkge1xuICAgIHJldCA9IFpfQlVGX0VSUk9SO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVFbmQgPSAoc3RybSkgPT4ge1xuXG4gIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxO1xuICB9XG5cbiAgbGV0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKHN0YXRlLndpbmRvdykge1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gIH1cbiAgc3RybS5zdGF0ZSA9IG51bGw7XG4gIHJldHVybiBaX09LJDE7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVHZXRIZWFkZXIgPSAoc3RybSwgaGVhZCkgPT4ge1xuXG4gIC8qIGNoZWNrIHN0YXRlICovXG4gIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmICgoc3RhdGUud3JhcCAmIDIpID09PSAwKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG5cbiAgLyogc2F2ZSBoZWFkZXIgc3RydWN0dXJlICovXG4gIHN0YXRlLmhlYWQgPSBoZWFkO1xuICBoZWFkLmRvbmUgPSBmYWxzZTtcbiAgcmV0dXJuIFpfT0skMTtcbn07XG5cblxuY29uc3QgaW5mbGF0ZVNldERpY3Rpb25hcnkgPSAoc3RybSwgZGljdGlvbmFyeSkgPT4ge1xuICBjb25zdCBkaWN0TGVuZ3RoID0gZGljdGlvbmFyeS5sZW5ndGg7XG5cbiAgbGV0IHN0YXRlO1xuICBsZXQgZGljdGlkO1xuICBsZXQgcmV0O1xuXG4gIC8qIGNoZWNrIHN0YXRlICovXG4gIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgaWYgKHN0YXRlLndyYXAgIT09IDAgJiYgc3RhdGUubW9kZSAhPT0gRElDVCkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGNvcnJlY3QgZGljdGlvbmFyeSBpZGVudGlmaWVyICovXG4gIGlmIChzdGF0ZS5tb2RlID09PSBESUNUKSB7XG4gICAgZGljdGlkID0gMTsgLyogYWRsZXIzMigwLCBudWxsLCAwKSovXG4gICAgLyogZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIGRpY3RpZCA9IGFkbGVyMzJfMShkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xuICAgIGlmIChkaWN0aWQgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICByZXR1cm4gWl9EQVRBX0VSUk9SJDE7XG4gICAgfVxuICB9XG4gIC8qIGNvcHkgZGljdGlvbmFyeSB0byB3aW5kb3cgdXNpbmcgdXBkYXRld2luZG93KCksIHdoaWNoIHdpbGwgYW1lbmQgdGhlXG4gICBleGlzdGluZyBkaWN0aW9uYXJ5IGlmIGFwcHJvcHJpYXRlICovXG4gIHJldCA9IHVwZGF0ZXdpbmRvdyhzdHJtLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCBkaWN0TGVuZ3RoKTtcbiAgaWYgKHJldCkge1xuICAgIHN0YXRlLm1vZGUgPSBNRU07XG4gICAgcmV0dXJuIFpfTUVNX0VSUk9SJDE7XG4gIH1cbiAgc3RhdGUuaGF2ZWRpY3QgPSAxO1xuICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGRpY3Rpb25hcnkgc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0skMTtcbn07XG5cblxudmFyIGluZmxhdGVSZXNldF8xID0gaW5mbGF0ZVJlc2V0O1xudmFyIGluZmxhdGVSZXNldDJfMSA9IGluZmxhdGVSZXNldDI7XG52YXIgaW5mbGF0ZVJlc2V0S2VlcF8xID0gaW5mbGF0ZVJlc2V0S2VlcDtcbnZhciBpbmZsYXRlSW5pdF8xID0gaW5mbGF0ZUluaXQ7XG52YXIgaW5mbGF0ZUluaXQyXzEgPSBpbmZsYXRlSW5pdDI7XG52YXIgaW5mbGF0ZV8yJDEgPSBpbmZsYXRlJDI7XG52YXIgaW5mbGF0ZUVuZF8xID0gaW5mbGF0ZUVuZDtcbnZhciBpbmZsYXRlR2V0SGVhZGVyXzEgPSBpbmZsYXRlR2V0SGVhZGVyO1xudmFyIGluZmxhdGVTZXREaWN0aW9uYXJ5XzEgPSBpbmZsYXRlU2V0RGljdGlvbmFyeTtcbnZhciBpbmZsYXRlSW5mbyA9ICdwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlQ29kZXNVc2VkID0gaW5mbGF0ZUNvZGVzVXNlZDtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVDb3B5ID0gaW5mbGF0ZUNvcHk7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlR2V0RGljdGlvbmFyeSA9IGluZmxhdGVHZXREaWN0aW9uYXJ5O1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZU1hcmsgPSBpbmZsYXRlTWFyaztcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVQcmltZSA9IGluZmxhdGVQcmltZTtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVTeW5jID0gaW5mbGF0ZVN5bmM7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlU3luY1BvaW50ID0gaW5mbGF0ZVN5bmNQb2ludDtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVVbmRlcm1pbmUgPSBpbmZsYXRlVW5kZXJtaW5lO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVZhbGlkYXRlID0gaW5mbGF0ZVZhbGlkYXRlO1xuKi9cblxudmFyIGluZmxhdGVfMSQyID0ge1xuXHRpbmZsYXRlUmVzZXQ6IGluZmxhdGVSZXNldF8xLFxuXHRpbmZsYXRlUmVzZXQyOiBpbmZsYXRlUmVzZXQyXzEsXG5cdGluZmxhdGVSZXNldEtlZXA6IGluZmxhdGVSZXNldEtlZXBfMSxcblx0aW5mbGF0ZUluaXQ6IGluZmxhdGVJbml0XzEsXG5cdGluZmxhdGVJbml0MjogaW5mbGF0ZUluaXQyXzEsXG5cdGluZmxhdGU6IGluZmxhdGVfMiQxLFxuXHRpbmZsYXRlRW5kOiBpbmZsYXRlRW5kXzEsXG5cdGluZmxhdGVHZXRIZWFkZXI6IGluZmxhdGVHZXRIZWFkZXJfMSxcblx0aW5mbGF0ZVNldERpY3Rpb25hcnk6IGluZmxhdGVTZXREaWN0aW9uYXJ5XzEsXG5cdGluZmxhdGVJbmZvOiBpbmZsYXRlSW5mb1xufTtcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBHWmhlYWRlcigpIHtcbiAgLyogdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dCAqL1xuICB0aGlzLnRleHQgICAgICAgPSAwO1xuICAvKiBtb2RpZmljYXRpb24gdGltZSAqL1xuICB0aGlzLnRpbWUgICAgICAgPSAwO1xuICAvKiBleHRyYSBmbGFncyAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLnhmbGFncyAgICAgPSAwO1xuICAvKiBvcGVyYXRpbmcgc3lzdGVtICovXG4gIHRoaXMub3MgICAgICAgICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gZXh0cmEgZmllbGQgb3IgWl9OVUxMIGlmIG5vbmUgKi9cbiAgdGhpcy5leHRyYSAgICAgID0gbnVsbDtcbiAgLyogZXh0cmEgZmllbGQgbGVuZ3RoICh2YWxpZCBpZiBleHRyYSAhPSBaX05VTEwpICovXG4gIHRoaXMuZXh0cmFfbGVuICA9IDA7IC8vIEFjdHVhbGx5LCB3ZSBkb24ndCBuZWVkIGl0IGluIEpTLFxuICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgbGVhdmUgZm9yIGZldyBjb2RlIG1vZGlmaWNhdGlvbnNcblxuICAvL1xuICAvLyBTZXR1cCBsaW1pdHMgaXMgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5XG4gIC8vIGZvciBpbmZsYXRlIHVzZSBjb25zdGFudCBsaW1pdCBpbiA2NTUzNiBieXRlc1xuICAvL1xuXG4gIC8qIHNwYWNlIGF0IGV4dHJhIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMuZXh0cmFfbWF4ICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGZpbGUgbmFtZSBvciBaX05VTEwgKi9cbiAgdGhpcy5uYW1lICAgICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IG5hbWUgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5uYW1lX21heCAgID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgY29tbWVudCBvciBaX05VTEwgKi9cbiAgdGhpcy5jb21tZW50ICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IGNvbW1lbnQgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5jb21tX21heCAgID0gMDtcbiAgLyogdHJ1ZSBpZiB0aGVyZSB3YXMgb3Igd2lsbCBiZSBhIGhlYWRlciBjcmMgKi9cbiAgdGhpcy5oY3JjICAgICAgID0gMDtcbiAgLyogdHJ1ZSB3aGVuIGRvbmUgcmVhZGluZyBnemlwIGhlYWRlciAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLmRvbmUgICAgICAgPSBmYWxzZTtcbn1cblxudmFyIGd6aGVhZGVyID0gR1poZWFkZXI7XG5cbmNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmNvbnN0IHtcbiAgWl9OT19GTFVTSCwgWl9GSU5JU0gsXG4gIFpfT0ssIFpfU1RSRUFNX0VORCwgWl9ORUVEX0RJQ1QsIFpfU1RSRUFNX0VSUk9SLCBaX0RBVEFfRVJST1IsIFpfTUVNX0VSUk9SXG59ID0gY29uc3RhbnRzJDI7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyoqXG4gKiBjbGFzcyBJbmZsYXRlXG4gKlxuICogR2VuZXJpYyBKUy1zdHlsZSB3cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZFxuICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbaW5mbGF0ZV1dXG4gKiBhbmQgW1tpbmZsYXRlUmF3XV0uXG4gKiovXG5cbi8qIGludGVybmFsXG4gKiBpbmZsYXRlLmNodW5rcyAtPiBBcnJheVxuICpcbiAqIENodW5rcyBvZiBvdXRwdXQgZGF0YSwgaWYgW1tJbmZsYXRlI29uRGF0YV1dIG5vdCBvdmVycmlkZGVuLlxuICoqL1xuXG4vKipcbiAqIEluZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXl8U3RyaW5nXG4gKlxuICogVW5jb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tJbmZsYXRlI29uRGF0YV1dXG4gKiBhbmQgW1tJbmZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rXG4gKiAoY2FsbCBbW0luZmxhdGUjcHVzaF1dIHdpdGggYFpfRklOSVNIYCAvIGB0cnVlYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBpbmZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogU2hvdWxkIGJlIGNoZWNrZWQgaWYgYnJva2VuIGRhdGEgcG9zc2libGUuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tJbmZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBJbmZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGluZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgd2luZG93Qml0c2BcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGluZmxhdGVcbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgd2hlbiBubyBvcHRpb25zIHNldCwgYXV0b2RldGVjdCBkZWZsYXRlL2d6aXAgZGF0YSBmb3JtYXQgdmlhXG4gKiB3cmFwcGVyIGhlYWRlci5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqIGNvbnN0IGNodW5rMSA9IG5ldyBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pXG4gKiBjb25zdCBjaHVuazIgPSBuZXcgVWludDhBcnJheShbMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTldKTtcbiAqXG4gKiBjb25zdCBpbmZsYXRlID0gbmV3IHBha28uSW5mbGF0ZSh7IGxldmVsOiAzfSk7XG4gKlxuICogaW5mbGF0ZS5wdXNoKGNodW5rMSwgZmFsc2UpO1xuICogaW5mbGF0ZS5wdXNoKGNodW5rMiwgdHJ1ZSk7ICAvLyB0cnVlIC0+IGxhc3QgY2h1bmtcbiAqXG4gKiBpZiAoaW5mbGF0ZS5lcnIpIHsgdGhyb3cgbmV3IEVycm9yKGluZmxhdGUuZXJyKTsgfVxuICpcbiAqIGNvbnNvbGUubG9nKGluZmxhdGUucmVzdWx0KTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gSW5mbGF0ZSQxKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gY29tbW9uLmFzc2lnbih7XG4gICAgY2h1bmtTaXplOiAxMDI0ICogNjQsXG4gICAgd2luZG93Qml0czogMTUsXG4gICAgdG86ICcnXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIGNvbnN0IG9wdCA9IHRoaXMub3B0aW9ucztcblxuICAvLyBGb3JjZSB3aW5kb3cgc2l6ZSBmb3IgYHJhd2AgZGF0YSwgaWYgbm90IHNldCBkaXJlY3RseSxcbiAgLy8gYmVjYXVzZSB3ZSBoYXZlIG5vIGhlYWRlciBmb3IgYXV0b2RldGVjdC5cbiAgaWYgKG9wdC5yYXcgJiYgKG9wdC53aW5kb3dCaXRzID49IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSkge1xuICAgIG9wdC53aW5kb3dCaXRzID0gLW9wdC53aW5kb3dCaXRzO1xuICAgIGlmIChvcHQud2luZG93Qml0cyA9PT0gMCkgeyBvcHQud2luZG93Qml0cyA9IC0xNTsgfVxuICB9XG5cbiAgLy8gSWYgYHdpbmRvd0JpdHNgIG5vdCBkZWZpbmVkIChhbmQgbW9kZSBub3QgcmF3KSAtIHNldCBhdXRvZGV0ZWN0IGZsYWcgZm9yIGd6aXAvZGVmbGF0ZVxuICBpZiAoKG9wdC53aW5kb3dCaXRzID49IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSAmJlxuICAgICAgIShvcHRpb25zICYmIG9wdGlvbnMud2luZG93Qml0cykpIHtcbiAgICBvcHQud2luZG93Qml0cyArPSAzMjtcbiAgfVxuXG4gIC8vIEd6aXAgaGVhZGVyIGhhcyBubyBpbmZvIGFib3V0IHdpbmRvd3Mgc2l6ZSwgd2UgY2FuIGRvIGF1dG9kZXRlY3Qgb25seVxuICAvLyBmb3IgZGVmbGF0ZS4gU28sIGlmIHdpbmRvdyBzaXplIG5vdCBzZXQsIGZvcmNlIGl0IHRvIG1heCB3aGVuIGd6aXAgcG9zc2libGVcbiAgaWYgKChvcHQud2luZG93Qml0cyA+IDE1KSAmJiAob3B0LndpbmRvd0JpdHMgPCA0OCkpIHtcbiAgICAvLyBiaXQgMyAoMTYpIC0+IGd6aXBwZWQgZGF0YVxuICAgIC8vIGJpdCA0ICgzMikgLT4gYXV0b2RldGVjdCBnemlwL2RlZmxhdGVcbiAgICBpZiAoKG9wdC53aW5kb3dCaXRzICYgMTUpID09PSAwKSB7XG4gICAgICBvcHQud2luZG93Qml0cyB8PSAxNTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmVyciAgICA9IDA7ICAgICAgLy8gZXJyb3IgY29kZSwgaWYgaGFwcGVucyAoMCA9IFpfT0spXG4gIHRoaXMubXNnICAgID0gJyc7ICAgICAvLyBlcnJvciBtZXNzYWdlXG4gIHRoaXMuZW5kZWQgID0gZmFsc2U7ICAvLyB1c2VkIHRvIGF2b2lkIG11bHRpcGxlIG9uRW5kKCkgY2FsbHNcbiAgdGhpcy5jaHVua3MgPSBbXTsgICAgIC8vIGNodW5rcyBvZiBjb21wcmVzc2VkIGRhdGFcblxuICB0aGlzLnN0cm0gICA9IG5ldyB6c3RyZWFtKCk7XG4gIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuXG4gIGxldCBzdGF0dXMgID0gaW5mbGF0ZV8xJDIuaW5mbGF0ZUluaXQyKFxuICAgIHRoaXMuc3RybSxcbiAgICBvcHQud2luZG93Qml0c1xuICApO1xuXG4gIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXNbc3RhdHVzXSk7XG4gIH1cblxuICB0aGlzLmhlYWRlciA9IG5ldyBnemhlYWRlcigpO1xuXG4gIGluZmxhdGVfMSQyLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7XG5cbiAgLy8gU2V0dXAgZGljdGlvbmFyeVxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBvcHQuZGljdGlvbmFyeSA9IG5ldyBVaW50OEFycmF5KG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9XG4gICAgaWYgKG9wdC5yYXcpIHsgLy9JbiByYXcgbW9kZSB3ZSBuZWVkIHRvIHNldCB0aGUgZGljdGlvbmFyeSBlYXJseVxuICAgICAgc3RhdHVzID0gaW5mbGF0ZV8xJDIuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBvcHQuZGljdGlvbmFyeSk7XG4gICAgICBpZiAoc3RhdHVzICE9PSBaX09LKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlc1tzdGF0dXNdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbmZsYXRlI3B1c2goZGF0YVssIGZsdXNoX21vZGVdKSAtPiBCb29sZWFuXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXlCdWZmZXIpOiBpbnB1dCBkYXRhXG4gKiAtIGZsdXNoX21vZGUgKE51bWJlcnxCb29sZWFuKTogMC4uNiBmb3IgY29ycmVzcG9uZGluZyBaX05PX0ZMVVNILi5aX1RSRUVcbiAqICAgZmx1c2ggbW9kZXMuIFNlZSBjb25zdGFudHMuIFNraXBwZWQgb3IgYGZhbHNlYCBtZWFucyBaX05PX0ZMVVNILFxuICogICBgdHJ1ZWAgbWVhbnMgWl9GSU5JU0guXG4gKlxuICogU2VuZHMgaW5wdXQgZGF0YSB0byBpbmZsYXRlIHBpcGUsIGdlbmVyYXRpbmcgW1tJbmZsYXRlI29uRGF0YV1dIGNhbGxzIHdpdGhcbiAqIG5ldyBvdXRwdXQgY2h1bmtzLiBSZXR1cm5zIGB0cnVlYCBvbiBzdWNjZXNzLiBJZiBlbmQgb2Ygc3RyZWFtIGRldGVjdGVkLFxuICogW1tJbmZsYXRlI29uRW5kXV0gd2lsbCBiZSBjYWxsZWQuXG4gKlxuICogYGZsdXNoX21vZGVgIGlzIG5vdCBuZWVkZWQgZm9yIG5vcm1hbCBvcGVyYXRpb24sIGJlY2F1c2UgZW5kIG9mIHN0cmVhbVxuICogZGV0ZWN0ZWQgYXV0b21hdGljYWxseS4gWW91IG1heSB0cnkgdG8gdXNlIGl0IGZvciBhZHZhbmNlZCB0aGluZ3MsIGJ1dFxuICogdGhpcyBmdW5jdGlvbmFsaXR5IHdhcyBub3QgdGVzdGVkLlxuICpcbiAqIE9uIGZhaWwgY2FsbCBbW0luZmxhdGUjb25FbmRdXSB3aXRoIGVycm9yIGNvZGUgYW5kIHJldHVybiBmYWxzZS5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogcHVzaChjaHVuaywgZmFsc2UpOyAvLyBwdXNoIG9uZSBvZiBkYXRhIGNodW5rc1xuICogLi4uXG4gKiBwdXNoKGNodW5rLCB0cnVlKTsgIC8vIHB1c2ggbGFzdCBjaHVua1xuICogYGBgXG4gKiovXG5JbmZsYXRlJDEucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSwgZmx1c2hfbW9kZSkge1xuICBjb25zdCBzdHJtID0gdGhpcy5zdHJtO1xuICBjb25zdCBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICBjb25zdCBkaWN0aW9uYXJ5ID0gdGhpcy5vcHRpb25zLmRpY3Rpb25hcnk7XG4gIGxldCBzdGF0dXMsIF9mbHVzaF9tb2RlLCBsYXN0X2F2YWlsX291dDtcblxuICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChmbHVzaF9tb2RlID09PSB+fmZsdXNoX21vZGUpIF9mbHVzaF9tb2RlID0gZmx1c2hfbW9kZTtcbiAgZWxzZSBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGUgPT09IHRydWUgPyBaX0ZJTklTSCA6IFpfTk9fRkxVU0g7XG5cbiAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICBpZiAodG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJtLmlucHV0ID0gZGF0YTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDtcblxuICBmb3IgKDs7KSB7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBzdHJtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rU2l6ZSk7XG4gICAgICBzdHJtLm5leHRfb3V0ID0gMDtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplO1xuICAgIH1cblxuICAgIHN0YXR1cyA9IGluZmxhdGVfMSQyLmluZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gWl9ORUVEX0RJQ1QgJiYgZGljdGlvbmFyeSkge1xuICAgICAgc3RhdHVzID0gaW5mbGF0ZV8xJDIuaW5mbGF0ZVNldERpY3Rpb25hcnkoc3RybSwgZGljdGlvbmFyeSk7XG5cbiAgICAgIGlmIChzdGF0dXMgPT09IFpfT0spIHtcbiAgICAgICAgc3RhdHVzID0gaW5mbGF0ZV8xJDIuaW5mbGF0ZShzdHJtLCBfZmx1c2hfbW9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gWl9EQVRBX0VSUk9SKSB7XG4gICAgICAgIC8vIFJlcGxhY2UgY29kZSB3aXRoIG1vcmUgdmVyYm9zZVxuICAgICAgICBzdGF0dXMgPSBaX05FRURfRElDVDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTa2lwIHNueWMgbWFya2VycyBpZiBtb3JlIGRhdGEgZm9sbG93cyBhbmQgbm90IHJhdyBtb2RlXG4gICAgd2hpbGUgKHN0cm0uYXZhaWxfaW4gPiAwICYmXG4gICAgICAgICAgIHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EICYmXG4gICAgICAgICAgIHN0cm0uc3RhdGUud3JhcCA+IDAgJiZcbiAgICAgICAgICAgZGF0YVtzdHJtLm5leHRfaW5dICE9PSAwKVxuICAgIHtcbiAgICAgIGluZmxhdGVfMSQyLmluZmxhdGVSZXNldChzdHJtKTtcbiAgICAgIHN0YXR1cyA9IGluZmxhdGVfMSQyLmluZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICBjYXNlIFpfU1RSRUFNX0VSUk9SOlxuICAgICAgY2FzZSBaX0RBVEFfRVJST1I6XG4gICAgICBjYXNlIFpfTkVFRF9ESUNUOlxuICAgICAgY2FzZSBaX01FTV9FUlJPUjpcbiAgICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFJlbWVtYmVyIHJlYWwgYGF2YWlsX291dGAgdmFsdWUsIGJlY2F1c2Ugd2UgbWF5IHBhdGNoIG91dCBidWZmZXIgY29udGVudFxuICAgIC8vIHRvIGFsaWduIHV0Zjggc3RyaW5ncyBib3VuZGFyaWVzLlxuICAgIGxhc3RfYXZhaWxfb3V0ID0gc3RybS5hdmFpbF9vdXQ7XG5cbiAgICBpZiAoc3RybS5uZXh0X291dCkge1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EKSB7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgIGxldCBuZXh0X291dF91dGY4ID0gc3RyaW5ncy51dGY4Ym9yZGVyKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KTtcblxuICAgICAgICAgIGxldCB0YWlsID0gc3RybS5uZXh0X291dCAtIG5leHRfb3V0X3V0Zjg7XG4gICAgICAgICAgbGV0IHV0ZjhzdHIgPSBzdHJpbmdzLmJ1ZjJzdHJpbmcoc3RybS5vdXRwdXQsIG5leHRfb3V0X3V0ZjgpO1xuXG4gICAgICAgICAgLy8gbW92ZSB0YWlsICYgcmVhbGlnbiBjb3VudGVyc1xuICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSB0YWlsO1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplIC0gdGFpbDtcbiAgICAgICAgICBpZiAodGFpbCkgc3RybS5vdXRwdXQuc2V0KHN0cm0ub3V0cHV0LnN1YmFycmF5KG5leHRfb3V0X3V0ZjgsIG5leHRfb3V0X3V0ZjggKyB0YWlsKSwgMCk7XG5cbiAgICAgICAgICB0aGlzLm9uRGF0YSh1dGY4c3RyKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub25EYXRhKHN0cm0ub3V0cHV0Lmxlbmd0aCA9PT0gc3RybS5uZXh0X291dCA/IHN0cm0ub3V0cHV0IDogc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTXVzdCByZXBlYXQgaXRlcmF0aW9uIGlmIG91dCBidWZmZXIgaXMgZnVsbFxuICAgIGlmIChzdGF0dXMgPT09IFpfT0sgJiYgbGFzdF9hdmFpbF9vdXQgPT09IDApIGNvbnRpbnVlO1xuXG4gICAgLy8gRmluYWxpemUgaWYgZW5kIG9mIHN0cmVhbSByZWFjaGVkLlxuICAgIGlmIChzdGF0dXMgPT09IFpfU1RSRUFNX0VORCkge1xuICAgICAgc3RhdHVzID0gaW5mbGF0ZV8xJDIuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBJbmZsYXRlI29uRGF0YShjaHVuaykgLT4gVm9pZFxuICogLSBjaHVuayAoVWludDhBcnJheXxTdHJpbmcpOiBvdXRwdXQgZGF0YS4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgZWFjaCBjaHVuayB3aWxsIGJlIHN0cmluZy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAqKi9cbkluZmxhdGUkMS5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xufTtcblxuXG4vKipcbiAqIEluZmxhdGUjb25FbmQoc3RhdHVzKSAtPiBWb2lkXG4gKiAtIHN0YXR1cyAoTnVtYmVyKTogaW5mbGF0ZSBzdGF0dXMuIDAgKFpfT0spIG9uIHN1Y2Nlc3MsXG4gKiAgIG90aGVyIGlmIG5vdC5cbiAqXG4gKiBDYWxsZWQgZWl0aGVyIGFmdGVyIHlvdSB0ZWxsIGluZmxhdGUgdGhhdCB0aGUgaW5wdXQgc3RyZWFtIGlzXG4gKiBjb21wbGV0ZSAoWl9GSU5JU0gpLiBCeSBkZWZhdWx0IC0gam9pbiBjb2xsZWN0ZWQgY2h1bmtzLFxuICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy5cbiAqKi9cbkluZmxhdGUkMS5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gIC8vIE9uIHN1Y2Nlc3MgLSBqb2luXG4gIGlmIChzdGF0dXMgPT09IFpfT0spIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5yZXN1bHQgPSB0aGlzLmNodW5rcy5qb2luKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXN1bHQgPSBjb21tb24uZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7XG4gICAgfVxuICB9XG4gIHRoaXMuY2h1bmtzID0gW107XG4gIHRoaXMuZXJyID0gc3RhdHVzO1xuICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG59O1xuXG5cbi8qKlxuICogaW5mbGF0ZShkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXlCdWZmZXIpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIERlY29tcHJlc3MgYGRhdGFgIHdpdGggaW5mbGF0ZS91bmd6aXAgYW5kIGBvcHRpb25zYC4gQXV0b2RldGVjdFxuICogZm9ybWF0IHZpYSB3cmFwcGVyIGhlYWRlciBieSBkZWZhdWx0LiBUaGF0J3Mgd2h5IHdlIGRvbid0IHByb3ZpZGVcbiAqIHNlcGFyYXRlIGB1bmd6aXBgIG1ldGhvZC5cbiAqXG4gKiBTdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gKlxuICogLSB3aW5kb3dCaXRzXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogU3VnYXIgKG9wdGlvbnMpOlxuICpcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gc2F5IHRoYXQgd2Ugd29yayB3aXRoIHJhdyBzdHJlYW0sIGlmIHlvdSBkb24ndCB3aXNoIHRvIHNwZWNpZnlcbiAqICAgbmVnYXRpdmUgd2luZG93Qml0cyBpbXBsaWNpdGx5LlxuICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgY29udmVydGVkXG4gKiAgIGZyb20gdXRmOCB0byB1dGYxNiAoamF2YXNjcmlwdCkgc3RyaW5nLiBXaGVuIHN0cmluZyBvdXRwdXQgcmVxdWVzdGVkLFxuICogICBjaHVuayBsZW5ndGggY2FuIGRpZmZlciBmcm9tIGBjaHVua1NpemVgLCBkZXBlbmRpbmcgb24gY29udGVudC5cbiAqXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBwYWtvID0gcmVxdWlyZSgncGFrbycpO1xuICogY29uc3QgaW5wdXQgPSBwYWtvLmRlZmxhdGUobmV3IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSkpO1xuICogbGV0IG91dHB1dDtcbiAqXG4gKiB0cnkge1xuICogICBvdXRwdXQgPSBwYWtvLmluZmxhdGUoaW5wdXQpO1xuICogfSBjYXRjaCAoZXJyKSB7XG4gKiAgIGNvbnNvbGUubG9nKGVycik7XG4gKiB9XG4gKiBgYGBcbiAqKi9cbmZ1bmN0aW9uIGluZmxhdGUkMShpbnB1dCwgb3B0aW9ucykge1xuICBjb25zdCBpbmZsYXRvciA9IG5ldyBJbmZsYXRlJDEob3B0aW9ucyk7XG5cbiAgaW5mbGF0b3IucHVzaChpbnB1dCk7XG5cbiAgLy8gVGhhdCB3aWxsIG5ldmVyIGhhcHBlbnMsIGlmIHlvdSBkb24ndCBjaGVhdCB3aXRoIG9wdGlvbnMgOilcbiAgaWYgKGluZmxhdG9yLmVycikgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1lc3NhZ2VzW2luZmxhdG9yLmVycl07XG5cbiAgcmV0dXJuIGluZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGluZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5QnVmZmVyKTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2luZmxhdGVdXSwgYnV0IGNyZWF0ZXMgcmF3IGRhdGEsIHdpdGhvdXQgd3JhcHBlclxuICogKGhlYWRlciBhbmQgYWRsZXIzMiBjcmMpLlxuICoqL1xuZnVuY3Rpb24gaW5mbGF0ZVJhdyQxKGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLnJhdyA9IHRydWU7XG4gIHJldHVybiBpbmZsYXRlJDEoaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5cbi8qKlxuICogdW5nemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcik6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogSnVzdCBzaG9ydGN1dCB0byBbW2luZmxhdGVdXSwgYmVjYXVzZSBpdCBhdXRvZGV0ZWN0cyBmb3JtYXRcbiAqIGJ5IGhlYWRlci5jb250ZW50LiBEb25lIGZvciBjb252ZW5pZW5jZS5cbiAqKi9cblxuXG52YXIgSW5mbGF0ZV8xJDEgPSBJbmZsYXRlJDE7XG52YXIgaW5mbGF0ZV8yID0gaW5mbGF0ZSQxO1xudmFyIGluZmxhdGVSYXdfMSQxID0gaW5mbGF0ZVJhdyQxO1xudmFyIHVuZ3ppcCQxID0gaW5mbGF0ZSQxO1xudmFyIGNvbnN0YW50cyA9IGNvbnN0YW50cyQyO1xuXG52YXIgaW5mbGF0ZV8xJDEgPSB7XG5cdEluZmxhdGU6IEluZmxhdGVfMSQxLFxuXHRpbmZsYXRlOiBpbmZsYXRlXzIsXG5cdGluZmxhdGVSYXc6IGluZmxhdGVSYXdfMSQxLFxuXHR1bmd6aXA6IHVuZ3ppcCQxLFxuXHRjb25zdGFudHM6IGNvbnN0YW50c1xufTtcblxuY29uc3QgeyBEZWZsYXRlLCBkZWZsYXRlLCBkZWZsYXRlUmF3LCBnemlwIH0gPSBkZWZsYXRlXzEkMTtcblxuY29uc3QgeyBJbmZsYXRlLCBpbmZsYXRlLCBpbmZsYXRlUmF3LCB1bmd6aXAgfSA9IGluZmxhdGVfMSQxO1xuXG5cblxudmFyIERlZmxhdGVfMSA9IERlZmxhdGU7XG52YXIgZGVmbGF0ZV8xID0gZGVmbGF0ZTtcbnZhciBkZWZsYXRlUmF3XzEgPSBkZWZsYXRlUmF3O1xudmFyIGd6aXBfMSA9IGd6aXA7XG52YXIgSW5mbGF0ZV8xID0gSW5mbGF0ZTtcbnZhciBpbmZsYXRlXzEgPSBpbmZsYXRlO1xudmFyIGluZmxhdGVSYXdfMSA9IGluZmxhdGVSYXc7XG52YXIgdW5nemlwXzEgPSB1bmd6aXA7XG52YXIgY29uc3RhbnRzXzEgPSBjb25zdGFudHMkMjtcblxudmFyIHBha28gPSB7XG5cdERlZmxhdGU6IERlZmxhdGVfMSxcblx0ZGVmbGF0ZTogZGVmbGF0ZV8xLFxuXHRkZWZsYXRlUmF3OiBkZWZsYXRlUmF3XzEsXG5cdGd6aXA6IGd6aXBfMSxcblx0SW5mbGF0ZTogSW5mbGF0ZV8xLFxuXHRpbmZsYXRlOiBpbmZsYXRlXzEsXG5cdGluZmxhdGVSYXc6IGluZmxhdGVSYXdfMSxcblx0dW5nemlwOiB1bmd6aXBfMSxcblx0Y29uc3RhbnRzOiBjb25zdGFudHNfMVxufTtcblxuZXhwb3J0IHsgRGVmbGF0ZV8xIGFzIERlZmxhdGUsIEluZmxhdGVfMSBhcyBJbmZsYXRlLCBjb25zdGFudHNfMSBhcyBjb25zdGFudHMsIHBha28gYXMgZGVmYXVsdCwgZGVmbGF0ZV8xIGFzIGRlZmxhdGUsIGRlZmxhdGVSYXdfMSBhcyBkZWZsYXRlUmF3LCBnemlwXzEgYXMgZ3ppcCwgaW5mbGF0ZV8xIGFzIGluZmxhdGUsIGluZmxhdGVSYXdfMSBhcyBpbmZsYXRlUmF3LCB1bmd6aXBfMSBhcyB1bmd6aXAgfTtcbiIsICIvLyBVdGlsaWRhZGVzIGRlIGNvbXByZXNpXHUwMEYzbiBwYXJhIG1lbnNhamVzIFdlYlNvY2tldCBncmFuZGVzLlxuLy8gRXN0cmF0ZWdpYTogc2kgZWwgSlNPTiBzZXJpYWxpemFkbyBzdXBlcmEgNU1CLCBzZSBjb21wcmltZSBjb24gZ3ppcCB5IHNlIGVudlx1MDBFRGFcbi8vIGRlbnRybyBkZSB1biB3cmFwcGVyIHsgdHlwZTogJ19fY29tcHJlc3NlZF9fJywgZW5jb2Rpbmc6ICdnemlwK2Jhc2U2NCcsIC4uLiB9LlxuLy8gRW4gbGEgcmVjZXBjaVx1MDBGM24gc2UgZGV0ZWN0YSB5IHNlIHJlc3RhdXJhIGVsIG9iamV0byBvcmlnaW5hbCB0cmFuc3BhcmVudGUuXG5cbmltcG9ydCB7IGd6aXAsIHVuZ3ppcCB9IGZyb20gJ3Bha28nO1xuLyogZ2xvYmFsIGJ0b2EsIGF0b2IgKi9cblxuLy8gUG9seWZpbGxzIGJ0b2EvYXRvYiBwYXJhIGVudG9ybm8gZGUgYnVpbGQgKE5vZGUpIHNpIG5vIGV4aXN0ZW5cbmNvbnN0IF9idG9hID0gKHN0cikgPT4ge1xuICB0cnkgeyBpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHJldHVybiBidG9hKHN0cik7IH0gY2F0Y2gge31cbiAgdHJ5IHsgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzLkJ1ZmZlcikgcmV0dXJuIGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oc3RyLCAnYmluYXJ5JykudG9TdHJpbmcoJ2Jhc2U2NCcpOyB9IGNhdGNoIHt9XG4gIC8vIEZhbGxiYWNrIGxlbnRvXG4gIGxldCBvdXRwdXQgPSAnJztcbiAgY29uc3QgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChpIDwgc3RyLmxlbmd0aCkge1xuICAgIGNvbnN0IGMxID0gc3RyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICBjb25zdCBjMiA9IHN0ci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgY29uc3QgYzMgPSBzdHIuY2hhckNvZGVBdChpKyspO1xuICAgIGNvbnN0IGUxID0gYzEgPj4gMjtcbiAgICBjb25zdCBlMiA9ICgoYzEgJiAzKSA8PCA0KSB8IChjMiA+PiA0KTtcbiAgICBsZXQgZTMgPSAoKGMyICYgMTUpIDw8IDIpIHwgKGMzID4+IDYpO1xuICAgIGxldCBlNCA9IGMzICYgNjM7XG4gICAgaWYgKGlzTmFOKGMyKSkgeyBlMyA9IDY0OyBlNCA9IDY0OyB9XG4gICAgZWxzZSBpZiAoaXNOYU4oYzMpKSB7IGU0ID0gNjQ7IH1cbiAgICBvdXRwdXQgKz0gY2hhcnMuY2hhckF0KGUxKSArIGNoYXJzLmNoYXJBdChlMikgKyBjaGFycy5jaGFyQXQoZTMpICsgY2hhcnMuY2hhckF0KGU0KTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcbmNvbnN0IF9hdG9iID0gKGI2NCkgPT4ge1xuICB0cnkgeyBpZiAodHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicpIHJldHVybiBhdG9iKGI2NCk7IH0gY2F0Y2gge31cbiAgdHJ5IHsgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzLkJ1ZmZlcikgcmV0dXJuIGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpOyB9IGNhdGNoIHt9XG4gIGNvbnN0IGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcbiAgbGV0IHN0ciA9ICcnO1xuICBsZXQgaSA9IDA7XG4gIGI2NCA9IGI2NC5yZXBsYWNlKC9bXkEtWmEtejAtOSsvPV0vZywgJycpO1xuICB3aGlsZSAoaSA8IGI2NC5sZW5ndGgpIHtcbiAgICBjb25zdCBlMSA9IGNoYXJzLmluZGV4T2YoYjY0LmNoYXJBdChpKyspKTtcbiAgICBjb25zdCBlMiA9IGNoYXJzLmluZGV4T2YoYjY0LmNoYXJBdChpKyspKTtcbiAgICBjb25zdCBlMyA9IGNoYXJzLmluZGV4T2YoYjY0LmNoYXJBdChpKyspKTtcbiAgICBjb25zdCBlNCA9IGNoYXJzLmluZGV4T2YoYjY0LmNoYXJBdChpKyspKTtcbiAgICBjb25zdCBjMSA9IChlMSA8PCAyKSB8IChlMiA+PiA0KTtcbiAgICBjb25zdCBjMiA9ICgoZTIgJiAxNSkgPDwgNCkgfCAoZTMgPj4gMik7XG4gICAgY29uc3QgYzMgPSAoKGUzICYgMykgPDwgNikgfCBlNDtcbiAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjMSk7XG4gICAgaWYgKGUzICE9PSA2NCAmJiBlMyAhPT0gLTEpIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMyKTtcbiAgICBpZiAoZTQgIT09IDY0ICYmIGU0ICE9PSAtMSkgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzMpO1xuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5jb25zdCBUSFJFU0hPTEQgPSA1ICogMTAyNCAqIDEwMjQ7IFxuZnVuY3Rpb24gYnl0ZXNUb0Jhc2U2NChieXRlcykge1xuICBpZiAoIShieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ5dGVzKTtcbiAgbGV0IGJpbmFyeSA9ICcnO1xuICBjb25zdCBjaHVuayA9IDB4ODAwMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gY2h1bmspIHtcbiAgICBjb25zdCBzdWIgPSBieXRlcy5zdWJhcnJheShpLCBpICsgY2h1bmspO1xuICAgIGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHN1Yik7XG4gIH1cbiAgcmV0dXJuIF9idG9hKGJpbmFyeSk7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMoYjY0KSB7XG4gIGNvbnN0IGJpbmFyeSA9IF9hdG9iKGI2NCk7XG4gIGNvbnN0IGxlbiA9IGJpbmFyeS5sZW5ndGg7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykgYnl0ZXNbaV0gPSBiaW5hcnkuY2hhckNvZGVBdChpKTtcbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF5YmVDb21wcmVzc01lc3NhZ2Uob2JqKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHJldHVybiB7IHdyYXBwZXI6IG51bGwsIGpzb246IEpTT04uc3RyaW5naWZ5KG9iaiB8fCB7fSkgfTtcbiAgICBpZiAob2JqLnR5cGUgPT09ICdfX2NvbXByZXNzZWRfXycpIHtcbiAgICAgIC8vIEV2aXRhciBkb2JsZSBjb21wcmVzaVx1MDBGM24gYWNjaWRlbnRhbFxuICAgICAgcmV0dXJuIHsgd3JhcHBlcjogbnVsbCwganNvbjogSlNPTi5zdHJpbmdpZnkob2JqKSB9O1xuICAgIH1cbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgICBpZiAoanNvbi5sZW5ndGggPCBUSFJFU0hPTEQpIHtcbiAgICAgIHJldHVybiB7IHdyYXBwZXI6IG51bGwsIGpzb24gfTtcbiAgICB9XG4gICAgLy8gQ29tcHJpbWlyXG4gICAgY29uc3QgZ3ogPSBnemlwKGpzb24pO1xuICAgIGNvbnN0IGI2NCA9IGJ5dGVzVG9CYXNlNjQoZ3opO1xuICAgIGNvbnN0IHdyYXBwZXIgPSB7XG4gICAgICB0eXBlOiAnX19jb21wcmVzc2VkX18nLFxuICAgICAgZW5jb2Rpbmc6ICdnemlwK2Jhc2U2NCcsXG4gICAgICBvcmlnaW5hbFR5cGU6IG9iai50eXBlLFxuICAgICAgb3JpZ2luYWxMZW5ndGg6IGpzb24ubGVuZ3RoLFxuICAgICAgY29tcHJlc3NlZExlbmd0aDogYjY0Lmxlbmd0aCxcbiAgICAgIHBheWxvYWQ6IGI2NFxuICAgIH07XG4gICAgcmV0dXJuIHsgd3JhcHBlciwganNvbjogSlNPTi5zdHJpbmdpZnkod3JhcHBlcikgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIEZhbGxiYWNrIGEgcGxhbm9cbiAgICB0cnkgeyByZXR1cm4geyB3cmFwcGVyOiBudWxsLCBqc29uOiBKU09OLnN0cmluZ2lmeShvYmopIH07IH0gY2F0Y2ggeyByZXR1cm4geyB3cmFwcGVyOiBudWxsLCBqc29uOiAne30nIH07IH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJ5RGVjb21wcmVzc1dyYXBwZXIob2JqKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFvYmogfHwgb2JqLnR5cGUgIT09ICdfX2NvbXByZXNzZWRfXycgfHwgb2JqLmVuY29kaW5nICE9PSAnZ3ppcCtiYXNlNjQnKSByZXR1cm4gb2JqO1xuICAgIGNvbnN0IGI2NCA9IG9iai5wYXlsb2FkO1xuICAgIGlmICh0eXBlb2YgYjY0ICE9PSAnc3RyaW5nJyB8fCAhYjY0KSByZXR1cm4gb2JqO1xuICAgIGNvbnN0IGJ5dGVzID0gYmFzZTY0VG9CeXRlcyhiNjQpO1xuICAgIGNvbnN0IGpzb25CeXRlcyA9IHVuZ3ppcChieXRlcywgeyB0bzogJ3N0cmluZycgfSk7XG4gICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShqc29uQnl0ZXMpO1xuICAgIHJldHVybiBwYXJzZWQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBTaSBmYWxsYSwgZGV2b2x2ZXIgb3JpZ2luYWwgcGFyYSBubyByb21wZXIgZmx1am9cbiAgICByZXR1cm4gb2JqO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT01QUkVTU0lPTl9USFJFU0hPTEQgPSBUSFJFU0hPTEQ7XG4iLCAiaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2NvcmUvbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVTaGFkb3dSb290LCBtYWtlRHJhZ2dhYmxlIH0gZnJvbSBcIi4uL2NvcmUvdWktdXRpbHMuanNcIjtcbmltcG9ydCB7IFNMQVZFX0NPTkZJRywgZ2V0U2xhdmVUZXh0cyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2xhdmVVSSh7IFxuICBvbkNvbm5lY3QsIFxuICBvbkRpc2Nvbm5lY3QsXG4gIG9uQ2xvc2Vcbn0pIHtcbiAgbG9nKCdcdUQ4M0NcdURGOUJcdUZFMEYgQ3JlYW5kbyBpbnRlcmZheiBkZWwgU2xhdmUnKTtcbiAgXG4gIC8vIFZlcmlmaWNhciBzaSB5YSBleGlzdGUgdW4gcGFuZWwgcGFyYSBldml0YXIgZHVwbGljYWRvc1xuICBjb25zdCBleGlzdGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cGwtc2xhdmUtcGFuZWwnKTtcbiAgaWYgKGV4aXN0aW5nKSB7XG4gICAgZXhpc3RpbmcucmVtb3ZlKCk7XG4gICAgbG9nKCdcdUQ4M0RcdURERDFcdUZFMEYgUGFuZWwgZGUgc2xhdmUgZXhpc3RlbnRlIHJlbW92aWRvJyk7XG4gIH1cbiAgXG4gIGNvbnN0IHRleHRzID0gZ2V0U2xhdmVUZXh0cygpIHx8IHtcbiAgICB0aXRsZTogJ1dQbGFjZSBTbGF2ZScsXG4gICAgbWFzdGVyU2VydmVyOiAnU2Vydmlkb3IgTWFlc3RybycsXG4gICAgaXBBZGRyZXNzOiAnRGlyZWNjaVx1MDBGM24gSVAnLFxuICAgIGNvbm5lY3Q6ICdDb25lY3RhcicsXG4gICAgZGlzY29ubmVjdDogJ0Rlc2NvbmVjdGFyJyxcbiAgICBzdGF0dXM6ICdFc3RhZG8nLFxuICAgIHNsYXZlSWQ6ICdJRCBTbGF2ZScsXG4gICAgbW9kZTogJ01vZG8nLFxuICAgIHJ1bm5pbmc6ICdFamVjdXRhbmRvJyxcbiAgICBpZGxlOiAnSW5hY3Rpdm8nLFxuICAgIGNvbm5lY3RlZDogJ0NvbmVjdGFkbycsXG4gICAgY29ubmVjdGluZzogJ0NvbmVjdGFuZG8uLi4nLFxuICAgIGRpc2Nvbm5lY3RlZDogJ0Rlc2NvbmVjdGFkbycsXG4gICAgZXJyb3I6ICdFcnJvcicsXG4gICAgY2xvc2U6ICdDZXJyYXInLFxuICAgIHRlbGVtZXRyeTogJ1RlbGVtZXRyXHUwMEVEYScsXG4gICAgcmVwYWlyZWRQaXhlbHM6ICdQXHUwMEVEeGVsZXMgUmVwYXJhZG9zJyxcbiAgICBtaXNzaW5nUGl4ZWxzOiAnUFx1MDBFRHhlbGVzIEZhbHRhbnRlcycsXG4gICAgYWJzZW50UGl4ZWxzOiAnUFx1MDBFRHhlbGVzIEF1c2VudGVzJyxcbiAgICByZW1haW5pbmdDaGFyZ2VzOiAnQ2FyZ2FzIFJlc3RhbnRlcydcbiAgfTtcbiAgXG4gIGNvbnN0IHsgaG9zdCwgcm9vdCB9ID0gY3JlYXRlU2hhZG93Um9vdCgnd3BsLXNsYXZlLXBhbmVsJyk7XG4gIFxuICAvLyBDcmVhciBlc3RpbG9zXG4gIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudGV4dENvbnRlbnQgPSBgXG4gICAgQGtleWZyYW1lcyBzbGlkZUluIHtcbiAgICAgIGZyb20geyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMjBweCk7IG9wYWNpdHk6IDA7IH1cbiAgICAgIHRvIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyBvcGFjaXR5OiAxOyB9XG4gICAgfVxuICAgIFxuICAgIEBrZXlmcmFtZXMgcHVsc2Uge1xuICAgICAgMCUsIDEwMCUgeyBvcGFjaXR5OiAxOyB9XG4gICAgICA1MCUgeyBvcGFjaXR5OiAwLjU7IH1cbiAgICB9XG4gICAgXG4gICAgLnBhbmVsIHtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIHRvcDogMjBweDtcbiAgICAgIGxlZnQ6IDIwcHg7XG4gICAgICB3aWR0aDogMzIwcHg7XG4gICAgICBiYWNrZ3JvdW5kOiAke1NMQVZFX0NPTkZJRy5USEVNRS5wcmltYXJ5fTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7U0xBVkVfQ09ORklHLlRIRU1FLmFjY2VudH07XG4gICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgY29sb3I6ICR7U0xBVkVfQ09ORklHLlRIRU1FLnRleHR9O1xuICAgICAgZm9udC1mYW1pbHk6IHN5c3RlbS11aSwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsO1xuICAgICAgei1pbmRleDogOTk5OTk5O1xuICAgICAgYm94LXNoYWRvdzogMCA4cHggMjRweCByZ2JhKDAsMCwwLDAuNSk7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgYW5pbWF0aW9uOiBzbGlkZUluIDAuM3MgZWFzZS1vdXQ7XG4gICAgfVxuICAgIFxuICAgIC5oZWFkZXIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBiYWNrZ3JvdW5kOiAke1NMQVZFX0NPTkZJRy5USEVNRS5zZWNvbmRhcnl9O1xuICAgICAgcGFkZGluZzogMTBweCAxMnB4O1xuICAgICAgY29sb3I6ICR7U0xBVkVfQ09ORklHLlRIRU1FLmhpZ2hsaWdodH07XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgY3Vyc29yOiBtb3ZlO1xuICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgfVxuICAgIFxuICAgIC5ib2R5IHtcbiAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgfVxuICAgIFxuICAgIC5jb25uZWN0aW9uLXNlY3Rpb24ge1xuICAgICAgYmFja2dyb3VuZDogJHtTTEFWRV9DT05GSUcuVEhFTUUuc2Vjb25kYXJ5fTtcbiAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xuICAgIH1cblxuICAgIC5mYXZvcml0ZXMge1xuICAgICAgbWFyZ2luLXRvcDogOHB4O1xuICAgIH1cbiAgICAuZmF2LWhlYWRlciB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIHBhZGRpbmc6IDZweCA4cHg7XG4gICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICBiYWNrZ3JvdW5kOiAke1NMQVZFX0NPTkZJRy5USEVNRS5wcmltYXJ5fTtcbiAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4ycyBlYXNlO1xuICAgIH1cbiAgICAuZmF2LWhlYWRlcjpob3ZlciB7IGJhY2tncm91bmQ6ICR7U0xBVkVfQ09ORklHLlRIRU1FLmFjY2VudH07IH1cbiAgICAuZmF2LXRpdGxlIHsgZm9udC1zaXplOiAxMnB4OyBvcGFjaXR5OiAwLjk7IH1cbiAgICAuZmF2LWNoZXZyb24geyB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycyBlYXNlOyB9XG4gICAgLmZhdi1jaGV2cm9uLm9wZW4geyB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7IH1cbiAgICAuZmF2LWxpc3Qge1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgICB0cmFuc2l0aW9uOiBtYXgtaGVpZ2h0IDAuMjVzIGVhc2U7XG4gICAgfVxuICAgIC5mYXYtbGlzdC5vcGVuIHsgbWF4LWhlaWdodDogMjQwcHg7IH1cbiAgICAuZmF2LWl0ZW0ge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBnYXA6IDhweDtcbiAgICAgIHBhZGRpbmc6IDZweCA4cHg7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtTTEFWRV9DT05GSUcuVEhFTUUuYWNjZW50fTtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG4gICAgLmZhdi1hY3Rpb25zIHsgZGlzcGxheTogZmxleDsgZ2FwOiA2cHg7IH1cbiAgICAuc3Rhci1idG4ge1xuICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICBjb2xvcjogJHtTTEFWRV9DT05GSUcuVEhFTUUuaGlnaGxpZ2h0fTtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB9XG4gICAgLm1pbmktYnRuIHtcbiAgICAgIGJhY2tncm91bmQ6ICR7U0xBVkVfQ09ORklHLlRIRU1FLmFjY2VudH07XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBjb2xvcjogJHtTTEFWRV9DT05GSUcuVEhFTUUudGV4dH07XG4gICAgICBwYWRkaW5nOiA0cHggNnB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgZm9udC1zaXplOiAxMXB4O1xuICAgIH1cbiAgICBcbiAgICAuaW5wdXQtZ3JvdXAge1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB9XG4gICAgXG4gICAgLmxhYmVsIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgIGNvbG9yOiAke1NMQVZFX0NPTkZJRy5USEVNRS50ZXh0fTtcbiAgICB9XG4gICAgXG4gICAgLmlucHV0IHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtTTEFWRV9DT05GSUcuVEhFTUUuYWNjZW50fTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgIGJhY2tncm91bmQ6ICR7U0xBVkVfQ09ORklHLlRIRU1FLnByaW1hcnl9O1xuICAgICAgY29sb3I6ICR7U0xBVkVfQ09ORklHLlRIRU1FLnRleHR9O1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICB9XG4gICAgXG4gICAgLmlucHV0OmZvY3VzIHtcbiAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICBib3JkZXItY29sb3I6ICR7U0xBVkVfQ09ORklHLlRIRU1FLmhpZ2hsaWdodH07XG4gICAgfVxuICAgIFxuICAgIC5idG4ge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzO1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgIH1cbiAgICBcbiAgICAuYnRuOmRpc2FibGVkIHtcbiAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgfVxuICAgIFxuICAgIC5idG4uY29ubmVjdCB7XG4gICAgICBiYWNrZ3JvdW5kOiAke1NMQVZFX0NPTkZJRy5USEVNRS5zdWNjZXNzfTtcbiAgICAgIGNvbG9yOiAke1NMQVZFX0NPTkZJRy5USEVNRS5wcmltYXJ5fTtcbiAgICB9XG4gICAgXG4gICAgLmJ0bi5jb25uZWN0OmhvdmVyOm5vdCg6ZGlzYWJsZWQpIHtcbiAgICAgIGJhY2tncm91bmQ6ICMwMGNjMDA7XG4gICAgfVxuICAgIFxuICAgIC5idG4uZGlzY29ubmVjdCB7XG4gICAgICBiYWNrZ3JvdW5kOiAke1NMQVZFX0NPTkZJRy5USEVNRS5lcnJvcn07XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuICAgIFxuICAgIC5idG4uZGlzY29ubmVjdDpob3Zlcjpub3QoOmRpc2FibGVkKSB7XG4gICAgICBiYWNrZ3JvdW5kOiAjY2MwMDAwO1xuICAgIH1cbiAgICBcbiAgICAuYnRuLmNsb3NlIHtcbiAgICAgIGJhY2tncm91bmQ6ICR7U0xBVkVfQ09ORklHLlRIRU1FLmFjY2VudH07XG4gICAgICBjb2xvcjogJHtTTEFWRV9DT05GSUcuVEhFTUUudGV4dH07XG4gICAgfVxuICAgIFxuICAgIC5idG4uY2xvc2U6aG92ZXI6bm90KDpkaXNhYmxlZCkge1xuICAgICAgYmFja2dyb3VuZDogJHtTTEFWRV9DT05GSUcuVEhFTUUuaGlnaGxpZ2h0fTtcbiAgICB9XG4gICAgXG4gICAgLnN0YXR1cy1pbmRpY2F0b3Ige1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgd2lkdGg6IDEycHg7XG4gICAgICBoZWlnaHQ6IDEycHg7XG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICB9XG4gICAgXG4gICAgLnN0YXR1cy1pbmRpY2F0b3IuY29ubmVjdGVkIHtcbiAgICAgIGJhY2tncm91bmQ6ICR7U0xBVkVfQ09ORklHLlRIRU1FLmNvbm5lY3RlZH07XG4gICAgfVxuICAgIFxuICAgIC5zdGF0dXMtaW5kaWNhdG9yLmNvbm5lY3Rpbmcge1xuICAgICAgYmFja2dyb3VuZDogJHtTTEFWRV9DT05GSUcuVEhFTUUuY29ubmVjdGluZ307XG4gICAgICBhbmltYXRpb246IHB1bHNlIDFzIGluZmluaXRlO1xuICAgIH1cbiAgICBcbiAgICAuc3RhdHVzLWluZGljYXRvci5kaXNjb25uZWN0ZWQge1xuICAgICAgYmFja2dyb3VuZDogJHtTTEFWRV9DT05GSUcuVEhFTUUuZGlzY29ubmVjdGVkfTtcbiAgICB9XG4gICAgXG4gICAgLnN0YXR1cy1pbmRpY2F0b3IuZXJyb3Ige1xuICAgICAgYmFja2dyb3VuZDogJHtTTEFWRV9DT05GSUcuVEhFTUUuZXJyb3J9O1xuICAgIH1cbiAgICBcbiAgICAuc3RhdHVzLXNlY3Rpb24ge1xuICAgICAgYmFja2dyb3VuZDogJHtTTEFWRV9DT05GSUcuVEhFTUUuc2Vjb25kYXJ5fTtcbiAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xuICAgIH1cbiAgICBcbiAgICAuc3RhdHVzLXJvdyB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgbWFyZ2luOiA0cHggMDtcbiAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICB9XG4gICAgXG4gICAgLnN0YXR1cy12YWx1ZSB7XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgIH1cbiAgICBcbiAgLyogVGVsZW1ldHJcdTAwRURhIG9jdWx0YTogZXN0aWxvcyBlbGltaW5hZG9zICovXG4gICAgXG4gICAgLm1pbmltaXplZCB7XG4gICAgICB3aWR0aDogMjAwcHg7XG4gICAgfVxuICAgIFxuICAgIC5taW5pbWl6ZWQgLmJvZHkge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gICAgXG4gICAgLmVycm9yLW1lc3NhZ2Uge1xuICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDAsIDAsIDAuMSk7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAke1NMQVZFX0NPTkZJRy5USEVNRS5lcnJvcn07XG4gICAgICBjb2xvcjogJHtTTEFWRV9DT05GSUcuVEhFTUUuZXJyb3J9O1xuICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB9XG4gIGA7XG4gIHJvb3QuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICBcbiAgLy8gQ3JlYXIgcGFuZWwgcHJpbmNpcGFsXG4gIGNvbnN0IHBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHBhbmVsLmNsYXNzTmFtZSA9ICdwYW5lbCc7XG4gIHBhbmVsLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgICA8ZGl2PiR7dGV4dHMudGl0bGV9PC9kaXY+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGNsb3NlIGNsb3NlLWJ0blwiIHN0eWxlPVwid2lkdGg6IGF1dG87IHBhZGRpbmc6IDRweCA4cHg7IG1hcmdpbjogMDtcIj5cdTI3MTU8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbm5lY3Rpb24tc2VjdGlvblwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJsYWJlbFwiPiR7dGV4dHMubWFzdGVyU2VydmVyfTwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6ZmxleDsgZ2FwOjZweDsgYWxpZ24taXRlbXM6Y2VudGVyO1wiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJpbnB1dCBtYXN0ZXItdXJsLWlucHV0XCIgdmFsdWU9XCJ3czovL2xvY2FsaG9zdDo4MDAwL3dzL3NsYXZlXCIgcGxhY2Vob2xkZXI9XCJob3N0IG8gaXAgKGVqLiAxMC4wLjAuNTo4MDAwKVwiIHN0eWxlPVwiZmxleDoxO1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN0YXItYnRuXCIgdGl0bGU9XCJHdWFyZGFyIGNvbW8gZmF2b3JpdG9cIj5cdTI2MDY8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmF2b3JpdGVzXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmF2LWhlYWRlclwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhdi10aXRsZVwiPlNlcnZpZG9yZXMgZ3VhcmRhZG9zPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhdi1jaGV2cm9uXCI+XHUyNUI2PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmF2LWxpc3RcIj48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gY29ubmVjdCBjb25uZWN0LWJ0blwiPiR7dGV4dHMuY29ubmVjdH08L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBkaXNjb25uZWN0IGRpc2Nvbm5lY3QtYnRuXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPiR7dGV4dHMuZGlzY29ubmVjdH08L2J1dHRvbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImVycm9yLW1lc3NhZ2UgZXJyb3ItZGlzcGxheVwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8ZGl2IGNsYXNzPVwic3RhdHVzLXNlY3Rpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInN0YXR1cy1yb3dcIj5cbiAgICAgICAgICA8c3Bhbj4ke3RleHRzLnN0YXR1c308L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0dXMtdmFsdWVcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhdHVzLWluZGljYXRvciBkaXNjb25uZWN0ZWRcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXR1cy10ZXh0XCI+JHt0ZXh0cy5kaXNjb25uZWN0ZWR9PC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXMtcm93XCI+XG4gICAgICAgICAgPHNwYW4+JHt0ZXh0cy5zbGF2ZUlkfTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXR1cy12YWx1ZSBzbGF2ZS1pZFwiPi08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdHVzLXJvd1wiPlxuICAgICAgICAgIDxzcGFuPiR7dGV4dHMubW9kZX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0dXMtdmFsdWUgY3VycmVudC1tb2RlXCI+LTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXMtcm93XCI+XG4gICAgICAgICAgPHNwYW4+JHt0ZXh0cy5ydW5uaW5nfTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXR1cy12YWx1ZSBydW5uaW5nLXN0YXR1c1wiPiR7dGV4dHMuaWRsZX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgPCEtLSBUZWxlbWV0clx1MDBFRGEgb2N1bHRhIC0tPlxuICAgICAgXG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGNsb3NlIGNsb3NlLXBhbmVsLWJ0blwiPiR7dGV4dHMuY2xvc2V9PC9idXR0b24+XG4gICAgPC9kaXY+XG4gIGA7XG4gIFxuICByb290LmFwcGVuZENoaWxkKHBhbmVsKTtcbiAgXG4gIC8vIFJlZmVyZW5jaWFzIGEgZWxlbWVudG9zXG4gIGNvbnN0IGVsZW1lbnRzID0ge1xuICAgIGhlYWRlcjogcGFuZWwucXVlcnlTZWxlY3RvcignLmhlYWRlcicpLFxuICAgIG1hc3RlclVybElucHV0OiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcubWFzdGVyLXVybC1pbnB1dCcpLFxuICBjb25uZWN0QnRuOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcuY29ubmVjdC1idG4nKSxcbiAgICBkaXNjb25uZWN0QnRuOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcuZGlzY29ubmVjdC1idG4nKSxcbiAgICBjbG9zZUJ0bjogcGFuZWwucXVlcnlTZWxlY3RvcignLmNsb3NlLWJ0bicpLFxuICAgIGNsb3NlUGFuZWxCdG46IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5jbG9zZS1wYW5lbC1idG4nKSxcbiAgICBlcnJvckRpc3BsYXk6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5lcnJvci1kaXNwbGF5JyksXG4gICAgc3RhdHVzSW5kaWNhdG9yOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcuc3RhdHVzLWluZGljYXRvcicpLFxuICAgIHN0YXR1c1RleHQ6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0dXMtdGV4dCcpLFxuICAgIHNsYXZlSWQ6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5zbGF2ZS1pZCcpLFxuICAgIGN1cnJlbnRNb2RlOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcuY3VycmVudC1tb2RlJyksXG4gICAgcnVubmluZ1N0YXR1czogcGFuZWwucXVlcnlTZWxlY3RvcignLnJ1bm5pbmctc3RhdHVzJyksXG4gIHN0YXJCdG46IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5zdGFyLWJ0bicpLFxuICBmYXZIZWFkZXI6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5mYXYtaGVhZGVyJyksXG4gIGZhdkNoZXZyb246IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5mYXYtY2hldnJvbicpLFxuICBmYXZMaXN0OiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcuZmF2LWxpc3QnKVxuICB9O1xuICBcbiAgLy8gSGFjZXIgZHJhZ2dhYmxlXG4gIG1ha2VEcmFnZ2FibGUoZWxlbWVudHMuaGVhZGVyLCBwYW5lbCk7XG4gIFxuICAvLyBVdGlsaWRhZGVzIFVSTFxuICBmdW5jdGlvbiBpc0xvY2FsaG9zdE5hbWUobmFtZSkge1xuICAgIHJldHVybiBuYW1lID09PSAnbG9jYWxob3N0JyB8fCBuYW1lID09PSAnMTI3LjAuMC4xJyB8fCBuYW1lID09PSAnOjoxJztcbiAgfVxuICBmdW5jdGlvbiBub3JtYWxpemVXc1VybChyYXcpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFyYXcpIHJldHVybiAnJztcbiAgICAgIGxldCB2ID0gU3RyaW5nKHJhdykudHJpbSgpO1xuICAgICAgLy8gaHR0cChzKSAtPiB3cyhzKVxuICAgICAgdiA9IHYucmVwbGFjZSgvXmh0dHA6XFwvXFwvL2ksICd3czovLycpLnJlcGxhY2UoL15odHRwczpcXC9cXC8vaSwgJ3dzczovLycpO1xuICAgICAgLy8gQVx1MDBGMWFkaXIgZXNxdWVtYSBzaSBmYWx0YVxuICAgICAgaWYgKCEvXlthLXpdKzpcXC9cXC8vaS50ZXN0KHYpKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtZSA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnd3NzOi8vJyA6ICd3czovLyc7XG4gICAgICAgIHYgPSBzY2hlbWUgKyB2O1xuICAgICAgfVxuICAgICAgLy8gQXNlZ3VyYXIgcnV0YSBwb3IgZGVmZWN0byBzaSBzb2xvIGhvc3RbOnB1ZXJ0b11cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKHYpO1xuICAgICAgICBpZiAoIXUucGF0aG5hbWUgfHwgdS5wYXRobmFtZSA9PT0gJy8nKSB7XG4gICAgICAgICAgdS5wYXRobmFtZSA9ICcvd3Mvc2xhdmUnO1xuICAgICAgICAgIHYgPSB1LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2gge31cbiAgICAgIHJldHVybiB2O1xuICAgIH0gY2F0Y2ggeyByZXR1cm4gcmF3OyB9XG4gIH1cblxuICAvLyBcdTAwREFsdGltYSBVUkwgdXNhZGFcbiAgY29uc3QgTFNfTEFTVF9VUkwgPSAnd3BsX3NsYXZlX2xhc3RfdXJsJztcbiAgdHJ5IHtcbiAgICBjb25zdCBsYXN0ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oTFNfTEFTVF9VUkwpO1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBlbGVtZW50cy5tYXN0ZXJVcmxJbnB1dC52YWx1ZSA9IGxhc3Q7XG4gICAgfVxuICB9IGNhdGNoIHt9XG5cbiAgLy8gXHUyMDE0XHUyMDE0XHUyMDE0IEZhdm9yaXRvcyAobG9jYWxTdG9yYWdlKSBcdTIwMTRcdTIwMTRcdTIwMTRcbiAgY29uc3QgTFNfS0VZID0gJ3dwbF9zbGF2ZV9mYXZvcml0ZXMnO1xuICBmdW5jdGlvbiBsb2FkRmF2b3JpdGVzKCkge1xuICAgIHRyeSB7IHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKExTX0tFWSkgfHwgJ1tdJyk7IH0gY2F0Y2ggeyByZXR1cm4gW107IH1cbiAgfVxuICBmdW5jdGlvbiBzYXZlRmF2b3JpdGVzKGxpc3QpIHtcbiAgICB0cnkgeyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShMU19LRVksIEpTT04uc3RyaW5naWZ5KGxpc3QpKTsgfSBjYXRjaCB7fVxuICB9XG4gIGZ1bmN0aW9uIGlzRmF2b3JpdGVkKHVybCkge1xuICAgIGNvbnN0IHYgPSBub3JtYWxpemVXc1VybCh1cmwgfHwgJycpO1xuICAgIGlmICghdikgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGxpc3QgPSBsb2FkRmF2b3JpdGVzKCk7XG4gICAgcmV0dXJuIGxpc3QuaW5jbHVkZXModik7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlU3RhclVJKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB2ID0gbm9ybWFsaXplV3NVcmwoZWxlbWVudHMubWFzdGVyVXJsSW5wdXQudmFsdWUudHJpbSgpKTtcbiAgICAgIGlmIChpc0Zhdm9yaXRlZCh2KSkge1xuICAgICAgICBlbGVtZW50cy5zdGFyQnRuLnRleHRDb250ZW50ID0gJ1x1MjYwNSc7XG4gICAgICAgIGVsZW1lbnRzLnN0YXJCdG4udGl0bGUgPSAnRWxpbWluYXIgZGUgZmF2b3JpdG9zJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnRzLnN0YXJCdG4udGV4dENvbnRlbnQgPSAnXHUyNjA2JztcbiAgICAgICAgZWxlbWVudHMuc3RhckJ0bi50aXRsZSA9ICdHdWFyZGFyIGNvbW8gZmF2b3JpdG8nO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge31cbiAgfVxuICBmdW5jdGlvbiBhZGRGYXZvcml0ZSh1cmwpIHtcbiAgICBjb25zdCB2ID0gbm9ybWFsaXplV3NVcmwodXJsKTtcbiAgICBpZiAoIXYpIHJldHVybjtcbiAgICBjb25zdCBsaXN0ID0gbG9hZEZhdm9yaXRlcygpO1xuICAgIGlmICghbGlzdC5pbmNsdWRlcyh2KSkgeyBsaXN0LnB1c2godik7IHNhdmVGYXZvcml0ZXMobGlzdCk7IHJlbmRlckZhdm9yaXRlcygpOyB9XG4gICAgdXBkYXRlU3RhclVJKCk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlRmF2b3JpdGUodXJsKSB7XG4gICAgY29uc3QgbGlzdCA9IGxvYWRGYXZvcml0ZXMoKS5maWx0ZXIodSA9PiB1ICE9PSB1cmwpO1xuICAgIHNhdmVGYXZvcml0ZXMobGlzdCk7IHJlbmRlckZhdm9yaXRlcygpO1xuICAgIHVwZGF0ZVN0YXJVSSgpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlckZhdm9yaXRlcygpIHtcbiAgICBjb25zdCBsaXN0ID0gbG9hZEZhdm9yaXRlcygpO1xuICAgIGVsZW1lbnRzLmZhdkxpc3QuaW5uZXJIVE1MID0gJyc7XG4gICAgbGlzdC5mb3JFYWNoKHUgPT4ge1xuICAgICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICByb3cuY2xhc3NOYW1lID0gJ2Zhdi1pdGVtJztcbiAgICAgIHJvdy5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxzcGFuIHN0eWxlPVwib3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO2ZsZXg6MTtcIj4ke3V9PC9zcGFuPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmF2LWFjdGlvbnNcIj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwibWluaS1idG4gY29ubmVjdC1taW5pXCI+Q29uZWN0YXI8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwibWluaS1idG4gcmVtb3ZlLW1pbmlcIj5FbGltaW5hcjwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5gO1xuICAgICAgcm93LnF1ZXJ5U2VsZWN0b3IoJy5jb25uZWN0LW1pbmknKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgZWxlbWVudHMubWFzdGVyVXJsSW5wdXQudmFsdWUgPSB1O1xuICAgICAgICB1cGRhdGVTdGFyVUkoKTtcbiAgICAgICAgdHJ5IHsgbG9jYWxTdG9yYWdlLnNldEl0ZW0oTFNfTEFTVF9VUkwsIHUpOyB9IGNhdGNoIHt9XG4gICAgICAgIGVsZW1lbnRzLmNvbm5lY3RCdG4uY2xpY2soKTtcbiAgICAgIH0pO1xuICAgICAgcm93LnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdmUtbWluaScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gcmVtb3ZlRmF2b3JpdGUodSkpO1xuICAgICAgZWxlbWVudHMuZmF2TGlzdC5hcHBlbmRDaGlsZChyb3cpO1xuICAgIH0pO1xuICB9XG4gIHJlbmRlckZhdm9yaXRlcygpO1xuXG4gIC8vIEVzdGFkbyBpbnRlcm5vXG4gIGxldCBpc01pbmltaXplZCA9IGZhbHNlO1xuXG4gIC8vIE5vdGE6IHlhIG5vIG1vc3RyYW1vcyBhdmlzbyBkZSBIVFRQUzsgZWwgYXV0by11cGdyYWRlIGEgd3NzIHNpZ3VlIGFjdGl2byBhbCBjb25lY3RhclxuICBcbiAgLy8gRXZlbnQgbGlzdGVuZXJzXG4gIC8vIFB1bHNhciBFbnRlciBwYXJhIGNvbmVjdGFyXG4gIGVsZW1lbnRzLm1hc3RlclVybElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBhc3luYyAoZXYpID0+IHtcbiAgICBpZiAoZXYua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICBlbGVtZW50cy5jb25uZWN0QnRuLmNsaWNrKCk7XG4gICAgfVxuICB9KTtcblxuICBlbGVtZW50cy5jb25uZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBtYXN0ZXJVcmwgPSBlbGVtZW50cy5tYXN0ZXJVcmxJbnB1dC52YWx1ZS50cmltKCk7XG4gICAgaWYgKCFtYXN0ZXJVcmwpIHtcbiAgICAgIHNob3dFcnJvcignUG9yIGZhdm9yIGluZ3Jlc2EgdW5hIFVSTCB2XHUwMEUxbGlkYScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBOb3JtYWxpemFyIGxhIFVSTCB5IHByZXZlbmlyIE1peGVkIENvbnRlbnRcbiAgICBtYXN0ZXJVcmwgPSBub3JtYWxpemVXc1VybChtYXN0ZXJVcmwpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1ID0gbmV3IFVSTChtYXN0ZXJVcmwpO1xuICAgICAgY29uc3QgaXNIdHRwc1BhZ2UgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgICAgY29uc3QgaXNJbnNlY3VyZVdzID0gL153czokL2kudGVzdCh1LnByb3RvY29sKTtcbiAgICAgIGNvbnN0IGlzTG9jYWwgPSBpc0xvY2FsaG9zdE5hbWUodS5ob3N0bmFtZSk7XG4gICAgICBpZiAoaXNIdHRwc1BhZ2UgJiYgaXNJbnNlY3VyZVdzICYmICFpc0xvY2FsKSB7XG4gICAgICAgIC8vIEF1dG8tdXBncmFkZSBhIHdzcyB5IGF2aXNhclxuICAgICAgICBjb25zdCB1cGdyYWRlZCA9IG1hc3RlclVybC5yZXBsYWNlKC9ed3M6XFwvXFwvL2ksICd3c3M6Ly8nKTtcbiAgICAgICAgc2hvd0Vycm9yKCdQXHUwMEUxZ2luYSBIVFRQUzogY2FtYmlhbmRvIGEgd3NzOi8vIHBhcmEgZXZpdGFyIGNvbnRlbmlkbyBtaXh0by4nKTtcbiAgICAgICAgZWxlbWVudHMubWFzdGVyVXJsSW5wdXQudmFsdWUgPSB1cGdyYWRlZDtcbiAgICAgICAgbWFzdGVyVXJsID0gdXBncmFkZWQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCB7fVxuXG4gICAgdHJ5IHtcbiAgICAgIGVsZW1lbnRzLmNvbm5lY3RCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgZWxlbWVudHMuZXJyb3JEaXNwbGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHRyeSB7IGxvY2FsU3RvcmFnZS5zZXRJdGVtKExTX0xBU1RfVVJMLCBtYXN0ZXJVcmwpOyB9IGNhdGNoIHt9XG4gICAgICBhd2FpdCBvbkNvbm5lY3QobWFzdGVyVXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgc2hvd0Vycm9yKGBFcnJvciBkZSBjb25leGlcdTAwRjNuOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICBlbGVtZW50cy5jb25uZWN0QnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgXG4gIGVsZW1lbnRzLmRpc2Nvbm5lY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgb25EaXNjb25uZWN0KCk7XG4gIH0pO1xuXG4gIC8vIEd1YXJkYXIgY29tbyBmYXZvcml0b1xuICBlbGVtZW50cy5zdGFyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IHYgPSBub3JtYWxpemVXc1VybChlbGVtZW50cy5tYXN0ZXJVcmxJbnB1dC52YWx1ZS50cmltKCkpO1xuICAgIGlmICghdikgcmV0dXJuO1xuICAgIGlmIChpc0Zhdm9yaXRlZCh2KSkge1xuICAgICAgcmVtb3ZlRmF2b3JpdGUodik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZEZhdm9yaXRlKHYpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gQWN0dWFsaXphciBsYSBlc3RyZWxsYSBjdWFuZG8gZWwgdXN1YXJpbyBjYW1iaWEgbGEgVVJMIG1hbnVhbG1lbnRlXG4gIGVsZW1lbnRzLm1hc3RlclVybElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdXBkYXRlU3RhclVJKTtcblxuICAvLyBTaW5jcm9uaXphciBlc3RhZG8gaW5pY2lhbCBkZSBsYSBlc3RyZWxsYSB0cmFzIGNhcmdhciBsYSBcdTAwRkFsdGltYSBVUkxcbiAgdXBkYXRlU3RhclVJKCk7XG5cbiAgLy8gVG9nZ2xlIGRlc3BsZWdhYmxlIGZhdm9yaXRvc1xuICBsZXQgZmF2T3BlbiA9IGZhbHNlO1xuICBlbGVtZW50cy5mYXZIZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgZmF2T3BlbiA9ICFmYXZPcGVuO1xuICAgIGVsZW1lbnRzLmZhdkxpc3QuY2xhc3NMaXN0LnRvZ2dsZSgnb3BlbicsIGZhdk9wZW4pO1xuICAgIGVsZW1lbnRzLmZhdkNoZXZyb24uY2xhc3NMaXN0LnRvZ2dsZSgnb3BlbicsIGZhdk9wZW4pO1xuICB9KTtcbiAgXG4gIGVsZW1lbnRzLmNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlmIChpc01pbmltaXplZCkge1xuICAgICAgLy8gUmVzdGF1cmFyXG4gICAgICBwYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdtaW5pbWl6ZWQnKTtcbiAgICAgIGlzTWluaW1pemVkID0gZmFsc2U7XG4gICAgICBlbGVtZW50cy5jbG9zZUJ0bi50ZXh0Q29udGVudCA9ICdcdTI3MTUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNaW5pbWl6YXJcbiAgICAgIHBhbmVsLmNsYXNzTGlzdC5hZGQoJ21pbmltaXplZCcpO1xuICAgICAgaXNNaW5pbWl6ZWQgPSB0cnVlO1xuICAgICAgZWxlbWVudHMuY2xvc2VCdG4udGV4dENvbnRlbnQgPSAnXHUyNUExJztcbiAgICB9XG4gIH0pO1xuICBcbiAgZWxlbWVudHMuY2xvc2VQYW5lbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBvbkNsb3NlKCk7XG4gICAgaG9zdC5yZW1vdmUoKTtcbiAgfSk7XG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSBtb3N0cmFyIGVycm9yZXNcbiAgZnVuY3Rpb24gc2hvd0Vycm9yKG1lc3NhZ2UpIHtcbiAgICBlbGVtZW50cy5lcnJvckRpc3BsYXkudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgIGVsZW1lbnRzLmVycm9yRGlzcGxheS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfVxuICBcbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgb2N1bHRhciBlcnJvcmVzXG4gIGZ1bmN0aW9uIGhpZGVFcnJvcigpIHtcbiAgICBlbGVtZW50cy5lcnJvckRpc3BsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuICBcbiAgLy8gQVBJIHBcdTAwRkFibGljYVxuICBjb25zdCBhcGkgPSB7XG4gICAgdXBkYXRlU3RhdHVzOiAoc3RhdHVzKSA9PiB7XG4gIGNvbnN0IHsgY29ubmVjdGlvblN0YXR1cywgc2xhdmVJZCwgY3VycmVudE1vZGUsIGlzUnVubmluZywgdGVsZW1ldHJ5RGF0YTogX3RlbGVtZXRyeURhdGEgfSA9IHN0YXR1cztcbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciBpbmRpY2Fkb3IgZGUgZXN0YWRvXG4gICAgICBlbGVtZW50cy5zdGF0dXNJbmRpY2F0b3IuY2xhc3NOYW1lID0gYHN0YXR1cy1pbmRpY2F0b3IgJHtjb25uZWN0aW9uU3RhdHVzfWA7XG4gICAgICBcbiAgICAgIC8vIEFjdHVhbGl6YXIgdGV4dG8gZGUgZXN0YWRvXG4gICAgICBjb25zdCBzdGF0dXNUZXh0cyA9IHtcbiAgICAgICAgY29ubmVjdGVkOiB0ZXh0cy5jb25uZWN0ZWQsXG4gICAgICAgIGNvbm5lY3Rpbmc6IHRleHRzLmNvbm5lY3RpbmcsXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogdGV4dHMuZGlzY29ubmVjdGVkLFxuICAgICAgICBlcnJvcjogdGV4dHMuZXJyb3JcbiAgICAgIH07XG4gICAgICBlbGVtZW50cy5zdGF0dXNUZXh0LnRleHRDb250ZW50ID0gc3RhdHVzVGV4dHNbY29ubmVjdGlvblN0YXR1c10gfHwgY29ubmVjdGlvblN0YXR1cztcbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciBib3RvbmVzIHNlZ1x1MDBGQW4gZWwgZXN0YWRvXG4gICAgICBpZiAoY29ubmVjdGlvblN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgZWxlbWVudHMuY29ubmVjdEJ0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBlbGVtZW50cy5kaXNjb25uZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBlbGVtZW50cy5tYXN0ZXJVcmxJbnB1dC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIGhpZGVFcnJvcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudHMuY29ubmVjdEJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgZWxlbWVudHMuZGlzY29ubmVjdEJ0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBlbGVtZW50cy5jb25uZWN0QnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIGVsZW1lbnRzLm1hc3RlclVybElucHV0LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBpZiAoY29ubmVjdGlvblN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgIHNob3dFcnJvcignRXJyb3IgZGUgY29uZXhpXHUwMEYzbi4gVmVyaWZpY2EgbGEgVVJMIHkgcXVlIGVsIHNlcnZpZG9yIGVzdFx1MDBFOSBlamVjdXRcdTAwRTFuZG9zZS4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBBY3R1YWxpemFyIGluZm9ybWFjaVx1MDBGM24gZGVsIHNsYXZlXG4gICAgICBlbGVtZW50cy5zbGF2ZUlkLnRleHRDb250ZW50ID0gc2xhdmVJZCB8fCAnLSc7XG4gICAgICBlbGVtZW50cy5jdXJyZW50TW9kZS50ZXh0Q29udGVudCA9IGN1cnJlbnRNb2RlIHx8ICctJztcbiAgICAgIGVsZW1lbnRzLnJ1bm5pbmdTdGF0dXMudGV4dENvbnRlbnQgPSBpc1J1bm5pbmcgPyB0ZXh0cy5ydW5uaW5nIDogdGV4dHMuaWRsZTtcbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciB0ZWxlbWV0clx1MDBFRGFcbiAgLy8gVUkgbm8gbXVlc3RyYSB0ZWxlbWV0clx1MDBFRGE7IG9taXRpbW9zIGFjdHVhbGl6YXIgZXN0b3MgY2FtcG9zXG4gICAgfSxcbiAgICBcbiAgICB1cGRhdGVUZXh0czogKCkgPT4ge1xuICBjb25zdCBfbmV3VGV4dHMgPSBnZXRTbGF2ZVRleHRzKCk7XG4gICAgICAvLyBBY3R1YWxpemFyIHRleHRvcyBkaW5cdTAwRTFtaWNhbWVudGUgc2kgZXMgbmVjZXNhcmlvXG4gICAgfSxcbiAgICBcbiAgICBjbGVhbnVwOiAoKSA9PiB7XG4gICAgICBob3N0LnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgXG4gIHJldHVybiBhcGk7XG59IiwgImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaGFkb3dSb290KGhvc3RJZCA9IG51bGwpIHtcbiAgY29uc3QgaG9zdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpZiAoaG9zdElkKSB7XG4gICAgaG9zdC5pZCA9IGhvc3RJZDtcbiAgfVxuICBob3N0LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMTBweDtcbiAgICByaWdodDogMTBweDtcbiAgICB6LWluZGV4OiAwOyAvKiBObyBmb3J6YXIgYWwgZnJlbnRlOyBlbCB3aW5kb3ctbWFuYWdlciBhanVzdGFyXHUwMEUxIHNlZ1x1MDBGQW4gY29ycmVzcG9uZGEgKi9cbiAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCAnUm9ib3RvJywgc2Fucy1zZXJpZjtcbiAgYDtcbiAgXG4gIGNvbnN0IHJvb3QgPSBob3N0LmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChob3N0KTtcbiAgXG4gIHJldHVybiB7IGhvc3QsIHJvb3QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VEcmFnZ2FibGUoZHJhZ0hhbmRsZSwgZWxlbWVudCkge1xuICBsZXQgcG9zMSA9IDAsIHBvczIgPSAwLCBwb3MzID0gMCwgcG9zNCA9IDA7XG4gIFxuICBkcmFnSGFuZGxlLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZHJhZ0hhbmRsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBkcmFnTW91c2VEb3duKTtcbiAgXG4gIGZ1bmN0aW9uIGRyYWdNb3VzZURvd24oZSkge1xuICAgIC8vIEV2aXRhciBhcnJhc3RyYSBzaSBlcyB1biBib3RcdTAwRjNuIGRlIGxhIGNhYmVjZXJhXG4gICAgaWYgKGUudGFyZ2V0LmNsb3Nlc3QoJy5oZWFkZXItYnRuLCAud3BsYWNlLWhlYWRlci1idG4nKSkgcmV0dXJuO1xuICAgIFxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBwb3MzID0gZS5jbGllbnRYO1xuICAgIHBvczQgPSBlLmNsaWVudFk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGNsb3NlRHJhZ0VsZW1lbnQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGVsZW1lbnREcmFnKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gZWxlbWVudERyYWcoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBwb3MxID0gcG9zMyAtIGUuY2xpZW50WDtcbiAgICBwb3MyID0gcG9zNCAtIGUuY2xpZW50WTtcbiAgICBwb3MzID0gZS5jbGllbnRYO1xuICAgIHBvczQgPSBlLmNsaWVudFk7XG4gICAgZWxlbWVudC5zdHlsZS50b3AgPSAoZWxlbWVudC5vZmZzZXRUb3AgLSBwb3MyKSArIFwicHhcIjtcbiAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSAoZWxlbWVudC5vZmZzZXRMZWZ0IC0gcG9zMSkgKyBcInB4XCI7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGNsb3NlRHJhZ0VsZW1lbnQoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGNsb3NlRHJhZ0VsZW1lbnQpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGVsZW1lbnREcmFnKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IGdldFNlY3Rpb24gfSBmcm9tICcuLi9sb2NhbGVzL2luZGV4LmpzJztcblxuZXhwb3J0IGNvbnN0IFNMQVZFX0NPTkZJRyA9IHtcbiAgUkVDT05ORUNUX0lOVEVSVkFMOiA1MDAwLCAvLyA1IHNlZ3VuZG9zXG4gIFRFTEVNRVRSWV9JTlRFUlZBTDogMzAwMDAsIC8vIDMwIHNlZ3VuZG9zXG4gIE1BWF9SRUNPTk5FQ1RfQVRURU1QVFM6IDEwLFxuICBUSEVNRToge1xuICAgIHByaW1hcnk6ICcjMDAwMDAwJyxcbiAgICBzZWNvbmRhcnk6ICcjMTExMTExJyxcbiAgICBhY2NlbnQ6ICcjMjIyMjIyJyxcbiAgICB0ZXh0OiAnI2ZmZmZmZicsXG4gICAgaGlnaGxpZ2h0OiAnIzc3NWNlMycsXG4gICAgc3VjY2VzczogJyMwMGZmMDAnLFxuICAgIGVycm9yOiAnI2ZmMDAwMCcsXG4gICAgd2FybmluZzogJyNmZmFhMDAnLFxuICAgIGNvbm5lY3RlZDogJyMwMGZmMDAnLFxuICAgIGNvbm5lY3Rpbmc6ICcjZmZhYTAwJyxcbiAgICBkaXNjb25uZWN0ZWQ6ICcjZmYwMDAwJ1xuICB9XG59O1xuXG4vLyBFc3RhIGZ1bmNpXHUwMEYzbiByZXRvcm5hIGxhcyB0cmFkdWNjaW9uZXMgZGluXHUwMEUxbWljYW1lbnRlXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2xhdmVUZXh0cygpIHtcbiAgcmV0dXJuIGdldFNlY3Rpb24oJ3NsYXZlJyk7XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIG9idGVuZXIgdGV4dG9zIGNvbiBwYXJcdTAwRTFtZXRyb3NcbmV4cG9ydCBmdW5jdGlvbiBnZXRTbGF2ZVRleHQoa2V5LCBwYXJhbXMgPSB7fSkge1xuICBjb25zdCB0ZXh0cyA9IGdldFNsYXZlVGV4dHMoKTtcbiAgbGV0IHRleHQgPSB0ZXh0c1trZXldIHx8IGtleTtcbiAgXG4gIC8vIEludGVycG9sYXIgcGFyXHUwMEUxbWV0cm9zXG4gIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChwYXJhbSA9PiB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShuZXcgUmVnRXhwKGBcXFxceyR7cGFyYW19XFxcXH1gLCAnZycpLCBwYXJhbXNbcGFyYW1dKTtcbiAgfSk7XG4gIFxuICByZXR1cm4gdGV4dDtcbn1cblxuLy8gVGV4dG9zIHBvciBkZWZlY3RvIHBhcmEgZWwgc2xhdmVcbmV4cG9ydCBjb25zdCBTTEFWRV9URVhUUyA9IHtcbiAgZ2V0IGVzKCkge1xuICAgIHJldHVybiBnZXRTZWN0aW9uKCdzbGF2ZScpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3Qgc2xhdmVTdGF0ZSA9IHtcbiAgY29ubmVjdGlvblN0YXR1czogJ2Rpc2Nvbm5lY3RlZCcsXG4gIHNsYXZlSWQ6IG51bGwsXG4gIGN1cnJlbnRNb2RlOiBudWxsLFxuICBpc1J1bm5pbmc6IGZhbHNlLFxuICBtYXN0ZXJVcmw6ICd3czovL2xvY2FsaG9zdDo4MDAwL3dzL3NsYXZlJyxcbiAgdGVsZW1ldHJ5RGF0YToge1xuICAgIHJlcGFpcmVkX3BpeGVsczogMCxcbiAgICBtaXNzaW5nX3BpeGVsczogMCxcbiAgICBhYnNlbnRfcGl4ZWxzOiAwLFxuICAgIHJlbWFpbmluZ19jaGFyZ2VzOiAwXG4gIH1cbn07IiwgImltcG9ydCB7IGxvZyB9IGZyb20gXCIuLi9jb3JlL2xvZ2dlci5qc1wiO1xuaW1wb3J0IHsgRkFSTV9ERUZBVUxUUywgZmFybVN0YXRlIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVGYXJtVUkgfSBmcm9tIFwiLi91aS5qc1wiO1xuaW1wb3J0IHsgbG9vcCwgcGFpbnRPbmNlIH0gZnJvbSBcIi4vbG9vcC5qc1wiO1xuaW1wb3J0IHsgZ2V0U2Vzc2lvbiwgY2hlY2tIZWFsdGggfSBmcm9tIFwiLi4vY29yZS93cGxhY2UtYXBpLmpzXCI7XG5pbXBvcnQgeyBpbml0aWFsaXplTGFuZ3VhZ2UsIHQgfSBmcm9tIFwiLi4vbG9jYWxlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgbG9hZEZhcm1DZmcgfSBmcm9tIFwiLi4vY29yZS9zdG9yYWdlLmpzXCI7XG5pbXBvcnQgeyBzZXNzaW9uU3RhcnQsIHNlc3Npb25QaW5nLCBzZXNzaW9uRW5kIH0gZnJvbSBcIi4uL2NvcmUvbWV0cmljcy9jbGllbnQuanNcIjtcbmltcG9ydCB7IGdldE1ldHJpY3NDb25maWcgfSBmcm9tIFwiLi4vY29yZS9tZXRyaWNzL2NvbmZpZy5qc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuRmFybSgpIHtcbiAgbG9nKCdcdUQ4M0RcdURFODAgSW5pY2lhbmRvIFdQbGFjZSBBdXRvLUZhcm0gKHZlcnNpXHUwMEYzbiBjb24gc2VsZWNjaVx1MDBGM24gZGUgem9uYSknKTtcbiAgXG4gIC8vIEluaWNpYWxpemFyIHNpc3RlbWEgZGUgaWRpb21hc1xuICBpbml0aWFsaXplTGFuZ3VhZ2UoKTtcbiAgLy8gSW50ZXJjZXB0b3IgZWxpbWluYWRvOiB5YSBubyBlcyBuZWNlc2FyaW8gaW5pY2lhbGl6YXIgdG9rZW4taW50ZXJjZXB0b3JcbiAgXG4gIC8vIEFzZWd1cmFyc2UgcXVlIGVsIGVzdGFkbyBnbG9iYWwgZXhpc3RlXG4gIHdpbmRvdy5fX3dwbGFjZUJvdCA9IHsgLi4ud2luZG93Ll9fd3BsYWNlQm90LCBmYXJtUnVubmluZzogdHJ1ZSB9O1xuXG4gIGxldCBjdXJyZW50VXNlckluZm8gPSBudWxsOyAvLyBWYXJpYWJsZSBnbG9iYWwgcGFyYSBpbmZvcm1hY2lcdTAwRjNuIGRlbCB1c3VhcmlvXG5cbiAgdHJ5IHtcbiAgICAvLyBJbmljaWFyIHNlc2lcdTAwRjNuIGRlIG1cdTAwRTl0cmljYXMgcGFyYSBGYXJtXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1jZmcgPSBnZXRNZXRyaWNzQ29uZmlnKHsgVkFSSUFOVDogJ2F1dG8tZmFybScgfSk7XG4gICAgICBpZiAobWNmZy5FTkFCTEVEKSB7XG4gICAgICAgIGlmICghd2luZG93Ll9fd3BsYWNlTWV0cmljcykgd2luZG93Ll9fd3BsYWNlTWV0cmljcyA9IHt9O1xuICAgICAgICB3aW5kb3cuX193cGxhY2VNZXRyaWNzLmZhcm1TZXNzaW9uQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgc2Vzc2lvblN0YXJ0KHsgYm90VmFyaWFudDogJ2F1dG8tZmFybScgfSk7XG4gICAgICAgICAgLy8gUGluZyByXHUwMEUxcGlkbyB0cmFzIGVsIGluaWNpbyBwYXJhIHJlZmxlamFyIHByZXNlbmNpYSBpbm1lZGlhdGFcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7IHNlc3Npb25QaW5nKHsgYm90VmFyaWFudDogJ2F1dG8tZmFybScsIG1ldGFkYXRhOiB7IHJlYXNvbjogJ2luaXQnIH0gfSk7IH0gY2F0Y2gge31cbiAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgY29uc3QgcGluZ0V2ZXJ5ID0gTWF0aC5tYXgoNjBfMDAwLCBtY2ZnLlBJTkdfSU5URVJWQUxfTVMgfHwgMzAwXzAwMCk7XG4gICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuZmFybVBpbmdJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgdHJ5IHsgc2Vzc2lvblBpbmcoeyBib3RWYXJpYW50OiAnYXV0by1mYXJtJywgbWV0YWRhdGE6IHsgcmVhc29uOiAnaW50ZXJ2YWwnIH0gfSk7IH0gY2F0Y2gge31cbiAgICAgICAgfSwgcGluZ0V2ZXJ5KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHt9XG4gICAgLy8gQ2FyZ2FyIGNvbmZpZ3VyYWNpXHUwMEYzbiBndWFyZGFkYSBvIHVzYXIgZGVmYXVsdHNcbiAgICBjb25zdCBzYXZlZENvbmZpZyA9IGxvYWRGYXJtQ2ZnKEZBUk1fREVGQVVMVFMpO1xuICAgIGNvbnN0IGNvbmZpZyA9IHsgLi4uRkFSTV9ERUZBVUxUUywgLi4uc2F2ZWRDb25maWd9O1xuICAgIFxuICAgIC8vIERldGVjdGFyIHNpdGVrZXkgYXV0b21cdTAwRTF0aWNhbWVudGUgc2kgbm8gZXN0XHUwMEUxIGNvbmZpZ3VyYWRhXG4gICAgaWYgKCFjb25maWcuU0lURUtFWSkge1xuICAgICAgY29uc3Qgc2l0ZUtleUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcqW2RhdGEtc2l0ZWtleV0nKTtcbiAgICAgIGlmIChzaXRlS2V5RWxlbWVudCkge1xuICAgICAgICBjb25maWcuU0lURUtFWSA9IHNpdGVLZXlFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXRla2V5Jyk7XG4gICAgICAgIGxvZyhgXHVEODNEXHVEQ0REIFNpdGVrZXkgZW5jb250cmFkYSBhdXRvbVx1MDBFMXRpY2FtZW50ZTogJHtjb25maWcuU0lURUtFWS5zdWJzdHJpbmcoMCwgMjApfS4uLmApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgTm8gc2UgcHVkbyBlbmNvbnRyYXIgbGEgc2l0ZWtleSBhdXRvbVx1MDBFMXRpY2FtZW50ZScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9idGVuZXIgaW5mb3JtYWNpXHUwMEYzbiBpbmljaWFsIGRlbCB1c3VhcmlvXG4gICAgY29uc3Qgc2Vzc2lvbkluZm8gPSBhd2FpdCBnZXRTZXNzaW9uKCk7XG4gICAgaWYgKHNlc3Npb25JbmZvLnN1Y2Nlc3MgJiYgc2Vzc2lvbkluZm8uZGF0YS51c2VyKSB7XG4gICAgICBjdXJyZW50VXNlckluZm8gPSB7XG4gICAgICAgIHVzZXJuYW1lOiBzZXNzaW9uSW5mby5kYXRhLnVzZXIubmFtZSB8fCAnQW5cdTAwRjNuaW1vJyxcbiAgICAgICAgY2hhcmdlczogc2Vzc2lvbkluZm8uZGF0YS5jaGFyZ2VzLFxuICAgICAgICBtYXhDaGFyZ2VzOiBzZXNzaW9uSW5mby5kYXRhLm1heENoYXJnZXMsXG4gICAgICAgIHBpeGVsczogc2Vzc2lvbkluZm8uZGF0YS51c2VyLnBpeGVsc1BhaW50ZWQgfHwgMFxuICAgICAgfTtcbiAgICAgIGZhcm1TdGF0ZS51c2VyID0gY3VycmVudFVzZXJJbmZvO1xuICAgICAgZmFybVN0YXRlLmNoYXJnZXMuY291bnQgPSBzZXNzaW9uSW5mby5kYXRhLmNoYXJnZXM7XG4gICAgICBmYXJtU3RhdGUuY2hhcmdlcy5tYXggPSBzZXNzaW9uSW5mby5kYXRhLm1heENoYXJnZXM7XG4gICAgICBsb2coYFx1RDgzRFx1REM2NCBVc3VhcmlvIGNvbmVjdGFkbzogJHtjdXJyZW50VXNlckluZm8udXNlcm5hbWV9IC0gQ2FyZ2FzOiAke2N1cnJlbnRVc2VySW5mby5jaGFyZ2VzfS8ke2N1cnJlbnRVc2VySW5mby5tYXhDaGFyZ2VzfSAtIFBcdTAwRUR4ZWxlczogJHtjdXJyZW50VXNlckluZm8ucGl4ZWxzfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2coJ1x1MjZBMFx1RkUwRiBObyBzZSBwdWRvIG9idGVuZXIgaW5mb3JtYWNpXHUwMEYzbiBkZWwgdXN1YXJpbycpO1xuICAgIH1cblxuICAgIC8vIENyZWFyIGludGVyZmF6IGRlIHVzdWFyaW9cbiAgICBjb25zdCB1aSA9IGNyZWF0ZUZhcm1VSShcbiAgICAgIGNvbmZpZyxcbiAgICAgIC8vIG9uU3RhcnRcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGZhcm1TdGF0ZS5ydW5uaW5nKSB7XG4gICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2Zhcm0uYWxyZWFkeVJ1bm5pbmcnKSwgJ3dhcm5pbmcnKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAvLyBMb3MgdG9rZW5zIHlhIGVzdFx1MDBFMW4gcHJlcGFyYWRvcyBwb3IgcHJlcGFyZVRva2Vuc0ZvckJvdFxuXG4gICAgICAgIC8vIFNpIG5vIHNlIGhhIHNlbGVjY2lvbmFkbyB1bmEgem9uYSwgYWN0aXZhciBhdXRvbVx1MDBFMXRpY2FtZW50ZSBsYSBzZWxlY2NpXHUwMEYzblxuICAgICAgICBpZiAoIWNvbmZpZy5QT1NJVElPTl9TRUxFQ1RFRCB8fCBjb25maWcuQkFTRV9YID09PSBudWxsIHx8IGNvbmZpZy5CQVNFX1kgPT09IG51bGwpIHtcbiAgICAgICAgICB1aS5zZXRTdGF0dXModCgnZmFybS5hdXRvU2VsZWN0UG9zaXRpb24nKSwgJ2luZm8nKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBY3RpdmFyIHNlbGVjY2lcdTAwRjNuIGRlIHpvbmEgYXV0b21cdTAwRTF0aWNhbWVudGVcbiAgICAgICAgICBjb25zdCBzZWxlY3RCdXR0b24gPSB1aS5nZXRFbGVtZW50KCkuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgnc2VsZWN0LXBvc2l0aW9uLWJ0bicpO1xuICAgICAgICAgIGlmIChzZWxlY3RCdXR0b24pIHtcbiAgICAgICAgICAgIHNlbGVjdEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZXRvcm5hciBmYWxzZSBwYXJhIG5vIGluaWNpYXIgZWwgYm90IHRvZGF2XHUwMEVEYVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZlcmlmaWNhciBzaSBBdXRvLUltYWdlIGVzdFx1MDBFMSBjb3JyaWVuZG9cbiAgICAgICAgaWYgKHdpbmRvdy5fX3dwbGFjZUJvdD8uaW1hZ2VSdW5uaW5nKSB7XG4gICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2Zhcm0uaW1hZ2VSdW5uaW5nV2FybmluZycpLCAnd2FybmluZycpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZhcm1TdGF0ZS5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2Zhcm0uc3RhcnRpbmdCb3QnKSwgJ2luZm8nKTtcbiAgICAgICAgdWkudXBkYXRlQnV0dG9uU3RhdGVzKHRydWUpO1xuXG4gIC8vIFJlZnJlc2NhciBwcmVzZW5jaWEgYWwgaW5pY2lhciByZWFsbWVudGUgZWwgbG9vcFxuICB0cnkgeyBzZXNzaW9uUGluZyh7IGJvdFZhcmlhbnQ6ICdhdXRvLWZhcm0nLCBtZXRhZGF0YTogeyByZWFzb246ICdzdGFydCcgfSB9KTsgfSBjYXRjaCB7fVxuXG4gICAgICAgIC8vIEluaWNpYXIgZWwgbG9vcCBwcmluY2lwYWxcbiAgYXdhaXQgbG9vcChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgZmFybVN0YXRlLFxuICAgICAgICAgIHVpLnNldFN0YXR1cyxcbiAgICAgICAgICB1aS5mbGFzaEVmZmVjdCxcbiAgICAgICAgICB1cGRhdGVTZXNzaW9uLFxuICAgICAgICAgIGNoZWNrQmFja2VuZEhlYWx0aCxcbiAgICAgICAgICB1cGRhdGVTdGF0c1xuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIC8vIG9uU3RvcFxuICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICBmYXJtU3RhdGUucnVubmluZyA9IGZhbHNlO1xuICAgICAgICB1aS5zZXRTdGF0dXModCgnZmFybS5zdG9wcGluZ0JvdCcpLCAnaW5mbycpO1xuICAgICAgICB1aS51cGRhdGVCdXR0b25TdGF0ZXMoZmFsc2UpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB1aS5zZXRTdGF0dXModCgnZmFybS5zdG9wcGVkJyksICdzdGF0dXMnKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIGFjdHVhbGl6YXIgaW5mb3JtYWNpXHUwMEYzbiBkZSBzZXNpXHUwMEYzblxuICAgIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVNlc3Npb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzZXNzaW9uSW5mbyA9IGF3YWl0IGdldFNlc3Npb24oKTtcbiAgICAgICAgaWYgKHNlc3Npb25JbmZvLnN1Y2Nlc3MgJiYgc2Vzc2lvbkluZm8uZGF0YS51c2VyKSB7XG4gICAgICAgICAgY3VycmVudFVzZXJJbmZvID0ge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHNlc3Npb25JbmZvLmRhdGEudXNlci5uYW1lIHx8ICdBblx1MDBGM25pbW8nLFxuICAgICAgICAgICAgY2hhcmdlczogc2Vzc2lvbkluZm8uZGF0YS5jaGFyZ2VzLFxuICAgICAgICAgICAgbWF4Q2hhcmdlczogc2Vzc2lvbkluZm8uZGF0YS5tYXhDaGFyZ2VzLFxuICAgICAgICAgICAgcGl4ZWxzOiBzZXNzaW9uSW5mby5kYXRhLnVzZXIucGl4ZWxzUGFpbnRlZCB8fCAwXG4gICAgICAgICAgfTtcbiAgICAgICAgICBmYXJtU3RhdGUudXNlciA9IGN1cnJlbnRVc2VySW5mbztcbiAgICAgICAgICBmYXJtU3RhdGUuY2hhcmdlcy5jb3VudCA9IHNlc3Npb25JbmZvLmRhdGEuY2hhcmdlcztcbiAgICAgICAgICBmYXJtU3RhdGUuY2hhcmdlcy5tYXggPSBzZXNzaW9uSW5mby5kYXRhLm1heENoYXJnZXM7XG4gICAgICAgICAgZmFybVN0YXRlLmNoYXJnZXMuY29vbGRvd25NcyA9IHNlc3Npb25JbmZvLmRhdGEuY2hhcmdlUmVnZW4gfHwgMzAwMDA7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZygnRXJyb3IgYWN0dWFsaXphbmRvIHNlc2lcdTAwRjNuOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSB2ZXJpZmljYXIgc2FsdWQgZGVsIGJhY2tlbmRcbiAgICBhc3luYyBmdW5jdGlvbiBjaGVja0JhY2tlbmRIZWFsdGgoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBoZWFsdGggPSBhd2FpdCBjaGVja0hlYWx0aCgpO1xuICAgICAgICBmYXJtU3RhdGUuaGVhbHRoID0gaGVhbHRoO1xuICAgICAgICByZXR1cm4gaGVhbHRoO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nKCdFcnJvciB2ZXJpZmljYW5kbyBzYWx1ZCBkZWwgYmFja2VuZDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHVwOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSBhY3R1YWxpemFyIGVzdGFkXHUwMEVEc3RpY2FzIGVuIGxhIFVJXG4gICAgZnVuY3Rpb24gdXBkYXRlU3RhdHMoKSB7XG4gICAgICBpZiAoY3VycmVudFVzZXJJbmZvKSB7XG4gICAgICAgIHVpLnVwZGF0ZVN0YXRzKFxuICAgICAgICAgIGZhcm1TdGF0ZS5wYWludGVkLFxuICAgICAgICAgIGZhcm1TdGF0ZS5jaGFyZ2VzLmNvdW50LFxuICAgICAgICAgIGZhcm1TdGF0ZS5yZXRyeUNvdW50LFxuICAgICAgICAgIGNvbmZpZy5USUxFX1ggfHwgMCxcbiAgICAgICAgICBjb25maWcuVElMRV9ZIHx8IDAsXG4gICAgICAgICAgZmFybVN0YXRlLmhlYWx0aFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZ1bmNpXHUwMEYzbiBnbG9iYWwgcGFyYSBwaW50YXIgdW5hIHZleiAodGVzdGluZylcbiAgICB3aW5kb3cuV1BBVUkgPSB7XG4gICAgICAuLi53aW5kb3cuV1BBVUksXG4gICAgICBvbmNlOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChmYXJtU3RhdGUucnVubmluZykge1xuICAgICAgICAgIHVpLnNldFN0YXR1cygnXHUyNzRDIERldFx1MDBFOW4gZWwgYm90IHByaW1lcm8gYW50ZXMgZGUgcGludGFyIG1hbnVhbG1lbnRlJywgJ2Vycm9yJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgLy8gTG9zIHRva2VucyBlc3RcdTAwRTFuIG1hbmVqYWRvcyBwb3IgZWwgaW50ZXJjZXB0b3IgYWN0aXZvXG5cbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHBhaW50T25jZShcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgZmFybVN0YXRlLFxuICAgICAgICAgIHVpLnNldFN0YXR1cyxcbiAgICAgICAgICB1aS5mbGFzaEVmZmVjdCxcbiAgICAgICAgICB1cGRhdGVTZXNzaW9uLFxuICAgICAgICAgIGNoZWNrQmFja2VuZEhlYWx0aFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgdXBkYXRlU3RhdHMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBBY3R1YWxpemFyIGVzdGFkXHUwMEVEc3RpY2FzIGluaWNpYWxlc1xuICAgIHVwZGF0ZVN0YXRzKCk7XG5cbiAgICAvLyBFc2N1Y2hhciBjYW1iaW9zIGRlIGlkaW9tYSBkZXNkZSBlbCBsYXVuY2hlclxuICAgIGNvbnN0IGhhbmRsZUxhbmd1YWdlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB7IGxhbmd1YWdlIH0gPSBldmVudC5kZXRhaWw7XG4gICAgICBsb2coYFx1RDgzQ1x1REYwRCBGYXJtOiBEZXRlY3RhZG8gY2FtYmlvIGRlIGlkaW9tYTogJHtsYW5ndWFnZX1gKTtcbiAgICAgIHVpLnVwZGF0ZVRleHRzKCk7XG4gICAgfTtcbiAgICBcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbGF1bmNoZXJMYW5ndWFnZUNoYW5nZWQnLCBoYW5kbGVMYW5ndWFnZUNoYW5nZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhbmd1YWdlQ2hhbmdlZCcsIGhhbmRsZUxhbmd1YWdlQ2hhbmdlKTtcblxuICAgIC8vIENsZWFudXAgYWwgY2VycmFyIGxhIHBcdTAwRTFnaW5hXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsICgpID0+IHtcbiAgICAgIGZhcm1TdGF0ZS5ydW5uaW5nID0gZmFsc2U7XG4gICAgICB1aS5kZXN0cm95KCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGF1bmNoZXJMYW5ndWFnZUNoYW5nZWQnLCBoYW5kbGVMYW5ndWFnZUNoYW5nZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGFuZ3VhZ2VDaGFuZ2VkJywgaGFuZGxlTGFuZ3VhZ2VDaGFuZ2UpO1xuICAgICAgaWYgKHdpbmRvdy5fX3dwbGFjZUJvdCkge1xuICAgICAgICB3aW5kb3cuX193cGxhY2VCb3QuZmFybVJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBtY2ZnID0gZ2V0TWV0cmljc0NvbmZpZygpO1xuICAgICAgICBpZiAobWNmZy5FTkFCTEVEICYmIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3M/LmZhcm1TZXNzaW9uQWN0aXZlKSB7XG4gICAgICBzZXNzaW9uRW5kKHsgYm90VmFyaWFudDogJ2F1dG8tZmFybScgfSk7XG4gICAgICAgICAgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5mYXJtU2Vzc2lvbkFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cuX193cGxhY2VNZXRyaWNzPy5mYXJtUGluZ0ludGVydmFsKSB7XG4gICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh3aW5kb3cuX193cGxhY2VNZXRyaWNzLmZhcm1QaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuZmFybVBpbmdJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvdy5fX3dwbGFjZU1ldHJpY3M/LmZhcm1WaXNpYmlsaXR5SGFuZGxlcikge1xuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCB3aW5kb3cuX193cGxhY2VNZXRyaWNzLmZhcm1WaXNpYmlsaXR5SGFuZGxlcik7XG4gICAgICAgICAgZGVsZXRlIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuZmFybVZpc2liaWxpdHlIYW5kbGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cuX193cGxhY2VNZXRyaWNzPy5mYXJtRm9jdXNIYW5kbGVyKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5mYXJtRm9jdXNIYW5kbGVyKTtcbiAgICAgICAgICBkZWxldGUgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5mYXJtRm9jdXNIYW5kbGVyO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHt9XG4gICAgfSk7XG5cbiAgICAvLyBWZXJpZmljYXIgc2FsdWQgZGVsIGJhY2tlbmQgaW5pY2lhbG1lbnRlXG4gICAgY2hlY2tCYWNrZW5kSGVhbHRoKCkudGhlbihoZWFsdGggPT4ge1xuICAgICAgdWkudXBkYXRlU3RhdHMoXG4gICAgICAgIGZhcm1TdGF0ZS5wYWludGVkLFxuICAgICAgICBmYXJtU3RhdGUuY2hhcmdlcy5jb3VudCxcbiAgICAgICAgZmFybVN0YXRlLnJldHJ5Q291bnQsXG4gICAgICAgIGNvbmZpZy5USUxFX1ggfHwgMCxcbiAgICAgICAgY29uZmlnLlRJTEVfWSB8fCAwLFxuICAgICAgICBoZWFsdGhcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBsb2coJ1x1MjcwNSBBdXRvLUZhcm0gaW5pY2lhbGl6YWRvIGNvcnJlY3RhbWVudGUnKTtcblxuICAgIC8vIENvbnNpZGVyYXIgYWwgdXN1YXJpbyBvbmxpbmUgYXVucXVlIGVzdFx1MDBFOSBvY2lvc286IHBpbmcgYWwgcmVjdXBlcmFyIHZpc2liaWxpZGFkL2ZvY29cbiAgICB0cnkge1xuICAgICAgY29uc3QgbWNmZyA9IGdldE1ldHJpY3NDb25maWcoKTtcbiAgICAgIGlmIChtY2ZnLkVOQUJMRUQpIHtcbiAgICAgICAgY29uc3QgdmlzaWJpbGl0eUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgICAgIHRyeSB7IHNlc3Npb25QaW5nKHsgYm90VmFyaWFudDogJ2F1dG8tZmFybScsIG1ldGFkYXRhOiB7IHJlYXNvbjogJ3Zpc2liaWxpdHknIH0gfSk7IH0gY2F0Y2gge31cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZvY3VzSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICB0cnkgeyBzZXNzaW9uUGluZyh7IGJvdFZhcmlhbnQ6ICdhdXRvLWZhcm0nLCBtZXRhZGF0YTogeyByZWFzb246ICdmb2N1cycgfSB9KTsgfSBjYXRjaCB7fVxuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgdmlzaWJpbGl0eUhhbmRsZXIpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBmb2N1c0hhbmRsZXIpO1xuICAgICAgICB3aW5kb3cuX193cGxhY2VNZXRyaWNzID0gd2luZG93Ll9fd3BsYWNlTWV0cmljcyB8fCB7fTtcbiAgICAgICAgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5mYXJtVmlzaWJpbGl0eUhhbmRsZXIgPSB2aXNpYmlsaXR5SGFuZGxlcjtcbiAgICAgICAgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5mYXJtRm9jdXNIYW5kbGVyID0gZm9jdXNIYW5kbGVyO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge31cbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2coJ1x1Mjc0QyBFcnJvciBpbmljaWFsaXphbmRvIEF1dG8tRmFybTonLCBlcnJvcik7XG4gICAgaWYgKHdpbmRvdy5fX3dwbGFjZUJvdCkge1xuICAgICAgd2luZG93Ll9fd3BsYWNlQm90LmZhcm1SdW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG4iLCAiLy8gQ29uZmlndXJhY2lcdTAwRjNuIHBvciBkZWZlY3RvIHBhcmEgV1BsYWNlIEF1dG9GYXJtXG5leHBvcnQgY29uc3QgRkFSTV9ERUZBVUxUUyA9IHtcbiAgU0lURUtFWTogJzB4NEFBQUFBQUJwcUplOEZPME44NHEwRicsIC8vIFR1cm5zdGlsZSBzaXRla2V5IChhalx1MDBGQXN0YWxvIHNpIGNhbWJpYSlcbiAgVElMRV9YOiAxMDg2LFxuICBUSUxFX1k6IDE1NjUsXG4gIFRJTEVfU0laRTogMzAwMCwgICAgICAgICAvLyBUaWxlcyBzb24gZGUgfjMwMDB4MzAwMCBzZWdcdTAwRkFuIGludmVzdGlnYWNpXHUwMEYzblxuICBERUxBWV9NUzogMTUwMDAsICAgICAgICAgLy8gMTUgc2VndW5kb3MgZW50cmUgcGludGFkYXMgKHByZWRldGVybWluYWRvKVxuICBNSU5fQ0hBUkdFUzogMTAsICAgICAgICAgLy8gbVx1MDBFRG5pbW8gZGUgY2FyZ2FzIHBhcmEgZW1wZXphciBhIHBpbnRhclxuICBDSEFSR0VfUkVHRU5fTVM6IDMwMDAwLCAgLy8gMSBjYXJnYSBjYWRhIDMwIHNlZ3VuZG9zXG4gIFBJWEVMU19QRVJfQkFUQ0g6IDIwLCAgICAvLyBuXHUwMEZBbWVybyBkZSBwXHUwMEVEeGVsZXMgYSBwaW50YXIgcG9yIGxvdGVcbiAgQ09MT1JfTUlOOiAxLFxuICBDT0xPUl9NQVg6IDMyLFxuICBDT0xPUl9NT0RFOiAncmFuZG9tJywgICAgLy8gJ3JhbmRvbScgfCAnZml4ZWQnXG4gIENPTE9SX0ZJWEVEOiAxLFxuICBDVVNUT01fUEFMRVRURTogWycjRkYwMDAwJywgJyMwMEZGMDAnLCAnIzAwMDBGRicsICcjRkZGRjAwJywgJyNGRjAwRkYnLCAnIzAwRkZGRiddLFxuICAvLyBOdWV2YSBmdW5jaW9uYWxpZGFkIGRlIHBvc2ljaVx1MDBGM24geSByYWRpb1xuICBCQVNFX1g6IG51bGwsICAgICAgICAgICAgLy8gUG9zaWNpXHUwMEYzbiBYIGJhc2UgKGxvY2FsIGFsIHRpbGUpIC0gc2UgZXN0YWJsZWNlIGFsIHNlbGVjY2lvbmFyIHpvbmFcbiAgQkFTRV9ZOiBudWxsLCAgICAgICAgICAgIC8vIFBvc2ljaVx1MDBGM24gWSBiYXNlIChsb2NhbCBhbCB0aWxlKSAtIHNlIGVzdGFibGVjZSBhbCBzZWxlY2Npb25hciB6b25hXG4gIEZBUk1fUkFESVVTOiA1MDAsICAgICAgICAvLyBSYWRpbyBkZSBmYXJtaW5nIGVuIHBcdTAwRUR4ZWxlcyAoNTAwcHggcG9yIGRlZmVjdG8gcGFyYSB6b25hIHNlZ3VyYSlcbiAgUE9TSVRJT05fU0VMRUNURUQ6IGZhbHNlLCAvLyBGbGFnIHBhcmEgaW5kaWNhciBzaSBzZSBzZWxlY2Npb25cdTAwRjMgdW5hIHBvc2ljaVx1MDBGM25cbiAgLy8gQXV0by1jb21wcmEgZGUgY2FyZ2FzIHVzYW5kbyBkcm9wbGV0cyBjdWFuZG8gPj0gNTAwXG4gIEFVVE9fQlVZX0VOQUJMRUQ6IGZhbHNlLFxuICBVSV9USEVNRToge1xuICAgIHByaW1hcnk6ICcjMDAwMDAwJyxcbiAgICBzZWNvbmRhcnk6ICcjMTExMTExJyxcbiAgICBhY2NlbnQ6ICcjMjIyMjIyJyxcbiAgICB0ZXh0OiAnI2ZmZmZmZicsXG4gICAgaGlnaGxpZ2h0OiAnIzc3NWNlMycsXG4gICAgc3VjY2VzczogJyMwMGZmMDAnLFxuICAgIGVycm9yOiAnI2ZmMDAwMCcsXG4gICAgcnVubmluZzogJyMwMGNjMDAnICAgICAvLyBWZXJkZSBwYXJhIGN1YW5kbyBlc3RcdTAwRTEgY29ycmllbmRvXG4gIH1cbn07XG5cbi8vIEVzdGFkbyBnbG9iYWwgZGVsIGZhcm1cbmV4cG9ydCBjb25zdCBmYXJtU3RhdGUgPSB7XG4gIHJ1bm5pbmc6IGZhbHNlLFxuICBwYWludGVkOiAwLFxuICBsYXN0OiBudWxsLCAgICAgICAgICAvLyB7eCx5LGNvbG9yLHN0YXR1cyxqc29ufVxuICBjaGFyZ2VzOiB7IGNvdW50OiAwLCBtYXg6IDAsIGNvb2xkb3duTXM6IDMwMDAwIH0sXG4gIGRyb3BsZXRzOiAwLFxuICB1c2VyOiBudWxsLFxuICBwYW5lbDogbnVsbCxcbiAgY2FwdHVyZU1vZGU6IGZhbHNlLCAgLy8gc25pZmZlciBhY3Rpdm8gcGFyYSBjYXB0dXJhciBUSUxFX1gvWSBkZXNkZSB1biBQT1NUIHJlYWxcbiAgc2VsZWN0aW5nUG9zaXRpb246IGZhbHNlLCAvLyBzbmlmZmVyIGFjdGl2byBwYXJhIGNhcHR1cmFyIHBvc2ljaVx1MDBGM24gYmFzZVxuICBvcmlnaW5hbEZldGNoOiB3aW5kb3cuZmV0Y2gsXG4gIHJldHJ5Q291bnQ6IDAsICAgICAgIC8vIGNvbnRhZG9yIGRlIHJlaW50ZW50b3NcbiAgaW5Db29sZG93bjogZmFsc2UsICAgLy8gc2kgZXN0XHUwMEUxIGVuIGNvb2xkb3duIGRlIDIgbWludXRvc1xuICBuZXh0UGFpbnRUaW1lOiAwLCAgICAvLyB0aW1lc3RhbXAgZGUgbGEgcHJcdTAwRjN4aW1hIHBpbnRhZGFcbiAgY29vbGRvd25FbmRUaW1lOiAwLCAgLy8gdGltZXN0YW1wIGRlbCBmaW5hbCBkZWwgY29vbGRvd25cbiAgaGVhbHRoOiBudWxsICAgICAgICAgLy8gZXN0YWRvIGRlIHNhbHVkIGRlbCBiYWNrZW5kXG59O1xuIiwgImltcG9ydCB7IHQgfSBmcm9tIFwiLi4vbG9jYWxlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQ09MT1JfTUFQLCBnZXRDb2xvck5hbWUgfSBmcm9tIFwiLi9wYWxldHRlLmpzXCI7XG5pbXBvcnQgeyBmYXJtU3RhdGUgfSBmcm9tIFwiLi9jb25maWcuanNcIjtcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSBcIi4uL2NvcmUvdXRpbHMuanNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuLi9jb3JlL2xvZ2dlci5qc1wiO1xuaW1wb3J0IHsgcmVnaXN0ZXJXaW5kb3cgfSBmcm9tIFwiLi4vY29yZS93aW5kb3ctbWFuYWdlci5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmFybVVJKGNvbmZpZywgb25TdGFydCwgb25TdG9wKSB7XG4gIGNvbnN0IGhvc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgaG9zdC5pZCA9ICd3cGxhY2UtZmFybS11aSc7XG4gIGhvc3Quc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjogZml4ZWQ7IHRvcDogMTJweDsgcmlnaHQ6IDEycHg7IGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIFwiU2Vnb2UgVUlcIiwgUm9ib3RvLCBBcmlhbDsnO1xuICBjb25zdCByb290ID0gaG9zdC5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50ZXh0Q29udGVudCA9IGBcbiAgICAucGFuZWx7YmFja2dyb3VuZDojMWYyOTM3O2NvbG9yOiNlNWU3ZWI7Ym9yZGVyOjFweCBzb2xpZCAjMzc0MTUxO2JvcmRlci1yYWRpdXM6MTBweDtib3gtc2hhZG93OjAgOHB4IDI0cHggcmdiYSgwLDAsMCwuNSk7d2lkdGg6MzIwcHg7b3ZlcmZsb3c6aGlkZGVufVxuICAuaGVhZGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZDojMTExODI3O2NvbG9yOiM5M2M1ZmQ7cGFkZGluZzoxMHB4IDEycHg7Zm9udC13ZWlnaHQ6NjAwO2N1cnNvcjptb3ZlO3VzZXItc2VsZWN0Om5vbmV9XG4gIC5taW4tYnRue2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Ym9yZGVyOjFweCBzb2xpZCAjMzc0MTUxO2NvbG9yOiNlNWU3ZWI7Ym9yZGVyLXJhZGl1czo2cHg7d2lkdGg6MjZweDtoZWlnaHQ6MjJweDtsaW5lLWhlaWdodDoyMHB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtmb250LXdlaWdodDo3MDA7Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbjphbGwgLjJzfVxuICAubWluLWJ0bjpob3ZlcntiYWNrZ3JvdW5kOiMxZjI5Mzd9XG4gIC5ib2R5e3BhZGRpbmc6MTJweDttYXgtaGVpZ2h0OjEwMDBweDt0cmFuc2l0aW9uOm1heC1oZWlnaHQgLjM1cyBlYXNlLCBvcGFjaXR5IC4yNXMgZWFzZSwgcGFkZGluZyAuMjVzIGVhc2V9XG4gIC5ib2R5LmNvbGxhcHNlZHttYXgtaGVpZ2h0OjA7b3BhY2l0eTouMDtvdmVyZmxvdzpoaWRkZW47cGFkZGluZzowfVxuICAgIC5yb3d7ZGlzcGxheTpmbGV4O2dhcDo4cHg7bWFyZ2luOjhweCAwfVxuICAgIC5idG57ZmxleDoxO3BhZGRpbmc6OHB4IDEwcHg7Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czo4cHg7Zm9udC13ZWlnaHQ6NzAwO2N1cnNvcjpwb2ludGVyO3RyYW5zaXRpb246YWxsIC4ycztmb250LXNpemU6MTNweH1cbiAgICAuYnRuLnByaW1hcnl7YmFja2dyb3VuZDojMjU2M2ViO2NvbG9yOiNmZmZ9XG4gICAgLmJ0bi5naG9zdHtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2JvcmRlcjoxcHggc29saWQgIzM3NDE1MTtjb2xvcjojZTVlN2VifVxuICAuYnRuLmdob3N0LmRhbmdlcntiYWNrZ3JvdW5kOiNlZjQ0NDQ7Y29sb3I6I2ZmZjtib3JkZXItY29sb3I6I2VmNDQ0NH1cbiAgICAuYnRuLnByaW1hcnk6ZGlzYWJsZWQsLmJ0bi5naG9zdDpkaXNhYmxlZHtvcGFjaXR5Oi41O2N1cnNvcjpub3QtYWxsb3dlZH1cbiAgICAuY2FyZHtiYWNrZ3JvdW5kOiMxMTE4Mjc7cGFkZGluZzoxMHB4O2JvcmRlci1yYWRpdXM6OHB4O21hcmdpbi10b3A6MTBweH1cbiAgICAuc3RhdHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47bWFyZ2luOjRweCAwO2ZvbnQtc2l6ZToxMnB4O29wYWNpdHk6Ljk1fVxuICAgIC5zdGF0dXN7bWFyZ2luLXRvcDoxMHB4O3BhZGRpbmc6OHB4O2JvcmRlci1yYWRpdXM6NnB4O3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToxMnB4O2JhY2tncm91bmQ6cmdiYSgyNTUsMjU1LDI1NSwuMDYpfVxuICAgIC5sYWJlbHtmb250LXNpemU6MTJweDtjb2xvcjojY2JkNWUxfVxuICAgIHNlbGVjdCxpbnB1dHtiYWNrZ3JvdW5kOiMxMTE4Mjc7Ym9yZGVyOjFweCBzb2xpZCAjMzc0MTUxO2NvbG9yOiNlNWU3ZWI7Ym9yZGVyLXJhZGl1czo2cHg7cGFkZGluZzo2cHggOHB4O2ZvbnQtc2l6ZToxMnB4fVxuICAgIC5ncmlkMntkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmciAxZnI7Z2FwOjhweH1cbiAgICAuY29sb3Jze2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KDgsMWZyKTtnYXA6NnB4fVxuICAgIC5zd2F0Y2h7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtib3JkZXI6MXB4IHNvbGlkICMzNzQxNTE7Ym9yZGVyLXJhZGl1czo0cHg7Y3Vyc29yOnBvaW50ZXJ9XG4gIC5hY3RpdmV7b3V0bGluZToycHggc29saWQgIzkzYzVmZH1cbiAgLyogTGlzdGEgdGV4dG8vdmFsb3IgcGFyYSBsYSBjb25maWd1cmFjaVx1MDBGM24gKi9cbiAgLmxpc3R7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtnYXA6OHB4fVxuICAubGlzdC1pdGVte2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Z2FwOjhweH1cbiAgLmxpc3QtaXRlbSAubGFiZWx7Zm9udC1zaXplOjEycHg7Y29sb3I6I2NiZDVlMX1cbiAgLmxpc3QtaXRlbSBpbnB1dHt3aWR0aDo4NHB4O3RleHQtYWxpZ246Y2VudGVyfVxuICAvKiBQYXJwYWRlbyBuYXJhbmphIHBhcmEgYm90XHUwMEYzbiBDYXB0dXJhciAqL1xuICBAa2V5ZnJhbWVzIHdwYS1ibGluay1vcmFuZ2V7MCUsMTAwJXtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2JvcmRlci1jb2xvcjojZjU5ZTBiO2NvbG9yOiNmZGU2OGF9NTAle2JhY2tncm91bmQ6I2Y1OWUwYjMzO2JvcmRlci1jb2xvcjojZjU5ZTBiO2NvbG9yOiNmZmZ9fVxuICAuYmxpbmstb3Jhbmdle2FuaW1hdGlvbjp3cGEtYmxpbmstb3JhbmdlIDFzIGluZmluaXRlOyBib3JkZXItd2lkdGg6MnB4ICFpbXBvcnRhbnR9XG4gIGA7XG4gIHJvb3QuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXG4gIGNvbnN0IHBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHBhbmVsLmNsYXNzTmFtZSA9ICdwYW5lbCc7XG4gIHBhbmVsLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+PHNwYW4+XHVEODNFXHVEREQxXHUyMDBEXHVEODNDXHVERjNFIFdQbGFjZSBGYXJtPC9zcGFuPjxidXR0b24gaWQ9XCJtaW5CdG5cIiBjbGFzcz1cIm1pbi1idG5cIiB0aXRsZT1cIiR7dCgnaW1hZ2UubWluaW1pemUnLCdNaW5pbWl6YXInKX1cIj5cdTIwMTM8L2J1dHRvbj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIHByaW1hcnlcIiBpZD1cInN0YXJ0QnRuXCI+JHt0KCdmYXJtLnN0YXJ0JywnSW5pY2lhcicpfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGdob3N0XCIgaWQ9XCJzdG9wQnRuXCIgZGlzYWJsZWQ+JHt0KCdmYXJtLnN0b3AnLCdEZXRlbmVyJyl9PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gZ2hvc3RcIiBpZD1cImxvZ3NCdG5cIj4ke3QoJ2Zhcm0ubG9nV2luZG93JywnTG9ncycpfTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gIDxkaXYgY2xhc3M9XCJzdGF0XCI+PHNwYW4+JHt0KCdmYXJtLnN0YXRzLnBhaW50ZWQnLCdQaW50YWRvcycpfTwvc3Bhbj48c3BhbiBpZD1cInBhaW50ZWRcIj4wPC9zcGFuPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwic3RhdFwiPjxzcGFuPiR7dCgnZmFybS5zdGF0cy5jaGFyZ2VzJywnQ2FyZ2FzJyl9PC9zcGFuPjxzcGFuIGlkPVwiY2hhcmdlc1wiPjAvMDwvc3Bhbj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInN0YXRcIj48c3Bhbj4ke3QoJ2Zhcm0uc3RhdHMuZHJvcGxldHMnLCdHb3RhcycpfTwvc3Bhbj48c3BhbiBpZD1cImRyb3BsZXRzXCI+MDwvc3Bhbj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInN0YXRcIj48c3Bhbj4ke3QoJ2Zhcm0uc3RhdHMudXNlcicsJ1VzdWFyaW8nKX08L3NwYW4+PHNwYW4gaWQ9XCJ1c2VybmFtZVwiPi08L3NwYW4+PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJzdGF0XCI+PHNwYW4+JHt0KCdmYXJtLnN0YXRzLnJldHJpZXMnLCdSZWludGVudG9zJyl9PC9zcGFuPjxzcGFuIGlkPVwicmV0cmllc1wiPjA8L3NwYW4+PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cImNhcmRcIiBpZD1cImNmZ0NhcmRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxpc3RcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdC1pdGVtXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+JHt0KCdmYXJtLmNvbmZpZy5taW5DaGFyZ2VzJywnQ2FyZ2FzIG1cdTAwRURuaW1hcycpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9XCJtaW5DaGFyZ2VzXCIgbWluPVwiMFwiIG1heD1cIjEwMFwiIHZhbHVlPVwiJHtjb25maWcuTUlOX0NIQVJHRVMgPz8gMTB9XCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdC1pdGVtXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+JHt0KCdmYXJtLmNvbmZpZy5kZWxheScsJ0VzcGVyYSAoc2VnKScpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9XCJkZWxheVNlY29uZHNcIiBtaW49XCIxXCIgbWF4PVwiMTIwXCIgdmFsdWU9XCIke01hdGgucm91bmQoKGNvbmZpZy5ERUxBWV9NU3x8MTUwMDApLzEwMDApIHx8IDE1fVwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QtaXRlbVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPiR7dCgnZmFybS5waXhlbHNQZXJCYXRjaCcsJ1BcdTAwRUR4ZWxlcyBwb3IgbG90ZScpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9XCJwaXhlbHNQZXJCYXRjaFwiIG1pbj1cIjFcIiBtYXg9XCI1MFwiIHZhbHVlPVwiJHtjb25maWcuUElYRUxTX1BFUl9CQVRDSCA/PyAyMH1cIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwibGFiZWxcIj4ke3QoJ2Zhcm0uY29sb3JNb2RlJywnTW9kbyBkZSBjb2xvcicpfTwvbGFiZWw+XG4gICAgICAgICAgPHNlbGVjdCBpZD1cImNvbG9yTW9kZVwiPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImZpeGVkXCI+JHt0KCdmYXJtLmNvbG9yLmZpeGVkJywnRmlqbycpfTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJhbmdlXCI+JHt0KCdmYXJtLmNvbG9yLnJhbmdlJywnUmFuZ28nKX08L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyYW5kb21cIj4ke3QoJ2Zhcm0uY29sb3IucmFuZG9tJywnQWxlYXRvcmlvJyl9PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwiZml4ZWRQaWNrZXJcIiBjbGFzcz1cInJvd1wiIHN0eWxlPVwiZmxleC1kaXJlY3Rpb246Y29sdW1uXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxhYmVsXCIgaWQ9XCJzZWxlY3RlZENvbG9yTGFiZWxcIj4ke3QoJ2Zhcm0uY29sb3Iuc2VsZWN0ZWQnLCdDb2xvciBzZWxlY2Npb25hZG8nKX06IC08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sb3JzXCIgaWQ9XCJjb2xvckdyaWRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJyYW5nZVBpY2tlclwiIGNsYXNzPVwiZ3JpZDJcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTtcIj5cbiAgICAgICAgICA8ZGl2PjxsYWJlbCBjbGFzcz1cImxhYmVsXCI+JHt0KCdmYXJtLmNvbG9yLm1pbicsJ01cdTAwRURuJyl9PC9sYWJlbD48c2VsZWN0IGlkPVwiY29sb3JNaW5cIj48L3NlbGVjdD48L2Rpdj5cbiAgICAgICAgICA8ZGl2PjxsYWJlbCBjbGFzcz1cImxhYmVsXCI+JHt0KCdmYXJtLmNvbG9yLm1heCcsJ01cdTAwRTF4Jyl9PC9sYWJlbD48c2VsZWN0IGlkPVwiY29sb3JNYXhcIj48L3NlbGVjdD48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8YnV0dG9uIGNsYXNzPVwiYnRuIGdob3N0XCIgaWQ9XCJjYXB0dXJlLWJ0blwiPiR7dCgnZmFybS5jYXB0dXJlJywnQ2FwdHVyYXIgem9uYScpfTwvYnV0dG9uPlxuICA8YnV0dG9uIGNsYXNzPVwiYnRuIGdob3N0XCIgaWQ9XCJvbmNlLWJ0blwiPiR7dCgnZmFybS5vbmNlJywnVW5hIHZleicpfTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGdob3N0XCIgaWQ9XCJzZWxlY3QtcG9zaXRpb24tYnRuXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj5TZWxlY3Q8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwicm93XCIgaWQ9XCJwb3NJbmZvUm93XCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj48L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwiY2FyZFwiIGlkPVwicHVyY2hhc2VDYXJkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiBzdHlsZT1cImFsaWduLWl0ZW1zOmNlbnRlcjsganVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiIHN0eWxlPVwiZmxleDoxO1wiPiR7dCgnZmFybS5hdXRvYnV5LnRpdGxlJywnQXV0by1jb21wcmEgKCs1IGNhcmdhcyknKX08L3NwYW4+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwidG9nZ2xlLXN3aXRjaFwiIHN0eWxlPVwicG9zaXRpb246IHJlbGF0aXZlOyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHdpZHRoOiA1MHB4OyBoZWlnaHQ6IDI2cHg7IG1hcmdpbi1sZWZ0OiAxMHB4O1wiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiYXV0b0J1eUNoZWNrYm94XCIgc3R5bGU9XCJvcGFjaXR5OiAwOyB3aWR0aDogMDsgaGVpZ2h0OiAwO1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b2dnbGUtc2xpZGVyXCIgc3R5bGU9XCJcbiAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VmNDQ0NDtcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTNweDtcbiAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RjMjYyNjtcbiAgICAgICAgICAgIFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9nZ2xlLWtub2JcIiBzdHlsZT1cIlxuICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICAgIGxlZnQ6IDNweDtcbiAgICAgICAgICAgICAgdG9wOiAzcHg7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xuICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDZweCByZ2JhKDAsMCwwLDAuMyk7XG4gICAgICAgICAgICBcIj48L3NwYW4+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiBpZD1cIm1hbnVhbEJ1eVJvd1wiIHN0eWxlPVwiZGlzcGxheTpub25lOyBnYXA6OHB4OyBhbGlnbi1pdGVtczpjZW50ZXI7XCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBwcmltYXJ5XCIgaWQ9XCJtYW51YWxCdXlCdG5cIj4ke3QoJ2Zhcm0uYnV5Q2hhcmdlcycsJ0NvbXByYXIgKzUgY2FyZ2FzJyl9PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCIgc3R5bGU9XCJmb250LXNpemU6MTJweDsgY29sb3I6IzljYTNhZlwiPiR7dCgnZmFybS5hdXRvYnV5LmhpbnQnLCdTZSBhY3RpdmFyXHUwMEUxIGF1dG9tXHUwMEUxdGljYW1lbnRlIGN1YW5kbyB0ZW5nYXMgXHUyMjY1IDUwMCBnb3RhcycpfTwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJzdGF0dXNcIiBpZD1cInN0YXR1c1wiPiR7dCgnZmFybS5yZWFkeScsJ0xpc3RvJyl9PC9kaXY+XG4gIGA7XG4gIHJvb3QuYXBwZW5kQ2hpbGQocGFuZWwpO1xuXG4gIC8vIE1hcGVhciBlbGVtZW50b3NcbiAgY29uc3QgZWxzID0ge1xuICAgIHN0YXJ0OiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjc3RhcnRCdG4nKSxcbiAgICBzdG9wOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjc3RvcEJ0bicpLFxuICAgIGxvZ3NCdG46IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNsb2dzQnRuJyksXG4gICAgc3RhdHVzOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjc3RhdHVzJyksXG4gICAgcGFpbnRlZDogcGFuZWwucXVlcnlTZWxlY3RvcignI3BhaW50ZWQnKSxcbiAgY2hhcmdlczogcGFuZWwucXVlcnlTZWxlY3RvcignI2NoYXJnZXMnKSxcbiAgZHJvcGxldHM6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNkcm9wbGV0cycpLFxuICB1c2VybmFtZTogcGFuZWwucXVlcnlTZWxlY3RvcignI3VzZXJuYW1lJyksXG4gIHJldHJpZXM6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNyZXRyaWVzJyksXG4gICAgY29sb3JNb2RlOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjY29sb3JNb2RlJyksXG4gICAgY29sb3JHcmlkOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjY29sb3JHcmlkJyksXG4gICAgY29sb3JNaW46IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNjb2xvck1pbicpLFxuICAgIGNvbG9yTWF4OiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjY29sb3JNYXgnKSxcbiAgICBmaXhlZFBpY2tlcjogcGFuZWwucXVlcnlTZWxlY3RvcignI2ZpeGVkUGlja2VyJyksXG4gICAgcmFuZ2VQaWNrZXI6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNyYW5nZVBpY2tlcicpLFxuICAgIHNlbGVjdFBvc2l0aW9uQnRuOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjc2VsZWN0LXBvc2l0aW9uLWJ0bicpLFxuICAgIGNhcHR1cmVCdG46IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNjYXB0dXJlLWJ0bicpLFxuICBvbmNlQnRuOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjb25jZS1idG4nKSxcbiAgcG9zSW5mb1ZhbHVlOiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjcG9zSW5mb1ZhbHVlJyksXG4gIG1pbkNoYXJnZXM6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNtaW5DaGFyZ2VzJyksXG4gIGRlbGF5U2Vjb25kczogcGFuZWwucXVlcnlTZWxlY3RvcignI2RlbGF5U2Vjb25kcycpLFxuICBwaXhlbHNQZXJCYXRjaDogcGFuZWwucXVlcnlTZWxlY3RvcignI3BpeGVsc1BlckJhdGNoJyksXG4gIHNlbGVjdGVkQ29sb3JMYWJlbDogcGFuZWwucXVlcnlTZWxlY3RvcignI3NlbGVjdGVkQ29sb3JMYWJlbCcpLFxuICBhdXRvQnV5Q2hlY2tib3g6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNhdXRvQnV5Q2hlY2tib3gnKSxcbiAgbWFudWFsQnV5Um93OiBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjbWFudWFsQnV5Um93JyksXG4gIG1hbnVhbEJ1eUJ0bjogcGFuZWwucXVlcnlTZWxlY3RvcignI21hbnVhbEJ1eUJ0bicpXG4gIH07XG5cbiAgLy8gRWwgYm90XHUwMEYzbiBzZWxlY3QtcG9zaXRpb24gcmVkaXJpZ2UgYWwgZGUgY2FwdHVyYSBwYXJhIG1hbnRlbmVyIGNvbXBhdGliaWxpZGFkXG4gIGVscy5zZWxlY3RQb3NpdGlvbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBlbHMuY2FwdHVyZUJ0bj8uY2xpY2soKTtcbiAgfSk7XG5cbiAgLy8gUmVsbGVuYXIgc2VsZWN0cyBkZSBjb2xvclxuICBmdW5jdGlvbiBmaWxsQ29sb3JPcHRpb25zKHNlbGVjdCkge1xuICAgIHNlbGVjdC5pbm5lckhUTUwgPSAnJztcbiAgICBPYmplY3QudmFsdWVzKENPTE9SX01BUCkuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAvLyBFbiBzZWxlY3RzIGRlIHJhbmdvLCBvbWl0aW1vcyBUcmFuc3BhcmVudCAocmdiIG51bGwpXG4gICAgICBpZiAoIWVudHJ5LnJnYikgcmV0dXJuO1xuICAgICAgY29uc3Qgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICBvcHQudmFsdWUgPSBTdHJpbmcoZW50cnkuaWQpO1xuICAgICAgb3B0LnRleHRDb250ZW50ID0gYCR7ZW50cnkuaWR9IC0gJHtlbnRyeS5uYW1lfWA7XG4gICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0KTtcbiAgICB9KTtcbiAgfVxuICBmaWxsQ29sb3JPcHRpb25zKGVscy5jb2xvck1pbik7XG4gIGZpbGxDb2xvck9wdGlvbnMoZWxzLmNvbG9yTWF4KTtcblxuICBmdW5jdGlvbiByZW5kZXJDb2xvckdyaWQoYWN0aXZlSWQpIHtcbiAgICBlbHMuY29sb3JHcmlkLmlubmVySFRNTCA9ICcnO1xuICAgIE9iamVjdC52YWx1ZXMoQ09MT1JfTUFQKS5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgIGNvbnN0IGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGQuY2xhc3NOYW1lID0gJ3N3YXRjaCcgKyAoZW50cnkuaWQgPT09IGFjdGl2ZUlkID8gJyBhY3RpdmUnIDogJycpO1xuICAgICAgaWYgKGVudHJ5LnJnYikge1xuICAgICAgICBkLnN0eWxlLmJhY2tncm91bmQgPSBgcmdiKCR7ZW50cnkucmdiLnJ9LCR7ZW50cnkucmdiLmd9LCR7ZW50cnkucmdiLmJ9KWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNb3N0cmFyIHBhdHJcdTAwRjNuIGRlIGFqZWRyZXogcGFyYSBUcmFuc3BhcmVudFxuICAgICAgICBkLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGBsaW5lYXItZ3JhZGllbnQoNDVkZWcsICNiYmIgMjUlLCB0cmFuc3BhcmVudCAyNSUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCAjYmJiIDI1JSwgdHJhbnNwYXJlbnQgMjUlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCB0cmFuc3BhcmVudCA3NSUsICNiYmIgNzUlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZWFyLWdyYWRpZW50KC00NWRlZywgdHJhbnNwYXJlbnQgNzUlLCAjYmJiIDc1JSlgO1xuICAgICAgICBkLnN0eWxlLmJhY2tncm91bmRTaXplID0gJzhweCA4cHgnO1xuICAgICAgICBkLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9ICcwIDAsIDAgNHB4LCA0cHggLTRweCwgLTRweCAwcHgnO1xuICAgICAgfVxuICAgICAgZC50aXRsZSA9IGAke2VudHJ5LmlkfSAtICR7ZW50cnkubmFtZX1gO1xuICAgICAgZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgY29uZmlnLkNPTE9SX0ZJWEVEID0gZW50cnkuaWQ7XG4gICAgICAgIHJlbmRlckNvbG9yR3JpZChjb25maWcuQ09MT1JfRklYRUQpO1xuICAgICAgICBzYXZlQ29uZmlnKCk7XG4gICAgICAgIHVwZGF0ZUNvbmZpZygpO1xuICAgICAgICBpZiAoZWxzLnNlbGVjdGVkQ29sb3JMYWJlbCkge1xuICAgICAgICAgIGVscy5zZWxlY3RlZENvbG9yTGFiZWwudGV4dENvbnRlbnQgPSBgJHt0KCdmYXJtLmNvbG9yLnNlbGVjdGVkJywnQ29sb3Igc2VsZWNjaW9uYWRvJyl9OiAke2dldENvbG9yTmFtZShjb25maWcuQ09MT1JfRklYRUQpfWA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZWxzLmNvbG9yR3JpZC5hcHBlbmRDaGlsZChkKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEVzdGFkbyBpbmljaWFsXG4gIGVscy5jb2xvck1vZGUudmFsdWUgPSBjb25maWcuQ09MT1JfTU9ERSB8fCAncmFuZG9tJztcbiAgZWxzLmNvbG9yTWluLnZhbHVlID0gU3RyaW5nKGNvbmZpZy5DT0xPUl9NSU4gPz8gMSk7XG4gIGVscy5jb2xvck1heC52YWx1ZSA9IFN0cmluZyhjb25maWcuQ09MT1JfTUFYID8/IDMyKTtcbiAgcmVuZGVyQ29sb3JHcmlkKGNvbmZpZy5DT0xPUl9GSVhFRCA/PyAxKTtcbiAgaWYgKGVscy5zZWxlY3RlZENvbG9yTGFiZWwpIHtcbiAgICBlbHMuc2VsZWN0ZWRDb2xvckxhYmVsLnRleHRDb250ZW50ID0gYCR7dCgnZmFybS5jb2xvci5zZWxlY3RlZCcsJ0NvbG9yIHNlbGVjY2lvbmFkbycpfTogJHtnZXRDb2xvck5hbWUoY29uZmlnLkNPTE9SX0ZJWEVEID8/IDEpfWA7XG4gIH1cbiAgdG9nZ2xlUGlja2VycygpO1xuICAvLyBBcGxpY2FyIGVzdGFkbyBpbmljaWFsIChib3RvbmVzIHkgcGFycGFkZW8gZGUgQ2FwdHVyYXIpXG4gIHRyeSB7IHVwZGF0ZUNvbmZpZygpOyB9IGNhdGNoIHt9XG5cbiAgZWxzLmNvbG9yTW9kZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgY29uZmlnLkNPTE9SX01PREUgPSBlbHMuY29sb3JNb2RlLnZhbHVlO1xuICAgIHRvZ2dsZVBpY2tlcnMoKTtcbiAgICBzYXZlQ29uZmlnKCk7XG4gICAgdXBkYXRlQ29uZmlnKCk7XG4gIH0pO1xuICBlbHMuY29sb3JNaW4uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgIGNvbnN0IHYgPSBjbGFtcChwYXJzZUludChlbHMuY29sb3JNaW4udmFsdWUsIDEwKSwgMSwgNjMpO1xuICAgIGNvbmZpZy5DT0xPUl9NSU4gPSB2O1xuICAgIGlmIChjb25maWcuQ09MT1JfTUFYIDwgdikgY29uZmlnLkNPTE9SX01BWCA9IHY7XG4gICAgZWxzLmNvbG9yTWF4LnZhbHVlID0gU3RyaW5nKGNvbmZpZy5DT0xPUl9NQVgpO1xuICAgIHNhdmVDb25maWcoKTtcbiAgICB1cGRhdGVDb25maWcoKTtcbiAgfSk7XG4gIGVscy5jb2xvck1heC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgY29uc3QgdiA9IGNsYW1wKHBhcnNlSW50KGVscy5jb2xvck1heC52YWx1ZSwgMTApLCAxLCA2Myk7XG4gICAgY29uZmlnLkNPTE9SX01BWCA9IHY7XG4gICAgaWYgKGNvbmZpZy5DT0xPUl9NSU4gPiB2KSBjb25maWcuQ09MT1JfTUlOID0gdjtcbiAgICBlbHMuY29sb3JNaW4udmFsdWUgPSBTdHJpbmcoY29uZmlnLkNPTE9SX01JTik7XG4gICAgc2F2ZUNvbmZpZygpO1xuICAgIHVwZGF0ZUNvbmZpZygpO1xuICB9KTtcblxuICAvLyBQZXJzaXN0ZW5jaWEgZGUgY29uZmlndXJhY2lcdTAwRjNuIGJcdTAwRTFzaWNhXG4gIGlmIChlbHMubWluQ2hhcmdlcykge1xuICAgIGVscy5taW5DaGFyZ2VzLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHYgPSBjbGFtcChwYXJzZUludChlbHMubWluQ2hhcmdlcy52YWx1ZSwgMTApIHx8IDAsIDAsIDEwMDApO1xuICAgICAgY29uZmlnLk1JTl9DSEFSR0VTID0gdjtcbiAgICAgIHNhdmVDb25maWcoKTtcbiAgICAgIHVwZGF0ZUNvbmZpZygpO1xuICAgIH0pO1xuICB9XG4gIGlmIChlbHMuZGVsYXlTZWNvbmRzKSB7XG4gICAgZWxzLmRlbGF5U2Vjb25kcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2ID0gY2xhbXAocGFyc2VJbnQoZWxzLmRlbGF5U2Vjb25kcy52YWx1ZSwgMTApIHx8IDEsIDEsIDM2MDApO1xuICAgICAgY29uZmlnLkRFTEFZX01TID0gdiAqIDEwMDA7XG4gICAgICBzYXZlQ29uZmlnKCk7XG4gICAgICB1cGRhdGVDb25maWcoKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoZWxzLnBpeGVsc1BlckJhdGNoKSB7XG4gICAgZWxzLnBpeGVsc1BlckJhdGNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHYgPSBjbGFtcChwYXJzZUludChlbHMucGl4ZWxzUGVyQmF0Y2gudmFsdWUsIDEwKSB8fCAxLCAxLCA1MCk7XG4gICAgICBjb25maWcuUElYRUxTX1BFUl9CQVRDSCA9IHY7XG4gICAgICBzYXZlQ29uZmlnKCk7XG4gICAgICB1cGRhdGVDb25maWcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVBpY2tlcnMoKSB7XG4gICAgY29uc3QgbW9kZSA9IGVscy5jb2xvck1vZGUudmFsdWU7XG4gICAgZWxzLmZpeGVkUGlja2VyLnN0eWxlLmRpc3BsYXkgPSBtb2RlID09PSAnZml4ZWQnID8gJycgOiAnbm9uZSc7XG4gICAgZWxzLnJhbmdlUGlja2VyLnN0eWxlLmRpc3BsYXkgPSBtb2RlID09PSAncmFuZ2UnID8gJycgOiAnbm9uZSc7XG4gIH1cblxuICAvLyBCb3RvbmVzIGJcdTAwRTFzaWNvc1xuICBlbHMuc3RhcnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gQXBsaWNhciBlc3RhZG8gZGUgZWplY3VjaVx1MDBGM24gaW5tZWRpYXRhbWVudGVcbiAgICB1cGRhdGVCdXR0b25TdGF0ZXModHJ1ZSk7XG4gICAgZWxzLnN0b3AuY2xhc3NMaXN0LmFkZCgnZGFuZ2VyJyk7XG4gICAgdHJ5IHsgaWYgKG9uU3RhcnQpIGF3YWl0IG9uU3RhcnQoKTsgfSBjYXRjaCAoZSkgeyAvKiBpZ25vcmUgKi8gfVxuICB9KTtcbiAgZWxzLnN0b3AuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgdXBkYXRlQnV0dG9uU3RhdGVzKGZhbHNlKTtcbiAgICBlbHMuc3RvcC5jbGFzc0xpc3QucmVtb3ZlKCdkYW5nZXInKTtcbiAgICB0cnkgeyBpZiAob25TdG9wKSBhd2FpdCBvblN0b3AoKTsgfSBjYXRjaCAoZSkgeyAvKiBpZ25vcmUgKi8gfVxuICB9KTtcbiAgLy8gc2luIGJvdFx1MDBGM24gZGUgY2llcnJlXG4gIGlmIChlbHMuYXV0b0J1eUNoZWNrYm94KSB7XG4gICAgY29uc3Qgc2xpZGVyID0gZWxzLmF1dG9CdXlDaGVja2JveC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2dnbGUtc2xpZGVyJyk7XG4gICAgY29uc3Qga25vYiA9IGVscy5hdXRvQnV5Q2hlY2tib3gucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudG9nZ2xlLWtub2InKTtcbiAgICBjb25zdCBhcHBseVZpc3VhbCA9IChjaGVja2VkKSA9PiB7XG4gICAgICBpZiAoIXNsaWRlciB8fCAha25vYikgcmV0dXJuO1xuICAgICAgc2xpZGVyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNoZWNrZWQgPyAnIzIyYzU1ZScgOiAnI2VmNDQ0NCc7XG4gICAgICBzbGlkZXIuc3R5bGUuYm9yZGVyQ29sb3IgPSBjaGVja2VkID8gJyMxNmEzNGEnIDogJyNkYzI2MjYnO1xuICAgICAga25vYi5zdHlsZS5sZWZ0ID0gY2hlY2tlZCA/ICcyN3B4JyA6ICczcHgnO1xuICAgIH07XG4gICAgLy8gRXN0YWRvIGluaWNpYWxcbiAgICBlbHMuYXV0b0J1eUNoZWNrYm94LmNoZWNrZWQgPSAhIWNvbmZpZy5BVVRPX0JVWV9FTkFCTEVEO1xuICAgIGFwcGx5VmlzdWFsKGVscy5hdXRvQnV5Q2hlY2tib3guY2hlY2tlZCk7XG4gICAgZWxzLmF1dG9CdXlDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgY29uc3QgY2hlY2tlZCA9ICEhZS50YXJnZXQuY2hlY2tlZDtcbiAgICAgIGNvbmZpZy5BVVRPX0JVWV9FTkFCTEVEID0gY2hlY2tlZDtcbiAgICAgIHNhdmVDb25maWcoKTtcbiAgICAgIHVwZGF0ZUNvbmZpZygpO1xuICAgICAgYXBwbHlWaXN1YWwoY2hlY2tlZCk7XG4gICAgICBpZiAoZWxzLm1hbnVhbEJ1eVJvdykgZWxzLm1hbnVhbEJ1eVJvdy5zdHlsZS5kaXNwbGF5ID0gY2hlY2tlZCA/ICdub25lJyA6ICdmbGV4JztcbiAgICB9KTtcbiAgICBpZiAoZWxzLm1hbnVhbEJ1eVJvdykgZWxzLm1hbnVhbEJ1eVJvdy5zdHlsZS5kaXNwbGF5ID0gZWxzLmF1dG9CdXlDaGVja2JveC5jaGVja2VkID8gJ25vbmUnIDogJ2ZsZXgnO1xuICB9XG5cbiAgLy8gQ29tcHJhIG1hbnVhbCBzaSBhdXRvYnV5IGVzdFx1MDBFMSBkZXNhY3RpdmFkb1xuICBpZiAoZWxzLm1hbnVhbEJ1eUJ0bikge1xuICAgIGVscy5tYW51YWxCdXlCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBlbHMubWFudWFsQnV5QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgc2V0U3RhdHVzKHQoJ2Zhcm0uYnV5aW5nJywnQ29tcHJhbmRvLi4uJyksICdzdGF0dXMnKTtcbiAgICAgICAgY29uc3QgeyBwdXJjaGFzZVByb2R1Y3QgfSA9IGF3YWl0IGltcG9ydCgnLi4vY29yZS93cGxhY2UtYXBpLmpzJyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHB1cmNoYXNlUHJvZHVjdCg3MCwgMSk7XG4gICAgICAgIGlmIChyZXMuc3VjY2Vzcykge1xuICAgICAgICAgIC8vIE5vdGlmaWNhY2lcdTAwRjNuIHZpc3VhbCArIGluc3RydWNjaVx1MDBGM24gZGUgcmVmcmVzY2FyXG4gICAgICAgICAgaWYgKGFwaS5ub3RpZnkpIGFwaS5ub3RpZnkodCgnZmFybS5idXlPaycsJ0NvbXByYSByZWFsaXphZGEuIEFjdHVhbGl6YSBzZXNpXHUwMEYzbi4nKSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICBzZXRTdGF0dXModCgnZmFybS5idXlPaycsJ0NvbXByYSByZWFsaXphZGEuIEFjdHVhbGl6YSBzZXNpXHUwMEYzbi4nKSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAvLyBSZXN0YXIgNTAwIGRyb3BsZXRzIGlubWVkaWF0YW1lbnRlIGVuIFVJLCBoYXN0YSBxdWUgcmVmcmVzcXVlIHNlc2lcdTAwRjNuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNGaW5pdGUoZmFybVN0YXRlLmRyb3BsZXRzKSkge1xuICAgICAgICAgICAgICBmYXJtU3RhdGUuZHJvcGxldHMgPSBNYXRoLm1heCgwLCAoZmFybVN0YXRlLmRyb3BsZXRzIHx8IDApIC0gNTAwKTtcbiAgICAgICAgICAgICAgdXBkYXRlU3RhdHMoZmFybVN0YXRlLnBhaW50ZWQsIGZhcm1TdGF0ZS5jaGFyZ2VzLmNvdW50LCBmYXJtU3RhdGUucmV0cnlDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhcGkubm90aWZ5KSBhcGkubm90aWZ5KHQoJ2Zhcm0uYnV5RmFpbCcsJ05vIHNlIHB1ZG8gY29tcHJhcicpLCAnZXJyb3InKTtcbiAgICAgICAgICBzZXRTdGF0dXModCgnZmFybS5idXlGYWlsJywnTm8gc2UgcHVkbyBjb21wcmFyJyksICdlcnJvcicpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGFwaS5ub3RpZnkpIGFwaS5ub3RpZnkodCgnZmFybS5idXlGYWlsJywnTm8gc2UgcHVkbyBjb21wcmFyJyksICdlcnJvcicpO1xuICAgICAgICBzZXRTdGF0dXModCgnZmFybS5idXlGYWlsJywnTm8gc2UgcHVkbyBjb21wcmFyJyksICdlcnJvcicpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZWxzLm1hbnVhbEJ1eUJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChob3N0KTtcblxuICAvLyBSZWdpc3RyYXIgdmVudGFuYSBwYXJhIGdlc3RpXHUwMEYzbiBkZSB6LWluZGV4L2JyaW5nLXRvLWZyb250XG4gIHRyeSB7IHJlZ2lzdGVyV2luZG93KGhvc3QpOyB9IGNhdGNoIHt9XG5cbiAgLy8gSGFjZXIgZHJhZ2dhYmxlIGxhIHZlbnRhbmEgdXNhbmRvIGVsIGhlYWRlclxuICBjb25zdCBoZWFkZXJFbCA9IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcbiAgY29uc3QgYm9keUVsID0gcGFuZWwucXVlcnlTZWxlY3RvcignLmJvZHknKTtcbiAgbGV0IGRyYWdnaW5nID0gZmFsc2U7IGxldCBvZmZYID0gMDsgbGV0IG9mZlkgPSAwO1xuICBoZWFkZXJFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZSkgPT4ge1xuICAgIC8vIEV2aXRhciBhcnJhc3RyZSBhbCBjbGljYXIgZWwgYm90XHUwMEYzbiBtaW5pbWl6YXJcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBpZiAodGFyZ2V0ICYmICh0YXJnZXQuaWQgPT09ICdtaW5CdG4nIHx8IHRhcmdldC5jbG9zZXN0KCcjbWluQnRuJykpKSByZXR1cm47XG4gICAgZHJhZ2dpbmcgPSB0cnVlO1xuICAgIGNvbnN0IHJlY3QgPSBob3N0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIG9mZlggPSBlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgb2ZmWSA9IGUuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xuICAgIGlmICghZHJhZ2dpbmcpIHJldHVybjtcbiAgICBjb25zdCBueCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHdpbmRvdy5pbm5lcldpZHRoIC0gcGFuZWwub2Zmc2V0V2lkdGgsIGUuY2xpZW50WCAtIG9mZlgpKTtcbiAgICBjb25zdCBueSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHdpbmRvdy5pbm5lckhlaWdodCAtIDQwLCBlLmNsaWVudFkgLSBvZmZZKSk7XG4gICAgaG9zdC5zdHlsZS5sZWZ0ID0gbnggKyAncHgnO1xuICAgIGhvc3Quc3R5bGUudG9wID0gbnkgKyAncHgnO1xuICAgIGhvc3Quc3R5bGUucmlnaHQgPSAnYXV0byc7IC8vIGFsIG1vdmVyLCBkZXNhbmNsYXIgZGUgZGVyZWNoYVxuICB9KTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PiB7IGRyYWdnaW5nID0gZmFsc2U7IH0pO1xuXG4gIC8vIE1pbmltaXphciBjb24gYW5pbWFjaVx1MDBGM24gc3VhdmVcbiAgY29uc3QgbWluQnRuID0gcGFuZWwucXVlcnlTZWxlY3RvcignI21pbkJ0bicpO1xuICBsZXQgY29sbGFwc2VkID0gZmFsc2U7XG4gIGlmIChtaW5CdG4gJiYgYm9keUVsKSB7XG4gICAgLy8gR2VzdGlvbmFyIGRpc3BsYXkgYWwgZmluYWwgZGUgbGEgYW5pbWFjaVx1MDBGM24gcGFyYSBjZXJyYXIgY29tcGxldGFtZW50ZVxuICAgIGJvZHlFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgKGUpID0+IHtcbiAgICAgIGlmIChlLnByb3BlcnR5TmFtZSA9PT0gJ21heC1oZWlnaHQnKSB7XG4gICAgICAgIGlmIChjb2xsYXBzZWQpIHtcbiAgICAgICAgICBib2R5RWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIG1pbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbGxhcHNlZCA9ICFjb2xsYXBzZWQ7XG4gICAgICBpZiAoIWNvbGxhcHNlZCkge1xuICAgICAgICBib2R5RWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIC8vIEZvcnphciByZWZsb3cgcGFyYSBxdWUgbGEgdHJhbnNpY2lcdTAwRjNuIHNlIGFwbGlxdWUgYWwgcmVtb3ZlciBsYSBjbGFzZVxuICB2b2lkIGJvZHlFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICB9XG4gICAgICBib2R5RWwuY2xhc3NMaXN0LnRvZ2dsZSgnY29sbGFwc2VkJywgY29sbGFwc2VkKTtcbiAgICAgIG1pbkJ0bi50ZXh0Q29udGVudCA9IGNvbGxhcHNlZCA/ICcrJyA6ICdcdTIwMTMnO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQm90XHUwMEYzbiBkZSBsb2dzXG4gIGlmIChlbHMubG9nc0J0bikge1xuICAgIGxldCBsb2dXaW5kb3dJbnN0YW5jZSA9IG51bGw7XG4gICAgZWxzLmxvZ3NCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGNyZWF0ZUxvZ1dpbmRvdyB9ID0gYXdhaXQgaW1wb3J0KCcuLi9sb2dfd2luZG93L2luZGV4LmpzJyk7XG4gICAgICAgIGxvZ1dpbmRvd0luc3RhbmNlID0gbG9nV2luZG93SW5zdGFuY2UgfHwgY3JlYXRlTG9nV2luZG93KCdBdXRvLUZhcm0nKTtcbiAgICAgICAgbG9nV2luZG93SW5zdGFuY2UudG9nZ2xlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZygnTm8gc2UgcHVkbyBhYnJpciBsYSB2ZW50YW5hIGRlIGxvZ3M6JywgZSk7XG4gICAgICAgIG5vdGlmeSgnTm8gc2UgcHVkbyBhYnJpciBMb2dzJywgJ2Vycm9yJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBBUElcbiAgZnVuY3Rpb24gc2V0U3RhdHVzKHRleHQsIGtpbmQgPSAnc3RhdHVzJykge1xuICAgIGVscy5zdGF0dXMudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIGVscy5zdGF0dXMuc3R5bGUuYmFja2dyb3VuZCA9IGtpbmQgPT09ICdlcnJvcicgPyAncmdiYSgyNDUsIDEwMSwgMTAxLCAwLjIpJ1xuICAgICAgOiBraW5kID09PSAnc3VjY2VzcycgPyAncmdiYSg3MiwgMTg3LCAxMjAsIDAuMiknXG4gICAgICA6ICdyZ2JhKDY2LCAxNTMsIDIyNSwgMC4yKSc7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTdGF0cyhwYWludGVkLCBjaGFyZ2VzLCByZXRyaWVzKSB7XG4gICAgZWxzLnBhaW50ZWQudGV4dENvbnRlbnQgPSBTdHJpbmcocGFpbnRlZCA/PyAwKTtcbiAgICBjb25zdCBjYyA9IE1hdGguZmxvb3IoY2hhcmdlcyA/PyAwKTtcbiAgICBjb25zdCBteCA9IGZhcm1TdGF0ZS5jaGFyZ2VzPy5tYXggPz8gMDtcbiAgICBlbHMuY2hhcmdlcy50ZXh0Q29udGVudCA9IGAke2NjfS8ke214fWA7XG4gICAgZWxzLnJldHJpZXMudGV4dENvbnRlbnQgPSBTdHJpbmcocmV0cmllcyA/PyAwKTtcbiAgICAvLyBNb3N0cmFyIGRyb3BsZXRzIHkgdXN1YXJpb1xuICAgIGNvbnN0IGRyb3BsZXRzID0gZmFybVN0YXRlPy5kcm9wbGV0cyA/PyBmYXJtU3RhdGU/LnVzZXI/LmRyb3BsZXRzID8/IG51bGw7XG4gICAgaWYgKGRyb3BsZXRzICE9IG51bGwgJiYgZWxzLmRyb3BsZXRzKSB7XG4gICAgICBlbHMuZHJvcGxldHMudGV4dENvbnRlbnQgPSBTdHJpbmcoZHJvcGxldHMpO1xuICAgIH1cbiAgICBpZiAoZmFybVN0YXRlPy51c2VyICYmIGVscy51c2VybmFtZSkge1xuICAgICAgZWxzLnVzZXJuYW1lLnRleHRDb250ZW50ID0gZmFybVN0YXRlLnVzZXIubmFtZSB8fCBmYXJtU3RhdGUudXNlci51c2VybmFtZSB8fCAnLSc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQb3NpdGlvblNlbGVjdGVkKCkge1xuICAgIHJldHVybiAhIWNvbmZpZy5QT1NJVElPTl9TRUxFQ1RFRCAmJiBOdW1iZXIuaXNGaW5pdGUoY29uZmlnLkJBU0VfWCkgJiYgTnVtYmVyLmlzRmluaXRlKGNvbmZpZy5CQVNFX1kpICYmIE51bWJlci5pc0Zpbml0ZShjb25maWcuVElMRV9YKSAmJiBOdW1iZXIuaXNGaW5pdGUoY29uZmlnLlRJTEVfWSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVCdXR0b25TdGF0ZXMocnVubmluZykge1xuICAgIGNvbnN0IG5lZWRDYXB0dXJlID0gIWlzUG9zaXRpb25TZWxlY3RlZCgpO1xuICAgIGVscy5zdGFydC5kaXNhYmxlZCA9ICEhcnVubmluZyB8fCBuZWVkQ2FwdHVyZTtcbiAgICBlbHMuc3RvcC5kaXNhYmxlZCA9ICFydW5uaW5nO1xuICAgIGlmIChlbHMub25jZUJ0bikge1xuICAgICAgZWxzLm9uY2VCdG4uZGlzYWJsZWQgPSAhIXJ1bm5pbmcgfHwgbmVlZENhcHR1cmU7XG4gICAgfVxuICAgIC8vIFZpc3VhbCBkZWwgYm90XHUwMEYzbiBkZXRlbmVyIGVuIHJvam8gY3VhbmRvIGVzdFx1MDBFMSBjb3JyaWVuZG9cbiAgICBpZiAocnVubmluZykge1xuICAgICAgZWxzLnN0b3AuY2xhc3NMaXN0LmFkZCgnZGFuZ2VyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVscy5zdG9wLmNsYXNzTGlzdC5yZW1vdmUoJ2RhbmdlcicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZsYXNoRWZmZWN0KG1zID0gMTUwKSB7XG4gICAgcGFuZWwuc3R5bGUub3V0bGluZSA9ICcycHggc29saWQgIzkzYzVmZCc7XG4gICAgc2V0VGltZW91dCgoKSA9PiBwYW5lbC5zdHlsZS5vdXRsaW5lID0gJycsIG1zKTtcbiAgfVxuXG4gIC8vIE5vdGlmaWNhY2lvbmVzIGVzdGlsbyBNYXRlcmlhbCAodG9wLWNlbnRlcilcbiAgZnVuY3Rpb24gbm90aWZ5KG1lc3NhZ2UsIHR5cGUgPSAnaW5mbycsIHRpbWVvdXQgPSAzMDAwKSB7XG4gICAgLy8gQ29udGVuZWRvciBnbG9iYWxcbiAgICBsZXQgYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cGxhY2UtdG9hc3QtY29udGFpbmVyJyk7XG4gICAgaWYgKCFjKSB7XG4gICAgICBjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjLmlkID0gJ3dwbGFjZS10b2FzdC1jb250YWluZXInO1xuICAgICAgYy5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHRvcDogMTZweDtcbiAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgICAgIHotaW5kZXg6IDIxNDc0ODM2NDc7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGdhcDogOHB4O1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIGA7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGMpO1xuICAgIH1cblxuICAgIGNvbnN0IGJnID0gdHlwZSA9PT0gJ3N1Y2Nlc3MnID8gJyMxMGI5ODEnIDogdHlwZSA9PT0gJ2Vycm9yJyA/ICcjZWY0NDQ0JyA6ICcjM2I4MmY2JztcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsLmNsYXNzTmFtZSA9ICd3cGxhY2UtdG9hc3QnO1xuICAgIGVsLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICBlbC5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgbWluLXdpZHRoOiAyNDBweDtcbiAgICAgIG1heC13aWR0aDogODB2dztcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgYmFja2dyb3VuZDogJHtiZ307XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgYm94LXNoYWRvdzogMCA4cHggMjRweCByZ2JhKDAsMCwwLDAuMzUpO1xuICAgICAgcGFkZGluZzogMTBweCAxNHB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICAgIGxldHRlci1zcGFjaW5nOiAuMnB4O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSgwLjk4KTtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjI1cyBjdWJpYy1iZXppZXIoMC4yLCAwLjgsIDAuMiwgMSksIG9wYWNpdHkgLjI1cyBlYXNlO1xuICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgYDtcbiAgICBjLmFwcGVuZENoaWxkKGVsKTtcblxuICAgIC8vIEFuaW1hciBlbnRyYWRhXG4gIGNvbnN0IHJhZiA9IChjYikgPT4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKSA6IHNldFRpbWVvdXQoY2IsIDE2KSk7XG4gIHJhZigoKSA9PiB7XG4gICAgICBlbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgwKSBzY2FsZSgxKSc7XG4gICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICB9KTtcblxuICAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSgwLjk4KSc7XG4gICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiBlbC5yZW1vdmUoKSwgMjUwKTtcbiAgICB9O1xuXG4gICAgLy8gQ2llcnJlIGF1dG9tXHUwMEUxdGljb1xuICAgIGlmICh0aW1lb3V0ID4gMCkgc2V0VGltZW91dChyZW1vdmUsIHRpbWVvdXQpO1xuXG4gICAgLy8gQ2xpYyBwYXJhIGNlcnJhclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVtb3ZlKTtcbiAgICByZXR1cm4geyBjbG9zZTogcmVtb3ZlIH07XG4gIH1cblxuICBmdW5jdGlvbiBzYXZlQ29uZmlnKCkgeyB0cnkgeyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnd3BsYWNlX2Zhcm1fY2ZnJywgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7IH0gY2F0Y2gge30gfVxuICBmdW5jdGlvbiB1cGRhdGVDb25maWcoKSB7XG4gICAgLy8gUmVmcmVzY2FyIGVzdGFkbyBkZSBwb3NpY2lcdTAwRjNuIHNlbGVjY2lvbmFkYSBlbiBsYSBVSVxuICAgIGNvbnN0IHNlbGVjdGVkID0gaXNQb3NpdGlvblNlbGVjdGVkKCk7XG4gICAgaWYgKHNlbGVjdGVkICYmIGVscy5wb3NJbmZvVmFsdWUpIHtcbiAgICAgIGVscy5wb3NJbmZvVmFsdWUudGV4dENvbnRlbnQgPSBgdGlsZSgke2NvbmZpZy5USUxFX1h9LCR7Y29uZmlnLlRJTEVfWX0pIGJhc2UoJHtjb25maWcuQkFTRV9YfSwke2NvbmZpZy5CQVNFX1l9KWA7XG4gICAgICBpZiAoZWxzLmNhcHR1cmVCdG4pIHtcbiAgICAgICAgZWxzLmNhcHR1cmVCdG4udGV4dENvbnRlbnQgPSB0KCdmYXJtLnJlY2FwdHVyZScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZWxzLnBvc0luZm9WYWx1ZSkgZWxzLnBvc0luZm9WYWx1ZS50ZXh0Q29udGVudCA9ICctJztcbiAgaWYgKGVscy5jYXB0dXJlQnRuKSBlbHMuY2FwdHVyZUJ0bi50ZXh0Q29udGVudCA9IHQoJ2Zhcm0uY2FwdHVyZScsJ0NhcHR1cmFyIHpvbmEnKTtcbiAgICB9XG4gICAgLy8gU3RhcnQgZGVzaGFiaWxpdGFkbyBoYXN0YSBjYXB0dXJhcjsgQ2FwdHVyYXIgcGFycGFkZWEgc2kgZmFsdGEgc2VsZWNjaVx1MDBGM25cbiAgICB1cGRhdGVCdXR0b25TdGF0ZXMoZmFsc2UpO1xuICAgIGlmIChlbHMuY2FwdHVyZUJ0bikge1xuICAgICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgICBlbHMuY2FwdHVyZUJ0bi5jbGFzc0xpc3QuYWRkKCdibGluay1vcmFuZ2UnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVscy5jYXB0dXJlQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2JsaW5rLW9yYW5nZScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRFbGVtZW50KCkgeyByZXR1cm4gaG9zdDsgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkgeyBob3N0LnJlbW92ZSgpOyB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVGV4dHMoKSB7XG4gICAgLy8gQWN0dWFsaXphY2lcdTAwRjNuIG1cdTAwRURuaW1hIGRlIHRleHRvc1xuICAgIHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNzdGFydEJ0bicpLnRleHRDb250ZW50ID0gdCgnZmFybS5zdGFydCcsJ0luaWNpYXInKTtcbiAgICBwYW5lbC5xdWVyeVNlbGVjdG9yKCcjc3RvcEJ0bicpLnRleHRDb250ZW50ID0gdCgnZmFybS5zdG9wJywnRGV0ZW5lcicpO1xuICAgIHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNjYXB0dXJlLWJ0bicpLnRleHRDb250ZW50ID0gdCgnZmFybS5jYXB0dXJlJywnQ2FwdHVyYXIgem9uYScpO1xuICAgIHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNvbmNlLWJ0bicpLnRleHRDb250ZW50ID0gdCgnZmFybS5vbmNlJywnVW5hIHZleicpO1xuICBjb25zdCBsYiA9IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJyNsb2dzQnRuJyk7IGlmIChsYikgbGIudGV4dENvbnRlbnQgPSB0KCdmYXJtLmxvZ1dpbmRvdycsJ0xvZ3MnKTtcbiAgLy8gVmlzdWFsIGRlbCB0b2dnbGUgc2UgYWN0dWFsaXphIHBvciBhcHBseVZpc3VhbCBhbCBjYW1iaWFyXG4gIGlmIChlbHMuc2VsZWN0ZWRDb2xvckxhYmVsKSBlbHMuc2VsZWN0ZWRDb2xvckxhYmVsLnRleHRDb250ZW50ID0gYCR7dCgnZmFybS5jb2xvci5zZWxlY3RlZCcsJ0NvbG9yIHNlbGVjY2lvbmFkbycpfTogJHtnZXRDb2xvck5hbWUoY29uZmlnLkNPTE9SX0ZJWEVEID8/IDEpfWA7XG4gIH1cblxuICBjb25zdCBhcGkgPSB7IHNldFN0YXR1cywgdXBkYXRlU3RhdHMsIHVwZGF0ZUJ1dHRvblN0YXRlcywgZmxhc2hFZmZlY3QsIGdldEVsZW1lbnQsIGRlc3Ryb3ksIHVwZGF0ZUNvbmZpZywgdXBkYXRlVGV4dHMsIG5vdGlmeSB9O1xuICB3aW5kb3cuX193cGxhY2VCb3QgPSB3aW5kb3cuX193cGxhY2VCb3QgfHwge307XG4gIHdpbmRvdy5fX3dwbGFjZUJvdC51aSA9IGFwaTtcbiAgcmV0dXJuIGFwaTtcbn1cblxuLy8gQ29tcGF0aWJpbGlkYWRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhdXRvQ2FsaWJyYXRlVGlsZSgpIHsgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnbm90LWltcGxlbWVudGVkJyB9OyB9XG5leHBvcnQgZnVuY3Rpb24gbW91bnRGYXJtVUkoKSB7IGxvZygnRmFybSBVSSBtb3VudCBwbGFjZWhvbGRlcicpOyB9XG4iLCAiLy8gQ29waWEgZGUgbGEgcGFsZXRhIGRlIGltYWdlbiBwYXJhIHJldXRpbGl6YXIgZW4gRmFybVxuLy8gUGVybWl0ZSBub21icmFyIGNvbG9yZXMgeSBtYXBlYXIgSURzIGEgUkdCXG5leHBvcnQgY29uc3QgQ09MT1JfTUFQID0ge1xuICAwOiB7IGlkOiAxLCBuYW1lOiAnQmxhY2snLCByZ2I6IHsgcjogMCwgZzogMCwgYjogMCB9IH0sXG4gIDE6IHsgaWQ6IDIsIG5hbWU6ICdEYXJrIEdyYXknLCByZ2I6IHsgcjogNjAsIGc6IDYwLCBiOiA2MCB9IH0sXG4gIDI6IHsgaWQ6IDMsIG5hbWU6ICdHcmF5JywgcmdiOiB7IHI6IDEyMCwgZzogMTIwLCBiOiAxMjAgfSB9LFxuICAzOiB7IGlkOiA0LCBuYW1lOiAnTGlnaHQgR3JheScsIHJnYjogeyByOiAyMTAsIGc6IDIxMCwgYjogMjEwIH0gfSxcbiAgNDogeyBpZDogNSwgbmFtZTogJ1doaXRlJywgcmdiOiB7IHI6IDI1NSwgZzogMjU1LCBiOiAyNTUgfSB9LFxuICA1OiB7IGlkOiA2LCBuYW1lOiAnRGVlcCBSZWQnLCByZ2I6IHsgcjogOTYsIGc6IDAsIGI6IDI0IH0gfSxcbiAgNjogeyBpZDogNywgbmFtZTogJ1JlZCcsIHJnYjogeyByOiAyMzcsIGc6IDI4LCBiOiAzNiB9IH0sXG4gIDc6IHsgaWQ6IDgsIG5hbWU6ICdPcmFuZ2UnLCByZ2I6IHsgcjogMjU1LCBnOiAxMjcsIGI6IDM5IH0gfSxcbiAgODogeyBpZDogOSwgbmFtZTogJ0dvbGQnLCByZ2I6IHsgcjogMjQ2LCBnOiAxNzAsIGI6IDkgfSB9LFxuICA5OiB7IGlkOiAxMCwgbmFtZTogJ1llbGxvdycsIHJnYjogeyByOiAyNDksIGc6IDIyMSwgYjogNTkgfSB9LFxuICAxMDogeyBpZDogMTEsIG5hbWU6ICdMaWdodCBZZWxsb3cnLCByZ2I6IHsgcjogMjU1LCBnOiAyNTAsIGI6IDE4OCB9IH0sXG4gIDExOiB7IGlkOiAxMiwgbmFtZTogJ0RhcmsgR3JlZW4nLCByZ2I6IHsgcjogMTQsIGc6IDE4NSwgYjogMTA0IH0gfSxcbiAgMTI6IHsgaWQ6IDEzLCBuYW1lOiAnR3JlZW4nLCByZ2I6IHsgcjogMTksIGc6IDIzMCwgYjogMTIzIH0gfSxcbiAgMTM6IHsgaWQ6IDE0LCBuYW1lOiAnTGlnaHQgR3JlZW4nLCByZ2I6IHsgcjogMTM1LCBnOiAyNTUsIGI6IDk0IH0gfSxcbiAgMTQ6IHsgaWQ6IDE1LCBuYW1lOiAnRGFyayBUZWFsJywgcmdiOiB7IHI6IDEyLCBnOiAxMjksIGI6IDExMCB9IH0sXG4gIDE1OiB7IGlkOiAxNiwgbmFtZTogJ1RlYWwnLCByZ2I6IHsgcjogMTYsIGc6IDE3NCwgYjogMTY2IH0gfSxcbiAgMTY6IHsgaWQ6IDE3LCBuYW1lOiAnTGlnaHQgVGVhbCcsIHJnYjogeyByOiAxOSwgZzogMjI1LCBiOiAxOTAgfSB9LFxuICAxNzogeyBpZDogMjAsIG5hbWU6ICdDeWFuJywgcmdiOiB7IHI6IDk2LCBnOiAyNDcsIGI6IDI0MiB9IH0sXG4gIDE4OiB7IGlkOiA0NCwgbmFtZTogJ0xpZ2h0IEN5YW4nLCByZ2I6IHsgcjogMTg3LCBnOiAyNTAsIGI6IDI0MiB9IH0sXG4gIDE5OiB7IGlkOiAxOCwgbmFtZTogJ0RhcmsgQmx1ZScsIHJnYjogeyByOiA0MCwgZzogODAsIGI6IDE1OCB9IH0sXG4gIDIwOiB7IGlkOiAxOSwgbmFtZTogJ0JsdWUnLCByZ2I6IHsgcjogNjQsIGc6IDE0NywgYjogMjI4IH0gfSxcbiAgMjE6IHsgaWQ6IDIxLCBuYW1lOiAnSW5kaWdvJywgcmdiOiB7IHI6IDEwNywgZzogODAsIGI6IDI0NiB9IH0sXG4gIDIyOiB7IGlkOiAyMiwgbmFtZTogJ0xpZ2h0IEluZGlnbycsIHJnYjogeyByOiAxNTMsIGc6IDE3NywgYjogMjUxIH0gfSxcbiAgMjM6IHsgaWQ6IDIzLCBuYW1lOiAnRGFyayBQdXJwbGUnLCByZ2I6IHsgcjogMTIwLCBnOiAxMiwgYjogMTUzIH0gfSxcbiAgMjQ6IHsgaWQ6IDI0LCBuYW1lOiAnUHVycGxlJywgcmdiOiB7IHI6IDE3MCwgZzogNTYsIGI6IDE4NSB9IH0sXG4gIDI1OiB7IGlkOiAyNSwgbmFtZTogJ0xpZ2h0IFB1cnBsZScsIHJnYjogeyByOiAyMjQsIGc6IDE1OSwgYjogMjQ5IH0gfSxcbiAgMjY6IHsgaWQ6IDI2LCBuYW1lOiAnRGFyayBQaW5rJywgcmdiOiB7IHI6IDIwMywgZzogMCwgYjogMTIyIH0gfSxcbiAgMjc6IHsgaWQ6IDI3LCBuYW1lOiAnUGluaycsIHJnYjogeyByOiAyMzYsIGc6IDMxLCBiOiAxMjggfSB9LFxuICAyODogeyBpZDogMjgsIG5hbWU6ICdMaWdodCBQaW5rJywgcmdiOiB7IHI6IDI0MywgZzogMTQxLCBiOiAxNjkgfSB9LFxuICAyOTogeyBpZDogMjksIG5hbWU6ICdEYXJrIEJyb3duJywgcmdiOiB7IHI6IDEwNCwgZzogNzAsIGI6IDUyIH0gfSxcbiAgMzA6IHsgaWQ6IDMwLCBuYW1lOiAnQnJvd24nLCByZ2I6IHsgcjogMTQ5LCBnOiAxMDQsIGI6IDQyIH0gfSxcbiAgMzE6IHsgaWQ6IDMxLCBuYW1lOiAnQmVpZ2UnLCByZ2I6IHsgcjogMjQ4LCBnOiAxNzgsIGI6IDExOSB9IH0sXG4gIDMyOiB7IGlkOiA1MiwgbmFtZTogJ0xpZ2h0IEJlaWdlJywgcmdiOiB7IHI6IDI1NSwgZzogMTk3LCBiOiAxNjUgfSB9LFxuICAzMzogeyBpZDogMzIsIG5hbWU6ICdNZWRpdW0gR3JheScsIHJnYjogeyByOiAxNzAsIGc6IDE3MCwgYjogMTcwIH0gfSxcbiAgMzQ6IHsgaWQ6IDMzLCBuYW1lOiAnRGFyayBSZWQnLCByZ2I6IHsgcjogMTY1LCBnOiAxNCwgYjogMzAgfSB9LFxuICAzNTogeyBpZDogMzQsIG5hbWU6ICdMaWdodCBSZWQnLCByZ2I6IHsgcjogMjUwLCBnOiAxMjgsIGI6IDExNCB9IH0sXG4gIDM2OiB7IGlkOiAzNSwgbmFtZTogJ0RhcmsgT3JhbmdlJywgcmdiOiB7IHI6IDIyOCwgZzogOTIsIGI6IDI2IH0gfSxcbiAgMzc6IHsgaWQ6IDM3LCBuYW1lOiAnRGFyayBHb2xkZW5yb2QnLCByZ2I6IHsgcjogMTU2LCBnOiAxMzIsIGI6IDQ5IH0gfSxcbiAgMzg6IHsgaWQ6IDM4LCBuYW1lOiAnR29sZGVucm9kJywgcmdiOiB7IHI6IDE5NywgZzogMTczLCBiOiA0OSB9IH0sXG4gIDM5OiB7IGlkOiAzOSwgbmFtZTogJ0xpZ2h0IEdvbGRlbnJvZCcsIHJnYjogeyByOiAyMzIsIGc6IDIxMiwgYjogOTUgfSB9LFxuICA0MDogeyBpZDogNDAsIG5hbWU6ICdEYXJrIE9saXZlJywgcmdiOiB7IHI6IDc0LCBnOiAxMDcsIGI6IDU4IH0gfSxcbiAgNDE6IHsgaWQ6IDQxLCBuYW1lOiAnT2xpdmUnLCByZ2I6IHsgcjogOTAsIGc6IDE0OCwgYjogNzQgfSB9LFxuICA0MjogeyBpZDogNDIsIG5hbWU6ICdMaWdodCBPbGl2ZScsIHJnYjogeyByOiAxMzIsIGc6IDE5NywgYjogMTE1IH0gfSxcbiAgNDM6IHsgaWQ6IDQzLCBuYW1lOiAnRGFyayBDeWFuJywgcmdiOiB7IHI6IDE1LCBnOiAxMjEsIGI6IDE1OSB9IH0sXG4gIDQ0OiB7IGlkOiA0NSwgbmFtZTogJ0xpZ2h0IEJsdWUnLCByZ2I6IHsgcjogMTI1LCBnOiAxOTksIGI6IDI1NSB9IH0sXG4gIDQ1OiB7IGlkOiA0NiwgbmFtZTogJ0RhcmsgSW5kaWdvJywgcmdiOiB7IHI6IDc3LCBnOiA0OSwgYjogMTg0IH0gfSxcbiAgNDY6IHsgaWQ6IDQ3LCBuYW1lOiAnRGFyayBTbGF0ZSBCbHVlJywgcmdiOiB7IHI6IDc0LCBnOiA2NiwgYjogMTMyIH0gfSxcbiAgNDc6IHsgaWQ6IDQ4LCBuYW1lOiAnU2xhdGUgQmx1ZScsIHJnYjogeyByOiAxMjIsIGc6IDExMywgYjogMTk2IH0gfSxcbiAgNDg6IHsgaWQ6IDQ5LCBuYW1lOiAnTGlnaHQgU2xhdGUgQmx1ZScsIHJnYjogeyByOiAxODEsIGc6IDE3NCwgYjogMjQxIH0gfSxcbiAgNDk6IHsgaWQ6IDUzLCBuYW1lOiAnRGFyayBQZWFjaCcsIHJnYjogeyByOiAxNTUsIGc6IDgyLCBiOiA3MyB9IH0sXG4gIDUwOiB7IGlkOiA1NCwgbmFtZTogJ1BlYWNoJywgcmdiOiB7IHI6IDIwOSwgZzogMTI4LCBiOiAxMjAgfSB9LFxuICA1MTogeyBpZDogNTUsIG5hbWU6ICdMaWdodCBQZWFjaCcsIHJnYjogeyByOiAyNTAsIGc6IDE4MiwgYjogMTY0IH0gfSxcbiAgNTI6IHsgaWQ6IDUwLCBuYW1lOiAnTGlnaHQgQnJvd24nLCByZ2I6IHsgcjogMjE5LCBnOiAxNjQsIGI6IDk5IH0gfSxcbiAgNTM6IHsgaWQ6IDU2LCBuYW1lOiAnRGFyayBUYW4nLCByZ2I6IHsgcjogMTIzLCBnOiA5OSwgYjogODIgfSB9LFxuICA1NDogeyBpZDogNTcsIG5hbWU6ICdUYW4nLCByZ2I6IHsgcjogMTU2LCBnOiAxMzIsIGI6IDEwNyB9IH0sXG4gIDU1OiB7IGlkOiAzNiwgbmFtZTogJ0xpZ2h0IFRhbicsIHJnYjogeyByOiAyMTQsIGc6IDE4MSwgYjogMTQ4IH0gfSxcbiAgNTY6IHsgaWQ6IDUxLCBuYW1lOiAnRGFyayBCZWlnZScsIHJnYjogeyByOiAyMDksIGc6IDEyOCwgYjogODEgfSB9LFxuICA1NzogeyBpZDogNjEsIG5hbWU6ICdEYXJrIFN0b25lJywgcmdiOiB7IHI6IDEwOSwgZzogMTAwLCBiOiA2MyB9IH0sXG4gIDU4OiB7IGlkOiA2MiwgbmFtZTogJ1N0b25lJywgcmdiOiB7IHI6IDE0OCwgZzogMTQwLCBiOiAxMDcgfSB9LFxuICA1OTogeyBpZDogNjMsIG5hbWU6ICdMaWdodCBTdG9uZScsIHJnYjogeyByOiAyMDUsIGc6IDE5NywgYjogMTU4IH0gfSxcbiAgNjA6IHsgaWQ6IDU4LCBuYW1lOiAnRGFyayBTbGF0ZScsIHJnYjogeyByOiA1MSwgZzogNTcsIGI6IDY1IH0gfSxcbiAgNjE6IHsgaWQ6IDU5LCBuYW1lOiAnU2xhdGUnLCByZ2I6IHsgcjogMTA5LCBnOiAxMTcsIGI6IDE0MSB9IH0sXG4gIDYyOiB7IGlkOiA2MCwgbmFtZTogJ0xpZ2h0IFNsYXRlJywgcmdiOiB7IHI6IDE3OSwgZzogMTg1LCBiOiAyMDkgfSB9LFxuICA2MzogeyBpZDogMCwgbmFtZTogJ1RyYW5zcGFyZW50JywgcmdiOiBudWxsIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvckluZm8oY29sb3JJZCkge1xuICBjb25zdCBjb2xvciA9IE9iamVjdC52YWx1ZXMoQ09MT1JfTUFQKS5maW5kKGMgPT4gYy5pZCA9PT0gY29sb3JJZCk7XG4gIHJldHVybiBjb2xvciB8fCBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JOYW1lKGNvbG9ySWQpIHtcbiAgY29uc3QgY29sb3IgPSBnZXRDb2xvckluZm8oY29sb3JJZCk7XG4gIHJldHVybiBjb2xvciA/IGNvbG9yLm5hbWUgOiBgQ29sb3IgJHtjb2xvcklkfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZXN0Q29sb3IoaGV4LCBwYWxldHRlKSB7XG4gIC8vIFN1c3RpdHV5ZSBwb3IgdHUgbVx1MDBFOXRyaWNhIHJlYWwgKFx1MDM5NEUgbyBkaXN0YW5jaWEgUkdCKS5cbiAgLy8gUG9yIGFob3JhIHJldG9ybmEgZWwgcHJpbWVyIGNvbG9yIGRlIGxhIHBhbGV0YVxuICByZXR1cm4gcGFsZXR0ZVswXTtcbn1cbiIsICIvLyBVdGlsaXR5IGZ1bmN0aW9uc1xuZXhwb3J0IGNvbnN0IHNsZWVwID0gKG1zKSA9PiBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgbXMpKTtcbmV4cG9ydCBjb25zdCByYW5kSW50ID0gKG4pID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG4pO1xuZXhwb3J0IGNvbnN0IG5vb3AgPSAoKSA9PiB7IC8qIEZ1bmNpXHUwMEYzbiB2YWNcdTAwRURhIGludGVuY2lvbmFsICovIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcChuLCBhLCBiKSB7XG4gIHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCBuKSk7XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIHNlbGVjdG9yIGRlIGVsZW1lbnRvcyBET01cbmV4cG9ydCBmdW5jdGlvbiAkKHNlbGVjdG9yLCByb290ID0gZG9jdW1lbnQpIHtcbiAgcmV0dXJuIHJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIGhhY2VyIGVsZW1lbnRvcyBhcnJhc3RyYWJsZXNcbmV4cG9ydCBmdW5jdGlvbiBkcmFnSGVhZGVyKGhlYWRlckVsLCBwYW5lbEVsKSB7XG4gIGxldCBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDAsIG1vdXNlWCA9IDAsIG1vdXNlWSA9IDA7XG5cbiAgaGVhZGVyRWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICBoZWFkZXJFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzdGFydERyYWcpO1xuXG4gIGZ1bmN0aW9uIHN0YXJ0RHJhZyhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIG1vdXNlWCA9IGUuY2xpZW50WDtcbiAgICBtb3VzZVkgPSBlLmNsaWVudFk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0b3BEcmFnKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkb0RyYWcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9EcmFnKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgb2Zmc2V0WCA9IG1vdXNlWCAtIGUuY2xpZW50WDtcbiAgICBvZmZzZXRZID0gbW91c2VZIC0gZS5jbGllbnRZO1xuICAgIG1vdXNlWCA9IGUuY2xpZW50WDtcbiAgICBtb3VzZVkgPSBlLmNsaWVudFk7XG4gICAgXG4gICAgY29uc3QgbmV3VG9wID0gcGFuZWxFbC5vZmZzZXRUb3AgLSBvZmZzZXRZO1xuICAgIGNvbnN0IG5ld0xlZnQgPSBwYW5lbEVsLm9mZnNldExlZnQgLSBvZmZzZXRYO1xuICAgIFxuICAgIHBhbmVsRWwuc3R5bGUudG9wID0gTWF0aC5tYXgoMCwgbmV3VG9wKSArICdweCc7XG4gICAgcGFuZWxFbC5zdHlsZS5sZWZ0ID0gTWF0aC5tYXgoMCwgbmV3TGVmdCkgKyAncHgnO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcERyYWcoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0b3BEcmFnKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkb0RyYWcpO1xuICB9XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIGZvcm1hdGVhciB0aWVtcG9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUaW1lKG1zKSB7XG4gIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKG1zIC8gMTAwMCk7XG4gIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XG4gIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihtaW51dGVzIC8gNjApO1xuICBcbiAgaWYgKGhvdXJzID4gMCkge1xuICAgIHJldHVybiBgJHtob3Vyc31oICR7bWludXRlcyAlIDYwfW1gO1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPiAwKSB7XG4gICAgcmV0dXJuIGAke21pbnV0ZXN9bSAke3NlY29uZHMgJSA2MH1zYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7c2Vjb25kc31zYDtcbiAgfVxufVxuXG4vLyBGdW5jaVx1MDBGM24gcGFyYSBwYXJzZWFyIGhleGFkZWNpbWFsXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIZXgoc3RyKSB7XG4gIHJldHVybiBwYXJzZUludChzdHIucmVwbGFjZSgnIycsICcnKSwgMTYpO1xufVxuXG4vLyBGdW5jaVx1MDBGM24gcGFyYSBjb252ZXJ0aXIgblx1MDBGQW1lcm8gYSBoZXhcbmV4cG9ydCBmdW5jdGlvbiB0b0hleChudW0pIHtcbiAgcmV0dXJuICcjJyArIG51bS50b1N0cmluZygxNikucGFkU3RhcnQoNiwgJzAnKTtcbn1cbiIsICJpbXBvcnQgeyBnZXRDYWNoZWRUb2tlbiwgZW5zdXJlVG9rZW4gfSBmcm9tIFwiLi4vY29yZS90dXJuc3RpbGUuanNcIjtcbi8vIFVuaWZpY2Ftb3MgY29uIGVsIGZsdWpvIGRlIEltYWdlIHVzYW5kbyBwb3N0UGl4ZWxCYXRjaEltYWdlXG5pbXBvcnQgeyBwb3N0UGl4ZWxCYXRjaEltYWdlIH0gZnJvbSAnLi4vY29yZS93cGxhY2UtYXBpLmpzJztcbmltcG9ydCB7IGdlbmVyYXRlU3RyYWlnaHRMaW5lLCBnZW5lcmF0ZU11bHRpcGxlQ29sb3JzIH0gZnJvbSBcIi4vY29vcmRzLmpzXCI7XG5pbXBvcnQgeyBzbGVlcCwgc2xlZXBXaXRoQ291bnRkb3duIH0gZnJvbSBcIi4uL2NvcmUvdGltaW5nLmpzXCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vY29yZS9sb2dnZXIuanNcIjtcbmltcG9ydCB7IHBpeGVsc1BhaW50ZWQsIHNlc3Npb25QaW5nIH0gZnJvbSBcIi4uL2NvcmUvbWV0cmljcy9jbGllbnQuanNcIjtcbmltcG9ydCB7IGdldE1ldHJpY3NDb25maWcgfSBmcm9tIFwiLi4vY29yZS9tZXRyaWNzL2NvbmZpZy5qc1wiO1xuXG4vLyBVcGRhdGUgY2FudmFzIHBpeGVsIGZ1bmN0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQ2FudmFzUGl4ZWwobG9jYWxYLCBsb2NhbFksIGNvbG9yKSB7XG4gIHRyeSB7XG4gICAgLy8gQnVzY2FyIGVsIGNhbnZhcyBhY3Rpdm9cbiAgICBjb25zdCBjYW52YXNlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2NhbnZhcycpO1xuICAgIGZvciAoY29uc3QgY2FudmFzIG9mIGNhbnZhc2VzKSB7XG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgLy8gQ29udmVydGlyIGNvbG9yIChuXHUwMEZBbWVybykgYSBoZXhcbiAgICAgICAgY29uc3QgY29sb3JIZXggPSB0eXBlb2YgY29sb3IgPT09ICdudW1iZXInID8gYCMke2NvbG9yLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg2LCAnMCcpfWAgOiBjb2xvcjtcbiAgICAgICAgXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvckhleDtcbiAgICAgICAgY3R4LmZpbGxSZWN0KGxvY2FsWCwgbG9jYWxZLCAxLCAxKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRyaWdnZXIgcmVkcmF3IGV2ZW50IHNpIGV4aXN0ZVxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LkV2ZW50KSB7XG4gICAgICAgICAgY2FudmFzLmRpc3BhdGNoRXZlbnQobmV3IHdpbmRvdy5FdmVudCgncGl4ZWwtdXBkYXRlZCcpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2coJ0Vycm9yIGFjdHVhbGl6YW5kbyBjYW52YXM6JywgZXJyb3IpO1xuICB9XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIHJlZnJlc2NhciBlbCB0aWxlIGVzcGVjXHUwMEVEZmljbyAoc29sbyBhY3R1YWxpemFjaVx1MDBGM24gdmlzdWFsLCBzaW4gR0VUKVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hUaWxlKHRpbGVYLCB0aWxlWSkge1xuICB0cnkge1xuICAgIC8vIFNvbG8gYWN0dWFsaXphciB2aXN1YWxtZW50ZSBlbCBET00gc2luIGhhY2VyIEdFVFxuICAgIC8vIEVsIEdFVCBhIC9zMC90aWxlIG5vIGZ1bmNpb25hIHkgbm8gZXMgbmVjZXNhcmlvIHBhcmEgZWwgZnVuY2lvbmFtaWVudG9cbiAgICBjb25zdCB0aWxlU2VsZWN0b3IgPSBgW2RhdGEtdGlsZT1cIiR7dGlsZVh9LSR7dGlsZVl9XCJdLCAudGlsZS0ke3RpbGVYfS0ke3RpbGVZfSwgW2RhdGEtdGlsZS14PVwiJHt0aWxlWH1cIl1bZGF0YS10aWxlLXk9XCIke3RpbGVZfVwiXWA7XG4gICAgY29uc3QgdGlsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRpbGVTZWxlY3Rvcik7XG4gICAgXG4gICAgaWYgKHRpbGVFbGVtZW50KSB7XG4gICAgICAvLyBBXHUwMEYxYWRpciB1bmEgY2xhc2UgdGVtcG9yYWwgcGFyYSBpbmRpY2FyIGFjdHVhbGl6YWNpXHUwMEYzblxuICAgICAgdGlsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGlsZS11cGRhdGluZycpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRpbGVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3RpbGUtdXBkYXRpbmcnKTtcbiAgICAgICAgdGlsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGlsZS11cGRhdGVkJyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGlsZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgndGlsZS11cGRhdGVkJyksIDEwMDApO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIGxvZyhgVGlsZSAoJHt0aWxlWH0sJHt0aWxlWX0pIGFjdHVhbGl6YWRvIHZpc3VhbG1lbnRlYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEludGVudGFyIGZvcnphciB1bmEgYWN0dWFsaXphY2lcdTAwRjNuIGRlbCBjYW52YXMgZ2VuZXJhbFxuICAgICAgY29uc3QgY2FudmFzRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdjYW52YXMnKTtcbiAgICAgIGNhbnZhc0VsZW1lbnRzLmZvckVhY2goY2FudmFzID0+IHtcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAvLyBUcmlnZ2VyIHJlZHJhdyBzaW4gaGFjZXIgY2FtYmlvc1xuICAgICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSk7XG4gICAgICAgICAgY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxvZyhgQWN0dWFsaXphY2lcdTAwRjNuIHZpc3VhbCBnZW5cdTAwRTlyaWNhIHJlYWxpemFkYSBwYXJhIHRpbGUgKCR7dGlsZVh9LCR7dGlsZVl9KWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2coJ0Vycm9yIGVuIGFjdHVhbGl6YWNpXHUwMEYzbiB2aXN1YWwgZGVsIHRpbGU6JywgZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYWludE9uY2UoY2ZnLCBzdGF0ZSwgc2V0U3RhdHVzLCBmbGFzaEVmZmVjdCwgZ2V0U2Vzc2lvbiwgY2hlY2tCYWNrZW5kSGVhbHRoKSB7XG4gIC8vIFZlcmlmaWNhciBxdWUgc2UgaGF5YSBzZWxlY2Npb25hZG8gdW5hIHBvc2ljaVx1MDBGM24gdlx1MDBFMWxpZGFcbiAgaWYgKCFjZmcuUE9TSVRJT05fU0VMRUNURUQgfHwgY2ZnLkJBU0VfWCA9PT0gbnVsbCB8fCBjZmcuQkFTRV9ZID09PSBudWxsKSB7XG4gICAgc2V0U3RhdHVzKGBcdUQ4M0NcdURGQUYgU2VsZWNjaW9uYSB1bmEgem9uYSBwcmltZXJvIHVzYW5kbyAnU2VsZWNjaW9uYXIgWm9uYSdgLCAnZXJyb3InKTtcbiAgICBsb2coYFBpbnRhZG8gY2FuY2VsYWRvOiBubyBzZSBoYSBzZWxlY2Npb25hZG8gdW5hIHBvc2ljaVx1MDBGM24gYmFzZWApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBcbiAgLy8gVmVyaWZpY2FyIHF1ZSBsYXMgY29vcmRlbmFkYXMgZGVsIHRpbGUgc2VhbiB2XHUwMEUxbGlkYXMgYW50ZXMgZGUgcGludGFyXG4gIGlmICghTnVtYmVyLmlzRmluaXRlKGNmZy5USUxFX1gpIHx8ICFOdW1iZXIuaXNGaW5pdGUoY2ZnLlRJTEVfWSkpIHtcbiAgICBzZXRTdGF0dXMoYFx1RDgzRFx1REVBQiBDb29yZGVuYWRhcyBkZWwgdGlsZSBpbnZcdTAwRTFsaWRhcyAoJHtjZmcuVElMRV9YfSwke2NmZy5USUxFX1l9KS4gQ2FsaWJyYSBwcmltZXJvYCwgJ2Vycm9yJyk7XG4gICAgbG9nKGBQaW50YWRvIGNhbmNlbGFkbzogY29vcmRlbmFkYXMgZGVsIHRpbGUgaW52XHUwMEUxbGlkYXNgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgXG4gIC8vIFVzYXIgY2FyZ2FzIGFjdHVhbGVzICh5YSBjb25zdWx0YWRhcyBlbiBlbCBsb29wKVxuICBjb25zdCBhdmFpbGFibGVDaGFyZ2VzID0gTWF0aC5mbG9vcihzdGF0ZS5jaGFyZ2VzLmNvdW50KTsgLy8gQ2FyZ2FzIGNvbXBsZXRhcyBkaXNwb25pYmxlc1xuICBcbiAgLy8gU2kgbm8gaGF5IGNhcmdhcyBjb21wbGV0YXMgZGlzcG9uaWJsZXMsIG5vIHBpbnRhclxuICBpZiAoYXZhaWxhYmxlQ2hhcmdlcyA8IDEpIHtcbiAgICBzZXRTdGF0dXMoYFx1RDgzRFx1REQwQiBTaW4gY2FyZ2FzIGRpc3BvbmlibGVzLiBFc3BlcmFuZG8uLi5gLCAnZXJyb3InKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgXG4gIC8vIENhbGN1bGFyIGVsIG5cdTAwRkFtZXJvIFx1MDBGM3B0aW1vIGRlIHBcdTAwRUR4ZWxlcyBhIHBpbnRhclxuICAvLyBVc2FyIGVsIG1cdTAwRURuaW1vIGVudHJlOiBjYXJnYXMgZGlzcG9uaWJsZXMsIGNvbmZpZ3VyYWNpXHUwMEYzbiBkZWwgdXN1YXJpbywgeSBsXHUwMEVEbWl0ZSBtXHUwMEUxeGltbyAoNTApXG4gIGNvbnN0IG9wdGltYWxQaXhlbENvdW50ID0gTWF0aC5taW4oYXZhaWxhYmxlQ2hhcmdlcywgY2ZnLlBJWEVMU19QRVJfQkFUQ0gsIDUwKTtcbiAgY29uc3QgcGl4ZWxDb3VudCA9IE1hdGgubWF4KDEsIG9wdGltYWxQaXhlbENvdW50KTtcbiAgXG4gIC8vIEluZm9ybWFyIHNpIHNlIGFqdXN0XHUwMEYzIGVsIG5cdTAwRkFtZXJvIGRlIHBcdTAwRUR4ZWxlc1xuICBpZiAocGl4ZWxDb3VudCA8IGNmZy5QSVhFTFNfUEVSX0JBVENIKSB7XG4gICAgbG9nKGBBanVzdGFuZG8gcFx1MDBFRHhlbGVzIHBvciBjYXJnYXMgY29tcGxldGFzIGRpc3BvbmlibGVzOiAke3BpeGVsQ291bnR9LyR7Y2ZnLlBJWEVMU19QRVJfQkFUQ0h9ICgke2F2YWlsYWJsZUNoYXJnZXN9IGNhcmdhcyBjb21wbGV0YXMgZGUgJHtzdGF0ZS5jaGFyZ2VzLmNvdW50LnRvRml4ZWQoMil9IHRvdGFsZXMpYCk7XG4gIH1cbiAgXG4gIGNvbnN0IGNvb3JkcyA9IGdlbmVyYXRlU3RyYWlnaHRMaW5lKHBpeGVsQ291bnQsIGNmZyk7XG4gIGNvbnN0IGNvbG9ycyA9IGdlbmVyYXRlTXVsdGlwbGVDb2xvcnMocGl4ZWxDb3VudCwgY2ZnKTtcbiAgXG4gIC8vIExhcyBjb29yZGVuYWRhcyBnZW5lcmFkYXMgeWEgc29uIGxvY2FsZXMgYWwgdGlsZSwgbm8gbmVjZXNpdGFtb3MgY1x1MDBFMWxjdWxvcyBhZGljaW9uYWxlc1xuICBjb25zdCBmaXJzdExvY2FsWCA9IGNvb3Jkc1swXTtcbiAgY29uc3QgZmlyc3RMb2NhbFkgPSBjb29yZHNbMV07XG4gIFxuICAvLyBNZW5zYWplIG5ldXRybyAocGludGFkbyBsaW5lYWwpOyBubyBtZW5jaW9uYXIgcmFkaW9cbiAgc2V0U3RhdHVzKGBcdUQ4M0NcdURGM0UgUGludGFuZG8gJHtwaXhlbENvdW50fSBwXHUwMEVEeGVsZXMgZGVzZGUgYmFzZSAoJHtjZmcuQkFTRV9YfSwke2NmZy5CQVNFX1l9KSB0aWxlKCR7Y2ZnLlRJTEVfWH0sJHtjZmcuVElMRV9ZfSkuLi5gLCAnc3RhdHVzJyk7XG4gIFxuICAvLyBSZXV0aWxpemFyIHRva2VuIGVuIG1lbW9yaWEgc2kgYVx1MDBGQW4gZXMgdlx1MDBFMWxpZG8gcGFyYSBldml0YXIgZ2VuZXJhY2lcdTAwRjNuIHJlZHVuZGFudGVcbiAgbGV0IHQgPSBnZXRDYWNoZWRUb2tlbigpO1xuICBpZiAoIXQpIHtcbiAgICB0ID0gYXdhaXQgZW5zdXJlVG9rZW4oKTtcbiAgfVxuICAvLyBVc2FyIG1pc21hIEFQSSBxdWUgSW1hZ2UgcGFyYSBjb25zaXN0ZW5jaWEgKGluY2x1eWUgZnAvcGF3dGVjdCBpbnRlcm5vcylcbiAgY29uc3QgciA9IGF3YWl0IHBvc3RQaXhlbEJhdGNoSW1hZ2UoY2ZnLlRJTEVfWCwgY2ZnLlRJTEVfWSwgY29vcmRzLCBjb2xvcnMsIHQpO1xuXG4gIHN0YXRlLmxhc3QgPSB7IFxuICAgIHg6IGZpcnN0TG9jYWxYLCBcbiAgICB5OiBmaXJzdExvY2FsWSwgXG4gICAgY29sb3I6IGNvbG9yc1swXSwgXG4gICAgcGl4ZWxDb3VudCxcbiAgICBhdmFpbGFibGVDaGFyZ2VzLFxuICAgIHN0YXR1czogci5zdGF0dXMsIFxuICAgIGpzb246IHIuanNvbiBcbiAgfTtcbiAgXG4gIGlmIChyLnN1Y2Nlc3MgJiYgci5wYWludGVkID4gMCkge1xuICAgIGNvbnN0IGFjdHVhbFBhaW50ZWQgPSByLnBhaW50ZWQgfHwgcGl4ZWxDb3VudDtcbiAgICBzdGF0ZS5wYWludGVkICs9IGFjdHVhbFBhaW50ZWQ7XG4gICAgc3RhdGUucmV0cnlDb3VudCA9IDA7IC8vIFJlc2V0ZWFyIGNvbnRhZG9yIGRlIHJlaW50ZW50b3MgYWwgXHUwMEU5eGl0b1xuICAgIFxuICAgIC8vIEFjdHVhbGl6YXIgdmlzdWFsbWVudGUgZWwgY2FudmFzIHBhcmEgbVx1MDBGQWx0aXBsZXMgcFx1MDBFRHhlbGVzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIGNvbnN0IGxvY2FsWCA9IGNvb3Jkc1tpXTtcbiAgICAgIGNvbnN0IGxvY2FsWSA9IGNvb3Jkc1tpICsgMV07XG4gICAgICBjb25zdCBjb2xvciA9IGNvbG9yc1tNYXRoLmZsb29yKGkgLyAyKV07XG4gICAgICAvLyBMYXMgY29vcmRlbmFkYXMgeWEgc29uIGxvY2FsZXMgYWwgdGlsZVxuICAgICAgYXdhaXQgdXBkYXRlQ2FudmFzUGl4ZWwobG9jYWxYLCBsb2NhbFksIGNvbG9yKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUmVmcmVzY2FyIGVsIHRpbGUgZXNwZWNcdTAwRURmaWNvXG4gICAgYXdhaXQgcmVmcmVzaFRpbGUoY2ZnLlRJTEVfWCwgY2ZnLlRJTEVfWSk7XG4gICAgXG4gICAgLy8gQWN0dWFsaXphciBsYSBzZXNpXHUwMEYzbiBwYXJhIG9idGVuZXIgbGFzIGNhcmdhcyBhY3R1YWxpemFkYXMgKFx1MDBGQW5pY2EgY29uc3VsdGEgdHJhcyBwaW50YXIpXG4gICAgYXdhaXQgZ2V0U2Vzc2lvbigpO1xuICAgIFxuICAvLyBNZW5zYWplIGRlIFx1MDBFOXhpdG8gc2luIHJlZmVyZW5jaWEgYSByYWRpb1xuICBzZXRTdGF0dXMoYFx1MjcwNSBMb3RlIHBpbnRhZG86ICR7YWN0dWFsUGFpbnRlZH0vJHtwaXhlbENvdW50fSBwXHUwMEVEeGVsZXMgZW4gem9uYSAoJHtjZmcuQkFTRV9YfSwke2NmZy5CQVNFX1l9KWAsICdzdWNjZXNzJyk7XG4gIHRyeSB7IHBpeGVsc1BhaW50ZWQoYWN0dWFsUGFpbnRlZCwgeyBib3RWYXJpYW50OiAnYXV0by1mYXJtJywgbWV0YWRhdGE6IHsgdGlsZVg6IGNmZy5USUxFX1gsIHRpbGVZOiBjZmcuVElMRV9ZIH0gfSk7IH0gY2F0Y2gge31cbiAgICAvLyBQaW5nIGRlIHByZXNlbmNpYSBjb21vIHJlc3BhbGRvIHNpIGhhIHBhc2FkbyBzdWZpY2llbnRlIHRpZW1wbyBkZXNkZSBlbCBcdTAwRkFsdGltb1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtY2ZnID0gZ2V0TWV0cmljc0NvbmZpZygpO1xuICAgICAgY29uc3QgbWluR2FwID0gTWF0aC5tYXgoNjBfMDAwLCBtY2ZnLlBJTkdfSU5URVJWQUxfTVMgfHwgMTIwXzAwMCk7XG4gICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3QgbGFzdCA9ICh3aW5kb3cuX193cGxhY2VNZXRyaWNzIHx8IHt9KS5mYXJtTGFzdFBpbmcgfHwgMDtcbiAgICAgIGlmIChub3cgLSBsYXN0ID49IG1pbkdhcCkge1xuICAgICAgICBzZXNzaW9uUGluZyh7IGJvdFZhcmlhbnQ6ICdhdXRvLWZhcm0nLCBtZXRhZGF0YTogeyByZWFzb246ICdhZnRlci1wYWludCcgfSB9KTtcbiAgICAgICAgd2luZG93Ll9fd3BsYWNlTWV0cmljcyA9IHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MgfHwge307XG4gICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuZmFybUxhc3RQaW5nID0gbm93O1xuICAgICAgfVxuICAgIH0gY2F0Y2gge31cbiAgICBmbGFzaEVmZmVjdCgpO1xuICAgIFxuICAgIC8vIEVtaXRpciBldmVudG8gcGVyc29uYWxpemFkbyBwYXJhIG5vdGlmaWNhciBxdWUgc2UgcGludFx1MDBGMyB1biBsb3RlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5DdXN0b21FdmVudCkge1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd3cGxhY2UtYmF0Y2gtcGFpbnRlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB7IFxuICAgICAgICAgIGZpcnN0WDogZmlyc3RMb2NhbFgsIFxuICAgICAgICAgIGZpcnN0WTogZmlyc3RMb2NhbFksIFxuICAgICAgICAgIHBpeGVsQ291bnQ6IGFjdHVhbFBhaW50ZWQsXG4gICAgICAgICAgdG90YWxQaXhlbHM6IHBpeGVsQ291bnQsXG4gICAgICAgICAgY29sb3JzOiBjb2xvcnMsXG4gICAgICAgICAgY29vcmRzOiBjb29yZHMsXG4gICAgICAgICAgdGlsZVg6IGNmZy5USUxFX1gsXG4gICAgICAgICAgdGlsZVk6IGNmZy5USUxFX1ksXG4gICAgICAgICAgYmFzZVg6IGNmZy5CQVNFX1gsXG4gICAgICAgICAgYmFzZVk6IGNmZy5CQVNFX1ksXG4gICAgICAgICAgcmFkaXVzOiBjZmcuRkFSTV9SQURJVVMsXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBcbiAgLy8gTWFuZWpvIGRlIGVycm9yZXMgbWVqb3JhZG9cbiAgaWYgKHIuc3RhdHVzID09PSA0MDMpIHtcbiAgICBzZXRTdGF0dXMoJ1x1MjZBMFx1RkUwRiA0MDMgKHRva2VuIGV4cGlyYWRvIG8gQ2xvdWRmbGFyZSkuIFJlaW50ZW50YXJcdTAwRTEuLi4nLCAnZXJyb3InKTtcbiAgfSBlbHNlIGlmIChyLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgc2V0U3RhdHVzKCdcdUQ4M0RcdUREMTIgNDAxIChubyBhdXRvcml6YWRvKS4gVmVyaWZpY2EgdHUgc2VzaVx1MDBGM24uJywgJ2Vycm9yJyk7XG4gIH0gZWxzZSBpZiAoci5zdGF0dXMgPT09IDQyOSkge1xuICAgIHNldFN0YXR1cygnXHUyM0YzIDQyOSAobFx1MDBFRG1pdGUgZGUgdGFzYSkuIEVzcGVyYW5kby4uLicsICdlcnJvcicpO1xuICB9IGVsc2UgaWYgKHIuc3RhdHVzID09PSA0MDgpIHtcbiAgICBzZXRTdGF0dXMoJ1x1MjNGMCBUaW1lb3V0IGRlbCBzZXJ2aWRvci4gQ29vcmRlbmFkYXMgcHJvYmxlbVx1MDBFMXRpY2FzIG8gc2Vydmlkb3Igc29icmVjYXJnYWRvJywgJ2Vycm9yJyk7XG4gIH0gZWxzZSBpZiAoci5zdGF0dXMgPT09IDApIHtcbiAgICBzZXRTdGF0dXMoJ1x1RDgzQ1x1REYxMCBFcnJvciBkZSByZWQuIFZlcmlmaWNhbmRvIGNvbmVjdGl2aWRhZC4uLicsICdlcnJvcicpO1xuICB9IGVsc2UgaWYgKHIuc3RhdHVzID09PSA1MDApIHtcbiAgICBzZXRTdGF0dXMoJ1x1RDgzRFx1REQyNSA1MDAgKGVycm9yIGludGVybm8gZGVsIHNlcnZpZG9yKS4gUmVpbnRlbnRhclx1MDBFMS4uLicsICdlcnJvcicpO1xuICB9IGVsc2UgaWYgKHIuc3RhdHVzID09PSA1MDIgfHwgci5zdGF0dXMgPT09IDUwMyB8fCByLnN0YXR1cyA9PT0gNTA0KSB7XG4gICAgc2V0U3RhdHVzKGBcdUQ4M0RcdURFQUIgJHtyLnN0YXR1c30gKHNlcnZpZG9yIG5vIGRpc3BvbmlibGUpLiBSZWludGVudGFyXHUwMEUxLi4uYCwgJ2Vycm9yJyk7XG4gIH0gZWxzZSBpZiAoci5zdGF0dXMgPT09IDQwNCkge1xuICAgIHNldFN0YXR1cyhgXHVEODNEXHVEREZBXHVGRTBGIDQwNCAodGlsZSBubyBlbmNvbnRyYWRvKS4gVmVyaWZpY2FuZG8gY29vcmRlbmFkYXMgdGlsZSgke2NmZy5USUxFX1h9LCR7Y2ZnLlRJTEVfWX0pYCwgJ2Vycm9yJyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gUGFyYSBvdHJvcyBlcnJvcmVzLCB2ZXJpZmljYXIgZWwgaGVhbHRoIGRlbCBiYWNrZW5kXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGhlYWx0aCA9IGF3YWl0IGNoZWNrQmFja2VuZEhlYWx0aCgpO1xuICAgICAgY29uc3QgaGVhbHRoU3RhdHVzID0gaGVhbHRoPy51cCA/ICdcdUQ4M0RcdURGRTIgT25saW5lJyA6ICdcdUQ4M0RcdUREMzQgT2ZmbGluZSc7XG4gICAgICBzZXRTdGF0dXMoYFx1Mjc0QyBFcnJvciAke3Iuc3RhdHVzfTogJHtyLmpzb24/Lm1lc3NhZ2UgfHwgci5qc29uPy5lcnJvciB8fCAnRmFsbG8gYWwgcGludGFyJ30gKEJhY2tlbmQ6ICR7aGVhbHRoU3RhdHVzfSlgLCAnZXJyb3InKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHNldFN0YXR1cyhgXHUyNzRDIEVycm9yICR7ci5zdGF0dXN9OiAke3IuanNvbj8ubWVzc2FnZSB8fCByLmpzb24/LmVycm9yIHx8ICdGYWxsbyBhbCBwaW50YXInfSAoSGVhbHRoIGNoZWNrIGZhbGxcdTAwRjMpYCwgJ2Vycm9yJyk7XG4gICAgfVxuICB9XG4gIFxuICAvLyBMb2cgZGV0YWxsYWRvIHBhcmEgZGVidWdnaW5nXG4gIGxvZyhgRmFsbG8gZW4gcGludGFkbzogc3RhdHVzPSR7ci5zdGF0dXN9LCBlcnJvcj0ke3IuZXJyb3J9LCBjb29yZHM9YCwgY29vcmRzLCAnY29sb3JzPScsIGNvbG9ycyk7XG4gIFxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYWludFdpdGhSZXRyeShjZmcsIHN0YXRlLCBzZXRTdGF0dXMsIGZsYXNoRWZmZWN0LCBnZXRTZXNzaW9uLCBjaGVja0JhY2tlbmRIZWFsdGgpIHtcbiAgY29uc3QgbWF4QXR0ZW1wdHMgPSA1OyAvLyBBdW1lbnRhciBhIDUgaW50ZW50b3NcbiAgY29uc3QgYmFzZURlbGF5ID0gMzAwMDsgLy8gRGVsYXkgYmFzZSBkZSAzIHNlZ3VuZG9zXG4gIFxuICBmb3IgKGxldCBhdHRlbXB0ID0gMTsgYXR0ZW1wdCA8PSBtYXhBdHRlbXB0czsgYXR0ZW1wdCsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBwYWludE9uY2UoY2ZnLCBzdGF0ZSwgc2V0U3RhdHVzLCBmbGFzaEVmZmVjdCwgZ2V0U2Vzc2lvbiwgY2hlY2tCYWNrZW5kSGVhbHRoKTtcbiAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgIHN0YXRlLnJldHJ5Q291bnQgPSAwOyAvLyBSZXNldCBlbiBcdTAwRTl4aXRvXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgXG4gICAgICBzdGF0ZS5yZXRyeUNvdW50ID0gYXR0ZW1wdDtcbiAgICAgIFxuICAgICAgaWYgKGF0dGVtcHQgPCBtYXhBdHRlbXB0cykge1xuICAgICAgICBjb25zdCBkZWxheSA9IGJhc2VEZWxheSAqIE1hdGgucG93KDIsIGF0dGVtcHQgLSAxKTsgLy8gQmFja29mZiBleHBvbmVuY2lhbFxuICAgICAgICBzZXRTdGF0dXMoYFx1RDgzRFx1REQwNCBSZWludGVudG8gJHthdHRlbXB0fS8ke21heEF0dGVtcHRzfSBlbiAke2RlbGF5LzEwMDB9cy4uLmAsICdlcnJvcicpO1xuICAgICAgICBhd2FpdCBzbGVlcChkZWxheSk7XG4gICAgICB9XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nKGBFcnJvciBlbiBpbnRlbnRvICR7YXR0ZW1wdH06YCwgZXJyb3IpO1xuICAgICAgc3RhdGUucmV0cnlDb3VudCA9IGF0dGVtcHQ7XG4gICAgICBcbiAgICAgIGlmIChhdHRlbXB0IDwgbWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgY29uc3QgZGVsYXkgPSBiYXNlRGVsYXkgKiBNYXRoLnBvdygyLCBhdHRlbXB0IC0gMSk7XG4gICAgICAgIHNldFN0YXR1cyhgXHVEODNEXHVEQ0E1IEVycm9yIGVuIGludGVudG8gJHthdHRlbXB0fS8ke21heEF0dGVtcHRzfSwgcmVpbnRlbnRhbmRvIGVuICR7ZGVsYXkvMTAwMH1zLi4uYCwgJ2Vycm9yJyk7XG4gICAgICAgIGF3YWl0IHNsZWVwKGRlbGF5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG4gIHN0YXRlLnJldHJ5Q291bnQgPSBtYXhBdHRlbXB0cztcbiAgc2V0U3RhdHVzKGBcdTI3NEMgRmFsbFx1MDBGMyBkZXNwdVx1MDBFOXMgZGUgJHttYXhBdHRlbXB0c30gaW50ZW50b3MuIFNlIHJlcXVpZXJlIGludGVydmVuY2lcdTAwRjNuIG1hbnVhbC5gLCAnZXJyb3InKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9vcChjZmcsIHN0YXRlLCBzZXRTdGF0dXMsIGZsYXNoRWZmZWN0LCBnZXRTZXNzaW9uLCBjaGVja0JhY2tlbmRIZWFsdGgsIHVwZGF0ZVN0YXRzKSB7XG4gIGxvZygnXHVEODNEXHVERTgwIExvb3AgaW5pY2lhZG8nKTtcbiAgc3RhdGUucnVubmluZyA9IHRydWU7XG4gIFxuICB3aGlsZSAoc3RhdGUucnVubmluZykge1xuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxpemFyIGVzdGFkXHUwMEVEc3RpY2FzIGFudGVzIGRlIGNhZGEgY2ljbG9cbiAgICAgIGF3YWl0IHVwZGF0ZVN0YXRzKCk7XG4gICAgICAvLyBQaW5nIGRlIHByZXNlbmNpYSBhbCBlbnRyYXIgZW4gZWwgY2ljbG8gc2kgbGxldmFtb3MgdGllbXBvIHNpbiByZXBvcnRhclxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1jZmcgPSBnZXRNZXRyaWNzQ29uZmlnKCk7XG4gICAgICAgIGNvbnN0IG1pbkdhcCA9IE1hdGgubWF4KDYwXzAwMCwgbWNmZy5QSU5HX0lOVEVSVkFMX01TIHx8IDEyMF8wMDApO1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCBsYXN0ID0gKHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MgfHwge30pLmZhcm1MYXN0UGluZyB8fCAwO1xuICAgICAgICBpZiAobm93IC0gbGFzdCA+PSBtaW5HYXApIHtcbiAgICAgICAgICBzZXNzaW9uUGluZyh7IGJvdFZhcmlhbnQ6ICdhdXRvLWZhcm0nLCBtZXRhZGF0YTogeyByZWFzb246ICdsb29wJyB9IH0pO1xuICAgICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MgPSB3aW5kb3cuX193cGxhY2VNZXRyaWNzIHx8IHt9O1xuICAgICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuZmFybUxhc3RQaW5nID0gbm93O1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHt9XG4gICAgICBcbiAgICAgIC8vIFZlcmlmaWNhciBzaSBoYXkgY2FyZ2FzIHN1ZmljaWVudGVzIHBhcmEgcGludGFyXG4gICAgICBpZiAoc3RhdGUuY2hhcmdlcy5jb3VudCA8IGNmZy5NSU5fQ0hBUkdFUykge1xuICAgICAgICBjb25zdCB3YWl0VGltZSA9IE1hdGgubWF4KDAsIChjZmcuTUlOX0NIQVJHRVMgLSBzdGF0ZS5jaGFyZ2VzLmNvdW50KSAqIGNmZy5DSEFSR0VfUkVHRU5fTVMpO1xuICAgICAgICBzZXRTdGF0dXMoYFx1MjNGMyBFc3BlcmFuZG8gY2FyZ2FzOiAke3N0YXRlLmNoYXJnZXMuY291bnQudG9GaXhlZCgxKX0vJHtjZmcuTUlOX0NIQVJHRVN9ICgke01hdGgucm91bmQod2FpdFRpbWUvMTAwMCl9cylgLCAnc3RhdHVzJyk7XG4gICAgICAgIC8vIER1cmFudGUgZXNwZXJhcyBsYXJnYXMsIGVtaXRpciBwaW5nIGRlIHByZXNlbmNpYSBhbCBpbmljaW8gZGUgbGEgZXNwZXJhIHNpIGFwbGljYVxuICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbWNmZyA9IGdldE1ldHJpY3NDb25maWcoKTtcbiAgICAgICAgICBjb25zdCBtaW5HYXAgPSBNYXRoLm1heCg2MF8wMDAsIG1jZmcuUElOR19JTlRFUlZBTF9NUyB8fCAxMjBfMDAwKTtcbiAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgIGNvbnN0IGxhc3QgPSAod2luZG93Ll9fd3BsYWNlTWV0cmljcyB8fCB7fSkuZmFybUxhc3RQaW5nIHx8IDA7XG4gICAgICAgICAgaWYgKG5vdyAtIGxhc3QgPj0gbWluR2FwKSB7XG4gICAgICAgICAgICBzZXNzaW9uUGluZyh7IGJvdFZhcmlhbnQ6ICdhdXRvLWZhcm0nLCBtZXRhZGF0YTogeyByZWFzb246ICd3YWl0aW5nLWNoYXJnZXMnIH0gfSk7XG4gICAgICAgICAgICB3aW5kb3cuX193cGxhY2VNZXRyaWNzID0gd2luZG93Ll9fd3BsYWNlTWV0cmljcyB8fCB7fTtcbiAgICAgICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuZmFybUxhc3RQaW5nID0gbm93O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgICBcbiAgICAgICAgYXdhaXQgc2xlZXBXaXRoQ291bnRkb3duKE1hdGgubWluKHdhaXRUaW1lLCBjZmcuREVMQVlfTVMpLCAocmVtYWluaW5nKSA9PiB7XG4gICAgICAgICAgc2V0U3RhdHVzKGBcdTIzRjMgRXNwZXJhbmRvIGNhcmdhczogJHtzdGF0ZS5jaGFyZ2VzLmNvdW50LnRvRml4ZWQoMSl9LyR7Y2ZnLk1JTl9DSEFSR0VTfSAofiR7TWF0aC5yb3VuZChyZW1haW5pbmcvMTAwMCl9cylgLCAnc3RhdHVzJyk7XG4gICAgICAgIH0sIHN0YXRlKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJbnRlbnRhciBwaW50YXJcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBwYWludFdpdGhSZXRyeShjZmcsIHN0YXRlLCBzZXRTdGF0dXMsIGZsYXNoRWZmZWN0LCBnZXRTZXNzaW9uLCBjaGVja0JhY2tlbmRIZWFsdGgpO1xuICAgICAgXG4gICAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgICAgLy8gU2kgZmFsbFx1MDBGMyBkZXNwdVx1MDBFOXMgZGUgdG9kb3MgbG9zIHJlaW50ZW50b3MsIGVzcGVyYXIgbVx1MDBFMXMgdGllbXBvXG4gICAgICAgIHNldFN0YXR1cygnXHVEODNEXHVERTM0IEVzcGVyYW5kbyBhbnRlcyBkZWwgc2lndWllbnRlIGludGVudG8uLi4nLCAnZXJyb3InKTtcbiAgICAgICAgYXdhaXQgc2xlZXBXaXRoQ291bnRkb3duKGNmZy5ERUxBWV9NUyAqIDIsIChyZW1haW5pbmcpID0+IHtcbiAgICAgICAgICBzZXRTdGF0dXMoYFx1RDgzRFx1REUzNCBDb29sZG93biBleHRlbmRpZG86ICR7TWF0aC5yb3VuZChyZW1haW5pbmcvMTAwMCl9c2AsICdlcnJvcicpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIERlbGF5IG5vcm1hbCBlbnRyZSBwaW50YWRhcyBleGl0b3Nhc1xuICAgICAgaWYgKHN0YXRlLnJ1bm5pbmcpIHtcbiAgICAgICAgYXdhaXQgc2xlZXBXaXRoQ291bnRkb3duKGNmZy5ERUxBWV9NUywgKHJlbWFpbmluZykgPT4ge1xuICAgICAgICAgIHNldFN0YXR1cyhgXHVEODNEXHVEQ0E0IEVzcGVyYW5kbyAke01hdGgucm91bmQocmVtYWluaW5nLzEwMDApfXMgaGFzdGEgc2lndWllbnRlIHBpbnRhZGEuLi5gLCAnc3RhdHVzJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZygnRXJyb3IgY3JcdTAwRUR0aWNvIGVuIGxvb3A6JywgZXJyb3IpO1xuICAgICAgc2V0U3RhdHVzKGBcdUQ4M0RcdURDQTUgRXJyb3IgY3JcdTAwRUR0aWNvOiAke2Vycm9yLm1lc3NhZ2V9YCwgJ2Vycm9yJyk7XG4gICAgICBcbiAgICAgIC8vIEVzcGVyYXIgbVx1MDBFMXMgdGllbXBvIGFudGVzIGRlIGNvbnRpbnVhciB0cmFzIGVycm9yIGNyXHUwMEVEdGljb1xuICAgICAgaWYgKHN0YXRlLnJ1bm5pbmcpIHtcbiAgICAgICAgYXdhaXQgc2xlZXBXaXRoQ291bnRkb3duKGNmZy5ERUxBWV9NUyAqIDMsIChyZW1haW5pbmcpID0+IHtcbiAgICAgICAgICBzZXRTdGF0dXMoYFx1RDgzRFx1REVBOCBSZWN1cGVyXHUwMEUxbmRvc2UgZGUgZXJyb3IgY3JcdTAwRUR0aWNvOiAke01hdGgucm91bmQocmVtYWluaW5nLzEwMDApfXNgLCAnZXJyb3InKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICBsb2coJ1x1MjNGOVx1RkUwRiBMb29wIGRldGVuaWRvJyk7XG4gIHNldFN0YXR1cygnXHUyM0Y5XHVGRTBGIEJvdCBkZXRlbmlkbycsICdzdGF0dXMnKTtcbn1cbiIsICJpbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vY29yZS9sb2dnZXIuanNcIjtcblxuY29uc3QgcmFuZEludCA9IChuKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBuKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUNvb3JkSW5UaWxlKHRpbGVYLCB0aWxlWSwgbWFyZ2luID0gMC4wNSkge1xuICBjb25zdCBzaXplID0gMzAwMDtcbiAgY29uc3QgbSA9IE1hdGguZmxvb3Ioc2l6ZSAqIG1hcmdpbik7XG4gIGNvbnN0IHJ4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHNpemUgLSAyKm0pKSArIG07XG4gIGNvbnN0IHJ5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHNpemUgLSAyKm0pKSArIG07XG4gIHJldHVybiB7IHg6IHJ4LCB5OiByeSwgYWJzWDogdGlsZVggKiBzaXplICsgcngsIGFic1k6IHRpbGVZICogc2l6ZSArIHJ5IH07XG59XG5cbi8vIEZhcm0tc3BlY2lmaWMgY29vcmRpbmF0ZSBnZW5lcmF0aW9uIHVzYW5kbyBwb3NpY2lcdTAwRjNuIGJhc2UgeSByYWRpb1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUNvb3JkcyhjZmcpIHtcbiAgLy8gVmVyaWZpY2FyIHNpIHNlIGhhIHNlbGVjY2lvbmFkbyB1bmEgcG9zaWNpXHUwMEYzbiBiYXNlXG4gIGlmICghY2ZnLlBPU0lUSU9OX1NFTEVDVEVEIHx8IGNmZy5CQVNFX1ggPT09IG51bGwgfHwgY2ZnLkJBU0VfWSA9PT0gbnVsbCkge1xuICAgIGxvZygnXHUyNkEwXHVGRTBGIE5vIHNlIGhhIHNlbGVjY2lvbmFkbyB1bmEgcG9zaWNpXHUwMEYzbiBiYXNlLiBVc2FuZG8gY29vcmRlbmFkYXMgYWxlYXRvcmlhcyBmYWxsYmFjay4nKTtcbiAgICAvLyBGYWxsYmFjayBhIGNvb3JkZW5hZGFzIGFsZWF0b3JpYXMgZW4gZWwgdGlsZSAoY29tcG9ydGFtaWVudG8gYW50ZXJpb3IpXG4gICAgY29uc3QgbWFyZ2luID0gTWF0aC5mbG9vcihjZmcuVElMRV9TSVpFICogMC4wNSk7XG4gICAgY29uc3Qgc2FmZVNpemUgPSBjZmcuVElMRV9TSVpFIC0gKG1hcmdpbiAqIDIpO1xuICAgIFxuICAgIGlmIChzYWZlU2l6ZSA8PSAwKSB7XG4gICAgICByZXR1cm4gW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNmZy5USUxFX1NJWkUpLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjZmcuVElMRV9TSVpFKV07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGxvY2FsWCA9IG1hcmdpbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNhZmVTaXplKTtcbiAgICBjb25zdCBsb2NhbFkgPSBtYXJnaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzYWZlU2l6ZSk7XG4gICAgcmV0dXJuIFtsb2NhbFgsIGxvY2FsWV07XG4gIH1cbiAgXG4gIC8vIEVORk9RVUUgU0lNUExJRklDQURPOiBHZW5lcmFyIGNvb3JkZW5hZGFzIGRpcmVjdGFtZW50ZSBlbiBlbCB0aWxlIGFjdHVhbFxuICAvLyBwYXJhIGV2aXRhciBwcm9ibGVtYXMgZGUgY29udmVyc2lcdTAwRjNuIGFic29sdXRhL2xvY2FsXG4gIFxuICBjb25zdCByYWRpdXMgPSBjZmcuRkFSTV9SQURJVVM7XG4gIGNvbnN0IG1heFNpemUgPSBjZmcuVElMRV9TSVpFIC0gMTsgLy8gMjk5OSBwYXJhIHRpbGUgZGUgMzAwMFxuICBcbiAgLy8gR2VuZXJhciB1biBcdTAwRTFuZ3VsbyBhbGVhdG9yaW8geSB1bmEgZGlzdGFuY2lhIGFsZWF0b3JpYSBkZW50cm8gZGVsIHJhZGlvXG4gIGNvbnN0IGFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICBjb25zdCBkaXN0YW5jZSA9IE1hdGgucmFuZG9tKCkgKiByYWRpdXM7XG4gIFxuICAvLyBDYWxjdWxhciBvZmZzZXQgZGVzZGUgbGEgcG9zaWNpXHUwMEYzbiBiYXNlIChsb2NhbClcbiAgY29uc3Qgb2Zmc2V0WCA9IE1hdGgucm91bmQoZGlzdGFuY2UgKiBNYXRoLmNvcyhhbmdsZSkpO1xuICBjb25zdCBvZmZzZXRZID0gTWF0aC5yb3VuZChkaXN0YW5jZSAqIE1hdGguc2luKGFuZ2xlKSk7XG4gIFxuICAvLyBDYWxjdWxhciBjb29yZGVuYWRhcyBsb2NhbGVzIGZpbmFsZXMgZGlyZWN0YW1lbnRlXG4gIGxldCBsb2NhbFggPSBjZmcuQkFTRV9YICsgb2Zmc2V0WDtcbiAgbGV0IGxvY2FsWSA9IGNmZy5CQVNFX1kgKyBvZmZzZXRZO1xuICBcbiAgLy8gQXNlZ3VyYXIgcXVlIGxhcyBjb29yZGVuYWRhcyBlc3RcdTAwRTFuIGRlbnRybyBkZWwgdGlsZVxuICBsb2NhbFggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihtYXhTaXplLCBsb2NhbFgpKTtcbiAgbG9jYWxZID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obWF4U2l6ZSwgbG9jYWxZKSk7XG4gIFxuICByZXR1cm4gW2xvY2FsWCwgbG9jYWxZXTtcbn1cblxuLy8gR2VuZXJhciBtXHUwMEZBbHRpcGxlcyBjb29yZGVuYWRhcyBwYXJhIGxcdTAwRURuZWEgcmVjdGFcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVN0cmFpZ2h0TGluZShjb3VudCwgY2ZnKSB7XG4gIGNvbnN0IGNvb3JkcyA9IFtdO1xuICBjb25zdCBtYXhTaXplID0gY2ZnLlRJTEVfU0laRSAtIDE7IC8vIDI5OTkgcGFyYSB0aWxlIGRlIDMwMDBcbiAgXG4gIC8vIFB1bnRvIGRlIGluaWNpbzogcG9zaWNpXHUwMEYzbiBiYXNlIHNlbGVjY2lvbmFkYVxuICBsZXQgY3VycmVudFggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihtYXhTaXplLCBjZmcuQkFTRV9YKSk7XG4gIGxldCBjdXJyZW50WSA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1heFNpemUsIGNmZy5CQVNFX1kpKTtcbiAgXG4gIC8vIEdlbmVyYXIgbFx1MDBFRG5lYSBob3Jpem9udGFsIChjb21vIGVsIGVqZW1wbG8gZGVsIHVzdWFyaW86IDYyMiw2MzUsNjIzLDYzNSw2MjQsNjM1Li4uKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAvLyBBc2VndXJhciBxdWUgbGFzIGNvb3JkZW5hZGFzIGVzdFx1MDBFMW4gZGVudHJvIGRlbCByYW5nbyB2XHUwMEUxbGlkb1xuICAgIGN1cnJlbnRYID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obWF4U2l6ZSwgY3VycmVudFgpKTtcbiAgICBjdXJyZW50WSA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1heFNpemUsIGN1cnJlbnRZKSk7XG4gICAgXG4gICAgY29vcmRzLnB1c2goY3VycmVudFgsIGN1cnJlbnRZKTtcbiAgICBcbiAgICAvLyBBdmFuemFyIGhhY2lhIGxhIGRlcmVjaGEgKGxcdTAwRURuZWEgaG9yaXpvbnRhbClcbiAgICBjdXJyZW50WCsrO1xuICAgIFxuICAgIC8vIFNpIGxsZWdhbW9zIGFsIGJvcmRlIGRlcmVjaG8sIHBhc2FyIGEgbGEgc2lndWllbnRlIGxcdTAwRURuZWFcbiAgICBpZiAoY3VycmVudFggPiBtYXhTaXplKSB7XG4gICAgICBjdXJyZW50WCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1heFNpemUsIGNmZy5CQVNFX1gpKTsgLy8gVm9sdmVyIGFsIGluaWNpbyBYXG4gICAgICBjdXJyZW50WSsrOyAvLyBCYWphciB1bmEgbFx1MDBFRG5lYVxuICAgICAgXG4gICAgICAvLyBTaSBsbGVnYW1vcyBhbCBib3JkZSBpbmZlcmlvciwgdm9sdmVyIGFycmliYVxuICAgICAgaWYgKGN1cnJlbnRZID4gbWF4U2l6ZSkge1xuICAgICAgICBjdXJyZW50WSA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1heFNpemUsIGNmZy5CQVNFX1kpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG4gIC8vIExvZyBwYXJhIGRlYnVnZ2luZyAtIG1vc3RyYXIgcGF0clx1MDBGM24gZGUgbFx1MDBFRG5lYSByZWN0YSBnZW5lcmFkb1xuICBpZiAoY29vcmRzLmxlbmd0aCA+PSA0KSB7XG4gICAgbG9nKGBcdUQ4M0NcdURGQUYgTFx1MDBFRG5lYSByZWN0YSBnZW5lcmFkYTogWyR7Y29vcmRzLnNsaWNlKDAsIDgpLmpvaW4oJywnKX0uLi5dIHRvdGFsOiAke2Nvb3Jkcy5sZW5ndGgvMn0gcFx1MDBFRHhlbGVzYCk7XG4gIH1cbiAgXG4gIHJldHVybiBjb29yZHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZU11bHRpcGxlQ29sb3JzKGNvdW50LCBjZmcpIHtcbiAgY29uc3QgY29sb3JzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGNvbG9ycy5wdXNoKG5leHRDb2xvcihjZmcpKTtcbiAgfVxuICByZXR1cm4gY29sb3JzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dENvbG9yKGNmZykge1xuICBpZiAoY2ZnLkNPTE9SX01PREUgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gY2ZnLkNPTE9SX0ZJWEVEO1xuICB9IGVsc2Uge1xuICAgIC8vIE1vZG8gcmFuZG9tOiBjb2xvciBlbnRyZSBDT0xPUl9NSU4geSBDT0xPUl9NQVggKGluY2x1c2l2bylcbiAgICBjb25zdCBzcGFuID0gY2ZnLkNPTE9SX01BWCAtIGNmZy5DT0xPUl9NSU4gKyAxO1xuICAgIHJldHVybiBjZmcuQ09MT1JfTUlOICsgcmFuZEludChzcGFuKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dENvbG9yTGVnYWN5KHBhbGV0dGUpIHtcbiAgcmV0dXJuIHBhbGV0dGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFsZXR0ZS5sZW5ndGgpXTtcbn0iLCAiZXhwb3J0IGNvbnN0IHNsZWVwID0gKG1zKSA9PiBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgbXMpKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJldHJ5KGZuLCB7IHRyaWVzID0gMywgYmFzZSA9IDUwMCB9ID0ge30pIHtcbiAgbGV0IGxhc3Q7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZXM7IGkrKykge1xuICAgIHRyeSB7IHJldHVybiBhd2FpdCBmbigpOyB9XG4gICAgY2F0Y2ggKGUpIHsgbGFzdCA9IGU7IGF3YWl0IHNsZWVwKGJhc2UgKiAyICoqIGkpOyB9XG4gIH1cbiAgdGhyb3cgbGFzdDtcbn1cblxuZXhwb3J0IGNvbnN0IHJhbmRJbnQgPSAobikgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbik7XG5cbi8vIFNsZWVwIHdpdGggY291bnRkb3duIChmcm9tIGZhcm0pXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2xlZXBXaXRoQ291bnRkb3duKG1zLCBvblVwZGF0ZSwgc3RhdGUpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgZW5kVGltZSA9IHN0YXJ0VGltZSArIG1zO1xuICBcbiAgd2hpbGUgKERhdGUubm93KCkgPCBlbmRUaW1lICYmICghc3RhdGUgfHwgc3RhdGUucnVubmluZykpIHtcbiAgICBjb25zdCByZW1haW5pbmcgPSBlbmRUaW1lIC0gRGF0ZS5ub3coKTtcbiAgICBcbiAgICBpZiAob25VcGRhdGUpIHtcbiAgICAgIG9uVXBkYXRlKHJlbWFpbmluZyk7XG4gICAgfVxuICAgIFxuICAgIGF3YWl0IHNsZWVwKE1hdGgubWluKDEwMDAsIHJlbWFpbmluZykpO1xuICB9XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGxvYWQoa2V5LCBmYWxsYmFjaykge1xuICAvLyBObyB1c2FyIGxvY2FsU3RvcmFnZSAtIHNpZW1wcmUgcmV0b3JuYXIgZmFsbGJhY2tcbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZShrZXksIHZhbHVlKSB7XG4gIC8vIE5vIGd1YXJkYXIgZW4gbG9jYWxTdG9yYWdlIC0gZnVuY2lcdTAwRjNuIGRlc2hhYmlsaXRhZGFcbiAgcmV0dXJuO1xufVxuXG4vLyBGYXJtLXNwZWNpZmljIHN0b3JhZ2UgZnVuY3Rpb25zXG5leHBvcnQgZnVuY3Rpb24gc2F2ZUZhcm1DZmcoY2ZnKSB7IFxuICAvLyBObyBndWFyZGFyIGVuIGxvY2FsU3RvcmFnZSAtIGZ1bmNpXHUwMEYzbiBkZXNoYWJpbGl0YWRhXG4gIHJldHVybjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRGYXJtQ2ZnKGRlZmF1bHRzKSB7XG4gIC8vIE5vIGNhcmdhciBkZSBsb2NhbFN0b3JhZ2UgLSBzaWVtcHJlIHVzYXIgZGVmYXVsdHNcbiAgcmV0dXJuIHsgLi4uZGVmYXVsdHMgfTtcbn1cblxuLy8gUmVzZXRlYXIgY29uZmlndXJhY2lcdTAwRjNuIGRlbCBmYXJtXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRGYXJtQ2ZnKCkge1xuICAvLyBObyBoYXkgbG9jYWxTdG9yYWdlIHF1ZSByZXNldGVhciAtIGZ1bmNpXHUwMEYzbiBkZXNoYWJpbGl0YWRhXG4gIGNvbnNvbGUubG9nKCdbV1BBLVVJXScsICdDb25maWd1cmFjaVx1MDBGM24gZGVsIGZhcm0gcmVzZXRlYWRhIChsb2NhbFN0b3JhZ2UgZGVzaGFiaWxpdGFkbyknKTtcbn1cblxuLy8gUmVzZXRlYXIgYSBjb25maWd1cmFjaVx1MDBGM24gc2VndXJhXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRUb1NhZmVEZWZhdWx0cygpIHtcbiAgLy8gTm8gaGF5IGxvY2FsU3RvcmFnZSBxdWUgcmVzZXRlYXIgLSBmdW5jaVx1MDBGM24gZGVzaGFiaWxpdGFkYVxuICBjb25zb2xlLmxvZygnW1dQQS1VSV0nLCAnQ29uZmlndXJhY2lcdTAwRjNuIHJlc2V0ZWFkYSBhIHZhbG9yZXMgc2VndXJvcyAobG9jYWxTdG9yYWdlIGRlc2hhYmlsaXRhZG8pJyk7XG59XG5cbi8vIFZlcmlmaWNhciBzaSBuZWNlc2l0YSBjYWxpYnJhY2lcdTAwRjNuIGluaWNpYWxcbmV4cG9ydCBmdW5jdGlvbiBuZWVkc0NhbGlicmF0aW9uKGNmZywgZGVmYXVsdHMpIHtcbiAgLy8gVmVyaWZpY2FyIHNpIGxhcyBjb29yZGVuYWRhcyBzb24gbGFzIHBvciBkZWZlY3RvXG4gIGNvbnN0IGhhc0RlZmF1bHRDb29yZHMgPSBjZmcuVElMRV9YID09PSBkZWZhdWx0cy5USUxFX1ggJiYgY2ZnLlRJTEVfWSA9PT0gZGVmYXVsdHMuVElMRV9ZO1xuICAvLyBTaW4gbG9jYWxTdG9yYWdlLCBzaWVtcHJlIGNvbnNpZGVyYW1vcyBxdWUgbm8gaGF5IGNvbmZpZ3VyYWNpXHUwMEYzbiBndWFyZGFkYVxuICBjb25zdCBoYXNOb1NhdmVkQ29uZmlnID0gdHJ1ZTtcbiAgLy8gVmVyaWZpY2FyIHF1ZSBsYXMgY29vcmRlbmFkYXMgc2VhbiBuXHUwMEZBbWVyb3Mgdlx1MDBFMWxpZG9zXG4gIGNvbnN0IGhhc0ludmFsaWRDb29yZHMgPSAhTnVtYmVyLmlzRmluaXRlKGNmZy5USUxFX1gpIHx8ICFOdW1iZXIuaXNGaW5pdGUoY2ZnLlRJTEVfWSk7XG4gIFxuICBjb25zdCBuZWVkc0NhbGliID0gaGFzRGVmYXVsdENvb3JkcyB8fCBoYXNOb1NhdmVkQ29uZmlnIHx8IGhhc0ludmFsaWRDb29yZHM7XG4gIGNvbnNvbGUubG9nKCdbV1BBLVVJXScsIGBWZXJpZmljYWNpXHUwMEYzbiBjYWxpYnJhY2lcdTAwRjNuOiBkZWZhdWx0cz0ke2hhc0RlZmF1bHRDb29yZHN9LCBub0NvbmZpZz0ke2hhc05vU2F2ZWRDb25maWd9LCBpbnZhbGlkPSR7aGFzSW52YWxpZENvb3Jkc30sIGNvb3Jkcz0oJHtjZmcuVElMRV9YfSwke2NmZy5USUxFX1l9KWApO1xuICBcbiAgcmV0dXJuIG5lZWRzQ2FsaWI7XG59XG4iLCAiaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2NvcmUvbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyBpbWFnZVN0YXRlLCBJTUFHRV9ERUZBVUxUUyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuaW1wb3J0IHsgQmx1ZU1hcmJsZWxJbWFnZVByb2Nlc3NvciwgZGV0ZWN0QXZhaWxhYmxlQ29sb3JzIH0gZnJvbSBcIi4vYmx1ZS1tYXJibGUtcHJvY2Vzc29yLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzSW1hZ2UsIHN0b3BQYWludGluZyB9IGZyb20gXCIuL3BhaW50ZXIuanNcIjtcbmltcG9ydCB7IHNhdmVQcm9ncmVzcywgbG9hZFByb2dyZXNzLCBjbGVhclByb2dyZXNzLCBnZXRQcm9ncmVzc0luZm8gfSBmcm9tIFwiLi9zYXZlLWxvYWQuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUltYWdlVUkgfSBmcm9tIFwiLi91aS5qc1wiO1xuaW1wb3J0IHsgc2hvd0d1YXJkRGlhbG9nLCBzYXZlR3VhcmRKU09OLCBzaG93Q29uZmlybURpYWxvZyB9IGZyb20gXCIuL3NhZmUtZ3VhcmQtd2luZG93LmpzXCI7XG5pbXBvcnQgeyBnZXRTZXNzaW9uIH0gZnJvbSBcIi4uL2NvcmUvd3BsYWNlLWFwaS5qc1wiO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUxhbmd1YWdlLCBnZXRTZWN0aW9uLCB0LCBnZXRDdXJyZW50TGFuZ3VhZ2UgfSBmcm9tIFwiLi4vbG9jYWxlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQYWxldHRlT3BlbiwgYXV0b0NsaWNrUGFpbnRCdXR0b24gfSBmcm9tIFwiLi4vY29yZS9kb20uanNcIjtcbmltcG9ydCB7IHByZXBhcmVUb2tlbnNGb3JCb3QgfSBmcm9tIFwiLi4vY29yZS93YXJtdXAuanNcIjtcbmltcG9ydCBcIi4vcGxhbi1vdmVybGF5LWJsdWUtbWFyYmxlLmpzXCI7XG5pbXBvcnQgeyBzZXNzaW9uU3RhcnQsIHNlc3Npb25QaW5nLCBzZXNzaW9uRW5kLCByZXBvcnRFcnJvciB9IGZyb20gXCIuLi9jb3JlL21ldHJpY3MvY2xpZW50LmpzXCI7XG5pbXBvcnQgeyBnZXRNZXRyaWNzQ29uZmlnIH0gZnJvbSBcIi4uL2NvcmUvbWV0cmljcy9jb25maWcuanNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bkltYWdlKCkge1xuICBjb25zb2xlLmxvZygnW1dQQS1JbWFnZV0gXHVEODNEXHVERTgwIHJ1bkltYWdlKCkgaW5pY2lhZG8nKTtcbiAgbG9nKCdcdUQ4M0RcdURFODAgSW5pY2lhbmRvIFdQbGFjZSBBdXRvLUltYWdlICh2ZXJzaVx1MDBGM24gbW9kdWxhciknKTtcbiAgXG4gIC8vIEluaWNpYWxpemFyIHNpc3RlbWEgZGUgaWRpb21hc1xuICBjb25zb2xlLmxvZygnW1dQQS1JbWFnZV0gXHVEODNDXHVERjBEIEluaWNpYWxpemFuZG8gc2lzdGVtYSBkZSBpZGlvbWFzJyk7XG4gIGluaXRpYWxpemVMYW5ndWFnZSgpO1xuICBjb25zb2xlLmxvZygnW1dQQS1JbWFnZV0gXHUyNzA1IFNpc3RlbWEgZGUgaWRpb21hcyBpbmljaWFsaXphZG8nKTtcbiAgXG4gIC8vIEFzZWd1cmFyc2UgcXVlIGVsIGVzdGFkbyBnbG9iYWwgZXhpc3RlXG4gIHdpbmRvdy5fX3dwbGFjZUJvdCA9IHsgLi4ud2luZG93Ll9fd3BsYWNlQm90LCBpbWFnZVJ1bm5pbmc6IHRydWUgfTtcbiAgY29uc29sZS5sb2coJ1tXUEEtSW1hZ2VdIFx1RDgzRFx1REQyNyBFc3RhZG8gZ2xvYmFsIGFjdHVhbGl6YWRvJyk7XG5cbiAgLy8gUHJlcGFyYXIgdG9rZW5zIGNvbiBsYSBudWV2YSB2ZW50YW5hIGRlIGNhcHR1cmFcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmVwYXJlVG9rZW5zRm9yQm90KCdBdXRvLUltYWdlJyk7XG4gICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgW2ltYWdlXSBUb2tlbnMgbm8gcHJlcGFyYWRvcywgY29udGludWFuZG8gY29uIGludGVyY2VwdG9yIGFjdGl2bycpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2coJ1x1Mjc0QyBbaW1hZ2VdIEVycm9yIHByZXBhcmFuZG8gdG9rZW5zOicsIGVycm9yKTtcbiAgfVxuXG4gIGxldCBjdXJyZW50VXNlckluZm8gPSBudWxsOyAvLyBWYXJpYWJsZSBnbG9iYWwgcGFyYSBpbmZvcm1hY2lcdTAwRjNuIGRlbCB1c3VhcmlvXG4gIGxldCBvcmlnaW5hbEZldGNoID0gd2luZG93LmZldGNoOyAvLyBHdWFyZGFyIGZldGNoIG9yaWdpbmFsIGdsb2JhbG1lbnRlXG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSByZXN0YXVyYXIgZmV0Y2ggb3JpZ2luYWwgZGUgZm9ybWEgc2VndXJhXG4gIGNvbnN0IHJlc3RvcmVGZXRjaCA9ICgpID0+IHtcbiAgICAvLyBGSVg6IE5vIHJlc3RhdXJhciBmZXRjaCBzaSBlbCBvdmVybGF5IGVzdFx1MDBFMSBhY3Rpdm8gcGFyYSBldml0YXIgY2FuY2VsYXIgc3UgaW50ZXJjZXBjaVx1MDBGM25cbiAgICBjb25zdCBvdmVybGF5QWN0aXZlID0gd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fICYmIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zdGF0ZSAmJiB3aW5kb3cuX19XUEFfUExBTl9PVkVSTEFZX18uc3RhdGUuZW5hYmxlZDtcbiAgICBcbiAgICBpZiAod2luZG93LmZldGNoICE9PSBvcmlnaW5hbEZldGNoICYmICFvdmVybGF5QWN0aXZlKSB7XG4gICAgICB3aW5kb3cuZmV0Y2ggPSBvcmlnaW5hbEZldGNoO1xuICAgICAgbG9nKCdcdUQ4M0RcdUREMDQgRmV0Y2ggb3JpZ2luYWwgcmVzdGF1cmFkbycpO1xuICAgIH0gZWxzZSBpZiAob3ZlcmxheUFjdGl2ZSkge1xuICAgICAgbG9nKCdcdUQ4M0RcdUREMDQgRmV0Y2ggTk8gcmVzdGF1cmFkbyAtIG92ZXJsYXkgYWN0aXZvJyk7XG4gICAgfVxuICAgIFxuICAgIGlmIChpbWFnZVN0YXRlLnBvc2l0aW9uVGltZW91dElkKSB7XG4gICAgICBjbGVhclRpbWVvdXQoaW1hZ2VTdGF0ZS5wb3NpdGlvblRpbWVvdXRJZCk7XG4gICAgICBpbWFnZVN0YXRlLnBvc2l0aW9uVGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGltYWdlU3RhdGUuY2xlYW51cE9ic2VydmVyKSB7XG4gICAgICBpbWFnZVN0YXRlLmNsZWFudXBPYnNlcnZlcigpO1xuICAgICAgaW1hZ2VTdGF0ZS5jbGVhbnVwT2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgICBpbWFnZVN0YXRlLnNlbGVjdGluZ1Bvc2l0aW9uID0gZmFsc2U7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICAvLyBJbmljaWFyIHNlc2lcdTAwRjNuIGRlIG1cdTAwRTl0cmljYXNcbiAgICB0cnkge1xuICAgICAgY29uc3QgbWNmZyA9IGdldE1ldHJpY3NDb25maWcoeyBWQVJJQU5UOiAnYXV0by1pbWFnZScgfSk7XG4gICAgICBpZiAobWNmZy5FTkFCTEVEKSB7XG4gICAgICAgIGlmICghd2luZG93Ll9fd3BsYWNlTWV0cmljcykgd2luZG93Ll9fd3BsYWNlTWV0cmljcyA9IHt9O1xuICBsb2coYFtNRVRSSUNTXSBlbmFibGVkIFx1MjE5MiAke21jZmcuQkFTRV9VUkx9YCk7XG4gICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuaW1hZ2VTZXNzaW9uQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgc2Vzc2lvblN0YXJ0KHsgYm90VmFyaWFudDogJ2F1dG8taW1hZ2UnIH0pO1xuICAgICAgICBjb25zdCBwaW5nRXZlcnkgPSBNYXRoLm1heCg2MF8wMDAsIG1jZmcuUElOR19JTlRFUlZBTF9NUyB8fCAzMDBfMDAwKTtcbiAgICAgICAgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5pbWFnZVBpbmdJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiBzZXNzaW9uUGluZyh7IGJvdFZhcmlhbnQ6ICdhdXRvLWltYWdlJyB9KSwgcGluZ0V2ZXJ5KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHt9XG4gICAgLy8gSW5pY2lhbGl6YXIgY29uZmlndXJhY2lcdTAwRjNuXG4gICAgY29uc3QgY29uZmlnID0geyAuLi5JTUFHRV9ERUZBVUxUUyB9O1xuICAgIFxuICAgIC8vIE9idGVuZXIgdGV4dG9zIGVuIGVsIGlkaW9tYSBhY3R1YWxcbiAgICBjb25zdCB0ZXh0cyA9IGdldFNlY3Rpb24oJ2ltYWdlJyk7XG4gICAgXG4gICAgLy8gQWN0dWFsaXphciBlc3RhZG8gZGVsIGlkaW9tYVxuICAgIGltYWdlU3RhdGUubGFuZ3VhZ2UgPSBnZXRDdXJyZW50TGFuZ3VhZ2UoKTtcbiAgICBcbiAgICAvLyBWZXJpZmljYXIgc2l0ZWtleVxuICAgIGlmICghY29uZmlnLlNJVEVLRVkpIHtcbiAgICAgIGNvbnN0IHNpdGVLZXlFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignKltkYXRhLXNpdGVrZXldJyk7XG4gICAgICBpZiAoc2l0ZUtleUVsZW1lbnQpIHtcbiAgICAgICAgY29uZmlnLlNJVEVLRVkgPSBzaXRlS2V5RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2l0ZWtleScpO1xuICAgICAgICBsb2coYFx1RDgzRFx1RENERCBTaXRla2V5IGVuY29udHJhZGEgYXV0b21cdTAwRTF0aWNhbWVudGU6ICR7Y29uZmlnLlNJVEVLRVkuc3Vic3RyaW5nKDAsIDIwKX0uLi5gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZygnXHUyNkEwXHVGRTBGIE5vIHNlIHB1ZG8gZW5jb250cmFyIGxhIHNpdGVrZXkgYXV0b21cdTAwRTF0aWNhbWVudGUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSBhdXRvLWluaWNpbyBkZWwgYm90XG4gICAgYXN5bmMgZnVuY3Rpb24gdHJ5QXV0b0luaXQoKSB7XG4gICAgICBsb2coJ1x1RDgzRVx1REQxNiBJbnRlbnRhbmRvIGF1dG8taW5pY2lvLi4uJyk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmaWNhciBzaSBsYSBwYWxldGEgeWEgZXN0XHUwMEUxIGFiaWVydGFcbiAgICAgIGlmIChpc1BhbGV0dGVPcGVuKCkpIHtcbiAgICAgICAgbG9nKCdcdUQ4M0NcdURGQTggUGFsZXRhIGRlIGNvbG9yZXMgeWEgZXN0XHUwMEUxIGFiaWVydGEnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGxvZygnXHVEODNEXHVERDBEIFBhbGV0YSBubyBlbmNvbnRyYWRhLCBpbmljaWFuZG8gYXV0by1jbGljayBkZWwgYm90XHUwMEYzbiBQYWludC4uLicpO1xuICAgICAgXG4gICAgICAvLyBVc2FyIGxhIG51ZXZhIGZ1bmNpXHUwMEYzbiBkZSBhdXRvLWNsaWNrIHF1ZSBoYWNlIGRvYmxlIGNsaWMgYXV0b21cdTAwRTF0aWNhbWVudGVcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBhdXRvQ2xpY2tQYWludEJ1dHRvbigzLCB0cnVlKTtcbiAgICAgIFxuICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgbG9nKCdcdTI3MDUgQXV0by1jbGljayBleGl0b3NvLCBwYWxldGEgYWJpZXJ0YScpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZygnXHUyNzRDIEF1dG8tY2xpY2sgZmFsbFx1MDBGMywgcmVxdWVyaXJcdTAwRTEgaW5pY2lvIG1hbnVhbCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgaW5pY2lhbGl6YXIgZWwgYm90ICh1c2FkYSB0YW50byBwYXJhIGF1dG8taW5pY2lvIGNvbW8gaW5pY2lvIG1hbnVhbClcbiAgICBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplQm90KGlzQXV0b0luaXQgPSBmYWxzZSkge1xuICAgICAgbG9nKCdcdUQ4M0VcdUREMTYgSW5pY2lhbGl6YW5kbyBBdXRvLUltYWdlLi4uJyk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmaWNhciBjb2xvcmVzIGRpc3BvbmlibGVzXG4gICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2UuY2hlY2tpbmdDb2xvcnMnKSwgJ2luZm8nKTtcbiAgICAgIGNvbnN0IGNvbG9ycyA9IGRldGVjdEF2YWlsYWJsZUNvbG9ycygpO1xuICAgICAgXG4gICAgICBpZiAoY29sb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2Uubm9Db2xvcnNGb3VuZCcpLCAnZXJyb3InKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBBbG1hY2VuYXIgY29sb3JlcyBkZXRlY3RhZG9zIGVuIGVsIGVzdGFkbyBnbG9iYWxcbiAgICAgIGltYWdlU3RhdGUuYXZhaWxhYmxlQ29sb3JzID0gY29sb3JzO1xuICAgICAgbG9nKGBcdTI3MDUgJHtjb2xvcnMubGVuZ3RofSBjb2xvcmVzIGFsbWFjZW5hZG9zIGVuIGVzdGFkbyBnbG9iYWxgKTtcbiAgICAgIFxuICAgICAgLy8gT2J0ZW5lciBpbmZvcm1hY2lcdTAwRjNuIGRlbCB1c3VhcmlvXG4gICAgICBjb25zdCBzZXNzaW9uSW5mbyA9IGF3YWl0IGdldFNlc3Npb24oKTtcbiAgICAgIGxldCB1c2VySW5mbyA9IG51bGw7XG4gICAgICBpZiAoc2Vzc2lvbkluZm8uc3VjY2VzcyAmJiBzZXNzaW9uSW5mby5kYXRhLnVzZXIpIHtcbiAgICAgICAgdXNlckluZm8gPSB7XG4gICAgICAgICAgdXNlcm5hbWU6IHNlc3Npb25JbmZvLmRhdGEudXNlci5uYW1lIHx8ICdBblx1MDBGM25pbW8nLFxuICAgICAgICAgIGNoYXJnZXM6IHNlc3Npb25JbmZvLmRhdGEuY2hhcmdlcyxcbiAgICAgICAgICBtYXhDaGFyZ2VzOiBzZXNzaW9uSW5mby5kYXRhLm1heENoYXJnZXMsXG4gICAgICAgICAgcGl4ZWxzOiBzZXNzaW9uSW5mby5kYXRhLnVzZXIucGl4ZWxzUGFpbnRlZCB8fCAwICAvLyBVc2FyIHBpeGVsc1BhaW50ZWQgZW4gbHVnYXIgZGUgcGl4ZWxzXG4gICAgICAgIH07XG4gICAgICAgIGN1cnJlbnRVc2VySW5mbyA9IHVzZXJJbmZvOyAvLyBBY3R1YWxpemFyIHZhcmlhYmxlIGdsb2JhbFxuICAgICAgICBpbWFnZVN0YXRlLmN1cnJlbnRDaGFyZ2VzID0gc2Vzc2lvbkluZm8uZGF0YS5jaGFyZ2VzO1xuICAgICAgICBpbWFnZVN0YXRlLm1heENoYXJnZXMgPSBzZXNzaW9uSW5mby5kYXRhLm1heENoYXJnZXMgfHwgOTk5OTsgLy8gR3VhcmRhciBtYXhDaGFyZ2VzIGVuIHN0YXRlXG4gICAgICAgIGxvZyhgXHVEODNEXHVEQzY0IFVzdWFyaW8gY29uZWN0YWRvOiAke3Nlc3Npb25JbmZvLmRhdGEudXNlci5uYW1lIHx8ICdBblx1MDBGM25pbW8nfSAtIENhcmdhczogJHt1c2VySW5mby5jaGFyZ2VzfS8ke3VzZXJJbmZvLm1heENoYXJnZXN9IC0gUFx1MDBFRHhlbGVzOiAke3VzZXJJbmZvLnBpeGVsc31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZygnXHUyNkEwXHVGRTBGIE5vIHNlIHB1ZG8gb2J0ZW5lciBpbmZvcm1hY2lcdTAwRjNuIGRlbCB1c3VhcmlvJyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGltYWdlU3RhdGUuYXZhaWxhYmxlQ29sb3JzID0gY29sb3JzO1xuICAgICAgaW1hZ2VTdGF0ZS5jb2xvcnNDaGVja2VkID0gdHJ1ZTtcbiAgICAgIFxuICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLmNvbG9yc0ZvdW5kJywgeyBjb3VudDogY29sb3JzLmxlbmd0aCB9KSwgJ3N1Y2Nlc3MnKTtcbiAgICAgIHVpLnVwZGF0ZVByb2dyZXNzKDAsIDAsIHVzZXJJbmZvKTtcbiAgICAgIFxuICAgICAgLy8gU29sbyBtb3N0cmFyIGxvZyB1bmEgdmV6IChldml0YXIgZHVwbGljYWRvIGVuIGF1dG8taW5pY2lvKVxuICAgICAgaWYgKCFpc0F1dG9Jbml0KSB7XG4gICAgICAgIGxvZyhgXHUyNzA1ICR7Y29sb3JzLmxlbmd0aH0gY29sb3JlcyBkaXNwb25pYmxlcyBkZXRlY3RhZG9zYCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIE1hcmNhciBjb21vIGluaWNpYWxpemFkbyBleGl0b3NhbWVudGUgcGFyYSBkZXNoYWJpbGl0YXIgZWwgYm90XHUwMEYzblxuICAgICAgdWkuc2V0SW5pdGlhbGl6ZWQodHJ1ZSk7XG4gICAgICBcbiAgICAgIC8vIEhhYmlsaXRhciBib3RvbmVzIGRlIHVwbG9hZCB5IGxvYWQgcHJvZ3Jlc3NcbiAgICAgIHVpLmVuYWJsZUJ1dHRvbnNBZnRlckluaXQoKTtcblxuICAgICAgLy8gSW5pY2lhbGl6YXIgcGxhbiBvdmVybGF5IHNpIHlhIGhheSBjb2xhIHByZXZpYSAocC5lai4gcmVhbnVkYWNpXHUwMEYzbilcbiAgICAgIHRyeSB7XG4gICAgLy8gUmVtb3ZlZCByZWZlcmVuY2VzIHRvIF9fV1BBX1BMQU5fT1ZFUkxBWV9fXG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gbm9vcFxuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgLy8gQ3JlYXIgaW50ZXJmYXogZGUgdXN1YXJpb1xuICBjb25zdCB1aSA9IGF3YWl0IGNyZWF0ZUltYWdlVUkoe1xuICAgICAgdGV4dHMsXG4gICAgICBcbiAgICAgIG9uQ29uZmlnQ2hhbmdlOiAoY29uZmlnKSA9PiB7XG4gICAgICAgIC8vIE1hbmVqYXIgY2FtYmlvcyBkZSBjb25maWd1cmFjaVx1MDBGM25cbiAgICAgICAgaWYgKGNvbmZpZy5waXhlbHNQZXJCYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW1hZ2VTdGF0ZS5waXhlbHNQZXJCYXRjaCA9IGNvbmZpZy5waXhlbHNQZXJCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLnVzZUFsbENoYXJnZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGltYWdlU3RhdGUudXNlQWxsQ2hhcmdlc0ZpcnN0ID0gY29uZmlnLnVzZUFsbENoYXJnZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLnBhaW50UGF0dGVybiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW1hZ2VTdGF0ZS5wYWludFBhdHRlcm4gPSBjb25maWcucGFpbnRQYXR0ZXJuO1xuICAgICAgICAgIGxvZyhgXHVEODNDXHVERkE4IFBhdHJcdTAwRjNuIGRlIHBpbnRhZG8gY2FtYmlhZG8gYTogJHtjb25maWcucGFpbnRQYXR0ZXJufWApO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNpIGhheSBwXHUwMEVEeGVsZXMgcmVzdGFudGVzLCByZWFwbGljYXIgZWwgcGF0clx1MDBGM25cbiAgICAgICAgICBpZiAoaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMgJiYgaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaW1wb3J0KCcuL3BhdHRlcm5zLmpzJykudGhlbigoeyBhcHBseVBhaW50UGF0dGVybiB9KSA9PiB7XG4gICAgICAgICAgICAgIGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzID0gYXBwbHlQYWludFBhdHRlcm4oXG4gICAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMsIFxuICAgICAgICAgICAgICAgIGNvbmZpZy5wYWludFBhdHRlcm4sIFxuICAgICAgICAgICAgICAgIGltYWdlU3RhdGUuaW1hZ2VEYXRhXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIG92ZXJsYXkgc2kgZXN0XHUwMEUxIGFjdGl2b1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuX19XUEFfUExBTl9PVkVSTEFZX18pIHtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zZXRQbGFuKGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLCB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5leHRCYXRjaENvdW50OiBpbWFnZVN0YXRlLnBpeGVsc1BlckJhdGNoXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGxvZyhgXHUyNzA1IE92ZXJsYXkgYWN0dWFsaXphZG8gY29uIG51ZXZvIHBhdHJcdTAwRjNuOiAke2NvbmZpZy5wYWludFBhdHRlcm59YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3IgYWN0dWFsaXphbmRvIG92ZXJsYXkgY29uIG51ZXZvIHBhdHJcdTAwRjNuOicsIGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgIGxvZygnXHUyNzRDIEVycm9yIGFwbGljYW5kbyBudWV2byBwYXRyXHUwMEYzbjonLCBlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9nKGBDb25maWd1cmFjaVx1MDBGM24gYWN0dWFsaXphZGE6YCwgY29uZmlnKTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIG9uSW5pdEJvdDogaW5pdGlhbGl6ZUJvdCxcbiAgICAgIFxuICAgICAgb25VcGxvYWRJbWFnZTogYXN5bmMgKGZpbGUpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2UubG9hZGluZ0ltYWdlJyksICdpbmZvJyk7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgaW1hZ2VVcmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcbiAgICAgICAgICBjb25zdCBwcm9jZXNzb3IgPSBuZXcgQmx1ZU1hcmJsZWxJbWFnZVByb2Nlc3NvcihpbWFnZVVybCk7XG4gICAgICAgICAgcHJvY2Vzc29yLm9yaWdpbmFsTmFtZSA9IGZpbGUubmFtZTtcbiAgICAgICAgICBcbiAgICAgICAgICBhd2FpdCBwcm9jZXNzb3IubG9hZCgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEluaWNpYWxpemFyIHBhbGV0YSBkZSBjb2xvcmVzIEJsdWUgTWFyYmxlXG4gICAgICAgICAgY29uc3QgYXZhaWxhYmxlQ29sb3JzID0gcHJvY2Vzc29yLmluaXRpYWxpemVDb2xvclBhbGV0dGUoKTtcbiAgICAgICAgICBpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycyA9IGF2YWlsYWJsZUNvbG9ycztcbiAgICAgICAgICAvLyBUb2xlcmFuY2lhIExBQiBwb3IgZGVmZWN0byBhaG9yYSAxMDAgKGludGVudGFyIHNpZW1wcmUgZWwgbVx1MDBFMXMgcHJcdTAwRjN4aW1vKVxuICAgICAgICAgIHByb2Nlc3Nvci5zZXRMYWJUb2xlcmFuY2UoMTAwKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBbmFsaXphciBwXHUwMEVEeGVsZXMgZGUgbGEgaW1hZ2VuXG4gICAgICAgICAgY29uc3QgYW5hbHlzaXNSZXN1bHQgPSBhd2FpdCBwcm9jZXNzb3IuYW5hbHl6ZVBpeGVscygpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEVzdGFibGVjZXIgY29vcmRlbmFkYXMgYmFzZSAoc2UgYWN0dWFsaXphclx1MDBFMW4gYWwgc2VsZWNjaW9uYXIgcG9zaWNpXHUwMEYzbilcbiAgICAgICAgICBwcm9jZXNzb3Iuc2V0Q29vcmRzKDAsIDAsIDAsIDApO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIE51ZXZvOiByZW1hcGVhciBpbm1lZGlhdGFtZW50ZSBhIHBpeGVsYXJ0IHkgZGVzY2FydGFyIG9yaWdpbmFsIHZpc3VhbCAobWFudGVuZXIgY29waWEgcGFyYSAnTW9zdHJhciBvcmlnaW5hbCcpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3Nvci5yZW1hcEltYWdlVG9QYWxldHRlKCk7XG4gICAgICAgICAgICBsb2coJ1x1MjcwNSBJbWFnZW4gcmVtYXBlYWRhIGEgcGFsZXRhIGF1dG9tXHUwMEUxdGljYW1lbnRlIHRyYXMgc3ViaXInKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2coJ1x1MjZBMFx1RkUwRiBFcnJvciByZW1hcGVhbmRvIGltYWdlbiB0cmFzIHN1YmlyIChjb250aW51YW5kbyBjb24gb3JpZ2luYWwpOicsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBPYnRlbmVyIGRhdG9zIGRlIGltYWdlbiBwcm9jZXNhZG9zXG4gICAgICAgICAgY29uc3QgcHJvY2Vzc2VkRGF0YSA9IHByb2Nlc3Nvci5nZXRJbWFnZURhdGEoKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpbWFnZVN0YXRlLmltYWdlRGF0YSA9IHByb2Nlc3NlZERhdGE7XG4gICAgICAgICAgaW1hZ2VTdGF0ZS5pbWFnZURhdGEucHJvY2Vzc29yID0gcHJvY2Vzc29yOyAvLyBHdWFyZGFyIHJlZmVyZW5jaWEgYWwgcHJvY2Vzc29yIHBhcmEgcmVzaXplXG4gICAgICAgICAgaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyA9IGFuYWx5c2lzUmVzdWx0LnJlcXVpcmVkUGl4ZWxzO1xuICAgICAgICAgIGltYWdlU3RhdGUucGFpbnRlZFBpeGVscyA9IDA7XG4gICAgICAgICAgaW1hZ2VTdGF0ZS5vcmlnaW5hbEltYWdlTmFtZSA9IGZpbGUubmFtZTtcbiAgICAgICAgICBpbWFnZVN0YXRlLmltYWdlTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICBcbiAgICAgICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2UuaW1hZ2VMb2FkZWQnLCB7IGNvdW50OiBhbmFseXNpc1Jlc3VsdC5yZXF1aXJlZFBpeGVscyB9KSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICB1aS51cGRhdGVQcm9ncmVzcygwLCBhbmFseXNpc1Jlc3VsdC5yZXF1aXJlZFBpeGVscywgY3VycmVudFVzZXJJbmZvKTtcbiAgICAgICAgICBcbiAgICAgICAgICBsb2coYFx1MjcwNSBbQkxVRSBNQVJCTEVdIEltYWdlbiBjYXJnYWRhOiAke3Byb2Nlc3NlZERhdGEud2lkdGh9eCR7cHJvY2Vzc2VkRGF0YS5oZWlnaHR9LCAke2FuYWx5c2lzUmVzdWx0LnJlcXVpcmVkUGl4ZWxzfSBwXHUwMEVEeGVsZXMgdlx1MDBFMWxpZG9zYCk7XG4gICAgICAgICAgbG9nKGBcdTI3MDUgW0JMVUUgTUFSQkxFXSBBblx1MDBFMWxpc2lzOiAke2FuYWx5c2lzUmVzdWx0LnVuaXF1ZUNvbG9yc30gY29sb3JlcyBcdTAwRkFuaWNvcywgJHthbmFseXNpc1Jlc3VsdC5kZWZhY2VQaXhlbHN9IHBcdTAwRUR4ZWxlcyAjZGVmYWNlYCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTGltcGlhciBVUkwgdGVtcG9yYWwgKGVsIG92ZXJsYXkgdXNhIHVuIGRhdGFVUkwgc2VwYXJhZG8pXG4gICAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwoaW1hZ2VVcmwpO1xuXG4gICAgICAgICAgLy8gQWN0aXZhciBvdmVybGF5IGRlIHBsYW4gYXV0b21cdTAwRTF0aWNhbWVudGUgY3VhbmRvIHNlIGNhcmdhIGltYWdlblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAod2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5pbmplY3RTdHlsZXMoKTtcbiAgICAgICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldEVuYWJsZWQodHJ1ZSk7IC8vIEFjdGl2YXIgYXV0b21cdTAwRTF0aWNhbWVudGVcbiAgICAgICAgICAgICAgLy8gQ29uZmlndXJhciBhbmNsYSBiYXNlIGNvbiBsYSBwb3NpY2lcdTAwRjNuIGRlbCB0aWxlIChzZXJcdTAwRTEgYWp1c3RhZGEgYWwgc2VsZWNjaW9uYXIgcG9zaWNpXHUwMEYzbilcbiAgICAgICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldFBsYW4oW10sIHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5leHRCYXRjaENvdW50OiAwXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBsb2coJ1x1MjcwNSBQbGFuIG92ZXJsYXkgYWN0aXZhZG8gYXV0b21cdTAwRTF0aWNhbWVudGUgYWwgY2FyZ2FyIGltYWdlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZygnXHUyNkEwXHVGRTBGIEVycm9yIGFjdGl2YW5kbyBwbGFuIG92ZXJsYXk6JywgZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5pbWFnZUVycm9yJyksICdlcnJvcicpO1xuICAgICAgICAgIGxvZygnXHUyNzRDIEVycm9yIGNhcmdhbmRvIGltYWdlbjonLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXG4gICAgICBvblNlbGVjdFBvc2l0aW9uOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5zZWxlY3RQb3NpdGlvbkFsZXJ0JyksICdpbmZvJyk7XG4gICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLndhaXRpbmdQb3NpdGlvbicpLCAnaW5mbycpO1xuICAgICAgICAgIFxuICAgICAgICAgIGltYWdlU3RhdGUuc2VsZWN0aW5nUG9zaXRpb24gPSB0cnVlO1xuICAgICAgICAgIGxldCBwb3NpdGlvbkNhcHR1cmVkID0gZmFsc2U7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTVx1MDBFOXRvZG8gMTogSW50ZXJjZXB0YXIgZmV0Y2ggKG1cdTAwRTl0b2RvIG9yaWdpbmFsIG1lam9yYWRvKVxuICAgICAgICAgIGNvbnN0IHNldHVwRmV0Y2hJbnRlcmNlcHRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuZmV0Y2ggPSBhc3luYyAodXJsLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgIC8vIFNvbG8gaW50ZXJjZXB0YXIgcmVxdWVzdHMgZXNwZWNcdTAwRURmaWNvcyBkZSBwaW50YWRvIGN1YW5kbyBlc3RhbW9zIHNlbGVjY2lvbmFuZG8gcG9zaWNpXHUwMEYzblxuICAgICAgICAgICAgICBpZiAoaW1hZ2VTdGF0ZS5zZWxlY3RpbmdQb3NpdGlvbiAmJiBcbiAgICAgICAgICAgICAgICAgICFwb3NpdGlvbkNhcHR1cmVkICYmXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgdXJsID09PSAnc3RyaW5nJyAmJiBcbiAgICAgICAgICAgICAgICAgIHVybC5pbmNsdWRlcygnL3MwL3BpeGVsLycpICYmIFxuICAgICAgICAgICAgICAgICAgb3B0aW9ucyAmJiBcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgbG9nKGBcdUQ4M0NcdURGQUYgSW50ZXJjZXB0YW5kbyByZXF1ZXN0IGRlIHBpbnRhZG86ICR7dXJsfWApO1xuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9yaWdpbmFsRmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rICYmIG9wdGlvbnMuYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYm9keURhdGE7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgYm9keURhdGEgPSBKU09OLnBhcnNlKG9wdGlvbnMuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsb2coJ0Vycm9yIHBhcnNlYW5kbyBib2R5IGRlbCByZXF1ZXN0OicsIHBhcnNlRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHlEYXRhLmNvb3JkcyAmJiBBcnJheS5pc0FycmF5KGJvZHlEYXRhLmNvb3JkcykgJiYgYm9keURhdGEuY29vcmRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYWxYID0gYm9keURhdGEuY29vcmRzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsWSA9IGJvZHlEYXRhLmNvb3Jkc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWVyIHRpbGUgZGUgbGEgVVJMIGRlIGZvcm1hIG1cdTAwRTFzIHJvYnVzdGFcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aWxlTWF0Y2ggPSB1cmwubWF0Y2goL1xcL3MwXFwvcGl4ZWxcXC8oLT9cXGQrKVxcLygtP1xcZCspLyk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbGVNYXRjaCAmJiAhcG9zaXRpb25DYXB0dXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25DYXB0dXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aWxlWCA9IHBhcnNlSW50KHRpbGVNYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aWxlWSA9IHBhcnNlSW50KHRpbGVNYXRjaFsyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEd1YXJkYXIgY29vcmRlbmFkYXMgdGlsZS9waXhlbFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS50aWxlWCA9IHRpbGVYO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS50aWxlWSA9IHRpbGVZO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uID0geyB4OiBsb2NhbFgsIHk6IGxvY2FsWSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS5zZWxlY3RpbmdQb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIGNvb3JkZW5hZGFzIGRlbCBwcm9jZXNhZG9yIEJsdWUgTWFyYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTdGF0ZS5pbWFnZURhdGEgJiYgaW1hZ2VTdGF0ZS5pbWFnZURhdGEucHJvY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NvciA9IGltYWdlU3RhdGUuaW1hZ2VEYXRhLnByb2Nlc3NvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yLnNldENvb3Jkcyh0aWxlWCwgdGlsZVksIGxvY2FsWCwgbG9jYWxZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXIgdGlsZXMgZGUgdGVtcGxhdGUgdW5hIHZleiBxdWUgdGVuZW1vcyBjb29yZGVuYWRhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHByb2Nlc3Nvci5jcmVhdGVUZW1wbGF0ZVRpbGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nKGBcdTI3MDUgW0JMVUUgTUFSQkxFXSBUZW1wbGF0ZSB0aWxlcyBjcmVhZG9zIHBhcmEgcG9zaWNpXHUwMEYzbiB0aWxlKCR7dGlsZVh9LCR7dGlsZVl9KSBwaXhlbCgke2xvY2FsWH0sJHtsb2NhbFl9KWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhgXHUyNzRDIFtCTFVFIE1BUkJMRV0gRXJyb3IgY3JlYW5kbyB0ZW1wbGF0ZSB0aWxlczogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWdlbmVyYXIgY29sYSBkZSBwXHUwMEVEeGVsZXMgY29uIGNvb3JkZW5hZGFzIGFjdHVhbGl6YWRhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwaXhlbFF1ZXVlID0gcHJvY2Vzc29yLmdlbmVyYXRlUGl4ZWxRdWV1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscyA9IHBpeGVsUXVldWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIHNvYnJlc2NyaWJpciB0b3RhbFBpeGVscyBzaSB5YSBmdWUgZXN0YWJsZWNpZG8gcG9yIGVsIGFuXHUwMEUxbGlzaXMgaW5pY2lhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWltYWdlU3RhdGUudG90YWxQaXhlbHMgfHwgaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlU3RhdGUudG90YWxQaXhlbHMgPSBwaXhlbFF1ZXVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nKGBcdTI3MDUgQ29sYSBkZSBwXHUwMEVEeGVsZXMgZ2VuZXJhZGE6ICR7cGl4ZWxRdWV1ZS5sZW5ndGh9IHBcdTAwRUR4ZWxlcyBwYXJhIG92ZXJsYXlgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uZmlndXJhciBvdmVybGF5IGRlbCBwbGFuIGNvbiBsYSBwb3NpY2lcdTAwRjNuIHNlbGVjY2lvbmFkYVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZJWDogRm9yemFyIHJlaW5pY2lvIGNvbXBsZXRvIGRlbCBvdmVybGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVzYWN0aXZhciBvdmVybGF5IHBhcmEgbGltcGlhciBlc3RhZG8gYW50ZXJpb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuX19XUEFfUExBTl9PVkVSTEFZX18uc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGltcGlhciBwbGFuIGFudGVyaW9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldFBsYW4oW10sIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnllY3RhciBlc3RpbG9zIHkgcmVhY3RpdmFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLmluamVjdFN0eWxlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zZXRFbmFibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbmZpZ3VyYXIgYW5jbGEgbFx1MDBGM2dpY2EgKHRpbGUvcGl4ZWwpIHBhcmEgcG9zaWNpb25hbWllbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldEFuY2hvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlWDogdGlsZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlWTogdGlsZVksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBweFg6IGxvY2FsWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB4WTogbG9jYWxZXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNhciBsYSBjb2xhIGRlIHBcdTAwRUR4ZWxlcyByZWdlbmVyYWRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzICYmIGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zZXRQbGFuKGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvcjogeyB0aWxlWDogdGlsZVgsIHRpbGVZOiB0aWxlWSwgcHhYOiBsb2NhbFgsIHB4WTogbG9jYWxZIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlV2lkdGg6IGltYWdlU3RhdGUuaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZUhlaWdodDogaW1hZ2VTdGF0ZS5pbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nKGBcdTI3MDUgUGxhbiBvdmVybGF5IHJlaW5pY2lhZG8geSBhbmNsYWRvIGVuIHRpbGUoJHt0aWxlWH0sJHt0aWxlWX0pIGxvY2FsKCR7bG9jYWxYfSwke2xvY2FsWX0pYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhgXHUyNkEwXHVGRTBGIE5vIGhheSBwXHUwMEVEeGVsZXMgcGFyYSBtb3N0cmFyIGVuIG92ZXJsYXlgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhgXHUyNzRDIEVycm9yIGNvbmZpZ3VyYW5kbyBvdmVybGF5OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc3RhdXJhciBmZXRjaCBvcmlnaW5hbCBpbm1lZGlhdGFtZW50ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdG9yZUZldGNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5wb3NpdGlvblNldCcpLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nKGBcdTI3MDUgUG9zaWNpXHUwMEYzbiBlc3RhYmxlY2lkYTogdGlsZSgke2ltYWdlU3RhdGUudGlsZVh9LCR7aW1hZ2VTdGF0ZS50aWxlWX0pIGxvY2FsKCR7bG9jYWxYfSwke2xvY2FsWX0pYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vc3RyYXIgZGlcdTAwRTFsb2dvIGRlbCBndWFyZCBkZXNwdVx1MDBFOXMgZGUgc2VsZWNjaW9uYXIgcG9zaWNpXHUwMEYzblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nKCdcdUQ4M0RcdURFRTFcdUZFMEYgTW9zdHJhbmRvIGRpXHUwMEUxbG9nbyBkZSBBdXRvLUd1YXJkLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlcldhbnRzR3VhcmQgPSBhd2FpdCBzaG93R3VhcmREaWFsb2coaW1hZ2VTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJXYW50c0d1YXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2coJ1x1MjcwNSBVc3VhcmlvIGFjZXB0XHUwMEYzIGdlbmVyYXIgSlNPTiBwYXJhIEF1dG8tR3VhcmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXIgZGF0b3MgY29tcGF0aWJsZXMgY29uIEF1dG8tR3VhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBndWFyZERhdGEgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1aS5nZW5lcmF0ZUd1YXJkSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWFyZERhdGEgPSB1aS5nZW5lcmF0ZUd1YXJkSlNPTigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZW5lcmF0ZUd1YXJkSlNPTiBubyBlc3RcdTAwRTEgZGlzcG9uaWJsZSBlbiBsYSBVSScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2F2ZUd1YXJkSlNPTihndWFyZERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2coJ1x1MjEzOVx1RkUwRiBVc3VhcmlvIGRlY2lkaVx1MDBGMyBubyBnZW5lcmFyIEpTT04gcGFyYSBBdXRvLUd1YXJkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZygnXHUyNzRDIEVycm9yIG1vc3RyYW5kbyBkaVx1MDBFMWxvZ28gZGUgQXV0by1HdWFyZDonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2coJ1x1MjZBMFx1RkUwRiBObyBzZSBwdWRvIGV4dHJhZXIgdGlsZSBkZSBsYSBVUkw6JywgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBsb2coJ1x1Mjc0QyBFcnJvciBpbnRlcmNlcHRhbmRvIHBpeGVsOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgIC8vIEVuIGNhc28gZGUgZXJyb3IsIHJlc3RhdXJhciBmZXRjaCB5IGNvbnRpbnVhciBjb24gZWwgb3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgIGlmICghcG9zaXRpb25DYXB0dXJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlRmV0Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIFBhcmEgdG9kb3MgbG9zIGRlbVx1MDBFMXMgcmVxdWVzdHMsIHVzYXIgZmV0Y2ggb3JpZ2luYWxcbiAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNXHUwMEU5dG9kbyAyOiBPYnNlcnZlciBkZSBjYW52YXMgcGFyYSBkZXRlY3RhciBjYW1iaW9zIHZpc3VhbGVzXG4gICAgICAgICAgY29uc3Qgc2V0dXBDYW52YXNPYnNlcnZlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhc0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnY2FudmFzJyk7XG4gICAgICAgICAgICBpZiAoY2FudmFzRWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIGxvZygnXHUyNkEwXHVGRTBGIE5vIHNlIGVuY29udHJhcm9uIGVsZW1lbnRvcyBjYW52YXMnKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsb2coYFx1RDgzRFx1RENDQSBDb25maWd1cmFuZG8gb2JzZXJ2ZXIgcGFyYSAke2NhbnZhc0VsZW1lbnRzLmxlbmd0aH0gY2FudmFzYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEVzY3VjaGFyIGV2ZW50b3MgZGUgY2xpY2sgZW4gZWwgZG9jdW1lbnRvIHBhcmEgZGV0ZWN0YXIgcGludGFkb1xuICAgICAgICAgICAgY29uc3QgY2xpY2tIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGlmICghaW1hZ2VTdGF0ZS5zZWxlY3RpbmdQb3NpdGlvbiB8fCBwb3NpdGlvbkNhcHR1cmVkKSByZXR1cm47XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgY2xpY2sgZnVlIGVuIHVuIGNhbnZhc1xuICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnRhZ05hbWUgPT09ICdDQU5WQVMnKSB7XG4gICAgICAgICAgICAgICAgbG9nKCdcdUQ4M0RcdUREQjFcdUZFMEYgQ2xpY2sgZGV0ZWN0YWRvIGVuIGNhbnZhcyBkdXJhbnRlIHNlbGVjY2lcdTAwRjNuJyk7XG4gICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXIgY29vcmRlbmFkYXMgQ1NTIHJlbGF0aXZhcyBhbCBjb250ZW5lZG9yIGRlbCBib2FyZCBwYXJhIGFuY2xhIENTU1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2NhbnZhcycpPy5wYXJlbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gYm9hcmQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjc3NYID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNzc1kgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XG4gICAgICAgICAgICAgICAgICBpZiAod2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zZXRBbmNob3JDc3MoY3NzWCwgY3NzWSk7XG4gICAgICAgICAgICAgICAgICAgIGxvZyhgUGxhbiBvdmVybGF5OiBhbmNsYSBDU1MgZXN0YWJsZWNpZGEgZW4gKCR7Y3NzWH0sICR7Y3NzWX0pYCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgbG9nKCdQbGFuIE92ZXJsYXk6IGVycm9yIGNhbGN1bGFuZG8gYW5jbGEgQ1NTJywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIERhciB0aWVtcG8gcGFyYSBxdWUgc2UgcHJvY2VzZSBlbCBwaW50YWRvXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIXBvc2l0aW9uQ2FwdHVyZWQgJiYgaW1hZ2VTdGF0ZS5zZWxlY3RpbmdQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBsb2coJ1x1RDgzRFx1REQwRCBCdXNjYW5kbyByZXF1ZXN0cyByZWNpZW50ZXMgZGUgcGludGFkby4uLicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBFbCBmZXRjaCBpbnRlcmNlcHRvciBtYW5lamFyXHUwMEUxIGxhIGNhcHR1cmFcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExpbXBpYXIgb2JzZXJ2ZXIgYWwgZmluYWxpemFyXG4gICAgICAgICAgICBpbWFnZVN0YXRlLmNsZWFudXBPYnNlcnZlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja0hhbmRsZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENvbmZpZ3VyYXIgYW1ib3MgbVx1MDBFOXRvZG9zXG4gICAgICAgICAgc2V0dXBGZXRjaEludGVyY2VwdGlvbigpO1xuICAgICAgICAgIHNldHVwQ2FudmFzT2JzZXJ2ZXIoKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBUaW1lb3V0IHBhcmEgc2VsZWNjaVx1MDBGM24gZGUgcG9zaWNpXHUwMEYzbiBjb24gY2xlYW51cCBtZWpvcmFkb1xuICAgICAgICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGltYWdlU3RhdGUuc2VsZWN0aW5nUG9zaXRpb24gJiYgIXBvc2l0aW9uQ2FwdHVyZWQpIHtcbiAgICAgICAgICAgICAgcmVzdG9yZUZldGNoKCk7XG4gICAgICAgICAgICAgIGlmIChpbWFnZVN0YXRlLmNsZWFudXBPYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIGltYWdlU3RhdGUuY2xlYW51cE9ic2VydmVyKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLnBvc2l0aW9uVGltZW91dCcpLCAnZXJyb3InKTtcbiAgICAgICAgICAgICAgbG9nKCdcdTIzRjAgVGltZW91dCBlbiBzZWxlY2NpXHUwMEYzbiBkZSBwb3NpY2lcdTAwRjNuJyk7XG4gICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDEyMDAwMCk7IC8vIDIgbWludXRvc1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEd1YXJkYXIgdGltZW91dCBwYXJhIHBvZGVyIGNhbmNlbGFybG9cbiAgICAgICAgICBpbWFnZVN0YXRlLnBvc2l0aW9uVGltZW91dElkID0gdGltZW91dElkO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIG9uU3RhcnRQYWludGluZzogYXN5bmMgKCkgPT4ge1xuICAvLyBBc2VndXJhciBmcCBqdXN0byBhbnRlcyBkZSBpbmljaWFyIGVsIHBpbnRhZG8gbWFudWFsL3VzdWFyaW9cbiAgLy8gTG9zIHRva2VucyB5YSBlc3RcdTAwRTFuIHByZXBhcmFkb3MgcG9yIHByZXBhcmVUb2tlbnNGb3JCb3RcbiAgICAgICAgLy8gRGVidWc6IHZlcmlmaWNhciBlc3RhZG8gYW50ZXMgZGUgdmFsaWRhclxuICAgICAgICBsb2coYFx1RDgzRFx1REQwRCBFc3RhZG8gcGFyYSBpbmljaWFyIHBpbnR1cmE6YCwge1xuICAgICAgICAgIGltYWdlTG9hZGVkOiBpbWFnZVN0YXRlLmltYWdlTG9hZGVkLFxuICAgICAgICAgIHN0YXJ0UG9zaXRpb246IGltYWdlU3RhdGUuc3RhcnRQb3NpdGlvbixcbiAgICAgICAgICB0aWxlWDogaW1hZ2VTdGF0ZS50aWxlWCxcbiAgICAgICAgICB0aWxlWTogaW1hZ2VTdGF0ZS50aWxlWSxcbiAgICAgICAgICB0b3RhbFBpeGVsczogaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyxcbiAgICAgICAgICByZW1haW5pbmdQaXhlbHM6IGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzPy5sZW5ndGggfHwgMFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGlmICghaW1hZ2VTdGF0ZS5pbWFnZUxvYWRlZCB8fCAhaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uKSB7XG4gICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLm1pc3NpbmdSZXF1aXJlbWVudHMnKSwgJ2Vycm9yJyk7XG4gICAgICAgICAgbG9nKGBcdTI3NEMgVmFsaWRhY2lcdTAwRjNuIGZhbGxpZGE6IGltYWdlTG9hZGVkPSR7aW1hZ2VTdGF0ZS5pbWFnZUxvYWRlZH0sIHN0YXJ0UG9zaXRpb249JHshIWltYWdlU3RhdGUuc3RhcnRQb3NpdGlvbn1gKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGltYWdlU3RhdGUucnVubmluZyA9IHRydWU7XG4gICAgICAgIGltYWdlU3RhdGUuc3RvcEZsYWcgPSBmYWxzZTtcbiAgICAgICAgLy8gU2llbXByZSByZXNldGVhciBmbGFnIGRlIHByaW1lcmEgcGFzYWRhIGN1YW5kbyBzZSBpbmljaWEgcGludGFkb1xuICAgICAgICAvLyBpbmRlcGVuZGllbnRlbWVudGUgZGUgc2kgZXMgbnVldm8gbyByZWFudWRhY2lcdTAwRjNuXG4gICAgICAgIGltYWdlU3RhdGUuaXNGaXJzdEJhdGNoID0gaW1hZ2VTdGF0ZS51c2VBbGxDaGFyZ2VzRmlyc3Q7IFxuXG4gICAgICAgIGxvZyhgXHVEODNEXHVERTgwIEluaWNpYW5kbyBwaW50YWRvIC0gaXNGaXJzdEJhdGNoOiAke2ltYWdlU3RhdGUuaXNGaXJzdEJhdGNofSwgdXNlQWxsQ2hhcmdlc0ZpcnN0OiAke2ltYWdlU3RhdGUudXNlQWxsQ2hhcmdlc0ZpcnN0fWApO1xuICAgICAgICBcbiAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLnN0YXJ0UGFpbnRpbmdNc2cnKSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgcHJvY2Vzc0ltYWdlKFxuICAgICAgICAgICAgaW1hZ2VTdGF0ZS5pbWFnZURhdGEsXG4gICAgICAgICAgICBpbWFnZVN0YXRlLnN0YXJ0UG9zaXRpb24sXG4gICAgICAgICAgICAvLyBvblByb2dyZXNzIC0gYWhvcmEgaW5jbHV5ZSB0aWVtcG8gZXN0aW1hZG9cbiAgICAgICAgICAgIChwYWludGVkLCB0b3RhbCwgbWVzc2FnZSwgZXN0aW1hdGVkVGltZSkgPT4ge1xuICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIGNhcmdhcyBlbiB1c2VySW5mbyBzaSBleGlzdGVcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRVc2VySW5mbykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VySW5mby5jaGFyZ2VzID0gTWF0aC5mbG9vcihpbWFnZVN0YXRlLmN1cnJlbnRDaGFyZ2VzKTtcbiAgICAgICAgICAgICAgICBpZiAoZXN0aW1hdGVkVGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50VXNlckluZm8uZXN0aW1hdGVkVGltZSA9IGVzdGltYXRlZFRpbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB1aS51cGRhdGVQcm9ncmVzcyhwYWludGVkLCB0b3RhbCwgY3VycmVudFVzZXJJbmZvKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIEFjdHVhbGl6YXIgZGlzcGxheSBkZSBjb29sZG93biBzaSBoYXkgY29vbGRvd24gYWN0aXZvXG4gICAgICAgICAgICAgIGlmIChpbWFnZVN0YXRlLmluQ29vbGRvd24gJiYgaW1hZ2VTdGF0ZS5uZXh0QmF0Y2hDb29sZG93biA+IDApIHtcbiAgICAgICAgICAgICAgICB1aS51cGRhdGVDb29sZG93bkRpc3BsYXkoaW1hZ2VTdGF0ZS5uZXh0QmF0Y2hDb29sZG93bik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWkudXBkYXRlQ29vbGRvd25EaXNwbGF5KDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIC8vIFVzYXIgZnVuY2lcdTAwRjNuIG9wdGltaXphZGEgcGFyYSBtZW5zYWplcyBkZSBjb29sZG93biBwYXJhIGV2aXRhciBwYXJwYWRlb1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdcdTIzRjMnKSAmJiBpbWFnZVN0YXRlLmluQ29vbGRvd24pIHtcbiAgICAgICAgICAgICAgICAgIHVpLnVwZGF0ZUNvb2xkb3duTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdWkuc2V0U3RhdHVzKG1lc3NhZ2UsICdpbmZvJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5wYWludGluZ1Byb2dyZXNzJywgeyBwYWludGVkLCB0b3RhbCB9KSwgJ2luZm8nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIG9uQ29tcGxldGVcbiAgICAgICAgICAgIChjb21wbGV0ZWQsIHBpeGVsc1BhaW50ZWQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5wYWludGluZ0NvbXBsZXRlJywgeyBjb3VudDogcGl4ZWxzUGFpbnRlZCB9KSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICBjbGVhclByb2dyZXNzKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLnBhaW50aW5nU3RvcHBlZCcpLCAnd2FybmluZycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGltYWdlU3RhdGUucnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIG9uRXJyb3JcbiAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2UucGFpbnRpbmdFcnJvcicpLCAnZXJyb3InKTtcbiAgICAgICAgICAgICAgbG9nKCdcdTI3NEMgRXJyb3IgZW4gcHJvY2VzbyBkZSBwaW50YWRvOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgdHJ5IHsgcmVwb3J0RXJyb3IoU3RyaW5nKGVycm9yPy5tZXNzYWdlIHx8IGVycm9yKSwgeyBib3RWYXJpYW50OiAnYXV0by1pbWFnZScgfSk7IH0gY2F0Y2gge31cbiAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgIC8vIE5vIHJlc2V0ZWFyIGFxdVx1MDBFRCBwYXJhIHBlcm1pdGlyIHJlaW50ZW50b3MgcXVlIGNvbnRpblx1MDBGQWVuIGVsIGRlbHRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2UucGFpbnRpbmdFcnJvcicpLCAnZXJyb3InKTtcbiAgICAgICAgICBsb2coJ1x1Mjc0QyBFcnJvciBpbmljaWFuZG8gcGludGFkbzonLCBlcnJvcik7XG4gICAgICAgICAgaW1hZ2VTdGF0ZS5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXG4gICAgICBvblN0b3BQYWludGluZzogYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9ncmVzc0luZm8gPSBnZXRQcm9ncmVzc0luZm8oKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwcm9ncmVzc0luZm8uaGFzUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBjb25zdCBzaG91bGRTYXZlID0gYXdhaXQgc2hvd0NvbmZpcm1EaWFsb2coXG4gICAgICAgICAgICB0KCdpbWFnZS5jb25maXJtU2F2ZVByb2dyZXNzJyksXG4gICAgICAgICAgICB0KCdpbWFnZS5zYXZlUHJvZ3Jlc3NUaXRsZScpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzYXZlOiB0KCdpbWFnZS5zYXZlUHJvZ3Jlc3MnKSxcbiAgICAgICAgICAgICAgZGlzY2FyZDogdCgnaW1hZ2UuZGlzY2FyZFByb2dyZXNzJyksXG4gICAgICAgICAgICAgIGNhbmNlbDogdCgnaW1hZ2UuY2FuY2VsJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChzaG91bGRTYXZlID09PSAnc2F2ZScpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHNhdmVQcm9ncmVzcygpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5wcm9ncmVzc1NhdmVkJywgeyBmaWxlbmFtZTogcmVzdWx0LmZpbGVuYW1lIH0pLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLnByb2dyZXNzU2F2ZUVycm9yJywgeyBlcnJvcjogcmVzdWx0LmVycm9yIH0pLCAnZXJyb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZFNhdmUgPT09ICdjYW5jZWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vIGRldGVuZXJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHN0b3BQYWludGluZygpO1xuICAgICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2UucGFpbnRpbmdTdG9wcGVkJyksICd3YXJuaW5nJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgb25TYXZlUHJvZ3Jlc3M6IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc2F2ZVByb2dyZXNzKCk7XG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5wcm9ncmVzc1NhdmVkJywgeyBmaWxlbmFtZTogcmVzdWx0LmZpbGVuYW1lIH0pLCAnc3VjY2VzcycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5wcm9ncmVzc1NhdmVFcnJvcicsIHsgZXJyb3I6IHJlc3VsdC5lcnJvciB9KSwgJ2Vycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWNjZXNzO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgb25Mb2FkUHJvZ3Jlc3M6IGFzeW5jIChmaWxlKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbG9hZFByb2dyZXNzKGZpbGUpO1xuICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLnByb2dyZXNzTG9hZGVkJywgeyBwYWludGVkOiByZXN1bHQucGFpbnRlZCwgdG90YWw6IHJlc3VsdC50b3RhbCB9KSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIHVpLnVwZGF0ZVByb2dyZXNzKHJlc3VsdC5wYWludGVkLCByZXN1bHQudG90YWwsIGN1cnJlbnRVc2VySW5mbyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFjdHVhbGl6YXIgbGEgaW50ZXJmYXogY29uIGxvcyB2YWxvcmVzIGNhcmdhZG9zXG4gICAgICAgICAgICB1aS51cGRhdGVVSUZyb21TdGF0ZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBIYWJpbGl0YXIgYm90b25lcyBkZXNwdVx1MDBFOXMgZGUgY2FyZ2FyIHByb2dyZXNvIGV4aXRvc2FtZW50ZVxuICAgICAgICAgICAgLy8gTm8gZXMgbmVjZXNhcmlvIHN1YmlyIGltYWdlbiBuaSBzZWxlY2Npb25hciBwb3NpY2lcdTAwRjNuIGRlIG51ZXZvXG4gICAgICAgICAgICBsb2coJ1x1MjcwNSBQcm9ncmVzbyBjYXJnYWRvIC0gaGFiaWxpdGFuZG8gYm90b25lcyBkZSBpbmljaW8nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5wcm9ncmVzc0xvYWRFcnJvcicsIHsgZXJyb3I6IHJlc3VsdC5lcnJvciB9KSwgJ2Vycm9yJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5wcm9ncmVzc0xvYWRFcnJvcicsIHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSksICdlcnJvcicpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFxuXG4gICAgICBcbiAgICAgIG9uUmVzaXplSW1hZ2U6ICgpID0+IHtcbiAgICAgICAgaWYgKGltYWdlU3RhdGUuaW1hZ2VMb2FkZWQgJiYgaW1hZ2VTdGF0ZS5pbWFnZURhdGEgJiYgaW1hZ2VTdGF0ZS5pbWFnZURhdGEucHJvY2Vzc29yKSB7XG4gICAgICAgICAgdWkuc2hvd1Jlc2l6ZURpYWxvZyhpbWFnZVN0YXRlLmltYWdlRGF0YS5wcm9jZXNzb3IpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXG4gICAgICBvbkNvbmZpcm1SZXNpemU6IGFzeW5jIChwcm9jZXNzb3IsIG5ld1dpZHRoLCBuZXdIZWlnaHQsIHNlbGVjdGVkQ29sb3JzKSA9PiB7XG4gICAgICAgIGxvZyhgXHVEODNEXHVERDA0IFJlZGltZW5zaW9uYW5kbyBpbWFnZW4gZGUgJHtwcm9jZXNzb3IuZ2V0RGltZW5zaW9ucygpLndpZHRofXgke3Byb2Nlc3Nvci5nZXREaW1lbnNpb25zKCkuaGVpZ2h0fSBhICR7bmV3V2lkdGh9eCR7bmV3SGVpZ2h0fWApO1xuICAgICAgICBsb2coYFx1RDgzQ1x1REZBOCBDb2xvcmVzIHNlbGVjY2lvbmFkb3M6ICR7c2VsZWN0ZWRDb2xvcnMgPyBzZWxlY3RlZENvbG9ycy5sZW5ndGggOiAndG9kb3MnfWApO1xuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBSZWRpbWVuc2lvbmFyIGxhIGltYWdlbiB1c2FuZG8gQmx1ZSBNYXJibGVcbiAgICAgICAgICBhd2FpdCBwcm9jZXNzb3IucmVzaXplKG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEFjdHVhbGl6YXIgY29sb3JlcyBzZWxlY2Npb25hZG9zIHNpIHNlIHByb3BvcmNpb25hcm9uXG4gICAgICAgICAgaWYgKHNlbGVjdGVkQ29sb3JzICYmIHNlbGVjdGVkQ29sb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ29sb3JPYmplY3RzID0gaW1hZ2VTdGF0ZS5hdmFpbGFibGVDb2xvcnMuZmlsdGVyKGNvbG9yID0+IFxuICAgICAgICAgICAgICBzZWxlY3RlZENvbG9ycy5pbmNsdWRlcyhjb2xvci5pZClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwcm9jZXNzb3Iuc2V0U2VsZWN0ZWRDb2xvcnMoc2VsZWN0ZWRDb2xvck9iamVjdHMpO1xuICAgICAgICAgICAgbG9nKGBcdUQ4M0NcdURGQTggUGFsZXRhIGFjdHVhbGl6YWRhIGNvbiAke3NlbGVjdGVkQ29sb3JzLmxlbmd0aH0gY29sb3JlcyBzZWxlY2Npb25hZG9zYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEltcG9ydGFudGU6IHJlbWFwZWFyIGxhIGltYWdlbiBhbCBlc3RhZG8gYWN0dWFsIGRlIHBhbGV0YS90b2xlcmFuY2lhIHBhcmEgcXVlIGVsIG92ZXJsYXlcbiAgICAgICAgICAvLyBzZSBiYXNlIGVuIGVsIHJlc3VsdGFkbyBmaW5hbCBkZWwgcHJvY2VzYWRvciAobm8gZW4gbGEgaW1hZ2VuIG9yaWdpbmFsKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3IucmVtYXBJbWFnZVRvUGFsZXR0ZSgpO1xuICAgICAgICAgICAgbG9nKCdcdTI3MDUgSW1hZ2VuIHJlbWFwZWFkYSB0cmFzIHJlZGltZW5zaW9uYWRvL3NlbGVjY2lcdTAwRjNuIGFudGVzIGRlIGdlbmVyYXIgb3ZlcmxheScpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZygnXHUyNkEwXHVGRTBGIEVycm9yIHJlbWFwZWFuZG8gaW1hZ2VuIHRyYXMgcmVkaW1lbnNpb25hZG86JywgZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIFJlYW5hbGl6YXIgaW1hZ2VuIGNvbiBudWV2byB0YW1hXHUwMEYxbyB1c2FuZG8gQmx1ZSBNYXJibGUgKHlhIHJlbWFwZWFkYSlcbiAgICAgICAgICBjb25zdCBhbmFseXNpc1Jlc3VsdCA9IGF3YWl0IHByb2Nlc3Nvci5hbmFseXplUGl4ZWxzKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQWN0dWFsaXphciBpbWFnZVN0YXRlIGNvbiByZXN1bHRhZG9zIGRlIEJsdWUgTWFyYmxlXG4gICAgICAgICAgaW1hZ2VTdGF0ZS5pbWFnZURhdGEgPSB7XG4gICAgICAgICAgICBwcm9jZXNzb3I6IHByb2Nlc3NvcixcbiAgICAgICAgICAgIHdpZHRoOiBuZXdXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogbmV3SGVpZ2h0LFxuICAgICAgICAgICAgLy8gTWFudGVuZXIgY29tcGF0aWJpbGlkYWQ6IHVzYXIgcmVxdWlyZWRQaXhlbHMgY29tbyB2YWxpZFBpeGVsQ291bnRcbiAgICAgICAgICAgIHZhbGlkUGl4ZWxDb3VudDogYW5hbHlzaXNSZXN1bHQucmVxdWlyZWRQaXhlbHMsXG4gICAgICAgICAgICByZXF1aXJlZFBpeGVsczogYW5hbHlzaXNSZXN1bHQucmVxdWlyZWRQaXhlbHMsXG4gICAgICAgICAgICB0b3RhbFBpeGVsczogYW5hbHlzaXNSZXN1bHQudG90YWxQaXhlbHNcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIGltYWdlU3RhdGUudG90YWxQaXhlbHMgPSBhbmFseXNpc1Jlc3VsdC5yZXF1aXJlZFBpeGVscztcbiAgICAgICAgICBpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHMgPSAwO1xuICAgICAgICAgIGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzID0gW107IC8vIFJlc2V0ZWFyIGNvbGEgYWwgcmVkaW1lbnNpb25hclxuICAgICAgICAgIGltYWdlU3RhdGUubGFzdFBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQWN0dWFsaXphciBVSVxuICAgICAgICAgIHVpLnVwZGF0ZVByb2dyZXNzKDAsIGFuYWx5c2lzUmVzdWx0LnJlcXVpcmVkUGl4ZWxzLCBjdXJyZW50VXNlckluZm8pO1xuICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5yZXNpemVTdWNjZXNzJywgeyB3aWR0aDogbmV3V2lkdGgsIGhlaWdodDogbmV3SGVpZ2h0IH0pLCAnc3VjY2VzcycpO1xuICAgICAgICAgIFxuICAgICAgICAgIGxvZyhgXHUyNzA1IEltYWdlbiByZWRpbWVuc2lvbmFkYTogJHthbmFseXNpc1Jlc3VsdC5yZXF1aXJlZFBpeGVsc30gcFx1MDBFRHhlbGVzIHZcdTAwRTFsaWRvcyBkZSAke2FuYWx5c2lzUmVzdWx0LnRvdGFsUGl4ZWxzfSB0b3RhbGVzYCk7XG5cbiAgICAgICAgICAvLyBZYSBubyBlcyBuZWNlc2FyaW8gc2VsZWNjaW9uYXIgcG9zaWNpXHUwMEYzbiBudWV2YW1lbnRlIGRlc3B1XHUwMEU5cyBkZWwgcmVzaXplXG4gICAgICAgICAgaWYgKGltYWdlU3RhdGUuc3RhcnRQb3NpdGlvbiAmJiBpbWFnZVN0YXRlLnRpbGVYICE9IG51bGwgJiYgaW1hZ2VTdGF0ZS50aWxlWSAhPSBudWxsKSB7XG4gICAgICAgICAgICBsb2coJ1x1RDgzRFx1RENDRCBNYW50ZW5pZW5kbyBwb3NpY2lcdTAwRjNuIHByZXZpYW1lbnRlIHNlbGVjY2lvbmFkYSB0cmFzIGVsIHJlZGltZW5zaW9uYWRvJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZygnXHUyMTM5XHVGRTBGIE5vIGhheSBwb3NpY2lcdTAwRjNuIHByZXZpYSBlc3RhYmxlY2lkYTsgcG9kclx1MDBFMXMgc2VsZWNjaW9uYXIgdW5hIGN1YW5kbyBsbyBkZXNlZXMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBY3R1YWxpemFyIG92ZXJsYXkgc2kgeWEgaGF5IHBvc2ljaVx1MDBGM24gc2VsZWNjaW9uYWRhXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuX19XUEFfUExBTl9PVkVSTEFZX18gJiYgaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uICYmIGltYWdlU3RhdGUudGlsZVggIT0gbnVsbCAmJiBpbWFnZVN0YXRlLnRpbGVZICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gUmVnZW5lcmFyIHRlbXBsYXRlIHRpbGVzIGNvbiBudWV2byB0YW1hXHUwMEYxb1xuICAgICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3IuY3JlYXRlVGVtcGxhdGVUaWxlcygpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gUmVnZW5lcmFyIGNvbGEgZGUgcFx1MDBFRHhlbGVzIGNvbiBCbHVlIE1hcmJsZVxuICAgICAgICAgICAgICBjb25zdCBwaXhlbFF1ZXVlID0gcHJvY2Vzc29yLmdlbmVyYXRlUGl4ZWxRdWV1ZSgpO1xuICAgICAgICAgICAgICBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscyA9IHBpeGVsUXVldWU7XG4gICAgICAgICAgICAgIC8vIEV2aXRhciBzb2JyZXNjcmliaXIgdG90YWxQaXhlbHMgYXF1XHUwMEVEOyB5YSBmdWUgZXN0YWJsZWNpZG8gcG9yIGVsIGFuXHUwMEUxbGlzaXMgYW50ZXJpb3JcbiAgICAgICAgICAgICAgLy8gTWFudGVuZXIgaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyBiYXNhZG8gZW4gcmVxdWlyZWRQaXhlbHMgcGFyYSB1biBwcm9ncmVzbyBjb25zaXN0ZW50ZVxuICAgICAgICAgICAgICAvLyBpZiAoIWltYWdlU3RhdGUudG90YWxQaXhlbHMgfHwgaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyA9PT0gMCkge1xuICAgICAgICAgICAgICAvLyAgIGltYWdlU3RhdGUudG90YWxQaXhlbHMgPSBwaXhlbFF1ZXVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gQWN0dWFsaXphciBvdmVybGF5IGNvbiBudWV2YSBjb2xhXG4gICAgICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zZXRQbGFuKHBpeGVsUXVldWUsIHtcbiAgICAgICAgICAgICAgICBhbmNob3I6IHsgXG4gICAgICAgICAgICAgICAgICB0aWxlWDogaW1hZ2VTdGF0ZS50aWxlWCwgXG4gICAgICAgICAgICAgICAgICB0aWxlWTogaW1hZ2VTdGF0ZS50aWxlWSwgXG4gICAgICAgICAgICAgICAgICBweFg6IGltYWdlU3RhdGUuc3RhcnRQb3NpdGlvbi54LCBcbiAgICAgICAgICAgICAgICAgIHB4WTogaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uLnkgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbWFnZVdpZHRoOiBuZXdXaWR0aCxcbiAgICAgICAgICAgICAgICBpbWFnZUhlaWdodDogbmV3SGVpZ2h0LFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBsb2coYFx1MjcwNSBPdmVybGF5IGFjdHVhbGl6YWRvIGNvbiAke3BpeGVsUXVldWUubGVuZ3RofSBwXHUwMEVEeGVsZXMgZGVzcHVcdTAwRTlzIGRlbCByZXNpemVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChvdmVybGF5RXJyb3IpIHtcbiAgICAgICAgICAgIGxvZyhgXHUyNkEwXHVGRTBGIEVycm9yIGFjdHVhbGl6YW5kbyBvdmVybGF5IGRlc3B1XHUwMEU5cyBkZWwgcmVzaXplOiAke292ZXJsYXlFcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBsb2coYFx1Mjc0QyBFcnJvciByZWRpbWVuc2lvbmFuZG8gaW1hZ2VuOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLmltYWdlRXJyb3InKSwgJ2Vycm9yJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcbiAgICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIG9idGVuZXIgY29sb3JlcyBkaXNwb25pYmxlc1xuICAgICAgZ2V0QXZhaWxhYmxlQ29sb3JzOiAoKSA9PiB7XG4gICAgICAgIGlmIChpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycyAmJiBpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIGltYWdlU3RhdGUuYXZhaWxhYmxlQ29sb3JzO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBGYWxsYmFjazogaW50ZW50YXIgZGV0ZWN0YXIgY29sb3JlcyBlbiB0aWVtcG8gcmVhbFxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNvbG9ycyA9IGRldGVjdEF2YWlsYWJsZUNvbG9ycygpO1xuICAgICAgICAgIGltYWdlU3RhdGUuYXZhaWxhYmxlQ29sb3JzID0gY29sb3JzO1xuICAgICAgICAgIHJldHVybiBjb2xvcnM7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3Igb2J0ZW5pZW5kbyBjb2xvcmVzIGRpc3BvbmlibGVzOicsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcbiAgICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIG1hbmVqYXIgY2FtYmlvcyBlbiBsYSBzZWxlY2NpXHUwMEYzbiBkZSBjb2xvcmVzXG4gICAgICBvbkNvbG9yU2VsZWN0aW9uQ2hhbmdlOiAoc2VsZWN0ZWRDb2xvcklkcykgPT4ge1xuICAgICAgICBsb2coYFx1RDgzQ1x1REZBOCBTZWxlY2NpXHUwMEYzbiBkZSBjb2xvcmVzIGNhbWJpYWRhOiAke3NlbGVjdGVkQ29sb3JJZHMubGVuZ3RofSBjb2xvcmVzIHNlbGVjY2lvbmFkb3NgKTtcbiAgICAgICAgLy8gRXN0YSBpbmZvcm1hY2lcdTAwRjNuIHNlIHVzYXJcdTAwRTEgZW4gb25Db25maXJtUmVzaXplXG4gICAgICB9LFxuICAgICAgXG4gICAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSBnZW5lcmFyIEpTT04gY29tcGF0aWJsZSBjb24gQXV0by1HdWFyZC5qc1xuICAgICAgZ2VuZXJhdGVHdWFyZEpTT046ICgpID0+IHtcbiAgICAgICAgaWYgKCFpbWFnZVN0YXRlLmltYWdlTG9hZGVkIHx8ICFpbWFnZVN0YXRlLmltYWdlRGF0YSB8fCAhaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uIHx8IGltYWdlU3RhdGUudGlsZVggPT0gbnVsbCB8fCBpbWFnZVN0YXRlLnRpbGVZID09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdG9zIGluc3VmaWNpZW50ZXMgcGFyYSBnZW5lcmFyIEpTT04gZGVsIEd1YXJkLiBBc2VnXHUwMEZBcmF0ZSBkZSBoYWJlciBjYXJnYWRvIHVuYSBpbWFnZW4geSBzZWxlY2Npb25hZG8gdW5hIHBvc2ljaVx1MDBGM24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByb2Nlc3NvciA9IGltYWdlU3RhdGUuaW1hZ2VEYXRhLnByb2Nlc3NvcjtcbiAgICAgICAgaWYgKCFwcm9jZXNzb3IpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2Nlc2Fkb3IgZGUgaW1hZ2VuIG5vIGRpc3BvbmlibGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENhbGN1bGFyIFx1MDBFMXJlYSBkZSBwcm90ZWNjaVx1MDBGM24gYmFzYWRhIGVuIGxhIGltYWdlbiB5IHBvc2ljaVx1MDBGM25cbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBpbWFnZVN0YXRlLmltYWdlRGF0YTtcbiAgICAgICAgY29uc3QgeyB4OiBzdGFydFgsIHk6IHN0YXJ0WSB9ID0gaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uO1xuICAgICAgICBjb25zdCB7IHRpbGVYLCB0aWxlWSB9ID0gaW1hZ2VTdGF0ZTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnZlcnRpciBjb29yZGVuYWRhcyBsb2NhbGVzIGEgY29vcmRlbmFkYXMgZ2xvYmFsZXMgZGVsIGNhbnZhc1xuICAgICAgICBjb25zdCBnbG9iYWxTdGFydFggPSAodGlsZVggKiAxMDAwKSArIHN0YXJ0WDtcbiAgICAgICAgY29uc3QgZ2xvYmFsU3RhcnRZID0gKHRpbGVZICogMTAwMCkgKyBzdGFydFk7XG4gICAgICAgIGNvbnN0IGdsb2JhbEVuZFggPSBnbG9iYWxTdGFydFggKyB3aWR0aCAtIDE7XG4gICAgICAgIGNvbnN0IGdsb2JhbEVuZFkgPSBnbG9iYWxTdGFydFkgKyBoZWlnaHQgLSAxO1xuICAgICAgICBcbiAgICAgICAgLy8gR2VuZXJhciBUT0RPUyBsb3MgcFx1MDBFRHhlbGVzIGRlIGxhIGltYWdlbiAobm8gc29sbyBsb3MgcmVzdGFudGVzKVxuICAgICAgICBjb25zdCBhbGxQaXhlbHMgPSBwcm9jZXNzb3IuZ2VuZXJhdGVQaXhlbFF1ZXVlKCk7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsUGl4ZWxzID0gW107XG4gICAgICAgIFxuICAgICAgICAvLyBIZWxwZXIgcGFyYSBub3JtYWxpemFyIG1vZHVsbyBwb3NpdGl2byAwLi45OTlcbiAgICAgICAgY29uc3QgbW9kMTAwMCA9ICh2KSA9PiAoKHYgJSAxMDAwKSArIDEwMDApICUgMTAwMDtcbiAgICAgICAgY29uc3QgZ2V0Q29sb3JJZCA9IChyZ2IpID0+IHtcbiAgICAgICAgICAvLyBJbnRlbnRhciBvYnRlbmVyIGlkIGRpcmVjdGFtZW50ZSwgbyByZXNvbHZlciBwb3IgY29pbmNpZGVuY2lhIGV4YWN0YSBkZSBSR0IgZW4gbGEgcGFsZXRhIGRpc3BvbmlibGVcbiAgICAgICAgICBpZiAocmdiICYmIHR5cGVvZiByZ2IuaWQgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gcmdiLmlkO1xuICAgICAgICAgIGNvbnN0IHBhbGV0dGUgPSBpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycyB8fCBbXTtcbiAgICAgICAgICBjb25zdCBmb3VuZCA9IHBhbGV0dGUuZmluZChjID0+IGMuciA9PT0gcmdiLnIgJiYgYy5nID09PSByZ2IuZyAmJiBjLmIgPT09IHJnYi5iKTtcbiAgICAgICAgICByZXR1cm4gZm91bmQgPyBmb3VuZC5pZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhbGxQaXhlbHMgJiYgYWxsUGl4ZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBhbGxQaXhlbHMuZm9yRWFjaChwaXhlbCA9PiB7XG4gICAgICAgICAgICAvLyBDb29yZGVuYWRhcyBnbG9iYWxlcyBwYXJhIGVsIEd1YXJkXG4gICAgICAgICAgICBjb25zdCBweEdsb2JhbFggPSAodHlwZW9mIHBpeGVsLmdsb2JhbFggPT09ICdudW1iZXInKSA/IHBpeGVsLmdsb2JhbFggOiAoKHRpbGVYICogMTAwMCkgKyBzdGFydFggKyBwaXhlbC5pbWFnZVgpO1xuICAgICAgICAgICAgY29uc3QgcHhHbG9iYWxZID0gKHR5cGVvZiBwaXhlbC5nbG9iYWxZID09PSAnbnVtYmVyJykgPyBwaXhlbC5nbG9iYWxZIDogKCh0aWxlWSAqIDEwMDApICsgc3RhcnRZICsgcGl4ZWwuaW1hZ2VZKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke3B4R2xvYmFsWH0sJHtweEdsb2JhbFl9YDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2FsY3VsYXIgdGlsZS9sb2NhbCBwb3IgcFx1MDBFRHhlbCAocHJlZmVyaXIgbG9zIHByb3Zpc3RvcyBwb3IgZWwgZ2VuZXJhZG9yIHNpIGV4aXN0ZW4pXG4gICAgICAgICAgICBjb25zdCBweFRpbGVYID0gKHR5cGVvZiBwaXhlbC50aWxlWCA9PT0gJ251bWJlcicpID8gcGl4ZWwudGlsZVggOiBNYXRoLmZsb29yKHB4R2xvYmFsWCAvIDEwMDApO1xuICAgICAgICAgICAgY29uc3QgcHhUaWxlWSA9ICh0eXBlb2YgcGl4ZWwudGlsZVkgPT09ICdudW1iZXInKSA/IHBpeGVsLnRpbGVZIDogTWF0aC5mbG9vcihweEdsb2JhbFkgLyAxMDAwKTtcbiAgICAgICAgICAgIGNvbnN0IHB4TG9jYWxYID0gKHR5cGVvZiBwaXhlbC5sb2NhbFggPT09ICdudW1iZXInKSA/IHBpeGVsLmxvY2FsWCA6IG1vZDEwMDAocHhHbG9iYWxYKTtcbiAgICAgICAgICAgIGNvbnN0IHB4TG9jYWxZID0gKHR5cGVvZiBwaXhlbC5sb2NhbFkgPT09ICdudW1iZXInKSA/IHBpeGVsLmxvY2FsWSA6IG1vZDEwMDAocHhHbG9iYWxZKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcmdiID0gcGl4ZWwuY29sb3IgfHwgcGl4ZWwudGFyZ2V0Q29sb3IgfHwge307XG4gICAgICAgICAgICBjb25zdCBjb2xvcklkID0gZ2V0Q29sb3JJZChyZ2IpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBvcmlnaW5hbFBpeGVscy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAvLyBDb2xvcmVzIGVuIG5pdmVsIHN1cGVyaW9yIChmb3JtYXRvIGVzcGVyYWRvIHBvciBHdWFyZClcbiAgICAgICAgICAgICAgcjogcmdiLnIsXG4gICAgICAgICAgICAgIGc6IHJnYi5nLFxuICAgICAgICAgICAgICBiOiByZ2IuYixcbiAgICAgICAgICAgICAgY29sb3JJZDogdHlwZW9mIGNvbG9ySWQgIT09ICd1bmRlZmluZWQnID8gY29sb3JJZCA6IG51bGwsXG4gICAgICAgICAgICAgIC8vIE1ldGFkYXRvcyBkZSBjb29yZGVuYWRhcyAoY29tcGF0aWJsZXMgY29uIEd1YXJkKVxuICAgICAgICAgICAgICBnbG9iYWxYOiBweEdsb2JhbFgsXG4gICAgICAgICAgICAgIGdsb2JhbFk6IHB4R2xvYmFsWSxcbiAgICAgICAgICAgICAgbG9jYWxYOiBweExvY2FsWCxcbiAgICAgICAgICAgICAgbG9jYWxZOiBweExvY2FsWSxcbiAgICAgICAgICAgICAgdGlsZVg6IHB4VGlsZVgsXG4gICAgICAgICAgICAgIHRpbGVZOiBweFRpbGVZXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZXN0cnVjdHVyYSBKU09OIGNvbXBhdGlibGUgY29uIEd1YXJkXG4gICAgICAgIGNvbnN0IGd1YXJkRGF0YSA9IHtcbiAgICAgICAgICB2ZXJzaW9uOiBcIjEuMFwiLFxuICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICBwcm90ZWN0aW9uRGF0YToge1xuICAgICAgICAgICAgYXJlYToge1xuICAgICAgICAgICAgICB4MTogZ2xvYmFsU3RhcnRYLFxuICAgICAgICAgICAgICB5MTogZ2xvYmFsU3RhcnRZLFxuICAgICAgICAgICAgICB4MjogZ2xvYmFsRW5kWCxcbiAgICAgICAgICAgICAgeTI6IGdsb2JhbEVuZFlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm90ZWN0ZWRQaXhlbHM6IG9yaWdpbmFsUGl4ZWxzLmxlbmd0aCxcbiAgICAgICAgICAgIHNwbGl0SW5mbzogbnVsbCAvLyBObyBkaXZpZGlyIHBvciBkZWZlY3RvXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcm9ncmVzczoge1xuICAgICAgICAgICAgdG90YWxSZXBhaXJlZDogMCxcbiAgICAgICAgICAgIGxhc3RDaGVjazogRGF0ZS5ub3coKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICBtYXhQcm90ZWN0aW9uU2l6ZTogMTAwMDAwLFxuICAgICAgICAgICAgcGl4ZWxzUGVyQmF0Y2g6IDUwLFxuICAgICAgICAgICAgY2hlY2tJbnRlcnZhbDogMTAwMDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbG9yczogKGltYWdlU3RhdGUuYXZhaWxhYmxlQ29sb3JzIHx8IFtdKS5tYXAoY29sb3IgPT4gKHtcbiAgICAgICAgICAgIGlkOiBjb2xvci5pZCxcbiAgICAgICAgICAgIHI6IGNvbG9yLnIsXG4gICAgICAgICAgICBnOiBjb2xvci5nLFxuICAgICAgICAgICAgYjogY29sb3IuYlxuICAgICAgICAgIH0pKSxcbiAgICAgICAgICAvLyBJTVBPUlRBTlRFOiBlbCBmb3JtYXRvIGRlYmUgY29pbmNpZGlyIGNvbiBzYXZlLWxvYWQuanMgZGVsIEd1YXJkXG4gICAgICAgICAgb3JpZ2luYWxQaXhlbHM6IG9yaWdpbmFsUGl4ZWxzXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBsb2coYFx1MjcwNSBKU09OIGRlbCBHdWFyZCBnZW5lcmFkbzogXHUwMEUxcmVhICgke2dsb2JhbFN0YXJ0WH0sJHtnbG9iYWxTdGFydFl9KSBhICgke2dsb2JhbEVuZFh9LCR7Z2xvYmFsRW5kWX0pLCAke29yaWdpbmFsUGl4ZWxzLmxlbmd0aH0gcFx1MDBFRHhlbGVzIGRlICR7YWxsUGl4ZWxzPy5sZW5ndGggfHwgMH0gdG90YWxlc2ApO1xuICAgICAgICAgcmV0dXJuIGd1YXJkRGF0YTtcbiAgICAgICB9XG4gICAgICAgXG4gICAgICAgLy8gTGFzIGZ1bmNpb25lcyBzaG93R3VhcmREaWFsb2cgeSBzYXZlR3VhcmRKU09OIGFob3JhIHNlIGltcG9ydGFuIGRlc2RlIHNhZmUtZ3VhcmQtd2luZG93LmpzXG4gICAgfSk7XG5cbiAgICAvLyBFc2N1Y2hhciBjYW1iaW9zIGRlIGlkaW9tYSBkZXNkZSBlbCBsYXVuY2hlclxuICAgIGNvbnN0IGhhbmRsZUxhdW5jaGVyTGFuZ3VhZ2VDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHsgbGFuZ3VhZ2UgfSA9IGV2ZW50LmRldGFpbDtcbiAgICAgIGxvZyhgXHVEODNDXHVERjBEIEltYWdlbjogRGV0ZWN0YWRvIGNhbWJpbyBkZSBpZGlvbWEgZGVzZGUgbGF1bmNoZXI6ICR7bGFuZ3VhZ2V9YCk7XG4gICAgICBcbiAgICAgIC8vIEFjdHVhbGl6YXIgZXN0YWRvIGRlbCBpZGlvbWFcbiAgICAgIGltYWdlU3RhdGUubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgICAgIFxuICAgICAgLy8gQXF1XHUwMEVEIHNlIHBvZHJcdTAwRURhIGFcdTAwRjFhZGlyIGxcdTAwRjNnaWNhIGFkaWNpb25hbCBwYXJhIGFjdHVhbGl6YXIgbGEgVUlcbiAgICAgIC8vIFBvciBlamVtcGxvLCBhY3R1YWxpemFyIHRleHRvcyBkaW5cdTAwRTFtaWNvcywgcmUtcmVuZGVyaXphciBlbGVtZW50b3MsIGV0Yy5cbiAgICB9O1xuICAgIFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsYXVuY2hlckxhbmd1YWdlQ2hhbmdlZCcsIGhhbmRsZUxhdW5jaGVyTGFuZ3VhZ2VDaGFuZ2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsYW5ndWFnZUNoYW5nZWQnLCBoYW5kbGVMYXVuY2hlckxhbmd1YWdlQ2hhbmdlKTtcblxuICAgIC8vIENsZWFudXAgYWwgY2VycmFyIGxhIHBcdTAwRTFnaW5hXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsICgpID0+IHtcbiAgICAgIC8vIFJlc3RhdXJhciBmZXRjaCBvcmlnaW5hbCBzaSBlc3RcdTAwRTEgaW50ZXJjZXB0YWRvXG4gICAgICByZXN0b3JlRmV0Y2goKTtcbiAgICAgIFxuICAgICAgc3RvcFBhaW50aW5nKCk7XG4gICAgICB1aS5kZXN0cm95KCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGF1bmNoZXJMYW5ndWFnZUNoYW5nZWQnLCBoYW5kbGVMYXVuY2hlckxhbmd1YWdlQ2hhbmdlKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsYW5ndWFnZUNoYW5nZWQnLCBoYW5kbGVMYXVuY2hlckxhbmd1YWdlQ2hhbmdlKTtcbiAgICAgIGlmICh3aW5kb3cuX193cGxhY2VCb3QpIHtcbiAgICAgICAgd2luZG93Ll9fd3BsYWNlQm90LmltYWdlUnVubmluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbWNmZyA9IGdldE1ldHJpY3NDb25maWcoKTtcbiAgICAgICAgaWYgKG1jZmcuRU5BQkxFRCAmJiB3aW5kb3cuX193cGxhY2VNZXRyaWNzPy5pbWFnZVNlc3Npb25BY3RpdmUpIHtcbiAgICAgICAgICBzZXNzaW9uRW5kKHsgYm90VmFyaWFudDogJ2F1dG8taW1hZ2UnIH0pO1xuICAgICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuaW1hZ2VTZXNzaW9uQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvdy5fX3dwbGFjZU1ldHJpY3M/LmltYWdlUGluZ0ludGVydmFsKSB7XG4gICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwod2luZG93Ll9fd3BsYWNlTWV0cmljcy5pbWFnZVBpbmdJbnRlcnZhbCk7XG4gICAgICAgICAgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5pbWFnZVBpbmdJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvdy5fX3dwbGFjZU1ldHJpY3M/LmltYWdlVmlzaWJpbGl0eUhhbmRsZXIpIHtcbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5pbWFnZVZpc2liaWxpdHlIYW5kbGVyKTtcbiAgICAgICAgICBkZWxldGUgd2luZG93Ll9fd3BsYWNlTWV0cmljcy5pbWFnZVZpc2liaWxpdHlIYW5kbGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cuX193cGxhY2VNZXRyaWNzPy5pbWFnZUZvY3VzSGFuZGxlcikge1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuaW1hZ2VGb2N1c0hhbmRsZXIpO1xuICAgICAgICAgIGRlbGV0ZSB3aW5kb3cuX193cGxhY2VNZXRyaWNzLmltYWdlRm9jdXNIYW5kbGVyO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHt9XG4gICAgfSk7XG5cbiAgICBsb2coJ1x1MjcwNSBBdXRvLUltYWdlIGluaWNpYWxpemFkbyBjb3JyZWN0YW1lbnRlJyk7XG4gICAgXG4gICAgLy8gQ29uc2lkZXJhciBhbCB1c3VhcmlvIG9ubGluZSBhdW5xdWUgZXN0XHUwMEU5IG9jaW9zbzogcGluZyBhbCByZWN1cGVyYXIgdmlzaWJpbGlkYWQvZm9jb1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtY2ZnID0gZ2V0TWV0cmljc0NvbmZpZygpO1xuICAgICAgaWYgKG1jZmcuRU5BQkxFRCkge1xuICAgICAgICBjb25zdCB2aXNpYmlsaXR5SGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoIWRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgdHJ5IHsgc2Vzc2lvblBpbmcoeyBib3RWYXJpYW50OiAnYXV0by1pbWFnZScsIG1ldGFkYXRhOiB7IHJlYXNvbjogJ3Zpc2liaWxpdHknIH0gfSk7IH0gY2F0Y2gge31cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZvY3VzSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICB0cnkgeyBzZXNzaW9uUGluZyh7IGJvdFZhcmlhbnQ6ICdhdXRvLWltYWdlJywgbWV0YWRhdGE6IHsgcmVhc29uOiAnZm9jdXMnIH0gfSk7IH0gY2F0Y2gge31cbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHZpc2liaWxpdHlIYW5kbGVyKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZm9jdXNIYW5kbGVyKTtcbiAgICAgICAgd2luZG93Ll9fd3BsYWNlTWV0cmljcyA9IHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MgfHwge307XG4gICAgICAgIHdpbmRvdy5fX3dwbGFjZU1ldHJpY3MuaW1hZ2VWaXNpYmlsaXR5SGFuZGxlciA9IHZpc2liaWxpdHlIYW5kbGVyO1xuICAgICAgICB3aW5kb3cuX193cGxhY2VNZXRyaWNzLmltYWdlRm9jdXNIYW5kbGVyID0gZm9jdXNIYW5kbGVyO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge31cblxuICAgIC8vIEludGVudGFyIGF1dG8taW5pY2lvIGRlc3B1XHUwMEU5cyBkZSBxdWUgbGEgVUkgZXN0XHUwMEU5IGxpc3RhXG4gICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2UuYXV0b0luaXRpYWxpemluZycpLCAnaW5mbycpO1xuICAgICAgICBsb2coJ1x1RDgzRVx1REQxNiBJbnRlbnRhbmRvIGF1dG8taW5pY2lvLi4uJyk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBhdXRvSW5pdFN1Y2Nlc3MgPSBhd2FpdCB0cnlBdXRvSW5pdCgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGF1dG9Jbml0U3VjY2Vzcykge1xuICAgICAgICAgIHVpLnNldFN0YXR1cyh0KCdpbWFnZS5hdXRvSW5pdFN1Y2Nlc3MnKSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICBsb2coJ1x1MjcwNSBBdXRvLWluaWNpbyBleGl0b3NvJyk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gT2N1bHRhciBlbCBib3RcdTAwRjNuIGRlIGluaWNpYWxpemFjaVx1MDBGM24gbWFudWFsXG4gICAgICAgICAgdWkuc2V0SW5pdEJ1dHRvblZpc2libGUoZmFsc2UpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEVqZWN1dGFyIGxhIGxcdTAwRjNnaWNhIGRlIGluaWNpYWxpemFjaVx1MDBGM24gZGVsIGJvdFxuICAgICAgICAgIGNvbnN0IGluaXRSZXN1bHQgPSBhd2FpdCBpbml0aWFsaXplQm90KHRydWUpOyAvLyB0cnVlID0gZXMgYXV0by1pbmljaW9cbiAgICAgICAgICBpZiAoaW5pdFJlc3VsdCkge1xuICAgICAgICAgICAgbG9nKCdcdUQ4M0RcdURFODAgQm90IGF1dG8taW5pY2lhZG8gY29tcGxldGFtZW50ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1aS5zZXRTdGF0dXModCgnaW1hZ2UuYXV0b0luaXRGYWlsZWQnKSwgJ3dhcm5pbmcnKTtcbiAgICAgICAgICBsb2coJ1x1MjZBMFx1RkUwRiBBdXRvLWluaWNpbyBmYWxsXHUwMEYzLCBzZSByZXF1aWVyZSBpbmljaW8gbWFudWFsJyk7XG4gICAgICAgICAgLy8gRWwgYm90XHUwMEYzbiBkZSBpbmljaW8gbWFudWFsIHBlcm1hbmVjZSB2aXNpYmxlXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZygnXHUyNzRDIEVycm9yIGVuIGF1dG8taW5pY2lvOicsIGVycm9yKTtcbiAgICAgICAgdWkuc2V0U3RhdHVzKHQoJ2ltYWdlLm1hbnVhbEluaXRSZXF1aXJlZCcpLCAnd2FybmluZycpO1xuICAgICAgfVxuICAgIH0sIDEwMDApOyAvLyBFc3BlcmFyIDEgc2VndW5kbyBwYXJhIHF1ZSBsYSBVSSBlc3RcdTAwRTkgY29tcGxldGFtZW50ZSBjYXJnYWRhXG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nKCdcdTI3NEMgRXJyb3IgaW5pY2lhbGl6YW5kbyBBdXRvLUltYWdlOicsIGVycm9yKTtcbiAgICBpZiAod2luZG93Ll9fd3BsYWNlQm90KSB7XG4gICAgICB3aW5kb3cuX193cGxhY2VCb3QuaW1hZ2VSdW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG4iLCAiLy8gPT09IFtQcm9jZXNhZG9yIGRlIGltXHUwMEUxZ2VuZXMgYmFzYWRvIGVuIEJsdWUgTWFyYmxlXSA9PT1cbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuLi9jb3JlL2xvZ2dlci5qc1wiO1xuaW1wb3J0IHsgQ29sb3JVdGlscyB9IGZyb20gXCIuL2NvbG9yLXV0aWxzLmpzXCI7XG5cbi8qKlxuICogUHJvY2VzYWRvciBkZSBpbVx1MDBFMWdlbmVzIGNvbiBhcnF1aXRlY3R1cmEgQmx1ZSBNYXJibGVcbiAqIE1hbmVqYSBjaHVua2luZyBlbiB0aWxlcywgZmFjdG9yIGRlIGVzY2FsYWRvLCB5IHNpc3RlbWEgZGUgY29vcmRlbmFkYXMgY29tcGF0aWJsZVxuICovXG5leHBvcnQgY2xhc3MgQmx1ZU1hcmJsZWxJbWFnZVByb2Nlc3NvciB7XG4gIGNvbnN0cnVjdG9yKGltYWdlU3JjKSB7XG4gICAgdGhpcy5pbWFnZVNyYyA9IGltYWdlU3JjO1xuICAgIHRoaXMuaW1nID0gbmV3IHdpbmRvdy5JbWFnZSgpO1xuICAgIHRoaXMub3JpZ2luYWxOYW1lID0gbnVsbDtcbiAgICBcbiAgICAvLyBDb25maWd1cmFjaVx1MDBGM24gQmx1ZSBNYXJibGVcbiAgICB0aGlzLnRpbGVTaXplID0gMTAwMDsgLy8gVGFtYVx1MDBGMW8gZGUgdGlsZSBlbiBwXHUwMEVEeGVsZXMgKGNvbW8gQmx1ZSBNYXJibGUpXG4gICAgdGhpcy5kcmF3TXVsdCA9IDM7IC8vIEZhY3RvciBkZSBlc2NhbGFkbyAoREVCRSBzZXIgaW1wYXIpXG4gICAgdGhpcy5zaHJlYWRTaXplID0gMzsgLy8gQWxpYXMgcGFyYSBkcmF3TXVsdCBwYXJhIGNvbXBhdGliaWxpZGFkXG4gICAgXG4gICAgLy8gRXN0YWRvIGRlbCBwcm9jZXNhbWllbnRvXG4gICAgdGhpcy5iaXRtYXAgPSBudWxsO1xuICAgIHRoaXMuaW1hZ2VXaWR0aCA9IDA7XG4gICAgdGhpcy5pbWFnZUhlaWdodCA9IDA7XG4gICAgdGhpcy50b3RhbFBpeGVscyA9IDA7XG4gICAgdGhpcy5yZXF1aXJlZFBpeGVsQ291bnQgPSAwO1xuICAgIHRoaXMuZGVmYWNlUGl4ZWxDb3VudCA9IDA7XG4gICAgdGhpcy5jb2xvclBhbGV0dGUgPSB7fTtcbiAgICB0aGlzLmFsbG93ZWRDb2xvcnNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5yZ2JUb01ldGEgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5jb29yZHMgPSBbMCwgMCwgMCwgMF07IC8vIFt0aWxlWCwgdGlsZVksIHBpeGVsWCwgcGl4ZWxZXVxuICAgIHRoaXMudGVtcGxhdGVUaWxlcyA9IHt9O1xuICAgIHRoaXMudGVtcGxhdGVUaWxlc0J1ZmZlcnMgPSB7fTtcbiAgICB0aGlzLnRpbGVQcmVmaXhlcyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnNlbGVjdGVkQ29sb3JzID0gbnVsbDsgLy8gQ29sb3JlcyBzZWxlY2Npb25hZG9zIHBvciBlbCB1c3VhcmlvXG4gICAgLy8gQ29waWFzIGNvbXBsZXRhcyBwYXJhIHJlc3RhdXJhciBjdWFuZG8gbm8gaGF5IHNlbGVjY2lcdTAwRjNuXG4gICAgdGhpcy5hbGxTaXRlQ29sb3JzID0gW107XG4gICAgdGhpcy5pbml0aWFsQWxsb3dlZENvbG9yc1NldCA9IG51bGw7XG4gICAgLy8gUGFsZXRhIGRlIGNvbG9yZXMgZGlzcG9uaWJsZXMgcGFyYSBtYXRjaGluZyBkZSBjZXJjYW5cdTAwRURhXG4gICAgdGhpcy5hbGxvd2VkQ29sb3JzID0gW107XG4gIC8vIE51ZXZvOiB0b2xlcmFuY2lhIExBQiB5IGJhY2t1cHNcbiAgdGhpcy5sYWJUb2xlcmFuY2UgPSAxMDA7IC8vIHRvbGVyYW5jaWEgTEFCIHBvciBkZWZlY3RvIChpbnRlbnRhIHNpZW1wcmUgZWwgbVx1MDBFMXMgcHJcdTAwRjN4aW1vKVxuICB0aGlzLm9yaWdpbmFsQml0bWFwID0gbnVsbDsgLy8gY29waWEgc2luIHByb2Nlc2FyXG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmltZy5vbmxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5iaXRtYXAgPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcCh0aGlzLmltZyk7XG4gICAgICAgICAgdGhpcy5vcmlnaW5hbEJpdG1hcCA9IHRoaXMuYml0bWFwOyAvLyBtYW50ZW5lciByZWZlcmVuY2lhIG9yaWdpbmFsXG4gICAgICAgICAgdGhpcy5pbWFnZVdpZHRoID0gdGhpcy5iaXRtYXAud2lkdGg7XG4gICAgICAgICAgdGhpcy5pbWFnZUhlaWdodCA9IHRoaXMuYml0bWFwLmhlaWdodDtcbiAgICAgICAgICB0aGlzLnRvdGFsUGl4ZWxzID0gdGhpcy5pbWFnZVdpZHRoICogdGhpcy5pbWFnZUhlaWdodDtcbiAgICAgICAgICBcbiAgICAgICAgICBsb2coYFtCTFVFIE1BUkJMRV0gSW1hZ2VuIGNhcmdhZGE6ICR7dGhpcy5pbWFnZVdpZHRofVx1MDBENyR7dGhpcy5pbWFnZUhlaWdodH1gKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuaW1nLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICB0aGlzLmltZy5zcmMgPSB0aGlzLmltYWdlU3JjO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0TGFiVG9sZXJhbmNlKGRpc3RhbmNlKSB7XG4gICAgdGhpcy5sYWJUb2xlcmFuY2UgPSBOdW1iZXIuaXNGaW5pdGUoZGlzdGFuY2UpID8gTWF0aC5tYXgoMCwgZGlzdGFuY2UpIDogSW5maW5pdHk7XG4gIH1cblxuICBnZW5lcmF0ZU9yaWdpbmFsUHJldmlldyhtYXhXaWR0aCA9IDIwMCwgbWF4SGVpZ2h0ID0gMjAwKSB7XG4gICAgLy8gUHJldmlldyBkZSBsYSBpbWFnZW4gb3JpZ2luYWwgc2luIHJlbWFwZWFyXG4gICAgaWYgKCF0aGlzLm9yaWdpbmFsQml0bWFwKSByZXR1cm4gdGhpcy5nZW5lcmF0ZVByZXZpZXcobWF4V2lkdGgsIG1heEhlaWdodCk7XG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3QgeyB3aWR0aDogb3JpZ1dpZHRoLCBoZWlnaHQ6IG9yaWdIZWlnaHQgfSA9IHRoaXMub3JpZ2luYWxCaXRtYXA7XG4gICAgY29uc3QgYXNwZWN0UmF0aW8gPSBvcmlnV2lkdGggLyBvcmlnSGVpZ2h0O1xuICAgIGxldCBuZXdXaWR0aCwgbmV3SGVpZ2h0O1xuICAgIGlmIChtYXhXaWR0aCAvIG1heEhlaWdodCA+IGFzcGVjdFJhdGlvKSB7XG4gICAgICBuZXdIZWlnaHQgPSBtYXhIZWlnaHQ7IG5ld1dpZHRoID0gbWF4SGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgfSBlbHNlIHsgbmV3V2lkdGggPSBtYXhXaWR0aDsgbmV3SGVpZ2h0ID0gbWF4V2lkdGggLyBhc3BlY3RSYXRpbzsgfVxuICAgIGNhbnZhcy53aWR0aCA9IG5ld1dpZHRoOyBjYW52YXMuaGVpZ2h0ID0gbmV3SGVpZ2h0OyBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgY3R4LmRyYXdJbWFnZSh0aGlzLm9yaWdpbmFsQml0bWFwLCAwLCAwLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTtcbiAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaWNpYWxpemEgbGEgcGFsZXRhIGRlIGNvbG9yZXMgZGVzZGUgV1BsYWNlIChjb21vIEJsdWUgTWFyYmxlKVxuICAgKi9cbiAgaW5pdGlhbGl6ZUNvbG9yUGFsZXR0ZSgpIHtcbiAgICBsb2coJ1tCTFVFIE1BUkJMRV0gSW5pY2lhbGl6YW5kbyBwYWxldGEgZGUgY29sb3Jlcy4uLicpO1xuICAgIFxuICAgIC8vIFVzYXIgbGEgZnVuY2lcdTAwRjNuIGltcG9ydGFkYSBkZXRlY3RBdmFpbGFibGVDb2xvcnMgcXVlIGRldnVlbHZlIGVsIGZvcm1hdG8gY29ycmVjdG9cbiAgICBjb25zdCBhdmFpbGFibGVDb2xvcnMgPSBkZXRlY3RBdmFpbGFibGVDb2xvcnMoKTtcbiAgICBcbiAgICAvLyBDb25zdHJ1aXIgY29uanVudG8gZGUgY29sb3JlcyBwZXJtaXRpZG9zXG4gICAgY29uc3QgZmlsdGVyZWRDb2xvcnMgPSBhdmFpbGFibGVDb2xvcnNcbiAgICAgIC5maWx0ZXIoYyA9PiBjLmlkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGMuciA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGMuZyA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGMuYiA9PT0gJ251bWJlcicpO1xuICAgIFxuICAgIHRoaXMuYWxsb3dlZENvbG9yc1NldCA9IG5ldyBTZXQoXG4gICAgICBmaWx0ZXJlZENvbG9ycy5tYXAoYyA9PiBgJHtjLnJ9LCR7Yy5nfSwke2MuYn1gKVxuICAgICk7XG4gICAgXG4gICAgLy8gQXNlZ3VyYXIgcXVlICNkZWZhY2UgKG1hcmNhZG9yIGRlIHRyYW5zcGFyZW5jaWEpIHNlIHRyYXRlIGNvbW8gcGVybWl0aWRvXG4gICAgY29uc3QgZGVmYWNlS2V5ID0gJzIyMiwyNTAsMjA2JztcbiAgICB0aGlzLmFsbG93ZWRDb2xvcnNTZXQuYWRkKGRlZmFjZUtleSk7XG5cbiAgICAvLyBNYXBlYXIgUkdCIGEgbWV0YWRhdG9zXG4gICAgdGhpcy5yZ2JUb01ldGEgPSBuZXcgTWFwKFxuICAgICAgZmlsdGVyZWRDb2xvcnMubWFwKGMgPT4gW1xuICAgICAgICBgJHtjLnJ9LCR7Yy5nfSwke2MuYn1gLCBcbiAgICAgICAgeyBcbiAgICAgICAgICBpZDogYy5pZCwgXG4gICAgICAgICAgcHJlbWl1bTogISFjLnByZW1pdW0sIFxuICAgICAgICAgIG5hbWU6IGMubmFtZSB8fCBgQ29sb3IgJHtjLmlkfWAgXG4gICAgICAgIH1cbiAgICAgIF0pXG4gICAgKTtcblxuICAgIC8vIE1hcGVhciAjZGVmYWNlIGEgVHJhbnNwYXJlbnQgcGFyYSBVSSAodXNhciBJRCAwIGNvbW8gZmFsbGJhY2spXG4gICAgdGhpcy5yZ2JUb01ldGEuc2V0KGRlZmFjZUtleSwgeyBcbiAgICAgIGlkOiAwLCBcbiAgICAgIHByZW1pdW06IGZhbHNlLCBcbiAgICAgIG5hbWU6ICdUcmFuc3BhcmVudCcgXG4gICAgfSk7XG5cbiAgICAvLyBHdWFyZGFyIGNvcGlhcyBwYXJhIHJlc3RhdXJhY2lcdTAwRjNuIHkgbWF0Y2hpbmcgZGUgY2VyY2FuXHUwMEVEYVxuICAgIHRoaXMuYWxsU2l0ZUNvbG9ycyA9IGZpbHRlcmVkQ29sb3JzLm1hcChjID0+ICh7IHI6IGMuciwgZzogYy5nLCBiOiBjLmIsIGlkOiBjLmlkLCBuYW1lOiBjLm5hbWUsIHByZW1pdW06ICEhYy5wcmVtaXVtIH0pKTtcbiAgICB0aGlzLmluaXRpYWxBbGxvd2VkQ29sb3JzU2V0ID0gbmV3IFNldCh0aGlzLmFsbG93ZWRDb2xvcnNTZXQpO1xuICAgIHRoaXMuYWxsb3dlZENvbG9ycyA9IFsuLi50aGlzLmFsbFNpdGVDb2xvcnNdO1xuXG4gICAgbG9nKGBbQkxVRSBNQVJCTEVdIFBhbGV0YSBpbmljaWFsaXphZGE6ICR7dGhpcy5hbGxvd2VkQ29sb3JzU2V0LnNpemV9IGNvbG9yZXMgcGVybWl0aWRvc2ApO1xuICAgIHJldHVybiBBcnJheS5mcm9tKGF2YWlsYWJsZUNvbG9ycyk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0YSBjb2xvcmVzIGRpc3BvbmlibGVzIGRlbCBzaXRpbyAodmVyc2lcdTAwRjNuIG1lam9yYWRhIGRlIEJsdWUgTWFyYmxlKVxuICAgKi9cbiAgZGV0ZWN0U2l0ZUNvbG9ycygpIHtcbiAgICBjb25zdCBjb2xvckVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2lkXj1cImNvbG9yLVwiXScpO1xuICAgIGNvbnN0IGNvbG9ycyA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjb2xvckVsZW1lbnRzKSB7XG4gICAgICBjb25zdCBpZFN0ciA9IGVsZW1lbnQuaWQucmVwbGFjZSgnY29sb3ItJywgJycpO1xuICAgICAgY29uc3QgaWQgPSBwYXJzZUludChpZFN0cik7XG4gICAgICBcbiAgICAgIC8vIEZpbHRyYXIgZWxlbWVudG9zIGNvbiBTVkcgKHByb2JhYmxlbWVudGUgYmxvcXVlb3MpXG4gICAgICBpZiAoZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzdmcnKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gRmlsdHJhciBzb2xvIGVsIGNvbG9yIDAgKG1hbnRlbmVyIGVsIGNvbG9yIGJsYW5jbyBJRCA1IGRpc3BvbmlibGUpXG4gICAgICBpZiAoaWQgPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIE9idGVuZXIgY29sb3IgUkdCIGRlbCBzdHlsZVxuICAgICAgY29uc3QgYmFja2dyb3VuZFN0eWxlID0gZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICBpZiAoYmFja2dyb3VuZFN0eWxlKSB7XG4gICAgICAgIGNvbnN0IHJnYk1hdGNoID0gYmFja2dyb3VuZFN0eWxlLm1hdGNoKC9cXGQrL2cpO1xuICAgICAgICBpZiAocmdiTWF0Y2ggJiYgcmdiTWF0Y2gubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICBjb25zdCByZ2IgPSBbXG4gICAgICAgICAgICBwYXJzZUludChyZ2JNYXRjaFswXSksXG4gICAgICAgICAgICBwYXJzZUludChyZ2JNYXRjaFsxXSksXG4gICAgICAgICAgICBwYXJzZUludChyZ2JNYXRjaFsyXSlcbiAgICAgICAgICBdO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGNvbG9ySW5mbyA9IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIHJnYixcbiAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQudGl0bGUgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSB8fCBgQ29sb3IgJHtpZH1gLFxuICAgICAgICAgICAgcHJlbWl1bTogZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3ByZW1pdW0nKSB8fCBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVtaXVtJylcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbG9ycy5wdXNoKGNvbG9ySW5mbyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgbG9nKGBbQkxVRSBNQVJCTEVdICR7Y29sb3JzLmxlbmd0aH0gY29sb3JlcyBkZXRlY3RhZG9zIGRlbCBzaXRpb2ApO1xuICAgIFxuXG4gICAgXG4gICAgcmV0dXJuIGNvbG9ycztcbiAgfVxuXG4gIC8qKlxuICAgKiBFc3RhYmxlY2UgbGFzIGNvb3JkZW5hZGFzIGRlIHBvc2ljaVx1MDBGM24gKGNvbW8gQmx1ZSBNYXJibGUpXG4gICAqL1xuICBzZXRDb29yZHModGlsZVgsIHRpbGVZLCBwaXhlbFgsIHBpeGVsWSkge1xuICAgIHRoaXMuY29vcmRzID0gW3RpbGVYLCB0aWxlWSwgcGl4ZWxYLCBwaXhlbFldO1xuICAgIC8vIENvb3JkZW5hZGFzIGVzdGFibGVjaWRhcyBzaWxlbmNpb3NhbWVudGVcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFsaXphIHBcdTAwRUR4ZWxlcyBkZSBsYSBpbWFnZW4geSBjdWVudGEgcmVxdWVyaWRvcyB2cyAjZGVmYWNlIChjb21vIEJsdWUgTWFyYmxlKVxuICAgKi9cbiAgYXN5bmMgYW5hbHl6ZVBpeGVscygpIHtcbiAgICBpZiAoIXRoaXMuYml0bWFwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlbiBubyBjYXJnYWRhLiBMbGFtYSBhIGxvYWQoKSBwcmltZXJvLicpO1xuICAgIH1cblxuICAgIC8vIEFuYWxpemFuZG8gcFx1MDBFRHhlbGVzLi4uXG5cbiAgICB0cnkge1xuICAgICAgLy8gQ3JlYXIgY2FudmFzIGRlIGluc3BlY2NpXHUwMEYzbiBhIGVzY2FsYSAxOjFcbiAgICAgIGNvbnN0IGluc3BlY3RDYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5pbWFnZUhlaWdodCk7XG4gICAgICBjb25zdCBpbnNwZWN0Q3R4ID0gaW5zcGVjdENhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHsgd2lsbFJlYWRGcmVxdWVudGx5OiB0cnVlIH0pO1xuICAgICAgaW5zcGVjdEN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIGluc3BlY3RDdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5pbWFnZUhlaWdodCk7XG4gICAgICBpbnNwZWN0Q3R4LmRyYXdJbWFnZSh0aGlzLmJpdG1hcCwgMCwgMCk7XG4gICAgICBjb25zdCBpbnNwZWN0RGF0YSA9IGluc3BlY3RDdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5pbWFnZUhlaWdodCkuZGF0YTtcblxuICAgICAgbGV0IHJlcXVpcmVkID0gMDtcbiAgICAgIGxldCBkZWZhY2UgPSAwO1xuICAgICAgY29uc3QgcGFsZXR0ZU1hcCA9IG5ldyBNYXAoKTtcblxuXG5cbiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5pbWFnZUhlaWdodDsgeSsrKSB7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5pbWFnZVdpZHRoOyB4KyspIHtcbiAgICAgICAgICBjb25zdCBpZHggPSAoeSAqIHRoaXMuaW1hZ2VXaWR0aCArIHgpICogNDtcbiAgICAgICAgICBjb25zdCByID0gaW5zcGVjdERhdGFbaWR4XTtcbiAgICAgICAgICBjb25zdCBnID0gaW5zcGVjdERhdGFbaWR4ICsgMV07XG4gICAgICAgICAgY29uc3QgYiA9IGluc3BlY3REYXRhW2lkeCArIDJdO1xuICAgICAgICAgIGNvbnN0IGEgPSBpbnNwZWN0RGF0YVtpZHggKyAzXTtcblxuICAgICAgICAgIGlmIChhID09PSAwKSBjb250aW51ZTsgLy8gSWdub3JhciBwXHUwMEVEeGVsZXMgdHJhbnNwYXJlbnRlc1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGtleSA9IGAke3J9LCR7Z30sJHtifWA7XG5cbiAgICAgICAgICAvLyBDb250YXIgcFx1MDBFRHhlbGVzICNkZWZhY2UgKG1hcmNhZG9yIGRlIHRyYW5zcGFyZW5jaWEpXG4gICAgICAgICAgaWYgKHIgPT09IDIyMiAmJiBnID09PSAyNTAgJiYgYiA9PT0gMjA2KSB7XG4gICAgICAgICAgICBkZWZhY2UrKztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZXMgdW4gY29sb3IgZXhhY3RvIHByaW1lcm9cbiAgICAgICAgICBsZXQgbWF0Y2hlZEtleSA9IGtleTtcbiAgICAgICAgICBsZXQgaXNWYWxpZFBpeGVsID0gdGhpcy5hbGxvd2VkQ29sb3JzU2V0LmhhcyhrZXkpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNpIG5vIGVzIGV4YWN0bywgdXNhciBhbGdvcml0bW8gTEFCIHBhcmEgZW5jb250cmFyIGVsIGNvbG9yIG1cdTAwRTFzIGNlcmNhbm9cbiAgICAgICAgICBpZiAoIWlzVmFsaWRQaXhlbCAmJiB0aGlzLmFsbG93ZWRDb2xvcnMgJiYgdGhpcy5hbGxvd2VkQ29sb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RDb2xvciA9IENvbG9yVXRpbHMuZmluZENsb3Nlc3RQYWxldHRlQ29sb3IociwgZywgYiwgdGhpcy5hbGxvd2VkQ29sb3JzLCB7XG4gICAgICAgICAgICAgICAgdXNlTGVnYWN5UmdiOiBmYWxzZSwgLy8gVXNhciBhbGdvcml0bW8gTEFCIGF2YW56YWRvXG4gICAgICAgICAgICAgICAgd2hpdGVUaHJlc2hvbGQ6IDI0MCxcbiAgICAgICAgICAgICAgICBtYXhEaXN0YW5jZTogdGhpcy5sYWJUb2xlcmFuY2VcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChjbG9zZXN0Q29sb3IpIHtcbiAgICAgICAgICAgICAgbWF0Y2hlZEtleSA9IGAke2Nsb3Nlc3RDb2xvci5yfSwke2Nsb3Nlc3RDb2xvci5nfSwke2Nsb3Nlc3RDb2xvci5ifWA7XG4gICAgICAgICAgICAgIGlzVmFsaWRQaXhlbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU29sbyBjb250YXIgY29sb3JlcyB2XHUwMEUxbGlkb3NcbiAgICAgICAgICBpZiAoIWlzVmFsaWRQaXhlbCkgY29udGludWU7XG5cbiAgICAgICAgICByZXF1aXJlZCsrO1xuICAgICAgICAgIHBhbGV0dGVNYXAuc2V0KG1hdGNoZWRLZXksIChwYWxldHRlTWFwLmdldChtYXRjaGVkS2V5KSB8fCAwKSArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVxdWlyZWRQaXhlbENvdW50ID0gcmVxdWlyZWQ7XG4gICAgICB0aGlzLmRlZmFjZVBpeGVsQ291bnQgPSBkZWZhY2U7XG5cbiAgICAgIC8vIFBlcnNpc3RpciBwYWxldGEgY29uIHRvZG9zIGxvcyBjb2xvcmVzIGhhYmlsaXRhZG9zIHBvciBkZWZlY3RvXG4gICAgICBjb25zdCBwYWxldHRlT2JqID0ge307XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIGNvdW50XSBvZiBwYWxldHRlTWFwLmVudHJpZXMoKSkge1xuICAgICAgICBwYWxldHRlT2JqW2tleV0gPSB7IGNvdW50LCBlbmFibGVkOiB0cnVlIH07XG4gICAgICB9XG4gICAgICB0aGlzLmNvbG9yUGFsZXR0ZSA9IHBhbGV0dGVPYmo7XG5cbiAgICAgIGxvZyhgW0JMVUUgTUFSQkxFXSBBblx1MDBFMWxpc2lzOiAke3JlcXVpcmVkLnRvTG9jYWxlU3RyaW5nKCl9IHBcdTAwRUR4ZWxlcywgJHtwYWxldHRlTWFwLnNpemV9IGNvbG9yZXNgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG90YWxQaXhlbHM6IHRoaXMudG90YWxQaXhlbHMsXG4gICAgICAgIHJlcXVpcmVkUGl4ZWxzOiByZXF1aXJlZCxcbiAgICAgICAgZGVmYWNlUGl4ZWxzOiBkZWZhY2UsXG4gICAgICAgIHVuaXF1ZUNvbG9yczogcGFsZXR0ZU1hcC5zaXplLFxuICAgICAgICBjb2xvclBhbGV0dGU6IHBhbGV0dGVPYmpcbiAgICAgIH07XG5cbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIEZhbGxiYWNrIHNpIE9mZnNjcmVlbkNhbnZhcyBubyBlc3RcdTAwRTEgZGlzcG9uaWJsZVxuICAgICAgdGhpcy5yZXF1aXJlZFBpeGVsQ291bnQgPSBNYXRoLm1heCgwLCB0aGlzLnRvdGFsUGl4ZWxzKTtcbiAgICAgIHRoaXMuZGVmYWNlUGl4ZWxDb3VudCA9IDA7XG4gICAgICAvLyBGYWxsYmFjayBhcGxpY2Fkb1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3RhbFBpeGVsczogdGhpcy50b3RhbFBpeGVscyxcbiAgICAgICAgcmVxdWlyZWRQaXhlbHM6IHRoaXMudG90YWxQaXhlbHMsXG4gICAgICAgIGRlZmFjZVBpeGVsczogMCxcbiAgICAgICAgdW5pcXVlQ29sb3JzOiAwLFxuICAgICAgICBjb2xvclBhbGV0dGU6IHt9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhIHRpbGVzIGRlIHRlbXBsYXRlIChwcm9jZXNvIHByaW5jaXBhbCBkZSBCbHVlIE1hcmJsZSlcbiAgICovXG4gIGFzeW5jIGNyZWF0ZVRlbXBsYXRlVGlsZXMoKSB7XG4gICAgaWYgKCF0aGlzLmJpdG1hcCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZW4gbm8gY2FyZ2FkYS4gTGxhbWEgYSBsb2FkKCkgcHJpbWVyby4nKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhbmRvIHRpbGVzLi4uXG5cbiAgICBjb25zdCB0ZW1wbGF0ZVRpbGVzID0ge307XG4gICAgY29uc3QgdGVtcGxhdGVUaWxlc0J1ZmZlcnMgPSB7fTtcbiAgICBcbiAgICBjb25zdCBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKHRoaXMudGlsZVNpemUsIHRoaXMudGlsZVNpemUpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnLCB7IHdpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZSB9KTtcblxuICAgIC8vIFBhcmEgY2FkYSB0aWxlIFkuLi5cbiAgICBmb3IgKGxldCBwaXhlbFkgPSB0aGlzLmNvb3Jkc1szXTsgcGl4ZWxZIDwgdGhpcy5pbWFnZUhlaWdodCArIHRoaXMuY29vcmRzWzNdOyApIHtcbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXIgdGFtYVx1MDBGMW8gZGUgZGlidWpvIFlcbiAgICAgIGNvbnN0IGRyYXdTaXplWSA9IE1hdGgubWluKFxuICAgICAgICB0aGlzLnRpbGVTaXplIC0gKHBpeGVsWSAlIHRoaXMudGlsZVNpemUpLCBcbiAgICAgICAgdGhpcy5pbWFnZUhlaWdodCAtIChwaXhlbFkgLSB0aGlzLmNvb3Jkc1szXSlcbiAgICAgICk7XG5cbiAgICAgIC8vIFBhcmEgY2FkYSB0aWxlIFguLi5cbiAgICAgIGZvciAobGV0IHBpeGVsWCA9IHRoaXMuY29vcmRzWzJdOyBwaXhlbFggPCB0aGlzLmltYWdlV2lkdGggKyB0aGlzLmNvb3Jkc1syXTsgKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhciB0YW1hXHUwMEYxbyBkZSBkaWJ1am8gWFxuICAgICAgICBjb25zdCBkcmF3U2l6ZVggPSBNYXRoLm1pbihcbiAgICAgICAgICB0aGlzLnRpbGVTaXplIC0gKHBpeGVsWCAlIHRoaXMudGlsZVNpemUpLCBcbiAgICAgICAgICB0aGlzLmltYWdlV2lkdGggLSAocGl4ZWxYIC0gdGhpcy5jb29yZHNbMl0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gQ2FtYmlhciB0YW1hXHUwMEYxbyBkZWwgY2FudmFzIHkgbGltcGlhclxuICAgICAgICBjb25zdCBjYW52YXNXaWR0aCA9IGRyYXdTaXplWCAqIHRoaXMuc2hyZWFkU2l6ZTtcbiAgICAgICAgY29uc3QgY2FudmFzSGVpZ2h0ID0gZHJhd1NpemVZICogdGhpcy5zaHJlYWRTaXplO1xuICAgICAgICBjYW52YXMud2lkdGggPSBjYW52YXNXaWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodDtcblxuICAgICAgICBjb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlOyAvLyBOZWFyZXN0IG5laWdoYm9yXG5cbiAgICAgICAgLy8gRGlidWphciBzZWdtZW50byBkZSB0ZW1wbGF0ZSBlbiBlc3RlIHNlZ21lbnRvIGRlIHRpbGVcbiAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKFxuICAgICAgICAgIHRoaXMuYml0bWFwLCAvLyBCaXRtYXAgZGUgaW1hZ2VuIGEgZGlidWphclxuICAgICAgICAgIHBpeGVsWCAtIHRoaXMuY29vcmRzWzJdLCAvLyBDb29yZGVuYWRhIFggZGVzZGUgZG9uZGUgZGlidWphclxuICAgICAgICAgIHBpeGVsWSAtIHRoaXMuY29vcmRzWzNdLCAvLyBDb29yZGVuYWRhIFkgZGVzZGUgZG9uZGUgZGlidWphclxuICAgICAgICAgIGRyYXdTaXplWCwgLy8gQW5jaG8gWCBhIGRpYnVqYXIgZGVzZGVcbiAgICAgICAgICBkcmF3U2l6ZVksIC8vIEFsdG8gWSBhIGRpYnVqYXIgZGVzZGVcbiAgICAgICAgICAwLCAvLyBDb29yZGVuYWRhIFggZG9uZGUgZGlidWphclxuICAgICAgICAgIDAsIC8vIENvb3JkZW5hZGEgWSBkb25kZSBkaWJ1amFyXG4gICAgICAgICAgZHJhd1NpemVYICogdGhpcy5zaHJlYWRTaXplLCAvLyBBbmNobyBYIGRvbmRlIGRpYnVqYXJcbiAgICAgICAgICBkcmF3U2l6ZVkgKiB0aGlzLnNocmVhZFNpemUgLy8gQWx0byBZIGRvbmRlIGRpYnVqYXJcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcblxuICAgICAgICAvLyBQcm9jZXNhciBwXHUwMEVEeGVsZXMgKGNvbW8gQmx1ZSBNYXJibGUpXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgY2FudmFzSGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNhbnZhc1dpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBpeGVsSW5kZXggPSAoeSAqIGNhbnZhc1dpZHRoICsgeCkgKiA0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTaSBlbCBwXHUwMEVEeGVsIGVzICNkZWZhY2UsIGRpYnVqYXIgcGF0clx1MDBGM24gZGUgdGFibGVybyBkZSBhamVkcmV6IHRyYW5zbFx1MDBGQWNpZG9cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbcGl4ZWxJbmRleF0gPT09IDIyMiAmJlxuICAgICAgICAgICAgICBpbWFnZURhdGEuZGF0YVtwaXhlbEluZGV4ICsgMV0gPT09IDI1MCAmJlxuICAgICAgICAgICAgICBpbWFnZURhdGEuZGF0YVtwaXhlbEluZGV4ICsgMl0gPT09IDIwNlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICgoeCArIHkpICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhW3BpeGVsSW5kZXhdID0gMDtcbiAgICAgICAgICAgICAgICBpbWFnZURhdGEuZGF0YVtwaXhlbEluZGV4ICsgMV0gPSAwO1xuICAgICAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhW3BpeGVsSW5kZXggKyAyXSA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbcGl4ZWxJbmRleF0gPSAyNTU7XG4gICAgICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbcGl4ZWxJbmRleCArIDFdID0gMjU1O1xuICAgICAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhW3BpeGVsSW5kZXggKyAyXSA9IDI1NTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpbWFnZURhdGEuZGF0YVtwaXhlbEluZGV4ICsgM10gPSAzMjsgLy8gSGFjZXJsbyB0cmFuc2xcdTAwRkFjaWRvXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHggJSB0aGlzLnNocmVhZFNpemUgIT09IDEgfHwgeSAlIHRoaXMuc2hyZWFkU2l6ZSAhPT0gMSkge1xuICAgICAgICAgICAgICAvLyBTb2xvIGRpYnVqYXIgZWwgcFx1MDBFRHhlbCBjZW50cmFsXG4gICAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhW3BpeGVsSW5kZXggKyAzXSA9IDA7IC8vIEhhY2VyIHBcdTAwRUR4ZWwgdHJhbnNwYXJlbnRlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBQXHUwMEVEeGVsIGNlbnRyYWw6IG1hbnRlbmVyIHNvbG8gc2kgZXN0XHUwMEUxIGVuIGxhIHBhbGV0YSBwZXJtaXRpZGEgZGVsIHNpdGlvXG4gICAgICAgICAgICAgIGNvbnN0IHIgPSBpbWFnZURhdGEuZGF0YVtwaXhlbEluZGV4XTtcbiAgICAgICAgICAgICAgY29uc3QgZyA9IGltYWdlRGF0YS5kYXRhW3BpeGVsSW5kZXggKyAxXTtcbiAgICAgICAgICAgICAgY29uc3QgYiA9IGltYWdlRGF0YS5kYXRhW3BpeGVsSW5kZXggKyAyXTtcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93ZWRDb2xvcnNTZXQuaGFzKGAke3J9LCR7Z30sJHtifWApKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbcGl4ZWxJbmRleCArIDNdID0gMDsgLy8gb2N1bHRhciBjb2xvcmVzIG5vLXBhbGV0YVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcblxuICAgICAgICAvLyBDcmVhciBub21icmUgZGUgdGlsZSB0ZW1wbGF0ZSBcIjAwMDAsMDAwMCwwMDAsMDAwXCJcbiAgICAgICAgY29uc3QgdGVtcGxhdGVUaWxlTmFtZSA9IGAkeyh0aGlzLmNvb3Jkc1swXSArIE1hdGguZmxvb3IocGl4ZWxYIC8gMTAwMCkpXG4gICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAucGFkU3RhcnQoNCwgJzAnKX0sJHsodGhpcy5jb29yZHNbMV0gKyBNYXRoLmZsb29yKHBpeGVsWSAvIDEwMDApKVxuICAgICAgICAgIC50b1N0cmluZygpXG4gICAgICAgICAgLnBhZFN0YXJ0KDQsICcwJyl9LCR7KHBpeGVsWCAlIDEwMDApXG4gICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAucGFkU3RhcnQoMywgJzAnKX0sJHsocGl4ZWxZICUgMTAwMCkudG9TdHJpbmcoKS5wYWRTdGFydCgzLCAnMCcpfWA7XG5cbiAgICAgICAgdGVtcGxhdGVUaWxlc1t0ZW1wbGF0ZVRpbGVOYW1lXSA9IGF3YWl0IGNyZWF0ZUltYWdlQml0bWFwKGNhbnZhcyk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZWdpc3RyYXIgcHJlZmlqbyBkZSB0aWxlIHBhcmEgYlx1MDBGQXNxdWVkYSByXHUwMEUxcGlkYVxuICAgICAgICB0aGlzLnRpbGVQcmVmaXhlcy5hZGQodGVtcGxhdGVUaWxlTmFtZS5zcGxpdCgnLCcpLnNsaWNlKDAsIDIpLmpvaW4oJywnKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBbG1hY2VuYXIgYnVmZmVyIHBhcmEgc2VyaWFsaXphY2lcdTAwRjNuXG4gICAgICAgIGNvbnN0IGNhbnZhc0Jsb2IgPSBhd2FpdCBjYW52YXMuY29udmVydFRvQmxvYigpO1xuICAgICAgICBjb25zdCBjYW52YXNCdWZmZXIgPSBhd2FpdCBjYW52YXNCbG9iLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIHRlbXBsYXRlVGlsZXNCdWZmZXJzW3RlbXBsYXRlVGlsZU5hbWVdID0gY2FudmFzQnVmZmVyO1xuXG4gICAgICAgIHBpeGVsWCArPSBkcmF3U2l6ZVg7XG4gICAgICB9XG5cbiAgICAgIHBpeGVsWSArPSBkcmF3U2l6ZVk7XG4gICAgfVxuXG4gICAgdGhpcy50ZW1wbGF0ZVRpbGVzID0gdGVtcGxhdGVUaWxlcztcbiAgICB0aGlzLnRlbXBsYXRlVGlsZXNCdWZmZXJzID0gdGVtcGxhdGVUaWxlc0J1ZmZlcnM7XG5cbiAgICBsb2coYFtCTFVFIE1BUkJMRV0gJHtPYmplY3Qua2V5cyh0ZW1wbGF0ZVRpbGVzKS5sZW5ndGh9IHRpbGVzIGNyZWFkb3NgKTtcblxuICAgIHJldHVybiB7IHRlbXBsYXRlVGlsZXMsIHRlbXBsYXRlVGlsZXNCdWZmZXJzIH07XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhIGNvbGEgZGUgcFx1MDBFRHhlbGVzIHBhcmEgcGludGFyIChjb21wYXRpYmxlIGNvbiBBdXRvLUltYWdlKVxuICAgKi9cbiAgZ2VuZXJhdGVQaXhlbFF1ZXVlKCkge1xuICAgIGlmICghdGhpcy5iaXRtYXApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2VuIG5vIGNhcmdhZGEuIExsYW1hIGEgbG9hZCgpIHByaW1lcm8uJyk7XG4gICAgfVxuXG4gICAgLy8gRGVidWc6IFZlcmlmaWNhciBlc3RhZG8gZGUgbGEgcGFsZXRhIGRlIGNvbG9yZXNcbiAgICBsb2coYFtCTFVFIE1BUkJMRSBERUJVR10gYWxsb3dlZENvbG9yc1NldCBzaXplOiAke3RoaXMuYWxsb3dlZENvbG9yc1NldCA/IHRoaXMuYWxsb3dlZENvbG9yc1NldC5zaXplIDogJ3VuZGVmaW5lZCd9YCk7XG4gICAgbG9nKGBbQkxVRSBNQVJCTEUgREVCVUddIGFsbG93ZWRDb2xvcnMgbGVuZ3RoOiAke3RoaXMuYWxsb3dlZENvbG9ycyA/IHRoaXMuYWxsb3dlZENvbG9ycy5sZW5ndGggOiAndW5kZWZpbmVkJ31gKTtcbiAgICBpZiAodGhpcy5hbGxvd2VkQ29sb3JzU2V0ICYmIHRoaXMuYWxsb3dlZENvbG9yc1NldC5zaXplID4gMCkge1xuICAgICAgbG9nKGBbQkxVRSBNQVJCTEUgREVCVUddIFByaW1lcm9zIGNvbG9yZXMgcGVybWl0aWRvczogJHtBcnJheS5mcm9tKHRoaXMuYWxsb3dlZENvbG9yc1NldCkuc2xpY2UoMCwgNSkuam9pbignLCAnKX1gKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmFuZG8gY29sYS4uLlxuXG4gICAgY29uc3QgcXVldWUgPSBbXTtcbiAgICBjb25zdCBiYXNlWCA9IHRoaXMuY29vcmRzWzBdICogMTAwMCArICh0aGlzLmNvb3Jkc1syXSB8fCAwKTsgLy8gQ29vcmRlbmFkYSBnbG9iYWwgYmFzZSBYXG4gICAgY29uc3QgYmFzZVkgPSB0aGlzLmNvb3Jkc1sxXSAqIDEwMDAgKyAodGhpcy5jb29yZHNbM10gfHwgMCk7IC8vIENvb3JkZW5hZGEgZ2xvYmFsIGJhc2UgWVxuXG4gICAgLy8gVXNhciBjYW52YXMgMToxIHBhcmEgbGVlciBwXHUwMEVEeGVsZXMgZXhhY3Rvc1xuICAgIGNvbnN0IHJlYWRDYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5pbWFnZUhlaWdodCk7XG4gICAgY29uc3QgcmVhZEN0eCA9IHJlYWRDYW52YXMuZ2V0Q29udGV4dCgnMmQnLCB7IHdpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZSB9KTtcbiAgICByZWFkQ3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIHJlYWRDdHguZHJhd0ltYWdlKHRoaXMuYml0bWFwLCAwLCAwKTtcbiAgICBjb25zdCBwaXhlbERhdGEgPSByZWFkQ3R4LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLmltYWdlV2lkdGgsIHRoaXMuaW1hZ2VIZWlnaHQpLmRhdGE7XG5cbiAgICAvLyBEZWJ1ZzogQ29udGFkb3JlcyBwYXJhIGRlcHVyYWNpXHUwMEYzblxuICAgIGxldCB0b3RhbFBpeGVsc1Byb2Nlc3NlZCA9IDA7XG4gICAgbGV0IHRyYW5zcGFyZW50UGl4ZWxzID0gMDtcbiAgICBsZXQgZGVmYWNlUGl4ZWxzID0gMDtcbiAgICBsZXQgZXhhY3RNYXRjaGVzID0gMDtcbiAgICBsZXQgbGFiTWF0Y2hlcyA9IDA7XG4gICAgbGV0IGludmFsaWRQaXhlbHMgPSAwO1xuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmltYWdlSGVpZ2h0OyB5KyspIHtcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLmltYWdlV2lkdGg7IHgrKykge1xuICAgICAgICAgIHRvdGFsUGl4ZWxzUHJvY2Vzc2VkKys7XG4gICAgICAgICAgY29uc3QgaWR4ID0gKHkgKiB0aGlzLmltYWdlV2lkdGggKyB4KSAqIDQ7XG4gICAgICAgICAgY29uc3QgciA9IHBpeGVsRGF0YVtpZHhdO1xuICAgICAgICAgIGNvbnN0IGcgPSBwaXhlbERhdGFbaWR4ICsgMV07XG4gICAgICAgICAgY29uc3QgYiA9IHBpeGVsRGF0YVtpZHggKyAyXTtcbiAgICAgICAgICBjb25zdCBhbHBoYSA9IHBpeGVsRGF0YVtpZHggKyAzXTtcblxuICAgICAgICAgIC8vIEZpbHRyYXIgcFx1MDBFRHhlbGVzIHRyYW5zcGFyZW50ZXNcbiAgICAgICAgICBpZiAoYWxwaGEgPT09IDApIHtcbiAgICAgICAgICAgIHRyYW5zcGFyZW50UGl4ZWxzKys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBGaWx0cmFyIHBcdTAwRUR4ZWxlcyAjZGVmYWNlIChzZSByZW5kZXJpemFuIGNvbW8gdHJhbnNwYXJlbnRlcylcbiAgICAgICAgICBpZiAociA9PT0gMjIyICYmIGcgPT09IDI1MCAmJiBiID09PSAyMDYpIHtcbiAgICAgICAgICAgIGRlZmFjZVBpeGVscysrO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY29sb3JLZXkgPSBgJHtyfSwke2d9LCR7Yn1gO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlcyB1biBjb2xvciBleGFjdG8gcHJpbWVyb1xuICAgICAgICAgIGxldCBmaW5hbENvbG9yS2V5ID0gY29sb3JLZXk7XG4gICAgICAgICAgbGV0IGZpbmFsUiA9IHIsIGZpbmFsRyA9IGcsIGZpbmFsQiA9IGI7XG4gICAgICAgICAgbGV0IGlzVmFsaWRQaXhlbCA9IHRoaXMuYWxsb3dlZENvbG9yc1NldC5oYXMoY29sb3JLZXkpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChpc1ZhbGlkUGl4ZWwpIHtcbiAgICAgICAgICAgIGV4YWN0TWF0Y2hlcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTaSBubyBlcyBleGFjdG8sIHVzYXIgYWxnb3JpdG1vIExBQiBwYXJhIGVuY29udHJhciBlbCBjb2xvciBtXHUwMEUxcyBjZXJjYW5vXG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd2VkQ29sb3JzICYmIHRoaXMuYWxsb3dlZENvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RDb2xvciA9IENvbG9yVXRpbHMuZmluZENsb3Nlc3RQYWxldHRlQ29sb3IociwgZywgYiwgdGhpcy5hbGxvd2VkQ29sb3JzLCB7XG4gICAgICAgICAgICAgICAgdXNlTGVnYWN5UmdiOiBmYWxzZSwgLy8gVXNhciBhbGdvcml0bW8gTEFCIGF2YW56YWRvXG4gICAgICAgICAgICAgICAgd2hpdGVUaHJlc2hvbGQ6IDI0MCxcbiAgICAgICAgICAgICAgICBtYXhEaXN0YW5jZTogdGhpcy5sYWJUb2xlcmFuY2VcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBpZiAoY2xvc2VzdENvbG9yKSB7XG4gICAgICAgICAgICAgICAgZmluYWxSID0gY2xvc2VzdENvbG9yLnI7XG4gICAgICAgICAgICAgICAgZmluYWxHID0gY2xvc2VzdENvbG9yLmc7XG4gICAgICAgICAgICAgICAgZmluYWxCID0gY2xvc2VzdENvbG9yLmI7XG4gICAgICAgICAgICAgICAgZmluYWxDb2xvcktleSA9IGAke2ZpbmFsUn0sJHtmaW5hbEd9LCR7ZmluYWxCfWA7XG4gICAgICAgICAgICAgICAgaXNWYWxpZFBpeGVsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBsYWJNYXRjaGVzKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU29sbyBpbmNsdWlyIGNvbG9yZXMgdlx1MDBFMWxpZG9zXG4gICAgICAgICAgaWYgKCFpc1ZhbGlkUGl4ZWwpIHtcbiAgICAgICAgICAgIGludmFsaWRQaXhlbHMrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAvLyBDYWxjdWxhciBjb29yZGVuYWRhcyBnbG9iYWxlc1xuICAgICAgICBjb25zdCBnbG9iYWxYID0gYmFzZVggKyB4O1xuICAgICAgICBjb25zdCBnbG9iYWxZID0gYmFzZVkgKyB5O1xuXG4gICAgICAgIC8vIENhbGN1bGFyIGNvb3JkZW5hZGFzIGRlIHRpbGVcbiAgICAgICAgY29uc3QgdGlsZVggPSBNYXRoLmZsb29yKGdsb2JhbFggLyAxMDAwKTtcbiAgICAgICAgY29uc3QgdGlsZVkgPSBNYXRoLmZsb29yKGdsb2JhbFkgLyAxMDAwKTtcbiAgICAgICAgY29uc3QgbG9jYWxYID0gZ2xvYmFsWCAlIDEwMDA7XG4gICAgICAgIGNvbnN0IGxvY2FsWSA9IGdsb2JhbFkgJSAxMDAwO1xuXG4gICAgICAgIC8vIE9idGVuZXIgbWV0YWRhdG9zIGRlbCBjb2xvciB1c2FuZG8gbGEgY2xhdmUgZmluYWwgKGNvbiB0b2xlcmFuY2lhIGFwbGljYWRhKVxuICAgICAgICBjb25zdCBjb2xvck1ldGEgPSB0aGlzLnJnYlRvTWV0YS5nZXQoZmluYWxDb2xvcktleSkgfHwgeyBpZDogMCwgbmFtZTogJ1Vua25vd24nIH07XG5cbiAgICAgICAgcXVldWUucHVzaCh7XG4gICAgICAgICAgLy8gQ29vcmRlbmFkYXMgZGUgaW1hZ2VuIChyZWxhdGl2YXMpXG4gICAgICAgICAgaW1hZ2VYOiB4LFxuICAgICAgICAgIGltYWdlWTogeSxcbiAgICAgICAgICAvLyBDb29yZGVuYWRhcyBnbG9iYWxlc1xuICAgICAgICAgIGdsb2JhbFg6IGdsb2JhbFgsXG4gICAgICAgICAgZ2xvYmFsWTogZ2xvYmFsWSxcbiAgICAgICAgICAvLyBDb29yZGVuYWRhcyBkZSB0aWxlL2xvY2FsXG4gICAgICAgICAgdGlsZVg6IHRpbGVYLFxuICAgICAgICAgIHRpbGVZOiB0aWxlWSxcbiAgICAgICAgICBsb2NhbFg6IGxvY2FsWCxcbiAgICAgICAgICBsb2NhbFk6IGxvY2FsWSxcbiAgICAgICAgICAvLyBJbmZvcm1hY2lcdTAwRjNuIGRlIGNvbG9yXG4gICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgIHI6IGZpbmFsUixcbiAgICAgICAgICAgIGc6IGZpbmFsRyxcbiAgICAgICAgICAgIGI6IGZpbmFsQixcbiAgICAgICAgICAgIGlkOiBjb2xvck1ldGEuaWQsXG4gICAgICAgICAgICBuYW1lOiBjb2xvck1ldGEubmFtZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3JpZ2luYWxDb2xvcjogeyByOiBmaW5hbFIsIGc6IGZpbmFsRywgYjogZmluYWxCLCBhbHBoYSB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlYnVnOiBNb3N0cmFyIGVzdGFkXHUwMEVEc3RpY2FzIGRlIHByb2Nlc2FtaWVudG9cbiAgICBsb2coYFtCTFVFIE1BUkJMRSBERUJVR10gRXN0YWRcdTAwRURzdGljYXMgZGUgcHJvY2VzYW1pZW50bzpgKTtcbiAgICBsb2coYFtCTFVFIE1BUkJMRSBERUJVR10gLSBUb3RhbCBwXHUwMEVEeGVsZXMgcHJvY2VzYWRvczogJHt0b3RhbFBpeGVsc1Byb2Nlc3NlZH1gKTtcbiAgICBsb2coYFtCTFVFIE1BUkJMRSBERUJVR10gLSBQXHUwMEVEeGVsZXMgdHJhbnNwYXJlbnRlczogJHt0cmFuc3BhcmVudFBpeGVsc31gKTtcbiAgICBsb2coYFtCTFVFIE1BUkJMRSBERUJVR10gLSBQXHUwMEVEeGVsZXMgI2RlZmFjZTogJHtkZWZhY2VQaXhlbHN9YCk7XG4gICAgbG9nKGBbQkxVRSBNQVJCTEUgREVCVUddIC0gQ29pbmNpZGVuY2lhcyBleGFjdGFzOiAke2V4YWN0TWF0Y2hlc31gKTtcbiAgICBsb2coYFtCTFVFIE1BUkJMRSBERUJVR10gLSBDb2luY2lkZW5jaWFzIExBQjogJHtsYWJNYXRjaGVzfWApO1xuICAgIGxvZyhgW0JMVUUgTUFSQkxFIERFQlVHXSAtIFBcdTAwRUR4ZWxlcyBpbnZcdTAwRTFsaWRvczogJHtpbnZhbGlkUGl4ZWxzfWApO1xuICAgIGxvZyhgW0JMVUUgTUFSQkxFIERFQlVHXSAtIENvbGEgZmluYWw6ICR7cXVldWUubGVuZ3RofSBwXHUwMEVEeGVsZXNgKTtcblxuICAgIGxvZyhgW0JMVUUgTUFSQkxFXSBDb2xhOiAke3F1ZXVlLmxlbmd0aH0gcFx1MDBFRHhlbGVzYCk7XG4gICAgcmV0dXJuIHF1ZXVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZGltZW5zaW9uYSBsYSBpbWFnZW4gKHByZXNlcnZhIHByb3BvcmNpb25lcyBwb3IgZGVmZWN0bylcbiAgICovXG4gIGFzeW5jIHJlc2l6ZShuZXdXaWR0aCwgbmV3SGVpZ2h0LCBrZWVwQXNwZWN0UmF0aW8gPSB0cnVlKSB7XG4gICAgaWYgKCF0aGlzLmltZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZW4gbm8gY2FyZ2FkYS4gTGxhbWEgYSBsb2FkKCkgcHJpbWVyby4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcmlnaW5hbFdpZHRoID0gdGhpcy5pbWcud2lkdGg7XG4gICAgY29uc3Qgb3JpZ2luYWxIZWlnaHQgPSB0aGlzLmltZy5oZWlnaHQ7XG5cbiAgICBpZiAoa2VlcEFzcGVjdFJhdGlvKSB7XG4gICAgICBjb25zdCBhc3BlY3RSYXRpbyA9IG9yaWdpbmFsV2lkdGggLyBvcmlnaW5hbEhlaWdodDtcbiAgICAgIGlmIChuZXdXaWR0aCAvIG5ld0hlaWdodCA+IGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIG5ld1dpZHRoID0gbmV3SGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdIZWlnaHQgPSBuZXdXaWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWFyIG51ZXZhIGltYWdlbiByZWRpbWVuc2lvbmFkYVxuICAgIGNvbnN0IHRlbXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0ZW1wQ2FudmFzLndpZHRoID0gbmV3V2lkdGg7XG4gICAgdGVtcENhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgY29uc3QgdGVtcEN0eCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0ZW1wQ3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlOyAvLyBQaXhlbCBhcnRcbiAgICB0ZW1wQ3R4LmRyYXdJbWFnZSh0aGlzLmltZywgMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XG5cbiAgICAvLyBBY3R1YWxpemFyIGltYWdlbiB5IGJpdG1hcFxuICAgIGNvbnN0IG5ld0RhdGFVcmwgPSB0ZW1wQ2FudmFzLnRvRGF0YVVSTCgpO1xuICAgIHRoaXMuaW1nLnNyYyA9IG5ld0RhdGFVcmw7XG4gICAgdGhpcy5pbWFnZVNyYyA9IG5ld0RhdGFVcmw7XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuaW1nLm9ubG9hZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdGhpcy5iaXRtYXAgPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcCh0aGlzLmltZyk7XG4gICAgICAgIHRoaXMuaW1hZ2VXaWR0aCA9IHRoaXMuYml0bWFwLndpZHRoO1xuICAgICAgICB0aGlzLmltYWdlSGVpZ2h0ID0gdGhpcy5iaXRtYXAuaGVpZ2h0O1xuICAgICAgICB0aGlzLnRvdGFsUGl4ZWxzID0gdGhpcy5pbWFnZVdpZHRoICogdGhpcy5pbWFnZUhlaWdodDtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGxvZyhgW0JMVUUgTUFSQkxFXSBJbWFnZW4gcmVkaW1lbnNpb25hZGE6ICR7b3JpZ2luYWxXaWR0aH1cdTAwRDcke29yaWdpbmFsSGVpZ2h0fSBcdTIxOTIgJHt0aGlzLmltYWdlV2lkdGh9XHUwMEQ3JHt0aGlzLmltYWdlSGVpZ2h0fWApO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogdGhpcy5pbWFnZVdpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmltYWdlSGVpZ2h0XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGluZm9ybWFjaVx1MDBGM24gY29tcGxldGEgZGUgbGEgaW1hZ2VuIHByb2Nlc2FkYVxuICAgKi9cbiAgZ2V0SW1hZ2VEYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogdGhpcy5pbWFnZVdpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmltYWdlSGVpZ2h0LFxuICAgICAgdG90YWxQaXhlbHM6IHRoaXMudG90YWxQaXhlbHMsXG4gICAgICByZXF1aXJlZFBpeGVsczogdGhpcy5yZXF1aXJlZFBpeGVsQ291bnQsXG4gICAgICBkZWZhY2VQaXhlbHM6IHRoaXMuZGVmYWNlUGl4ZWxDb3VudCxcbiAgICAgIGNvbG9yUGFsZXR0ZTogdGhpcy5jb2xvclBhbGV0dGUsXG4gICAgICBjb29yZHM6IFsuLi50aGlzLmNvb3Jkc10sXG4gICAgICBvcmlnaW5hbE5hbWU6IHRoaXMub3JpZ2luYWxOYW1lIHx8ICdpbWFnZS5wbmcnLFxuICAgICAgLy8gUGFyYSBjb21wYXRpYmlsaWRhZCBjb24gQXV0by1JbWFnZSBhY3R1YWxcbiAgICAgIHBpeGVsczogdGhpcy5nZW5lcmF0ZVBpeGVsUXVldWUoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhIHByZXZpZXcgZGUgbGEgaW1hZ2VuXG4gICAqL1xuICBnZW5lcmF0ZVByZXZpZXcobWF4V2lkdGggPSAyMDAsIG1heEhlaWdodCA9IDIwMCkge1xuICAgIGlmICghdGhpcy5pbWcpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBjb25zdCB7IHdpZHRoOiBvcmlnV2lkdGgsIGhlaWdodDogb3JpZ0hlaWdodCB9ID0gdGhpcy5pbWc7XG4gICAgY29uc3QgYXNwZWN0UmF0aW8gPSBvcmlnV2lkdGggLyBvcmlnSGVpZ2h0O1xuXG4gICAgbGV0IG5ld1dpZHRoLCBuZXdIZWlnaHQ7XG4gICAgaWYgKG1heFdpZHRoIC8gbWF4SGVpZ2h0ID4gYXNwZWN0UmF0aW8pIHtcbiAgICAgIG5ld0hlaWdodCA9IG1heEhlaWdodDtcbiAgICAgIG5ld1dpZHRoID0gbWF4SGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1dpZHRoID0gbWF4V2lkdGg7XG4gICAgICBuZXdIZWlnaHQgPSBtYXhXaWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgIH1cblxuICAgIGNhbnZhcy53aWR0aCA9IG5ld1dpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuXG4gICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgfVxuXG4gIGdldERpbWVuc2lvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiB0aGlzLmltYWdlV2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMuaW1hZ2VIZWlnaHRcbiAgICB9O1xuICB9XG4gIFxuICAvKipcbiAgICogRXN0YWJsZWNlciBjb2xvcmVzIHNlbGVjY2lvbmFkb3MgcG9yIGVsIHVzdWFyaW9cbiAgICovXG4gIHNldFNlbGVjdGVkQ29sb3JzKHNlbGVjdGVkQ29sb3JzKSB7XG4gICAgLy8gTm9ybWFsaXphciBzZWxlY2NpXHUwMEYzblxuICAgIHRoaXMuc2VsZWN0ZWRDb2xvcnMgPSBBcnJheS5pc0FycmF5KHNlbGVjdGVkQ29sb3JzKSA/IHNlbGVjdGVkQ29sb3JzIDogW107XG5cbiAgICBpZiAodGhpcy5zZWxlY3RlZENvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBhbGxvd2VkQ29sb3JzU2V0IGRlYmUgdXNhciBjbGF2ZXMgUkdCIGV4YWN0YXMgXCJyLGcsYlwiXG4gICAgICB0aGlzLmFsbG93ZWRDb2xvcnNTZXQgPSBuZXcgU2V0KFxuICAgICAgICB0aGlzLnNlbGVjdGVkQ29sb3JzLm1hcChjID0+IHtcbiAgICAgICAgICBjb25zdCByID0gYy5yID8/IGMucmdiPy5yOyBjb25zdCBnID0gYy5nID8/IGMucmdiPy5nOyBjb25zdCBiID0gYy5iID8/IGMucmdiPy5iO1xuICAgICAgICAgIHJldHVybiBgJHtyfSwke2d9LCR7Yn1gO1xuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgLy8gTGlzdGEgZGUgY29sb3JlcyBwZXJtaXRpZG9zIHBhcmEgbWF0Y2hpbmcgTEFCXG4gICAgICB0aGlzLmFsbG93ZWRDb2xvcnMgPSB0aGlzLnNlbGVjdGVkQ29sb3JzLm1hcChjID0+ICh7XG4gICAgICAgIGlkOiBjLmlkLFxuICAgICAgICBuYW1lOiBjLm5hbWUsXG4gICAgICAgIHByZW1pdW06ICEhYy5wcmVtaXVtLFxuICAgICAgICByOiBjLnIgPz8gYy5yZ2I/LnIsXG4gICAgICAgIGc6IGMuZyA/PyBjLnJnYj8uZyxcbiAgICAgICAgYjogYy5iID8/IGMucmdiPy5iLFxuICAgICAgICByZ2I6IGMucmdiIHx8IHsgcjogYy5yLCBnOiBjLmcsIGI6IGMuYiB9XG4gICAgICB9KSk7XG5cbiAgICAgIC8vIEFjdHVhbGl6YXIgbWFwYSBkZSBwYWxldGFcbiAgICAgIHRoaXMuY29sb3JQYWxldHRlID0ge307XG4gICAgICB0aGlzLnNlbGVjdGVkQ29sb3JzLmZvckVhY2goY29sb3IgPT4ge1xuICAgICAgICBjb25zdCByZ2IgPSBjb2xvci5yZ2IgfHwgeyByOiBjb2xvci5yLCBnOiBjb2xvci5nLCBiOiBjb2xvci5iIH07XG4gICAgICAgIHRoaXMuY29sb3JQYWxldHRlW2NvbG9yLmlkXSA9IHJnYjtcbiAgICAgIH0pO1xuXG4gICAgICBsb2coYFx1RDgzQ1x1REZBOCBbQkxVRSBNQVJCTEVdIFBhbGV0YSBhY3R1YWxpemFkYSBjb24gJHt0aGlzLnNlbGVjdGVkQ29sb3JzLmxlbmd0aH0gY29sb3JlcyBzZWxlY2Npb25hZG9zYCk7XG5cbiAgICAgIC8vIExpbXBpYXIgY2FjaFx1MDBFOSBkZSBpbWFnZURhdGEgcGFyYSBmb3J6YXIgcmVjXHUwMEUxbGN1bG8gY29uIG51ZXZhIHBhbGV0YVxuICAgICAgdGhpcy5pbWFnZURhdGFDYWNoZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNpbiBzZWxlY2NpXHUwMEYzbiBleHBsXHUwMEVEY2l0YTogbm8gbGltaXRhciBwb3IgcGFsZXRhIGVuIHByZXZpZXcvY29sYVxuICAgICAgdGhpcy5hbGxvd2VkQ29sb3JzID0gWy4uLnRoaXMuYWxsU2l0ZUNvbG9yc107XG4gICAgICB0aGlzLmFsbG93ZWRDb2xvcnNTZXQgPSBuZXcgU2V0KHRoaXMuYWxsU2l0ZUNvbG9ycy5tYXAoYyA9PiBgJHtjLnJ9LCR7Yy5nfSwke2MuYn1gKSk7XG4gICAgICBsb2coYFx1RDgzQ1x1REZBOCBbQkxVRSBNQVJCTEVdIFNpbiBzZWxlY2NpXHUwMEYzbjogdXNhbmRvIHRvZG9zIGxvcyBjb2xvcmVzIGRpc3BvbmlibGVzICgke3RoaXMuYWxsb3dlZENvbG9ycy5sZW5ndGh9KWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmEgdW5hIHByZXZpZXcgYXBsaWNhbmRvIGxhIHBhbGV0YSBzZWxlY2Npb25hZGEgY29uIG1hdGNoaW5nIExBQi5cbiAgICogRGV2dWVsdmUgdGFtYmlcdTAwRTluIGVzdGFkXHUwMEVEc3RpY2FzIGRlIG1hcGVvLlxuICAgKi9cbiAgZ2VuZXJhdGVQcmV2aWV3V2l0aFBhbGV0dGUobWF4V2lkdGggPSAyMDAsIG1heEhlaWdodCA9IDIwMCkge1xuICBpZiAoIXRoaXMuaW1nKSByZXR1cm4geyBkYXRhVXJsOiBudWxsLCBzdGF0czogeyB0b3RhbDogMCwgZXhhY3Q6IDAsIGxhYjogMCwgcmVtb3ZlZDogMCB9IH07XG5cbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHsgd2lsbFJlYWRGcmVxdWVudGx5OiB0cnVlIH0pO1xuXG4gIC8vIFVzYXIgc2llbXByZSBsYSBmdWVudGUgb3JpZ2luYWwgcGFyYSBsYSBwcmV2aXN1YWxpemFjaVx1MDBGM24gY29uIHBhbGV0YSxcbiAgLy8gYXNcdTAwRUQgbGEgdG9sZXJhbmNpYSBMQUIgYWZlY3RhIGNvcnJlY3RhbWVudGUgYXVucXVlIGxhIGltYWdlbiBiYXNlIGVzdFx1MDBFOSByZW1hcGVhZGFcbiAgY29uc3Qgc291cmNlID0gdGhpcy5vcmlnaW5hbEJpdG1hcCB8fCB0aGlzLmJpdG1hcCB8fCB0aGlzLmltZztcbiAgY29uc3QgeyB3aWR0aDogb3JpZ1dpZHRoLCBoZWlnaHQ6IG9yaWdIZWlnaHQgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBhc3BlY3RSYXRpbyA9IG9yaWdXaWR0aCAvIG9yaWdIZWlnaHQ7XG5cbiAgICBsZXQgbmV3V2lkdGgsIG5ld0hlaWdodDtcbiAgICBpZiAobWF4V2lkdGggLyBtYXhIZWlnaHQgPiBhc3BlY3RSYXRpbykge1xuICAgICAgbmV3SGVpZ2h0ID0gTWF0aC5tYXgoMSwgTWF0aC5yb3VuZChtYXhIZWlnaHQpKTtcbiAgICAgIG5ld1dpZHRoID0gTWF0aC5tYXgoMSwgTWF0aC5yb3VuZChtYXhIZWlnaHQgKiBhc3BlY3RSYXRpbykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdXaWR0aCA9IE1hdGgubWF4KDEsIE1hdGgucm91bmQobWF4V2lkdGgpKTtcbiAgICAgIG5ld0hlaWdodCA9IE1hdGgubWF4KDEsIE1hdGgucm91bmQobWF4V2lkdGggLyBhc3BlY3RSYXRpbykpO1xuICAgIH1cblxuICAgIGNhbnZhcy53aWR0aCA9IG5ld1dpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gIGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgY3R4LmRyYXdJbWFnZShzb3VyY2UsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuXG4gIGNvbnN0IGltZ0RhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuICBjb25zdCBkYXRhID0gaW1nRGF0YS5kYXRhO1xuXG4gIGNvbnN0IHBhbGV0dGUgPSBBcnJheS5pc0FycmF5KHRoaXMuYWxsb3dlZENvbG9ycykgPyB0aGlzLmFsbG93ZWRDb2xvcnMgOiBbXTtcblxuICBsZXQgZXhhY3QgPSAwOyBsZXQgbGFiID0gMDsgbGV0IHJlbW92ZWQgPSAwOyBjb25zdCB0b3RhbCA9IG5ld1dpZHRoICogbmV3SGVpZ2h0O1xuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBuZXdIZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBuZXdXaWR0aDsgeCsrKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9ICh5ICogbmV3V2lkdGggKyB4KSAqIDQ7XG4gICAgICAgIGNvbnN0IHIgPSBkYXRhW2lkeF07XG4gICAgICAgIGNvbnN0IGcgPSBkYXRhW2lkeCArIDFdO1xuICAgICAgICBjb25zdCBiID0gZGF0YVtpZHggKyAyXTtcbiAgICAgICAgY29uc3QgYSA9IGRhdGFbaWR4ICsgM107XG5cbiAgICAgICAgaWYgKGEgPT09IDApIGNvbnRpbnVlO1xuXG5cbiAgLy8gRXhhY3QgbWF0Y2ggY29udHJhIHBhbGV0YSBhY3RpdmFcbiAgY29uc3Qga2V5ID0gYCR7cn0sJHtnfSwke2J9YDtcbiAgbGV0IG1hdGNoZWQgPSB0aGlzLmFsbG93ZWRDb2xvcnNTZXQgJiYgdGhpcy5hbGxvd2VkQ29sb3JzU2V0LmhhcyhrZXkpO1xuICBpZiAobWF0Y2hlZCkgeyBleGFjdCsrOyB9XG5cbiAgICAgICAgaWYgKCFtYXRjaGVkKSB7XG4gICAgICAgICAgLy8gTEFCIG1hdGNoIGFsIG1cdTAwRTFzIGNlcmNhbm8gZW4gbGEgcGFsZXRhIGFjdGl2YVxuICAgICAgICAgIGNvbnN0IGNsb3Nlc3QgPSBDb2xvclV0aWxzLmZpbmRDbG9zZXN0UGFsZXR0ZUNvbG9yKHIsIGcsIGIsIHBhbGV0dGUsIHsgdXNlTGVnYWN5UmdiOiBmYWxzZSwgd2hpdGVUaHJlc2hvbGQ6IDI0MCwgbWF4RGlzdGFuY2U6IHRoaXMubGFiVG9sZXJhbmNlIH0pO1xuICAgICAgICAgIGlmIChjbG9zZXN0KSB7XG4gICAgICAgICAgICBjb25zdCBjciA9IGNsb3Nlc3QuciA/PyBjbG9zZXN0LnJnYj8ucjsgY29uc3QgY2cgPSBjbG9zZXN0LmcgPz8gY2xvc2VzdC5yZ2I/Lmc7IGNvbnN0IGNiID0gY2xvc2VzdC5iID8/IGNsb3Nlc3QucmdiPy5iO1xuICAgICAgICAgICAgZGF0YVtpZHhdID0gY3I7IGRhdGFbaWR4ICsgMV0gPSBjZzsgZGF0YVtpZHggKyAyXSA9IGNiOyBkYXRhW2lkeCArIDNdID0gMjU1OyBsYWIrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTm8gaGF5IG9wY2lcdTAwRjNuIGVuIHNlbGVjY2lcdTAwRjNuLCByZW1vdmVyXG4gICAgICAgICAgICBkYXRhW2lkeCArIDNdID0gMDsgcmVtb3ZlZCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgMCwgMCk7XG4gICAgcmV0dXJuIHsgZGF0YVVybDogY2FudmFzLnRvRGF0YVVSTCgpLCBzdGF0czogeyB0b3RhbCwgZXhhY3QsIGxhYiwgcmVtb3ZlZCB9IH07XG4gIH1cblxuICAvKipcbiAgICogUmVtYXBlYSB5IHN1c3RpdHV5ZSBsYSBpbWFnZW4gYmFzZSBhIGxhIHBhbGV0YSBhY3RpdmEgKHBpeGVsYXJ0KS4gU2UgdXNhIGp1c3RvIHRyYXMgY2FyZ2FyLlxuICAgKi9cbiAgYXN5bmMgcmVtYXBJbWFnZVRvUGFsZXR0ZSgpIHtcbiAgICBpZiAoIXRoaXMuYml0bWFwKSByZXR1cm47XG4gICAgLy8gQXNlZ3VyYXJzZSBkZSB0ZW5lciBwYWxldGE6IHNpIG5vIGhheSBzZWxlY2NpXHUwMEYzbiwgdXNhciB0b2RvcyBsb3MgY29sb3JlcyBkZWwgc2l0aW9cbiAgICBpZiAoIXRoaXMuYWxsb3dlZENvbG9ycyB8fCB0aGlzLmFsbG93ZWRDb2xvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmFsbG93ZWRDb2xvcnMgPSBbLi4udGhpcy5hbGxTaXRlQ29sb3JzXTtcbiAgICAgIHRoaXMuYWxsb3dlZENvbG9yc1NldCA9IG5ldyBTZXQodGhpcy5hbGxTaXRlQ29sb3JzLm1hcChjID0+IGAke2Mucn0sJHtjLmd9LCR7Yy5ifWApKTtcbiAgICB9XG4gICAgY29uc3QgdyA9IHRoaXMuaW1hZ2VXaWR0aCwgaCA9IHRoaXMuaW1hZ2VIZWlnaHQ7XG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY2FudmFzLndpZHRoID0gdzsgY2FudmFzLmhlaWdodCA9IGg7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJywgeyB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUgfSk7XG4gICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5iaXRtYXAsIDAsIDApO1xuICAgIGNvbnN0IGltZ0RhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHcsIGgpO1xuICAgIGNvbnN0IGRhdGEgPSBpbWdEYXRhLmRhdGE7XG4gICAgY29uc3QgcGFsZXR0ZSA9IHRoaXMuYWxsb3dlZENvbG9ycztcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGg7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3OyB4KyspIHtcbiAgICAgICAgY29uc3QgaWR4ID0gKHkgKiB3ICsgeCkgKiA0O1xuICAgICAgICBjb25zdCByID0gZGF0YVtpZHhdLCBnID0gZGF0YVtpZHggKyAxXSwgYiA9IGRhdGFbaWR4ICsgMl0sIGEgPSBkYXRhW2lkeCArIDNdO1xuICAgICAgICBpZiAoYSA9PT0gMCkgY29udGludWU7XG4gICAgICAgIGNvbnN0IGtleSA9IGAke3J9LCR7Z30sJHtifWA7XG4gICAgICAgIGlmICh0aGlzLmFsbG93ZWRDb2xvcnNTZXQgJiYgdGhpcy5hbGxvd2VkQ29sb3JzU2V0LmhhcyhrZXkpKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgY2xvc2VzdCA9IENvbG9yVXRpbHMuZmluZENsb3Nlc3RQYWxldHRlQ29sb3IociwgZywgYiwgcGFsZXR0ZSwgeyB1c2VMZWdhY3lSZ2I6IGZhbHNlLCB3aGl0ZVRocmVzaG9sZDogMjQwLCBtYXhEaXN0YW5jZTogdGhpcy5sYWJUb2xlcmFuY2UgfSk7XG4gICAgICAgIGlmIChjbG9zZXN0KSB7XG4gICAgICAgICAgY29uc3QgY3IgPSBjbG9zZXN0LnIgPz8gY2xvc2VzdC5yZ2I/LnI7IGNvbnN0IGNnID0gY2xvc2VzdC5nID8/IGNsb3Nlc3QucmdiPy5nOyBjb25zdCBjYiA9IGNsb3Nlc3QuYiA/PyBjbG9zZXN0LnJnYj8uYjtcbiAgICAgICAgICBkYXRhW2lkeF0gPSBjcjsgZGF0YVtpZHggKyAxXSA9IGNnOyBkYXRhW2lkeCArIDJdID0gY2I7IGRhdGFbaWR4ICsgM10gPSAyNTU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YVtpZHggKyAzXSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LnB1dEltYWdlRGF0YShpbWdEYXRhLCAwLCAwKTtcbiAgICAvLyBSZWVtcGxhemFyIGJpdG1hcCBlIGltZyBjb24gcGl4ZWxhcnQgcmVtYXBlYWRvXG4gICAgY29uc3QgYmxvYiA9IGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBjYW52YXMudG9CbG9iKHJlcykpO1xuICBjb25zdCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICB0aGlzLmltZy5zcmMgPSB1cmw7IHRoaXMuaW1hZ2VTcmMgPSB1cmw7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHRoaXMuaW1nLm9ubG9hZCA9IGFzeW5jICgpID0+IHsgdGhpcy5iaXRtYXAgPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcCh0aGlzLmltZyk7IHJlc29sdmUoKTsgfTsgfSk7XG4gICAgbG9nKCdbQkxVRSBNQVJCTEVdIEltYWdlbiBiYXNlIHJlbWFwZWFkYSBhIHBhbGV0YSBhY3RpdmEgKHBpeGVsYXJ0KScpO1xuICB9XG59XG5cbi8vIE1hbnRlbmVyIGV4cG9ydHMgZGUgZnVuY2lvbmVzIHBhcmEgY29tcGF0aWJpbGlkYWRcbmltcG9ydCB7IGRldGVjdEF2YWlsYWJsZUNvbG9ycyB9IGZyb20gXCIuL3Byb2Nlc3Nvci5qc1wiO1xuZXhwb3J0IHsgZGV0ZWN0QXZhaWxhYmxlQ29sb3JzIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2xvc2VzdENvbG9yKHJnYiwgcGFsZXR0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIC8vIFVzYXIgbGFzIG51ZXZhcyB1dGlsaWRhZGVzIGRlIGNvbG9yIGF2YW56YWRhc1xuICByZXR1cm4gQ29sb3JVdGlscy5maW5kQ2xvc2VzdENvbG9yKHJnYiwgcGFsZXR0ZSwge1xuICAgIHVzZUxlZ2FjeVJnYjogZmFsc2UsIC8vIFVzYXIgYWxnb3JpdG1vIExBQiBwb3IgZGVmZWN0b1xuICAgIHdoaXRlVGhyZXNob2xkOiAyNDAsXG4gICAgLi4ub3B0aW9uc1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUGl4ZWxRdWV1ZShpbWFnZURhdGEsIHN0YXJ0UG9zaXRpb24sIHRpbGVYLCB0aWxlWSkge1xuICAvLyBFc3RhIGZ1bmNpXHUwMEYzbiBhaG9yYSBlcyBtYW5lamFkYSBwb3IgQmx1ZU1hcmJsZWxJbWFnZVByb2Nlc3Nvci5nZW5lcmF0ZVBpeGVsUXVldWUoKVxuICAvLyBNYW50ZW5pZGEgcGFyYSBjb21wYXRpYmlsaWRhZFxuICBjb25zdCB7IHBpeGVscyB9ID0gaW1hZ2VEYXRhO1xuICBjb25zdCB7IHg6IGxvY2FsU3RhcnRYLCB5OiBsb2NhbFN0YXJ0WSB9ID0gc3RhcnRQb3NpdGlvbjtcbiAgY29uc3QgcXVldWUgPSBbXTtcblxuICBmb3IgKGNvbnN0IHBpeGVsRGF0YSBvZiBwaXhlbHMpIHtcbiAgICBpZiAoIXBpeGVsRGF0YSkgY29udGludWU7XG4gICAgXG4gICAgY29uc3QgZ2xvYmFsWCA9IGxvY2FsU3RhcnRYICsgcGl4ZWxEYXRhLmltYWdlWDtcbiAgICBjb25zdCBnbG9iYWxZID0gbG9jYWxTdGFydFkgKyBwaXhlbERhdGEuaW1hZ2VZO1xuICAgIFxuICAgIHF1ZXVlLnB1c2goe1xuICAgICAgaW1hZ2VYOiBwaXhlbERhdGEuaW1hZ2VYLFxuICAgICAgaW1hZ2VZOiBwaXhlbERhdGEuaW1hZ2VZLFxuICAgICAgbG9jYWxYOiBnbG9iYWxYLFxuICAgICAgbG9jYWxZOiBnbG9iYWxZLFxuICAgICAgdGlsZVg6IHRpbGVYLFxuICAgICAgdGlsZVk6IHRpbGVZLFxuICAgICAgY29sb3I6IHBpeGVsRGF0YS5jb2xvcixcbiAgICAgIG9yaWdpbmFsQ29sb3I6IHBpeGVsRGF0YS5vcmlnaW5hbENvbG9yXG4gICAgfSk7XG4gIH1cblxuICBsb2coYENvbGEgZGUgcFx1MDBFRHhlbGVzIGdlbmVyYWRhIChjb21wYXRpYmlsaWRhZCk6ICR7cXVldWUubGVuZ3RofSBwXHUwMEVEeGVsZXNgKTtcbiAgcmV0dXJuIHF1ZXVlO1xufVxuIiwgImltcG9ydCB7IGxvZyB9IGZyb20gXCIuLi9jb3JlL2xvZ2dlci5qc1wiO1xuXG4vKipcbiAqIFV0aWxpZGFkZXMgYXZhbnphZGFzIHBhcmEgbWFuZWpvIGRlIGNvbG9yZXNcbiAqIEJhc2FkbyBlbiBlbCBhbGdvcml0bW8gTEFCIGRlIEF1dG8tSW1hZ2VfZXhwbGVzLmpzIHBhcmEgbWVqb3IgcHJlY2lzaVx1MDBGM25cbiAqL1xuZXhwb3J0IGNsYXNzIENvbG9yVXRpbHMge1xuICBcbiAgLyoqXG4gICAqIENvbnZpZXJ0ZSBSR0IgYSBlc3BhY2lvIGRlIGNvbG9yIExBQlxuICAgKiBAcGFyYW0ge251bWJlcn0gciAtIENvbXBvbmVudGUgcm9qbyAoMC0yNTUpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnIC0gQ29tcG9uZW50ZSB2ZXJkZSAoMC0yNTUpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiIC0gQ29tcG9uZW50ZSBhenVsICgwLTI1NSlcbiAgICogQHJldHVybnMge0FycmF5fSBbTCwgYSwgYl0gdmFsb3JlcyBlbiBlc3BhY2lvIExBQlxuICAgKi9cbiAgc3RhdGljIF9yZ2JUb0xhYihyLCBnLCBiKSB7XG4gICAgLy8gc1JHQiAtPiBsaW5lYXJcbiAgICBjb25zdCBzcmdiVG9MaW5lYXIgPSAodikgPT4ge1xuICAgICAgdiAvPSAyNTU7XG4gICAgICByZXR1cm4gdiA8PSAwLjA0MDQ1ID8gdiAvIDEyLjkyIDogTWF0aC5wb3coKHYgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHJsID0gc3JnYlRvTGluZWFyKHIpO1xuICAgIGNvbnN0IGdsID0gc3JnYlRvTGluZWFyKGcpO1xuICAgIGNvbnN0IGJsID0gc3JnYlRvTGluZWFyKGIpO1xuICAgIFxuICAgIC8vIFJHQiAtPiBYWVpcbiAgICBsZXQgWCA9IHJsICogMC40MTI0ICsgZ2wgKiAwLjM1NzYgKyBibCAqIDAuMTgwNTtcbiAgICBsZXQgWSA9IHJsICogMC4yMTI2ICsgZ2wgKiAwLjcxNTIgKyBibCAqIDAuMDcyMjtcbiAgICBsZXQgWiA9IHJsICogMC4wMTkzICsgZ2wgKiAwLjExOTIgKyBibCAqIDAuOTUwNTtcbiAgICBcbiAgICAvLyBOb3JtYWxpemFyIGNvbiBpbHVtaW5hbnRlIEQ2NVxuICAgIFggLz0gMC45NTA0NztcbiAgICBZIC89IDEuMDAwMDA7XG4gICAgWiAvPSAxLjA4ODgzO1xuICAgIFxuICAgIC8vIFhZWiAtPiBMQUJcbiAgICBjb25zdCBmID0gKHQpID0+ICh0ID4gMC4wMDg4NTYgPyBNYXRoLmNicnQodCkgOiAoNy43ODcgKiB0KSArIDE2IC8gMTE2KTtcbiAgICBjb25zdCBmWCA9IGYoWCksIGZZID0gZihZKSwgZlogPSBmKFopO1xuICAgIFxuICAgIGNvbnN0IEwgPSAxMTYgKiBmWSAtIDE2O1xuICAgIGNvbnN0IGEgPSA1MDAgKiAoZlggLSBmWSk7XG4gICAgY29uc3QgYjIgPSAyMDAgKiAoZlkgLSBmWik7XG4gICAgXG4gICAgcmV0dXJuIFtMLCBhLCBiMl07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBPYnRpZW5lIHZhbG9yZXMgTEFCIGNvbiBjYWNoXHUwMEU5IHBhcmEgbWVqb3IgcmVuZGltaWVudG9cbiAgICogQHBhcmFtIHtudW1iZXJ9IHIgLSBDb21wb25lbnRlIHJvam8gKDAtMjU1KVxuICAgKiBAcGFyYW0ge251bWJlcn0gZyAtIENvbXBvbmVudGUgdmVyZGUgKDAtMjU1KVxuICAgKiBAcGFyYW0ge251bWJlcn0gYiAtIENvbXBvbmVudGUgYXp1bCAoMC0yNTUpXG4gICAqIEByZXR1cm5zIHtBcnJheX0gW0wsIGEsIGJdIHZhbG9yZXMgZW4gZXNwYWNpbyBMQUJcbiAgICovXG4gIHN0YXRpYyBfbGFiKHIsIGcsIGIpIHtcbiAgICAvLyBJbmljaWFsaXphciBjYWNoXHUwMEU5IHNpIG5vIGV4aXN0ZVxuICAgIGlmICghQ29sb3JVdGlscy5fbGFiQ2FjaGUpIHtcbiAgICAgIENvbG9yVXRpbHMuX2xhYkNhY2hlID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBrZXkgPSAociA8PCAxNikgfCAoZyA8PCA4KSB8IGI7XG4gICAgbGV0IHYgPSBDb2xvclV0aWxzLl9sYWJDYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAoIXYpIHtcbiAgICAgIHYgPSBDb2xvclV0aWxzLl9yZ2JUb0xhYihyLCBnLCBiKTtcbiAgICAgIENvbG9yVXRpbHMuX2xhYkNhY2hlLnNldChrZXksIHYpO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEVuY3VlbnRyYSBlbCBjb2xvciBtXHUwMEUxcyBjZXJjYW5vIGVuIGxhIHBhbGV0YSB1c2FuZG8gYWxnb3JpdG1vIExBQiBhdmFuemFkb1xuICAgKiBAcGFyYW0ge251bWJlcn0gciAtIENvbXBvbmVudGUgcm9qbyBkZWwgY29sb3Igb2JqZXRpdm8gKDAtMjU1KVxuICAgKiBAcGFyYW0ge251bWJlcn0gZyAtIENvbXBvbmVudGUgdmVyZGUgZGVsIGNvbG9yIG9iamV0aXZvICgwLTI1NSlcbiAgICogQHBhcmFtIHtudW1iZXJ9IGIgLSBDb21wb25lbnRlIGF6dWwgZGVsIGNvbG9yIG9iamV0aXZvICgwLTI1NSlcbiAgICogQHBhcmFtIHtBcnJheX0gcGFsZXR0ZSAtIEFycmF5IGRlIGNvbG9yZXMgZGlzcG9uaWJsZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPcGNpb25lcyBhZGljaW9uYWxlc1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IENvbG9yIG1cdTAwRTFzIGNlcmNhbm8gZGUgbGEgcGFsZXRhXG4gICAqL1xuICBzdGF0aWMgZmluZENsb3Nlc3RQYWxldHRlQ29sb3IociwgZywgYiwgcGFsZXR0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFwYWxldHRlIHx8IHBhbGV0dGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcbiAgICBcbiAgICBjb25zdCB7XG4gICAgICB1c2VMZWdhY3lSZ2IgPSBmYWxzZSxcbiAgICAgIGNocm9tYVBlbmFsdHkgPSAwLFxuICAgICAgd2hpdGVUaHJlc2hvbGQgPSAyNDAsXG4gICAgICBtYXhEaXN0YW5jZSA9IEluZmluaXR5XG4gICAgfSA9IG9wdGlvbnM7XG4gICAgXG4gICAgLy8gTWFuZWpvIGVzcGVjaWFsIHBhcmEgY29sb3JlcyBtdXkgYmxhbmNvc1xuICAgIGlmIChyID49IHdoaXRlVGhyZXNob2xkICYmIGcgPj0gd2hpdGVUaHJlc2hvbGQgJiYgYiA+PSB3aGl0ZVRocmVzaG9sZCkge1xuICAgICAgLy8gQnVzY2FyIGNvbG9yIGJsYW5jbyBlbiBsYSBwYWxldGEgKElEIDUgdFx1MDBFRHBpY2FtZW50ZSlcbiAgICAgIGNvbnN0IHdoaXRlQ29sb3IgPSBwYWxldHRlLmZpbmQoY29sb3IgPT4ge1xuICAgICAgICBjb25zdCBjciA9IGNvbG9yLnIgfHwgY29sb3IucmdiPy5yIHx8IDA7XG4gICAgICAgIGNvbnN0IGNnID0gY29sb3IuZyB8fCBjb2xvci5yZ2I/LmcgfHwgMDtcbiAgICAgICAgY29uc3QgY2IgPSBjb2xvci5iIHx8IGNvbG9yLnJnYj8uYiB8fCAwO1xuICAgICAgICByZXR1cm4gY3IgPj0gd2hpdGVUaHJlc2hvbGQgJiYgY2cgPj0gd2hpdGVUaHJlc2hvbGQgJiYgY2IgPj0gd2hpdGVUaHJlc2hvbGQ7XG4gICAgICB9KTtcbiAgICAgIGlmICh3aGl0ZUNvbG9yKSByZXR1cm4gd2hpdGVDb2xvcjtcbiAgICB9XG4gICAgXG4gIGxldCBjbG9zZXN0Q29sb3IgPSBudWxsO1xuICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICBcbiAgICBpZiAodXNlTGVnYWN5UmdiKSB7XG4gICAgICAvLyBBbGdvcml0bW8gUkdCIHRyYWRpY2lvbmFsXG4gICAgICBmb3IgKGNvbnN0IGNvbG9yIG9mIHBhbGV0dGUpIHtcbiAgICAgICAgY29uc3QgY3IgPSBjb2xvci5yIHx8IGNvbG9yLnJnYj8uciB8fCAwO1xuICAgICAgICBjb25zdCBjZyA9IGNvbG9yLmcgfHwgY29sb3IucmdiPy5nIHx8IDA7XG4gICAgICAgIGNvbnN0IGNiID0gY29sb3IuYiB8fCBjb2xvci5yZ2I/LmIgfHwgMDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KFxuICAgICAgICAgIE1hdGgucG93KHIgLSBjciwgMikgK1xuICAgICAgICAgIE1hdGgucG93KGcgLSBjZywgMikgK1xuICAgICAgICAgIE1hdGgucG93KGIgLSBjYiwgMilcbiAgICAgICAgKTtcbiAgICAgICAgXG4gIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgICBjbG9zZXN0Q29sb3IgPSBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBbGdvcml0bW8gTEFCIGF2YW56YWRvXG4gICAgICBjb25zdCB0YXJnZXRMYWIgPSBDb2xvclV0aWxzLl9sYWIociwgZywgYik7XG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgY29sb3Igb2YgcGFsZXR0ZSkge1xuICAgICAgICBjb25zdCBjciA9IGNvbG9yLnIgfHwgY29sb3IucmdiPy5yIHx8IDA7XG4gICAgICAgIGNvbnN0IGNnID0gY29sb3IuZyB8fCBjb2xvci5yZ2I/LmcgfHwgMDtcbiAgICAgICAgY29uc3QgY2IgPSBjb2xvci5iIHx8IGNvbG9yLnJnYj8uYiB8fCAwO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY29sb3JMYWIgPSBDb2xvclV0aWxzLl9sYWIoY3IsIGNnLCBjYik7XG4gICAgICAgIFxuICAgICAgICAvLyBEaXN0YW5jaWEgZXVjbGlkaWFuYSBlbiBlc3BhY2lvIExBQlxuICAgICAgICBsZXQgZGlzdGFuY2UgPSBNYXRoLnNxcnQoXG4gICAgICAgICAgTWF0aC5wb3codGFyZ2V0TGFiWzBdIC0gY29sb3JMYWJbMF0sIDIpICtcbiAgICAgICAgICBNYXRoLnBvdyh0YXJnZXRMYWJbMV0gLSBjb2xvckxhYlsxXSwgMikgK1xuICAgICAgICAgIE1hdGgucG93KHRhcmdldExhYlsyXSAtIGNvbG9yTGFiWzJdLCAyKVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8gQXBsaWNhciBwZW5hbGl6YWNpXHUwMEYzbiBwb3IgY3JvbWEgc2kgc2UgZXNwZWNpZmljYVxuICAgICAgICBpZiAoY2hyb21hUGVuYWx0eSA+IDApIHtcbiAgICAgICAgICBjb25zdCB0YXJnZXRDaHJvbWEgPSBNYXRoLnNxcnQodGFyZ2V0TGFiWzFdICogdGFyZ2V0TGFiWzFdICsgdGFyZ2V0TGFiWzJdICogdGFyZ2V0TGFiWzJdKTtcbiAgICAgICAgICBjb25zdCBjb2xvckNocm9tYSA9IE1hdGguc3FydChjb2xvckxhYlsxXSAqIGNvbG9yTGFiWzFdICsgY29sb3JMYWJbMl0gKiBjb2xvckxhYlsyXSk7XG4gICAgICAgICAgY29uc3QgY2hyb21hRGlmZiA9IE1hdGguYWJzKHRhcmdldENocm9tYSAtIGNvbG9yQ2hyb21hKTtcbiAgICAgICAgICBkaXN0YW5jZSArPSBjaHJvbWFEaWZmICogY2hyb21hUGVuYWx0eTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgIGNsb3Nlc3RDb2xvciA9IGNvbG9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEFwbGljYXIgdW1icmFsIGRlIHRvbGVyYW5jaWE6IHNpIGVsIG1cdTAwRTFzIGNlcmNhbm8gc3VwZXJhIG1heERpc3RhbmNlLCBubyBoYXkgYWx0ZXJuYXRpdmEgdlx1MDBFMWxpZGFcbiAgICBpZiAobWluRGlzdGFuY2UgPiBtYXhEaXN0YW5jZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjbG9zZXN0Q29sb3I7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBGdW5jaVx1MDBGM24gZGUgY29tcGF0aWJpbGlkYWQgY29uIGxhIGludGVyZmF6IGV4aXN0ZW50ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcmdiIC0gT2JqZXRvIGNvbiBwcm9waWVkYWRlcyByLCBnLCBiXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBhbGV0dGUgLSBBcnJheSBkZSBjb2xvcmVzIGRpc3BvbmlibGVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3BjaW9uZXMgYWRpY2lvbmFsZXNcbiAgICogQHJldHVybnMge09iamVjdHxudWxsfSBDb2xvciBtXHUwMEUxcyBjZXJjYW5vIGRlIGxhIHBhbGV0YVxuICAgKi9cbiAgc3RhdGljIGZpbmRDbG9zZXN0Q29sb3IocmdiLCBwYWxldHRlLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gQ29sb3JVdGlscy5maW5kQ2xvc2VzdFBhbGV0dGVDb2xvcihyZ2IuciwgcmdiLmcsIHJnYi5iLCBwYWxldHRlLCBvcHRpb25zKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIExpbXBpYSBsYSBjYWNoXHUwMEU5IExBQiAoXHUwMEZBdGlsIHBhcmEgbGliZXJhciBtZW1vcmlhKVxuICAgKi9cbiAgc3RhdGljIGNsZWFyQ2FjaGUoKSB7XG4gICAgaWYgKENvbG9yVXRpbHMuX2xhYkNhY2hlKSB7XG4gICAgICBDb2xvclV0aWxzLl9sYWJDYWNoZS5jbGVhcigpO1xuICAgICAgbG9nKCdDYWNoXHUwMEU5IGRlIGNvbG9yZXMgTEFCIGxpbXBpYWRhJyk7XG4gICAgfVxuICB9XG4gIFxuICAvKipcbiAgICogT2J0aWVuZSBlc3RhZFx1MDBFRHN0aWNhcyBkZSBsYSBjYWNoXHUwMEU5XG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEVzdGFkXHUwMEVEc3RpY2FzIGRlIHVzbyBkZSBjYWNoXHUwMEU5XG4gICAqL1xuICBzdGF0aWMgZ2V0Q2FjaGVTdGF0cygpIHtcbiAgICBpZiAoIUNvbG9yVXRpbHMuX2xhYkNhY2hlKSB7XG4gICAgICByZXR1cm4geyBzaXplOiAwLCBtZW1vcnlFc3RpbWF0ZTogMCB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc2l6ZTogQ29sb3JVdGlscy5fbGFiQ2FjaGUuc2l6ZSxcbiAgICAgIG1lbW9yeUVzdGltYXRlOiBDb2xvclV0aWxzLl9sYWJDYWNoZS5zaXplICogMzIgLy8gRXN0aW1hY2lcdTAwRjNuIGFwcm94aW1hZGEgZW4gYnl0ZXNcbiAgICB9O1xuICB9XG59XG5cbi8vIEV4cG9ydGFyIGZ1bmNpb25lcyBpbmRpdmlkdWFsZXMgcGFyYSBjb21wYXRpYmlsaWRhZFxuZXhwb3J0IGNvbnN0IGZpbmRDbG9zZXN0Q29sb3IgPSBDb2xvclV0aWxzLmZpbmRDbG9zZXN0Q29sb3IuYmluZChDb2xvclV0aWxzKTtcbmV4cG9ydCBjb25zdCBmaW5kQ2xvc2VzdFBhbGV0dGVDb2xvciA9IENvbG9yVXRpbHMuZmluZENsb3Nlc3RQYWxldHRlQ29sb3IuYmluZChDb2xvclV0aWxzKTsiLCAiaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2NvcmUvbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyBDb2xvclV0aWxzIH0gZnJvbSBcIi4vY29sb3ItdXRpbHMuanNcIjtcblxuZXhwb3J0IGNsYXNzIEltYWdlUHJvY2Vzc29yIHtcbiAgY29uc3RydWN0b3IoaW1hZ2VTcmMpIHtcbiAgICB0aGlzLmltYWdlU3JjID0gaW1hZ2VTcmM7XG4gICAgdGhpcy5pbWcgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJywgeyB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUgfSk7XG4gICAgdGhpcy5wcmV2aWV3Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdGhpcy5wcmV2aWV3Q3R4ID0gdGhpcy5wcmV2aWV3Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIH1cbiAgXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLmltZy53aWR0aDtcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5pbWcuaGVpZ2h0O1xuICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIDAsIDApO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5pbWcub25lcnJvciA9IHJlamVjdDtcbiAgICAgIHRoaXMuaW1nLnNyYyA9IHRoaXMuaW1hZ2VTcmM7XG4gICAgfSk7XG4gIH1cbiAgXG4gIGdldFBpeGVsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5jdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpLmRhdGE7XG4gIH1cbiAgXG4gIGdldERpbWVuc2lvbnMoKSB7XG4gICAgcmV0dXJuIHsgd2lkdGg6IHRoaXMuY2FudmFzLndpZHRoLCBoZWlnaHQ6IHRoaXMuY2FudmFzLmhlaWdodCB9O1xuICB9XG4gIFxuICByZXNpemUobmV3V2lkdGgsIG5ld0hlaWdodCkge1xuICAgIGNvbnN0IHRlbXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0ZW1wQ2FudmFzLndpZHRoID0gbmV3V2lkdGg7XG4gICAgdGVtcENhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgY29uc3QgdGVtcEN0eCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBcbiAgICB0ZW1wQ3R4LmRyYXdJbWFnZSh0aGlzLmltZywgMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XG4gICAgXG4gICAgdGhpcy5jYW52YXMud2lkdGggPSBuZXdXaWR0aDtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgdGhpcy5jdHguZHJhd0ltYWdlKHRlbXBDYW52YXMsIDAsIDApO1xuICAgIFxuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRGF0YSgpO1xuICB9XG4gIFxuICBnZW5lcmF0ZVByZXZpZXcobmV3V2lkdGgsIG5ld0hlaWdodCkge1xuICAgIHRoaXMucHJldmlld0NhbnZhcy53aWR0aCA9IG5ld1dpZHRoO1xuICAgIHRoaXMucHJldmlld0NhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgdGhpcy5wcmV2aWV3Q3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMucHJldmlld0N0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuICAgIFxuICAgIHJldHVybiB0aGlzLnByZXZpZXdDYW52YXMudG9EYXRhVVJMKCk7XG4gIH1cbiAgXG4gIGdldEltYWdlRGF0YSgpIHtcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuZ2V0RGltZW5zaW9ucygpO1xuICAgIGNvbnN0IHBpeGVscyA9IHRoaXMuZ2V0UGl4ZWxEYXRhKCk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgcGl4ZWxzLFxuICAgICAgb3JpZ2luYWxOYW1lOiB0aGlzLm9yaWdpbmFsTmFtZSB8fCAnaW1hZ2UucG5nJ1xuICAgIH07XG4gIH1cbiAgXG4gIHByb2Nlc3NJbWFnZShhdmFpbGFibGVDb2xvcnMsIGNvbmZpZykge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5nZXREaW1lbnNpb25zKCk7XG4gICAgY29uc3QgcGl4ZWxzID0gdGhpcy5nZXRQaXhlbERhdGEoKTtcbiAgICBjb25zdCBwcm9jZXNzZWRQaXhlbHMgPSBbXTtcbiAgICBsZXQgdmFsaWRQaXhlbENvdW50ID0gMDtcbiAgICBcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgY29uc3QgaWR4ID0gKHkgKiB3aWR0aCArIHgpICogNDtcbiAgICAgICAgY29uc3QgciA9IHBpeGVsc1tpZHhdO1xuICAgICAgICBjb25zdCBnID0gcGl4ZWxzW2lkeCArIDFdO1xuICAgICAgICBjb25zdCBiID0gcGl4ZWxzW2lkeCArIDJdO1xuICAgICAgICBjb25zdCBhbHBoYSA9IHBpeGVsc1tpZHggKyAzXTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZpbHRyYXIgcFx1MDBFRHhlbGVzIHRyYW5zcGFyZW50ZXNcbiAgICAgICAgaWYgKGFscGhhIDwgY29uZmlnLlRSQU5TUEFSRU5DWV9USFJFU0hPTEQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTm90YTogUmVtb3ZpZG8gZWwgZmlsdHJvIGF1dG9tXHUwMEUxdGljbyBkZSBwXHUwMEVEeGVsZXMgYmxhbmNvc1xuICAgICAgICAvLyBwYXJhIHBlcm1pdGlyIGVsIHVzbyBkZWwgY29sb3IgYmxhbmNvIChJRCA1KSBlbiBsYXMgaW1cdTAwRTFnZW5lc1xuICAgICAgICBcbiAgICAgICAgLy8gRW5jb250cmFyIGVsIGNvbG9yIG1cdTAwRTFzIGNlcmNhbm8gdXNhbmRvIGFsZ29yaXRtbyBMQUIgYXZhbnphZG9cbiAgICAgICAgY29uc3QgY2xvc2VzdENvbG9yID0gQ29sb3JVdGlscy5maW5kQ2xvc2VzdFBhbGV0dGVDb2xvcihyLCBnLCBiLCBhdmFpbGFibGVDb2xvcnMsIHtcbiAgICAgICAgICB1c2VMZWdhY3lSZ2I6IGZhbHNlLCAvLyBVc2FyIGFsZ29yaXRtbyBMQUJcbiAgICAgICAgICB3aGl0ZVRocmVzaG9sZDogMjQwXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNsb3Nlc3RDb2xvcikge1xuICAgICAgICAgIHByb2Nlc3NlZFBpeGVscy5wdXNoKHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgb3JpZ2luYWxDb2xvcjogeyByLCBnLCBiLCBhbHBoYSB9LFxuICAgICAgICAgICAgdGFyZ2V0Q29sb3I6IGNsb3Nlc3RDb2xvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkUGl4ZWxDb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIHBpeGVsczogcHJvY2Vzc2VkUGl4ZWxzLFxuICAgICAgdmFsaWRQaXhlbENvdW50LFxuICAgICAgb3JpZ2luYWxOYW1lOiB0aGlzLm9yaWdpbmFsTmFtZSB8fCAnaW1hZ2UucG5nJ1xuICAgIH07XG4gIH1cbiAgXG4gIGZpbmRDbG9zZXN0Q29sb3IocmdiLCBwYWxldHRlLCBvcHRpb25zID0ge30pIHtcbiAgICAvLyBVc2FyIGxhcyBudWV2YXMgdXRpbGlkYWRlcyBkZSBjb2xvciBhdmFuemFkYXNcbiAgICByZXR1cm4gQ29sb3JVdGlscy5maW5kQ2xvc2VzdENvbG9yKHJnYiwgcGFsZXR0ZSwge1xuICAgICAgdXNlTGVnYWN5UmdiOiBmYWxzZSwgLy8gVXNhciBhbGdvcml0bW8gTEFCIHBvciBkZWZlY3RvXG4gICAgICB3aGl0ZVRocmVzaG9sZDogMjQwLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2xvc2VzdENvbG9yKHJnYiwgcGFsZXR0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIC8vIFVzYXIgbGFzIG51ZXZhcyB1dGlsaWRhZGVzIGRlIGNvbG9yIGF2YW56YWRhc1xuICByZXR1cm4gQ29sb3JVdGlscy5maW5kQ2xvc2VzdENvbG9yKHJnYiwgcGFsZXR0ZSwge1xuICAgIHVzZUxlZ2FjeVJnYjogZmFsc2UsIC8vIFVzYXIgYWxnb3JpdG1vIExBQiBwb3IgZGVmZWN0b1xuICAgIHdoaXRlVGhyZXNob2xkOiAyNDAsXG4gICAgLi4ub3B0aW9uc1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUGl4ZWxRdWV1ZShpbWFnZURhdGEsIHN0YXJ0UG9zaXRpb24sIHRpbGVYLCB0aWxlWSkge1xuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIHBpeGVscyB9ID0gaW1hZ2VEYXRhO1xuICBjb25zdCB7IHg6IGxvY2FsU3RhcnRYLCB5OiBsb2NhbFN0YXJ0WSB9ID0gc3RhcnRQb3NpdGlvbjtcbiAgY29uc3QgcXVldWUgPSBbXTtcblxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBjb25zdCBwaXhlbERhdGEgPSBwaXhlbHMuZmluZChwID0+IHAueCA9PT0geCAmJiBwLnkgPT09IHkpO1xuICAgICAgaWYgKCFwaXhlbERhdGEpIGNvbnRpbnVlO1xuICAgICAgXG4gICAgICBjb25zdCBnbG9iYWxYID0gbG9jYWxTdGFydFggKyB4O1xuICAgICAgY29uc3QgZ2xvYmFsWSA9IGxvY2FsU3RhcnRZICsgeTtcbiAgICAgIFxuICAgICAgcXVldWUucHVzaCh7XG4gICAgICAgIGltYWdlWDogeCxcbiAgICAgICAgaW1hZ2VZOiB5LFxuICAgICAgICBsb2NhbFg6IGdsb2JhbFgsXG4gICAgICAgIGxvY2FsWTogZ2xvYmFsWSxcbiAgICAgICAgdGlsZVg6IHRpbGVYLFxuICAgICAgICB0aWxlWTogdGlsZVksXG4gICAgICAgIGNvbG9yOiBwaXhlbERhdGEudGFyZ2V0Q29sb3IsXG4gICAgICAgIG9yaWdpbmFsQ29sb3I6IHBpeGVsRGF0YS5vcmlnaW5hbENvbG9yXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBsb2coYENvbGEgZGUgcFx1MDBFRHhlbGVzIGdlbmVyYWRhOiAke3F1ZXVlLmxlbmd0aH0gcFx1MDBFRHhlbGVzIHBhcmEgcGludGFyYCk7XG4gIHJldHVybiBxdWV1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEF2YWlsYWJsZUNvbG9ycygpIHtcbiAgbG9nKCdcdUQ4M0NcdURGQTggRGV0ZWN0YW5kbyBjb2xvcmVzIGRpc3BvbmlibGVzLi4uJyk7XG4gIFxuICAvLyBCdXNjYXIgZWxlbWVudG9zIGRlIGNvbG9yIHVzYW5kbyBlbCBzZWxlY3RvciBkZWwgb3JpZ2luYWxcbiAgY29uc3QgY29sb3JFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpZF49XCJjb2xvci1cIl0nKTtcbiAgY29uc3QgY29sb3JzID0gW107XG4gIFxuICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgY29sb3JFbGVtZW50cykge1xuICAgIC8vIEZpbHRyYXIgZWxlbWVudG9zIHF1ZSB0aWVuZW4gU1ZHIChwcm9iYWJsZW1lbnRlIGljb25vcyBkZSBibG9xdWVvKVxuICAgIGlmIChlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgaWRTdHIgPSBlbGVtZW50LmlkLnJlcGxhY2UoJ2NvbG9yLScsICcnKTtcbiAgICBjb25zdCBpZCA9IHBhcnNlSW50KGlkU3RyKTtcbiAgICBcbiAgICAvLyBGaWx0cmFyIHNvbG8gZWwgY29sb3IgMCAobWFudGVuZXIgZWwgY29sb3IgYmxhbmNvIElEIDUgZGlzcG9uaWJsZSlcbiAgICBpZiAoaWQgPT09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBcbiAgICAvLyBPYnRlbmVyIGNvbG9yIFJHQiBkZWwgc3R5bGVcbiAgICBjb25zdCBiYWNrZ3JvdW5kU3R5bGUgPSBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvcjtcbiAgICBpZiAoYmFja2dyb3VuZFN0eWxlKSB7XG4gICAgICBjb25zdCByZ2JNYXRjaCA9IGJhY2tncm91bmRTdHlsZS5tYXRjaCgvXFxkKy9nKTtcbiAgICAgIGlmIChyZ2JNYXRjaCAmJiByZ2JNYXRjaC5sZW5ndGggPj0gMykge1xuICAgICAgICBjb25zdCByZ2IgPSB7XG4gICAgICAgICAgcjogcGFyc2VJbnQocmdiTWF0Y2hbMF0pLFxuICAgICAgICAgIGc6IHBhcnNlSW50KHJnYk1hdGNoWzFdKSxcbiAgICAgICAgICBiOiBwYXJzZUludChyZ2JNYXRjaFsyXSlcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbG9ycy5wdXNoKHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgIC4uLnJnYlxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGxvZyhgQ29sb3IgZGV0ZWN0YWRvOiBpZD0ke2lkfSwgcmdiKCR7cmdiLnJ9LCR7cmdiLmd9LCR7cmdiLmJ9KWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBcbiAgbG9nKGBcdTI3MDUgJHtjb2xvcnMubGVuZ3RofSBjb2xvcmVzIGRpc3BvbmlibGVzIGRldGVjdGFkb3NgKTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsICJpbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vY29yZS9sb2dnZXIuanNcIjtcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4uL2NvcmUvdGltaW5nLmpzXCI7XG5pbXBvcnQgeyBwb3N0UGl4ZWxCYXRjaEltYWdlLCBnZXRTZXNzaW9uIH0gZnJvbSBcIi4uL2NvcmUvd3BsYWNlLWFwaS5qc1wiO1xuaW1wb3J0IHsgZW5zdXJlVG9rZW4gfSBmcm9tIFwiLi4vY29yZS90dXJuc3RpbGUuanNcIjtcbmltcG9ydCB7IGltYWdlU3RhdGUsIElNQUdFX0RFRkFVTFRTIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5pbXBvcnQgeyB0IH0gZnJvbSBcIi4uL2xvY2FsZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHBpeGVsc1BhaW50ZWQgfSBmcm9tIFwiLi4vY29yZS9tZXRyaWNzL2NsaWVudC5qc1wiO1xuXG5pbXBvcnQgeyBhcHBseVBhaW50UGF0dGVybiB9IGZyb20gXCIuL3BhdHRlcm5zLmpzXCI7XG5cbi8vIFZhcmlhYmxlcyBwYXJhIG1hbmVqbyBkZSB2aXNpYmlsaWRhZCBkZSBwXHUwMEUxZ2luYVxubGV0IHBhZ2VWaXNpYmlsaXR5SGFuZGxlciA9IG51bGw7XG5sZXQgd2FzSGlkZGVuRHVyaW5nQ29vbGRvd24gPSBmYWxzZTtcbmxldCBjb29sZG93blN0YXJ0VGltZSA9IG51bGw7XG5sZXQgY29vbGRvd25EdXJhdGlvbiA9IG51bGw7XG5cbi8vIFZhcmlhYmxlcyBwYXJhIG1vbml0b3JlbyBkZSBjYXJnYXNcbmxldCBjaGFyZ2VNb25pdG9ySW50ZXJ2YWwgPSBudWxsO1xubGV0IF9sYXN0Q2hhcmdlQ2hlY2sgPSAwO1xuY29uc3QgQ0hBUkdFX0NIRUNLX0lOVEVSVkFMID0gMzAwMDA7IC8vIDMwIHNlZ3VuZG9zIG1cdTAwRTF4aW1vXG5cbi8qKlxuICogQ29uZmlndXJhciBtYW5lam8gZGUgdmlzaWJpbGlkYWQgZGUgcFx1MDBFMWdpbmFcbiAqL1xuZnVuY3Rpb24gc2V0dXBQYWdlVmlzaWJpbGl0eUhhbmRsaW5nKCkge1xuICBpZiAocGFnZVZpc2liaWxpdHlIYW5kbGVyKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHBhZ2VWaXNpYmlsaXR5SGFuZGxlcik7XG4gIH1cbiAgXG4gIHBhZ2VWaXNpYmlsaXR5SGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICBsb2coJ1x1RDgzRFx1RENGMSBQZXN0YVx1MDBGMWEgb2N1bHRhIC0gcGF1c2FuZG8gdGltZXJzJyk7XG4gICAgICBpZiAoaW1hZ2VTdGF0ZS5pbkNvb2xkb3duKSB7XG4gICAgICAgIHdhc0hpZGRlbkR1cmluZ0Nvb2xkb3duID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nKCdcdUQ4M0RcdURDRjEgUGVzdGFcdTAwRjFhIHZpc2libGUgLSByZWFudWRhbmRvIHRpbWVycycpO1xuICAgICAgaWYgKHdhc0hpZGRlbkR1cmluZ0Nvb2xkb3duICYmIGltYWdlU3RhdGUuaW5Db29sZG93bikge1xuICAgICAgICByZWNhbGN1bGF0ZUNvb2xkb3duVGltZSgpO1xuICAgICAgICB3YXNIaWRkZW5EdXJpbmdDb29sZG93biA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBwYWdlVmlzaWJpbGl0eUhhbmRsZXIpO1xufVxuXG4vKipcbiAqIFJlY2FsY3VsYXIgdGllbXBvIGRlIGNvb2xkb3duIGN1YW5kbyBsYSBwZXN0YVx1MDBGMWEgdnVlbHZlIGEgZXN0YXIgYWN0aXZhXG4gKi9cbmZ1bmN0aW9uIHJlY2FsY3VsYXRlQ29vbGRvd25UaW1lKCkge1xuICBpZiAoIWNvb2xkb3duU3RhcnRUaW1lIHx8ICFjb29sZG93bkR1cmF0aW9uKSByZXR1cm47XG4gIFxuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICBjb25zdCBlbGFwc2VkID0gbm93IC0gY29vbGRvd25TdGFydFRpbWU7XG4gIGNvbnN0IHJlbWFpbmluZyA9IE1hdGgubWF4KDAsIGNvb2xkb3duRHVyYXRpb24gLSBlbGFwc2VkKTtcbiAgXG4gIGltYWdlU3RhdGUubmV4dEJhdGNoQ29vbGRvd24gPSBNYXRoLmNlaWwocmVtYWluaW5nIC8gMTAwMCk7XG4gIGltYWdlU3RhdGUuY29vbGRvd25FbmRUaW1lID0gbm93ICsgcmVtYWluaW5nO1xuICBcbiAgbG9nKGBcdUQ4M0RcdUREMDQgUmVjYWxjdWxhbmRvIGNvb2xkb3duOiAke01hdGguY2VpbChyZW1haW5pbmcvMTAwMCl9cyByZXN0YW50ZXNgKTtcbn1cblxuLy8gVmFyaWFibGUgcGFyYSBjb250cm9sYXIgbG9ncyBkZSBtb25pdG9yZW9cbmxldCBfbGFzdENoYXJnZU1vbml0b3JMb2cgPSAwO1xuY29uc3QgTU9OSVRPUl9MT0dfVEhST1RUTEUgPSAxMjAwMDA7IC8vIDIgbWludXRvcyBlbnRyZSBsb2dzIGRlIG1vbml0b3Jlb1xuXG4vKipcbiAqIE1vbml0b3JlYXIgY2FyZ2FzIHBlcmlcdTAwRjNkaWNhbWVudGUgeSBjb250aW51YXIgcGludGFuZG8gc2kgaGF5IHBcdTAwRUR4ZWxlcyBwZW5kaWVudGVzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0Q2hhcmdlTW9uaXRvcmluZygpIHtcbiAgaWYgKGNoYXJnZU1vbml0b3JJbnRlcnZhbCkge1xuICAgIHdpbmRvdy5jbGVhckludGVydmFsKGNoYXJnZU1vbml0b3JJbnRlcnZhbCk7XG4gIH1cbiAgXG4gIC8vIENvbmZpZ3VyYXIgbWFuZWpvIGRlIHZpc2liaWxpZGFkIGRlIHBcdTAwRTFnaW5hXG4gIHNldHVwUGFnZVZpc2liaWxpdHlIYW5kbGluZygpO1xuICBcbiAgY2hhcmdlTW9uaXRvckludGVydmFsID0gd2luZG93LnNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gU2FsdGFyIHZlcmlmaWNhY2lcdTAwRjNuIHNpIGxhIHBlc3RhXHUwMEYxYSBlc3RcdTAwRTEgb2N1bHRhIHBhcmEgYWhvcnJhciByZWN1cnNvc1xuICAgICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNvbG8gdmVyaWZpY2FyIHNpIGhheSBwXHUwMEVEeGVsZXMgcGVuZGllbnRlcyB5IG5vIGVzdGFtb3MgcGludGFuZG8gYWN0aXZhbWVudGVcbiAgICAgIGlmIChpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGggPiAwICYmICFpbWFnZVN0YXRlLnJ1bm5pbmcpIHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvblJlc3VsdCA9IGF3YWl0IGdldFNlc3Npb24oKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChzZXNzaW9uUmVzdWx0LnN1Y2Nlc3MgJiYgc2Vzc2lvblJlc3VsdC5kYXRhLmNoYXJnZXMgPiAwKSB7XG4gICAgICAgICAgY29uc3QgYXZhaWxhYmxlQ2hhcmdlcyA9IE1hdGguZmxvb3Ioc2Vzc2lvblJlc3VsdC5kYXRhLmNoYXJnZXMpO1xuICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU29sbyBsb2dnZWFyIGNhZGEgMiBtaW51dG9zIHBhcmEgcmVkdWNpciBzcGFtXG4gICAgICAgICAgaWYgKG5vdyAtIF9sYXN0Q2hhcmdlTW9uaXRvckxvZyA+IE1PTklUT1JfTE9HX1RIUk9UVExFKSB7XG4gICAgICAgICAgICBsb2coYFx1RDgzRFx1REQwNCBNb25pdG9yZW86ICR7YXZhaWxhYmxlQ2hhcmdlc30gY2FyZ2FzIGRpc3BvbmlibGVzYCk7XG4gICAgICAgICAgICBfbGFzdENoYXJnZU1vbml0b3JMb2cgPSBub3c7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIEFjdHVhbGl6YXIgZXN0YWRvIGRlIGNhcmdhc1xuICAgICAgICAgIGltYWdlU3RhdGUuY3VycmVudENoYXJnZXMgPSBzZXNzaW9uUmVzdWx0LmRhdGEuY2hhcmdlcztcbiAgICAgICAgICBpbWFnZVN0YXRlLm1heENoYXJnZXMgPSBzZXNzaW9uUmVzdWx0LmRhdGEubWF4Q2hhcmdlcztcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZWFudWRhciBwaW50YWRvIGF1dG9tXHUwMEUxdGljYW1lbnRlIHNpIGhheSBjYXJnYXMgc3VmaWNpZW50ZXNcbiAgICAgICAgICBpZiAoYXZhaWxhYmxlQ2hhcmdlcyA+PSBpbWFnZVN0YXRlLnBpeGVsc1BlckJhdGNoKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmltYWdlQm90ICYmIHR5cGVvZiB3aW5kb3cuaW1hZ2VCb3Qub25TdGFydFBhaW50aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGxvZyhgXHVEODNEXHVERTgwIFJlYW51ZGFuZG8gcGludGFkbyBhdXRvbVx1MDBFMXRpY2FtZW50ZSBjb24gJHthdmFpbGFibGVDaGFyZ2VzfSBjYXJnYXNgKTtcbiAgICAgICAgICAgICAgd2luZG93LmltYWdlQm90Lm9uU3RhcnRQYWludGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBTb2xvIGxvZ2dlYXIgZXJyb3JlcyBkZSBtb25pdG9yZW8gb2Nhc2lvbmFsbWVudGVcbiAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICBpZiAobm93IC0gX2xhc3RDaGFyZ2VNb25pdG9yTG9nID4gTU9OSVRPUl9MT0dfVEhST1RUTEUpIHtcbiAgICAgICAgbG9nKGBcdTI2QTBcdUZFMEYgRXJyb3IgZW4gbW9uaXRvcmVvIGRlIGNhcmdhczogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICBfbGFzdENoYXJnZU1vbml0b3JMb2cgPSBub3c7XG4gICAgICB9XG4gICAgfVxuICB9LCBDSEFSR0VfQ0hFQ0tfSU5URVJWQUwpO1xuICBcbiAgbG9nKGBcdTI3MDUgTW9uaXRvcmVvIGRlIGNhcmdhcyBpbmljaWFkbyAoY2FkYSAke0NIQVJHRV9DSEVDS19JTlRFUlZBTC8xMDAwfXMpYCk7XG59XG5cbi8qKlxuICogRGV0ZW5lciBtb25pdG9yZW8gZGUgY2FyZ2FzXG4gKi9cbmZ1bmN0aW9uIHN0b3BDaGFyZ2VNb25pdG9yaW5nKCkge1xuICBpZiAoY2hhcmdlTW9uaXRvckludGVydmFsKSB7XG4gICAgd2luZG93LmNsZWFySW50ZXJ2YWwoY2hhcmdlTW9uaXRvckludGVydmFsKTtcbiAgICBjaGFyZ2VNb25pdG9ySW50ZXJ2YWwgPSBudWxsO1xuICAgIGxvZyhgXHUyM0Y5XHVGRTBGIE1vbml0b3JlbyBkZSBjYXJnYXMgZGV0ZW5pZG9gKTtcbiAgfVxuICBcbiAgLy8gTGltcGlhciBtYW5lam8gZGUgdmlzaWJpbGlkYWQgZGUgcFx1MDBFMWdpbmFcbiAgaWYgKHBhZ2VWaXNpYmlsaXR5SGFuZGxlcikge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBwYWdlVmlzaWJpbGl0eUhhbmRsZXIpO1xuICAgIHBhZ2VWaXNpYmlsaXR5SGFuZGxlciA9IG51bGw7XG4gIH1cbiAgXG4gIC8vIExpbXBpYXIgdmFyaWFibGVzIGRlIGNvb2xkb3duXG4gIGNvb2xkb3duU3RhcnRUaW1lID0gbnVsbDtcbiAgY29vbGRvd25EdXJhdGlvbiA9IG51bGw7XG4gIHdhc0hpZGRlbkR1cmluZ0Nvb2xkb3duID0gZmFsc2U7XG59XG5cbi8vIFZhcmlhYmxlIHBhcmEgY29udHJvbGFyIGxvZ3MgcmVwZXRpdGl2b3NcbmxldCBfbGFzdEluc3VmZmljaWVudENoYXJnZXNMb2cgPSAwO1xuY29uc3QgTE9HX1RIUk9UVExFX01TID0gMzAwMDA7IC8vIDMwIHNlZ3VuZG9zIGVudHJlIGxvZ3Mgc2ltaWxhcmVzXG5cbi8qKlxuICogVmVyaWZpY2FyIGNhcmdhcyBhbnRlcyBkZSBjYWRhIGxvdGUgeSBlc3BlcmFyIHNpIGVzIG5lY2VzYXJpb1xuICovXG5hc3luYyBmdW5jdGlvbiBlbnN1cmVTdWZmaWNpZW50Q2hhcmdlcyhyZXF1aXJlZENoYXJnZXMsIG9uUHJvZ3Jlc3MpIHtcbiAgLy8gVmVyaWZpY2FyIHNpIGVsIGJvdCBzZSBoYSBkZXRlbmlkbyBhbnRlcyBkZSBoYWNlciBjdWFscXVpZXIgb3BlcmFjaVx1MDBGM25cbiAgaWYgKGltYWdlU3RhdGUuc3RvcEZsYWcpIHtcbiAgICBsb2coYFx1RDgzRFx1REVEMSBCb3QgZGV0ZW5pZG8sIGNhbmNlbGFuZG8gdmVyaWZpY2FjaVx1MDBGM24gZGUgY2FyZ2FzYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIFxuICBjb25zdCBzZXNzaW9uUmVzdWx0ID0gYXdhaXQgZ2V0U2Vzc2lvbigpO1xuICBcbiAgaWYgKHNlc3Npb25SZXN1bHQuc3VjY2Vzcykge1xuICAgIGNvbnN0IGF2YWlsYWJsZUNoYXJnZXMgPSBNYXRoLmZsb29yKHNlc3Npb25SZXN1bHQuZGF0YS5jaGFyZ2VzKTtcbiAgICBpbWFnZVN0YXRlLmN1cnJlbnRDaGFyZ2VzID0gc2Vzc2lvblJlc3VsdC5kYXRhLmNoYXJnZXM7XG4gICAgaW1hZ2VTdGF0ZS5tYXhDaGFyZ2VzID0gc2Vzc2lvblJlc3VsdC5kYXRhLm1heENoYXJnZXM7XG4gICAgXG4gICAgaWYgKGF2YWlsYWJsZUNoYXJnZXMgPCByZXF1aXJlZENoYXJnZXMpIHtcbiAgICAgIC8vIFZlcmlmaWNhciBudWV2YW1lbnRlIHNpIGVsIGJvdCBzZSBoYSBkZXRlbmlkbyBhbnRlcyBkZSBlc3BlcmFyXG4gICAgICBpZiAoaW1hZ2VTdGF0ZS5zdG9wRmxhZykge1xuICAgICAgICBsb2coYFx1RDgzRFx1REVEMSBCb3QgZGV0ZW5pZG8gZHVyYW50ZSB2ZXJpZmljYWNpXHUwMEYzbiBkZSBjYXJnYXNgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTb2xvIG1vc3RyYXIgbG9nIHNpIGhhbiBwYXNhZG8gbVx1MDBFMXMgZGUgMzAgc2VndW5kb3MgZGVzZGUgZWwgXHUwMEZBbHRpbW9cbiAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICBpZiAobm93IC0gX2xhc3RJbnN1ZmZpY2llbnRDaGFyZ2VzTG9nID4gTE9HX1RIUk9UVExFX01TKSB7XG4gICAgICAgIGxvZyhgXHUyM0YzIENhcmdhcyBpbnN1ZmljaWVudGVzOiAke2F2YWlsYWJsZUNoYXJnZXN9LyR7cmVxdWlyZWRDaGFyZ2VzfS4gRXNwZXJhbmRvIHJlZ2VuZXJhY2lcdTAwRjNuLi4uYCk7XG4gICAgICAgIF9sYXN0SW5zdWZmaWNpZW50Q2hhcmdlc0xvZyA9IG5vdztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvckNvb2xkb3duKHJlcXVpcmVkQ2hhcmdlcyAtIGF2YWlsYWJsZUNoYXJnZXMsIG9uUHJvZ3Jlc3MpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZmljYXIgc2kgZWwgYm90IHNlIGRldHV2byBkdXJhbnRlIGVsIGNvb2xkb3duIGFudGVzIGRlIHJlY3Vyc2lcdTAwRjNuXG4gICAgICBpZiAoaW1hZ2VTdGF0ZS5zdG9wRmxhZykge1xuICAgICAgICBsb2coYFx1RDgzRFx1REVEMSBCb3QgZGV0ZW5pZG8gZHVyYW50ZSBjb29sZG93biwgY2FuY2VsYW5kbyByZWN1cnNpXHUwMEYzbmApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFZlcmlmaWNhciBudWV2YW1lbnRlIGRlc3B1XHUwMEU5cyBkZWwgY29vbGRvd25cbiAgICAgIHJldHVybiBhd2FpdCBlbnN1cmVTdWZmaWNpZW50Q2hhcmdlcyhyZXF1aXJlZENoYXJnZXMsIG9uUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICBcbiAgICAvLyBSZXNldCBkZWwgdGhyb3R0bGUgY3VhbmRvIGhheSBzdWZpY2llbnRlcyBjYXJnYXNcbiAgICBfbGFzdEluc3VmZmljaWVudENoYXJnZXNMb2cgPSAwO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIFxuICBsb2coYFx1MjZBMFx1RkUwRiBObyBzZSBwdWRvIHZlcmlmaWNhciBjYXJnYXMsIGNvbnRpbnVhbmRvIGNvbiB2YWxvciBjYWNoZWQ6ICR7aW1hZ2VTdGF0ZS5jdXJyZW50Q2hhcmdlc31gKTtcbiAgcmV0dXJuIGltYWdlU3RhdGUuY3VycmVudENoYXJnZXMgPj0gcmVxdWlyZWRDaGFyZ2VzO1xufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NJbWFnZShpbWFnZURhdGEsIHN0YXJ0UG9zaXRpb24sIG9uUHJvZ3Jlc3MsIG9uQ29tcGxldGUsIG9uRXJyb3IpIHtcbiAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBpbWFnZURhdGE7XG4gIGNvbnN0IHsgeDogbG9jYWxTdGFydFgsIHk6IGxvY2FsU3RhcnRZIH0gPSBzdGFydFBvc2l0aW9uO1xuICBcbiAgbG9nKGBJbmljaWFuZG8gcGludGFkbzogaW1hZ2VuKCR7d2lkdGh9eCR7aGVpZ2h0fSkgaW5pY2lvIExPQ0FMKCR7bG9jYWxTdGFydFh9LCR7bG9jYWxTdGFydFl9KSB0aWxlKCR7aW1hZ2VTdGF0ZS50aWxlWH0sJHtpbWFnZVN0YXRlLnRpbGVZfSlgKTtcbiAgbG9nKGBcdUQ4M0NcdURGQTggUGF0clx1MDBGM246ICR7aW1hZ2VTdGF0ZS5wYWludFBhdHRlcm59YCk7XG4gIFxuICAvLyBJbmljaWFyIG1vbml0b3JlbyBkZSBjYXJnYXNcbiAgc3RhcnRDaGFyZ2VNb25pdG9yaW5nKCk7XG4gIFxuICAvLyAqKiogTlVFVk86IEdlbmVyYXIgdG9rZW4gYWwgaW5pY2lvIGRlbCBwcm9jZXNvICoqKlxuICB0cnkge1xuICAgIGxvZyhcIlx1RDgzRFx1REQxMSBHZW5lcmFuZG8gdG9rZW4gVHVybnN0aWxlIGFsIGluaWNpbyBkZWwgcHJvY2Vzby4uLlwiKTtcbiAgICBjb25zdCBpbml0aWFsVG9rZW4gPSBhd2FpdCBlbnN1cmVUb2tlbigpO1xuICAgIGlmICghaW5pdGlhbFRva2VuKSB7XG4gICAgICBsb2coXCJcdTI2QTBcdUZFMEYgTm8gc2UgcHVkbyBnZW5lcmFyIHRva2VuIGluaWNpYWwsIGNvbnRpbnVhbmRvIGNvbiBmbHVqbyBub3JtYWxcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZyhcIlx1MjcwNSBUb2tlbiBpbmljaWFsIGdlbmVyYWRvIGV4aXRvc2FtZW50ZVwiKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nKFwiXHUyNkEwXHVGRTBGIEVycm9yIGdlbmVyYW5kbyB0b2tlbiBpbmljaWFsOlwiLCBlcnJvci5tZXNzYWdlKTtcbiAgfVxuICBcbiAgLy8gR2VuZXJhciBjb2xhIGRlIHBcdTAwRUR4ZWxlcyBzaSBubyBleGlzdGVcbiAgaWYgKCFpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscyB8fCBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGggPT09IDAgfHwgKGltYWdlU3RhdGUubGFzdFBvc2l0aW9uLnggPT09IDAgJiYgaW1hZ2VTdGF0ZS5sYXN0UG9zaXRpb24ueSA9PT0gMCkpIHtcbiAgICBsb2coJ0dlbmVyYW5kbyBjb2xhIGRlIHBcdTAwRUR4ZWxlcy4uLicpO1xuICAgIGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzID0gZ2VuZXJhdGVQaXhlbFF1ZXVlKGltYWdlRGF0YSwgc3RhcnRQb3NpdGlvbiwgaW1hZ2VTdGF0ZS50aWxlWCwgaW1hZ2VTdGF0ZS50aWxlWSk7XG4gICAgXG4gICAgLy8gQXBsaWNhciBwYXRyXHUwMEYzbiBkZSBwaW50YWRvXG4gICAgaWYgKGltYWdlU3RhdGUucGFpbnRQYXR0ZXJuICYmIGltYWdlU3RhdGUucGFpbnRQYXR0ZXJuICE9PSAnbGluZWFyX3N0YXJ0Jykge1xuICAgICAgbG9nKGBcdUQ4M0NcdURGQTggQXBsaWNhbmRvIHBhdHJcdTAwRjNuIGRlIHBpbnRhZG86ICR7aW1hZ2VTdGF0ZS5wYWludFBhdHRlcm59YCk7XG4gICAgICBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscyA9IGFwcGx5UGFpbnRQYXR0ZXJuKGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLCBpbWFnZVN0YXRlLnBhaW50UGF0dGVybiwgaW1hZ2VEYXRhKTtcbiAgICB9XG4gICAgXG4gICAgLy8gU2kgaGF5IHVuYSBwb3NpY2lcdTAwRjNuIGRlIGNvbnRpbnVhY2lcdTAwRjNuLCBmaWx0cmFyIHBcdTAwRUR4ZWxlcyB5YSBwaW50YWRvc1xuICAgIGlmIChpbWFnZVN0YXRlLmxhc3RQb3NpdGlvbi54ID4gMCB8fCBpbWFnZVN0YXRlLmxhc3RQb3NpdGlvbi55ID4gMCkge1xuICAgICAgaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMgPSBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5maWx0ZXIocGl4ZWwgPT4ge1xuICAgICAgICBjb25zdCBwaXhlbEluZGV4ID0gcGl4ZWwuaW1hZ2VZICogd2lkdGggKyBwaXhlbC5pbWFnZVg7XG4gICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGltYWdlU3RhdGUubGFzdFBvc2l0aW9uLnkgKiB3aWR0aCArIGltYWdlU3RhdGUubGFzdFBvc2l0aW9uLng7XG4gICAgICAgIHJldHVybiBwaXhlbEluZGV4ID49IGxhc3RJbmRleDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcblxuXG4gICAgbG9nKGBDb2xhIGdlbmVyYWRhOiAke2ltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLmxlbmd0aH0gcFx1MDBFRHhlbGVzIHBlbmRpZW50ZXNgKTtcbiAgICAvLyBBY3R1YWxpemFyIG92ZXJsYXkgZGVsIHBsYW4gYWwgKHJlKWdlbmVyYXIgbGEgY29sYVxuICAgIHRyeSB7XG4gICAgICBpZiAod2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fKSB7XG4gICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5pbmplY3RTdHlsZXMoKTtcbiAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldEVuYWJsZWQodHJ1ZSk7XG4gICAgICAgIGlmIChpbWFnZVN0YXRlLnN0YXJ0UG9zaXRpb24gJiYgaW1hZ2VTdGF0ZS50aWxlWCAhPT0gdW5kZWZpbmVkICYmIGltYWdlU3RhdGUudGlsZVkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zZXRBbmNob3Ioe1xuICAgICAgICAgICAgdGlsZVg6IGltYWdlU3RhdGUudGlsZVgsXG4gICAgICAgICAgICB0aWxlWTogaW1hZ2VTdGF0ZS50aWxlWSxcbiAgICAgICAgICAgIHB4WDogaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uLngsXG4gICAgICAgICAgICBweFk6IGltYWdlU3RhdGUuc3RhcnRQb3NpdGlvbi55XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldFBsYW4oaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMsIHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIG5leHRCYXRjaENvdW50OiBpbWFnZVN0YXRlLnBpeGVsc1BlckJhdGNoXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZygnXHUyNkEwXHVGRTBGIEVycm9yIGFjdHVhbGl6YW5kbyBwbGFuIG92ZXJsYXk6JywgZSk7XG4gICAgfVxuXG4gICAgLy8gKEFOVEVTKSBOVUVWTzogUHJldmFsaWRhciB0b2RhIGxhIGNvbGEgYW50ZXMgZGUgY29tZW56YXIgYSBwaW50YXJcbiAgICAvLyBhd2FpdCBwcmV2YWxpZGF0ZUFsbFBpeGVsc09uU3RhcnQob25Qcm9ncmVzcyk7XG4gIH1cbiAgXG5cblxuICB0cnkge1xuICAgIHdoaWxlIChpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGggPiAwICYmICFpbWFnZVN0YXRlLnN0b3BGbGFnKSB7XG4gICAgICAvLyBWZXJpZmljYXIgY2FyZ2FzIGRpc3BvbmlibGVzXG4gICAgICBsZXQgYXZhaWxhYmxlQ2hhcmdlcyA9IE1hdGguZmxvb3IoaW1hZ2VTdGF0ZS5jdXJyZW50Q2hhcmdlcyk7XG4gICAgICBcbiAgICAgIC8vIERldGVybWluYXIgdGFtYVx1MDBGMW8gZGVsIGxvdGUgYmFzYWRvIGVuIGNvbmZpZ3VyYWNpXHUwMEYzblxuICAgICAgbGV0IHBpeGVsc1BlckJhdGNoO1xuICAgICAgXG4gICAgICAvLyBEZWJ1ZyBsb2dnaW5nIHBhcmEgZGlhZ25vc3RpY2FyIHByb2JsZW1hIGRlbCBwcmltZXIgbG90ZVxuICAgICAgbG9nKGBcdUQ4M0RcdUREMEQgRXN0YWRvIGRlbCBwcmltZXIgbG90ZSAtIGlzRmlyc3RCYXRjaDogJHtpbWFnZVN0YXRlLmlzRmlyc3RCYXRjaH0sIHVzZUFsbENoYXJnZXNGaXJzdDogJHtpbWFnZVN0YXRlLnVzZUFsbENoYXJnZXNGaXJzdH0sIGF2YWlsYWJsZUNoYXJnZXM6ICR7YXZhaWxhYmxlQ2hhcmdlc31gKTtcbiAgICAgIFxuICAgICAgaWYgKGltYWdlU3RhdGUuaXNGaXJzdEJhdGNoICYmIGltYWdlU3RhdGUudXNlQWxsQ2hhcmdlc0ZpcnN0ICYmIGF2YWlsYWJsZUNoYXJnZXMgPiAwKSB7XG4gICAgICAgIC8vIFByaW1lcmEgcGFzYWRhOiB1c2FyIHRvZGFzIGxhcyBjYXJnYXMgZGlzcG9uaWJsZXNcbiAgICAgICAgcGl4ZWxzUGVyQmF0Y2ggPSBNYXRoLm1pbihhdmFpbGFibGVDaGFyZ2VzLCBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGgpO1xuICAgICAgICBpbWFnZVN0YXRlLmlzRmlyc3RCYXRjaCA9IGZhbHNlOyAvLyBNYXJjYXIgcXVlIHlhIG5vIGVzIGxhIHByaW1lcmEgcGFzYWRhXG4gICAgICAgIGxvZyhgXHVEODNEXHVERTgwIFByaW1lcmEgcGFzYWRhOiB1c2FuZG8gJHtwaXhlbHNQZXJCYXRjaH0gY2FyZ2FzIGRlICR7YXZhaWxhYmxlQ2hhcmdlc30gZGlzcG9uaWJsZXNgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFBhc2FkYXMgc2lndWllbnRlczogdXNhciBjb25maWd1cmFjaVx1MDBGM24gbm9ybWFsXG4gICAgICAgIHBpeGVsc1BlckJhdGNoID0gTWF0aC5taW4oaW1hZ2VTdGF0ZS5waXhlbHNQZXJCYXRjaCwgaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMubGVuZ3RoKTtcbiAgICAgICAgbG9nKGBcdTI2OTlcdUZFMEYgUGFzYWRhIG5vcm1hbDogdXNhbmRvICR7cGl4ZWxzUGVyQmF0Y2h9IHBcdTAwRUR4ZWxlcyAoY29uZmlndXJhZG86ICR7aW1hZ2VTdGF0ZS5waXhlbHNQZXJCYXRjaH0pYCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFVzYXIgbGEgbnVldmEgZnVuY2lcdTAwRjNuIGRlIHZlcmlmaWNhY2lcdTAwRjNuIGRlIGNhcmdhc1xuICAgICAgY29uc3QgaGFzRW5vdWdoQ2hhcmdlcyA9IGF3YWl0IGVuc3VyZVN1ZmZpY2llbnRDaGFyZ2VzKHBpeGVsc1BlckJhdGNoLCBvblByb2dyZXNzKTtcbiAgICAgIGlmICghaGFzRW5vdWdoQ2hhcmdlcykge1xuICAgICAgICBsb2coYFx1MjZBMFx1RkUwRiBObyBzZSBwdWRpZXJvbiBvYnRlbmVyIHN1ZmljaWVudGVzIGNhcmdhcywgcGF1c2FuZG8gcGludGFkb2ApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciBhdmFpbGFibGVDaGFyZ2VzIGRlc3B1XHUwMEU5cyBkZSBsYSB2ZXJpZmljYWNpXHUwMEYzblxuICAgICAgYXZhaWxhYmxlQ2hhcmdlcyA9IE1hdGguZmxvb3IoaW1hZ2VTdGF0ZS5jdXJyZW50Q2hhcmdlcyk7XG4gICAgICBcbiAgLy8gVG9tYXIgZWwgc2lndWllbnRlIGxvdGUgZGUgcFx1MDBFRHhlbGVzXG4gICAgICBjb25zdCBpbml0aWFsQmF0Y2ggPSBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5zcGxpY2UoMCwgcGl4ZWxzUGVyQmF0Y2gpO1xuICAgICAgbGV0IGJhdGNoID0gaW5pdGlhbEJhdGNoO1xuICAgICAgbGV0IHNraXBwZWRDb3VudCA9IDA7XG4gICAgICBcbiAgICAgIGxvZyhgVmVyaWZpY2FuZG8gbG90ZSBkZSAke2luaXRpYWxCYXRjaC5sZW5ndGh9IHBcdTAwRUR4ZWxlcy4uLmApO1xuICAgICAgXG4gICAgICBsb2coYFBpbnRhbmRvIGxvdGUgZGUgJHtiYXRjaC5sZW5ndGh9IHBcdTAwRUR4ZWxlcy4uLmApO1xuICAgICAgXG5cbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciBvdmVybGF5IGRlbCBwbGFuIHBhcmEgcmVmbGVqYXIgZWwgbG90ZSBzaWd1aWVudGUgcmVzYWx0YWRvXG4gICAgICB0cnkge1xuICAgICAgICBpZiAod2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fKSB7XG4gICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldFBsYW4oaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMsIHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsIC8vIE1hbnRlbmVyIGhhYmlsaXRhZG9cbiAgICAgICAgICAgIG5leHRCYXRjaENvdW50OiBpbWFnZVN0YXRlLnBpeGVsc1BlckJhdGNoXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3IgYWN0dWFsaXphbmRvIHBsYW4gb3ZlcmxheSBkdXJhbnRlIHBpbnRhZG86JywgZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFBpbnRhciBlbCBsb3RlIGNvbiBzaXN0ZW1hIGRlIHJlaW50ZW50b3NcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBhaW50UGl4ZWxCYXRjaFdpdGhSZXRyeShiYXRjaCwgb25Qcm9ncmVzcyk7XG4gICAgICBcbiAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQucGFpbnRlZCA+IDApIHtcbiAgICAgICAgLy8gU3VtYXIgcFx1MDBFRHhlbGVzIHJlYWxtZW50ZSBwaW50YWRvcyArIHBcdTAwRUR4ZWxlcyBvbWl0aWRvcyBwb3IgdmVyaWZpY2FjaVx1MDBGM24gaW50ZWxpZ2VudGVcbiAgICAgICAgaW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzICs9IHJlc3VsdC5wYWludGVkICsgc2tpcHBlZENvdW50O1xuICAgICAgICBcbiAgICAgICAgLy8gUmVwb3J0YXIgbVx1MDBFOXRyaWNhcyBkZWwgbG90ZSBhY3R1YWxcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwaXhlbHNQYWludGVkKHJlc3VsdC5wYWludGVkICsgc2tpcHBlZENvdW50LCB7IGJvdFZhcmlhbnQ6ICdhdXRvLWltYWdlJyB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxvZygnXHUyNkEwXHVGRTBGIEVycm9yIHJlcG9ydGFuZG8gbVx1MDBFOXRyaWNhczonLCBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFxuICAvLyBBY3R1YWxpemFyIGNhcmdhcyBjb25zdW1pZGFzICh1bmEgc29sYSB2ZXopXG4gIGltYWdlU3RhdGUuY3VycmVudENoYXJnZXMgPSBNYXRoLm1heCgwLCBpbWFnZVN0YXRlLmN1cnJlbnRDaGFyZ2VzIC0gcmVzdWx0LnBhaW50ZWQpO1xuICBsb2coYENhcmdhcyBkZXNwdVx1MDBFOXMgZGVsIGxvdGU6ICR7aW1hZ2VTdGF0ZS5jdXJyZW50Q2hhcmdlcy50b0ZpeGVkKDEpfSAoY29uc3VtaWRhczogJHtyZXN1bHQucGFpbnRlZH0pYCk7XG4gICAgICAgIFxuICAgICAgICAvLyBBY3R1YWxpemFyIHBvc2ljaVx1MDBGM24gcGFyYSBjb250aW51YXIgZGVzZGUgYXF1XHUwMEVEIHNpIHNlIGludGVycnVtcGVcbiAgICAgICAgaWYgKGJhdGNoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBsYXN0UGl4ZWwgPSBiYXRjaFtiYXRjaC5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpbWFnZVN0YXRlLmxhc3RQb3NpdGlvbiA9IHsgeDogbGFzdFBpeGVsLmltYWdlWCwgeTogbGFzdFBpeGVsLmltYWdlWSB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsb2coYExvdGUgZXhpdG9zbzogJHtyZXN1bHQucGFpbnRlZH0vJHtiYXRjaC5sZW5ndGh9IHBcdTAwRUR4ZWxlcyBwaW50YWRvcy4gVG90YWw6ICR7aW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzfS8ke2ltYWdlU3RhdGUudG90YWxQaXhlbHN9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhciB0aWVtcG8gZXN0aW1hZG9cbiAgICAgICAgY29uc3QgZXN0aW1hdGVkVGltZSA9IGNhbGN1bGF0ZUVzdGltYXRlZFRpbWUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1vc3RyYXIgbWVuc2FqZSBkZSBjb25maXJtYWNpXHUwMEYzbiBkZSBwYXNhZGEgY29tcGxldGFkYVxuICAgICAgICBjb25zdCBwcm9ncmVzc1BlcmNlbnQgPSAoKGltYWdlU3RhdGUucGFpbnRlZFBpeGVscyAvIGltYWdlU3RhdGUudG90YWxQaXhlbHMpICogMTAwKS50b0ZpeGVkKDEpO1xuICAgICAgICBjb25zdCBzdWNjZXNzTWVzc2FnZSA9IHQoJ2ltYWdlLnBhc3NDb21wbGV0ZWQnLCB7XG4gICAgICAgICAgcGFpbnRlZDogcmVzdWx0LnBhaW50ZWQsXG4gICAgICAgICAgcGVyY2VudDogcHJvZ3Jlc3NQZXJjZW50LFxuICAgICAgICAgIGN1cnJlbnQ6IGltYWdlU3RhdGUucGFpbnRlZFBpeGVscyxcbiAgICAgICAgICB0b3RhbDogaW1hZ2VTdGF0ZS50b3RhbFBpeGVsc1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFjdHVhbGl6YXIgcHJvZ3Jlc28gY29uIG1lbnNhamUgZGUgXHUwMEU5eGl0b1xuICAgICAgICBpZiAob25Qcm9ncmVzcykge1xuICAgICAgICAgIG9uUHJvZ3Jlc3MoaW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzLCBpbWFnZVN0YXRlLnRvdGFsUGl4ZWxzLCBzdWNjZXNzTWVzc2FnZSwgZXN0aW1hdGVkVGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gIC8vIFBhdXNhIHBhcmEgcXVlIGVsIHVzdWFyaW8gdmVhIGVsIG1lbnNhamUgZGUgXHUwMEU5eGl0byBhbnRlcyBkZWwgY29vbGRvd25cbiAgICAgICAgYXdhaXQgc2xlZXAoMjAwMCk7XG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdC5zaG91bGRDb250aW51ZSkge1xuICAgICAgICAvLyBTaSBlbCBzaXN0ZW1hIGRlIHJlaW50ZW50b3MgZmFsbFx1MDBGMyBwZXJvIGRlYmUgY29udGludWFyXG4gICAgICAgIGxvZyhgTG90ZSBmYWxsXHUwMEYzIGRlc3B1XHUwMEU5cyBkZSB0b2RvcyBsb3MgcmVpbnRlbnRvcywgY29udGludWFuZG8gY29uIHNpZ3VpZW50ZSBsb3RlLi4uYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbiBjYXNvIGRlIGZhbGxvLCBkZXZvbHZlciBlbCBsb3RlIGEgbGEgY29sYVxuICAgICAgICBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy51bnNoaWZ0KC4uLmJhdGNoKTtcbiAgICAgICAgbG9nKGBMb3RlIGZhbGxcdTAwRjM6IHJlaW50ZW50YW5kbyBlbiA1IHNlZ3VuZG9zLi4uYCk7XG4gICAgICAgIGF3YWl0IHNsZWVwKDUwMDApO1xuICAgICAgfVxuICAgICAgXG4gIC8vIFBhdXNhIGJyZXZlIGVudHJlIGxvdGVzXG4gICAgICBhd2FpdCBzbGVlcCg1MDApO1xuICAgIH1cbiAgICBcbiAgICBpZiAoaW1hZ2VTdGF0ZS5zdG9wRmxhZykge1xuICAgICAgbG9nKGBQaW50YWRvIHBhdXNhZG8gZW4gcFx1MDBFRHhlbCBpbWFnZW4oJHtpbWFnZVN0YXRlLmxhc3RQb3NpdGlvbi54fSwke2ltYWdlU3RhdGUubGFzdFBvc2l0aW9uLnl9KWApO1xuICAgICAgLy8gTWFudGVuZXIgbW9uaXRvcmVvIGFjdGl2byBwYXJhIHJlYW51ZGFyIGF1dG9tXHUwMEUxdGljYW1lbnRlXG4gICAgICBpZiAob25Db21wbGV0ZSkge1xuICAgICAgICBvbkNvbXBsZXRlKGZhbHNlLCBpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2coYFBpbnRhZG8gY29tcGxldGFkbzogJHtpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHN9IHBcdTAwRUR4ZWxlcyBwaW50YWRvc2ApO1xuICAgICAgaW1hZ2VTdGF0ZS5sYXN0UG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgIGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzID0gW107XG4gICAgICAvLyBEZXRlbmVyIG1vbml0b3JlbyBhbCBjb21wbGV0YXJcbiAgICAgIHN0b3BDaGFyZ2VNb25pdG9yaW5nKCk7XG4gICAgICAvLyBMaW1waWFyIG92ZXJsYXkgZGVsIHBsYW4gYWwgY29tcGxldGFyXG4gICAgICB0cnkge1xuICAgICAgICBpZiAod2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fKSB7XG4gICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldFBsYW4oW10sIHsgXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLCAvLyBNYW50ZW5lciBoYWJpbGl0YWRvIHBlcm8gc2luIHBcdTAwRUR4ZWxlc1xuICAgICAgICAgICAgbmV4dEJhdGNoQ291bnQ6IDAgXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbG9nKCdcdTI3MDUgUGxhbiBvdmVybGF5IGxpbXBpYWRvIGFsIGNvbXBsZXRhciBwaW50YWRvJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3IgbGltcGlhbmRvIHBsYW4gb3ZlcmxheTonLCBlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvbkNvbXBsZXRlKSB7XG4gICAgICAgIG9uQ29tcGxldGUodHJ1ZSwgaW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nKCdFcnJvciBlbiBwcm9jZXNvIGRlIHBpbnRhZG86JywgZXJyb3IpO1xuICAgIHN0b3BDaGFyZ2VNb25pdG9yaW5nKCk7XG4gICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFpbnRQaXhlbEJhdGNoKGJhdGNoLCBwcm92aWRlZFRva2VuID0gbnVsbCkge1xuICB0cnkge1xuICAgIGlmICghYmF0Y2ggfHwgYmF0Y2gubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgcGFpbnRlZDogMCwgZXJyb3I6ICdMb3RlIHZhY1x1MDBFRG8nIH07XG4gICAgfVxuICAgIFxuICAgIC8vIEFncnVwYXIgZWwgbG90ZSBwb3IgdGlsZSBjb21vIGhhY2Ugd3BsYWNlclxuICAgIGNvbnN0IGJ5VGlsZSA9IG5ldyBNYXAoKTsgLy8ga2V5OiBgJHt0eH0sJHt0eX1gIC0+IHsgY29vcmRzOiBbXSwgY29sb3JzOiBbXSwgdHg6IHAudGlsZVgsIHR5OiBwLnRpbGVZIH1cbiAgICBmb3IgKGNvbnN0IHAgb2YgYmF0Y2gpIHtcbiAgICAgIGNvbnN0IGtleSA9IGAke3AudGlsZVh9LCR7cC50aWxlWX1gO1xuICAgICAgaWYgKCFieVRpbGUuaGFzKGtleSkpIGJ5VGlsZS5zZXQoa2V5LCB7IGNvb3JkczogW10sIGNvbG9yczogW10sIHR4OiBwLnRpbGVYLCB0eTogcC50aWxlWSB9KTtcbiAgICAgIGNvbnN0IGJ1Y2tldCA9IGJ5VGlsZS5nZXQoa2V5KTtcbiAgICAgIGJ1Y2tldC5jb29yZHMucHVzaChwLmxvY2FsWCwgcC5sb2NhbFkpO1xuICAgICAgYnVja2V0LmNvbG9ycy5wdXNoKHAuY29sb3IuaWQgfHwgcC5jb2xvci52YWx1ZSB8fCAxKTtcbiAgICB9XG5cbiAgLy8gT2J0ZW5lciB1biBcdTAwRkFuaWNvIHRva2VuIChyZXV0aWxpemFyIHNpIHNlIHBhc2EgZGVzZGUgbml2ZWwgc3VwZXJpb3IpXG4gIGNvbnN0IHRva2VuID0gcHJvdmlkZWRUb2tlbiB8fCBhd2FpdCBlbnN1cmVUb2tlbigpO1xuXG4gICAgbGV0IHRvdGFsUGFpbnRlZCA9IDA7XG4gICAgZm9yIChjb25zdCB7IGNvb3JkcywgY29sb3JzLCB0eCwgdHkgfSBvZiBieVRpbGUudmFsdWVzKCkpIHtcbiAgICAgIGlmIChjb2xvcnMubGVuZ3RoID09PSAwKSBjb250aW51ZTtcbiAgICAgIC8vIFNhbmVhZG8gZXh0cmEgZGUgY29vcmRzICgwLi45OTkpIHkgZGVwdXJhY2lcdTAwRjNuIGRlIHJhbmdvc1xuICAgICAgY29uc3Qgc2FuaXRpemVkID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBjb25zdCB4ID0gKChOdW1iZXIoY29vcmRzW2ldKSAlIDEwMDApICsgMTAwMCkgJSAxMDAwO1xuICAgICAgICBjb25zdCB5ID0gKChOdW1iZXIoY29vcmRzW2kgKyAxXSkgJSAxMDAwKSArIDEwMDApICUgMTAwMDtcbiAgICAgICAgLy8gRmlsdHJhciBOYU4vdW5kZWZpbmVkXG4gICAgICAgIGlmIChOdW1iZXIuaXNGaW5pdGUoeCkgJiYgTnVtYmVyLmlzRmluaXRlKHkpKSB7XG4gICAgICAgICAgc2FuaXRpemVkLnB1c2goeCwgeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIExvZyBkZSBkaWFnblx1MDBGM3N0aWNvXG4gICAgICB0cnkge1xuICAgICAgICBsZXQgbWluWCA9IDk5OSwgbWF4WCA9IDAsIG1pblkgPSA5OTksIG1heFkgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNhbml0aXplZC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgIGNvbnN0IHggPSBzYW5pdGl6ZWRbaV0sIHkgPSBzYW5pdGl6ZWRbaSArIDFdO1xuICAgICAgICAgIGlmICh4IDwgbWluWCkgbWluWCA9IHg7IGlmICh4ID4gbWF4WCkgbWF4WCA9IHg7XG4gICAgICAgICAgaWYgKHkgPCBtaW5ZKSBtaW5ZID0geTsgaWYgKHkgPiBtYXhZKSBtYXhZID0geTtcbiAgICAgICAgfVxuICAgICAgICBsb2coYFtJTUddIEVudmlhbmRvIHRpbGUgJHt0eH0sJHt0eX06ICR7Y29sb3JzLmxlbmd0aH0gcHggfCB4Olske21pblh9LCR7bWF4WH1dIHk6WyR7bWluWX0sJHttYXhZfV1gKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICAvLyBub29wIChzb2xvIGRpYWduXHUwMEYzc3RpY28pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBwb3N0UGl4ZWxCYXRjaEltYWdlKHR4LCB0eSwgc2FuaXRpemVkLCBjb2xvcnMsIHRva2VuKTtcbiAgICAgIGlmIChyZXNwLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgcGFpbnRlZDogdG90YWxQYWludGVkLFxuICAgICAgICAgIGVycm9yOiByZXNwLmpzb24/Lm1lc3NhZ2UgfHwgYEhUVFAgJHtyZXNwLnN0YXR1c31gLFxuICAgICAgICAgIHN0YXR1czogcmVzcC5zdGF0dXNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSByZWFsbWVudGUgc2UgcGludGFyb24gcFx1MDBFRHhlbGVzXG4gICAgICBjb25zdCBhY3R1YWxQYWludGVkID0gcmVzcC5wYWludGVkIHx8IDA7XG4gICAgICBpZiAoYWN0dWFsUGFpbnRlZCA9PT0gMCAmJiBjb2xvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBsb2coYFx1MjZBMFx1RkUwRiBBUEkgZGV2b2x2aVx1MDBGMyAyMDAgT0sgcGVybyBwYWludGVkPTAgcGFyYSAke2NvbG9ycy5sZW5ndGh9IHBcdTAwRUR4ZWxlcyBlbiB0aWxlICR7dHh9LCR7dHl9YCk7XG4gICAgICAgIC8vIENvbnNpZGVyYXIgZXN0byBjb21vIHVuIGZhbGxvIHBhcmNpYWwgcGFyYSBhY3RpdmFyIHJlaW50ZW50b3NcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBwYWludGVkOiB0b3RhbFBhaW50ZWQsXG4gICAgICAgICAgZXJyb3I6IGBBUEkgZGV2b2x2aVx1MDBGMyBwYWludGVkPTAgcGFyYSAke2NvbG9ycy5sZW5ndGh9IHBcdTAwRUR4ZWxlc2AsXG4gICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgc2hvdWxkUmV0cnk6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdG90YWxQYWludGVkICs9IGFjdHVhbFBhaW50ZWQ7XG4gICAgICBsb2coYFx1MjcwNSBUaWxlICR7dHh9LCR7dHl9OiAke2FjdHVhbFBhaW50ZWR9LyR7Y29sb3JzLmxlbmd0aH0gcFx1MDBFRHhlbGVzIHBpbnRhZG9zIGV4aXRvc2FtZW50ZWApO1xuICAgIH1cblxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIHBhaW50ZWQ6IHRvdGFsUGFpbnRlZCB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZygnRXJyb3IgZW4gcGFpbnRQaXhlbEJhdGNoOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBwYWludGVkOiAwLFxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICB9O1xuICB9XG59XG5cbi8vIFZhcmlhYmxlcyBwYXJhIGNvbnRyb2xhciBsb2dzIGRlIGVycm9yZXMgcmVwZXRpdGl2b3NcbmxldCBfbGFzdE5ldHdvcmtFcnJvckxvZyA9IDA7XG5sZXQgX2NvbnNlY3V0aXZlTmV0d29ya0Vycm9ycyA9IDA7XG5jb25zdCBORVRXT1JLX0VSUk9SX0xPR19USFJPVFRMRSA9IDYwMDAwOyAvLyAxIG1pbnV0byBlbnRyZSBsb2dzIGRlIGVycm9yZXMgZGUgcmVkXG5cbi8vIEZ1bmNpXHUwMEYzbiBkZSBwaW50YWRvIGNvbiBzaXN0ZW1hIGRlIHJlaW50ZW50b3MgKGFkYXB0YWRvIGRlbCBBdXRvLUZhcm0pXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFpbnRQaXhlbEJhdGNoV2l0aFJldHJ5KGJhdGNoLCBvblByb2dyZXNzKSB7XG4gIGNvbnN0IG1heEF0dGVtcHRzID0gNTsgLy8gNSBpbnRlbnRvcyBjb21vIGVuIGVsIEZhcm1cbiAgY29uc3QgYmFzZURlbGF5ID0gMzAwMDsgLy8gRGVsYXkgYmFzZSBkZSAzIHNlZ3VuZG9zXG4gIGxldCB0b2tlbiA9IG51bGw7XG5cbiAgLy8gT2J0ZW5lciB1biB0b2tlbiB1bmEgc29sYSB2ZXogYW50ZXMgZGUgbG9zIHJlaW50ZW50b3NcbiAgdHJ5IHtcbiAgICB0b2tlbiA9IGF3YWl0IGVuc3VyZVRva2VuKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2coJ1x1MjZBMFx1RkUwRiBObyBzZSBwdWRvIG9idGVuZXIgdG9rZW4gaW5pY2lhbCwgc2UgaW50ZW50YXJcdTAwRTEgZW4gZWwgcHJpbWVyIGludGVudG86JywgZS5tZXNzYWdlKTtcbiAgfVxuXG4gIGZvciAobGV0IGF0dGVtcHQgPSAxOyBhdHRlbXB0IDw9IG1heEF0dGVtcHRzOyBhdHRlbXB0KyspIHtcbiAgICB0cnkge1xuICAgICAgLy8gU2kgbm8gdGVuZW1vcyB0b2tlbiB0b2Rhdlx1MDBFRGEgKGZhbGxvIGFsIGluaWNpbykgaW50ZW50YXIgZ2VuZXJhcmxvIGFob3JhXG4gICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgIHRva2VuID0gYXdhaXQgZW5zdXJlVG9rZW4oKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGFpbnRQaXhlbEJhdGNoKGJhdGNoLCB0b2tlbik7XG5cbiAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICBpbWFnZVN0YXRlLnJldHJ5Q291bnQgPSAwOyAvLyBSZXNldCBlbiBcdTAwRTl4aXRvXG4gICAgICAgIF9jb25zZWN1dGl2ZU5ldHdvcmtFcnJvcnMgPSAwOyAvLyBSZXNldCBjb250YWRvciBkZSBlcnJvcmVzXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFRva2VuIGludlx1MDBFMWxpZG8gLyBleHBpcmFkbyAtPiByZWdlbmVyYXIgaW5tZWRpYXRhbWVudGUgeSByZXBldGlyIGludGVudG8gc2luIHBlbmFsaXphciBiYWNrb2ZmIGNvbXBsZXRvXG4gICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgIGxvZygnXHVEODNEXHVERDEwIDQwMyByZWNpYmlkbzogaW52YWxpZGFuZG8geSByZWdlbmVyYW5kbyB0b2tlbiBwYXJhIHJlaW50ZW50byBpbm1lZGlhdG8nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0b2tlbiA9IGF3YWl0IGVuc3VyZVRva2VuKHRydWUpOyAvLyBmb3J6YXIgbnVldm8gdG9rZW5cbiAgICAgICAgICAvLyBSZWludGVudGFyIGVsIG1pc21vIGludGVudG8gKG5vIGluY3JlbWVudGFyIGJhY2tvZmYgZXh0cmEpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gY2F0Y2ggKHJlZ2VuRXJyKSB7XG4gICAgICAgICAgbG9nKCdcdTI3NEMgRmFsbFx1MDBGMyByZWdlbmVyYWNpXHUwMEYzbiBkZSB0b2tlbiB0cmFzIDQwMzonLCByZWdlbkVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbWFnZVN0YXRlLnJldHJ5Q291bnQgPSBhdHRlbXB0O1xuXG4gICAgICBpZiAoYXR0ZW1wdCA8IG1heEF0dGVtcHRzKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gYmFzZURlbGF5ICogTWF0aC5wb3coMiwgYXR0ZW1wdCAtIDEpOyAvLyBCYWNrb2ZmIGV4cG9uZW5jaWFsXG4gICAgICAgIGNvbnN0IGRlbGF5U2Vjb25kcyA9IE1hdGgucm91bmQoZGVsYXkgLyAxMDAwKTtcblxuICAgICAgICAvLyBEZXRlcm1pbmFyIHRpcG8gZGUgZXJyb3IgcGFyYSBtZW5zYWplIGVzcGVjXHUwMEVEZmljb1xuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlO1xuICAgICAgICBjb25zdCBpc05ldHdvcmtFcnJvciA9IHJlc3VsdC5zdGF0dXMgPT09IDAgfHwgcmVzdWx0LnN0YXR1cyA9PT0gJ05ldHdvcmtFcnJvcic7XG5cbiAgICAgICAgaWYgKGlzTmV0d29ya0Vycm9yKSB7XG4gICAgICAgICAgX2NvbnNlY3V0aXZlTmV0d29ya0Vycm9ycysrO1xuICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICAgICAgICAvLyBTb2xvIGxvZ2dlYXIgZXJyb3JlcyBkZSByZWQgY2FkYSBtaW51dG8gbyBlbiBlbCBwcmltZXIgZXJyb3JcbiAgICAgICAgICBpZiAobm93IC0gX2xhc3ROZXR3b3JrRXJyb3JMb2cgPiBORVRXT1JLX0VSUk9SX0xPR19USFJPVFRMRSB8fCBfY29uc2VjdXRpdmVOZXR3b3JrRXJyb3JzID09PSAxKSB7XG4gICAgICAgICAgICBsb2coYFx1RDgzQ1x1REYxMCBFcnJvciBkZSByZWQgKCR7X2NvbnNlY3V0aXZlTmV0d29ya0Vycm9yc30gY29uc2VjdXRpdm9zKS4gUmVpbnRlbnRvICR7YXR0ZW1wdH0vJHttYXhBdHRlbXB0c30gZW4gJHtkZWxheVNlY29uZHN9c2ApO1xuICAgICAgICAgICAgX2xhc3ROZXR3b3JrRXJyb3JMb2cgPSBub3c7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gdCgnaW1hZ2UubmV0d29ya0Vycm9yJyk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnN0YXR1cyA+PSA1MDApIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSB0KCdpbWFnZS5zZXJ2ZXJFcnJvcicpO1xuICAgICAgICAgIGxvZyhgXHVEODNEXHVERDI3IEVycm9yIGRlbCBzZXJ2aWRvciAke3Jlc3VsdC5zdGF0dXN9LiBSZWludGVudG8gJHthdHRlbXB0fS8ke21heEF0dGVtcHRzfSBlbiAke2RlbGF5U2Vjb25kc31zYCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnN0YXR1cyA9PT0gNDA4KSB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gdCgnaW1hZ2UudGltZW91dEVycm9yJyk7XG4gICAgICAgICAgbG9nKGBcdTIzRjFcdUZFMEYgVGltZW91dC4gUmVpbnRlbnRvICR7YXR0ZW1wdH0vJHttYXhBdHRlbXB0c30gZW4gJHtkZWxheVNlY29uZHN9c2ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHQoJ2ltYWdlLnJldHJ5QXR0ZW1wdCcsIHtcbiAgICAgICAgICAgIGF0dGVtcHQsXG4gICAgICAgICAgICBtYXhBdHRlbXB0cyxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheVNlY29uZHNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsb2coYFx1RDgzRFx1REQwNCBSZWludGVudG8gJHthdHRlbXB0fS8ke21heEF0dGVtcHRzfSBkZXNwdVx1MDBFOXMgZGUgJHtkZWxheVNlY29uZHN9cy4gRXJyb3I6ICR7cmVzdWx0LmVycm9yfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBvblByb2dyZXNzKGltYWdlU3RhdGUucGFpbnRlZFBpeGVscywgaW1hZ2VTdGF0ZS50b3RhbFBpeGVscywgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHNsZWVwKGRlbGF5KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaW1hZ2VTdGF0ZS5yZXRyeUNvdW50ID0gYXR0ZW1wdDtcblxuICAgICAgaWYgKGF0dGVtcHQgPCBtYXhBdHRlbXB0cykge1xuICAgICAgICBjb25zdCBkZWxheSA9IGJhc2VEZWxheSAqIE1hdGgucG93KDIsIGF0dGVtcHQgLSAxKTtcbiAgICAgICAgY29uc3QgZGVsYXlTZWNvbmRzID0gTWF0aC5yb3VuZChkZWxheSAvIDEwMDApO1xuXG4gICAgICAgIC8vIFNpIGxhIGV4Y2VwY2lcdTAwRjNuIHB1ZGllcmEgc2VyIHBvciB0b2tlbiBpbnZcdTAwRTFsaWRvLCBpbnRlbnRhbW9zIHJlZ2VuZXJhciBpbm1lZGlhdGFtZW50ZVxuICAgICAgICBpZiAoLzQwMy8udGVzdChlcnJvcj8ubWVzc2FnZSB8fCAnJykpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9nKCdcdUQ4M0RcdUREMTAgRXhjZXBjaVx1MDBGM24gcG90ZW5jaWFsIGRlIHRva2VuLCByZWdlbmVyYW5kby4uLicpO1xuICAgICAgICAgICAgdG9rZW4gPSBhd2FpdCBlbnN1cmVUb2tlbih0cnVlKTtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBSZWludGVudGFyIG1pc21vIGludGVudG9cbiAgICAgICAgICB9IGNhdGNoIChyZWdlbkVycikge1xuICAgICAgICAgICAgbG9nKCdcdTI3NEMgRmFsbFx1MDBGMyByZWdlbmVyYWNpXHUwMEYzbiB0cmFzIGV4Y2VwY2lcdTAwRjNuIDQwMzonLCByZWdlbkVyci5tZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXR0ZW1wdCA9PT0gMSB8fCBhdHRlbXB0ICUgMyA9PT0gMCkge1xuICAgICAgICAgIGxvZyhgXHUyNzRDIEV4Y2VwY2lcdTAwRjNuIGVuIGludGVudG8gJHthdHRlbXB0fTpgLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHQoJ2ltYWdlLnJldHJ5RXJyb3InLCB7XG4gICAgICAgICAgYXR0ZW1wdCxcbiAgICAgICAgICBtYXhBdHRlbXB0cyxcbiAgICAgICAgICBkZWxheTogZGVsYXlTZWNvbmRzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChvblByb2dyZXNzKSB7XG4gICAgICAgICAgb25Qcm9ncmVzcyhpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHMsIGltYWdlU3RhdGUudG90YWxQaXhlbHMsIGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBzbGVlcChkZWxheSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW1hZ2VTdGF0ZS5yZXRyeUNvdW50ID0gbWF4QXR0ZW1wdHM7XG4gIGNvbnN0IGZhaWxNZXNzYWdlID0gdCgnaW1hZ2UucmV0cnlGYWlsZWQnLCB7IG1heEF0dGVtcHRzIH0pO1xuXG4gIGlmIChvblByb2dyZXNzKSB7XG4gICAgb25Qcm9ncmVzcyhpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHMsIGltYWdlU3RhdGUudG90YWxQaXhlbHMsIGZhaWxNZXNzYWdlKTtcbiAgfVxuXG4gIGxvZyhgXHVEODNEXHVEQ0E1IEZhbGxcdTAwRjMgZGVzcHVcdTAwRTlzIGRlICR7bWF4QXR0ZW1wdHN9IGludGVudG9zLCBjb250aW51YW5kbyBjb24gc2lndWllbnRlIGxvdGVgKTtcblxuICAvLyBSZXRvcm5hciB1biByZXN1bHRhZG8gZGUgZmFsbG8gcXVlIHBlcm1pdGEgY29udGludWFyXG4gIHJldHVybiB7XG4gICAgc3VjY2VzczogZmFsc2UsXG4gICAgcGFpbnRlZDogMCxcbiAgICBlcnJvcjogYEZhbGxcdTAwRjMgZGVzcHVcdTAwRTlzIGRlICR7bWF4QXR0ZW1wdHN9IGludGVudG9zYCxcbiAgICBzaG91bGRDb250aW51ZTogdHJ1ZSAvLyBJbmRpY2EgcXVlIGRlYmUgY29udGludWFyIGNvbiBlbCBzaWd1aWVudGUgbG90ZVxuICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFpbnRQaXhlbEJhdGNoX09SSUdJTkFMKGJhdGNoKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFiYXRjaCB8fCBiYXRjaC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBwYWludGVkOiAwLCBlcnJvcjogJ0xvdGUgdmFjXHUwMEVEbycgfTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ29udmVydGlyIGVsIGxvdGUgYWwgZm9ybWF0byBlc3BlcmFkbyBwb3IgbGEgQVBJXG4gICAgY29uc3QgY29vcmRzID0gW107XG4gICAgY29uc3QgY29sb3JzID0gW107XG4gICAgbGV0IHRpbGVYID0gbnVsbDtcbiAgICBsZXQgdGlsZVkgPSBudWxsO1xuICAgIFxuICAgIGZvciAoY29uc3QgcGl4ZWwgb2YgYmF0Y2gpIHtcbiAgICAgIGNvb3Jkcy5wdXNoKHBpeGVsLmxvY2FsWCwgcGl4ZWwubG9jYWxZKTtcbiAgICAgIGNvbG9ycy5wdXNoKHBpeGVsLmNvbG9yLmlkIHx8IHBpeGVsLmNvbG9yLnZhbHVlIHx8IDEpO1xuICAgICAgXG4gICAgICAvLyBUb21hciB0aWxlWC90aWxlWSBkZWwgcHJpbWVyIHBcdTAwRUR4ZWwgKHRvZG9zIGRlYmVyXHUwMEVEYW4gdGVuZXIgZWwgbWlzbW8gdGlsZSlcbiAgICAgIGlmICh0aWxlWCA9PT0gbnVsbCkge1xuICAgICAgICB0aWxlWCA9IHBpeGVsLnRpbGVYO1xuICAgICAgICB0aWxlWSA9IHBpeGVsLnRpbGVZO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBPYnRlbmVyIHRva2VuIGRlIFR1cm5zdGlsZVxuICAgIGNvbnN0IHRva2VuID0gYXdhaXQgZW5zdXJlVG9rZW4oKTtcbiAgICBcbiAgICAvLyBFbnZpYXIgcFx1MDBFRHhlbGVzIHVzYW5kbyBlbCBmb3JtYXRvIGNvcnJlY3RvXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwb3N0UGl4ZWxCYXRjaEltYWdlKHRpbGVYLCB0aWxlWSwgY29vcmRzLCBjb2xvcnMsIHRva2VuKTtcbiAgICBcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHBhaW50ZWQ6IHJlc3BvbnNlLnBhaW50ZWQsXG4gICAgICAgIHJlc3BvbnNlOiByZXNwb25zZS5qc29uXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgcGFpbnRlZDogMCxcbiAgICAgICAgZXJyb3I6IHJlc3BvbnNlLmpzb24/Lm1lc3NhZ2UgfHwgYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9YCxcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZygnRXJyb3IgZW4gcGFpbnRQaXhlbEJhdGNoOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBwYWludGVkOiAwLFxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICB9O1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JDb29sZG93bihjaGFyZ2VzTmVlZGVkLCBvblByb2dyZXNzKSB7XG4gIGNvbnN0IGNoYXJnZVRpbWUgPSBJTUFHRV9ERUZBVUxUUy5DSEFSR0VfUkVHRU5fTVMgKiBjaGFyZ2VzTmVlZGVkO1xuICBjb25zdCB3YWl0VGltZSA9IGNoYXJnZVRpbWUgKyA1MDAwOyAvLyBUaWVtcG8gbmVjZXNhcmlvICsgNSBzZWd1bmRvcyBkZSBzZWd1cmlkYWRcbiAgXG4gIC8vIFZlcmlmaWNhciBzaSBlbCBib3Qgc2UgaGEgZGV0ZW5pZG8gYW50ZXMgZGUgaW5pY2lhciBlbCBjb29sZG93blxuICBpZiAoaW1hZ2VTdGF0ZS5zdG9wRmxhZykge1xuICAgIGxvZyhgXHVEODNEXHVERUQxIEJvdCBkZXRlbmlkbywgY2FuY2VsYW5kbyBjb29sZG93bmApO1xuICAgIHJldHVybjtcbiAgfVxuICBcbiAgbG9nKGBFc3BlcmFuZG8gJHtNYXRoLnJvdW5kKHdhaXRUaW1lLzEwMDApfXMgcGFyYSBvYnRlbmVyICR7Y2hhcmdlc05lZWRlZH0gY2FyZ2FzYCk7XG4gIFxuICAvLyBDb25maWd1cmFyIHRpbWVzdGFtcHMgcGFyYSBtYW5lam8gZGUgdmlzaWJpbGlkYWRcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgY29vbGRvd25TdGFydFRpbWUgPSBzdGFydFRpbWU7XG4gIGNvb2xkb3duRHVyYXRpb24gPSB3YWl0VGltZTtcbiAgXG4gIC8vIEFjdHVhbGl6YXIgZXN0YWRvIGRlIGNvb2xkb3duXG4gIGltYWdlU3RhdGUuaW5Db29sZG93biA9IHRydWU7XG4gIGltYWdlU3RhdGUuY29vbGRvd25FbmRUaW1lID0gc3RhcnRUaW1lICsgd2FpdFRpbWU7XG4gIGltYWdlU3RhdGUubmV4dEJhdGNoQ29vbGRvd24gPSBNYXRoLnJvdW5kKHdhaXRUaW1lIC8gMTAwMCk7XG4gIFxuICBpZiAob25Qcm9ncmVzcykge1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHdhaXRUaW1lIC8gNjAwMDApO1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKCh3YWl0VGltZSAlIDYwMDAwKSAvIDEwMDApO1xuICAgIGNvbnN0IHRpbWVUZXh0ID0gbWludXRlcyA+IDAgPyBgJHttaW51dGVzfW0gJHtzZWNvbmRzfXNgIDogYCR7c2Vjb25kc31zYDtcbiAgICBjb25zdCBtZXNzYWdlID0gdCgnaW1hZ2Uud2FpdGluZ0NoYXJnZXNSZWdlbicsIHtcbiAgICAgIGN1cnJlbnQ6IE1hdGguZmxvb3IoaW1hZ2VTdGF0ZS5jdXJyZW50Q2hhcmdlcyksXG4gICAgICBuZWVkZWQ6IGNoYXJnZXNOZWVkZWQsXG4gICAgICB0aW1lOiB0aW1lVGV4dFxuICAgIH0pO1xuICAgIG9uUHJvZ3Jlc3MoaW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzLCBpbWFnZVN0YXRlLnRvdGFsUGl4ZWxzLCBtZXNzYWdlKTtcbiAgfVxuICBcbiAgLy8gVXNhciB0aW1lc3RhbXBzIGVuIGx1Z2FyIGRlIGNvbnRhZG9yIHNpbXBsZVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgY29uc3QgZWxhcHNlZCA9IG5vdyAtIHN0YXJ0VGltZTtcbiAgICBjb25zdCByZW1haW5pbmcgPSBNYXRoLm1heCgwLCB3YWl0VGltZSAtIGVsYXBzZWQpO1xuICAgIFxuICAgIC8vIFZlcmlmaWNhciBzdG9wRmxhZyBhbCBpbmljaW8gZGUgY2FkYSBpdGVyYWNpXHUwMEYzblxuICAgIGlmIChpbWFnZVN0YXRlLnN0b3BGbGFnKSB7XG4gICAgICBsb2coYFx1RDgzRFx1REVEMSBCb3QgZGV0ZW5pZG8gZHVyYW50ZSBjb29sZG93biBjb24gJHtNYXRoLmNlaWwocmVtYWluaW5nLzEwMDApfXMgcmVzdGFudGVzYCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgXG4gICAgLy8gU2kgeWEgdGVybWluXHUwMEYzIGVsIGNvb2xkb3duLCBzYWxpclxuICAgIGlmIChyZW1haW5pbmcgPD0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlbWFpbmluZ1NlY29uZHMgPSBNYXRoLmNlaWwocmVtYWluaW5nIC8gMTAwMCk7XG4gICAgaW1hZ2VTdGF0ZS5uZXh0QmF0Y2hDb29sZG93biA9IHJlbWFpbmluZ1NlY29uZHM7XG4gICAgXG4gICAgLy8gQWN0dWFsaXphciBwcm9ncmVzbyBjYWRhIDMwIHNlZ3VuZG9zLCBvIGVuIGxvcyBcdTAwRkFsdGltb3MgMzAgc2VndW5kb3MgY2FkYSAxMCBzZWd1bmRvc1xuICAgIGNvbnN0IHNob3VsZFVwZGF0ZVByb2dyZXNzID0gcmVtYWluaW5nU2Vjb25kcyAlIDMwID09PSAwIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVtYWluaW5nU2Vjb25kcyA8PSAzMCAmJiByZW1haW5pbmdTZWNvbmRzICUgMTAgPT09IDApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ1NlY29uZHMgPD0gNSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGFwc2VkIDwgMjAwMDsgLy8gUHJpbWVyYSBhY3R1YWxpemFjaVx1MDBGM25cbiAgICBcbiAgICBpZiAob25Qcm9ncmVzcyAmJiBzaG91bGRVcGRhdGVQcm9ncmVzcykge1xuICAgICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IocmVtYWluaW5nU2Vjb25kcyAvIDYwKTtcbiAgICAgIGNvbnN0IHNlY29uZHMgPSByZW1haW5pbmdTZWNvbmRzICUgNjA7XG4gICAgICBjb25zdCB0aW1lVGV4dCA9IG1pbnV0ZXMgPiAwID8gYCR7bWludXRlc31tICR7c2Vjb25kc31zYCA6IGAke3NlY29uZHN9c2A7XG4gICAgICBjb25zdCBtZXNzYWdlID0gdCgnaW1hZ2Uud2FpdGluZ0NoYXJnZXNDb3VudGRvd24nLCB7XG4gICAgICAgIGN1cnJlbnQ6IE1hdGguZmxvb3IoaW1hZ2VTdGF0ZS5jdXJyZW50Q2hhcmdlcyksXG4gICAgICAgIG5lZWRlZDogY2hhcmdlc05lZWRlZCxcbiAgICAgICAgdGltZTogdGltZVRleHRcbiAgICAgIH0pO1xuICAgICAgb25Qcm9ncmVzcyhpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHMsIGltYWdlU3RhdGUudG90YWxQaXhlbHMsIG1lc3NhZ2UpO1xuICAgIH1cbiAgICBcbiAgICAvLyBFc3BlcmFyIDEgc2VndW5kbyBvIGVsIHRpZW1wbyByZXN0YW50ZSBzaSBlcyBtZW5vclxuICAgIGF3YWl0IHNsZWVwKE1hdGgubWluKDEwMDAsIHJlbWFpbmluZykpO1xuICB9XG4gIFxuICAvLyBMaW1waWFyIHZhcmlhYmxlcyBkZSBjb29sZG93blxuICBpbWFnZVN0YXRlLmluQ29vbGRvd24gPSBmYWxzZTtcbiAgaW1hZ2VTdGF0ZS5uZXh0QmF0Y2hDb29sZG93biA9IDA7XG4gIGNvb2xkb3duU3RhcnRUaW1lID0gbnVsbDtcbiAgY29vbGRvd25EdXJhdGlvbiA9IG51bGw7XG4gIHdhc0hpZGRlbkR1cmluZ0Nvb2xkb3duID0gZmFsc2U7XG4gIFxuICAvLyBTb2xvIHNpbXVsYXIgcmVnZW5lcmFjaVx1MDBGM24gZGUgY2FyZ2FzIHNpIGVsIGJvdCBubyBzZSBkZXR1dm9cbiAgaWYgKCFpbWFnZVN0YXRlLnN0b3BGbGFnKSB7XG4gICAgaW1hZ2VTdGF0ZS5jdXJyZW50Q2hhcmdlcyA9IE1hdGgubWluKFxuICAgICAgaW1hZ2VTdGF0ZS5tYXhDaGFyZ2VzIHx8IDk5OTksIC8vIHVzYXIgbWF4Q2hhcmdlcyBkZWwgZXN0YWRvXG4gICAgICBpbWFnZVN0YXRlLmN1cnJlbnRDaGFyZ2VzICsgKHdhaXRUaW1lIC8gSU1BR0VfREVGQVVMVFMuQ0hBUkdFX1JFR0VOX01TKVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQaXhlbFF1ZXVlKGltYWdlRGF0YSwgc3RhcnRQb3NpdGlvbiwgYmFzZVRpbGVYLCBiYXNlVGlsZVkpIHtcbiAgY29uc3QgeyB4OiBsb2NhbFN0YXJ0WCwgeTogbG9jYWxTdGFydFkgfSA9IHN0YXJ0UG9zaXRpb247XG4gIGNvbnN0IHF1ZXVlID0gW107XG4gIFxuICAvLyBNYW5lamFyIGRpZmVyZW50ZXMgdGlwb3MgZGUgaW1hZ2VEYXRhXG4gIGxldCBwaXhlbHM7XG4gIFxuICAvLyBTaSBpbWFnZURhdGEgdGllbmUgdW5hIHByb3BpZWRhZCBwcm9jZXNzb3IgKEJsdWUgTWFyYmxlKVxuICBpZiAoaW1hZ2VEYXRhICYmIGltYWdlRGF0YS5wcm9jZXNzb3IgJiYgdHlwZW9mIGltYWdlRGF0YS5wcm9jZXNzb3IuZ2VuZXJhdGVQaXhlbFF1ZXVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcGl4ZWxzID0gaW1hZ2VEYXRhLnByb2Nlc3Nvci5nZW5lcmF0ZVBpeGVsUXVldWUoKTtcbiAgfVxuICAvLyBTaSBpbWFnZURhdGEgdGllbmUgdW4gbVx1MDBFOXRvZG8gZ2VuZXJhdGVQaXhlbFF1ZXVlIChCbHVlIE1hcmJsZSBwcm9jZXNzb3IpXG4gIGVsc2UgaWYgKGltYWdlRGF0YSAmJiB0eXBlb2YgaW1hZ2VEYXRhLmdlbmVyYXRlUGl4ZWxRdWV1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHBpeGVscyA9IGltYWdlRGF0YS5nZW5lcmF0ZVBpeGVsUXVldWUoKTtcbiAgfVxuICAvLyBTaSBpbWFnZURhdGEgeWEgdGllbmUgcGl4ZWxzIGNvbW8gYXJyYXlcbiAgZWxzZSBpZiAoaW1hZ2VEYXRhICYmIEFycmF5LmlzQXJyYXkoaW1hZ2VEYXRhLnBpeGVscykpIHtcbiAgICBwaXhlbHMgPSBpbWFnZURhdGEucGl4ZWxzO1xuICB9XG4gIC8vIFNpIGltYWdlRGF0YS5waXhlbHMgZXMgdW5hIGZ1bmNpXHUwMEYzbiAocmVzdWx0YWRvIGRlIGdldEltYWdlRGF0YSgpKVxuICBlbHNlIGlmIChpbWFnZURhdGEgJiYgdHlwZW9mIGltYWdlRGF0YS5waXhlbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwaXhlbHMgPSBpbWFnZURhdGEucGl4ZWxzKCk7XG4gIH1cbiAgLy8gRmFsbGJhY2s6IGludGVudGFyIGFjY2VkZXIgZGlyZWN0YW1lbnRlIGEgcGl4ZWxzXG4gIGVsc2UgaWYgKGltYWdlRGF0YSAmJiBpbWFnZURhdGEucGl4ZWxzKSB7XG4gICAgcGl4ZWxzID0gaW1hZ2VEYXRhLnBpeGVscztcbiAgfVxuICBlbHNlIHtcbiAgICBsb2coYFx1Mjc0QyBFcnJvcjogTm8gc2UgcHVlZGVuIG9idGVuZXIgcFx1MDBFRHhlbGVzIGRlIGltYWdlRGF0YS4gVGlwbzogJHt0eXBlb2YgaW1hZ2VEYXRhfWAsIGltYWdlRGF0YSk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gVmVyaWZpY2FyIHNpIHBpeGVscyBlcyB1biBhcnJheSBpdGVyYWJsZVxuICBpZiAoIUFycmF5LmlzQXJyYXkocGl4ZWxzKSkge1xuICAgIGxvZyhgXHUyNzRDIEVycm9yOiBwaXhlbHMgbm8gZXMgdW4gYXJyYXkgaXRlcmFibGUuIFRpcG86ICR7dHlwZW9mIHBpeGVsc31gLCBwaXhlbHMpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGZvciAoY29uc3QgcGl4ZWxEYXRhIG9mIHBpeGVscykge1xuICAgIGlmICghcGl4ZWxEYXRhKSBjb250aW51ZTtcbiAgICBcbiAgICAvLyBNYW5lamFyIGRpZmVyZW50ZXMgZm9ybWF0b3MgZGUgcFx1MDBFRHhlbFxuICAgIC8vIEZvcm1hdG8gQmx1ZSBNYXJibGU6IGltYWdlWCwgaW1hZ2VZLCBjb2xvclxuICAgIC8vIEZvcm1hdG8gY2xcdTAwRTFzaWNvOiB4LCB5LCB0YXJnZXRDb2xvclxuICAgIGNvbnN0IHBpeGVsWCA9IHBpeGVsRGF0YS5pbWFnZVggIT09IHVuZGVmaW5lZCA/IHBpeGVsRGF0YS5pbWFnZVggOiBwaXhlbERhdGEueDtcbiAgICBjb25zdCBwaXhlbFkgPSBwaXhlbERhdGEuaW1hZ2VZICE9PSB1bmRlZmluZWQgPyBwaXhlbERhdGEuaW1hZ2VZIDogcGl4ZWxEYXRhLnk7XG4gICAgY29uc3QgcGl4ZWxDb2xvciA9IHBpeGVsRGF0YS5jb2xvciAhPT0gdW5kZWZpbmVkID8gcGl4ZWxEYXRhLmNvbG9yIDogcGl4ZWxEYXRhLnRhcmdldENvbG9yO1xuICAgIFxuICAgIGlmIChwaXhlbFggPT09IHVuZGVmaW5lZCB8fCBwaXhlbFkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbG9nKGBcdTI2QTBcdUZFMEYgUFx1MDBFRHhlbCBjb24gY29vcmRlbmFkYXMgaW52XHUwMEUxbGlkYXM6YCwgcGl4ZWxEYXRhKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBcbiAgICAvLyBnbG9iYWwgZGVudHJvIGRlbCBtb3NhaWNvIGJhc2UsIHB1ZWRlIGV4Y2VkZXIgMC4uOTk5IHkgY3J1emFyIGEgb3Ryb3MgdGlsZXNcbiAgICBjb25zdCBnbG9iYWxYID0gbG9jYWxTdGFydFggKyBwaXhlbFg7XG4gICAgY29uc3QgZ2xvYmFsWSA9IGxvY2FsU3RhcnRZICsgcGl4ZWxZO1xuICAgIGNvbnN0IHRpbGVPZmZzZXRYID0gTWF0aC5mbG9vcihnbG9iYWxYIC8gMTAwMCk7XG4gICAgY29uc3QgdGlsZU9mZnNldFkgPSBNYXRoLmZsb29yKGdsb2JhbFkgLyAxMDAwKTtcbiAgICBjb25zdCB0eCA9IGJhc2VUaWxlWCArIHRpbGVPZmZzZXRYO1xuICAgIGNvbnN0IHR5ID0gYmFzZVRpbGVZICsgdGlsZU9mZnNldFk7XG4gICAgY29uc3QgbG9jYWxYID0gKChnbG9iYWxYICUgMTAwMCkgKyAxMDAwKSAlIDEwMDA7IC8vIGFzZWd1cmFyIDAuLjk5OVxuICAgIGNvbnN0IGxvY2FsWSA9ICgoZ2xvYmFsWSAlIDEwMDApICsgMTAwMCkgJSAxMDAwO1xuICAgIFxuICAgIHF1ZXVlLnB1c2goe1xuICAgICAgaW1hZ2VYOiBwaXhlbFgsXG4gICAgICBpbWFnZVk6IHBpeGVsWSxcbiAgICAgIGxvY2FsWCxcbiAgICAgIGxvY2FsWSxcbiAgICAgIHRpbGVYOiB0eCxcbiAgICAgIHRpbGVZOiB0eSxcbiAgICAgIGNvbG9yOiBwaXhlbENvbG9yLFxuICAgICAgb3JpZ2luYWxDb2xvcjogcGl4ZWxEYXRhLm9yaWdpbmFsQ29sb3JcbiAgICB9KTtcbiAgfVxuXG4gIGxvZyhgQ29sYSBkZSBwXHUwMEVEeGVsZXMgZ2VuZXJhZGE6ICR7cXVldWUubGVuZ3RofSBwXHUwMEVEeGVsZXMgcGFyYSBwaW50YXJgKTtcbiAgcmV0dXJuIHF1ZXVlO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVFc3RpbWF0ZWRUaW1lKCkge1xuICBpZiAoIWltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzIHx8IGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIFxuICBjb25zdCByZW1haW5pbmdQaXhlbHMgPSBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGg7XG4gIGNvbnN0IGJhdGNoU2l6ZSA9IGltYWdlU3RhdGUucGl4ZWxzUGVyQmF0Y2g7XG4gIGNvbnN0IGNoYXJnZVJlZ2VuVGltZSA9IElNQUdFX0RFRkFVTFRTLkNIQVJHRV9SRUdFTl9NUyAvIDEwMDA7IC8vIGVuIHNlZ3VuZG9zXG4gIFxuICAvLyBDYWxjdWxhciBuXHUwMEZBbWVybyBkZSBsb3RlcyBuZWNlc2FyaW9zXG4gIGNvbnN0IGJhdGNoZXNOZWVkZWQgPSBNYXRoLmNlaWwocmVtYWluaW5nUGl4ZWxzIC8gYmF0Y2hTaXplKTtcbiAgXG4gIC8vIFRpZW1wbyBkZSBlc3BlcmEgZW50cmUgbG90ZXMgKGNhZGEgcFx1MDBFRHhlbCBuZWNlc2l0YSAxIGNhcmdhLCBjYWRhIGNhcmdhIHRhcmRhIDMwcylcbiAgY29uc3Qgd2FpdFRpbWVCZXR3ZWVuQmF0Y2hlcyA9IGJhdGNoU2l6ZSAqIGNoYXJnZVJlZ2VuVGltZTtcbiAgXG4gIC8vIFRpZW1wbyB0b3RhbCBlc3RpbWFkb1xuICBjb25zdCB0b3RhbFdhaXRUaW1lID0gKGJhdGNoZXNOZWVkZWQgLSAxKSAqIHdhaXRUaW1lQmV0d2VlbkJhdGNoZXM7XG4gIGNvbnN0IGV4ZWN1dGlvblRpbWUgPSBiYXRjaGVzTmVlZGVkICogMjsgLy8gfjIgc2VndW5kb3MgcG9yIGxvdGUgZGUgZWplY3VjaVx1MDBGM25cbiAgXG4gIHJldHVybiBNYXRoLmNlaWwodG90YWxXYWl0VGltZSArIGV4ZWN1dGlvblRpbWUpO1xufVxuXG5leHBvcnQgeyBjYWxjdWxhdGVFc3RpbWF0ZWRUaW1lLCBzdGFydENoYXJnZU1vbml0b3JpbmcsIHN0b3BDaGFyZ2VNb25pdG9yaW5nIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wUGFpbnRpbmcoKSB7XG4gIGltYWdlU3RhdGUuc3RvcEZsYWcgPSB0cnVlO1xuICBpbWFnZVN0YXRlLnJ1bm5pbmcgPSBmYWxzZTtcbiAgc3RvcENoYXJnZU1vbml0b3JpbmcoKTtcbiAgbG9nKCdcdUQ4M0RcdURFRDEgRGV0ZW5pZW5kbyBwcm9jZXNvIGRlIHBpbnRhZG8uLi4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhdXNlUGFpbnRpbmcoKSB7XG4gIGltYWdlU3RhdGUuc3RvcEZsYWcgPSB0cnVlO1xuICBzdG9wQ2hhcmdlTW9uaXRvcmluZygpO1xuICBsb2coJ1x1MjNGOFx1RkUwRiBQYXVzYW5kbyBwcm9jZXNvIGRlIHBpbnRhZG8uLi4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc3VtZVBhaW50aW5nKCkge1xuICBpbWFnZVN0YXRlLnN0b3BGbGFnID0gZmFsc2U7XG4gIGltYWdlU3RhdGUucnVubmluZyA9IHRydWU7XG4gIGlmIChpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGggPiAwKSB7XG4gICAgc3RhcnRDaGFyZ2VNb25pdG9yaW5nKCk7XG4gIH1cbiAgbG9nKCdcdTI1QjZcdUZFMEYgUmVhbnVkYW5kbyBwcm9jZXNvIGRlIHBpbnRhZG8uLi4nKTtcbn1cbiIsICJpbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vY29yZS9sb2dnZXIuanNcIjtcbmltcG9ydCB7IGltYWdlU3RhdGUsIElNQUdFX0RFRkFVTFRTIGFzIF9JTUFHRV9ERUZBVUxUUyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuXG4vKipcbiAqIE9idGVuZXIgZGF0b3MgY29tcGxldG9zIGRlIHBcdTAwRUR4ZWxlcyBwYXJhIGd1YXJkYXJcbiAqL1xuZnVuY3Rpb24gZ2V0RnVsbFBpeGVsRGF0YSgpIHtcbiAgaWYgKCFpbWFnZVN0YXRlLmltYWdlRGF0YSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gU2kgaGF5IHVuIHByb2Nlc3NvciBCbHVlIE1hcmJsZSwgdXNhciBzdSBtXHUwMEU5dG9kb1xuICBpZiAoaW1hZ2VTdGF0ZS5pbWFnZURhdGEucHJvY2Vzc29yICYmIHR5cGVvZiBpbWFnZVN0YXRlLmltYWdlRGF0YS5wcm9jZXNzb3IuZ2VuZXJhdGVQaXhlbFF1ZXVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGltYWdlU3RhdGUuaW1hZ2VEYXRhLnByb2Nlc3Nvci5nZW5lcmF0ZVBpeGVsUXVldWUoKTtcbiAgfVxuXG4gIC8vIFNpIGhheSBkYXRvcyBjb21wbGV0b3MgZ3VhcmRhZG9zIGVuIGVsIHByb2dyZXNvLCB1c2FybG9zXG4gIGlmIChpbWFnZVN0YXRlLmltYWdlRGF0YS5mdWxsUGl4ZWxEYXRhICYmIEFycmF5LmlzQXJyYXkoaW1hZ2VTdGF0ZS5pbWFnZURhdGEuZnVsbFBpeGVsRGF0YSkgJiYgaW1hZ2VTdGF0ZS5pbWFnZURhdGEuZnVsbFBpeGVsRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGltYWdlU3RhdGUuaW1hZ2VEYXRhLmZ1bGxQaXhlbERhdGE7XG4gIH1cblxuICAvLyBGYWxsYmFjayBwYXJhIGZvcm1hdG8gY2xcdTAwRTFzaWNvXG4gIGlmIChpbWFnZVN0YXRlLmltYWdlRGF0YS5waXhlbHMgJiYgaW1hZ2VTdGF0ZS5pbWFnZURhdGEucGl4ZWxzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gaW1hZ2VTdGF0ZS5pbWFnZURhdGEucGl4ZWxzO1xuICB9XG5cbiAgLy8gXHUwMERBbHRpbW8gcmVjdXJzbzogdXNhciByZW1haW5pbmdQaXhlbHMgZGVsIHBsYW4sIGF1bnF1ZSBubyBjb250ZW5nYSB0b2RvIGVsIHByb3llY3RvXG4gIGlmIChpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscyAmJiBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGggPiAwKSB7XG4gICAgbG9nKCdcdTI2QTBcdUZFMEYgRXhwb3J0YW5kbyB1c2FuZG8gcmVtYWluaW5nUGl4ZWxzIChwb3NpYmxlIHN1YmNvbmp1bnRvIGRlbCBwcm95ZWN0byknKTtcbiAgICByZXR1cm4gaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHM7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlUHJvZ3Jlc3MoZmlsZW5hbWUgPSBudWxsKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFpbWFnZVN0YXRlLmltYWdlRGF0YSB8fCBpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHMgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaGF5IHByb2dyZXNvIHBhcmEgZ3VhcmRhcicpO1xuICAgIH1cbiAgICBcbiAgICAvLyBPYnRlbmVyIGRhdG9zIGRlIHBcdTAwRUR4ZWxlcyBkZSBmb3JtYSBzZWd1cmFcbiAgICBsZXQgZnVsbFBpeGVsRGF0YSA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBpeGVsRGF0YSA9IGdldEZ1bGxQaXhlbERhdGEoKTtcbiAgICAgIC8vIExpbWl0YXIgZWwgdGFtYVx1MDBGMW8gZGUgbG9zIGRhdG9zIHBhcmEgZXZpdGFyIGVycm9yZXMgZGUgSlNPTi5zdHJpbmdpZnlcbiAgICAgIGlmIChwaXhlbERhdGEgJiYgQXJyYXkuaXNBcnJheShwaXhlbERhdGEpKSB7XG4gICAgICAgIC8vIFNpIGhheSBkZW1hc2lhZG9zIHBcdTAwRUR4ZWxlcywgc29sbyBndWFyZGFyIGxvcyBlc2VuY2lhbGVzIHBhcmEgY29udGludWFyXG4gICAgICAgIGlmIChwaXhlbERhdGEubGVuZ3RoID4gNTAwMDApIHtcbiAgICAgICAgICBsb2coYFx1MjZBMFx1RkUwRiBJbWFnZW4gbXV5IGdyYW5kZSAoJHtwaXhlbERhdGEubGVuZ3RofSBwXHUwMEVEeGVsZXMpLCBndWFyZGFuZG8gc29sbyBwXHUwMEVEeGVsZXMgcmVzdGFudGVzYCk7XG4gICAgICAgICAgZnVsbFBpeGVsRGF0YSA9IG51bGw7IC8vIE5vIGd1YXJkYXIgZnVsbFBpeGVsRGF0YSBwYXJhIGltXHUwMEUxZ2VuZXMgbXV5IGdyYW5kZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmdWxsUGl4ZWxEYXRhID0gcGl4ZWxEYXRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAocGl4ZWxFcnJvcikge1xuICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3Igb2J0ZW5pZW5kbyBkYXRvcyBjb21wbGV0b3MgZGUgcFx1MDBFRHhlbGVzLCBjb250aW51YW5kbyBzaW4gZWxsb3M6JywgcGl4ZWxFcnJvcik7XG4gICAgICBmdWxsUGl4ZWxEYXRhID0gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcHJvZ3Jlc3NEYXRhID0ge1xuICAgICAgdmVyc2lvbjogXCIyLjBcIiwgLy8gVmVyc2lcdTAwRjNuIGFjdHVhbGl6YWRhIHBhcmEgY29tcGF0aWJpbGlkYWRcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIGltYWdlRGF0YToge1xuICAgICAgICB3aWR0aDogaW1hZ2VTdGF0ZS5pbWFnZURhdGEud2lkdGgsXG4gICAgICAgIGhlaWdodDogaW1hZ2VTdGF0ZS5pbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICBvcmlnaW5hbE5hbWU6IGltYWdlU3RhdGUub3JpZ2luYWxJbWFnZU5hbWUsXG4gICAgICAgIC8vIFNvbG8gZ3VhcmRhciBmdWxsUGl4ZWxEYXRhIHNpIG5vIGVzIGRlbWFzaWFkbyBncmFuZGVcbiAgICAgICAgLi4uKGZ1bGxQaXhlbERhdGEgJiYgeyBmdWxsUGl4ZWxEYXRhIH0pXG4gICAgICB9LFxuICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgcGFpbnRlZFBpeGVsczogaW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzLFxuICAgICAgICB0b3RhbFBpeGVsczogaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyxcbiAgICAgICAgbGFzdFBvc2l0aW9uOiB7IC4uLmltYWdlU3RhdGUubGFzdFBvc2l0aW9uIH1cbiAgICAgIH0sXG4gICAgICBwb3NpdGlvbjoge1xuICAgICAgICBzdGFydFBvc2l0aW9uOiB7IC4uLmltYWdlU3RhdGUuc3RhcnRQb3NpdGlvbiB9LFxuICAgICAgICB0aWxlWDogaW1hZ2VTdGF0ZS50aWxlWCxcbiAgICAgICAgdGlsZVk6IGltYWdlU3RhdGUudGlsZVlcbiAgICAgIH0sXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgcGl4ZWxzUGVyQmF0Y2g6IGltYWdlU3RhdGUucGl4ZWxzUGVyQmF0Y2gsXG4gICAgICAgIHVzZUFsbENoYXJnZXNGaXJzdDogaW1hZ2VTdGF0ZS51c2VBbGxDaGFyZ2VzRmlyc3QsXG4gICAgICAgIGlzRmlyc3RCYXRjaDogaW1hZ2VTdGF0ZS5pc0ZpcnN0QmF0Y2gsXG4gICAgICAgIG1heENoYXJnZXM6IGltYWdlU3RhdGUubWF4Q2hhcmdlcyxcbiAgICAgICAgLy8gTnVldmFzIGNvbmZpZ3VyYWNpb25lcyB2Mi4wXG4gICAgICAgIHBhaW50UGF0dGVybjogaW1hZ2VTdGF0ZS5wYWludFBhdHRlcm5cbiAgICAgIH0sXG4gICAgICAvLyBGaWx0cmFyIHNvbG8gbG9zIGRhdG9zIHNlcmlhbGl6YWJsZXMgZGUgbG9zIGNvbG9yZXMgKHNpbiBlbGVtZW50b3MgRE9NKVxuICAgICAgY29sb3JzOiBpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycy5tYXAoY29sb3IgPT4gKHtcbiAgICAgICAgaWQ6IGNvbG9yLmlkLFxuICAgICAgICByOiBjb2xvci5yLFxuICAgICAgICBnOiBjb2xvci5nLFxuICAgICAgICBiOiBjb2xvci5iXG4gICAgICB9KSksXG4gICAgICByZW1haW5pbmdQaXhlbHM6IGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzIHx8IFtdLFxuXG4gICAgfTtcblxuICAgIC8vIFBlcnNpc3RlbmNpYSBkZWwgb3ZlcmxheSBkZSBpbWFnZW4gZWxpbWluYWRhOyBlbCBvdmVybGF5IGRlIHBsYW4gc2UgaW5maWVyZSBkZXNkZSByZW1haW5pbmdQaXhlbHNcbiAgICBcbiAgICAvLyBJbnRlbnRhciBzZXJpYWxpemFyIGNvbiBtYW5lam8gZGUgZXJyb3Jlc1xuICAgIGxldCBkYXRhU3RyO1xuICAgIHRyeSB7XG4gICAgICBkYXRhU3RyID0gSlNPTi5zdHJpbmdpZnkocHJvZ3Jlc3NEYXRhLCBudWxsLCAyKTtcbiAgICB9IGNhdGNoIChzdHJpbmdpZnlFcnJvcikge1xuICAgICAgLy8gU2kgZmFsbGEsIGludGVudGFyIHNpbiBmdWxsUGl4ZWxEYXRhXG4gICAgICBsb2coJ1x1MjZBMFx1RkUwRiBFcnJvciBzZXJpYWxpemFuZG8gZGF0b3MgY29tcGxldG9zLCBpbnRlbnRhbmRvIHNpbiBmdWxsUGl4ZWxEYXRhJyk7XG4gICAgICBkZWxldGUgcHJvZ3Jlc3NEYXRhLmltYWdlRGF0YS5mdWxsUGl4ZWxEYXRhO1xuICAgICAgZGF0YVN0ciA9IEpTT04uc3RyaW5naWZ5KHByb2dyZXNzRGF0YSwgbnVsbCwgMik7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGJsb2IgPSBuZXcgd2luZG93LkJsb2IoW2RhdGFTdHJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyB9KTtcbiAgICBcbiAgICBjb25zdCBmaW5hbEZpbGVuYW1lID0gZmlsZW5hbWUgfHwgYHdwbGFjZV9wcm9ncmVzc18ke2ltYWdlU3RhdGUub3JpZ2luYWxJbWFnZU5hbWUgfHwgJ2ltYWdlJ31fJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTkpLnJlcGxhY2UoLzovZywgJy0nKX0uanNvbmA7XG4gICAgXG4gICAgLy8gQ3JlYXIgeSBkaXNwYXJhciBkZXNjYXJnYVxuICAgIGNvbnN0IHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGluay5ocmVmID0gdXJsO1xuICAgIGxpbmsuZG93bmxvYWQgPSBmaW5hbEZpbGVuYW1lO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgbGluay5jbGljaygpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICBcbiAgICBsb2coYFx1MjcwNSBQcm9ncmVzbyBndWFyZGFkbzogJHtmaW5hbEZpbGVuYW1lfWApO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGZpbGVuYW1lOiBmaW5hbEZpbGVuYW1lIH07XG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nKCdcdTI3NEMgRXJyb3IgZ3VhcmRhbmRvIHByb2dyZXNvOicsIGVycm9yKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZFByb2dyZXNzKGZpbGUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyB3aW5kb3cuRmlsZVJlYWRlcigpO1xuICAgICAgXG4gICAgICByZWFkZXIub25sb2FkID0gKGUpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBwcm9ncmVzc0RhdGEgPSBKU09OLnBhcnNlKGUudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVmFsaWRhciBlc3RydWN0dXJhIGRlbCBhcmNoaXZvXG4gICAgICAgICAgY29uc3QgcmVxdWlyZWRGaWVsZHMgPSBbJ2ltYWdlRGF0YScsICdwcm9ncmVzcycsICdwb3NpdGlvbicsICdjb2xvcnMnXTtcbiAgICAgICAgICBjb25zdCBtaXNzaW5nRmllbGRzID0gcmVxdWlyZWRGaWVsZHMuZmlsdGVyKGZpZWxkID0+ICEoZmllbGQgaW4gcHJvZ3Jlc3NEYXRhKSk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKG1pc3NpbmdGaWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW1wb3MgcmVxdWVyaWRvcyBmYWx0YW50ZXM6ICR7bWlzc2luZ0ZpZWxkcy5qb2luKCcsICcpfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBEZXRlY3RhciB2ZXJzaVx1MDBGM24gZGVsIGFyY2hpdm8gcGFyYSByZXRyb2NvbXBhdGliaWxpZGFkXG4gICAgICAgICAgY29uc3QgZmlsZVZlcnNpb24gPSBwcm9ncmVzc0RhdGEudmVyc2lvbiB8fCBcIjEuMFwiO1xuICAgICAgICAgIGxvZyhgXHVEODNEXHVEQ0MxIENhcmdhbmRvIHByb2dyZXNvIHZlcnNpXHUwMEYzbiAke2ZpbGVWZXJzaW9ufWApO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNpIG5vIGhheSBjb2xvcmVzIGVuIGVzdGFkbywgdXNhciBsb3MgZGVsIGFyY2hpdm8gcGFyYSBhc2VndXJhciBleHBvcnRhY2lcdTAwRjNuIGNvcnJlY3RhXG4gICAgICAgICAgaWYgKCFpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycyB8fCBpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGltYWdlU3RhdGUuYXZhaWxhYmxlQ29sb3JzID0gQXJyYXkuaXNBcnJheShwcm9ncmVzc0RhdGEuY29sb3JzKSA/IHByb2dyZXNzRGF0YS5jb2xvcnMgOiBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBWZXJpZmljYXIgY29tcGF0aWJpbGlkYWQgZGUgY29sb3Jlc1xuICAgICAgICAgIGlmIChpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycy5sZW5ndGggPiAwICYmIEFycmF5LmlzQXJyYXkocHJvZ3Jlc3NEYXRhLmNvbG9ycykpIHtcbiAgICAgICAgICAgIGNvbnN0IHNhdmVkQ29sb3JJZHMgPSBwcm9ncmVzc0RhdGEuY29sb3JzLm1hcChjID0+IGMuaWQpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbG9ySWRzID0gaW1hZ2VTdGF0ZS5hdmFpbGFibGVDb2xvcnMubWFwKGMgPT4gYy5pZCk7XG4gICAgICAgICAgICBjb25zdCBjb21tb25Db2xvcnMgPSBzYXZlZENvbG9ySWRzLmZpbHRlcihpZCA9PiBjdXJyZW50Q29sb3JJZHMuaW5jbHVkZXMoaWQpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbW1vbkNvbG9ycy5sZW5ndGggPCBzYXZlZENvbG9ySWRzLmxlbmd0aCAqIDAuOCkge1xuICAgICAgICAgICAgICBsb2coJ1x1MjZBMFx1RkUwRiBMb3MgY29sb3JlcyBndWFyZGFkb3Mgbm8gY29pbmNpZGVuIGNvbXBsZXRhbWVudGUgY29uIGxvcyBhY3R1YWxlcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZXN0YXVyYXIgZXN0YWRvIGJcdTAwRTFzaWNvIChjb21wYXRpYmxlIGNvbiB2MS4wIHkgdjIuMClcbiAgICAgICAgICBpbWFnZVN0YXRlLmltYWdlRGF0YSA9IHtcbiAgICAgICAgICAgIC4uLnByb2dyZXNzRGF0YS5pbWFnZURhdGEsXG4gICAgICAgICAgICBwaXhlbHM6IFtdIC8vIExvcyBwXHUwMEVEeGVsZXMgc2UgcmVnZW5lcmFyXHUwMEUxbiBzaSBlcyBuZWNlc2FyaW9cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gUmVsbGVuYXIgZGF0b3MgY29tcGxldG9zIGRlIHBcdTAwRUR4ZWxlcyBzaSBleGlzdGVuIGVuIGVsIGFyY2hpdm8gKHYyLjApXG4gICAgICAgICAgY29uc3QgZnVsbFBpeGVsRGF0YSA9IHByb2dyZXNzRGF0YS5pbWFnZURhdGEuZnVsbFBpeGVsRGF0YSB8fCBwcm9ncmVzc0RhdGEuZnVsbFBpeGVsRGF0YTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmdWxsUGl4ZWxEYXRhKSAmJiBmdWxsUGl4ZWxEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGltYWdlU3RhdGUuaW1hZ2VEYXRhLmZ1bGxQaXhlbERhdGEgPSBmdWxsUGl4ZWxEYXRhO1xuICAgICAgICAgICAgaW1hZ2VTdGF0ZS5pbWFnZURhdGEucGl4ZWxzID0gZnVsbFBpeGVsRGF0YTsgLy8gcGFyYSBjb21wYXRpYmlsaWRhZCBjb24gZ2V0RnVsbFBpeGVsRGF0YVxuICAgICAgICAgICAgbG9nKGBcdTI3MDUgQ2FyZ2Fkb3MgJHtmdWxsUGl4ZWxEYXRhLmxlbmd0aH0gcFx1MDBFRHhlbGVzIGNvbXBsZXRvcyBkZWwgcHJveWVjdG9gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgaW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzID0gcHJvZ3Jlc3NEYXRhLnByb2dyZXNzLnBhaW50ZWRQaXhlbHM7XG4gICAgICAgICAgaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyA9IHByb2dyZXNzRGF0YS5wcm9ncmVzcy50b3RhbFBpeGVscztcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNYW5lamFyIHRhbnRvIGZvcm1hdG8gb3JpZ2luYWwgY29tbyBtb2R1bGFyIHBhcmEgcG9zaWNpb25lc1xuICAgICAgICAgIGlmIChwcm9ncmVzc0RhdGEucHJvZ3Jlc3MubGFzdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAvLyBGb3JtYXRvIG1vZHVsYXJcbiAgICAgICAgICAgIGltYWdlU3RhdGUubGFzdFBvc2l0aW9uID0gcHJvZ3Jlc3NEYXRhLnByb2dyZXNzLmxhc3RQb3NpdGlvbjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHByb2dyZXNzRGF0YS5wb3NpdGlvbi5sYXN0WCAhPT0gdW5kZWZpbmVkICYmIHByb2dyZXNzRGF0YS5wb3NpdGlvbi5sYXN0WSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBGb3JtYXRvIG9yaWdpbmFsXG4gICAgICAgICAgICBpbWFnZVN0YXRlLmxhc3RQb3NpdGlvbiA9IHsgeDogcHJvZ3Jlc3NEYXRhLnBvc2l0aW9uLmxhc3RYLCB5OiBwcm9ncmVzc0RhdGEucG9zaXRpb24ubGFzdFkgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTWFuZWphciB0YW50byBmb3JtYXRvIG9yaWdpbmFsIGNvbW8gbW9kdWxhciBwYXJhIHN0YXJ0UG9zaXRpb25cbiAgICAgICAgICBpZiAocHJvZ3Jlc3NEYXRhLnBvc2l0aW9uLnN0YXJ0UG9zaXRpb24pIHtcbiAgICAgICAgICAgIC8vIEZvcm1hdG8gbW9kdWxhclxuICAgICAgICAgICAgaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uID0gcHJvZ3Jlc3NEYXRhLnBvc2l0aW9uLnN0YXJ0UG9zaXRpb247XG4gICAgICAgICAgfSBlbHNlIGlmIChwcm9ncmVzc0RhdGEucG9zaXRpb24uc3RhcnRYICE9PSB1bmRlZmluZWQgJiYgcHJvZ3Jlc3NEYXRhLnBvc2l0aW9uLnN0YXJ0WSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBGb3JtYXRvIG9yaWdpbmFsXG4gICAgICAgICAgICBpbWFnZVN0YXRlLnN0YXJ0UG9zaXRpb24gPSB7IHg6IHByb2dyZXNzRGF0YS5wb3NpdGlvbi5zdGFydFgsIHk6IHByb2dyZXNzRGF0YS5wb3NpdGlvbi5zdGFydFkgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgaW1hZ2VTdGF0ZS50aWxlWCA9IHByb2dyZXNzRGF0YS5wb3NpdGlvbi50aWxlWDtcbiAgICAgICAgICBpbWFnZVN0YXRlLnRpbGVZID0gcHJvZ3Jlc3NEYXRhLnBvc2l0aW9uLnRpbGVZO1xuICAgICAgICAgIGltYWdlU3RhdGUub3JpZ2luYWxJbWFnZU5hbWUgPSBwcm9ncmVzc0RhdGEuaW1hZ2VEYXRhLm9yaWdpbmFsTmFtZTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNYW5lamFyIHJlbWFpbmluZ1BpeGVscyB0YW50byBlbiBwcm9ncmVzcyBjb21vIGVuIHJhXHUwMEVEelxuICAgICAgICAgIGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzID0gcHJvZ3Jlc3NEYXRhLnJlbWFpbmluZ1BpeGVscyB8fCBwcm9ncmVzc0RhdGEucHJvZ3Jlc3MucmVtYWluaW5nUGl4ZWxzIHx8IFtdO1xuXG4gICAgICAgICAgLy8gQ2FyZ2FyIGNvbmZpZ3VyYWNpXHUwMEYzbiAocmV0cm9jb21wYXRpYmxlKVxuICAgICAgICAgIGlmIChwcm9ncmVzc0RhdGEuY29uZmlnKSB7XG4gICAgICAgICAgICBpbWFnZVN0YXRlLnBpeGVsc1BlckJhdGNoID0gcHJvZ3Jlc3NEYXRhLmNvbmZpZy5waXhlbHNQZXJCYXRjaCB8fCBpbWFnZVN0YXRlLnBpeGVsc1BlckJhdGNoO1xuICAgICAgICAgICAgaW1hZ2VTdGF0ZS51c2VBbGxDaGFyZ2VzRmlyc3QgPSBwcm9ncmVzc0RhdGEuY29uZmlnLnVzZUFsbENoYXJnZXNGaXJzdCAhPT0gdW5kZWZpbmVkID8gXG4gICAgICAgICAgICAgIHByb2dyZXNzRGF0YS5jb25maWcudXNlQWxsQ2hhcmdlc0ZpcnN0IDogaW1hZ2VTdGF0ZS51c2VBbGxDaGFyZ2VzRmlyc3Q7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNpIHVzZUFsbENoYXJnZXNGaXJzdCBlc3RcdTAwRTEgYWN0aXZhZG8sIGxhIHByXHUwMEYzeGltYSBwYXNhZGEgZGViZXJcdTAwRURhIHNlciBjb21vIHByaW1lciBsb3RlXG4gICAgICAgICAgICAvLyBTaSBubyBlc3RcdTAwRTEgYWN0aXZhZG8gbyBubyBlc3RcdTAwRTEgZGVmaW5pZG8sIGNvbnRpbnVhciBjb21vIHBhc2FkYSBub3JtYWxcbiAgICAgICAgICAgIGltYWdlU3RhdGUuaXNGaXJzdEJhdGNoID0gaW1hZ2VTdGF0ZS51c2VBbGxDaGFyZ2VzRmlyc3QgPyB0cnVlIDogXG4gICAgICAgICAgICAgIChwcm9ncmVzc0RhdGEuY29uZmlnLmlzRmlyc3RCYXRjaCAhPT0gdW5kZWZpbmVkID8gcHJvZ3Jlc3NEYXRhLmNvbmZpZy5pc0ZpcnN0QmF0Y2ggOiBmYWxzZSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgbG9nKGBcdUQ4M0RcdURDQzEgUHJvZ3Jlc28gY2FyZ2FkbyAtIHVzZUFsbENoYXJnZXNGaXJzdDogJHtpbWFnZVN0YXRlLnVzZUFsbENoYXJnZXNGaXJzdH0sIGlzRmlyc3RCYXRjaDogJHtpbWFnZVN0YXRlLmlzRmlyc3RCYXRjaH1gKTtcbiAgICAgICAgICAgIGltYWdlU3RhdGUubWF4Q2hhcmdlcyA9IHByb2dyZXNzRGF0YS5jb25maWcubWF4Q2hhcmdlcyB8fCBpbWFnZVN0YXRlLm1heENoYXJnZXM7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE51ZXZhcyBjb25maWd1cmFjaW9uZXMgdjIuMCAoc29sbyBzaSBlc3RcdTAwRTFuIGRpc3BvbmlibGVzKVxuICAgICAgICAgICAgaWYgKGZpbGVWZXJzaW9uID49IFwiMi4wXCIpIHtcbiAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS5wYWludFBhdHRlcm4gPSBwcm9ncmVzc0RhdGEuY29uZmlnLnBhaW50UGF0dGVybiB8fCAnbGluZWFyX3N0YXJ0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG5cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBcGxpY2FyIHBhdHJcdTAwRjNuIGRlIHBpbnRhZG8gYSBwXHUwMEVEeGVsZXMgcmVzdGFudGVzIChzb2xvIHNpIGhheSBjb25maWd1cmFjaVx1MDBGM24pXG4gICAgICAgICAgaWYgKGltYWdlU3RhdGUucGFpbnRQYXR0ZXJuICYmIGltYWdlU3RhdGUucGFpbnRQYXR0ZXJuICE9PSAnbGluZWFyX3N0YXJ0JyAmJiBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpbXBvcnQoJy4vcGF0dGVybnMuanMnKS50aGVuKCh7IGFwcGx5UGFpbnRQYXR0ZXJuIH0pID0+IHtcbiAgICAgICAgICAgICAgICBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscyA9IGFwcGx5UGFpbnRQYXR0ZXJuKFxuICAgICAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMsIFxuICAgICAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS5wYWludFBhdHRlcm4sIFxuICAgICAgICAgICAgICAgICAgaW1hZ2VTdGF0ZS5pbWFnZURhdGFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGxvZyhgXHVEODNDXHVERkE4IFBhdHJcdTAwRjNuIGRlIHBpbnRhZG8gYXBsaWNhZG86ICR7aW1hZ2VTdGF0ZS5wYWludFBhdHRlcm59YCk7XG4gICAgICAgICAgICAgIH0pLmNhdGNoKHBhdHRlcm5FcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3IgYXBsaWNhbmRvIHBhdHJcdTAwRjNuIGRlIHBpbnRhZG86JywgcGF0dGVybkVycm9yKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGNhdGNoIChwYXR0ZXJuRXJyb3IpIHtcbiAgICAgICAgICAgICAgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3IgY2FyZ2FuZG8gbVx1MDBGM2R1bG8gZGUgcGF0cm9uZXM6JywgcGF0dGVybkVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBY3R1YWxpemFyIG92ZXJsYXkgZGVsIHBsYW4gY29uIGxvcyBwXHUwMEVEeGVsZXMgcmVzdGFudGVzIChzaSBsb3MgaGF5KVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAod2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5pbmplY3RTdHlsZXMoKTtcbiAgICAgICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldEVuYWJsZWQodHJ1ZSk7IC8vIEFjdGl2YXIgYXV0b21cdTAwRTF0aWNhbWVudGUgYWwgY2FyZ2FyIHByb2dyZXNvXG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBDb25maWd1cmFyIGFuY2xhIHNpIHRlbmVtb3MgcG9zaWNpXHUwMEYzbiBkZSBpbmljaW9cbiAgICAgICAgICAgICAgaWYgKGltYWdlU3RhdGUuc3RhcnRQb3NpdGlvbiAmJiBpbWFnZVN0YXRlLnRpbGVYICE9PSB1bmRlZmluZWQgJiYgaW1hZ2VTdGF0ZS50aWxlWSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93Ll9fV1BBX1BMQU5fT1ZFUkxBWV9fLnNldEFuY2hvcih7XG4gICAgICAgICAgICAgICAgICB0aWxlWDogaW1hZ2VTdGF0ZS50aWxlWCxcbiAgICAgICAgICAgICAgICAgIHRpbGVZOiBpbWFnZVN0YXRlLnRpbGVZLFxuICAgICAgICAgICAgICAgICAgcHhYOiBpbWFnZVN0YXRlLnN0YXJ0UG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICAgIHB4WTogaW1hZ2VTdGF0ZS5zdGFydFBvc2l0aW9uLnlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsb2coYFx1MjcwNSBQbGFuIG92ZXJsYXkgYW5jbGFkbyBjb24gcG9zaWNpXHUwMEYzbiBjYXJnYWRhOiB0aWxlKCR7aW1hZ2VTdGF0ZS50aWxlWH0sJHtpbWFnZVN0YXRlLnRpbGVZfSkgbG9jYWwoJHtpbWFnZVN0YXRlLnN0YXJ0UG9zaXRpb24ueH0sJHtpbWFnZVN0YXRlLnN0YXJ0UG9zaXRpb24ueX0pYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zZXRQbGFuKGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLCB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuZXh0QmF0Y2hDb3VudDogaW1hZ2VTdGF0ZS5waXhlbHNQZXJCYXRjaFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGxvZyhgXHUyNzA1IFBsYW4gb3ZlcmxheSBhY3RpdmFkbyBjb24gJHtpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscy5sZW5ndGh9IHBcdTAwRUR4ZWxlcyByZXN0YW50ZXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2coJ1x1MjZBMFx1RkUwRiBFcnJvciBhY3RpdmFuZG8gcGxhbiBvdmVybGF5IGFsIGNhcmdhciBwcm9ncmVzbzonLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTWFyY2FyIGNvbW8gaW1hZ2VuIGNhcmdhZGEgeSBsaXN0byBwYXJhIGNvbnRpbnVhclxuICAgICAgICAgIGltYWdlU3RhdGUuaW1hZ2VMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgIGltYWdlU3RhdGUuY29sb3JzQ2hlY2tlZCA9IHRydWU7XG5cbiAgICAgICAgICAvLyBZYSBubyBzZSByZXN0YXVyYSBvdmVybGF5IGRlIGltYWdlbjsgZWwgb3ZlcmxheSBkZSBwbGFuIHNlIGxsZW5hIG1cdTAwRTFzIGFiYWpvXG4gICAgICAgICAgXG4gICAgICAgICAgbG9nKGBcdTI3MDUgUHJvZ3Jlc28gY2FyZ2FkbyAodiR7ZmlsZVZlcnNpb259KTogJHtpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHN9LyR7aW1hZ2VTdGF0ZS50b3RhbFBpeGVsc30gcFx1MDBFRHhlbGVzYCk7XG4gICAgICAgICAgaWYgKGZpbGVWZXJzaW9uID49IFwiMi4wXCIpIHtcbiAgICAgICAgICAgIGxvZyhgXHVEODNDXHVERkE4IFBhdHJcdTAwRjNuOiAke2ltYWdlU3RhdGUucGFpbnRQYXR0ZXJufWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICByZXNvbHZlKHsgXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICAgIGRhdGE6IHByb2dyZXNzRGF0YSxcbiAgICAgICAgICAgIHBhaW50ZWQ6IGltYWdlU3RhdGUucGFpbnRlZFBpeGVscyxcbiAgICAgICAgICAgIHRvdGFsOiBpbWFnZVN0YXRlLnRvdGFsUGl4ZWxzLFxuICAgICAgICAgICAgY2FuQ29udGludWU6IGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICB2ZXJzaW9uOiBmaWxlVmVyc2lvblxuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgICAgbG9nKCdcdTI3NEMgRXJyb3IgcGFyc2VhbmRvIGFyY2hpdm8gZGUgcHJvZ3Jlc286JywgcGFyc2VFcnJvcik7XG4gICAgICAgICAgcmVzb2x2ZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogcGFyc2VFcnJvci5tZXNzYWdlIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgXG4gICAgICByZWFkZXIub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAnRXJyb3IgbGV5ZW5kbyBhcmNoaXZvJztcbiAgICAgICAgbG9nKCdcdTI3NEMnLCBlcnJvcik7XG4gICAgICAgIHJlc29sdmUoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3IgfSk7XG4gICAgICB9O1xuICAgICAgXG4gICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcbiAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2coJ1x1Mjc0QyBFcnJvciBjYXJnYW5kbyBwcm9ncmVzbzonLCBlcnJvcik7XG4gICAgICByZXNvbHZlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhclByb2dyZXNzKCkge1xuICBpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHMgPSAwO1xuICBpbWFnZVN0YXRlLnRvdGFsUGl4ZWxzID0gMDtcbiAgaW1hZ2VTdGF0ZS5sYXN0UG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcbiAgaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMgPSBbXTtcbiAgaW1hZ2VTdGF0ZS5pbWFnZURhdGEgPSBudWxsO1xuICBpbWFnZVN0YXRlLnN0YXJ0UG9zaXRpb24gPSBudWxsO1xuICBpbWFnZVN0YXRlLmltYWdlTG9hZGVkID0gZmFsc2U7XG4gIGltYWdlU3RhdGUub3JpZ2luYWxJbWFnZU5hbWUgPSBudWxsO1xuICBpbWFnZVN0YXRlLmlzRmlyc3RCYXRjaCA9IHRydWU7IC8vIFJlc2V0ZWFyIHBhcmEgbnVldmEgaW1hZ2VuXG4gIGltYWdlU3RhdGUubmV4dEJhdGNoQ29vbGRvd24gPSAwO1xuICAvLyBMaW1waWFyIG51ZXZvcyBjYW1wb3MgdjIuMFxuICBpbWFnZVN0YXRlLmRyYXduUGl4ZWxzTWFwLmNsZWFyKCk7XG4gIGltYWdlU3RhdGUubGFzdFByb3RlY3Rpb25DaGVjayA9IDA7XG4gIFxuICBsb2coJ1x1RDgzRVx1RERGOSBQcm9ncmVzbyBsaW1waWFkbycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzUHJvZ3Jlc3MoKSB7XG4gIHJldHVybiBpbWFnZVN0YXRlLmltYWdlTG9hZGVkICYmIFxuICAgICAgICAgaW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzID4gMCAmJiBcbiAgICAgICAgIGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzICYmIFxuICAgICAgICAgaW1hZ2VTdGF0ZS5yZW1haW5pbmdQaXhlbHMubGVuZ3RoID4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb2dyZXNzSW5mbygpIHtcbiAgcmV0dXJuIHtcbiAgICBoYXNQcm9ncmVzczogaGFzUHJvZ3Jlc3MoKSxcbiAgICBwYWludGVkOiBpbWFnZVN0YXRlLnBhaW50ZWRQaXhlbHMsXG4gICAgdG90YWw6IGltYWdlU3RhdGUudG90YWxQaXhlbHMsXG4gICAgcmVtYWluaW5nOiBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscyA/IGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLmxlbmd0aCA6IDAsXG4gICAgcGVyY2VudGFnZTogaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyA+IDAgPyAoaW1hZ2VTdGF0ZS5wYWludGVkUGl4ZWxzIC8gaW1hZ2VTdGF0ZS50b3RhbFBpeGVscyAqIDEwMCkgOiAwLFxuICAgIGxhc3RQb3NpdGlvbjogeyAuLi5pbWFnZVN0YXRlLmxhc3RQb3NpdGlvbiB9LFxuICAgIGNhbkNvbnRpbnVlOiBoYXNQcm9ncmVzcygpXG4gIH07XG59XG4iLCAiaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2NvcmUvbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVTaGFkb3dSb290IH0gZnJvbSBcIi4uL2NvcmUvdWktdXRpbHMuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvZ1dpbmRvdyB9IGZyb20gXCIuLi9sb2dfd2luZG93L2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVSZXNpemVXaW5kb3cgfSBmcm9tIFwiLi9SZXNpemUtd2luZG93LmpzXCI7XG5pbXBvcnQgeyBzYXZlR3VhcmRKU09OIH0gZnJvbSBcIi4vc2FmZS1ndWFyZC13aW5kb3cuanNcIjtcbmltcG9ydCB7IHJlZ2lzdGVyV2luZG93LCB1bnJlZ2lzdGVyV2luZG93LCBicmluZ1dpbmRvd1RvRnJvbnQgfSBmcm9tICcuLi9jb3JlL3dpbmRvdy1tYW5hZ2VyLmpzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUltYWdlVUkoeyB0ZXh0cywgLi4uaGFuZGxlcnMgfSkge1xuICBsb2coJ1x1RDgzQ1x1REZBOCBDcmVhbmRvIGludGVyZmF6IGRlIEF1dG8tSW1hZ2UnKTtcbiAgXG4gIC8vIEFncmVnYXIgRm9udEF3ZXNvbWUgYWwgZG9jdW1lbnQuaGVhZCBzaSBubyBleGlzdGVcbiAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsaW5rW2hyZWYqPVwiZm9udC1hd2Vzb21lXCJdJykpIHtcbiAgICBjb25zdCBmb250QXdlc29tZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICBmb250QXdlc29tZS5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgZm9udEF3ZXNvbWUuaHJlZiA9ICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNi40LjAvY3NzL2FsbC5taW4uY3NzJztcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGZvbnRBd2Vzb21lKTtcbiAgICBsb2coJ1x1RDgzRFx1RENFNiBGb250QXdlc29tZSBhXHUwMEYxYWRpZG8gYWwgZG9jdW1lbnQuaGVhZCcpO1xuICB9XG4gIFxuICAvLyBDcmVhciBzaGFkb3cgcm9vdCBwYXJhIGFpc2xhbWllbnRvIGRlIGVzdGlsb3NcbiAgY29uc3QgeyBob3N0LCByb290IH0gPSBjcmVhdGVTaGFkb3dSb290KCk7XG4gIFxuICAvLyBDcmVhciBlc3RpbG9zXG4gIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudGV4dENvbnRlbnQgPSBgXG4gICAgQGtleWZyYW1lcyBzbGlkZUluIHtcbiAgICAgIGZyb20geyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMjBweCk7IG9wYWNpdHk6IDA7IH1cbiAgICAgIHRvIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOyBvcGFjaXR5OiAxOyB9XG4gICAgfVxuICAgIEBrZXlmcmFtZXMgcHVsc2Uge1xuICAgICAgMCUgeyBib3gtc2hhZG93OiAwIDAgMCAwIHJnYmEoMCwgMjU1LCAwLCAwLjcpOyB9XG4gICAgICA3MCUgeyBib3gtc2hhZG93OiAwIDAgMCAxMHB4IHJnYmEoMCwgMjU1LCAwLCAwKTsgfVxuICAgICAgMTAwJSB7IGJveC1zaGFkb3c6IDAgMCAwIDAgcmdiYSgwLCAyNTUsIDAsIDApOyB9XG4gICAgfVxuICAgIFxuICAgIC5jb250YWluZXIge1xuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgdG9wOiAyMHB4O1xuICAgICAgcmlnaHQ6IDcwcHg7XG4gICAgICB3aWR0aDogMzAwcHg7XG4gICAgICBtaW4td2lkdGg6IDI1MHB4O1xuICAgICAgYmFja2dyb3VuZDogIzFhMWExYTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XG4gICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgYm94LXNoYWRvdzogMCA1cHggMTVweCByZ2JhKDAsMCwwLDAuNSk7XG4gICAgICBmb250LWZhbWlseTogJ1NlZ29lIFVJJywgUm9ib3RvLCBzYW5zLXNlcmlmO1xuICAgICAgY29sb3I6ICNlZWU7XG4gICAgICBhbmltYXRpb246IHNsaWRlSW4gMC40cyBlYXNlLW91dDtcbiAgICAgIHJlc2l6ZTogYm90aDtcbiAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICBtaW4taGVpZ2h0OiAyMDBweDtcbiAgICAgIG1heC1oZWlnaHQ6IDgwdmg7XG4gICAgfVxuICAgIC8qIEVzdGFkbyBtaW5pbWl6YWRvOiBlbCBjb250ZW5lZG9yIG5vIGZ1ZXJ6YSBhbHR1cmEgbVx1MDBFRG5pbWEgKi9cbiAgICAuY29udGFpbmVyLm1pbmltaXplZCB7XG4gICAgICBtaW4taGVpZ2h0OiAwICFpbXBvcnRhbnQ7XG4gICAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcbiAgICB9XG4gICAgXG4gICAgLmhlYWRlciB7XG4gICAgICBwYWRkaW5nOiAxMnB4IDE1cHg7XG4gICAgICBiYWNrZ3JvdW5kOiAjMmQzNzQ4O1xuICAgICAgY29sb3I6ICM2MGE1ZmE7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBjdXJzb3I6IG1vdmU7XG4gICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgIH1cbiAgICBcbiAgICAuaGVhZGVyLXRpdGxlIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgZ2FwOiA4cHg7XG4gICAgfVxuICAgIFxuICAgIC5oZWFkZXItY29udHJvbHMge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGdhcDogMTBweDtcbiAgICB9XG4gICAgXG4gICAgLmhlYWRlci1idG4ge1xuICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIGNvbG9yOiAjZWVlO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgb3BhY2l0eTogMC43O1xuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzO1xuICAgICAgcGFkZGluZzogNXB4O1xuICAgIH1cbiAgICBcbiAgICAuaGVhZGVyLWJ0bjpob3ZlciB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgICBcbiAgICAuY29udGVudCB7XG4gICAgICBwYWRkaW5nOiAxNXB4O1xuICAgICAgZmxleDogMTtcbiAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICBvdmVyZmxvdy14OiBoaWRkZW47XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG4gICAgXG4gICAgLyogRWxlbWVudG9zIHF1ZSBzZSBvY3VsdGFuIGN1YW5kbyBlc3RcdTAwRTEgbWluaW1pemFkbyAqL1xuICAgIC5jb2xsYXBzaWJsZS1jb250ZW50IHtcbiAgICAgIG1heC1oZWlnaHQ6IDEwMDBweDtcbiAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgMC4zNXMgZWFzZSwgb3BhY2l0eSAwLjI1cyBlYXNlLCBwYWRkaW5nIDAuMjVzIGVhc2U7XG4gICAgfVxuICAgIFxuICAgIC5jb250ZW50LmNvbGxhcHNlZCAuY29sbGFwc2libGUtY29udGVudCB7XG4gICAgICBtYXgtaGVpZ2h0OiAwO1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBwYWRkaW5nOiAwO1xuICAgIH1cbiAgICAvKiBFbCBjb250ZW50IGRlamEgZGUgZXhwYW5kaXIgYWwgZXN0YXIgY29sYXBzYWRvICovXG4gICAgLmNvbnRlbnQuY29sbGFwc2VkIHtcbiAgICAgIGZsZXg6IDA7XG4gICAgfVxuICAgIFxuICAgIC8qIFN0YXR1cyBzaWVtcHJlIHZpc2libGUgKi9cbiAgICAuY29udGVudC5jb2xsYXBzZWQgLnN0YXR1cyB7XG4gICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xuICAgICAgbWFyZ2luLXRvcDogOHB4O1xuICAgICAgYW5pbWF0aW9uOiBzbGlkZUluIDAuM3MgZWFzZS1vdXQ7XG4gICAgfVxuICAgIFxuICAgIC5jb250cm9scyB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGdhcDogMTBweDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgfVxuICAgIFxuICAgIC5jb25maWctcGFuZWwge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIGJhY2tncm91bmQ6ICMyZDM3NDg7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB9XG4gICAgXG4gICAgLmNvbmZpZy1wYW5lbC52aXNpYmxlIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgICBcbiAgICAuY29uZmlnLWl0ZW0ge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogNnB4O1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLnRvZ2dsZS1zd2l0Y2gge1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgd2lkdGg6IDQ0cHg7XG4gICAgICAgICAgaGVpZ2h0OiAyNHB4O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudG9nZ2xlLXN3aXRjaCBpbnB1dCB7XG4gICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50b2dnbGUtc2xpZGVyIHtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWY0NDQ0O1xuICAgICAgICAgIHRyYW5zaXRpb246IC4zcztcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAyNHB4O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudG9nZ2xlLXNsaWRlcjpiZWZvcmUge1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICAgIGhlaWdodDogMThweDtcbiAgICAgICAgICB3aWR0aDogMThweDtcbiAgICAgICAgICBsZWZ0OiAzcHg7XG4gICAgICAgICAgYm90dG9tOiAzcHg7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgICAgdHJhbnNpdGlvbjogLjNzO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaW5wdXQ6Y2hlY2tlZCArIC50b2dnbGUtc2xpZGVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTBiOTgxO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpbnB1dDpjaGVja2VkICsgLnRvZ2dsZS1zbGlkZXI6YmVmb3JlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMjBweCk7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgIH1cbiAgICBcbiAgICAuY29uZmlnLWlucHV0IHtcbiAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgcGFkZGluZzogNHB4O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcbiAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgIGJhY2tncm91bmQ6ICMxYTFhMWE7XG4gICAgICBjb2xvcjogI2VlZTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG4gICAgXG4gICAgLmNvbmZpZy1pbnB1dC5wYWludC1wYXR0ZXJuIHtcbiAgICAgIHdpZHRoOiAxNDBweDtcbiAgICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICAgIHBhZGRpbmc6IDZweDtcbiAgICB9XG4gICAgXG4gICAgLmNvbmZpZy1pbnB1dFt0eXBlPVwidGV4dFwiXSwgXG4gICAgLmNvbmZpZy1pbnB1dCBzZWxlY3Qge1xuICAgICAgd2lkdGg6IDEyMHB4O1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB9XG4gICAgXG4gICAgLmNvbmZpZy1jaGVja2JveCB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICB9XG4gICAgXG4gICAgLm1haW4tY29uZmlnIHtcbiAgICAgIGJhY2tncm91bmQ6ICMyZDM3NDg7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMzYTQ1NTM7XG4gICAgfVxuICAgIFxuICAgIC5jb25maWctcm93IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgZ2FwOiAxMHB4O1xuICAgIH1cbiAgICBcbiAgICAuY29uZmlnLWxhYmVsIHtcbiAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgIGNvbG9yOiAjY2JkNWUwO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBnYXA6IDRweDtcbiAgICB9XG4gICAgXG4gICAgLmJhdGNoLXZhbHVlLCAuY29vbGRvd24tdmFsdWUge1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBjb2xvcjogIzYwYTVmYTtcbiAgICB9XG4gICAgXG4gICAgLmJ0biB7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBnYXA6IDhweDtcbiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzO1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cbiAgICBcbiAgICAuYnRuLWhhbGYge1xuICAgICAgICAgIHdpZHRoOiBjYWxjKDUwJSAtIDNweCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAuYnRuLWZ1bGwge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuICAgIFxuICAgIC5idXR0b24tcm93IHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGdhcDogNnB4O1xuICAgICAgICAgIG1hcmdpbjogM3B4IDA7XG4gICAgICAgIH1cbiAgICBcbiAgICAuYnRuOmhvdmVyOm5vdCg6ZGlzYWJsZWQpIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTtcbiAgICB9XG4gICAgXG4gICAgLmJ0bjpkaXNhYmxlZCB7XG4gICAgICBvcGFjaXR5OiAwLjU7XG4gICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgICAgdHJhbnNmb3JtOiBub25lICFpbXBvcnRhbnQ7XG4gICAgfVxuICAgIFxuICAgIC5idG4tcHJpbWFyeSB7XG4gICAgICBiYWNrZ3JvdW5kOiAjNjBhNWZhO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgIH1cbiAgICBcbiAgICAuYnRuLXVwbG9hZCB7XG4gICAgICBiYWNrZ3JvdW5kOiAjMmQzNzQ4O1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgYm9yZGVyOiAxcHggZGFzaGVkICNlZWU7XG4gICAgfVxuICAgIFxuICAgIC5idG4tbG9hZCB7XG4gICAgICBiYWNrZ3JvdW5kOiAjMjE5NkYzO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgIH1cbiAgICBcbiAgICAuYnRuLXN0YXJ0IHtcbiAgICAgIGJhY2tncm91bmQ6ICMxMGI5ODE7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuICAgIFxuICAgIC5idG4tc3RvcCB7XG4gICAgICBiYWNrZ3JvdW5kOiAjZWY0NDQ0O1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgIH1cbiAgICAvKiBFc3RpbG8gcmVmb3J6YWRvIGN1YW5kbyBsYSBwaW50dXJhIGVzdFx1MDBFMSBhY3RpdmEgKi9cbiAgICAuYnRuLXN0b3AtcnVubmluZyB7XG4gICAgICBiYWNrZ3JvdW5kOiAjZWY0NDQ0ICFpbXBvcnRhbnQ7XG4gICAgICBjb2xvcjogI2ZmZiAhaW1wb3J0YW50O1xuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHJnYmEoMjM5LDY4LDY4LDAuMzUpO1xuICAgIH1cbiAgICBcbiAgICAuYnRuLXNlbGVjdCB7XG4gICAgICBiYWNrZ3JvdW5kOiAjZjU5ZTBiO1xuICAgICAgY29sb3I6IGJsYWNrO1xuICAgIH1cbiAgICBcbiAgICAuYnRuLXNlY29uZGFyeSB7XG4gICAgICBiYWNrZ3JvdW5kOiAjNmI3MjgwO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgIH1cbiAgICBcbiAgICAucHJvZ3Jlc3Mge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBiYWNrZ3JvdW5kOiAjMmQzNzQ4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgbWFyZ2luOiAxMHB4IDA7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgaGVpZ2h0OiAxMHB4O1xuICAgIH1cbiAgICBcbiAgICAucHJvZ3Jlc3MtYmFyIHtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIGJhY2tncm91bmQ6ICM2MGE1ZmE7XG4gICAgICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzO1xuICAgICAgd2lkdGg6IDAlO1xuICAgIH1cbiAgICBcbiAgICAuc3RhdHMge1xuICAgICAgYmFja2dyb3VuZDogIzJkMzc0ODtcbiAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgIH1cbiAgICBcbiAgICAuc3RhdC1pdGVtIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBwYWRkaW5nOiA2cHggMDtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG4gICAgXG4gICAgLnN0YXQtbGFiZWwge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBnYXA6IDZweDtcbiAgICAgIG9wYWNpdHk6IDAuODtcbiAgICB9XG4gICAgXG4gICAgLnN0YXR1cyB7XG4gICAgICBwYWRkaW5nOiA4cHg7XG4gICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBmb250LXNpemU6IDEzcHg7XG4gICAgfVxuICAgIFxuICAgIC5zdGF0dXMtZGVmYXVsdCB7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LDAuMSk7XG4gICAgfVxuICAgIFxuICAgIC5zdGF0dXMtc3VjY2VzcyB7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDI1NSwgMCwgMC4xKTtcbiAgICAgIGNvbG9yOiAjMTBiOTgxO1xuICAgIH1cbiAgICBcbiAgICAuc3RhdHVzLWVycm9yIHtcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAwLCAwLCAwLjEpO1xuICAgICAgY29sb3I6ICNlZjQ0NDQ7XG4gICAgfVxuICAgIFxuICAgIC5zdGF0dXMtd2FybmluZyB7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMTY1LCAwLCAwLjEpO1xuICAgICAgY29sb3I6IG9yYW5nZTtcbiAgICB9XG4gICAgXG4gICAgLnN0YXR1cy1pbmZvIHtcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMTUwLCAyNTUsIDAuMSk7XG4gICAgICBjb2xvcjogIzYwYTVmYTtcbiAgICB9XG5cbiAgICBcbiAgICAubW9kYWwtb3ZlcmxheSB7XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICB0b3A6IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLDAuNyk7XG4gICAgICB6LWluZGV4OiAxMDAwMTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgfVxuICAgIFxuICAgIC5tb2RhbCB7XG4gICAgICBiYWNrZ3JvdW5kOiAjMWExYTFhO1xuICAgICAgYm9yZGVyOiAycHggc29saWQgIzMzMztcbiAgICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gICAgICBwYWRkaW5nOiAyNXB4O1xuICAgICAgY29sb3I6ICNlZWU7XG4gICAgICBtaW4td2lkdGg6IDM1MHB4O1xuICAgICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgICAgIGJveC1zaGFkb3c6IDAgMTBweCAzMHB4IHJnYmEoMCwwLDAsMC41KTtcbiAgICB9XG4gICAgXG4gICAgLm1vZGFsIGgzIHtcbiAgICAgIG1hcmdpbjogMCAwIDE1cHggMDtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICB9XG4gICAgXG4gICAgLm1vZGFsIHAge1xuICAgICAgbWFyZ2luOiAwIDAgMjBweCAwO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgICB9XG4gICAgXG4gICAgLm1vZGFsLWJ1dHRvbnMge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGdhcDogMTBweDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgICBcbiAgICAubW9kYWwtYnRuIHtcbiAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3M7XG4gICAgICBtaW4td2lkdGg6IDEwMHB4O1xuICAgIH1cbiAgICBcbiAgICAubW9kYWwtYnRuLXNhdmUge1xuICAgICAgYmFja2dyb3VuZDogIzEwYjk4MTtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB9XG4gICAgXG4gICAgLm1vZGFsLWJ0bi1kaXNjYXJkIHtcbiAgICAgIGJhY2tncm91bmQ6ICNlZjQ0NDQ7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuICAgIFxuICAgIC5tb2RhbC1idG4tY2FuY2VsIHtcbiAgICAgIGJhY2tncm91bmQ6ICMyZDM3NDg7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuICAgIFxuICAgIC5tb2RhbC1idG46aG92ZXIge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0ycHgpO1xuICAgIH1cbiAgICBcbiAgICAvKiBNZWRpYSBxdWVyaWVzIHBhcmEgcmVzcG9uc2l2aWRhZCAqL1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgIHdpZHRoOiBjYWxjKDEwMHZ3IC0gMjBweCk7XG4gICAgICAgIG1heC13aWR0aDogMzUwcHg7XG4gICAgICAgIGxlZnQ6IDEwcHggIWltcG9ydGFudDtcbiAgICAgICAgcmlnaHQ6IDEwcHg7XG4gICAgICAgIHRvcDogMTBweCAhaW1wb3J0YW50O1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5oZWFkZXIge1xuICAgICAgICBwYWRkaW5nOiAxMHB4IDEycHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmNvbnRlbnQge1xuICAgICAgICBwYWRkaW5nOiAxMnB4O1xuICAgICAgfVxuICAgICAgXG4gICAgICAuYnRuIHtcbiAgICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgICBmb250LXNpemU6IDEzcHg7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5jb25maWctaXRlbSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLnN0YXQtaXRlbSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XG4gICAgICAuY29udGFpbmVyIHtcbiAgICAgICAgd2lkdGg6IGNhbGMoMTAwdncgLSAxMHB4KTtcbiAgICAgICAgbGVmdDogNXB4ICFpbXBvcnRhbnQ7XG4gICAgICAgIHJpZ2h0OiA1cHg7XG4gICAgICAgIHRvcDogNXB4ICFpbXBvcnRhbnQ7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmhlYWRlciB7XG4gICAgICAgIHBhZGRpbmc6IDhweCAxMHB4O1xuICAgICAgICBmb250LXNpemU6IDEzcHg7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5jb250ZW50IHtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmJ0biB7XG4gICAgICAgIHBhZGRpbmc6IDZweDtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBnYXA6IDRweDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmNvbmZpZy1pdGVtIHtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAgZ2FwOiA0cHg7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5zdGF0LWl0ZW0ge1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgfVxuICAgICAgXG4gICAgICAuY29uZmlnLWlucHV0IHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG1heC13aWR0aDogMTIwcHg7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIEBtZWRpYSAobWF4LWhlaWdodDogNjAwcHgpIHtcbiAgICAgIC5jb250YWluZXIge1xuICAgICAgICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMjBweCk7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5zdGF0cyB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICB9XG4gICAgfVxuICBgO1xuICByb290LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgXG4gIC8vIENyZWFyIGNvbnRlbmVkb3IgcHJpbmNpcGFsXG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb250YWluZXIuY2xhc3NOYW1lID0gJ2NvbnRhaW5lcic7XG4gIGNvbnRhaW5lci5pbm5lckhUTUwgPSBgXG4gICAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxuICAgICAgPGRpdiBjbGFzcz1cImhlYWRlci10aXRsZVwiPlxuICAgICAgICBcdUQ4M0RcdUREQkNcdUZFMEZcbiAgICAgICAgPHNwYW4+JHt0ZXh0cy50aXRsZX08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXItY29udHJvbHNcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImhlYWRlci1idG4gY29uZmlnLWJ0blwiIHRpdGxlPVwiQ29uZmlndXJhY2lcdTAwRjNuXCI+XG4gICAgICAgICAgXHUyNjk5XHVGRTBGXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaGVhZGVyLWJ0biBtaW5pbWl6ZS1idG5cIiB0aXRsZT1cIiR7dGV4dHMubWluaW1pemV9XCI+XG4gICAgICAgICAgXHUyNzk2XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2xsYXBzaWJsZS1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb25maWctcGFuZWxcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbmZpZy1pdGVtXCI+XG4gICAgICAgICAgPGxhYmVsPiR7dGV4dHMuYmF0Y2hTaXplfTo8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImNvbmZpZy1pbnB1dCBwaXhlbHMtcGVyLWJhdGNoXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjFcIiBtYXg9XCI5OTk5XCIgdmFsdWU9XCIyMFwiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbmZpZy1pdGVtXCI+XG4gICAgICAgICAgPGxhYmVsPiR7dGV4dHMudXNlQWxsQ2hhcmdlc308L2xhYmVsPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInRvZ2dsZS1zd2l0Y2hcIj5cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImNvbmZpZy1jaGVja2JveCB1c2UtYWxsLWNoYXJnZXNcIiB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b2dnbGUtc2xpZGVyXCI+PC9zcGFuPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZmlnLWl0ZW1cIj5cbiAgICAgICAgICA8bGFiZWw+JHt0ZXh0cy5zaG93T3ZlcmxheSB8fCAnTW9zdHJhciBvdmVybGF5J308L2xhYmVsPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInRvZ2dsZS1zd2l0Y2hcIj5cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImNvbmZpZy1jaGVja2JveCBzaG93LW92ZXJsYXlcIiB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b2dnbGUtc2xpZGVyXCI+PC9zcGFuPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb25maWctaXRlbVwiPlxuICAgICAgICAgIDxsYWJlbD5cdUQ4M0RcdURDRDAgUGF0clx1MDBGM24gZGUgcGludGFkbzo8L2xhYmVsPlxuICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XCJjb25maWctaW5wdXQgcGFpbnQtcGF0dGVyblwiPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImxpbmVhcl9zdGFydFwiPlx1MjdBMVx1RkUwRiBMaW5lYWwgKEluaWNpbyk8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsaW5lYXJfZW5kXCI+XHUyQjA1XHVGRTBGIExpbmVhbCAoRmluYWwpPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicmFuZG9tXCI+XHVEODNDXHVERkIyIEFsZWF0b3Jpbzwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImNlbnRlcl9vdXRcIj5cdUQ4M0RcdURDQTUgQ2VudHJvIGhhY2lhIGFmdWVyYTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImNvcm5lcnNfZmlyc3RcIj5cdUQ4M0NcdURGQzEgRXNxdWluYXMgcHJpbWVybzwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInNwaXJhbFwiPlx1RDgzQ1x1REYwMCBFc3BpcmFsPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic25ha2VcIj5cdUQ4M0RcdURDMEQgU2VycGllbnRlIChaaWd6YWcpPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGlhZ29uYWxfc3dlZXBcIj5cdUQ4M0RcdURDRDAgQmFycmlkbyBkaWFnb25hbDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImJvcmRlcnNcIj5cdUQ4M0RcdUREQkNcdUZFMEYgQm9yZGVzIHByaW1lcm88L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJjZW50ZXJcIj5cdUQ4M0NcdURGQUYgQ2VudHJvIHByaW1lcm88L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJxdWFkcmFudHNcIj5cdUQ4M0RcdUREMzIgQ3VhZHJhbnRlczwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImJpYXNlZF9yYW5kb21cIj5cdUQ4M0NcdURGQUYgQWxlYXRvcmlvIHNlc2dhZG8gKGJvcmRlcyk8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJjbHVzdGVyc1wiPlx1RDgzQ1x1REZBQSBDbHVzdGVyczwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInByb3hpbWl0eVwiPlx1RDgzRVx1REQxRCBQcm94aW1pZGFkPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic3dlZXBcIj5cdUQ4M0VcdURERjkgQmFycmlkbyBwb3Igc2VjY2lvbmVzPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicHJpb3JpdHlcIj5cdTJCNTAgUHJpb3JpZGFkIChtaXh0byk8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhbmNob3JfcG9pbnRzXCI+XHUyNjkzIFB1bnRvcyBkZSBhbmNsYWplPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic3BpcmFsX2N3XCI+XHVEODNEXHVERDA0IEVzcGlyYWwgKGhvcmFyaWEpPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic3BpcmFsX2Njd1wiPlx1RDgzRFx1REQwMyBFc3BpcmFsIChhbnRpaG9yYXJpYSk8L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPCEtLSBDb25maWd1cmFjaVx1MDBGM24gdmlzaWJsZSBlbiBsYSBpbnRlcmZheiBwcmluY2lwYWwgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwibWFpbi1jb25maWdcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbmZpZy1yb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZmlnLWxhYmVsXCI+XG4gICAgICAgICAgICBcdUQ4M0NcdURGQUYgJHt0ZXh0cy5iYXRjaFNpemV9OlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJiYXRjaC12YWx1ZVwiPjIwPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb25maWctbGFiZWxcIj5cbiAgICAgICAgICAgIFx1MjNGMVx1RkUwRiAke3RleHRzLm5leHRCYXRjaFRpbWV9OlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb29sZG93bi12YWx1ZVwiPi0tPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj5cbiAgICAgICAgPCEtLSBCb3RvbmVzIHNpZW1wcmUgdmlzaWJsZXM6IENhcmdhciBpbWFnZW4geSBDYXJnYXIgcHJvZ3Jlc28gLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tcm93XCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tdXBsb2FkIHVwbG9hZC1idG4gYnRuLWhhbGZcIj5cbiAgICAgICAgICAgIFx1RDgzRFx1RENFNFxuICAgICAgICAgICAgPHNwYW4+JHt0ZXh0cy51cGxvYWRJbWFnZX08L3NwYW4+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbG9hZCBsb2FkLXByb2dyZXNzLWJ0biBidG4taGFsZlwiPlxuICAgICAgICAgICAgXHVEODNEXHVEQ0MxXG4gICAgICAgICAgICA8c3Bhbj4ke3RleHRzLmxvYWRQcm9ncmVzc308L3NwYW4+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPCEtLSBCb3RvbmVzIHBhcmEgaW1hZ2VuOiBSZWRpbWVuc2lvbmFyIHkgU2VsZWNjaW9uYXIgcG9zaWNpXHUwMEYzbiAtLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1yb3cgaW1hZ2UtY29udHJvbHNcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSByZXNpemUtYnRuIGJ0bi1oYWxmXCI+XG4gICAgICAgICAgICBcdUQ4M0RcdUREMDRcbiAgICAgICAgICAgIDxzcGFuPiR7dGV4dHMucmVzaXplSW1hZ2V9PC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNlbGVjdCBzZWxlY3QtcG9zLWJ0biBidG4taGFsZlwiPlxuICAgICAgICAgICAgXHVEODNDXHVERkFGXG4gICAgICAgICAgICA8c3Bhbj4ke3RleHRzLnNlbGVjdFBvc2l0aW9ufTwvc3Bhbj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8IS0tIEJvdG9uZXMgZGUgY29udHJvbDogSW5pY2lhciB5IERldGVuZXIgLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tcm93IHBhaW50aW5nLWNvbnRyb2xzXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXN0YXJ0IHN0YXJ0LWJ0biBidG4taGFsZlwiPlxuICAgICAgICAgICAgXHUyNUI2XHVGRTBGXG4gICAgICAgICAgICA8c3Bhbj4ke3RleHRzLnN0YXJ0UGFpbnRpbmd9PC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXN0b3Agc3RvcC1idG4gYnRuLWhhbGZcIj5cbiAgICAgICAgICAgIFx1MjNGOVx1RkUwRlxuICAgICAgICAgICAgPHNwYW4+JHt0ZXh0cy5zdG9wUGFpbnRpbmd9PC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDwhLS0gQm90b25lcyBkZSB1dGlsaWRhZGVzIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXJvdyB1dGlsaXR5LWNvbnRyb2xzXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBzYXZlLXByb2dyZXNzLWJ0biBidG4taGFsZlwiPlxuICAgICAgICAgICAgXHVEODNEXHVEQ0JFXG4gICAgICAgICAgICA8c3Bhbj5HdWFyZGFyIHByb2dyZXNvPC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBsb2ctd2luZG93LWJ0biBidG4taGFsZlwiPlxuICAgICAgICAgICAgXHVEODNEXHVEQ0NCXG4gICAgICAgICAgICA8c3Bhbj4ke3RleHRzLmxvZ1dpbmRvdyB8fCAnTG9ncyd9PC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDwhLS0gR3VhcmQgSlNPTiBzaWVtcHJlIGRpc3BvbmlibGUgY3VhbmRvIGhheSBkYXRvcyAtLT5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IGd1YXJkLWpzb24tYnRuIGJ0bi1mdWxsIGd1YXJkLWNvbnRyb2xzXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICAgIFx1RDgzRFx1REVFMVx1RkUwRlxuICAgICAgICAgIDxzcGFuPkd1YXJkIEpTT048L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBcbiAgICAgICAgPCEtLSBCb3RcdTAwRjNuIGRlIGluaWNpYWxpemFjaVx1MDBGM24gb2N1bHRvIHBvciBkZWZlY3RvIC0tPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGluaXQtYnRuIGJ0bi1mdWxsXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICAgIFx1RDgzRVx1REQxNlxuICAgICAgICAgIDxzcGFuPiR7dGV4dHMuaW5pdEJvdH08L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPGRpdiBjbGFzcz1cInN0YXRzXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0cy1hcmVhXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXQtaXRlbVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXQtbGFiZWxcIj5cdTIxMzlcdUZFMEYgJHt0ZXh0cy5pbml0TWVzc2FnZX08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PiA8IS0tIEZpbiBjb2xsYXBzaWJsZS1jb250ZW50IC0tPlxuICAgICAgXG4gICAgICA8ZGl2IGNsYXNzPVwic3RhdHVzIHN0YXR1cy1kZWZhdWx0XCI+XG4gICAgICAgICR7dGV4dHMud2FpdGluZ0luaXR9XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuXG4gICAgPC9kaXY+XG4gIGA7XG4gIFxuICByb290LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gIFxuICAvLyBJbnB1dCBvY3VsdG8gcGFyYSBhcmNoaXZvc1xuICBjb25zdCBmaWxlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgZmlsZUlucHV0LmFjY2VwdCA9ICdpbWFnZS9wbmcsaW1hZ2UvanBlZyc7XG4gIGZpbGVJbnB1dC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByb290LmFwcGVuZENoaWxkKGZpbGVJbnB1dCk7XG4gIFxuICBjb25zdCBwcm9ncmVzc0ZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIHByb2dyZXNzRmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gIHByb2dyZXNzRmlsZUlucHV0LmFjY2VwdCA9ICcuanNvbic7XG4gIHByb2dyZXNzRmlsZUlucHV0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJvb3QuYXBwZW5kQ2hpbGQocHJvZ3Jlc3NGaWxlSW5wdXQpO1xuICBcbiAgLy8gUmVmZXJlbmNpYXMgYSBlbGVtZW50b3NcbiAgY29uc3QgZWxlbWVudHMgPSB7XG4gICAgaGVhZGVyOiBjb250YWluZXIucXVlcnlTZWxlY3RvcignLmhlYWRlcicpLFxuICAgIGNvbmZpZ0J0bjogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5jb25maWctYnRuJyksXG4gICAgbWluaW1pemVCdG46IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcubWluaW1pemUtYnRuJyksXG4gICAgY29uZmlnUGFuZWw6IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuY29uZmlnLXBhbmVsJyksXG4gICAgcGl4ZWxzUGVyQmF0Y2g6IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucGl4ZWxzLXBlci1iYXRjaCcpLFxuICAgIHVzZUFsbENoYXJnZXM6IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudXNlLWFsbC1jaGFyZ2VzJyksXG4gICAgcGFpbnRQYXR0ZXJuOiBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnBhaW50LXBhdHRlcm4nKSxcbiAgICBzaG93T3ZlcmxheTogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zaG93LW92ZXJsYXknKSxcbiAgICBiYXRjaFZhbHVlOiBjb250YWluZXIucXVlcnlTZWxlY3RvcignLmJhdGNoLXZhbHVlJyksXG4gICAgY29vbGRvd25WYWx1ZTogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5jb29sZG93bi12YWx1ZScpLFxuICAgIGluaXRCdG46IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuaW5pdC1idG4nKSxcbiAgICB1cGxvYWRCdG46IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudXBsb2FkLWJ0bicpLFxuICAgIGxvYWRQcm9ncmVzc0J0bjogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5sb2FkLXByb2dyZXNzLWJ0bicpLFxuICAgIHNhdmVQcm9ncmVzc0J0bjogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zYXZlLXByb2dyZXNzLWJ0bicpLFxuICAgIGd1YXJkSnNvbkJ0bjogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5ndWFyZC1qc29uLWJ0bicpLFxuICAgIHJlc2l6ZUJ0bjogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5yZXNpemUtYnRuJyksXG4gICAgc2VsZWN0UG9zQnRuOiBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnNlbGVjdC1wb3MtYnRuJyksXG4gICAgc3RhcnRCdG46IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc3RhcnQtYnRuJyksXG4gICAgc3RvcEJ0bjogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zdG9wLWJ0bicpLFxuICAgIGxvZ1dpbmRvd0J0bjogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5sb2ctd2luZG93LWJ0bicpLFxuICAgIHByb2dyZXNzQmFyOiBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLWJhcicpLFxuICAgIHN0YXRzQXJlYTogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0cy1hcmVhJyksXG4gICAgc3RhdHVzOiBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnN0YXR1cycpLFxuICAgIGNvbnRlbnQ6IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpLFxuICAgIC8vIENvbnRlbmVkb3JlcyBkZSBjb250cm9sZXNcbiAgICBpbWFnZUNvbnRyb2xzOiBjb250YWluZXIucXVlcnlTZWxlY3RvcignLmltYWdlLWNvbnRyb2xzJyksXG4gICAgcGFpbnRpbmdDb250cm9sczogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5wYWludGluZy1jb250cm9scycpLFxuICAgIHV0aWxpdHlDb250cm9sczogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy51dGlsaXR5LWNvbnRyb2xzJyksXG4gICAgZ3VhcmRDb250cm9sczogY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5ndWFyZC1jb250cm9scycpXG4gIH07XG4gIFxuICAvLyBFc3RhZG8gYWN0dWFsIGRlIGxhIGludGVyZmF6IChtYW5lamFkbyBwb3IgbGEgZnVuY2lcdTAwRjNuIHNldFN0YXRlKVxuICBcblxuICBcbiAgLy8gRXN0YWRvIGRlIGxhIFVJXG4gIGxldCBzdGF0ZSA9IHtcbiAgICBtaW5pbWl6ZWQ6IGZhbHNlLFxuICAgIGNvbmZpZ1Zpc2libGU6IGZhbHNlXG4gIH07XG4gIFxuICAvLyBDb25maWd1cmFjaVx1MDBGM24gcGVyc2lzdGVudGUgcGFyYSB0YW1hXHUwMEYxbyB5IHBvc2ljaVx1MDBGM25cbiAgbGV0IHdpbmRvd0NvbmZpZyA9IHtcbiAgICB3aWR0aDogMzAwLFxuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIHg6IDIwLFxuICAgIHk6IDIwXG4gIH07XG4gIFxuICAvLyBDYXJnYXIgY29uZmlndXJhY2lcdTAwRjNuIGd1YXJkYWRhXG4gIGZ1bmN0aW9uIGxvYWRXaW5kb3dDb25maWcoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNhdmVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3dwbGFjZS1hdXRvLWltYWdlLXdpbmRvdy1jb25maWcnKTtcbiAgICAgIGlmIChzYXZlZCkge1xuICAgICAgICB3aW5kb3dDb25maWcgPSB7IC4uLndpbmRvd0NvbmZpZywgLi4uSlNPTi5wYXJzZShzYXZlZCkgfTtcbiAgICAgICAgYXBwbHlXaW5kb3dDb25maWcoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCdFcnJvciBjYXJnYW5kbyBjb25maWd1cmFjaVx1MDBGM24gZGUgdmVudGFuYTonLCBlcnJvcik7XG4gICAgfVxuICB9XG4gIFxuICAvLyBHdWFyZGFyIGNvbmZpZ3VyYWNpXHUwMEYzblxuICBmdW5jdGlvbiBzYXZlV2luZG93Q29uZmlnKCkge1xuICAgIHRyeSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnd3BsYWNlLWF1dG8taW1hZ2Utd2luZG93LWNvbmZpZycsIEpTT04uc3RyaW5naWZ5KHdpbmRvd0NvbmZpZykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGd1YXJkYW5kbyBjb25maWd1cmFjaVx1MDBGM24gZGUgdmVudGFuYTonLCBlcnJvcik7XG4gICAgfVxuICB9XG4gIFxuICAvLyBBcGxpY2FyIGNvbmZpZ3VyYWNpXHUwMEYzbiBhIGxhIHZlbnRhbmFcbiAgZnVuY3Rpb24gYXBwbHlXaW5kb3dDb25maWcoKSB7XG4gICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gdHlwZW9mIHdpbmRvd0NvbmZpZy53aWR0aCA9PT0gJ251bWJlcicgPyB3aW5kb3dDb25maWcud2lkdGggKyAncHgnIDogd2luZG93Q29uZmlnLndpZHRoO1xuICAgIGlmICh0eXBlb2Ygd2luZG93Q29uZmlnLmhlaWdodCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSB3aW5kb3dDb25maWcuaGVpZ2h0ICsgJ3B4JztcbiAgICB9XG4gICAgY29udGFpbmVyLnN0eWxlLmxlZnQgPSB3aW5kb3dDb25maWcueCArICdweCc7XG4gICAgY29udGFpbmVyLnN0eWxlLnRvcCA9IHdpbmRvd0NvbmZpZy55ICsgJ3B4JztcbiAgfVxuICBcblxuICBcblxuICBcbiAgLy8gQ2FyZ2FyIGNvbmZpZ3VyYWNpXHUwMEYzbiBndWFyZGFkYVxuICBsb2FkV2luZG93Q29uZmlnKCk7XG4gIFxuICAvLyBSZWdpc3RyYXIgdmVudGFuYSBjb24gZWwgd2luZG93IG1hbmFnZXIgcGFyYSBnZXN0aVx1MDBGM24gZGUgei1pbmRleCB5IGFycmFzdHJlXG4gIHJlZ2lzdGVyV2luZG93KGNvbnRhaW5lcik7XG4gIFxuICAvLyBUcmFlciBsYSB2ZW50YW5hIGFsIGZyZW50ZSBpbmljaWFsbWVudGVcbiAgYnJpbmdXaW5kb3dUb0Zyb250KGNvbnRhaW5lcik7XG4gIFxuICAvLyBIYWNlciBlbCBoZWFkZXIgYXJyYXN0cmFibGUgbWFudWFsbWVudGUgcGFyYSBtYW50ZW5lciBndWFyZGFkbyBkZSBwb3NpY2lcdTAwRjNuXG4gIG1ha2VEcmFnZ2FibGVXaXRoU2F2ZShlbGVtZW50cy5oZWFkZXIsIGNvbnRhaW5lcik7XG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGVyc29uYWxpemFkYSBkZSBhcnJhc3RyZSBxdWUgZ3VhcmRhIGxhIHBvc2ljaVx1MDBGM25cbiAgZnVuY3Rpb24gbWFrZURyYWdnYWJsZVdpdGhTYXZlKGRyYWdIYW5kbGUsIGVsZW1lbnQpIHtcbiAgICBsZXQgcG9zMSA9IDAsIHBvczIgPSAwLCBwb3MzID0gMCwgcG9zNCA9IDA7XG4gICAgXG4gICAgZHJhZ0hhbmRsZS5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gICAgZHJhZ0hhbmRsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBkcmFnTW91c2VEb3duKTtcbiAgICBcbiAgICBmdW5jdGlvbiBkcmFnTW91c2VEb3duKGUpIHtcbiAgICAgIC8vIEV2aXRhciBhcnJhc3RyZSBzaSBlcyB1biBib3RcdTAwRjNuIGRlIGxhIGNhYmVjZXJhXG4gICAgICBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLmhlYWRlci1idG4sIC53cGxhY2UtaGVhZGVyLWJ0bicpKSByZXR1cm47XG4gICAgICBcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHBvczMgPSBlLmNsaWVudFg7XG4gICAgICBwb3M0ID0gZS5jbGllbnRZO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGNsb3NlRHJhZ0VsZW1lbnQpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZWxlbWVudERyYWcpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBlbGVtZW50RHJhZyhlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBwb3MxID0gcG9zMyAtIGUuY2xpZW50WDtcbiAgICAgIHBvczIgPSBwb3M0IC0gZS5jbGllbnRZO1xuICAgICAgcG9zMyA9IGUuY2xpZW50WDtcbiAgICAgIHBvczQgPSBlLmNsaWVudFk7XG4gICAgICBcbiAgICAgIGNvbnN0IG5ld1RvcCA9IGVsZW1lbnQub2Zmc2V0VG9wIC0gcG9zMjtcbiAgICAgIGNvbnN0IG5ld0xlZnQgPSBlbGVtZW50Lm9mZnNldExlZnQgLSBwb3MxO1xuICAgICAgXG4gICAgICAvLyBMaW1pdGFyIGEgbG9zIGJvcmRlcyBkZSBsYSB2ZW50YW5hXG4gICAgICBjb25zdCBtYXhMZWZ0ID0gd2luZG93LmlubmVyV2lkdGggLSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgY29uc3QgbWF4VG9wID0gd2luZG93LmlubmVySGVpZ2h0IC0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICBcbiAgICAgIGNvbnN0IGNvbnN0cmFpbmVkTGVmdCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1heExlZnQsIG5ld0xlZnQpKTtcbiAgICAgIGNvbnN0IGNvbnN0cmFpbmVkVG9wID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obWF4VG9wLCBuZXdUb3ApKTtcbiAgICAgIFxuICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBjb25zdHJhaW5lZFRvcCArIFwicHhcIjtcbiAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IGNvbnN0cmFpbmVkTGVmdCArIFwicHhcIjtcbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciBjb25maWd1cmFjaVx1MDBGM25cbiAgICAgIHdpbmRvd0NvbmZpZy54ID0gY29uc3RyYWluZWRMZWZ0O1xuICAgICAgd2luZG93Q29uZmlnLnkgPSBjb25zdHJhaW5lZFRvcDtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY2xvc2VEcmFnRWxlbWVudCgpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBjbG9zZURyYWdFbGVtZW50KTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGVsZW1lbnREcmFnKTtcbiAgICAgIC8vIEd1YXJkYXIgY29uZmlndXJhY2lcdTAwRjNuIGFsIHRlcm1pbmFyIGVsIGFycmFzdHJlXG4gICAgICBzYXZlV2luZG93Q29uZmlnKCk7XG4gICAgfVxuICB9XG4gIFxuICAvLyBFdmVudCBsaXN0ZW5lcnNcbiAgZWxlbWVudHMubWluaW1pemVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpO1xuICAgIFxuICAgIGlmIChjb250ZW50LmNsYXNzTGlzdC5jb250YWlucygnY29sbGFwc2VkJykpIHtcbiAgICAgIC8vIFJlc3RhdXJhciB2ZW50YW5hXG4gICAgICBjb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNlZCcpO1xuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ21pbmltaXplZCcpO1xuICAgICAgZWxlbWVudHMubWluaW1pemVCdG4uaW5uZXJIVE1MID0gJ1x1Mjc5Nic7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1pbmltaXphciB2ZW50YW5hIGNvbiBhbmltYWNpXHUwMEYzbiBzdWF2ZVxuICAgICAgY29udGVudC5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZWQnKTtcbiAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtaW5pbWl6ZWQnKTtcbiAgICAgIGVsZW1lbnRzLm1pbmltaXplQnRuLmlubmVySFRNTCA9ICdcdUQ4M0RcdUREM0MnO1xuICAgIH1cbiAgfSk7XG4gIFxuICBlbGVtZW50cy5jb25maWdCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgc3RhdGUuY29uZmlnVmlzaWJsZSA9ICFzdGF0ZS5jb25maWdWaXNpYmxlO1xuICAgIGlmIChzdGF0ZS5jb25maWdWaXNpYmxlKSB7XG4gICAgICBlbGVtZW50cy5jb25maWdQYW5lbC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XG4gICAgICBlbGVtZW50cy5jb25maWdCdG4uaW5uZXJIVE1MID0gJ1x1Mjc0Qyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRzLmNvbmZpZ1BhbmVsLmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcbiAgICAgIGVsZW1lbnRzLmNvbmZpZ0J0bi5pbm5lckhUTUwgPSAnXHUyNjk5XHVGRTBGJztcbiAgICB9XG4gIH0pO1xuICBcbiAgLy8gRXZlbnQgbGlzdGVuZXJzIHBhcmEgY29uZmlndXJhY2lcdTAwRjNuXG4gIGVsZW1lbnRzLnBpeGVsc1BlckJhdGNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGVsZW1lbnRzLnBpeGVsc1BlckJhdGNoLnZhbHVlKSB8fCAyMDtcbiAgICBlbGVtZW50cy5iYXRjaFZhbHVlLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgXG4gICAgLy8gQWN0dWFsaXphciBjb25maWd1cmFjaVx1MDBGM24gc2kgaGF5IGhhbmRsZXJzXG4gICAgaWYgKGhhbmRsZXJzLm9uQ29uZmlnQ2hhbmdlKSB7XG4gICAgICBoYW5kbGVycy5vbkNvbmZpZ0NoYW5nZSh7IHBpeGVsc1BlckJhdGNoOiB2YWx1ZSB9KTtcbiAgICB9XG4gIH0pO1xuICBcbiAgZWxlbWVudHMudXNlQWxsQ2hhcmdlcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKGhhbmRsZXJzLm9uQ29uZmlnQ2hhbmdlKSB7XG4gICAgICBoYW5kbGVycy5vbkNvbmZpZ0NoYW5nZSh7IHVzZUFsbENoYXJnZXM6IGVsZW1lbnRzLnVzZUFsbENoYXJnZXMuY2hlY2tlZCB9KTtcbiAgICB9XG4gIH0pO1xuICBcblxuICBcbiAgZWxlbWVudHMucGFpbnRQYXR0ZXJuLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICBpZiAoaGFuZGxlcnMub25Db25maWdDaGFuZ2UpIHtcbiAgICAgIGhhbmRsZXJzLm9uQ29uZmlnQ2hhbmdlKHsgcGFpbnRQYXR0ZXJuOiBlbGVtZW50cy5wYWludFBhdHRlcm4udmFsdWUgfSk7XG4gICAgfVxuICB9KTtcbiAgXG4gIC8vIEZ1bmNpb25lcyBwYXJhIG1vc3RyYXIvb2N1bHRhciBncnVwb3MgZGUgY29udHJvbGVzXG4gIGZ1bmN0aW9uIHNob3dJbWFnZUNvbnRyb2xzKHNob3cgPSB0cnVlKSB7XG4gICAgZWxlbWVudHMuaW1hZ2VDb250cm9scy5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/ICdmbGV4JyA6ICdub25lJztcbiAgfVxuICBcbiAgZnVuY3Rpb24gc2hvd1BhaW50aW5nQ29udHJvbHMoc2hvdyA9IHRydWUpIHtcbiAgICBlbGVtZW50cy5wYWludGluZ0NvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gJ2ZsZXgnIDogJ25vbmUnO1xuICB9XG4gIFxuICBmdW5jdGlvbiBzaG93VXRpbGl0eUNvbnRyb2xzKHNob3cgPSB0cnVlKSB7XG4gICAgZWxlbWVudHMudXRpbGl0eUNvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gJ2ZsZXgnIDogJ25vbmUnO1xuICB9XG4gIFxuICBmdW5jdGlvbiBzaG93R3VhcmRDb250cm9scyhzaG93ID0gdHJ1ZSkge1xuICAgIGVsZW1lbnRzLmd1YXJkQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9IHNob3cgPyAnZmxleCcgOiAnbm9uZSc7XG4gIH1cbiAgXG4gIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIG1vc3RyYXIgY29udHJvbGVzIGN1YW5kbyBzZSBjYXJnYSB1bmEgaW1hZ2VuXG4gIGZ1bmN0aW9uIHNob3dDb250cm9sc0ZvckltYWdlKCkge1xuICAgIHNob3dJbWFnZUNvbnRyb2xzKHRydWUpO1xuICAgIHNob3dQYWludGluZ0NvbnRyb2xzKHRydWUpO1xuICAgIHNob3dVdGlsaXR5Q29udHJvbHModHJ1ZSk7XG4gICAgc2hvd0d1YXJkQ29udHJvbHModHJ1ZSk7XG4gICAgbG9nKCdcdUQ4M0RcdUREMDQgQ29udHJvbGVzIGRlIGltYWdlbiBtb3N0cmFkb3MnKTtcbiAgfVxuICBcbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgbW9zdHJhciBjb250cm9sZXMgY3VhbmRvIHNlIGNhcmdhIHByb2dyZXNvXG4gIGZ1bmN0aW9uIHNob3dDb250cm9sc0ZvclByb2dyZXNzKCkge1xuICAgIHNob3dJbWFnZUNvbnRyb2xzKGZhbHNlKTsgLy8gTm8gbmVjZXNpdGEgcmVkaW1lbnNpb25hci9zZWxlY2Npb25hclxuICAgIHNob3dQYWludGluZ0NvbnRyb2xzKHRydWUpO1xuICAgIHNob3dVdGlsaXR5Q29udHJvbHModHJ1ZSk7XG4gICAgc2hvd0d1YXJkQ29udHJvbHModHJ1ZSk7XG4gICAgbG9nKCdcdUQ4M0RcdUREMDQgQ29udHJvbGVzIGRlIHByb2dyZXNvIG1vc3RyYWRvcycpO1xuICB9XG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSBvY3VsdGFyIGNvbnRyb2xlcyAoZXN0YWRvIGluaWNpYWwpXG4gIGZ1bmN0aW9uIGhpZGVBbGxDb250cm9scygpIHtcbiAgICBzaG93SW1hZ2VDb250cm9scyhmYWxzZSk7XG4gICAgc2hvd1BhaW50aW5nQ29udHJvbHMoZmFsc2UpO1xuICAgIHNob3dVdGlsaXR5Q29udHJvbHMoZmFsc2UpO1xuICAgIHNob3dHdWFyZENvbnRyb2xzKGZhbHNlKTtcbiAgICBsb2coJ1x1RDgzRFx1REQwNCBUb2RvcyBsb3MgY29udHJvbGVzIG9jdWx0b3MnKTtcbiAgfVxuICBcbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgaGFiaWxpdGFyIGJvdG9uZXMgZGVzcHVcdTAwRTlzIGRlIGluaWNpYWxpemFjaVx1MDBGM24gZXhpdG9zYVxuICBmdW5jdGlvbiBlbmFibGVCdXR0b25zQWZ0ZXJJbml0KCkge1xuICAgIC8vIFlhIG5vIGVzIG5lY2VzYXJpYSwgc2UgbWFuZWphIGNvbiBlc3RhZG9zXG4gIH1cbiAgXG4gIGVsZW1lbnRzLmluaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgZWxlbWVudHMuaW5pdEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgaWYgKGhhbmRsZXJzLm9uSW5pdEJvdCkge1xuICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGhhbmRsZXJzLm9uSW5pdEJvdCgpO1xuICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgZW5hYmxlQnV0dG9uc0FmdGVySW5pdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbGVtZW50cy5pbml0QnRuLmRpc2FibGVkID0gZmFsc2U7XG4gIH0pO1xuICBcbiAgZWxlbWVudHMudXBsb2FkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGZpbGVJbnB1dC5jbGljaygpO1xuICB9KTtcbiAgXG4gIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGZpbGVJbnB1dC5maWxlcy5sZW5ndGggPiAwICYmIGhhbmRsZXJzLm9uVXBsb2FkSW1hZ2UpIHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBoYW5kbGVycy5vblVwbG9hZEltYWdlKGZpbGVJbnB1dC5maWxlc1swXSk7XG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICBzaG93Q29udHJvbHNGb3JJbWFnZSgpO1xuICAgICAgICAvLyBBYnJpciBhdXRvbVx1MDBFMXRpY2FtZW50ZSBlbCBkaVx1MDBFMWxvZ28gZGUgcmVkaW1lbnNpb25hclxuICAgICAgICBpZiAoaGFuZGxlcnMub25SZXNpemVJbWFnZSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlcnMub25SZXNpemVJbWFnZSgpO1xuICAgICAgICAgIH0sIDUwMCk7IC8vIFBlcXVlXHUwMEYxbyBkZWxheSBwYXJhIHF1ZSBsYSBVSSBzZSBhY3R1YWxpY2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFxuICBlbGVtZW50cy5sb2FkUHJvZ3Jlc3NCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgcHJvZ3Jlc3NGaWxlSW5wdXQuY2xpY2soKTtcbiAgfSk7XG4gIFxuICBwcm9ncmVzc0ZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKHByb2dyZXNzRmlsZUlucHV0LmZpbGVzLmxlbmd0aCA+IDAgJiYgaGFuZGxlcnMub25Mb2FkUHJvZ3Jlc3MpIHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBoYW5kbGVycy5vbkxvYWRQcm9ncmVzcyhwcm9ncmVzc0ZpbGVJbnB1dC5maWxlc1swXSk7XG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICBzaG93Q29udHJvbHNGb3JQcm9ncmVzcygpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFxuICAvLyBFdmVudCBsaXN0ZW5lciBwYXJhIGVsIGJvdFx1MDBGM24gZGUgZ3VhcmRhciBwcm9ncmVzb1xuICBlbGVtZW50cy5zYXZlUHJvZ3Jlc3NCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKGhhbmRsZXJzLm9uU2F2ZVByb2dyZXNzKSB7XG4gICAgICBoYW5kbGVycy5vblNhdmVQcm9ncmVzcygpO1xuICAgIH1cbiAgfSk7XG4gIFxuICAvLyBFdmVudCBsaXN0ZW5lciBwYXJhIEd1YXJkIEpTT05cbiAgZWxlbWVudHMuZ3VhcmRKc29uQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIWhhbmRsZXJzLmdlbmVyYXRlR3VhcmRKU09OKSB7XG4gICAgICAgIGFsZXJ0KCdObyBzZSBwdWVkZSBnZW5lcmFyIGVsIEpTT04gZGVsIEd1YXJkIGVuIGVzdGUgbW9tZW50by4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9nKCdcdUQ4M0RcdURFRTFcdUZFMEYgR2VuZXJhbmRvIEd1YXJkIEpTT04uLi4nKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBoYW5kbGVycy5nZW5lcmF0ZUd1YXJkSlNPTigpO1xuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGFsZXJ0KCdObyBoYXkgZGF0b3MgZGlzcG9uaWJsZXMgcGFyYSBndWFyZGFyLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhd2FpdCBzYXZlR3VhcmRKU09OKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgYWxlcnQoJ0Vycm9yIGFsIGdlbmVyYXIgbyBndWFyZGFyIGVsIEd1YXJkIEpTT04nKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgZWxlbWVudHMucmVzaXplQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlmIChoYW5kbGVycy5vblJlc2l6ZUltYWdlKSB7XG4gICAgICBoYW5kbGVycy5vblJlc2l6ZUltYWdlKCk7XG4gICAgfVxuICB9KTtcbiAgXG5cbiAgXG4gIC8vIEV2ZW50IGxpc3RlbmVycyBwYXJhIGJvdG9uZXMgZGUgc2VsZWNjaVx1MDBGM24gZGUgcG9zaWNpXHUwMEYzblxuICBlbGVtZW50cy5zZWxlY3RQb3NCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGhhbmRsZXJzLm9uU2VsZWN0UG9zaXRpb24pIHtcbiAgICAgIGVsZW1lbnRzLnNlbGVjdFBvc0J0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgaGFuZGxlcnMub25TZWxlY3RQb3NpdGlvbigpO1xuICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgZWxlbWVudHMuc3RhcnRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRzLnNlbGVjdFBvc0J0bi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gQ2hlY2tib3ggbW9zdHJhciBvdmVybGF5XG4gIGVsZW1lbnRzLnNob3dPdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICBpZiAoIXdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXykgcmV0dXJuO1xuICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5pbmplY3RTdHlsZXMoKTtcbiAgICBjb25zdCBpc0VuYWJsZWQgPSBlbGVtZW50cy5zaG93T3ZlcmxheS5jaGVja2VkO1xuICAgIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXy5zZXRFbmFibGVkKGlzRW5hYmxlZCk7XG4gIH0pO1xuICBcbiAgLy8gRXZlbnQgbGlzdGVuZXJzIHBhcmEgYm90b25lcyBkZSBzdGFydC9zdG9wXG4gIGVsZW1lbnRzLnN0YXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGlmIChoYW5kbGVycy5vblN0YXJ0UGFpbnRpbmcpIHtcbiAgICAgIC8vIEVzdGFibGVjZXIgZXN0YWRvIGRlIHBpbnR1cmEgYWN0aXZhXG4gICAgICBzZXRQYWludGluZ1N0YXRlKHRydWUpO1xuICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGhhbmRsZXJzLm9uU3RhcnRQYWludGluZygpO1xuICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgIC8vIFNpIGZhbGxhLCB2b2x2ZXIgYWwgZXN0YWRvIGRlIG5vIHBpbnR1cmFcbiAgICAgICAgc2V0UGFpbnRpbmdTdGF0ZShmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgXG4gIGVsZW1lbnRzLnN0b3BCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGhhbmRsZXJzLm9uU3RvcFBhaW50aW5nKSB7XG4gICAgICBjb25zdCBzaG91bGRTdG9wID0gYXdhaXQgaGFuZGxlcnMub25TdG9wUGFpbnRpbmcoKTtcbiAgICAgIGlmIChzaG91bGRTdG9wKSB7XG4gICAgICAgIC8vIEVzdGFibGVjZXIgZXN0YWRvIGRlIHBpbnR1cmEgaW5hY3RpdmFcbiAgICAgICAgc2V0UGFpbnRpbmdTdGF0ZShmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgXG4gIC8vIFZhcmlhYmxlIHBhcmEgbWFudGVuZXIgcmVmZXJlbmNpYSBhIGxhIHZlbnRhbmEgZGUgbG9nc1xuICBsZXQgbG9nV2luZG93ID0gbnVsbDtcbiAgXG4gIC8vIEV2ZW50IGxpc3RlbmVyIHBhcmEgYm90XHUwMEYzbiBkZSBsb2dzXG4gIGVsZW1lbnRzLmxvZ1dpbmRvd0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBpZiAoIWxvZ1dpbmRvdykge1xuICAgICAgbG9nV2luZG93ID0gY3JlYXRlTG9nV2luZG93KCdpbWFnZScpO1xuICAgICAgbG9nV2luZG93LnNob3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nV2luZG93LnRvZ2dsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSBhY3R1YWxpemFyIGVsIGVzdGFkb1xuICBmdW5jdGlvbiBzZXRTdGF0dXMobWVzc2FnZSwgdHlwZSA9ICdkZWZhdWx0Jykge1xuICAgIGVsZW1lbnRzLnN0YXR1cy50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgZWxlbWVudHMuc3RhdHVzLmNsYXNzTmFtZSA9IGBzdGF0dXMgc3RhdHVzLSR7dHlwZX1gO1xuICAgIGVsZW1lbnRzLnN0YXR1cy5zdHlsZS5hbmltYXRpb24gPSAnbm9uZSc7XG4gICAgdm9pZCBlbGVtZW50cy5zdGF0dXMub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudHMuc3RhdHVzLnN0eWxlLmFuaW1hdGlvbiA9ICdzbGlkZUluIDAuM3MgZWFzZS1vdXQnO1xuICB9XG4gIFxuICBcbiAgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3MoY3VycmVudCwgdG90YWwsIHVzZXJJbmZvID0gbnVsbCkge1xuICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSB0b3RhbCA+IDAgPyAoY3VycmVudCAvIHRvdGFsKSAqIDEwMCA6IDA7XG4gICAgZWxlbWVudHMucHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBgJHtwZXJjZW50YWdlfSVgO1xuICAgIFxuICAgIC8vIEFjdHVhbGl6YXIgc3RhdHNcbiAgICBsZXQgc3RhdHNIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cInN0YXQtaXRlbVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdC1sYWJlbFwiPlx1RDgzQ1x1REZBOCAke3RleHRzLnByb2dyZXNzfTwvZGl2PlxuICAgICAgICA8ZGl2PiR7Y3VycmVudH0vJHt0b3RhbH0gKCR7cGVyY2VudGFnZS50b0ZpeGVkKDEpfSUpPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICAgIFxuICAgIC8vIEFncmVnYXIgaW5mb3JtYWNpXHUwMEYzbiBkZWwgdXN1YXJpbyBzaSBlc3RcdTAwRTEgZGlzcG9uaWJsZVxuICAgIGlmICh1c2VySW5mbykge1xuICAgICAgLy8gTW9zdHJhciBub21icmUgZGUgdXN1YXJpb1xuICAgICAgaWYgKHVzZXJJbmZvLnVzZXJuYW1lKSB7XG4gICAgICAgIHN0YXRzSFRNTCArPSBgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXQtaXRlbVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXQtbGFiZWxcIj5cdUQ4M0RcdURDNjQgJHt0ZXh0cy51c2VyTmFtZX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+JHt1c2VySW5mby51c2VybmFtZX08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gTW9zdHJhciBjYXJnYXMgKG5cdTAwRkFtZXJvIGVudGVybylcbiAgICAgIGlmICh1c2VySW5mby5jaGFyZ2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3RhdHNIVE1MICs9IGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdC1pdGVtXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdC1sYWJlbFwiPlx1MjZBMSAke3RleHRzLmNoYXJnZXN9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PiR7TWF0aC5mbG9vcih1c2VySW5mby5jaGFyZ2VzKX08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gTW9zdHJhciBwXHUwMEVEeGVsZXMgcGludGFkb3MgZGVsIHVzdWFyaW9cbiAgICAgIGlmICh1c2VySW5mby5waXhlbHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdGF0c0hUTUwgKz0gYFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0LWl0ZW1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0LWxhYmVsXCI+XHVEODNEXHVERDMzICR7dGV4dHMucGl4ZWxzfTwvZGl2PlxuICAgICAgICAgICAgPGRpdj4ke3VzZXJJbmZvLnBpeGVscy50b0xvY2FsZVN0cmluZygpfTwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBNb3N0cmFyIHRpZW1wbyBlc3RpbWFkbyBzaSBlc3RcdTAwRTEgZGlzcG9uaWJsZVxuICAgICAgaWYgKHVzZXJJbmZvLmVzdGltYXRlZFRpbWUgIT09IHVuZGVmaW5lZCAmJiB1c2VySW5mby5lc3RpbWF0ZWRUaW1lID4gMCkge1xuICAgICAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IodXNlckluZm8uZXN0aW1hdGVkVGltZSAvIDM2MDApO1xuICAgICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigodXNlckluZm8uZXN0aW1hdGVkVGltZSAlIDM2MDApIC8gNjApO1xuICAgICAgICBjb25zdCB0aW1lU3RyID0gaG91cnMgPiAwID8gYCR7aG91cnN9aCAke21pbnV0ZXN9bWAgOiBgJHttaW51dGVzfW1gO1xuICAgICAgICBcbiAgICAgICAgc3RhdHNIVE1MICs9IGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdC1pdGVtXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdC1sYWJlbFwiPlx1MjNGMCAke3RleHRzLnRpbWVSZW1haW5pbmd9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PiR7dGltZVN0cn08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZWxlbWVudHMuc3RhdHNBcmVhLmlubmVySFRNTCA9IHN0YXRzSFRNTDtcbiAgfVxuICBcbiAgZnVuY3Rpb24gdXBkYXRlQ29vbGRvd25EaXNwbGF5KHNlY29uZHMpIHtcbiAgICBpZiAoc2Vjb25kcyA+IDApIHtcbiAgICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICBjb25zdCBzZWNzID0gc2Vjb25kcyAlIDYwO1xuICAgICAgY29uc3QgdGltZVN0ciA9IG1pbnV0ZXMgPiAwID8gYCR7bWludXRlc31tICR7c2Vjc31zYCA6IGAke3NlY3N9c2A7XG4gICAgICBlbGVtZW50cy5jb29sZG93blZhbHVlLnRleHRDb250ZW50ID0gdGltZVN0cjtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudHMuY29vbGRvd25WYWx1ZS50ZXh0Q29udGVudCA9ICctLSc7XG4gICAgfVxuICB9XG4gIFxuICAvLyBOdWV2YSBmdW5jaVx1MDBGM24gcGFyYSBhY3R1YWxpemFyIHNvbG8gZWwgbWVuc2FqZSBkZSBjb29sZG93biBzaW4gcGFycGFkZW9cbiAgZnVuY3Rpb24gdXBkYXRlQ29vbGRvd25NZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlLmluY2x1ZGVzKCdcdTIzRjMnKSkge1xuICAgICAgLy8gRXMgdW4gbWVuc2FqZSBkZSBjb29sZG93biwgYWN0dWFsaXphciBzb2xvIGVsIHRleHRvIHNpbiByZWNhcmdhciB0b2RvXG4gICAgICBlbGVtZW50cy5zdGF0dXMudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgICAgZWxlbWVudHMuc3RhdHVzLmNsYXNzTmFtZSA9ICdzdGF0dXMgc3RhdHVzLWluZm8nO1xuICAgICAgLy8gTm8gaGFjZXIgYW5pbWFjaVx1MDBGM24gcGFyYSBldml0YXIgcGFycGFkZW9cbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UpIHtcbiAgICAgIC8vIE1lbnNhamUgbm9ybWFsLCB1c2FyIHNldFN0YXR1cyBjb21wbGV0b1xuICAgICAgc2V0U3RhdHVzKG1lc3NhZ2UsICdpbmZvJyk7XG4gICAgfVxuICB9XG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSBjb250cm9sYXIgZWwgZXN0YWRvIGRlbCBib3RcdTAwRjNuIGRlIGluaWNpYWxpemFjaVx1MDBGM25cbiAgZnVuY3Rpb24gc2V0SW5pdGlhbGl6ZWQoaXNJbml0aWFsaXplZCkge1xuICAgIGlmIChpc0luaXRpYWxpemVkKSB7XG4gICAgICBlbGVtZW50cy5pbml0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIGVsZW1lbnRzLmluaXRCdG4uc3R5bGUub3BhY2l0eSA9ICcwLjYnO1xuICAgICAgZWxlbWVudHMuaW5pdEJ0bi5pbm5lckhUTUwgPSBgXHUyNzA1IDxzcGFuPiR7dGV4dHMuaW5pdEJvdH0gLSBDb21wbGV0YWRvPC9zcGFuPmA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRzLmluaXRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIGVsZW1lbnRzLmluaXRCdG4uc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICAgIGVsZW1lbnRzLmluaXRCdG4uaW5uZXJIVE1MID0gYFx1RDgzRVx1REQxNiA8c3Bhbj4ke3RleHRzLmluaXRCb3R9PC9zcGFuPmA7XG4gICAgfVxuICB9XG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSBvY3VsdGFyL21vc3RyYXIgZWwgYm90XHUwMEYzbiBkZSBpbmljaWFsaXphY2lcdTAwRjNuXG4gIGZ1bmN0aW9uIHNldEluaXRCdXR0b25WaXNpYmxlKHZpc2libGUpIHtcbiAgICBlbGVtZW50cy5pbml0QnRuLnN0eWxlLmRpc3BsYXkgPSB2aXNpYmxlID8gJ2ZsZXgnIDogJ25vbmUnO1xuICB9XG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSByZXNldGVhciBhbCBlc3RhZG8gaW5pY2lhbFxuICBmdW5jdGlvbiByZXNldFRvSW5pdGlhbFN0YXRlKCkge1xuICAgIGhpZGVBbGxDb250cm9scygpO1xuICAgIC8vIFJlc2V0ZWFyIGVzdGFkb3MgZGUgYm90b25lc1xuICAgIGNvbnN0IGFsbEJ1dHRvbnMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJyk7XG4gICAgYWxsQnV0dG9ucy5mb3JFYWNoKGJ0biA9PiB7XG4gICAgICBidG4uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAobG9nV2luZG93KSB7XG4gICAgICBsb2dXaW5kb3cuZGVzdHJveSgpO1xuICAgIH1cbiAgICAvLyBEZXNyZWdpc3RyYXIgdmVudGFuYSBkZWwgd2luZG93IG1hbmFnZXJcbiAgICB1bnJlZ2lzdGVyV2luZG93KGNvbnRhaW5lcik7XG4gICAgaG9zdC5yZW1vdmUoKTtcbiAgfVxuICBcbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgZ2VzdGlvbmFyIGVsIGVzdGFkbyBkZSBsb3MgYm90b25lcyBzZWdcdTAwRkFuIGVsIGVzdGFkbyBkZSBsYSBwaW50dXJhXG4gIGZ1bmN0aW9uIHNldFBhaW50aW5nU3RhdGUoaXNQYWludGluZykge1xuICAgIC8vIERlc2hhYmlsaXRhci9oYWJpbGl0YXIgYm90b25lcyBkZSBpbmljaW8gc2VnXHUwMEZBbiBlbCBlc3RhZG9cbiAgICBlbGVtZW50cy5zdGFydEJ0bi5kaXNhYmxlZCA9IGlzUGFpbnRpbmc7XG4gICAgXG4gICAgLy8gSGFiaWxpdGFyL2Rlc2hhYmlsaXRhciBib3RvbmVzIGRlIHBhcmFkYSBzZWdcdTAwRkFuIGVsIGVzdGFkb1xuICAgIGVsZW1lbnRzLnN0b3BCdG4uZGlzYWJsZWQgPSAhaXNQYWludGluZztcblxuICAgIC8vIEFzZWd1cmFyIGJvdFx1MDBGM24gRGV0ZW5lciBlbiByb2pvIHZpc2libGUgY3VhbmRvIGVzdFx1MDBFMSBwaW50YW5kb1xuICAgIGlmIChpc1BhaW50aW5nKSB7XG4gICAgICBlbGVtZW50cy5zdG9wQnRuLmNsYXNzTGlzdC5hZGQoJ2J0bi1zdG9wLXJ1bm5pbmcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudHMuc3RvcEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdidG4tc3RvcC1ydW5uaW5nJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIERlc2hhYmlsaXRhci9oYWJpbGl0YXIgYm90XHUwMEYzbiBkZSBjYXJnYXIgcHJvZ3Jlc28gZHVyYW50ZSBsYSBwaW50dXJhXG4gICAgZWxlbWVudHMubG9hZFByb2dyZXNzQnRuLmRpc2FibGVkID0gaXNQYWludGluZztcbiAgfVxuICBcbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgYWN0dWFsaXphciBsYSBpbnRlcmZheiBjb24gbG9zIHZhbG9yZXMgZGVsIGVzdGFkb1xuICBmdW5jdGlvbiB1cGRhdGVVSUZyb21TdGF0ZSgpIHtcbiAgICAvLyBJbXBvcnRhciBpbWFnZVN0YXRlIGRpblx1MDBFMW1pY2FtZW50ZSBwYXJhIGV2aXRhciBkZXBlbmRlbmNpYXMgY2lyY3VsYXJlc1xuICAgIGltcG9ydCgnLi9jb25maWcuanMnKS50aGVuKCh7IGltYWdlU3RhdGUgfSkgPT4ge1xuICAgICAgLy8gQWN0dWFsaXphciB0b2dnbGUgZGUgdXNhciB0b2RhcyBsYXMgY2FyZ2FzXG4gICAgICBpZiAoZWxlbWVudHMudXNlQWxsQ2hhcmdlcykge1xuICAgICAgICBlbGVtZW50cy51c2VBbGxDaGFyZ2VzLmNoZWNrZWQgPSBpbWFnZVN0YXRlLnVzZUFsbENoYXJnZXNGaXJzdDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciBzZWxlY3RvciBkZSBwYXRyXHUwMEYzbiBkZSBwaW50YWRvXG4gICAgICBpZiAoZWxlbWVudHMucGFpbnRQYXR0ZXJuICYmIGltYWdlU3RhdGUucGFpbnRQYXR0ZXJuKSB7XG4gICAgICAgIGVsZW1lbnRzLnBhaW50UGF0dGVybi52YWx1ZSA9IGltYWdlU3RhdGUucGFpbnRQYXR0ZXJuO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBBY3R1YWxpemFyIHRvZ2dsZSBkZSBtb3N0cmFyIG92ZXJsYXlcbiAgICAgIGlmIChlbGVtZW50cy5zaG93T3ZlcmxheSAmJiBpbWFnZVN0YXRlLnNob3dPdmVybGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZWxlbWVudHMuc2hvd092ZXJsYXkuY2hlY2tlZCA9IGltYWdlU3RhdGUuc2hvd092ZXJsYXk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGxvZygnXHUyNzA1IEludGVyZmF6IGFjdHVhbGl6YWRhIGNvbiB2YWxvcmVzIGRlbCBlc3RhZG8gY2FyZ2FkbycpO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGxvZygnXHUyNkEwXHVGRTBGIEVycm9yIGFjdHVhbGl6YW5kbyBpbnRlcmZheiBkZXNkZSBlc3RhZG86JywgZXJyb3IpO1xuICAgIH0pO1xuICB9XG4gIFxuICAvLyBDcmVhciB2ZW50YW5hIGRlIHJlZGltZW5zaW9uYW1pZW50b1xuICBjb25zdCByZXNpemVXaW5kb3cgPSBjcmVhdGVSZXNpemVXaW5kb3coKTtcbiAgcmVzaXplV2luZG93LmluaXRpYWxpemUocm9vdCk7XG4gIFxuICBsb2coJ1x1MjcwNSBJbnRlcmZheiBkZSBBdXRvLUltYWdlIGNyZWFkYScpO1xuICBcbiAgLy8gSW5pY2lhbGl6YXIgZW4gZXN0YWRvIGluaWNpYWwgKHRvZG8gb2N1bHRvKVxuICBoaWRlQWxsQ29udHJvbHMoKTtcbiAgXG4gIHJldHVybiB7XG4gICAgc2V0U3RhdHVzLFxuICAgIHVwZGF0ZVByb2dyZXNzLFxuICAgIHVwZGF0ZUNvb2xkb3duRGlzcGxheSxcbiAgICB1cGRhdGVDb29sZG93bk1lc3NhZ2UsXG4gICAgc2V0SW5pdGlhbGl6ZWQsXG4gICAgc2V0SW5pdEJ1dHRvblZpc2libGUsXG4gICAgZW5hYmxlQnV0dG9uc0FmdGVySW5pdCxcbiAgICBzaG93Q29udHJvbHNGb3JJbWFnZSxcbiAgICBzaG93Q29udHJvbHNGb3JQcm9ncmVzcyxcbiAgICByZXNldFRvSW5pdGlhbFN0YXRlLFxuICAgIHNob3dSZXNpemVEaWFsb2c6IChwcm9jZXNzb3IpID0+IHtcbiAgICAgIHJlc2l6ZVdpbmRvdy5zaG93UmVzaXplRGlhbG9nKHByb2Nlc3Nvciwge1xuICAgICAgICBnZXRBdmFpbGFibGVDb2xvcnM6IGhhbmRsZXJzLmdldEF2YWlsYWJsZUNvbG9ycyxcbiAgICAgICAgb25Db2xvclNlbGVjdGlvbkNoYW5nZTogaGFuZGxlcnMub25Db2xvclNlbGVjdGlvbkNoYW5nZSxcbiAgICAgICAgb25Db25maXJtUmVzaXplOiBoYW5kbGVycy5vbkNvbmZpcm1SZXNpemVcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xvc2VSZXNpemVEaWFsb2c6ICgpID0+IHtcbiAgICAgIHJlc2l6ZVdpbmRvdy5jbG9zZVJlc2l6ZURpYWxvZygpO1xuICAgIH0sXG4gICAgc2V0UGFpbnRpbmdTdGF0ZSxcbiAgICB1cGRhdGVVSUZyb21TdGF0ZSxcbiAgICBkZXN0cm95LFxuICAgIC8vIEV4cG9uZXIgZ2VuZXJhZG9yIGRlIEpTT04gcGFyYSBBdXRvLUd1YXJkIHNpIGZ1ZSBwcm92aXN0byBwb3IgbG9zIGhhbmRsZXJzXG4gICAgZ2VuZXJhdGVHdWFyZEpTT046IGhhbmRsZXJzLmdlbmVyYXRlR3VhcmRKU09OLFxuICAgIGVsZW1lbnRzXG4gIH07XG59XG4iLCAiaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2NvcmUvbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyBpbWFnZVN0YXRlIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVDb2xvclBhbGV0dGVTZWxlY3RvciB9IGZyb20gXCIuL2NvbG9yLXBhbGV0dGUtc2VsZWN0b3IuanNcIjtcbmltcG9ydCB7IHJlZ2lzdGVyV2luZG93LCB1bnJlZ2lzdGVyV2luZG93LCBicmluZ1dpbmRvd1RvRnJvbnQgfSBmcm9tICcuLi9jb3JlL3dpbmRvdy1tYW5hZ2VyLmpzJztcblxuLyoqXG4gKiBDcmVhIHkgZ2VzdGlvbmEgZWwgZGlcdTAwRTFsb2dvIGRlIHJlZGltZW5zaW9uYW1pZW50byBkZSBpbWFnZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlc2l6ZVdpbmRvdygpIHtcbiAgbGV0IHJlc2l6ZUVsZW1lbnRzID0gbnVsbDtcblxuICAvLyBDcmVhciBlbGVtZW50b3MgZGVsIGRpXHUwMEUxbG9nbyBkZSByZWRpbWVuc2lvbmFtaWVudG9cbiAgZnVuY3Rpb24gY3JlYXRlUmVzaXplRWxlbWVudHMoY29udGFpbmVyKSB7XG4gICAgLy8gQ3JlYXIgdmVudGFuYSBuYXZlZ2FibGUgZGlyZWN0YW1lbnRlIGVuIGVsIGJvZHkgKG5vIGVuIGVsIGNvbnRhaW5lciBzaGFkb3cgcm9vdClcbiAgICBjb25zdCByZXNpemVXaW5kb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICByZXNpemVXaW5kb3cuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIHRvcDogNTBweDtcbiAgICAgIGxlZnQ6IDUwcHg7XG4gICAgICB3aWR0aDogNDUwcHg7XG4gICAgICBtaW4td2lkdGg6IDM1MHB4O1xuICAgICAgbWF4LXdpZHRoOiA2MDBweDtcbiAgICAgIG1pbi1oZWlnaHQ6IDQwMHB4O1xuICAgICAgbWF4LWhlaWdodDogODB2aDtcbiAgICAgIGJhY2tncm91bmQ6ICMxYTFhMWE7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xuICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgY29sb3I6ICNlZWU7XG4gICAgICBmb250LWZhbWlseTogJ1NlZ29lIFVJJywgUm9ib3RvLCBzYW5zLXNlcmlmO1xuICAgICAgYm94LXNoYWRvdzogMCA1cHggMTVweCByZ2JhKDAsMCwwLDAuNSk7XG4gICAgICByZXNpemU6IGJvdGg7XG4gICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGA7XG5cbiAgLy8gKHNpbiBlc3RpbG9zIGV4dHJhOiBjaGVja2JveCBzaW1wbGUgcGFyYSAnT3JpZ2luYWwnKVxuXG4gICAgcmVzaXplV2luZG93LmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgc3R5bGU9XCJwYWRkaW5nOiAxMnB4IDE1cHg7IGJhY2tncm91bmQ6ICMyZDM3NDg7IGNvbG9yOiAjNjBhNWZhOyBmb250LXNpemU6IDE2cHg7IGZvbnQtd2VpZ2h0OiA2MDA7IGRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgYWxpZ24taXRlbXM6IGNlbnRlcjsgY3Vyc29yOiBtb3ZlOyBmbGV4LXNocmluazogMDtcIiBjbGFzcz1cInJlc2l6ZS1oZWFkZXJcIj5cbiAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGdhcDogOHB4O1wiPlxuICAgICAgICAgIFx1RDgzRFx1REQyNyA8c3Bhbj5SZWRpbWVuc2lvbmFyIEltYWdlbjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9XCJkaXNwbGF5OiBmbGV4OyBnYXA6IDVweDtcIj5cbiAgICAgICAgICA8YnV0dG9uIGlkPVwibWluaW1pemVSZXNpemVCdG5cIiBzdHlsZT1cImJhY2tncm91bmQ6IG5vbmU7IGJvcmRlcjogbm9uZTsgY29sb3I6ICNlZWU7IGN1cnNvcjogcG9pbnRlcjsgb3BhY2l0eTogMC43OyBwYWRkaW5nOiA1cHg7IHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlO1wiPlx1Mjc5NjwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gaWQ9XCJjbG9zZVJlc2l6ZUJ0blwiIHN0eWxlPVwiYmFja2dyb3VuZDogbm9uZTsgYm9yZGVyOiBub25lOyBjb2xvcjogI2VlZTsgY3Vyc29yOiBwb2ludGVyOyBvcGFjaXR5OiAwLjc7IHBhZGRpbmc6IDVweDsgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGVhc2U7XCI+XHUyNzE2XHVGRTBGPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgc3R5bGU9XCJwYWRkaW5nOiAxNXB4OyBmbGV4OiAxOyBvdmVyZmxvdy15OiBhdXRvO1wiIGNsYXNzPVwicmVzaXplLWNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJlc2l6ZS1wcmV2aWV3LWNvbnRhaW5lclwiIHN0eWxlPVwiZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IHRleHQtYWxpZ246IGNlbnRlcjsgbWFyZ2luLWJvdHRvbTogOHB4OyBoZWlnaHQ6IDMyMHB4OyBvdmVyZmxvdzogaGlkZGVuOyBwYWRkaW5nOiA4cHg7IGJhY2tncm91bmQ6ICMxMTE7IGJvcmRlcjogMXB4IHNvbGlkICMzMzM7IGJvcmRlci1yYWRpdXM6IDZweDtcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzPVwicmVzaXplLXByZXZpZXdcIiBhbHQ9XCJWaXN0YSBwcmV2aWFcIiBkcmFnZ2FibGU9XCJmYWxzZVwiIHN0eWxlPVwiaW1hZ2UtcmVuZGVyaW5nOiBwaXhlbGF0ZWQ7IGltYWdlLXJlbmRlcmluZzogY3Jpc3AtZWRnZXM7IGRpc3BsYXk6IGJsb2NrOyBtYXJnaW46IDAgYXV0bzsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgb2JqZWN0LWZpdDogY29udGFpbjsgLXdlYmtpdC11c2VyLWRyYWc6IG5vbmU7IHVzZXItc2VsZWN0OiBub25lO1wiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJlc2l6ZS1wcmV2aWV3LWluZm9cIiBzdHlsZT1cImZvbnQtc2l6ZTogMTJweDsgY29sb3I6ICNhYWE7IHRleHQtYWxpZ246IGNlbnRlcjsgbWFyZ2luLWJvdHRvbTogMTJweDtcIj48L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZXNpemUtY29udHJvbHNcIiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IGdhcDogMTVweDtcIj5cbiAgICAgICAgICA8ZGl2IHN0eWxlPVwiZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiAxMHB4O1wiPlxuICAgICAgICAgICAgPGxhYmVsIHN0eWxlPVwiY29sb3I6ICNmZmZmZmY7IGZvbnQtc2l6ZTogMTRweDsgZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiA4cHg7IG1hcmdpbjogMDtcIj5cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwidG9nZ2xlLW9yaWdpbmFsXCI+XG4gICAgICAgICAgICAgIE9yaWdpbmFsXG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGdhcDogOHB4OyBtYXJnaW4tbGVmdDogYXV0bztcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIHN0eWxlPVwiY29sb3I6ICNmZmZmZmY7IGZvbnQtc2l6ZTogMTRweDsgd2hpdGUtc3BhY2U6IG5vd3JhcDtcIj5Ub2xlcmFuY2lhIExBQjwvbGFiZWw+XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBjbGFzcz1cImxhYi10b2xlcmFuY2VcIiBtaW49XCIwXCIgbWF4PVwiMTAwXCIgc3RlcD1cIjFcIiB2YWx1ZT1cIjEwMFwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYi10b2xlcmFuY2UtdmFsdWVcIiBzdHlsZT1cImNvbG9yOiNhYWE7IGZvbnQtc2l6ZToxMnB4O1wiPjEwMDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJkaXNwbGF5OiBmbGV4OyBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyBnYXA6IDVweDtcIj5cbiAgICAgICAgICAgIDxsYWJlbCBzdHlsZT1cImNvbG9yOiAjZmZmZmZmOyBmb250LXNpemU6IDE0cHg7XCI+QW5jaG86IDxzcGFuIGNsYXNzPVwid2lkdGgtdmFsdWVcIj48L3NwYW4+cHg8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIGNsYXNzPVwicmVzaXplLXNsaWRlciB3aWR0aC1zbGlkZXJcIiBtaW49XCI1MFwiIG1heD1cIjIwMDBcIiBzdGVwPVwiMVwiIHN0eWxlPVwid2lkdGg6IDEwMCU7XCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IGdhcDogNXB4O1wiPlxuICAgICAgICAgICAgPGxhYmVsIHN0eWxlPVwiY29sb3I6ICNmZmZmZmY7IGZvbnQtc2l6ZTogMTRweDtcIj5BbHRvOiA8c3BhbiBjbGFzcz1cImhlaWdodC12YWx1ZVwiPjwvc3Bhbj5weDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgY2xhc3M9XCJyZXNpemUtc2xpZGVyIGhlaWdodC1zbGlkZXJcIiBtaW49XCI1MFwiIG1heD1cIjIwMDBcIiBzdGVwPVwiMVwiIHN0eWxlPVwid2lkdGg6IDEwMCU7XCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIHN0eWxlPVwiY29sb3I6ICNmZmZmZmY7IGZvbnQtc2l6ZTogMTRweDsgZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiA4cHg7XCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJtYWludGFpbi1hc3BlY3RcIiBjaGVja2VkPlxuICAgICAgICAgICAgTWFudGVuZXIgcHJvcG9yY2lcdTAwRjNuXG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8IS0tIEFxdVx1MDBFRCBzZSBpbnNlcnRhclx1MDBFMSBlbCBzZWxlY3RvciBkZSBwYWxldGEgZGUgY29sb3JlcyAtLT5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZXNpemUtYnV0dG9uc1wiIHN0eWxlPVwiZGlzcGxheTogZmxleDsgZ2FwOiAxMHB4OyBtYXJnaW4tdG9wOiAyMHB4O1wiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgY29uZmlybS1yZXNpemVcIiBzdHlsZT1cImZsZXg6IDE7IHBhZGRpbmc6IDEwcHg7IGJhY2tncm91bmQ6ICMxMGI5ODE7IGNvbG9yOiB3aGl0ZTsgYm9yZGVyOiBub25lOyBib3JkZXItcmFkaXVzOiA2cHg7IGZvbnQtd2VpZ2h0OiA2MDA7IGN1cnNvcjogcG9pbnRlcjtcIj5cdTI3MDUgQXBsaWNhcjwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBjYW5jZWwtcmVzaXplXCIgc3R5bGU9XCJmbGV4OiAxOyBwYWRkaW5nOiAxMHB4OyBiYWNrZ3JvdW5kOiAjZWY0NDQ0OyBjb2xvcjogd2hpdGU7IGJvcmRlcjogbm9uZTsgYm9yZGVyLXJhZGl1czogNnB4OyBmb250LXdlaWdodDogNjAwOyBjdXJzb3I6IHBvaW50ZXI7XCI+XHUyNzRDIENhbmNlbGFyPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDwhLS0gSW5kaWNhZG9yIGRlIHJlZGltZW5zaW9uYW1pZW50byAtLT5cbiAgICAgIDxkaXYgc3R5bGU9XCJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCB0cmFuc3BhcmVudCAzMCUsICM2NjYgMzAlLCAjNjY2IDQwJSwgdHJhbnNwYXJlbnQgNDAlLCB0cmFuc3BhcmVudCA2MCUsICM2NjYgNjAlLCAjNjY2IDcwJSwgdHJhbnNwYXJlbnQgNzAlKTtcbiAgICAgICAgY3Vyc29yOiBudy1yZXNpemU7XG4gICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA4cHg7XG4gICAgICBcIj48L2Rpdj5cbiAgICBgO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZXNpemVXaW5kb3cpO1xuXG4gICAgLy8gT2J0ZW5lciByZWZlcmVuY2lhcyBhIGxvcyBlbGVtZW50b3NcbiAgICByZXNpemVFbGVtZW50cyA9IHtcbiAgICAgIG92ZXJsYXk6IHJlc2l6ZVdpbmRvdyxcbiAgICAgIGNvbnRhaW5lcjogcmVzaXplV2luZG93LFxuICAgICAgcHJldmlldzogcmVzaXplV2luZG93LnF1ZXJ5U2VsZWN0b3IoJy5yZXNpemUtcHJldmlldycpLFxuICAgICAgcHJldmlld0NvbnRhaW5lcjogcmVzaXplV2luZG93LnF1ZXJ5U2VsZWN0b3IoJy5yZXNpemUtcHJldmlldy1jb250YWluZXInKSxcbiAgICAgIHdpZHRoU2xpZGVyOiByZXNpemVXaW5kb3cucXVlcnlTZWxlY3RvcignLndpZHRoLXNsaWRlcicpLFxuICAgICAgaGVpZ2h0U2xpZGVyOiByZXNpemVXaW5kb3cucXVlcnlTZWxlY3RvcignLmhlaWdodC1zbGlkZXInKSxcbiAgICAgIHdpZHRoVmFsdWU6IHJlc2l6ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKCcud2lkdGgtdmFsdWUnKSxcbiAgICAgIGhlaWdodFZhbHVlOiByZXNpemVXaW5kb3cucXVlcnlTZWxlY3RvcignLmhlaWdodC12YWx1ZScpLFxuICAgICAgbWFpbnRhaW5Bc3BlY3Q6IHJlc2l6ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKCcubWFpbnRhaW4tYXNwZWN0JyksXG4gICAgICBjb25maXJtQnRuOiByZXNpemVXaW5kb3cucXVlcnlTZWxlY3RvcignLmNvbmZpcm0tcmVzaXplJyksXG4gICAgICBjYW5jZWxCdG46IHJlc2l6ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKCcuY2FuY2VsLXJlc2l6ZScpLFxuICAgICAgY29sb3JQYWxldHRlU2VsZWN0b3I6IG51bGwsXG4gICAgICByZXNpemVXaW5kb3c6IHJlc2l6ZVdpbmRvdyxcbiAgICAgIHJlc2l6ZUhlYWRlcjogcmVzaXplV2luZG93LnF1ZXJ5U2VsZWN0b3IoJy5yZXNpemUtaGVhZGVyJyksXG4gICAgICBtaW5pbWl6ZUJ0bjogcmVzaXplV2luZG93LnF1ZXJ5U2VsZWN0b3IoJyNtaW5pbWl6ZVJlc2l6ZUJ0bicpLFxuICAgICAgY2xvc2VCdG46IHJlc2l6ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKCcjY2xvc2VSZXNpemVCdG4nKSxcbiAgICAgIHJlc2l6ZUNvbnRlbnQ6IHJlc2l6ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKCcucmVzaXplLWNvbnRlbnQnKSxcbiAgICAgIHByZXZpZXdJbmZvOiByZXNpemVXaW5kb3cucXVlcnlTZWxlY3RvcignLnJlc2l6ZS1wcmV2aWV3LWluZm8nKVxuICAsXG4gIHRvZ2dsZU9yaWdpbmFsOiByZXNpemVXaW5kb3cucXVlcnlTZWxlY3RvcignLnRvZ2dsZS1vcmlnaW5hbCcpLFxuICBsYWJUb2xlcmFuY2U6IHJlc2l6ZVdpbmRvdy5xdWVyeVNlbGVjdG9yKCcubGFiLXRvbGVyYW5jZScpLFxuICBsYWJUb2xlcmFuY2VWYWx1ZTogcmVzaXplV2luZG93LnF1ZXJ5U2VsZWN0b3IoJy5sYWItdG9sZXJhbmNlLXZhbHVlJylcbiAgICB9O1xuXG4gICAgLy8gRXZpdGFyIGFycmFzdHJlIG5hdGl2byBkZW50cm8gZGUgbGEgdmVudGFuYSAoZXNwZWNpYWxtZW50ZSBpbVx1MDBFMWdlbmVzKVxuICAgIHJlc2l6ZVdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICBpZiAocmVzaXplRWxlbWVudHMucHJldmlldykge1xuICAgICAgcmVzaXplRWxlbWVudHMucHJldmlldy5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICB9XG5cbiAgICAvLyBIYWNlciBsYSB2ZW50YW5hIGFycmFzdHJhYmxlXG4gICAgbWFrZURyYWdnYWJsZShyZXNpemVXaW5kb3csIHJlc2l6ZUVsZW1lbnRzLnJlc2l6ZUhlYWRlcik7XG5cbiAgICAvLyBGdW5jaW9uYWxpZGFkIGRlIG1pbmltaXphclxuICAgIGxldCBpc01pbmltaXplZCA9IGZhbHNlO1xuICAgIHJlc2l6ZUVsZW1lbnRzLm1pbmltaXplQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaXNNaW5pbWl6ZWQgPSAhaXNNaW5pbWl6ZWQ7XG4gICAgICBpZiAoaXNNaW5pbWl6ZWQpIHtcbiAgICAgICAgcmVzaXplRWxlbWVudHMucmVzaXplQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICByZXNpemVXaW5kb3cuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICByZXNpemVXaW5kb3cuc3R5bGUucmVzaXplID0gJ25vbmUnO1xuICAgICAgICByZXNpemVFbGVtZW50cy5taW5pbWl6ZUJ0bi50ZXh0Q29udGVudCA9ICdcdTI3OTUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzaXplRWxlbWVudHMucmVzaXplQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgcmVzaXplV2luZG93LnN0eWxlLnJlc2l6ZSA9ICdib3RoJztcbiAgICAgICAgcmVzaXplRWxlbWVudHMubWluaW1pemVCdG4udGV4dENvbnRlbnQgPSAnXHUyNzk2JztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEZ1bmNpb25hbGlkYWQgZGUgY2VycmFyXG4gICAgcmVzaXplRWxlbWVudHMuY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjbG9zZVJlc2l6ZURpYWxvZygpO1xuICAgIH0pO1xuXG4gICAgLy8gUmVnaXN0cmFyIGxhIHZlbnRhbmFcbiAgICByZWdpc3RlcldpbmRvdyhyZXNpemVXaW5kb3cpO1xuXG4gICAgbG9nKCdcdTI3MDUgRWxlbWVudG9zIGRlbCBkaVx1MDBFMWxvZ28gZGUgcmVkaW1lbnNpb25hbWllbnRvIGNyZWFkb3MnKTtcbiAgfVxuXG5cblxuICAvLyBNb3N0cmFyIGVsIGRpXHUwMEUxbG9nbyBkZSByZWRpbWVuc2lvbmFtaWVudG9cbiAgZnVuY3Rpb24gc2hvd1Jlc2l6ZURpYWxvZyhwcm9jZXNzb3IsIGhhbmRsZXJzID0ge30pIHtcbiAgICBpZiAoIXJlc2l6ZUVsZW1lbnRzKSB7XG4gICAgICBsb2coJ1x1Mjc0QyBFcnJvcjogRWxlbWVudG9zIGRlIHJlZGltZW5zaW9uYW1pZW50byBubyBpbmljaWFsaXphZG9zJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIE9idGVuZXIgZGltZW5zaW9uZXMgZGVsIHByb2Nlc3NvclxuICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBwcm9jZXNzb3IuZ2V0RGltZW5zaW9ucygpO1xuICAgIGNvbnN0IG9yaWdpbmFsV2lkdGggPSBkaW1lbnNpb25zLndpZHRoO1xuICAgIGNvbnN0IG9yaWdpbmFsSGVpZ2h0ID0gZGltZW5zaW9ucy5oZWlnaHQ7XG4gICAgbGV0IGN1cnJlbnRXaWR0aCA9IG9yaWdpbmFsV2lkdGg7XG4gICAgbGV0IGN1cnJlbnRIZWlnaHQgPSBvcmlnaW5hbEhlaWdodDtcbiAgICBsZXQgYXNwZWN0UmF0aW8gPSBvcmlnaW5hbFdpZHRoIC8gb3JpZ2luYWxIZWlnaHQ7XG4gICAgXG4gICAgLy8gRnVuY2lcdTAwRjNuIGhlbHBlciBwYXJhIGFjdHVhbGl6YXIgbGEgdmlzdGEgcHJldmlhIGRlIGZvcm1hIGxpZ2VyYSBvIGNvbiBwYWxldGFcbiAgICBjb25zdCB1cGRhdGVQcmV2aWV3ID0gKHVzZVBhbGV0dGUgPSBmYWxzZSwgc2VsZWN0ZWRDb2xvcnNGb3JQcmV2aWV3ID0gbnVsbCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW1nVyA9IGN1cnJlbnRXaWR0aDtcbiAgICAgICAgY29uc3QgaW1nSCA9IGN1cnJlbnRIZWlnaHQ7XG5cbiAgICAgICAgbGV0IGRhdGFVcmwgPSBudWxsO1xuICAgICAgICBsZXQgc3RhdHMgPSBudWxsO1xuXG4gICAgICAgIC8vIFNpIGVsIHVzdWFyaW8gcXVpZXJlIHZlciBlbCBvcmlnaW5hbCwgdXNhciBwcmV2aWV3IG9yaWdpbmFsXG4gICAgICAgIGlmIChyZXNpemVFbGVtZW50cy50b2dnbGVPcmlnaW5hbCAmJiByZXNpemVFbGVtZW50cy50b2dnbGVPcmlnaW5hbC5jaGVja2VkICYmIHR5cGVvZiBwcm9jZXNzb3IuZ2VuZXJhdGVPcmlnaW5hbFByZXZpZXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkYXRhVXJsID0gcHJvY2Vzc29yLmdlbmVyYXRlT3JpZ2luYWxQcmV2aWV3KGltZ1csIGltZ0gpO1xuICAgICAgICB9IGVsc2UgaWYgKHVzZVBhbGV0dGUgJiYgdHlwZW9mIHByb2Nlc3Nvci5nZW5lcmF0ZVByZXZpZXdXaXRoUGFsZXR0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIC8vIFNpIG5vcyBwYXNhbiBzZWxlY2NpXHUwMEYzbiwgYXBsaWNhcmxhXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0ZWRDb2xvcnNGb3JQcmV2aWV3KSkge1xuICAgICAgICAgICAgcHJvY2Vzc29yLnNldFNlbGVjdGVkQ29sb3JzKHNlbGVjdGVkQ29sb3JzRm9yUHJldmlldyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHByb2Nlc3Nvci5nZW5lcmF0ZVByZXZpZXdXaXRoUGFsZXR0ZShpbWdXLCBpbWdIKTtcbiAgICAgICAgICBkYXRhVXJsID0gcmVzdWx0Py5kYXRhVXJsIHx8IG51bGw7XG4gICAgICAgICAgc3RhdHMgPSByZXN1bHQ/LnN0YXRzIHx8IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUHJldmlldyBub3JtYWwgc2luIHJlc3RyaWNjaW9uZXNcbiAgICAgICAgICBkYXRhVXJsID0gcHJvY2Vzc29yLmdlbmVyYXRlUHJldmlldyhpbWdXLCBpbWdIKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YVVybCkge1xuICAgICAgICAgIHJlc2l6ZUVsZW1lbnRzLnByZXZpZXcuc3JjID0gZGF0YVVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFjdHVhbGl6YXIgaW5mbyBkZSBwcmV2aXN1YWxpemFjaVx1MDBGM25cbiAgICAgICAgaWYgKHJlc2l6ZUVsZW1lbnRzLnByZXZpZXdJbmZvKSB7XG4gICAgICAgICAgY29uc3QgdG90YWwgPSBpbWdXICogaW1nSDtcbiAgICAgICAgICBsZXQgZXh0cmEgPSAnJztcbiAgICAgICAgICBpZiAoc3RhdHMpIHtcbiAgICAgICAgICAgIGV4dHJhID0gYCB8IEV4YWN0OiAke3N0YXRzLmV4YWN0LnRvTG9jYWxlU3RyaW5nKCl9IHwgTEFCOiAke3N0YXRzLmxhYi50b0xvY2FsZVN0cmluZygpfSB8IFJlbW92ZWQ6ICR7c3RhdHMucmVtb3ZlZC50b0xvY2FsZVN0cmluZygpfWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc2l6ZUVsZW1lbnRzLnByZXZpZXdJbmZvLnRleHRDb250ZW50ID0gYCR7aW1nV31cdTAwRDcke2ltZ0h9IHB4IHwgVG90YWw6ICR7dG90YWwudG9Mb2NhbGVTdHJpbmcoKX0gcFx1MDBFRHhlbGVzJHtleHRyYX1gO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZygnXHUyNkEwXHVGRTBGIEVycm9yIGdlbmVyYW5kbyB2aXN0YSBwcmV2aWE6JywgZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIENvbmZpZ3VyYXIgc2xpZGVyc1xuICAgIHJlc2l6ZUVsZW1lbnRzLndpZHRoU2xpZGVyLnZhbHVlID0gb3JpZ2luYWxXaWR0aDtcbiAgICByZXNpemVFbGVtZW50cy5oZWlnaHRTbGlkZXIudmFsdWUgPSBvcmlnaW5hbEhlaWdodDtcbiAgICByZXNpemVFbGVtZW50cy53aWR0aFZhbHVlLnRleHRDb250ZW50ID0gb3JpZ2luYWxXaWR0aDtcbiAgICByZXNpemVFbGVtZW50cy5oZWlnaHRWYWx1ZS50ZXh0Q29udGVudCA9IG9yaWdpbmFsSGVpZ2h0O1xuXG4gICAgLy8gQ29uZmlndXJhciBlbCBzZWxlY3RvciBkZSBwYWxldGEgZGUgY29sb3Jlc1xuICAgIGlmICghcmVzaXplRWxlbWVudHMuY29sb3JQYWxldHRlU2VsZWN0b3IpIHtcbiAgICAgIGNvbnN0IGNvbG9yUGFsZXR0ZUNvbnRhaW5lciA9IHJlc2l6ZUVsZW1lbnRzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucmVzaXplLWNvbnRlbnQnKSB8fCByZXNpemVFbGVtZW50cy5jb250YWluZXI7XG4gICAgICAvLyBVc2FyIGNvbG9yZXMgY2FjaGVhZG9zIGVuIGVsIGVzdGFkbyBwYXJhIGluaWNpYWxpemFyIGVsIHNlbGVjdG9yLCBldml0YW5kbyBkZXBlbmRlciBkZWwgRE9NIGRlIGxhIHBhbGV0YSBkZWwgc2l0aW9cbiAgICAgIGNvbnN0IGluaXRpYWxDb2xvcnMgPSBBcnJheS5pc0FycmF5KGltYWdlU3RhdGU/LmF2YWlsYWJsZUNvbG9ycykgPyBpbWFnZVN0YXRlLmF2YWlsYWJsZUNvbG9ycyA6IFtdO1xuICAgICAgcmVzaXplRWxlbWVudHMuY29sb3JQYWxldHRlU2VsZWN0b3IgPSBjcmVhdGVDb2xvclBhbGV0dGVTZWxlY3Rvcihjb2xvclBhbGV0dGVDb250YWluZXIsIGluaXRpYWxDb2xvcnMpO1xuICAgIH1cblxuICAvLyBFdmVudCBsaXN0ZW5lcnMgcGFyYSBsb3Mgc2xpZGVyc1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpZHRoKCkge1xuICAgICAgY3VycmVudFdpZHRoID0gcGFyc2VJbnQocmVzaXplRWxlbWVudHMud2lkdGhTbGlkZXIudmFsdWUpO1xuICAgICAgcmVzaXplRWxlbWVudHMud2lkdGhWYWx1ZS50ZXh0Q29udGVudCA9IGN1cnJlbnRXaWR0aDtcbiAgICAgIFxuICAgICAgaWYgKHJlc2l6ZUVsZW1lbnRzLm1haW50YWluQXNwZWN0LmNoZWNrZWQpIHtcbiAgICAgICAgY3VycmVudEhlaWdodCA9IE1hdGgucm91bmQoY3VycmVudFdpZHRoIC8gYXNwZWN0UmF0aW8pO1xuICAgICAgICByZXNpemVFbGVtZW50cy5oZWlnaHRTbGlkZXIudmFsdWUgPSBjdXJyZW50SGVpZ2h0O1xuICAgICAgICByZXNpemVFbGVtZW50cy5oZWlnaHRWYWx1ZS50ZXh0Q29udGVudCA9IGN1cnJlbnRIZWlnaHQ7XG4gICAgICB9XG4gICAgICAvLyBTaWVtcHJlIHVzYXIgcHJldmlldyBjb24gcGFsZXRhIGFjdGl2YVxuICAgICAgY29uc3Qgc2VsZWN0ZWRJZHMgPSByZXNpemVFbGVtZW50cy5jb2xvclBhbGV0dGVTZWxlY3Rvcj8uZ2V0U2VsZWN0ZWRDb2xvcnM/LigpIHx8IFtdO1xuICAgICAgY29uc3Qgc291cmNlQ29sb3JzID0gaW1hZ2VTdGF0ZT8uYXZhaWxhYmxlQ29sb3JzIHx8IFtdO1xuICAgICAgY29uc3QgYnlJZCA9IG5ldyBNYXAoc291cmNlQ29sb3JzLm1hcChjID0+IFtjLmlkLCBjXSkpO1xuICAgICAgY29uc3QgcGFsZXR0ZSA9IHNlbGVjdGVkSWRzLm1hcChpZCA9PiBieUlkLmdldChpZCkpLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIHVwZGF0ZVByZXZpZXcodHJ1ZSwgcGFsZXR0ZSk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHVwZGF0ZUhlaWdodCgpIHtcbiAgICAgIGN1cnJlbnRIZWlnaHQgPSBwYXJzZUludChyZXNpemVFbGVtZW50cy5oZWlnaHRTbGlkZXIudmFsdWUpO1xuICAgICAgcmVzaXplRWxlbWVudHMuaGVpZ2h0VmFsdWUudGV4dENvbnRlbnQgPSBjdXJyZW50SGVpZ2h0O1xuICAgICAgXG4gICAgICBpZiAocmVzaXplRWxlbWVudHMubWFpbnRhaW5Bc3BlY3QuY2hlY2tlZCkge1xuICAgICAgICBjdXJyZW50V2lkdGggPSBNYXRoLnJvdW5kKGN1cnJlbnRIZWlnaHQgKiBhc3BlY3RSYXRpbyk7XG4gICAgICAgIHJlc2l6ZUVsZW1lbnRzLndpZHRoU2xpZGVyLnZhbHVlID0gY3VycmVudFdpZHRoO1xuICAgICAgICByZXNpemVFbGVtZW50cy53aWR0aFZhbHVlLnRleHRDb250ZW50ID0gY3VycmVudFdpZHRoO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2VsZWN0ZWRJZHMgPSByZXNpemVFbGVtZW50cy5jb2xvclBhbGV0dGVTZWxlY3Rvcj8uZ2V0U2VsZWN0ZWRDb2xvcnM/LigpIHx8IFtdO1xuICAgICAgY29uc3Qgc291cmNlQ29sb3JzID0gaW1hZ2VTdGF0ZT8uYXZhaWxhYmxlQ29sb3JzIHx8IFtdO1xuICAgICAgY29uc3QgYnlJZCA9IG5ldyBNYXAoc291cmNlQ29sb3JzLm1hcChjID0+IFtjLmlkLCBjXSkpO1xuICAgICAgY29uc3QgcGFsZXR0ZSA9IHNlbGVjdGVkSWRzLm1hcChpZCA9PiBieUlkLmdldChpZCkpLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIHVwZGF0ZVByZXZpZXcodHJ1ZSwgcGFsZXR0ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlVG9nZ2xlT3JpZ2luYWwoKSB7XG4gICAgICAvLyBDYW1iaWFyIHByZXZpZXcgZW50cmUgb3JpZ2luYWwgeSBwYWxldGEgYWN0dWFsXG4gICAgICBjb25zdCBzZWxlY3RlZElkcyA9IHJlc2l6ZUVsZW1lbnRzLmNvbG9yUGFsZXR0ZVNlbGVjdG9yPy5nZXRTZWxlY3RlZENvbG9ycz8uKCkgfHwgW107XG4gICAgICBjb25zdCBzb3VyY2VDb2xvcnMgPSBpbWFnZVN0YXRlPy5hdmFpbGFibGVDb2xvcnMgfHwgW107XG4gICAgICBjb25zdCBieUlkID0gbmV3IE1hcChzb3VyY2VDb2xvcnMubWFwKGMgPT4gW2MuaWQsIGNdKSk7XG4gICAgICBjb25zdCBwYWxldHRlID0gc2VsZWN0ZWRJZHMubWFwKGlkID0+IGJ5SWQuZ2V0KGlkKSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgdXBkYXRlUHJldmlldyh0cnVlLCBwYWxldHRlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVMYWJUb2xlcmFuY2VDaGFuZ2UoKSB7XG4gICAgICBjb25zdCB2YWwgPSBwYXJzZUludChyZXNpemVFbGVtZW50cy5sYWJUb2xlcmFuY2UudmFsdWUpIHx8IDA7XG4gICAgICByZXNpemVFbGVtZW50cy5sYWJUb2xlcmFuY2VWYWx1ZS50ZXh0Q29udGVudCA9IFN0cmluZyh2YWwpO1xuICAgICAgdHJ5IHsgcHJvY2Vzc29yLnNldExhYlRvbGVyYW5jZSh2YWwpOyB9IGNhdGNoIHt9XG4gICAgICAvLyBSZWdlbmVyYXIgcHJldmlldyBjb24gbnVldmEgdG9sZXJhbmNpYVxuICAgICAgY29uc3Qgc2VsZWN0ZWRJZHMgPSByZXNpemVFbGVtZW50cy5jb2xvclBhbGV0dGVTZWxlY3Rvcj8uZ2V0U2VsZWN0ZWRDb2xvcnM/LigpIHx8IFtdO1xuICAgICAgY29uc3Qgc291cmNlQ29sb3JzID0gaW1hZ2VTdGF0ZT8uYXZhaWxhYmxlQ29sb3JzIHx8IFtdO1xuICAgICAgY29uc3QgYnlJZCA9IG5ldyBNYXAoc291cmNlQ29sb3JzLm1hcChjID0+IFtjLmlkLCBjXSkpO1xuICAgICAgY29uc3QgcGFsZXR0ZSA9IHNlbGVjdGVkSWRzLm1hcChpZCA9PiBieUlkLmdldChpZCkpLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIHVwZGF0ZVByZXZpZXcodHJ1ZSwgcGFsZXR0ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlTWFpbnRhaW5Bc3BlY3RDaGFuZ2UoKSB7XG4gICAgICAvLyBSZWNhbGN1bGFyIGxhIG90cmEgZGltZW5zaVx1MDBGM24gcGFyYSByZXNwZXRhciBsYSBwcm9wb3JjaVx1MDBGM24gYWN0dWFsXG4gICAgICBpZiAocmVzaXplRWxlbWVudHMubWFpbnRhaW5Bc3BlY3QuY2hlY2tlZCkge1xuICAgICAgICAvLyBBanVzdGFyIGFsdG8gZW4gYmFzZSBhbCBhbmNobyBhY3R1YWxcbiAgICAgICAgY3VycmVudFdpZHRoID0gcGFyc2VJbnQocmVzaXplRWxlbWVudHMud2lkdGhTbGlkZXIudmFsdWUpO1xuICAgICAgICBjdXJyZW50SGVpZ2h0ID0gTWF0aC5yb3VuZChjdXJyZW50V2lkdGggLyBhc3BlY3RSYXRpbyk7XG4gICAgICAgIHJlc2l6ZUVsZW1lbnRzLmhlaWdodFNsaWRlci52YWx1ZSA9IGN1cnJlbnRIZWlnaHQ7XG4gICAgICAgIHJlc2l6ZUVsZW1lbnRzLmhlaWdodFZhbHVlLnRleHRDb250ZW50ID0gY3VycmVudEhlaWdodDtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZVByZXZpZXcoKTtcbiAgICB9XG4gICAgXG4gICAgLy8gTGltcGlhciBldmVudCBsaXN0ZW5lcnMgYW50ZXJpb3Jlc1xuICAgIHJlc2l6ZUVsZW1lbnRzLndpZHRoU2xpZGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdXBkYXRlV2lkdGgpO1xuICAgIHJlc2l6ZUVsZW1lbnRzLmhlaWdodFNsaWRlci5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIHVwZGF0ZUhlaWdodCk7XG4gICAgcmVzaXplRWxlbWVudHMubWFpbnRhaW5Bc3BlY3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlTWFpbnRhaW5Bc3BlY3RDaGFuZ2UpO1xuICAgIFxuICAgIC8vIEFncmVnYXIgbnVldm9zIGV2ZW50IGxpc3RlbmVyc1xuICAgIHJlc2l6ZUVsZW1lbnRzLndpZHRoU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdXBkYXRlV2lkdGgpO1xuICAgIHJlc2l6ZUVsZW1lbnRzLmhlaWdodFNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHVwZGF0ZUhlaWdodCk7XG4gICAgcmVzaXplRWxlbWVudHMubWFpbnRhaW5Bc3BlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlTWFpbnRhaW5Bc3BlY3RDaGFuZ2UpO1xuICAgIGlmIChyZXNpemVFbGVtZW50cy50b2dnbGVPcmlnaW5hbCkge1xuICAgICAgcmVzaXplRWxlbWVudHMudG9nZ2xlT3JpZ2luYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlVG9nZ2xlT3JpZ2luYWwpO1xuICAgICAgcmVzaXplRWxlbWVudHMudG9nZ2xlT3JpZ2luYWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlVG9nZ2xlT3JpZ2luYWwpO1xuICAgIH1cbiAgICBpZiAocmVzaXplRWxlbWVudHMubGFiVG9sZXJhbmNlKSB7XG4gICAgICByZXNpemVFbGVtZW50cy5sYWJUb2xlcmFuY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBoYW5kbGVMYWJUb2xlcmFuY2VDaGFuZ2UpO1xuICAgICAgcmVzaXplRWxlbWVudHMubGFiVG9sZXJhbmNlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgaGFuZGxlTGFiVG9sZXJhbmNlQ2hhbmdlKTtcbiAgICAgIC8vIEluaWNpYWxpemFyIGNvbiB0b2xlcmFuY2lhIGRlbCBwcm9jZXNzb3Igc2kgZXhpc3RlXG4gIGNvbnN0IGluaXRpYWxUb2wgPSBNYXRoLm1pbigxMDAsIE1hdGgubWF4KDAsIE1hdGgucm91bmQocHJvY2Vzc29yLmxhYlRvbGVyYW5jZSA/PyAxMDApKSk7XG4gICAgICByZXNpemVFbGVtZW50cy5sYWJUb2xlcmFuY2UudmFsdWUgPSBTdHJpbmcoaW5pdGlhbFRvbCk7XG4gICAgICByZXNpemVFbGVtZW50cy5sYWJUb2xlcmFuY2VWYWx1ZS50ZXh0Q29udGVudCA9IFN0cmluZyhpbml0aWFsVG9sKTtcbiAgICB9XG5cbiAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSBvYnRlbmVyIGNvbG9yZXMgc2VsZWNjaW9uYWRvc1xuICAgICBmdW5jdGlvbiBnZXRTZWxlY3RlZENvbG9ycygpIHtcbiAgICAgICBpZiAocmVzaXplRWxlbWVudHMuY29sb3JQYWxldHRlU2VsZWN0b3IgJiYgcmVzaXplRWxlbWVudHMuY29sb3JQYWxldHRlU2VsZWN0b3IuZ2V0U2VsZWN0ZWRDb2xvcnMpIHtcbiAgICAgICAgIHJldHVybiByZXNpemVFbGVtZW50cy5jb2xvclBhbGV0dGVTZWxlY3Rvci5nZXRTZWxlY3RlZENvbG9ycygpO1xuICAgICAgIH1cbiAgICAgICAvLyBGYWxsYmFjazogYnVzY2FyIHN3YXRjaGVzIGFjdGl2b3MgZW4gbGEgcGFsZXRhXG4gICAgICAgY29uc3QgYWN0aXZlU3dhdGNoZXMgPSByZXNpemVFbGVtZW50cy5jb2xvclBhbGV0dGVTZWxlY3Rvcj8uZWxlbWVudD8ucXVlcnlTZWxlY3RvckFsbCgnLndwbGFjZS1jb2xvci1zd2F0Y2guYWN0aXZlJyk7XG4gICAgICAgcmV0dXJuIGFjdGl2ZVN3YXRjaGVzID8gQXJyYXkuZnJvbShhY3RpdmVTd2F0Y2hlcykubWFwKHMgPT4gcGFyc2VJbnQocy5kYXRhc2V0LmNvbG9ySWQpKSA6IFtdO1xuICAgICB9XG4gICAgIFxuICAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSBjb25maWd1cmFyIGxhIHBhbGV0YSBkZSBjb2xvcmVzXG4gICAgIGZ1bmN0aW9uIHNldHVwQ29sb3JQYWxldHRlKGNvbG9ycykge1xuICAgICAgIGlmICghY29sb3JzIHx8ICFyZXNpemVFbGVtZW50cy5jb2xvclBhbGV0dGVTZWxlY3RvcikgcmV0dXJuO1xuICAgICAgIFxuICAgICAgIC8vIEVsIHNlbGVjdG9yIGRlIHBhbGV0YSB5YSBtYW5lamEgbGEgY29uZmlndXJhY2lcdTAwRjNuIGRlIGNvbG9yZXMgaW50ZXJuYW1lbnRlXG4gICAgICAgaWYgKHJlc2l6ZUVsZW1lbnRzLmNvbG9yUGFsZXR0ZVNlbGVjdG9yLnVwZGF0ZUF2YWlsYWJsZUNvbG9ycykge1xuICAgICAgICAgcmVzaXplRWxlbWVudHMuY29sb3JQYWxldHRlU2VsZWN0b3IudXBkYXRlQXZhaWxhYmxlQ29sb3JzKGNvbG9ycyk7XG4gICAgICAgfVxuICAgICB9XG4gICAgXG4gICAgLy8gRXZlbnQgbGlzdGVuZXIgcGFyYSBlbCBib3RcdTAwRjNuIGRlIGNvbmZpcm1hclxuICAgICBmdW5jdGlvbiBoYW5kbGVDb25maXJtKCkge1xuICAgICAgIGNvbnN0IHNlbGVjdGVkQ29sb3JzID0gZ2V0U2VsZWN0ZWRDb2xvcnMoKTtcbiAgICAgICBpZiAoaGFuZGxlcnMub25Db25maXJtUmVzaXplKSB7XG4gICAgICAgICBoYW5kbGVycy5vbkNvbmZpcm1SZXNpemUocHJvY2Vzc29yLCBjdXJyZW50V2lkdGgsIGN1cnJlbnRIZWlnaHQsIHNlbGVjdGVkQ29sb3JzKTtcbiAgICAgICB9XG4gICAgICAgY2xvc2VSZXNpemVEaWFsb2coKTtcbiAgICAgfVxuICAgIFxuICAgIC8vIEV2ZW50IGxpc3RlbmVyIHBhcmEgZWwgYm90XHUwMEYzbiBkZSBjYW5jZWxhclxuICAgIGZ1bmN0aW9uIGhhbmRsZUNhbmNlbCgpIHtcbiAgICAgIGNsb3NlUmVzaXplRGlhbG9nKCk7XG4gICAgfVxuICAgIFxuICAgIC8vIExpbXBpYXIgZXZlbnQgbGlzdGVuZXJzIGFudGVyaW9yZXNcbiAgICByZXNpemVFbGVtZW50cy5jb25maXJtQnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ29uZmlybSk7XG4gICAgcmVzaXplRWxlbWVudHMuY2FuY2VsQnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2FuY2VsKTtcbiAgICBcbiAgICAvLyBBZ3JlZ2FyIG51ZXZvcyBldmVudCBsaXN0ZW5lcnNcbiAgICByZXNpemVFbGVtZW50cy5jb25maXJtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ29uZmlybSk7XG4gICAgcmVzaXplRWxlbWVudHMuY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2FuY2VsKTtcbiAgICBcbiAgICAvLyBDb25maWd1cmFyIHNlbGVjdG9yIGRlIGNvbG9yZXNcbiAgICAgaWYgKGhhbmRsZXJzLmdldEF2YWlsYWJsZUNvbG9ycykge1xuICAgICAgIC8vIEludGVudGFyIG9idGVuZXIgY29sb3JlcyBkZXNkZSBlbCBoYW5kbGVyOyBzaSBubyBoYXksIG1hbnRlbmVyIGxvcyBjYWNoZWFkb3NcbiAgICAgICBjb25zdCBjb2xvcnMgPSBoYW5kbGVycy5nZXRBdmFpbGFibGVDb2xvcnMoKTtcbiAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvcnMpICYmIGNvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICBzZXR1cENvbG9yUGFsZXR0ZShjb2xvcnMpO1xuICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbWFnZVN0YXRlPy5hdmFpbGFibGVDb2xvcnMpICYmIGltYWdlU3RhdGUuYXZhaWxhYmxlQ29sb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgIHNldHVwQ29sb3JQYWxldHRlKGltYWdlU3RhdGUuYXZhaWxhYmxlQ29sb3JzKTtcbiAgICAgICB9XG4gICAgIH1cbiAgICAgXG4gICAgIC8vIENvbmZpZ3VyYXIgY2FsbGJhY2sgZGUgc2VsZWNjaVx1MDBGM24gZGUgY29sb3JcbiAgICAgaWYgKHJlc2l6ZUVsZW1lbnRzLmNvbG9yUGFsZXR0ZVNlbGVjdG9yICYmIHJlc2l6ZUVsZW1lbnRzLmNvbG9yUGFsZXR0ZVNlbGVjdG9yLm9uU2VsZWN0aW9uQ2hhbmdlKSB7XG4gICAgICAgcmVzaXplRWxlbWVudHMuY29sb3JQYWxldHRlU2VsZWN0b3Iub25TZWxlY3Rpb25DaGFuZ2UoKHNlbGVjdGVkQ29sb3JJZHMpID0+IHtcbiAgICAgICAgIC8vIE1hcGVhciBJRHMgc2VsZWNjaW9uYWRvcyBhIG9iamV0b3MgZGUgY29sb3IgZGVzZGUgYXZhaWxhYmxlQ29sb3JzIGVuIGVzdGFkby9oYW5kbGVyXG4gICAgICAgICBsZXQgcGFsZXR0ZSA9IFtdO1xuICAgICAgICAgY29uc3Qgc291cmNlQ29sb3JzID0gKHR5cGVvZiBoYW5kbGVycy5nZXRBdmFpbGFibGVDb2xvcnMgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgID8gaGFuZGxlcnMuZ2V0QXZhaWxhYmxlQ29sb3JzKClcbiAgICAgICAgICAgOiAoQXJyYXkuaXNBcnJheShpbWFnZVN0YXRlPy5hdmFpbGFibGVDb2xvcnMpID8gaW1hZ2VTdGF0ZS5hdmFpbGFibGVDb2xvcnMgOiBbXSk7XG4gICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2VDb2xvcnMpICYmIHNvdXJjZUNvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgIGNvbnN0IGJ5SWQgPSBuZXcgTWFwKHNvdXJjZUNvbG9ycy5tYXAoYyA9PiBbYy5pZCwgY10pKTtcbiAgICAgICAgICAgcGFsZXR0ZSA9IHNlbGVjdGVkQ29sb3JJZHMubWFwKGlkID0+IGJ5SWQuZ2V0KGlkKSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgfVxuXG4gICAgICAgICAvLyBOb3RpZmljYXIgYSBVSS9oYW5kbGVyc1xuICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVycy5vbkNvbG9yU2VsZWN0aW9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgIGhhbmRsZXJzLm9uQ29sb3JTZWxlY3Rpb25DaGFuZ2Uoc2VsZWN0ZWRDb2xvcklkcyk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC8vIEFjdHVhbGl6YXIgcHJldmlldyBhcGxpY2FuZG8gcGFsZXRhIHNlbGVjY2lvbmFkYSBjb24gbWF0Y2hpbmcgTEFCXG4gICAgICAgICB1cGRhdGVQcmV2aWV3KHRydWUsIHBhbGV0dGUpO1xuXG4gICAgICAgICAvLyBTaSBubyBoYXkgb3BjaW9uZXMgZGlzcG9uaWJsZXMsIGluZm9ybWFyIGNsYXJhbWVudGUgZW4gbGEgVUlcbiAgICAgICAgIGlmICghcGFsZXR0ZSB8fCBwYWxldHRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgIHJlc2l6ZUVsZW1lbnRzLnByZXZpZXdJbmZvLnRleHRDb250ZW50ICs9ICcgfCBTaW4gY29sb3JlcyBzZWxlY2Npb25hZG9zOiBzZSBvY3VsdGFyXHUwMEUxbiBsb3MgcFx1MDBFRHhlbGVzIHNpbiBvcGNpXHUwMEYzbiBkaXNwb25pYmxlJztcbiAgICAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgICAgfVxuICAgICAgIH0pO1xuICAgICB9XG4gICAgXG4gICAgLy8gTW9zdHJhciBkaVx1MDBFMWxvZ29cbiAgICByZXNpemVFbGVtZW50cy5yZXNpemVXaW5kb3cuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICBcbiAgICAvLyBUcmFlciBsYSB2ZW50YW5hIGFsIGZyZW50ZVxuICAgIGJyaW5nV2luZG93VG9Gcm9udChyZXNpemVFbGVtZW50cy5yZXNpemVXaW5kb3cpO1xuXG4gICAgLy8gT2JzZXJ2YWRvciBwYXJhIGNhbWJpb3MgZGUgdGFtYVx1MDBGMW8gZGVsIGNvbnRlbmVkb3IgZGUgdmlzdGEgcHJldmlhXG4gICAgaWYgKHJlc2l6ZUVsZW1lbnRzLnByZXZpZXdSZXNpemVPYnNlcnZlcikge1xuICAgICAgdHJ5IHsgcmVzaXplRWxlbWVudHMucHJldmlld1Jlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTsgfSBjYXRjaCAoXykge31cbiAgICB9XG4gICAgaWYgKHdpbmRvdy5SZXNpemVPYnNlcnZlcikge1xuICAgICAgcmVzaXplRWxlbWVudHMucHJldmlld1Jlc2l6ZU9ic2VydmVyID0gbmV3IHdpbmRvdy5SZXNpemVPYnNlcnZlcigoKSA9PiB1cGRhdGVQcmV2aWV3KCkpO1xuICAgICAgaWYgKHJlc2l6ZUVsZW1lbnRzLnByZXZpZXdDb250YWluZXIpIHtcbiAgICAgICAgcmVzaXplRWxlbWVudHMucHJldmlld1Jlc2l6ZU9ic2VydmVyLm9ic2VydmUocmVzaXplRWxlbWVudHMucHJldmlld0NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZhbGxiYWNrOiBlc2N1Y2hhciByZXNpemUgZGUgdmVudGFuYVxuICAgICAgcmVzaXplRWxlbWVudHMub25XaW5kb3dSZXNpemUgPSAoKSA9PiB1cGRhdGVQcmV2aWV3KCk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplRWxlbWVudHMub25XaW5kb3dSZXNpemUsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgLy8gR2VuZXJhciB2aXN0YSBwcmV2aWEgaW5pY2lhbCAoc2kgaGF5IHNlbGVjY2lcdTAwRjNuIHByZXZpYSByZXNwZXRhcmxhKVxuICAvLyBQcmV2aWV3IGluaWNpYWw6IHVzYXIgcGFsZXRhIGluaWNpYWwgKHNpIG5vIGhheSBzZWxlY2NpXHUwMEYzbiwgc2UgdXNhIHBhbGV0YSBhY3RpdmEgcG9yIGRlZmVjdG8pXG4gIGNvbnN0IGluaXRpYWxJZHMgPSByZXNpemVFbGVtZW50cy5jb2xvclBhbGV0dGVTZWxlY3Rvcj8uZ2V0U2VsZWN0ZWRDb2xvcnM/LigpIHx8IFtdO1xuICBjb25zdCBzb3VyY2VDb2xvcnMgPSBpbWFnZVN0YXRlPy5hdmFpbGFibGVDb2xvcnMgfHwgW107XG4gIGNvbnN0IGJ5SWQgPSBuZXcgTWFwKHNvdXJjZUNvbG9ycy5tYXAoYyA9PiBbYy5pZCwgY10pKTtcbiAgY29uc3QgaW5pdGlhbFBhbGV0dGUgPSBpbml0aWFsSWRzLm1hcChpZCA9PiBieUlkLmdldChpZCkpLmZpbHRlcihCb29sZWFuKTtcbiAgdXBkYXRlUHJldmlldyh0cnVlLCBpbml0aWFsUGFsZXR0ZSk7XG4gICAgXG4gICAgbG9nKCdcdUQ4M0RcdURDQ0YgRGlcdTAwRTFsb2dvIGRlIHJlZGltZW5zaW9uYW1pZW50byBtb3N0cmFkbycpO1xuICB9XG5cbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgaGFjZXIgdW5hIHZlbnRhbmEgYXJyYXN0cmFibGVcbiAgZnVuY3Rpb24gbWFrZURyYWdnYWJsZShlbGVtZW50LCBoYW5kbGUpIHtcbiAgICBsZXQgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIGxldCBjdXJyZW50WDtcbiAgICBsZXQgY3VycmVudFk7XG4gICAgbGV0IGluaXRpYWxYO1xuICAgIGxldCBpbml0aWFsWTtcbiAgICBsZXQgeE9mZnNldCA9IDA7XG4gICAgbGV0IHlPZmZzZXQgPSAwO1xuXG4gICAgY29uc3QgaXNJbnRlcmFjdGl2ZSA9IChlbCkgPT4gISFlbC5jbG9zZXN0KCdidXR0b24sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhLCBsYWJlbCwgLmJ0bicpO1xuXG4gICAgaGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGRyYWdTdGFydCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZHJhZywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZHJhZ0VuZCk7XG5cbiAgICBmdW5jdGlvbiBkcmFnU3RhcnQoZSkge1xuICAgICAgLy8gU29sbyBpbmljaWFyIHNpIGVsIGNsaWNrIGZ1ZSBkZW50cm8gZGVsIGhhbmRsZSB5IG5vIGVuIHVuIGNvbnRyb2wgaW50ZXJhY3Rpdm9cbiAgICAgIGlmICghaGFuZGxlLmNvbnRhaW5zKGUudGFyZ2V0KSB8fCBpc0ludGVyYWN0aXZlKGUudGFyZ2V0KSkgcmV0dXJuO1xuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpbml0aWFsWCA9IGUuY2xpZW50WCAtIHhPZmZzZXQ7XG4gICAgICBpbml0aWFsWSA9IGUuY2xpZW50WSAtIHlPZmZzZXQ7XG4gICAgICBpc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgIC8vIEV2aXRhciBzZWxlY2NpXHUwMEYzbiBkZSB0ZXh0byBkdXJhbnRlIGVsIGFycmFzdHJlXG4gICAgICBlbGVtZW50LnN0eWxlLnVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhZyhlKSB7XG4gICAgICBpZiAoaXNEcmFnZ2luZykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGN1cnJlbnRYID0gZS5jbGllbnRYIC0gaW5pdGlhbFg7XG4gICAgICAgIGN1cnJlbnRZID0gZS5jbGllbnRZIC0gaW5pdGlhbFk7XG5cbiAgICAgICAgeE9mZnNldCA9IGN1cnJlbnRYO1xuICAgICAgICB5T2Zmc2V0ID0gY3VycmVudFk7XG5cbiAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gY3VycmVudFggKyAncHgnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IGN1cnJlbnRZICsgJ3B4JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmFnRW5kKCkge1xuICAgICAgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgLy8gUmVzdGF1cmFyIHNlbGVjY2lcdTAwRjNuIGRlIHRleHRvXG4gICAgICBlbGVtZW50LnN0eWxlLnVzZXJTZWxlY3QgPSAnJztcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudXNlclNlbGVjdCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIC8vIENlcnJhciBlbCBkaVx1MDBFMWxvZ28gZGUgcmVkaW1lbnNpb25hbWllbnRvXG4gIGZ1bmN0aW9uIGNsb3NlUmVzaXplRGlhbG9nKCkge1xuICAgIGlmICghcmVzaXplRWxlbWVudHMgfHwgIXJlc2l6ZUVsZW1lbnRzLnJlc2l6ZVdpbmRvdykge1xuICAgICAgbG9nKCdcdTI3NEMgRXJyb3I6IEVsZW1lbnRvcyBkZSByZWRpbWVuc2lvbmFtaWVudG8gbm8gZW5jb250cmFkb3MnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgcmVzaXplRWxlbWVudHMucmVzaXplV2luZG93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAvLyBEZXNyZWdpc3RyYXIgbGEgdmVudGFuYVxuICAgIHVucmVnaXN0ZXJXaW5kb3cocmVzaXplRWxlbWVudHMucmVzaXplV2luZG93KTtcblxuICAgIC8vIExpbXBpYXIgb2JzZXJ2ZXJzL2xpc3RlbmVyc1xuICAgIGlmIChyZXNpemVFbGVtZW50cy5wcmV2aWV3UmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgIHRyeSB7IHJlc2l6ZUVsZW1lbnRzLnByZXZpZXdSZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7IH0gY2F0Y2ggKF8pIHt9XG4gICAgICByZXNpemVFbGVtZW50cy5wcmV2aWV3UmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAocmVzaXplRWxlbWVudHMub25XaW5kb3dSZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVFbGVtZW50cy5vbldpbmRvd1Jlc2l6ZSk7XG4gICAgICByZXNpemVFbGVtZW50cy5vbldpbmRvd1Jlc2l6ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgbG9nKCdcdUQ4M0RcdURDQ0YgRGlcdTAwRTFsb2dvIGRlIHJlZGltZW5zaW9uYW1pZW50byBjZXJyYWRvJyk7XG4gIH1cblxuICAvLyBJbmljaWFsaXphciBlbCBkaVx1MDBFMWxvZ29cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZShjb250YWluZXIpIHtcbiAgICBjcmVhdGVSZXNpemVFbGVtZW50cyhjb250YWluZXIpO1xuICAgIGxvZygnXHUyNzA1IFZlbnRhbmEgZGUgcmVkaW1lbnNpb25hbWllbnRvIGluaWNpYWxpemFkYScpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpbml0aWFsaXplLFxuICAgIHNob3dSZXNpemVEaWFsb2csXG4gICAgY2xvc2VSZXNpemVEaWFsb2dcbiAgfTtcbn0iLCAiaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2NvcmUvbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyBDT0xPUl9NQVAgfSBmcm9tIFwiLi9wYWxldHRlLmpzXCI7XG5cbi8qKlxuICogQ3JlYSB1biBzZWxlY3RvciBkZSBwYWxldGEgZGUgY29sb3JlcyBwYXJhIGVsIHJlc2l6ZSBkaWFsb2dcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbG9yUGFsZXR0ZVNlbGVjdG9yKGNvbnRhaW5lciwgYXZhaWxhYmxlQ29sb3JzID0gW10pIHtcbiAgbG9nKCdcdUQ4M0NcdURGQTggQ3JlYW5kbyBzZWxlY3RvciBkZSBwYWxldGEgZGUgY29sb3JlcycpO1xuICBcbiAgLy8gQ3JlYXIgbGEgc2VjY2lcdTAwRjNuIGRlIHBhbGV0YSBkZSBjb2xvcmVzXG4gIGNvbnN0IHBhbGV0dGVTZWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHBhbGV0dGVTZWN0aW9uLmNsYXNzTmFtZSA9ICd3cGxhY2Utc2VjdGlvbic7XG4gIHBhbGV0dGVTZWN0aW9uLmlkID0gJ2NvbG9yLXBhbGV0dGUtc2VjdGlvbic7XG4gIHBhbGV0dGVTZWN0aW9uLnN0eWxlLm1hcmdpblRvcCA9ICcxNXB4JztcbiAgcGFsZXR0ZVNlY3Rpb24uaW5uZXJIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJ3cGxhY2Utc2VjdGlvbi10aXRsZVwiPlxuICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcGFsZXR0ZVwiPjwvaT4mbmJzcDtDb2xvciBQYWxldHRlXG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIndwbGFjZS1jb250cm9sc1wiPlxuICAgICAgPGRpdiBjbGFzcz1cIndwbGFjZS1yb3cgc2luZ2xlXCI+XG4gICAgICAgIDxsYWJlbCBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGdhcDogOHB4OyBmb250LXNpemU6IDEycHg7XCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwic2hvd0FsbENvbG9yc1RvZ2dsZVwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPlxuICAgICAgICAgIDxzcGFuPlNob3cgQWxsIENvbG9ycyAoaW5jbHVkaW5nIHVuYXZhaWxhYmxlKTwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIndwbGFjZS1yb3dcIj5cbiAgICAgICAgPGJ1dHRvbiBpZD1cInNlbGVjdEFsbEJ0blwiIGNsYXNzPVwid3BsYWNlLWJ0blwiPlNlbGVjdCBBbGw8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBpZD1cInVuc2VsZWN0QWxsQnRuXCIgY2xhc3M9XCJ3cGxhY2UtYnRuXCI+VW5zZWxlY3QgQWxsPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgaWQ9XCJjb2xvcnMtY29udGFpbmVyXCIgY2xhc3M9XCJ3cGxhY2UtY29sb3ItZ3JpZFwiPjwvZGl2PlxuICAgIDwvZGl2PlxuICBgO1xuICBcbiAgLy8gQVx1MDBGMWFkaXIgZXN0aWxvcyBlc3BlY1x1MDBFRGZpY29zIHBhcmEgbGEgcGFsZXRhICh1c2FuZG8gbG9zIG1pc21vcyBlc3RpbG9zIGRlbCBib3QgZWplbXBsbylcbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50ZXh0Q29udGVudCA9IGBcbiAgICAud3BsYWNlLXNlY3Rpb24ge1xuICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjA1KTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMSk7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2Utc2VjdGlvbi10aXRsZSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgY29sb3I6ICM2MGE1ZmE7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2UtY29udHJvbHMge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICBnYXA6IDEwcHg7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2Utcm93IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBnYXA6IDEwcHg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICBcbiAgICAud3BsYWNlLXJvdy5zaW5nbGUge1xuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgIH1cbiAgICBcbiAgICAud3BsYWNlLWJ0biB7XG4gICAgICBiYWNrZ3JvdW5kOiAjNjBhNWZhO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgcGFkZGluZzogNnB4IDEycHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2UtYnRuOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQ6ICM0ZmFjZmU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2UtY29sb3ItZ3JpZCB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoOCwgMWZyKTtcbiAgICAgIGdhcDogOHB4O1xuICAgICAgcGFkZGluZzogMTJweDtcbiAgICAgIG1heC1oZWlnaHQ6IDMwMHB4O1xuICAgICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcbiAgICB9XG4gICAgXG4gICAgLndwbGFjZS1jb2xvci1pdGVtIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGdhcDogNnB4O1xuICAgICAgbWluLXdpZHRoOiAwO1xuICAgIH1cbiAgICBcbiAgICAud3BsYWNlLWNvbG9yLWl0ZW0tbmFtZSB7XG4gICAgICBmb250LXNpemU6IDlweDtcbiAgICAgIGNvbG9yOiAjY2NjO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgICB9XG4gICAgXG4gICAgLndwbGFjZS1jb2xvci1zd2F0Y2gge1xuICAgICAgd2lkdGg6IDMycHg7XG4gICAgICBoZWlnaHQ6IDMycHg7XG4gICAgICBib3JkZXI6IDJweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMyk7XG4gICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2UtY29sb3Itc3dhdGNoLnVuYXZhaWxhYmxlIHtcbiAgICAgIGJvcmRlci1jb2xvcjogIzY2NjtcbiAgICAgIGJvcmRlci1zdHlsZTogZGFzaGVkO1xuICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgICAgIG9wYWNpdHk6IDAuNDtcbiAgICAgIGZpbHRlcjogZ3JheXNjYWxlKDcwJSk7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2UtY29sb3Itc3dhdGNoOmhvdmVyOm5vdCgudW5hdmFpbGFibGUpIHtcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNSk7XG4gICAgICBib3JkZXItY29sb3I6ICM2MGE1ZmE7XG4gICAgICBib3gtc2hhZG93OiAwIDAgOHB4IHJnYmEoOTYsIDE2NSwgMjUwLCAwLjMpO1xuICAgICAgei1pbmRleDogMTtcbiAgICB9XG4gICAgXG4gICAgLndwbGFjZS1jb2xvci1zd2F0Y2g6bm90KC5hY3RpdmUpOm5vdCgudW5hdmFpbGFibGUpIHtcbiAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICAgIGZpbHRlcjogZ3JheXNjYWxlKDYwJSk7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2UtY29sb3Itc3dhdGNoLnVuYXZhaWxhYmxlOm5vdCguYWN0aXZlKSB7XG4gICAgICBvcGFjaXR5OiAwLjM7XG4gICAgICBmaWx0ZXI6IGdyYXlzY2FsZSg4MCUpO1xuICAgIH1cbiAgICBcbiAgICAud3BsYWNlLWNvbG9yLXN3YXRjaC5hY3RpdmUge1xuICAgICAgYm9yZGVyLWNvbG9yOiAjMTBiOTgxO1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIGZpbHRlcjogbm9uZTtcbiAgICAgIGJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgxNiwgMTg1LCAxMjksIDAuNCk7XG4gICAgfVxuICAgIFxuICAgIC53cGxhY2UtY29sb3Itc3dhdGNoLmFjdGl2ZTo6YWZ0ZXIge1xuICAgICAgY29udGVudDogJ1x1MjcxMyc7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDUwJTtcbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICB0ZXh0LXNoYWRvdzogXG4gICAgICAgIC0xcHggLTFweCAwICMwMDAsXG4gICAgICAgIDFweCAtMXB4IDAgIzAwMCxcbiAgICAgICAgLTFweCAxcHggMCAjMDAwLFxuICAgICAgICAxcHggMXB4IDAgIzAwMCxcbiAgICAgICAgMCAwIDNweCByZ2JhKDAsMCwwLDAuOCk7XG4gICAgICB6LWluZGV4OiAyO1xuICAgIH1cbiAgICBcbiAgICAud3BsYWNlLWNvbG9yLWl0ZW0udW5hdmFpbGFibGUgLndwbGFjZS1jb2xvci1pdGVtLW5hbWUge1xuICAgICAgY29sb3I6ICM4ODg7XG4gICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgfVxuICBgO1xuICBcbiAgLy8gQVx1MDBGMWFkaXIgZXN0aWxvcyBkZW50cm8gZGVsIFNoYWRvdyBET00gc2kgZXhpc3RlIChwYXJhIHF1ZSBhcGxpcXVlbiBlbiBlbCBtb2RhbClcbiAgY29uc3Qgcm9vdE5vZGUgPSBjb250YWluZXIuZ2V0Um9vdE5vZGUgJiYgY29udGFpbmVyLmdldFJvb3ROb2RlKCk7XG4gIGNvbnN0IGlzU2hhZG93Um9vdCA9IHJvb3ROb2RlICYmIHJvb3ROb2RlLm5vZGVUeXBlID09PSAxMSAmJiByb290Tm9kZS5ob3N0OyAvLyAxMSA9IERPQ1VNRU5UX0ZSQUdNRU5UX05PREVcbiAgaWYgKGlzU2hhZG93Um9vdCkge1xuICAgIGlmICghcm9vdE5vZGUucXVlcnlTZWxlY3RvcignI2NvbG9yLXBhbGV0dGUtc3R5bGVzJykpIHtcbiAgICAgIHN0eWxlLmlkID0gJ2NvbG9yLXBhbGV0dGUtc3R5bGVzJztcbiAgICAgIHJvb3ROb2RlLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoJyNjb2xvci1wYWxldHRlLXN0eWxlcycpKSB7XG4gICAgICBzdHlsZS5pZCA9ICdjb2xvci1wYWxldHRlLXN0eWxlcyc7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH1cbiAgXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChwYWxldHRlU2VjdGlvbik7XG4gIFxuICAvLyBSZWZlcmVuY2lhcyBhIGVsZW1lbnRvc1xuICBjb25zdCBlbGVtZW50cyA9IHtcbiAgICBzaG93QWxsVG9nZ2xlOiBwYWxldHRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcjc2hvd0FsbENvbG9yc1RvZ2dsZScpLFxuICAgIHNlbGVjdEFsbEJ0bjogcGFsZXR0ZVNlY3Rpb24ucXVlcnlTZWxlY3RvcignI3NlbGVjdEFsbEJ0bicpLFxuICAgIHVuc2VsZWN0QWxsQnRuOiBwYWxldHRlU2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcjdW5zZWxlY3RBbGxCdG4nKSxcbiAgICBjb2xvcnNDb250YWluZXI6IHBhbGV0dGVTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJyNjb2xvcnMtY29udGFpbmVyJylcbiAgfTtcbiAgXG4gIC8vIEVzdGFkb1xuICBsZXQgc2VsZWN0ZWRDb2xvcnMgPSBuZXcgU2V0KCk7XG4gIGxldCBzaG93VW5hdmFpbGFibGUgPSBmYWxzZTtcbiAgbGV0IGNoYW5nZUNhbGxiYWNrID0gbnVsbDtcbiAgXG4gIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIGFjdHVhbGl6YXIgbGEgcGFsZXRhIGFjdGl2YVxuICBmdW5jdGlvbiB1cGRhdGVBY3RpdmVDb2xvclBhbGV0dGUoKSB7XG4gICAgc2VsZWN0ZWRDb2xvcnMuY2xlYXIoKTtcbiAgICBjb25zdCBhY3RpdmVTd2F0Y2hlcyA9IGVsZW1lbnRzLmNvbG9yc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcud3BsYWNlLWNvbG9yLXN3YXRjaC5hY3RpdmUnKTtcbiAgICBhY3RpdmVTd2F0Y2hlcy5mb3JFYWNoKHN3YXRjaCA9PiB7XG4gICAgICBjb25zdCBjb2xvcklkID0gcGFyc2VJbnQoc3dhdGNoLmRhdGFzZXQuY29sb3JJZCk7XG4gICAgICBpZiAoIWlzTmFOKGNvbG9ySWQpKSB7XG4gICAgICAgIHNlbGVjdGVkQ29sb3JzLmFkZChjb2xvcklkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBpZiAoY2hhbmdlQ2FsbGJhY2spIHtcbiAgICAgIGNoYW5nZUNhbGxiYWNrKEFycmF5LmZyb20oc2VsZWN0ZWRDb2xvcnMpKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIGFsdGVybmFyIHRvZG9zIGxvcyBjb2xvcmVzXG4gIGZ1bmN0aW9uIHRvZ2dsZUFsbENvbG9ycyhzZWxlY3QsIHNob3dpbmdVbmF2YWlsYWJsZSA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3dhdGNoZXMgPSBlbGVtZW50cy5jb2xvcnNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLndwbGFjZS1jb2xvci1zd2F0Y2gnKTtcbiAgICBzd2F0Y2hlcy5mb3JFYWNoKHN3YXRjaCA9PiB7XG4gICAgICBjb25zdCBpc1VuYXZhaWxhYmxlID0gc3dhdGNoLmNsYXNzTGlzdC5jb250YWlucygndW5hdmFpbGFibGUnKTtcbiAgICAgIGNvbnN0IGNvbG9ySWQgPSBwYXJzZUludChzd2F0Y2guZGF0YXNldC5jb2xvcklkKTtcbiAgICAgIFxuICAgICAgaWYgKCFpc1VuYXZhaWxhYmxlIHx8IHNob3dpbmdVbmF2YWlsYWJsZSkge1xuICAgICAgICBpZiAoIWlzVW5hdmFpbGFibGUpIHtcbiAgICAgICAgICBzd2F0Y2guY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJywgc2VsZWN0KTtcbiAgICAgICAgICBpZiAoc2VsZWN0KSB7XG4gICAgICAgICAgICBzZWxlY3RlZENvbG9ycy5hZGQoY29sb3JJZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdGVkQ29sb3JzLmRlbGV0ZShjb2xvcklkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVBY3RpdmVDb2xvclBhbGV0dGUoKTtcbiAgICBcbiAgICBsb2coYFx1RDgzQ1x1REZBOCAke3NlbGVjdCA/ICdTZWxlY2Npb25hZG9zJyA6ICdEZXNlbGVjY2lvbmFkb3MnfSB0b2RvcyBsb3MgY29sb3JlcyBkaXNwb25pYmxlc2ApO1xuICB9XG4gIFxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSBwb2JsYXIgbG9zIGNvbG9yZXNcbiAgZnVuY3Rpb24gcG9wdWxhdGVDb2xvcnMoc2hvd1VuYXZhaWxhYmxlID0gZmFsc2UpIHtcbiAgICBlbGVtZW50cy5jb2xvcnNDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgXG4gICAgaWYgKCFhdmFpbGFibGVDb2xvcnMgfHwgYXZhaWxhYmxlQ29sb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZWxlbWVudHMuY29sb3JzQ29udGFpbmVyLmlubmVySFRNTCA9ICc8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyOyBjb2xvcjogIzg4ODsgcGFkZGluZzogMjBweDtcIj5VcGxvYWQgYW4gaW1hZ2UgZmlyc3QgdG8gY2FwdHVyZSBhdmFpbGFibGUgY29sb3JzPC9kaXY+JztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgbGV0IF9hdmFpbGFibGVDb3VudCA9IDA7XG4gICAgbGV0IF90b3RhbENvdW50ID0gMDtcblxuICAgIC8vIERldGVybWluYXIgc2kgeWEgZXhpc3RlIHVuYSBzZWxlY2NpXHUwMEYzbiBwcmV2aWEgKG5vIGRlYmUgY2FtYmlhciBkdXJhbnRlIGVsIHJlbmRlcilcbiAgICBjb25zdCBoYXNFeGlzdGluZ1NlbGVjdGlvbiA9IHNlbGVjdGVkQ29sb3JzLnNpemUgPiAwO1xuICAgIGNvbnN0IG5leHRTZWxlY3RlZCA9IG5ldyBTZXQoKTtcbiAgICBcbiAgICAvLyBDb252ZXJ0aXIgQ09MT1JfTUFQIGEgYXJyYXkgeSBmaWx0cmFyIHRyYW5zcGFyZW50ZVxuICAgIGNvbnN0IGFsbENvbG9ycyA9IE9iamVjdC52YWx1ZXMoQ09MT1JfTUFQKS5maWx0ZXIoY29sb3IgPT4gY29sb3IucmdiICE9PSBudWxsKTtcbiAgICBcbiAgICBhbGxDb2xvcnMuZm9yRWFjaChjb2xvckRhdGEgPT4ge1xuICAgICAgY29uc3QgeyBpZCwgbmFtZSwgcmdiIH0gPSBjb2xvckRhdGE7XG4gICAgICBjb25zdCByZ2JLZXkgPSBgJHtyZ2Iucn0sJHtyZ2IuZ30sJHtyZ2IuYn1gO1xuICAgICAgX3RvdGFsQ291bnQrKztcbiAgICAgIFxuICAgICAgLy8gVmVyaWZpY2FyIHNpIGVzdGUgY29sb3IgZXN0XHUwMEUxIGRpc3BvbmlibGUgZW4gbG9zIGNvbG9yZXMgY2FwdHVyYWRvc1xuICAgICAgY29uc3QgaXNBdmFpbGFibGUgPSBhdmFpbGFibGVDb2xvcnMuc29tZShjID0+XG4gICAgICAgIGMuciA9PT0gcmdiLnIgJiYgYy5nID09PSByZ2IuZyAmJiBjLmIgPT09IHJnYi5iXG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBTaSBubyBzZSBtdWVzdHJhbiB0b2RvcyBsb3MgY29sb3JlcyB5IGVzdGUgY29sb3Igbm8gZXN0XHUwMEUxIGRpc3BvbmlibGUsIHNhbHRhcmxvXG4gICAgICBpZiAoIXNob3dVbmF2YWlsYWJsZSAmJiAhaXNBdmFpbGFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAoaXNBdmFpbGFibGUpIF9hdmFpbGFibGVDb3VudCsrO1xuICAgICAgXG4gICAgICBjb25zdCBjb2xvckl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbG9ySXRlbS5jbGFzc05hbWUgPSAnd3BsYWNlLWNvbG9yLWl0ZW0nO1xuICAgICAgXG4gICAgICBjb25zdCBzd2F0Y2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIHN3YXRjaC5jbGFzc05hbWUgPSBgd3BsYWNlLWNvbG9yLXN3YXRjaCAkeyFpc0F2YWlsYWJsZSA/ICd1bmF2YWlsYWJsZScgOiAnJ31gO1xuICAgICAgc3dhdGNoLnRpdGxlID0gYCR7bmFtZX0gKElEOiAke2lkfSkkeyFpc0F2YWlsYWJsZSA/ICcgKFVuYXZhaWxhYmxlKScgOiAnJ31gO1xuICAgICAgc3dhdGNoLmRhdGFzZXQucmdiID0gcmdiS2V5O1xuICAgICAgc3dhdGNoLmRhdGFzZXQuY29sb3JJZCA9IGlkO1xuICAgICAgc3dhdGNoLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGByZ2IoJHtyZ2Iucn0sICR7cmdiLmd9LCAke3JnYi5ifSlgO1xuICAgICAgXG4gICAgICAvLyBNYXJjYXIgY29sb3JlcyBubyBkaXNwb25pYmxlcyB5IGNhbGN1bGFyIGVzdGFkbyBhY3Rpdm9cbiAgICAgIGlmICghaXNBdmFpbGFibGUpIHtcbiAgICAgICAgc3dhdGNoLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFNlbGVjY2lcdTAwRjNuIGluaWNpYWwgZXN0YWJsZTogc2kgbm8gaGF5IHNlbGVjY2lcdTAwRjNuIHByZXZpYSwgYWN0aXZhciB0b2RvcyBsb3MgZGlzcG9uaWJsZXM7IHNpIHlhIGhheSwgcmVzcGV0YXIgc2VsZWNjaVx1MDBGM24gcHJldmlhXG4gICAgICBjb25zdCBzaG91bGRCZUFjdGl2ZSA9IGhhc0V4aXN0aW5nU2VsZWN0aW9uID8gc2VsZWN0ZWRDb2xvcnMuaGFzKGlkKSA6IGlzQXZhaWxhYmxlO1xuICAgICAgc3dhdGNoLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScsIHNob3VsZEJlQWN0aXZlKTtcblxuICAgICAgaWYgKHNob3VsZEJlQWN0aXZlKSB7XG4gICAgICAgIG5leHRTZWxlY3RlZC5hZGQoaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dFNlbGVjdGVkLmRlbGV0ZShpZCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IG5hbWVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIG5hbWVMYWJlbC5jbGFzc05hbWUgPSAnd3BsYWNlLWNvbG9yLWl0ZW0tbmFtZSc7XG4gICAgICBuYW1lTGFiZWwudGV4dENvbnRlbnQgPSBuYW1lICsgKCFpc0F2YWlsYWJsZSA/ICcgKE4vQSknIDogJycpO1xuICAgICAgaWYgKCFpc0F2YWlsYWJsZSkge1xuICAgICAgICBuYW1lTGFiZWwuc3R5bGUuY29sb3IgPSAnIzg4OCc7XG4gICAgICAgIG5hbWVMYWJlbC5zdHlsZS5mb250U3R5bGUgPSAnaXRhbGljJztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU29sbyBhXHUwMEYxYWRpciBjbGljayBsaXN0ZW5lciBwYXJhIGNvbG9yZXMgZGlzcG9uaWJsZXNcbiAgICAgIGlmIChpc0F2YWlsYWJsZSkge1xuICAgICAgICBzd2F0Y2guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHdhc0FjdGl2ZSA9IHN3YXRjaC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpO1xuICAgICAgICAgIHN3YXRjaC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCAhd2FzQWN0aXZlKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAod2FzQWN0aXZlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZENvbG9ycy5kZWxldGUoaWQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3RlZENvbG9ycy5hZGQoaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICB1cGRhdGVBY3RpdmVDb2xvclBhbGV0dGUoKTtcbiAgICAgICAgICBcbiAgICAgICAgICBsb2coYFx1RDgzQ1x1REZBOCBDb2xvciAke25hbWV9IChJRDogJHtpZH0pICR7d2FzQWN0aXZlID8gJ2Rlc2VsZWNjaW9uYWRvJyA6ICdzZWxlY2Npb25hZG8nfWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29sb3JJdGVtLmFwcGVuZENoaWxkKHN3YXRjaCk7XG4gICAgICBjb2xvckl0ZW0uYXBwZW5kQ2hpbGQobmFtZUxhYmVsKTtcbiAgICAgIGVsZW1lbnRzLmNvbG9yc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjb2xvckl0ZW0pO1xuICAgIH0pO1xuXG4gICAgLy8gQWN0dWFsaXphciBlbCBzZXQgc2VsZWNjaW9uYWRvIGNvbiBsYSBzZWxlY2NpXHUwMEYzbiBjYWxjdWxhZGEgZHVyYW50ZSBlbCByZW5kZXJcbiAgICBzZWxlY3RlZENvbG9ycyA9IG5leHRTZWxlY3RlZDtcbiAgICBcbiAgICAvLyBTaW5jcm9uaXphciBlc3RhZG8gdmlzdWFsIGRlc3B1XHUwMEU5cyBkZSByZW5kZXJpemFyXG4gICAgY29uc3Qgc3dhdGNoZXMgPSBlbGVtZW50cy5jb2xvcnNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLndwbGFjZS1jb2xvci1zd2F0Y2gnKTtcbiAgICBzd2F0Y2hlcy5mb3JFYWNoKHN3YXRjaCA9PiB7XG4gICAgICBjb25zdCBjb2xvcklkID0gcGFyc2VJbnQoc3dhdGNoLmRhdGFzZXQuY29sb3JJZCk7XG4gICAgICBjb25zdCBzaG91bGRCZUFjdGl2ZSA9IHNlbGVjdGVkQ29sb3JzLmhhcyhjb2xvcklkKTtcbiAgICAgIHN3YXRjaC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCBzaG91bGRCZUFjdGl2ZSk7XG4gICAgfSk7XG4gICAgXG4gICAgdXBkYXRlQWN0aXZlQ29sb3JQYWxldHRlKCk7XG4gIH1cbiAgXG4gIC8vIEV2ZW50IGxpc3RlbmVyc1xuICBlbGVtZW50cy5zaG93QWxsVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgc2hvd1VuYXZhaWxhYmxlID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgICBwb3B1bGF0ZUNvbG9ycyhzaG93VW5hdmFpbGFibGUpO1xuICB9KTtcbiAgXG4gIGVsZW1lbnRzLnNlbGVjdEFsbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICB0b2dnbGVBbGxDb2xvcnModHJ1ZSwgc2hvd1VuYXZhaWxhYmxlKTtcbiAgfSk7XG4gIFxuICBlbGVtZW50cy51bnNlbGVjdEFsbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICB0b2dnbGVBbGxDb2xvcnMoZmFsc2UsIHNob3dVbmF2YWlsYWJsZSk7XG4gIH0pO1xuICBcbiAgLy8gSW5pY2lhbGl6YXIgY29uIHNvbG8gY29sb3JlcyBkaXNwb25pYmxlc1xuICBwb3B1bGF0ZUNvbG9ycyhmYWxzZSk7XG4gIFxuICBmdW5jdGlvbiB1cGRhdGVBdmFpbGFibGVDb2xvcnMobmV3QXZhaWxhYmxlQ29sb3JzKSB7XG4gICAgYXZhaWxhYmxlQ29sb3JzID0gbmV3QXZhaWxhYmxlQ29sb3JzIHx8IFtdO1xuICAgIHBvcHVsYXRlQ29sb3JzKHNob3dVbmF2YWlsYWJsZSk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGdldFNlbGVjdGVkQ29sb3JzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHNlbGVjdGVkQ29sb3JzKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gc2V0U2VsZWN0ZWRDb2xvcnMoY29sb3JJZHMpIHtcbiAgICBzZWxlY3RlZENvbG9ycyA9IG5ldyBTZXQoY29sb3JJZHMgfHwgW10pO1xuICAgIFxuICAgIC8vIFNpbmNyb25pemFyIGVzdGFkbyB2aXN1YWwgY29uIHNlbGVjY2lcdTAwRjNuXG4gICAgY29uc3Qgc3dhdGNoZXMgPSBlbGVtZW50cy5jb2xvcnNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLndwbGFjZS1jb2xvci1zd2F0Y2gnKTtcbiAgICBzd2F0Y2hlcy5mb3JFYWNoKHN3YXRjaCA9PiB7XG4gICAgICBjb25zdCBjb2xvcklkID0gcGFyc2VJbnQoc3dhdGNoLmRhdGFzZXQuY29sb3JJZCk7XG4gICAgICBjb25zdCBzaG91bGRCZUFjdGl2ZSA9IHNlbGVjdGVkQ29sb3JzLmhhcyhjb2xvcklkKTtcbiAgICAgIHN3YXRjaC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCBzaG91bGRCZUFjdGl2ZSk7XG4gICAgfSk7XG4gICAgXG4gICAgaWYgKGNoYW5nZUNhbGxiYWNrKSB7XG4gICAgICBjaGFuZ2VDYWxsYmFjayhBcnJheS5mcm9tKHNlbGVjdGVkQ29sb3JzKSk7XG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBvblNlbGVjdGlvbkNoYW5nZShjYWxsYmFjaykge1xuICAgIGNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cbiAgXG4gIGxvZygnXHUyNzA1IFNlbGVjdG9yIGRlIHBhbGV0YSBkZSBjb2xvcmVzIGNyZWFkbycpO1xuICBcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVBdmFpbGFibGVDb2xvcnMsXG4gICAgZ2V0U2VsZWN0ZWRDb2xvcnMsXG4gICAgc2V0U2VsZWN0ZWRDb2xvcnMsXG4gICAgb25TZWxlY3Rpb25DaGFuZ2UsXG4gICAgZWxlbWVudDogcGFsZXR0ZVNlY3Rpb25cbiAgfTtcbn1cbiIsICIvLyBDb2xvciBtYXAgd2l0aCBwcm9wZXIgbmFtZXMgYW5kIElEc1xuZXhwb3J0IGNvbnN0IENPTE9SX01BUCA9IHtcbiAgMDogeyBpZDogMSwgbmFtZTogJ0JsYWNrJywgcmdiOiB7IHI6IDAsIGc6IDAsIGI6IDAgfSB9LFxuICAxOiB7IGlkOiAyLCBuYW1lOiAnRGFyayBHcmF5JywgcmdiOiB7IHI6IDYwLCBnOiA2MCwgYjogNjAgfSB9LFxuICAyOiB7IGlkOiAzLCBuYW1lOiAnR3JheScsIHJnYjogeyByOiAxMjAsIGc6IDEyMCwgYjogMTIwIH0gfSxcbiAgMzogeyBpZDogNCwgbmFtZTogJ0xpZ2h0IEdyYXknLCByZ2I6IHsgcjogMjEwLCBnOiAyMTAsIGI6IDIxMCB9IH0sXG4gIDQ6IHsgaWQ6IDUsIG5hbWU6ICdXaGl0ZScsIHJnYjogeyByOiAyNTUsIGc6IDI1NSwgYjogMjU1IH0gfSxcbiAgNTogeyBpZDogNiwgbmFtZTogJ0RlZXAgUmVkJywgcmdiOiB7IHI6IDk2LCBnOiAwLCBiOiAyNCB9IH0sXG4gIDY6IHsgaWQ6IDcsIG5hbWU6ICdSZWQnLCByZ2I6IHsgcjogMjM3LCBnOiAyOCwgYjogMzYgfSB9LFxuICA3OiB7IGlkOiA4LCBuYW1lOiAnT3JhbmdlJywgcmdiOiB7IHI6IDI1NSwgZzogMTI3LCBiOiAzOSB9IH0sXG4gIDg6IHsgaWQ6IDksIG5hbWU6ICdHb2xkJywgcmdiOiB7IHI6IDI0NiwgZzogMTcwLCBiOiA5IH0gfSxcbiAgOTogeyBpZDogMTAsIG5hbWU6ICdZZWxsb3cnLCByZ2I6IHsgcjogMjQ5LCBnOiAyMjEsIGI6IDU5IH0gfSxcbiAgMTA6IHsgaWQ6IDExLCBuYW1lOiAnTGlnaHQgWWVsbG93JywgcmdiOiB7IHI6IDI1NSwgZzogMjUwLCBiOiAxODggfSB9LFxuICAxMTogeyBpZDogMTIsIG5hbWU6ICdEYXJrIEdyZWVuJywgcmdiOiB7IHI6IDE0LCBnOiAxODUsIGI6IDEwNCB9IH0sXG4gIDEyOiB7IGlkOiAxMywgbmFtZTogJ0dyZWVuJywgcmdiOiB7IHI6IDE5LCBnOiAyMzAsIGI6IDEyMyB9IH0sXG4gIDEzOiB7IGlkOiAxNCwgbmFtZTogJ0xpZ2h0IEdyZWVuJywgcmdiOiB7IHI6IDEzNSwgZzogMjU1LCBiOiA5NCB9IH0sXG4gIDE0OiB7IGlkOiAxNSwgbmFtZTogJ0RhcmsgVGVhbCcsIHJnYjogeyByOiAxMiwgZzogMTI5LCBiOiAxMTAgfSB9LFxuICAxNTogeyBpZDogMTYsIG5hbWU6ICdUZWFsJywgcmdiOiB7IHI6IDE2LCBnOiAxNzQsIGI6IDE2NiB9IH0sXG4gIDE2OiB7IGlkOiAxNywgbmFtZTogJ0xpZ2h0IFRlYWwnLCByZ2I6IHsgcjogMTksIGc6IDIyNSwgYjogMTkwIH0gfSxcbiAgMTc6IHsgaWQ6IDIwLCBuYW1lOiAnQ3lhbicsIHJnYjogeyByOiA5NiwgZzogMjQ3LCBiOiAyNDIgfSB9LFxuICAxODogeyBpZDogNDQsIG5hbWU6ICdMaWdodCBDeWFuJywgcmdiOiB7IHI6IDE4NywgZzogMjUwLCBiOiAyNDIgfSB9LFxuICAxOTogeyBpZDogMTgsIG5hbWU6ICdEYXJrIEJsdWUnLCByZ2I6IHsgcjogNDAsIGc6IDgwLCBiOiAxNTggfSB9LFxuICAyMDogeyBpZDogMTksIG5hbWU6ICdCbHVlJywgcmdiOiB7IHI6IDY0LCBnOiAxNDcsIGI6IDIyOCB9IH0sXG4gIDIxOiB7IGlkOiAyMSwgbmFtZTogJ0luZGlnbycsIHJnYjogeyByOiAxMDcsIGc6IDgwLCBiOiAyNDYgfSB9LFxuICAyMjogeyBpZDogMjIsIG5hbWU6ICdMaWdodCBJbmRpZ28nLCByZ2I6IHsgcjogMTUzLCBnOiAxNzcsIGI6IDI1MSB9IH0sXG4gIDIzOiB7IGlkOiAyMywgbmFtZTogJ0RhcmsgUHVycGxlJywgcmdiOiB7IHI6IDEyMCwgZzogMTIsIGI6IDE1MyB9IH0sXG4gIDI0OiB7IGlkOiAyNCwgbmFtZTogJ1B1cnBsZScsIHJnYjogeyByOiAxNzAsIGc6IDU2LCBiOiAxODUgfSB9LFxuICAyNTogeyBpZDogMjUsIG5hbWU6ICdMaWdodCBQdXJwbGUnLCByZ2I6IHsgcjogMjI0LCBnOiAxNTksIGI6IDI0OSB9IH0sXG4gIDI2OiB7IGlkOiAyNiwgbmFtZTogJ0RhcmsgUGluaycsIHJnYjogeyByOiAyMDMsIGc6IDAsIGI6IDEyMiB9IH0sXG4gIDI3OiB7IGlkOiAyNywgbmFtZTogJ1BpbmsnLCByZ2I6IHsgcjogMjM2LCBnOiAzMSwgYjogMTI4IH0gfSxcbiAgMjg6IHsgaWQ6IDI4LCBuYW1lOiAnTGlnaHQgUGluaycsIHJnYjogeyByOiAyNDMsIGc6IDE0MSwgYjogMTY5IH0gfSxcbiAgMjk6IHsgaWQ6IDI5LCBuYW1lOiAnRGFyayBCcm93bicsIHJnYjogeyByOiAxMDQsIGc6IDcwLCBiOiA1MiB9IH0sXG4gIDMwOiB7IGlkOiAzMCwgbmFtZTogJ0Jyb3duJywgcmdiOiB7IHI6IDE0OSwgZzogMTA0LCBiOiA0MiB9IH0sXG4gIDMxOiB7IGlkOiAzMSwgbmFtZTogJ0JlaWdlJywgcmdiOiB7IHI6IDI0OCwgZzogMTc4LCBiOiAxMTkgfSB9LFxuICAzMjogeyBpZDogNTIsIG5hbWU6ICdMaWdodCBCZWlnZScsIHJnYjogeyByOiAyNTUsIGc6IDE5NywgYjogMTY1IH0gfSxcbiAgMzM6IHsgaWQ6IDMyLCBuYW1lOiAnTWVkaXVtIEdyYXknLCByZ2I6IHsgcjogMTcwLCBnOiAxNzAsIGI6IDE3MCB9IH0sXG4gIDM0OiB7IGlkOiAzMywgbmFtZTogJ0RhcmsgUmVkJywgcmdiOiB7IHI6IDE2NSwgZzogMTQsIGI6IDMwIH0gfSxcbiAgMzU6IHsgaWQ6IDM0LCBuYW1lOiAnTGlnaHQgUmVkJywgcmdiOiB7IHI6IDI1MCwgZzogMTI4LCBiOiAxMTQgfSB9LFxuICAzNjogeyBpZDogMzUsIG5hbWU6ICdEYXJrIE9yYW5nZScsIHJnYjogeyByOiAyMjgsIGc6IDkyLCBiOiAyNiB9IH0sXG4gIDM3OiB7IGlkOiAzNywgbmFtZTogJ0RhcmsgR29sZGVucm9kJywgcmdiOiB7IHI6IDE1NiwgZzogMTMyLCBiOiA0OSB9IH0sXG4gIDM4OiB7IGlkOiAzOCwgbmFtZTogJ0dvbGRlbnJvZCcsIHJnYjogeyByOiAxOTcsIGc6IDE3MywgYjogNDkgfSB9LFxuICAzOTogeyBpZDogMzksIG5hbWU6ICdMaWdodCBHb2xkZW5yb2QnLCByZ2I6IHsgcjogMjMyLCBnOiAyMTIsIGI6IDk1IH0gfSxcbiAgNDA6IHsgaWQ6IDQwLCBuYW1lOiAnRGFyayBPbGl2ZScsIHJnYjogeyByOiA3NCwgZzogMTA3LCBiOiA1OCB9IH0sXG4gIDQxOiB7IGlkOiA0MSwgbmFtZTogJ09saXZlJywgcmdiOiB7IHI6IDkwLCBnOiAxNDgsIGI6IDc0IH0gfSxcbiAgNDI6IHsgaWQ6IDQyLCBuYW1lOiAnTGlnaHQgT2xpdmUnLCByZ2I6IHsgcjogMTMyLCBnOiAxOTcsIGI6IDExNSB9IH0sXG4gIDQzOiB7IGlkOiA0MywgbmFtZTogJ0RhcmsgQ3lhbicsIHJnYjogeyByOiAxNSwgZzogMTIxLCBiOiAxNTkgfSB9LFxuICA0NDogeyBpZDogNDUsIG5hbWU6ICdMaWdodCBCbHVlJywgcmdiOiB7IHI6IDEyNSwgZzogMTk5LCBiOiAyNTUgfSB9LFxuICA0NTogeyBpZDogNDYsIG5hbWU6ICdEYXJrIEluZGlnbycsIHJnYjogeyByOiA3NywgZzogNDksIGI6IDE4NCB9IH0sXG4gIDQ2OiB7IGlkOiA0NywgbmFtZTogJ0RhcmsgU2xhdGUgQmx1ZScsIHJnYjogeyByOiA3NCwgZzogNjYsIGI6IDEzMiB9IH0sXG4gIDQ3OiB7IGlkOiA0OCwgbmFtZTogJ1NsYXRlIEJsdWUnLCByZ2I6IHsgcjogMTIyLCBnOiAxMTMsIGI6IDE5NiB9IH0sXG4gIDQ4OiB7IGlkOiA0OSwgbmFtZTogJ0xpZ2h0IFNsYXRlIEJsdWUnLCByZ2I6IHsgcjogMTgxLCBnOiAxNzQsIGI6IDI0MSB9IH0sXG4gIDQ5OiB7IGlkOiA1MywgbmFtZTogJ0RhcmsgUGVhY2gnLCByZ2I6IHsgcjogMTU1LCBnOiA4MiwgYjogNzMgfSB9LFxuICA1MDogeyBpZDogNTQsIG5hbWU6ICdQZWFjaCcsIHJnYjogeyByOiAyMDksIGc6IDEyOCwgYjogMTIwIH0gfSxcbiAgNTE6IHsgaWQ6IDU1LCBuYW1lOiAnTGlnaHQgUGVhY2gnLCByZ2I6IHsgcjogMjUwLCBnOiAxODIsIGI6IDE2NCB9IH0sXG4gIDUyOiB7IGlkOiA1MCwgbmFtZTogJ0xpZ2h0IEJyb3duJywgcmdiOiB7IHI6IDIxOSwgZzogMTY0LCBiOiA5OSB9IH0sXG4gIDUzOiB7IGlkOiA1NiwgbmFtZTogJ0RhcmsgVGFuJywgcmdiOiB7IHI6IDEyMywgZzogOTksIGI6IDgyIH0gfSxcbiAgNTQ6IHsgaWQ6IDU3LCBuYW1lOiAnVGFuJywgcmdiOiB7IHI6IDE1NiwgZzogMTMyLCBiOiAxMDcgfSB9LFxuICA1NTogeyBpZDogMzYsIG5hbWU6ICdMaWdodCBUYW4nLCByZ2I6IHsgcjogMjE0LCBnOiAxODEsIGI6IDE0OCB9IH0sXG4gIDU2OiB7IGlkOiA1MSwgbmFtZTogJ0RhcmsgQmVpZ2UnLCByZ2I6IHsgcjogMjA5LCBnOiAxMjgsIGI6IDgxIH0gfSxcbiAgNTc6IHsgaWQ6IDYxLCBuYW1lOiAnRGFyayBTdG9uZScsIHJnYjogeyByOiAxMDksIGc6IDEwMCwgYjogNjMgfSB9LFxuICA1ODogeyBpZDogNjIsIG5hbWU6ICdTdG9uZScsIHJnYjogeyByOiAxNDgsIGc6IDE0MCwgYjogMTA3IH0gfSxcbiAgNTk6IHsgaWQ6IDYzLCBuYW1lOiAnTGlnaHQgU3RvbmUnLCByZ2I6IHsgcjogMjA1LCBnOiAxOTcsIGI6IDE1OCB9IH0sXG4gIDYwOiB7IGlkOiA1OCwgbmFtZTogJ0RhcmsgU2xhdGUnLCByZ2I6IHsgcjogNTEsIGc6IDU3LCBiOiA2NSB9IH0sXG4gIDYxOiB7IGlkOiA1OSwgbmFtZTogJ1NsYXRlJywgcmdiOiB7IHI6IDEwOSwgZzogMTE3LCBiOiAxNDEgfSB9LFxuICA2MjogeyBpZDogNjAsIG5hbWU6ICdMaWdodCBTbGF0ZScsIHJnYjogeyByOiAxNzksIGc6IDE4NSwgYjogMjA5IH0gfSxcbiAgNjM6IHsgaWQ6IDAsIG5hbWU6ICdUcmFuc3BhcmVudCcsIHJnYjogbnVsbCB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JJbmZvKGNvbG9ySWQpIHtcbiAgY29uc3QgY29sb3IgPSBPYmplY3QudmFsdWVzKENPTE9SX01BUCkuZmluZChjID0+IGMuaWQgPT09IGNvbG9ySWQpO1xuICByZXR1cm4gY29sb3IgfHwgbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9yTmFtZShjb2xvcklkKSB7XG4gIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3JJbmZvKGNvbG9ySWQpO1xuICByZXR1cm4gY29sb3IgPyBjb2xvci5uYW1lIDogYENvbG9yICR7Y29sb3JJZH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VzdENvbG9yKGhleCwgcGFsZXR0ZSkge1xuICAvLyBTdXN0aXR1eWUgcG9yIHR1IG1cdTAwRTl0cmljYSByZWFsIChcdTAzOTRFIG8gZGlzdGFuY2lhIFJHQikuXG4gIC8vIFBvciBhaG9yYSByZXRvcm5hIGVsIHByaW1lciBjb2xvciBkZSBsYSBwYWxldGFcbiAgcmV0dXJuIHBhbGV0dGVbMF07XG59XG4iLCAiaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2NvcmUvbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyByZWdpc3RlcldpbmRvdywgdW5yZWdpc3RlcldpbmRvdyB9IGZyb20gJy4uL2NvcmUvd2luZG93LW1hbmFnZXIuanMnO1xuXG4vKipcbiAqIENyZWEgeSBnZXN0aW9uYSBlbCBkaVx1MDBFMWxvZ28gZGUgY29uZmlybWFjaVx1MDBGM24gcGFyYSBBdXRvLUd1YXJkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTYWZlR3VhcmRXaW5kb3coKSB7XG4gIFxuICAvKipcbiAgICogTXVlc3RyYSB1biBkaVx1MDBFMWxvZ28gZGUgY29uZmlybWFjaVx1MDBGM24gcGVyc29uYWxpemFibGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBNZW5zYWplIGEgbW9zdHJhclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgLSBUXHUwMEVEdHVsbyBkZWwgZGlcdTAwRTFsb2dvXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBidXR0b25zIC0gQ29uZmlndXJhY2lcdTAwRjNuIGRlIGJvdG9uZXNcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gLSBSZXN1bHRhZG8gZGUgbGEgYWNjaVx1MDBGM24gZGVsIHVzdWFyaW9cbiAgICovXG4gIGZ1bmN0aW9uIHNob3dDb25maXJtRGlhbG9nKG1lc3NhZ2UsIHRpdGxlLCBidXR0b25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG92ZXJsYXkuY2xhc3NOYW1lID0gJ21vZGFsLW92ZXJsYXknO1xuICAgICAgb3ZlcmxheS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICBvdmVybGF5LnN0eWxlLnRvcCA9ICcwJztcbiAgICAgIG92ZXJsYXkuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgIG92ZXJsYXkuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICBvdmVybGF5LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgIG92ZXJsYXkuc3R5bGUuYmFja2dyb3VuZCA9ICdyZ2JhKDAsMCwwLDAuNyknO1xuICAgICAgb3ZlcmxheS5zdHlsZS56SW5kZXggPSAnMTAwMDEnO1xuICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgb3ZlcmxheS5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XG4gICAgICBvdmVybGF5LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2NlbnRlcic7XG4gICAgICBcbiAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBtb2RhbC5zdHlsZS5iYWNrZ3JvdW5kID0gJyMxYTFhMWEnO1xuICAgICAgbW9kYWwuc3R5bGUuYm9yZGVyID0gJzJweCBzb2xpZCAjMzMzJztcbiAgICAgIG1vZGFsLnN0eWxlLmJvcmRlclJhZGl1cyA9ICcxNXB4JztcbiAgICAgIG1vZGFsLnN0eWxlLnBhZGRpbmcgPSAnMjVweCc7XG4gICAgICBtb2RhbC5zdHlsZS5jb2xvciA9ICcjZWVlJztcbiAgICAgIG1vZGFsLnN0eWxlLm1pbldpZHRoID0gJzM1MHB4JztcbiAgICAgIG1vZGFsLnN0eWxlLm1heFdpZHRoID0gJzQwMHB4JztcbiAgICAgIG1vZGFsLnN0eWxlLmJveFNoYWRvdyA9ICcwIDEwcHggMzBweCByZ2JhKDAsMCwwLDAuNSknO1xuICAgICAgbW9kYWwuc3R5bGUuZm9udEZhbWlseSA9IFwiJ1NlZ29lIFVJJywgUm9ib3RvLCBzYW5zLXNlcmlmXCI7XG4gICAgICBcbiAgICAgIG1vZGFsLmlubmVySFRNTCA9IGBcbiAgICAgICAgPGgzIHN0eWxlPVwibWFyZ2luOiAwIDAgMTVweCAwOyB0ZXh0LWFsaWduOiBjZW50ZXI7IGZvbnQtc2l6ZTogMThweDtcIj4ke3RpdGxlfTwvaDM+XG4gICAgICAgIDxwIHN0eWxlPVwibWFyZ2luOiAwIDAgMjBweCAwOyB0ZXh0LWFsaWduOiBjZW50ZXI7IGxpbmUtaGVpZ2h0OiAxLjQ7IHdoaXRlLXNwYWNlOiBwcmUtbGluZTtcIj4ke21lc3NhZ2V9PC9wPlxuICAgICAgICA8ZGl2IHN0eWxlPVwiZGlzcGxheTogZmxleDsgZ2FwOiAxMHB4OyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcIj5cbiAgICAgICAgICAke2J1dHRvbnMuY29uZmlybSA/IGA8YnV0dG9uIGNsYXNzPVwiY29uZmlybS1idG5cIiBzdHlsZT1cInBhZGRpbmc6IDEwcHggMjBweDsgYm9yZGVyOiBub25lOyBib3JkZXItcmFkaXVzOiA4cHg7IGZvbnQtc2l6ZTogMTRweDsgZm9udC13ZWlnaHQ6IGJvbGQ7IGN1cnNvcjogcG9pbnRlcjsgbWluLXdpZHRoOiAxMDBweDsgYmFja2dyb3VuZDogIzEwYjk4MTsgY29sb3I6IHdoaXRlO1wiPiR7YnV0dG9ucy5jb25maXJtfTwvYnV0dG9uPmAgOiAnJ31cbiAgICAgICAgICAke2J1dHRvbnMuc2F2ZSA/IGA8YnV0dG9uIGNsYXNzPVwic2F2ZS1idG5cIiBzdHlsZT1cInBhZGRpbmc6IDEwcHggMjBweDsgYm9yZGVyOiBub25lOyBib3JkZXItcmFkaXVzOiA4cHg7IGZvbnQtc2l6ZTogMTRweDsgZm9udC13ZWlnaHQ6IGJvbGQ7IGN1cnNvcjogcG9pbnRlcjsgbWluLXdpZHRoOiAxMDBweDsgYmFja2dyb3VuZDogIzEwYjk4MTsgY29sb3I6IHdoaXRlO1wiPiR7YnV0dG9ucy5zYXZlfTwvYnV0dG9uPmAgOiAnJ31cbiAgICAgICAgICAke2J1dHRvbnMuZGlzY2FyZCA/IGA8YnV0dG9uIGNsYXNzPVwiZGlzY2FyZC1idG5cIiBzdHlsZT1cInBhZGRpbmc6IDEwcHggMjBweDsgYm9yZGVyOiBub25lOyBib3JkZXItcmFkaXVzOiA4cHg7IGZvbnQtc2l6ZTogMTRweDsgZm9udC13ZWlnaHQ6IGJvbGQ7IGN1cnNvcjogcG9pbnRlcjsgbWluLXdpZHRoOiAxMDBweDsgYmFja2dyb3VuZDogI2VmNDQ0NDsgY29sb3I6IHdoaXRlO1wiPiR7YnV0dG9ucy5kaXNjYXJkfTwvYnV0dG9uPmAgOiAnJ31cbiAgICAgICAgICAke2J1dHRvbnMuY2FuY2VsID8gYDxidXR0b24gY2xhc3M9XCJjYW5jZWwtYnRuXCIgc3R5bGU9XCJwYWRkaW5nOiAxMHB4IDIwcHg7IGJvcmRlcjogbm9uZTsgYm9yZGVyLXJhZGl1czogOHB4OyBmb250LXNpemU6IDE0cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBjdXJzb3I6IHBvaW50ZXI7IG1pbi13aWR0aDogMTAwcHg7IGJhY2tncm91bmQ6ICMyZDM3NDg7IGNvbG9yOiB3aGl0ZTtcIj4ke2J1dHRvbnMuY2FuY2VsfTwvYnV0dG9uPmAgOiAnJ31cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgICAgXG4gICAgICBvdmVybGF5LmFwcGVuZENoaWxkKG1vZGFsKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheSk7XG4gICAgICBcbiAgICAgIC8vIFJlZ2lzdHJhciBtb2RhbCBlbiB3aW5kb3cgbWFuYWdlclxuICAgICAgcmVnaXN0ZXJXaW5kb3cob3ZlcmxheSk7XG4gICAgICBcbiAgICAgIC8vIEV2ZW50IGxpc3RlbmVyc1xuICAgICAgY29uc3QgY29uZmlybUJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5jb25maXJtLWJ0bicpO1xuICAgICAgY29uc3Qgc2F2ZUJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5zYXZlLWJ0bicpO1xuICAgICAgY29uc3QgZGlzY2FyZEJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5kaXNjYXJkLWJ0bicpO1xuICAgICAgY29uc3QgY2FuY2VsQnRuID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmNhbmNlbC1idG4nKTtcbiAgICAgIFxuICAgICAgY29uc3QgY2xlYW51cCA9ICgpID0+IHtcbiAgICAgICAgLy8gRGVzcmVnaXN0cmFyIG1vZGFsIGRlbCB3aW5kb3cgbWFuYWdlclxuICAgICAgICB1bnJlZ2lzdGVyV2luZG93KG92ZXJsYXkpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG92ZXJsYXkpO1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgaWYgKGNvbmZpcm1CdG4pIHtcbiAgICAgICAgY29uZmlybUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgcmVzb2x2ZSgnY29uZmlybScpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHNhdmVCdG4pIHtcbiAgICAgICAgc2F2ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgcmVzb2x2ZSgnc2F2ZScpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGRpc2NhcmRCdG4pIHtcbiAgICAgICAgZGlzY2FyZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgcmVzb2x2ZSgnZGlzY2FyZCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGNhbmNlbEJ0bikge1xuICAgICAgICBjYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgIHJlc29sdmUoJ2NhbmNlbCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2VycmFyIGNvbiBvdmVybGF5XG4gICAgICBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBvdmVybGF5KSB7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgIHJlc29sdmUoJ2NhbmNlbCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQ2VycmFyIGNvbiBFU0NcbiAgICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZSkgPT4ge1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgICByZXNvbHZlKCdjYW5jZWwnKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWVzdHJhIGVsIGRpXHUwMEUxbG9nbyBlc3BlY1x1MDBFRGZpY28gcGFyYSBBdXRvLUd1YXJkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZVN0YXRlIC0gRXN0YWRvIGRlIGxhIGltYWdlbiBjb24gZGF0b3MgbmVjZXNhcmlvc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSB0cnVlIHNpIGVsIHVzdWFyaW8gYWNlcHRhLCBmYWxzZSBzaSBjYW5jZWxhXG4gICAqL1xuICBmdW5jdGlvbiBzaG93R3VhcmREaWFsb2coaW1hZ2VTdGF0ZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3QgcmVtYWluaW5nUGl4ZWxzQ291bnQgPSBpbWFnZVN0YXRlLnJlbWFpbmluZ1BpeGVscyA/IGltYWdlU3RhdGUucmVtYWluaW5nUGl4ZWxzLmxlbmd0aCA6IDA7XG4gICAgICBjb25zdCBwcm9jZXNzb3IgPSBpbWFnZVN0YXRlLmltYWdlRGF0YSAmJiBpbWFnZVN0YXRlLmltYWdlRGF0YS5wcm9jZXNzb3IgPyBpbWFnZVN0YXRlLmltYWdlRGF0YS5wcm9jZXNzb3IgOiBudWxsO1xuICAgICAgLy8gQ2FsY3VsYXIgdG90YWwgZGUgcFx1MDBFRHhlbGVzIHNpIG5vIGhheSByZW1haW5pbmdQaXhlbHNcbiAgICAgIGxldCB0b3RhbFBpeGVsc0NvdW50ID0gcmVtYWluaW5nUGl4ZWxzQ291bnQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoKCF0b3RhbFBpeGVsc0NvdW50IHx8IHRvdGFsUGl4ZWxzQ291bnQgPT09IDApICYmIHByb2Nlc3NvciAmJiB0eXBlb2YgcHJvY2Vzc29yLmdlbmVyYXRlUGl4ZWxRdWV1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNvbnN0IGFsbCA9IHByb2Nlc3Nvci5nZW5lcmF0ZVBpeGVsUXVldWUoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhbGwpKSB0b3RhbFBpeGVsc0NvdW50ID0gYWxsLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBzaW4gYmxvcXVlb1xuICAgICAgfVxuICAgICAgLy8gRGltZW5zaW9uZXMgZGUgbGEgaW1hZ2VuXG4gICAgICBsZXQgaW1hZ2VXaWR0aCA9IGltYWdlU3RhdGUuaW1hZ2VEYXRhID8gaW1hZ2VTdGF0ZS5pbWFnZURhdGEud2lkdGggOiAwO1xuICAgICAgbGV0IGltYWdlSGVpZ2h0ID0gaW1hZ2VTdGF0ZS5pbWFnZURhdGEgPyBpbWFnZVN0YXRlLmltYWdlRGF0YS5oZWlnaHQgOiAwO1xuICAgICAgaWYgKCghaW1hZ2VXaWR0aCB8fCAhaW1hZ2VIZWlnaHQpICYmIHByb2Nlc3NvciAmJiB0eXBlb2YgcHJvY2Vzc29yLmdldERpbWVuc2lvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBkaW1zID0gcHJvY2Vzc29yLmdldERpbWVuc2lvbnMoKTtcbiAgICAgICAgICBpZiAoZGltcyAmJiBkaW1zLndpZHRoICYmIGRpbXMuaGVpZ2h0KSB7XG4gICAgICAgICAgICBpbWFnZVdpZHRoID0gZGltcy53aWR0aDtcbiAgICAgICAgICAgIGltYWdlSGVpZ2h0ID0gZGltcy5oZWlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaWdub3JlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHRpbGVYID0gdHlwZW9mIGltYWdlU3RhdGUudGlsZVggPT09ICdudW1iZXInID8gaW1hZ2VTdGF0ZS50aWxlWCA6IDA7XG4gICAgICBjb25zdCB0aWxlWSA9IHR5cGVvZiBpbWFnZVN0YXRlLnRpbGVZID09PSAnbnVtYmVyJyA/IGltYWdlU3RhdGUudGlsZVkgOiAwO1xuICAgICAgXG4gICAgICBjb25zdCBtZXNzYWdlID0gYFx1MDBCRkRlc2VhcyBnZW5lcmFyIHVuIGFyY2hpdm8gSlNPTiBjb21wYXRpYmxlIGNvbiBBdXRvLUd1YXJkLmpzP1xuXG5Fc3RlIGFyY2hpdm8gY29udGVuZHJcdTAwRTE6XG5cdTIwMjIgXHUwMEMxcmVhIGRlIHByb3RlY2NpXHUwMEYzbjogJHtpbWFnZVdpZHRofXgke2ltYWdlSGVpZ2h0fSBwXHUwMEVEeGVsZXNcblx1MjAyMiBQb3NpY2lcdTAwRjNuOiBUaWxlICgke3RpbGVYfSwgJHt0aWxlWX0pXG5cdTIwMjIgJHt0b3RhbFBpeGVsc0NvdW50IHx8IDB9IHBcdTAwRUR4ZWxlcyBwYXJhIHByb3RlZ2VyXG5cbkVsIGFyY2hpdm8gc2UgZ3VhcmRhclx1MDBFMSBhdXRvbVx1MDBFMXRpY2FtZW50ZSB5IHBvZHJcdTAwRTFzIGltcG9ydGFybG8gZW4gQXV0by1HdWFyZC5qcy5gO1xuICAgICAgXG4gICAgICBzaG93Q29uZmlybURpYWxvZyhcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgJ1x1RDgzRFx1REVFMVx1RkUwRiBHZW5lcmFyIEpTT04gcGFyYSBBdXRvLUd1YXJkJyxcbiAgICAgICAge1xuICAgICAgICAgIGNvbmZpcm06ICdTXHUwMEVELCBnZW5lcmFyIEpTT04nLFxuICAgICAgICAgIGNhbmNlbDogJ05vLCBjb250aW51YXIgc2luIGdlbmVyYXInXG4gICAgICAgIH1cbiAgICAgICkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICByZXNvbHZlKHJlc3VsdCA9PT0gJ2NvbmZpcm0nKTtcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmEgeSBkZXNjYXJnYSBlbCBhcmNoaXZvIEpTT04gcGFyYSBBdXRvLUd1YXJkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBndWFyZERhdGEgLSBEYXRvcyBkZWwgZ3VhcmQgZ2VuZXJhZG9zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gUmVzdWx0YWRvIGRlIGxhIG9wZXJhY2lcdTAwRjNuXG4gICAqL1xuICBmdW5jdGlvbiBzYXZlR3VhcmRKU09OKGd1YXJkRGF0YSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVmFsaWRhciBlc3RydWN0dXJhIG1cdTAwRURuaW1hIHJlcXVlcmlkYSBhbnRlcyBkZSBndWFyZGFyXG4gICAgICAgIGNvbnN0IGhhc1Byb3RlY3Rpb24gPSBndWFyZERhdGEgJiYgZ3VhcmREYXRhLnByb3RlY3Rpb25EYXRhICYmIGd1YXJkRGF0YS5wcm90ZWN0aW9uRGF0YS5hcmVhO1xuICAgICAgICBjb25zdCBhcmVhID0gaGFzUHJvdGVjdGlvbiA/IGd1YXJkRGF0YS5wcm90ZWN0aW9uRGF0YS5hcmVhIDogbnVsbDtcbiAgICAgICAgY29uc3QgaGFzQXJlYUZpZWxkcyA9IGFyZWEgJiYgWyd4MScsJ3kxJywneDInLCd5MiddLmV2ZXJ5KGsgPT4gTnVtYmVyLmlzRmluaXRlKGFyZWFba10pKTtcbiAgICAgICAgY29uc3QgaGFzUGl4ZWxzID0gQXJyYXkuaXNBcnJheShndWFyZERhdGE/Lm9yaWdpbmFsUGl4ZWxzKTtcbiAgICAgICAgY29uc3QgaGFzQ29sb3JzID0gQXJyYXkuaXNBcnJheShndWFyZERhdGE/LmNvbG9ycyk7XG4gICAgICAgIGlmICghaGFzUHJvdGVjdGlvbiB8fCAhaGFzQXJlYUZpZWxkcyB8fCAhaGFzUGl4ZWxzIHx8ICFoYXNDb2xvcnMpIHtcbiAgICAgICAgICBsb2coJ1x1Mjc0QyBFc3RydWN0dXJhIGludlx1MDBFMWxpZGEgcGFyYSBKU09OIGRlbCBHdWFyZC4gQWJvcnRhbmRvIGd1YXJkYWRvLicpO1xuICAgICAgICAgIHRyeSB7IHNob3dOb3RpZmljYXRpb24oJ0VzdHJ1Y3R1cmEgaW52XHUwMEUxbGlkYSBkZWwgSlNPTiBkZWwgR3VhcmQuIFZ1ZWx2ZSBhIGludGVudGFybG8gdHJhcyBzZWxlY2Npb25hciBsYSBwb3NpY2lcdTAwRjNuLicsICdlcnJvcicpOyB9IGNhdGNoIHt9XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdJbnZhbGlkIEd1YXJkIEpTT04gc3RydWN0dXJlJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgbm9tYnJlIGRlIGFyY2hpdm9cbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDE5KS5yZXBsYWNlKC86L2csICctJyk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gYHdwbGFjZV9HVUFSRF9mcm9tX0ltYWdlXyR7dGltZXN0YW1wfS5qc29uYDtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIHkgZGVzY2FyZ2FyIGFyY2hpdm9cbiAgICAgICAgY29uc3QgZGF0YVN0ciA9IEpTT04uc3RyaW5naWZ5KGd1YXJkRGF0YSwgbnVsbCwgMik7XG4gICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgd2luZG93LkJsb2IoW2RhdGFTdHJdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyB9KTtcbiAgICAgICAgY29uc3QgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIGxpbmsuaHJlZiA9IHVybDtcbiAgICAgICAgbGluay5kb3dubG9hZCA9IGZpbGVuYW1lO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gICAgICAgIFxuICAgICAgICBsb2coYFx1MjcwNSBKU09OIGRlbCBHdWFyZCBndWFyZGFkbzogJHtmaWxlbmFtZX1gKTtcbiAgICAgICAgcmVzb2x2ZSh7IHN1Y2Nlc3M6IHRydWUsIGZpbGVuYW1lIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nKGBcdTI3NEMgRXJyb3IgZ3VhcmRhbmRvIEpTT04gZGVsIEd1YXJkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIHJlc29sdmUoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTXVlc3RyYSB1biBkaVx1MDBFMWxvZ28gZGUgbm90aWZpY2FjaVx1MDBGM24gc2ltcGxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gTWVuc2FqZSBhIG1vc3RyYXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaXBvIGRlIG5vdGlmaWNhY2lcdTAwRjNuICgnc3VjY2VzcycsICdlcnJvcicsICdpbmZvJylcbiAgICovXG4gIGZ1bmN0aW9uIHNob3dOb3RpZmljYXRpb24obWVzc2FnZSwgdHlwZSA9ICdpbmZvJykge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG5vdGlmaWNhdGlvbi5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgbm90aWZpY2F0aW9uLnN0eWxlLnRvcCA9ICcyMHB4JztcbiAgICBub3RpZmljYXRpb24uc3R5bGUucmlnaHQgPSAnMjBweCc7XG4gICAgbm90aWZpY2F0aW9uLnN0eWxlLnBhZGRpbmcgPSAnMTVweCAyMHB4JztcbiAgICBub3RpZmljYXRpb24uc3R5bGUuYm9yZGVyUmFkaXVzID0gJzhweCc7XG4gICAgbm90aWZpY2F0aW9uLnN0eWxlLmNvbG9yID0gJ3doaXRlJztcbiAgICBub3RpZmljYXRpb24uc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcbiAgICBub3RpZmljYXRpb24uc3R5bGUuekluZGV4ID0gJzEwMDAyJztcbiAgICBub3RpZmljYXRpb24uc3R5bGUubWF4V2lkdGggPSAnMzAwcHgnO1xuICAgIG5vdGlmaWNhdGlvbi5zdHlsZS5ib3hTaGFkb3cgPSAnMCA0cHggMTJweCByZ2JhKDAsMCwwLDAuMyknO1xuICAgIG5vdGlmaWNhdGlvbi5zdHlsZS5mb250RmFtaWx5ID0gXCInU2Vnb2UgVUknLCBSb2JvdG8sIHNhbnMtc2VyaWZcIjtcbiAgICBub3RpZmljYXRpb24uc3R5bGUuZm9udFNpemUgPSAnMTRweCc7XG4gICAgXG4gICAgLy8gQ29sb3JlcyBzZWdcdTAwRkFuIGVsIHRpcG9cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N1Y2Nlc3MnOlxuICAgICAgICBub3RpZmljYXRpb24uc3R5bGUuYmFja2dyb3VuZCA9ICcjMTBiOTgxJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIG5vdGlmaWNhdGlvbi5zdHlsZS5iYWNrZ3JvdW5kID0gJyNlZjQ0NDQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgICBub3RpZmljYXRpb24uc3R5bGUuYmFja2dyb3VuZCA9ICcjZjU5ZTBiJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBub3RpZmljYXRpb24uc3R5bGUuYmFja2dyb3VuZCA9ICcjM2I4MmY2JztcbiAgICB9XG4gICAgXG4gICAgbm90aWZpY2F0aW9uLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vdGlmaWNhdGlvbik7XG4gICAgXG4gICAgLy8gUmVnaXN0cmFyIG5vdGlmaWNhY2lcdTAwRjNuIGVuIHdpbmRvdyBtYW5hZ2VyXG4gICAgcmVnaXN0ZXJXaW5kb3cobm90aWZpY2F0aW9uKTtcbiAgICBcbiAgICAvLyBBdXRvLXJlbW92ZXIgZGVzcHVcdTAwRTlzIGRlIDMgc2VndW5kb3NcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKG5vdGlmaWNhdGlvbikpIHtcbiAgICAgICAgLy8gRGVzcmVnaXN0cmFyIG5vdGlmaWNhY2lcdTAwRjNuIGRlbCB3aW5kb3cgbWFuYWdlclxuICAgICAgICB1bnJlZ2lzdGVyV2luZG93KG5vdGlmaWNhdGlvbik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobm90aWZpY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9LCAzMDAwKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2hvd0NvbmZpcm1EaWFsb2csXG4gICAgc2hvd0d1YXJkRGlhbG9nLFxuICAgIHNhdmVHdWFyZEpTT04sXG4gICAgc2hvd05vdGlmaWNhdGlvblxuICB9O1xufVxuXG4vLyBFeHBvcnRhciB0YW1iaVx1MDBFOW4gbGFzIGZ1bmNpb25lcyBpbmRpdmlkdWFsZXMgcGFyYSBjb21wYXRpYmlsaWRhZFxuZXhwb3J0IGZ1bmN0aW9uIHNob3dDb25maXJtRGlhbG9nKG1lc3NhZ2UsIHRpdGxlLCBidXR0b25zID0ge30pIHtcbiAgY29uc3Qgc2FmZUd1YXJkV2luZG93ID0gY3JlYXRlU2FmZUd1YXJkV2luZG93KCk7XG4gIHJldHVybiBzYWZlR3VhcmRXaW5kb3cuc2hvd0NvbmZpcm1EaWFsb2cobWVzc2FnZSwgdGl0bGUsIGJ1dHRvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd0d1YXJkRGlhbG9nKGltYWdlU3RhdGUpIHtcbiAgY29uc3Qgc2FmZUd1YXJkV2luZG93ID0gY3JlYXRlU2FmZUd1YXJkV2luZG93KCk7XG4gIHJldHVybiBzYWZlR3VhcmRXaW5kb3cuc2hvd0d1YXJkRGlhbG9nKGltYWdlU3RhdGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZUd1YXJkSlNPTihndWFyZERhdGEpIHtcbiAgY29uc3Qgc2FmZUd1YXJkV2luZG93ID0gY3JlYXRlU2FmZUd1YXJkV2luZG93KCk7XG4gIHJldHVybiBzYWZlR3VhcmRXaW5kb3cuc2F2ZUd1YXJkSlNPTihndWFyZERhdGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd05vdGlmaWNhdGlvbihtZXNzYWdlLCB0eXBlID0gJ2luZm8nKSB7XG4gIGNvbnN0IHNhZmVHdWFyZFdpbmRvdyA9IGNyZWF0ZVNhZmVHdWFyZFdpbmRvdygpO1xuICByZXR1cm4gc2FmZUd1YXJkV2luZG93LnNob3dOb3RpZmljYXRpb24obWVzc2FnZSwgdHlwZSk7XG59IiwgImV4cG9ydCBjb25zdCAkID0gKHNlbCwgcm9vdCA9IGRvY3VtZW50KSA9PiByb290LnF1ZXJ5U2VsZWN0b3Ioc2VsKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlKGNzcykge1xuICBjb25zdCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBzLnRleHRDb250ZW50ID0gY3NzOyBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHMpOyByZXR1cm4gcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdW50U2hhZG93KGNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHkpIHtcbiAgY29uc3QgaG9zdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGhvc3QuaWQgPSBcIndwbGFjZS1ib3Qtcm9vdFwiO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaG9zdCk7XG4gIGNvbnN0IHJvb3QgPSBob3N0LmF0dGFjaFNoYWRvdyA/IGhvc3QuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSkgOiBob3N0O1xuICByZXR1cm4geyBob3N0LCByb290IH07XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIGRldGVjdGFyIHNpIGxhIHBhbGV0YSBkZSBjb2xvcmVzIGVzdFx1MDBFMSBhYmllcnRhXG5leHBvcnQgZnVuY3Rpb24gaXNQYWxldHRlT3BlbihkZWJ1ZyA9IGZhbHNlKSB7XG4gIC8vIEJ1c2NhciBlbGVtZW50b3MgY29tdW5lcyBkZSBsYSBwYWxldGEgZGUgY29sb3JlcyAobVx1MDBFOXRvZG8gb3JpZ2luYWwpXG4gIGNvbnN0IHBhbGV0dGVTZWxlY3RvcnMgPSBbXG4gICAgJ1tkYXRhLXRlc3RpZD1cImNvbG9yLXBpY2tlclwiXScsXG4gICAgJy5jb2xvci1waWNrZXInLFxuICAgICcucGFsZXR0ZScsXG4gICAgJ1tjbGFzcyo9XCJjb2xvclwiXVtjbGFzcyo9XCJwaWNrZXJcIl0nLFxuICAgICdbY2xhc3MqPVwicGFsZXR0ZVwiXSdcbiAgXTtcbiAgXG4gIGZvciAoY29uc3Qgc2VsZWN0b3Igb2YgcGFsZXR0ZVNlbGVjdG9ycykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Lm9mZnNldFBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhgW1dQQS1VSV0gXHVEODNDXHVERkE4IFBhbGV0YSBkZXRlY3RhZGEgcG9yIHNlbGVjdG9yOiAke3NlbGVjdG9yfWApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIFxuICAvLyBCdXNjYXIgcG9yIGNvbG9yZXMgZW4gdW4gZ3JpZCBvIGxpc3RhIChtXHUwMEU5dG9kbyBvcmlnaW5hbClcbiAgY29uc3QgY29sb3JFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tzdHlsZSo9XCJiYWNrZ3JvdW5kLWNvbG9yXCJdLCBbc3R5bGUqPVwiYmFja2dyb3VuZDpcIl0sIC5jb2xvciwgW2NsYXNzKj1cImNvbG9yXCJdJyk7XG4gIGxldCB2aXNpYmxlQ29sb3JzID0gMDtcbiAgZm9yIChjb25zdCBlbCBvZiBjb2xvckVsZW1lbnRzKSB7XG4gICAgaWYgKGVsLm9mZnNldFBhcmVudCAhPT0gbnVsbCAmJiBlbC5vZmZzZXRXaWR0aCA+IDEwICYmIGVsLm9mZnNldEhlaWdodCA+IDEwKSB7XG4gICAgICB2aXNpYmxlQ29sb3JzKys7XG4gICAgICBpZiAodmlzaWJsZUNvbG9ycyA+PSA1KSB7XG4gICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coYFtXUEEtVUldIFx1RDgzQ1x1REZBOCBQYWxldGEgZGV0ZWN0YWRhIHBvciBjb2xvcmVzIHZpc2libGVzOiAke3Zpc2libGVDb2xvcnN9YCk7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBTaSBoYXkgNSsgZWxlbWVudG9zIGRlIGNvbG9yIHZpc2libGVzXG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKGBbV1BBLVVJXSBcdUQ4M0RcdUREMEQgUGFsZXRhIG5vIGRldGVjdGFkYS4gQ29sb3JlcyB2aXNpYmxlczogJHt2aXNpYmxlQ29sb3JzfWApO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIGVuY29udHJhciB5IGhhY2VyIGNsaWMgZW4gZWwgYm90XHUwMEYzbiBkZSBQYWludFxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBbmRDbGlja1BhaW50QnV0dG9uKGRlYnVnID0gZmFsc2UsIGRvdWJsZUNsaWNrID0gZmFsc2UpIHtcbiAgLy8gTVx1MDBFOXRvZG8gMTogQlx1MDBGQXNxdWVkYSBlc3BlY1x1MDBFRGZpY2EgcG9yIGNsYXNlcyAobVx1MDBFOXRvZG8gb3JpZ2luYWwsIG1cdTAwRTFzIGNvbmZpYWJsZSlcbiAgY29uc3Qgc3BlY2lmaWNCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1sZywgYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS5zbVxcXFw6YnRuLXhsJyk7XG4gIFxuICBpZiAoc3BlY2lmaWNCdXR0b24pIHtcbiAgICBjb25zdCBidXR0b25UZXh0ID0gc3BlY2lmaWNCdXR0b24udGV4dENvbnRlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBoYXNQYWludFRleHQgPSBidXR0b25UZXh0LmluY2x1ZGVzKCdwYWludCcpIHx8IGJ1dHRvblRleHQuaW5jbHVkZXMoJ3BpbnRhcicpO1xuICAgIGNvbnN0IGhhc1BhaW50SWNvbiA9IHNwZWNpZmljQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ3N2ZyBwYXRoW2QqPVwiMjQwLTEyMFwiXScpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lmaWNCdXR0b24ucXVlcnlTZWxlY3Rvcignc3ZnIHBhdGhbZCo9XCJNMTVcIl0nKTtcbiAgICBcbiAgICBpZiAoaGFzUGFpbnRUZXh0IHx8IGhhc1BhaW50SWNvbikge1xuICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhgW1dQQS1VSV0gXHVEODNDXHVERkFGIEJvdFx1MDBGM24gUGFpbnQgZW5jb250cmFkbyBwb3Igc2VsZWN0b3IgZXNwZWNcdTAwRURmaWNvOiBcIiR7YnV0dG9uVGV4dH1cImApO1xuICAgICAgc3BlY2lmaWNCdXR0b24uY2xpY2soKTtcbiAgICAgIFxuICAgICAgLy8gU2kgc2UgcmVxdWllcmUgZG9ibGUgY2xpYywgaGFjZXIgc2VndW5kbyBjbGljIGRlc3B1XHUwMEU5cyBkZSB1biBkZWxheVxuICAgICAgaWYgKGRvdWJsZUNsaWNrKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coYFtXUEEtVUldIFx1RDgzQ1x1REZBRiBTZWd1bmRvIGNsaWMgZW4gYm90XHUwMEYzbiBQYWludGApO1xuICAgICAgICAgIHNwZWNpZmljQnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIE1cdTAwRTl0b2RvIDI6IEJcdTAwRkFzcXVlZGEgc2ltcGxlIHBvciB0ZXh0byAobVx1MDBFOXRvZG8gb3JpZ2luYWwpXG4gIGNvbnN0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKTtcbiAgZm9yIChjb25zdCBidXR0b24gb2YgYnV0dG9ucykge1xuICAgIGNvbnN0IGJ1dHRvblRleHQgPSBidXR0b24udGV4dENvbnRlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoKGJ1dHRvblRleHQuaW5jbHVkZXMoJ3BhaW50JykgfHwgYnV0dG9uVGV4dC5pbmNsdWRlcygncGludGFyJykpICYmIFxuICAgICAgICBidXR0b24ub2Zmc2V0UGFyZW50ICE9PSBudWxsICYmXG4gICAgICAgICFidXR0b24uZGlzYWJsZWQpIHtcbiAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coYFtXUEEtVUldIFx1RDgzQ1x1REZBRiBCb3RcdTAwRjNuIFBhaW50IGVuY29udHJhZG8gcG9yIHRleHRvOiBcIiR7YnV0dG9uLnRleHRDb250ZW50LnRyaW0oKX1cImApO1xuICAgICAgYnV0dG9uLmNsaWNrKCk7XG4gICAgICBcbiAgICAgIC8vIFNpIHNlIHJlcXVpZXJlIGRvYmxlIGNsaWMsIGhhY2VyIHNlZ3VuZG8gY2xpYyBkZXNwdVx1MDBFOXMgZGUgdW4gZGVsYXlcbiAgICAgIGlmIChkb3VibGVDbGljaykge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKGBbV1BBLVVJXSBcdUQ4M0NcdURGQUYgU2VndW5kbyBjbGljIGVuIGJvdFx1MDBGM24gUGFpbnRgKTtcbiAgICAgICAgICBidXR0b24uY2xpY2soKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBcbiAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhgW1dQQS1VSV0gXHUyNzRDIEJvdFx1MDBGM24gUGFpbnQgbm8gZW5jb250cmFkb2ApO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIHJlYWxpemFyIGF1dG8tY2xpY2sgZGVsIGJvdFx1MDBGM24gUGFpbnQgY29uIHNlY3VlbmNpYSBjb3JyZWN0YVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGF1dG9DbGlja1BhaW50QnV0dG9uKG1heEF0dGVtcHRzID0gMywgZGVidWcgPSB0cnVlKSB7XG4gIGlmIChkZWJ1ZykgY29uc29sZS5sb2coYFtXUEEtVUldIFx1RDgzRVx1REQxNiBJbmljaWFuZG8gYXV0by1jbGljayBkZWwgYm90XHUwMEYzbiBQYWludCAobVx1MDBFMXhpbW8gJHttYXhBdHRlbXB0c30gaW50ZW50b3MpYCk7XG4gIFxuICBmb3IgKGxldCBhdHRlbXB0ID0gMTsgYXR0ZW1wdCA8PSBtYXhBdHRlbXB0czsgYXR0ZW1wdCsrKSB7XG4gICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhgW1dQQS1VSV0gXHVEODNDXHVERkFGIEludGVudG8gJHthdHRlbXB0fS8ke21heEF0dGVtcHRzfSAtIEJ1c2NhbmRvIGJvdFx1MDBGM24gUGFpbnQuLi5gKTtcbiAgICBcbiAgICAvLyBWZXJpZmljYXIgc2kgbGEgcGFsZXRhIHlhIGVzdFx1MDBFMSBhYmllcnRhXG4gICAgaWYgKGlzUGFsZXR0ZU9wZW4oKSkge1xuICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhgW1dQQS1VSV0gXHUyNzA1IFBhbGV0YSB5YSBlc3RcdTAwRTEgYWJpZXJ0YSwgYXV0by1jbGljayBjb21wbGV0YWRvYCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ0xJQyBcdTAwREFOSUNPOiBQcmVzaW9uYXIgUGFpbnQgdW5hIHNvbGEgdmV6IChzb2xvIHBhcmEgbW9zdHJhciBwYWxldGEvZGV0ZWN0YXIgY29sb3JlcylcbiAgICBpZiAoZmluZEFuZENsaWNrUGFpbnRCdXR0b24oZGVidWcsIGZhbHNlKSkge1xuICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhgW1dQQS1VSV0gXHVEODNEXHVEQzQ2IENsaWMgZW4gYm90XHUwMEYzbiBQYWludCByZWFsaXphZG8gKHNpbiBzZWd1bmRvIGNsaWMpYCk7XG4gICAgICBcbiAgICAgIC8vIEVzcGVyYXIgdW4gcG9jbyBwYXJhIHF1ZSBsYSBVSS9wYWxldGEgYXBhcmV6Y2EgZW4gcGFudGFsbGFcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxNTAwKSk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmaWNhciBzaSBsYSBwYWxldGEgc2UgYWJyaVx1MDBGM1xuICAgICAgaWYgKGlzUGFsZXR0ZU9wZW4oKSkge1xuICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKGBbV1BBLVVJXSBcdTI3MDUgUGFsZXRhIGFiaWVydGEgZXhpdG9zYW1lbnRlIGRlc3B1XHUwMEU5cyBkZWwgaW50ZW50byAke2F0dGVtcHR9YCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhgW1dQQS1VSV0gXHUyNkEwXHVGRTBGIFBhbGV0YSBubyBkZXRlY3RhZGEgdHJhcyBlbCBjbGljIGVuIGludGVudG8gJHthdHRlbXB0fS4gUmVpbnRlbnRhclx1MDBFMS5gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhgW1dQQS1VSV0gXHUyNzRDIEJvdFx1MDBGM24gUGFpbnQgbm8gZW5jb250cmFkbyBwYXJhIGNsaWMgZW4gaW50ZW50byAke2F0dGVtcHR9YCk7XG4gICAgfVxuICAgIFxuICAgIC8vIEVzcGVyYXIgYW50ZXMgZGVsIHNpZ3VpZW50ZSBpbnRlbnRvXG4gICAgaWYgKGF0dGVtcHQgPCBtYXhBdHRlbXB0cykge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICB9XG4gIH1cbiAgXG4gIGlmIChkZWJ1ZykgY29uc29sZS5sb2coYFtXUEEtVUldIFx1Mjc0QyBBdXRvLWNsaWNrIGZhbGxcdTAwRjMgZGVzcHVcdTAwRTlzIGRlICR7bWF4QXR0ZW1wdHN9IGludGVudG9zYCk7XG4gIHJldHVybiBmYWxzZTtcbn1cbiIsICJpbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi9sb2dnZXIuanNcIjtcbmltcG9ydCB7IGdldEZpbmdlcnByaW50LCBnZXRQYXd0ZWN0VG9rZW4gfSBmcm9tIFwiLi90dXJuc3RpbGUuanNcIjtcbi8vIEVsaW1pbmFkbyB0b2tlbi1jYXB0dXJlLXdpbmRvdyB5IHRva2VuLWludGVyY2VwdG9yIChmbHVqbyBhaG9yYSB0b3RhbG1lbnRlIHBhc2l2by9kaW5cdTAwRTFtaWNvKVxuaW1wb3J0IHsgc2VlZFBhd3RlY3QgfSBmcm9tICcuL3Bhd3RlY3QuanMnO1xuaW1wb3J0IHsgZW5zdXJlRmluZ2VycHJpbnQgfSBmcm9tICcuL2ZpbmdlcnByaW50LmpzJztcblxuLyoqXG4gKiBGdW5jaVx1MDBGM24gcHJpbmNpcGFsIHBhcmEgcHJlcGFyYXIgdG9rZW5zIGFudGVzIGRlIGluaWNpYXIgdW4gYm90XG4gKiBNdWVzdHJhIGxhIHZlbnRhbmEgZGUgY2FwdHVyYSBzaSBlcyBuZWNlc2FyaW9cbiAqIEBwYXJhbSB7c3RyaW5nfSBib3ROYW1lIC0gTm9tYnJlIGRlbCBib3QgcXVlIHNlIGVzdFx1MDBFMSBpbmljaWFuZG9cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gUmVzdWx0YWRvIGRlIGxhIGNhcHR1cmFcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVUb2tlbnNGb3JCb3QoYm90TmFtZSA9IFwiQm90XCIpIHtcbiAgbG9nKGBcdUQ4M0RcdURFODAgWyR7Ym90TmFtZX1dIFByZXBhcmFuZG8gdG9rZW5zIChtb2RvIHNpbXBsaWZpY2FkbylgKTtcbiAgLy8gUHJlY2FyZ2Egbm8gYmxvcXVlYW50ZVxuICB0cnkgeyBlbnN1cmVGaW5nZXJwcmludCh7fSk7IH0gY2F0Y2gge31cbiAgdHJ5IHsgc2VlZFBhd3RlY3QoKTsgfSBjYXRjaCB7fVxuICAvLyBObyBoYXkgVUk6IGRldm9sdmVtb3MgZXN0YWRvIGFjdHVhbFxuICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBmaW5nZXJwcmludDogZ2V0RmluZ2VycHJpbnQoKSwgcGF3dGVjdFRva2VuOiBnZXRQYXd0ZWN0VG9rZW4oKSwgc2tpcHBlZDogdHJ1ZSB9O1xufVxuXG4vKipcbiAqIEZ1bmNpXHUwMEYzbiBkZSBjb21wYXRpYmlsaWRhZCAtIHJlZW1wbGF6YSB3YXJtVXBGb3JUb2tlbnNcbiAqIEBkZXByZWNhdGVkIFVzYXIgcHJlcGFyZVRva2Vuc0ZvckJvdCBlbiBzdSBsdWdhclxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FybVVwRm9yVG9rZW5zKGNvbnRleHQgPSBcImJvdFwiKSB7XG4gIGxvZyhgXHUyNkEwXHVGRTBGIHdhcm1VcEZvclRva2VucyBlc3RcdTAwRTEgZGVwcmVjYWRvLCB1c2FyIHByZXBhcmVUb2tlbnNGb3JCb3RgKTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJlcGFyZVRva2Vuc0ZvckJvdChjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdC5zdWNjZXNzO1xufVxuXG4vKipcbiAqIEZ1bmNpXHUwMEYzbiBkZSBjb21wYXRpYmlsaWRhZCAtIHZlcmlmaWNhIHNpIHlhIHRlbmVtb3MgZmluZ2VycHJpbnRcbiAqIEBkZXByZWNhdGVkIEVsIG51ZXZvIHNpc3RlbWEgbWFuZWphIGVzdG8gYXV0b21cdTAwRTF0aWNhbWVudGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuc3VyZUZpbmdlcnByaW50UmVhZHkoY29udGV4dCA9IFwiYm90XCIsIG9wdGlvbnMgPSB7fSkge1xuICBsb2coYFx1MjZBMFx1RkUwRiBlbnN1cmVGaW5nZXJwcmludFJlYWR5IGVzdFx1MDBFMSBkZXByZWNhZG8sIHVzYXIgcHJlcGFyZVRva2Vuc0ZvckJvdGApO1xuICBcbiAgLy8gRmFzdC1wYXRoIHNpIHlhIGV4aXN0ZVxuICBjb25zdCBmcCA9IGdldEZpbmdlcnByaW50KCk7XG4gIGlmIChmcCkge1xuICAgIGxvZyhgXHVEODNDXHVERDk0IFtmcDoke2NvbnRleHR9XSBZYSBkaXNwb25pYmxlYCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgXG4gIC8vIFVzYXIgZWwgbnVldm8gc2lzdGVtYVxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmVwYXJlVG9rZW5zRm9yQm90KGNvbnRleHQpO1xuICByZXR1cm4gcmVzdWx0LnN1Y2Nlc3MgJiYgcmVzdWx0LmZpbmdlcnByaW50O1xufVxuXG4vKipcbiAqIFZlcmlmaWNhIHNpIHRlbmVtb3MgdG9rZW5zIGRpc3BvbmlibGVzIHNpbiBtb3N0cmFyIFVJXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIEVzdGFkbyBkZSBsb3MgdG9rZW5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1Rva2Vuc0F2YWlsYWJsZSgpIHtcbiAgY29uc3QgZmluZ2VycHJpbnQgPSBnZXRGaW5nZXJwcmludCgpO1xuICBjb25zdCBwYXd0ZWN0VG9rZW4gPSBnZXRQYXd0ZWN0VG9rZW4oKTtcbiAgcmV0dXJuIHtcbiAgICBoYXNGaW5nZXJwcmludDogISFmaW5nZXJwcmludCxcbiAgICBoYXNQYXd0ZWN0VG9rZW46ICEhcGF3dGVjdFRva2VuLFxuICBpbnRlcmNlcHRvclJlYWR5OiB0cnVlLFxuICBhbGxSZWFkeTogISFmaW5nZXJwcmludCAmJiAhIXBhd3RlY3RUb2tlblxuICB9O1xufVxuIiwgIi8vID09PSBbU2lzdGVtYSBkZSBvdmVybGF5IGJhc2FkbyBlbiBCbHVlIE1hcmJsZSAtIEludGVyY2VwY2lcdTAwRjNuIGRlIHRpbGVzXSA9PT1cbigoKSA9PiB7XG4gIGNvbnN0IFRJTEVfU0laRSA9IDMwMDA7IC8vIFRhbWFcdTAwRjFvIGRlIHRpbGUgZW4gV1BsYWNlXG5cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgdGVtcGxhdGVzOiBbXSwgLy8gUGxhbnRpbGxhcyBlc3RpbG8gQmx1ZSBNYXJibGVcbiAgICB0ZW1wbGF0ZXNTaG91bGRCZURyYXduOiB0cnVlLFxuICAgIHRpbGVTaXplOiAxMDAwLCAvLyBUYW1hXHUwMEYxbyBkZSB0aWxlIChjb21vIEJsdWUgTWFyYmxlKVxuICAgIGRyYXdNdWx0OiAzLCAvLyBNdWx0aXBsaWNhZG9yIGRlIGRpYnVqb1xuICAgIC8vIFBsYW4gZGUgcFx1MDBFRHhlbGVzIGFjdHVhbFxuICAgIHBpeGVsUGxhbjogbnVsbCxcbiAgICBuZXh0QmF0Y2hDb3VudDogMCxcbiAgICBhbmNob3I6IG51bGwsIC8vIHsgdGlsZVgsIHRpbGVZLCBweFgsIHB4WSB9XG4gICAgaW1hZ2VXaWR0aDogbnVsbCxcbiAgICBpbWFnZUhlaWdodDogbnVsbCxcbiAgICAvLyBTaXN0ZW1hIGRlIGludGVyY2VwY2lcdTAwRjNuXG4gICAgb3JpZ2luYWxGZXRjaDogbnVsbCxcbiAgICBmZXRjaGVkQmxvYlF1ZXVlOiBuZXcgTWFwKCksXG4gICAgaXNJbnRlcmNlcHRpbmc6IGZhbHNlXG4gIH07XG5cbiAgZnVuY3Rpb24gaW5qZWN0U3R5bGVzKCkge1xuICAgIC8vIE5vIG5lY2VzaXRhbW9zIGVzdGlsb3MgQ1NTIGFkaWNpb25hbGVzIC0gQmx1ZSBNYXJibGUgdXNhIGVsIHNpc3RlbWEgZGUgdGlsZXMgbmF0aXZvXG4gICAgLy8gU2lzdGVtYSBpbmljaWFsaXphZG8gc2lsZW5jaW9zYW1lbnRlXG4gIH1cblxuICAvLyA9PT0gU0lTVEVNQSBERSBJTlRFUkNFUENJXHUwMEQzTiBERSBGRVRDSCAoY29tbyBCbHVlIE1hcmJsZSkgPT09XG4gIGZ1bmN0aW9uIHN0YXJ0RmV0Y2hJbnRlcmNlcHRpb24oKSB7XG4gICAgaWYgKHN0YXRlLmlzSW50ZXJjZXB0aW5nKSByZXR1cm47XG5cbiAgICBzdGF0ZS5vcmlnaW5hbEZldGNoID0gd2luZG93LmZldGNoO1xuICAgIHN0YXRlLmlzSW50ZXJjZXB0aW5nID0gdHJ1ZTtcblxuICAgIHdpbmRvdy5mZXRjaCA9IGFzeW5jIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3RhdGUub3JpZ2luYWxGZXRjaC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGNvbnN0IGNsb25lZCA9IHJlc3BvbnNlLmNsb25lKCk7XG5cbiAgICAgIGNvbnN0IGVuZHBvaW50TmFtZSA9ICgoYXJnc1swXSBpbnN0YW5jZW9mIFJlcXVlc3QpID8gYXJnc1swXT8udXJsIDogYXJnc1swXSkgfHwgJ2lnbm9yZSc7XG4gICAgICBjb25zdCBjb250ZW50VHlwZSA9IGNsb25lZC5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykgfHwgJyc7XG5cbiAgICAgIC8vIEludGVyY2VwdGFyIHNvbG8gdGlsZXMgZGUgaW1hZ2VuIChjb21vIEJsdWUgTWFyYmxlKVxuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluY2x1ZGVzKCdpbWFnZS8nKSAmJiBcbiAgICAgICAgICBlbmRwb2ludE5hbWUuaW5jbHVkZXMoJy90aWxlcy8nKSAmJiBcbiAgICAgICAgICAhZW5kcG9pbnROYW1lLmluY2x1ZGVzKCdvcGVuZnJlZW1hcCcpICYmIFxuICAgICAgICAgICFlbmRwb2ludE5hbWUuaW5jbHVkZXMoJ21hcHMnKSkge1xuXG4gICAgICAgIC8vIEludGVyY2VwdGFuZG8gdGlsZSByZXF1ZXN0IHNpbGVuY2lvc2FtZW50ZVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IGNsb25lZC5ibG9iKCk7XG4gICAgICAgICAgY29uc3QgcHJvY2Vzc2VkQmxvYiA9IGF3YWl0IGRyYXdQbGFuT25UaWxlKGJsb2IsIGVuZHBvaW50TmFtZSk7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShwcm9jZXNzZWRCbG9iLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiBjbG9uZWQuaGVhZGVycyxcbiAgICAgICAgICAgIHN0YXR1czogY2xvbmVkLnN0YXR1cyxcbiAgICAgICAgICAgIHN0YXR1c1RleHQ6IGNsb25lZC5zdGF0dXNUZXh0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW1BMQU4gT1ZFUkxBWV0gRXJyb3IgcHJvY2Vzc2luZyB0aWxlOicsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH07XG5cbiAgICAvLyBJbnRlcmNlcGNpXHUwMEYzbiBkZSBmZXRjaCBpbmljaWFkYVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcEZldGNoSW50ZXJjZXB0aW9uKCkge1xuICAgIGlmICghc3RhdGUuaXNJbnRlcmNlcHRpbmcgfHwgIXN0YXRlLm9yaWdpbmFsRmV0Y2gpIHJldHVybjtcblxuICAgIHdpbmRvdy5mZXRjaCA9IHN0YXRlLm9yaWdpbmFsRmV0Y2g7XG4gICAgc3RhdGUuaXNJbnRlcmNlcHRpbmcgPSBmYWxzZTtcblxuICAgIC8vIEludGVyY2VwY2lcdTAwRjNuIGRlIGZldGNoIGRldGVuaWRhXG4gIH1cblxuICAvLyA9PT0gUFJPQ0VTQU1JRU5UTyBERSBUSUxFUyAoY29tbyBCbHVlIE1hcmJsZSkgPT09XG4gIGFzeW5jIGZ1bmN0aW9uIGRyYXdQbGFuT25UaWxlKHRpbGVCbG9iLCBlbmRwb2ludFVybCkge1xuICAgIGlmICghc3RhdGUuZW5hYmxlZCB8fCAhc3RhdGUudGVtcGxhdGVzU2hvdWxkQmVEcmF3biB8fCAhc3RhdGUucGl4ZWxQbGFuKSB7XG4gICAgICByZXR1cm4gdGlsZUJsb2I7XG4gICAgfVxuXG4gICAgLy8gRXh0cmFlciBjb29yZGVuYWRhcyBkZWwgdGlsZSBkZXNkZSBsYSBVUkxcbiAgICAvLyBGb3JtYXRvOiBcIi4uLi90aWxlcy90aWxlWC90aWxlWS96b29tLnBuZ1wiXG4gICAgY29uc3QgdXJsUGFydHMgPSBlbmRwb2ludFVybC5zcGxpdCgnLycpO1xuICAgIGNvbnN0IHRpbGVZID0gcGFyc2VJbnQodXJsUGFydHNbdXJsUGFydHMubGVuZ3RoIC0gMV0ucmVwbGFjZSgnLnBuZycsICcnKSk7XG4gICAgY29uc3QgdGlsZVggPSBwYXJzZUludCh1cmxQYXJ0c1t1cmxQYXJ0cy5sZW5ndGggLSAyXSk7XG5cbiAgICBpZiAoaXNOYU4odGlsZVgpIHx8IGlzTmFOKHRpbGVZKSkge1xuICAgICAgY29uc29sZS53YXJuKCdbUExBTiBPVkVSTEFZXSBDb3VsZCBub3QgZXh0cmFjdCB0aWxlIGNvb3JkaW5hdGVzIGZyb20gVVJMOicsIGVuZHBvaW50VXJsKTtcbiAgICAgIHJldHVybiB0aWxlQmxvYjtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNhbmRvIHRpbGUgc2lsZW5jaW9zYW1lbnRlXG5cbiAgICAvLyBWZXJpZmljYXIgc2kgZXN0ZSB0aWxlIGNvbnRpZW5lIHBcdTAwRUR4ZWxlcyBkZSBudWVzdHJvIHBsYW5cbiAgICBjb25zdCB0aWxlUGl4ZWxzID0gZ2V0UGl4ZWxzRm9yVGlsZSh0aWxlWCwgdGlsZVkpO1xuICAgIGlmICh0aWxlUGl4ZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRpbGVCbG9iOyAvLyBObyBoYXkgcFx1MDBFRHhlbGVzIGVuIGVzdGUgdGlsZVxuICAgIH1cblxuICAgIC8vIFBcdTAwRUR4ZWxlcyBlbmNvbnRyYWRvcyBwYXJhIHRpbGUgKGxvZyByZWR1Y2lkbylcblxuICAgIC8vIFByb2Nlc2FyIGVsIHRpbGUgKGNvbW8gQmx1ZSBNYXJibGUpXG4gICAgY29uc3QgZHJhd1NpemUgPSBzdGF0ZS50aWxlU2l6ZSAqIHN0YXRlLmRyYXdNdWx0O1xuICAgIGNvbnN0IHRpbGVCaXRtYXAgPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcCh0aWxlQmxvYik7XG4gICAgXG4gICAgY29uc3QgY2FudmFzID0gbmV3IE9mZnNjcmVlbkNhbnZhcyhkcmF3U2l6ZSwgZHJhd1NpemUpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBcbiAgICBjb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGRyYXdTaXplLCBkcmF3U2l6ZSk7XG4gICAgY29udGV4dC5kcmF3SW1hZ2UodGlsZUJpdG1hcCwgMCwgMCwgZHJhd1NpemUsIGRyYXdTaXplKTtcblxuICAgIC8vIERpYnVqYXIgcFx1MDBFRHhlbGVzIGRlbCBwbGFuIChjb21vIEJsdWUgTWFyYmxlIGRpYnVqYSB0ZW1wbGF0ZXMpXG4gICAgZHJhd1BpeGVsc09uVGlsZShjb250ZXh0LCB0aWxlUGl4ZWxzLCB0aWxlWCwgdGlsZVkpO1xuXG4gICAgcmV0dXJuIGF3YWl0IGNhbnZhcy5jb252ZXJ0VG9CbG9iKHsgdHlwZTogJ2ltYWdlL3BuZycgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQaXhlbHNGb3JUaWxlKHRpbGVYLCB0aWxlWSkge1xuICAgIGlmICghc3RhdGUucGl4ZWxQbGFuIHx8ICFzdGF0ZS5waXhlbFBsYW4ucGl4ZWxzKSByZXR1cm4gW107XG5cbiAgICByZXR1cm4gc3RhdGUucGl4ZWxQbGFuLnBpeGVscy5maWx0ZXIocGl4ZWwgPT4ge1xuICAgICAgLy8gQ2FsY3VsYXIgZW4gcXVcdTAwRTkgdGlsZSBlc3RcdTAwRTEgZXN0ZSBwXHUwMEVEeGVsXG4gICAgICBjb25zdCBwaXhlbFRpbGVYID0gTWF0aC5mbG9vcihwaXhlbC5nbG9iYWxYIC8gVElMRV9TSVpFKTtcbiAgICAgIGNvbnN0IHBpeGVsVGlsZVkgPSBNYXRoLmZsb29yKHBpeGVsLmdsb2JhbFkgLyBUSUxFX1NJWkUpO1xuICAgICAgcmV0dXJuIHBpeGVsVGlsZVggPT09IHRpbGVYICYmIHBpeGVsVGlsZVkgPT09IHRpbGVZO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZHJhd1BpeGVsc09uVGlsZShjb250ZXh0LCBwaXhlbHMsIHRpbGVYLCB0aWxlWSkge1xuICAgIGNvbnN0IHRpbGVTdGFydFggPSB0aWxlWCAqIFRJTEVfU0laRTtcbiAgICBjb25zdCB0aWxlU3RhcnRZID0gdGlsZVkgKiBUSUxFX1NJWkU7XG5cbiAgICAvLyBDb25maWd1cmFyIHRyYW5zcGFyZW5jaWEgZGVsIG92ZXJsYXlcbiAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gMC43O1xuXG4gICAgZm9yIChjb25zdCBwaXhlbCBvZiBwaXhlbHMpIHtcbiAgICAgIC8vIENvbnZlcnRpciBjb29yZGVuYWRhcyBnbG9iYWxlcyBhIGNvb3JkZW5hZGFzIGxvY2FsZXMgZGVsIHRpbGVcbiAgICAgIGNvbnN0IGxvY2FsWCA9IChwaXhlbC5nbG9iYWxYIC0gdGlsZVN0YXJ0WCkgKiBzdGF0ZS5kcmF3TXVsdCArIDE7IC8vICsxIHBhcmEgY2VudHJhciBjb21vIEJsdWUgTWFyYmxlXG4gICAgICBjb25zdCBsb2NhbFkgPSAocGl4ZWwuZ2xvYmFsWSAtIHRpbGVTdGFydFkpICogc3RhdGUuZHJhd011bHQgKyAxO1xuXG4gICAgICAvLyBTb2xvIGRpYnVqYXIgc2kgZXN0XHUwMEUxIGRlbnRybyBkZWwgdGlsZVxuICAgICAgaWYgKGxvY2FsWCA+PSAwICYmIGxvY2FsWCA8IHN0YXRlLnRpbGVTaXplICogc3RhdGUuZHJhd011bHQgJiYgXG4gICAgICAgICAgbG9jYWxZID49IDAgJiYgbG9jYWxZIDwgc3RhdGUudGlsZVNpemUgKiBzdGF0ZS5kcmF3TXVsdCkge1xuICAgICAgICBcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBgcmdiKCR7cGl4ZWwucn0sJHtwaXhlbC5nfSwke3BpeGVsLmJ9KWA7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QobG9jYWxYLCBsb2NhbFksIDEsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlc2FsdGFyIHByXHUwMEYzeGltbyBiYXRjaCBjb24gbWF5b3Igb3BhY2lkYWRcbiAgICBpZiAoc3RhdGUubmV4dEJhdGNoQ291bnQgPiAwKSB7XG4gICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gMS4wO1xuICAgICAgY29uc3QgYmF0Y2hQaXhlbHMgPSBwaXhlbHMuc2xpY2UoMCwgc3RhdGUubmV4dEJhdGNoQ291bnQpO1xuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IHBpeGVsIG9mIGJhdGNoUGl4ZWxzKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsWCA9IChwaXhlbC5nbG9iYWxYIC0gdGlsZVN0YXJ0WCkgKiBzdGF0ZS5kcmF3TXVsdCArIDE7XG4gICAgICAgIGNvbnN0IGxvY2FsWSA9IChwaXhlbC5nbG9iYWxZIC0gdGlsZVN0YXJ0WSkgKiBzdGF0ZS5kcmF3TXVsdCArIDE7XG5cbiAgICAgICAgaWYgKGxvY2FsWCA+PSAwICYmIGxvY2FsWCA8IHN0YXRlLnRpbGVTaXplICogc3RhdGUuZHJhd011bHQgJiYgXG4gICAgICAgICAgICBsb2NhbFkgPj0gMCAmJiBsb2NhbFkgPCBzdGF0ZS50aWxlU2l6ZSAqIHN0YXRlLmRyYXdNdWx0KSB7XG4gICAgICAgICAgXG4gICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBgcmdiKCR7cGl4ZWwucn0sJHtwaXhlbC5nfSwke3BpeGVsLmJ9KWA7XG4gICAgICAgICAgY29udGV4dC5maWxsUmVjdChsb2NhbFgsIGxvY2FsWSwgMSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyA9PT0gQVBJIFBcdTAwREFCTElDQSAoY29tcGF0aWJsZSBjb24gbGEgYW50ZXJpb3IpID09PVxuICBmdW5jdGlvbiBzZXRFbmFibGVkKGVuYWJsZWQpIHtcbiAgICBzdGF0ZS5lbmFibGVkID0gISFlbmFibGVkO1xuICAgIFxuICAgIGlmIChzdGF0ZS5lbmFibGVkKSB7XG4gICAgICBzdGFydEZldGNoSW50ZXJjZXB0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3BGZXRjaEludGVyY2VwdGlvbigpO1xuICAgIH1cbiAgICBcbiAgICAvLyBFc3RhZG8gaGFiaWxpdGFkby9kZXNoYWJpbGl0YWRvIHNpbGVuY2lvc2FtZW50ZVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0UGxhbihwbGFuSXRlbXMsIG9wdHMgPSB7fSkge1xuICAgIGlmICghcGxhbkl0ZW1zIHx8IHBsYW5JdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHN0YXRlLnBpeGVsUGxhbiA9IG51bGw7XG4gICAgICAvLyBQbGFuIGxpbXBpYWRvIHNpbGVuY2lvc2FtZW50ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRpciBmb3JtYXRvIEF1dG8tSW1hZ2UgYSBmb3JtYXRvIGludGVybm9cbiAgICBjb25zdCBwaXhlbHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgcGxhbkl0ZW1zKSB7XG4gICAgICBsZXQgZ2xvYmFsWCwgZ2xvYmFsWTtcbiAgICAgIFxuICAgICAgaWYgKHR5cGVvZiBpdGVtLnRpbGVYID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgaXRlbS5sb2NhbFggPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIEZvcm1hdG8gdGlsZS9sb2NhbFxuICAgICAgICBnbG9iYWxYID0gaXRlbS50aWxlWCAqIFRJTEVfU0laRSArIGl0ZW0ubG9jYWxYO1xuICAgICAgICBnbG9iYWxZID0gaXRlbS50aWxlWSAqIFRJTEVfU0laRSArIGl0ZW0ubG9jYWxZO1xuICAgICAgfSBlbHNlIGlmIChvcHRzLmFuY2hvciAmJiB0eXBlb2YgaXRlbS5pbWFnZVggPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIEZvcm1hdG8gaW1hZ2VYL1kgY29uIGFuY2xhXG4gICAgICAgIGNvbnN0IGJhc2VYID0gb3B0cy5hbmNob3IudGlsZVggKiBUSUxFX1NJWkUgKyAob3B0cy5hbmNob3IucHhYIHx8IDApO1xuICAgICAgICBjb25zdCBiYXNlWSA9IG9wdHMuYW5jaG9yLnRpbGVZICogVElMRV9TSVpFICsgKG9wdHMuYW5jaG9yLnB4WSB8fCAwKTtcbiAgICAgICAgZ2xvYmFsWCA9IGJhc2VYICsgaXRlbS5pbWFnZVg7XG4gICAgICAgIGdsb2JhbFkgPSBiYXNlWSArIGl0ZW0uaW1hZ2VZO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHBpeGVscy5wdXNoKHtcbiAgICAgICAgZ2xvYmFsWDogZ2xvYmFsWCxcbiAgICAgICAgZ2xvYmFsWTogZ2xvYmFsWSxcbiAgICAgICAgcjogaXRlbS5jb2xvcj8uciB8fCAwLFxuICAgICAgICBnOiBpdGVtLmNvbG9yPy5nIHx8IDAsXG4gICAgICAgIGI6IGl0ZW0uY29sb3I/LmIgfHwgMFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGUucGl4ZWxQbGFuID0geyBwaXhlbHMgfTtcbiAgICBzdGF0ZS5uZXh0QmF0Y2hDb3VudCA9IG9wdHMubmV4dEJhdGNoQ291bnQgfHwgMDtcbiAgICBzdGF0ZS5hbmNob3IgPSBvcHRzLmFuY2hvciB8fCBudWxsO1xuICAgIHN0YXRlLmltYWdlV2lkdGggPSBvcHRzLmltYWdlV2lkdGggfHwgbnVsbDtcbiAgICBzdGF0ZS5pbWFnZUhlaWdodCA9IG9wdHMuaW1hZ2VIZWlnaHQgfHwgbnVsbDtcblxuICAgIC8vIFBsYW4gZXN0YWJsZWNpZG8gc2lsZW5jaW9zYW1lbnRlXG4gICAgXG4gICAgaWYgKHR5cGVvZiBvcHRzLmVuYWJsZWQgPT09ICdib29sZWFuJykge1xuICAgICAgc2V0RW5hYmxlZChvcHRzLmVuYWJsZWQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE5leHRCYXRjaENvdW50KGNvdW50KSB7XG4gICAgc3RhdGUubmV4dEJhdGNoQ291bnQgPSBNYXRoLm1heCgwLCBOdW1iZXIoY291bnQgfHwgMCkpO1xuICAgIC8vIENvbnRhZG9yIGRlIHByXHUwMEYzeGltbyBsb3RlIGFjdHVhbGl6YWRvXG4gIH1cblxuICBmdW5jdGlvbiBzZXRBbmNob3IoYW5jaG9yKSB7XG4gICAgc3RhdGUuYW5jaG9yID0gYW5jaG9yO1xuICAgIC8vIEFuY2xhIGVzdGFibGVjaWRhIHNpbGVuY2lvc2FtZW50ZVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QW5jaG9yQ3NzKCkge1xuICAgIC8vIEVuIGVsIHNpc3RlbWEgZGUgdGlsZXMgbm8gbmVjZXNpdGFtb3MgYW5jbGEgQ1NTIC0gZXMgc29sbyBwYXJhIGNvbXBhdGliaWxpZGFkXG4gICAgLy8gQW5jbGEgQ1NTIGVzdGFibGVjaWRhIChpZ25vcmFkYSBlbiBzaXN0ZW1hIGRlIHRpbGVzKVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kU2VsZWN0aW9uTW9kZSgpIHtcbiAgICAvLyBFbiBlbCBzaXN0ZW1hIGRlIHRpbGVzIG5vIGhheSBtb2RvIHNlbGVjY2lcdTAwRjNuIC0gZXMgc29sbyBwYXJhIGNvbXBhdGliaWxpZGFkXG4gICAgLy8gTW9kbyBzZWxlY2NpXHUwMEYzbiB0ZXJtaW5hZG8gKGlnbm9yYWRvIGVuIHNpc3RlbWEgZGUgdGlsZXMpXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHN0b3BGZXRjaEludGVyY2VwdGlvbigpO1xuICAgIHN0YXRlLnBpeGVsUGxhbiA9IG51bGw7XG4gICAgc3RhdGUuZmV0Y2hlZEJsb2JRdWV1ZS5jbGVhcigpO1xuICAgIC8vIExpbXBpZXphIGNvbXBsZXRhZGFcbiAgfVxuXG4gIC8vID09PSBBUEkgR0xPQkFMIChjb21wYXRpYmxlIGNvbiBsYSBhbnRlcmlvcikgPT09XG4gIHdpbmRvdy5fX1dQQV9QTEFOX09WRVJMQVlfXyA9IHtcbiAgICBpbmplY3RTdHlsZXMsXG4gICAgc2V0RW5hYmxlZCxcbiAgICBzZXRQbGFuLFxuICAgIHNldFBsYW5JdGVtc0Zyb21UaWxlTGlzdDogc2V0UGxhbiwgLy8gQWxpYXNcbiAgICBzZXROZXh0QmF0Y2hDb3VudCxcbiAgICBzZXRBbmNob3IsXG4gICAgc2V0QW5jaG9yQ3NzLFxuICAgIGVuZFNlbGVjdGlvbk1vZGUsXG4gICAgcmVuZGVyOiAoKSA9PiB7IC8qIE5vLW9wIGVuIHNpc3RlbWEgZGUgdGlsZXMgKi8gfSxcbiAgICBjbGVhbnVwLFxuICAgIGdldCBzdGF0ZSgpIHsgcmV0dXJuIHN0YXRlOyB9XG4gIH07XG5cbiAgLy8gU2lzdGVtYSBCbHVlIE1hcmJsZSBsaXN0b1xufSkoKTtcbiIsICIvLyBNXHUwMEYzZHVsbyBtb2R1bGFyaXphZG8gZGUgZnVuY2lvbmFsaWRhZGVzIEd1YXJkIGV4dHJhXHUwMEVEZGFzIGRlIGluZGV4LmpzXG4vLyBSZXNwb25zYWJsZSBkZSBtYW5lam8gZGUgZ3VhcmREYXRhLCBhblx1MDBFMWxpc2lzIGhlYWRsZXNzLCBwcmV2aWV3IHkgYXBsaWNhY2lcdTAwRjNuIGRlIGNvbmZpZ1xuXG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vLi4vY29yZS9sb2dnZXIuanNcIjtcbmltcG9ydCB7IGFuYWx5emVBcmVhUGl4ZWxzLCBkZXRlY3RBdmFpbGFibGVDb2xvcnMgfSBmcm9tIFwiLi4vLi4vZ3VhcmQvcHJvY2Vzc29yLmpzXCI7XG5pbXBvcnQgeyB0cmFja0V2ZW50IH0gZnJvbSBcIi4uLy4uL2NvcmUvbWV0cmljcy9jbGllbnQuanNcIjtcbmltcG9ydCB7IGdldFBpeGVsc0J5UGF0dGVybiB9IGZyb20gXCIuLi8uLi9ndWFyZC9wYXR0ZXJucy5qc1wiO1xuaW1wb3J0IHsgZmluZEFuZENsaWNrUGFpbnRCdXR0b24gfSBmcm9tIFwiLi4vLi4vY29yZS9kb20uanNcIjtcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4uLy4uL2NvcmUvdGltaW5nLmpzXCI7XG5cbi8vIEVzdGFkbyBpbnRlcm5vIGRlbCBtXHUwMEYzZHVsbyAobm8gc3VzdGl0dXllIGEgd2luZG93Lmd1YXJkU3RhdGUsIGxvIGNvbXBsZW1lbnRhKVxuY29uc3QgZ3VhcmRSdW50aW1lID0ge1xuICBhbmFseXNpc0ludGVydmFsOiBudWxsLFxuICBpbnRlcnZhbE1zOiAzMDAwMCxcbiAgbGFzdE1hbnVhbFJlcGFpcjogMCxcbiAgYXV0b21hdGlvbkludGVydmFsOiBudWxsLFxuICBuZXh0UmVwYWlyRWFybGllc3Q6IDAsXG4gIG5leHRDaGVja0VhcmxpZXN0OiAwXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0QW5hbHlzaXNJbnRlcnZhbE1zKG1zKSB7XG4gIGd1YXJkUnVudGltZS5pbnRlcnZhbE1zID0gbXM7XG4gIGlmIChndWFyZFJ1bnRpbWUuYW5hbHlzaXNJbnRlcnZhbCkge1xuICAgIHN0b3BHdWFyZEFuYWx5c2lzTG9vcCgpO1xuICAvLyBFbCBjb25zdW1pZG9yIGRlYmVyXHUwMEUxIHJlaW5pY2lhciBlbCBsb29wIHByb3BvcmNpb25hZG8gc2VuZFByZXZpZXcgZXhwbFx1MDBFRGNpdGFtZW50ZVxuICB9XG59XG5cbi8vIEFzZWd1cmFyIGNvbG9yZXMgZGlzcG9uaWJsZXMgcGFyYSBhblx1MDBFMWxpc2lzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5zdXJlR3VhcmRDb2xvcnMoKSB7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgY29uc3QgZ3MgPSB3aW5kb3cuZ3VhcmRTdGF0ZTtcbiAgICBpZiAoIWdzKSByZXR1cm47XG4gICAgaWYgKGdzLmF2YWlsYWJsZUNvbG9ycyAmJiBncy5hdmFpbGFibGVDb2xvcnMubGVuZ3RoID4gMCkgcmV0dXJuOyAvLyB5YSBsaXN0b3NcbiAgICBjb25zdCBjb2xzMSA9IGRldGVjdEF2YWlsYWJsZUNvbG9ycygpO1xuICAgIGlmIChjb2xzMS5sZW5ndGggPiAwKSB7IGdzLmF2YWlsYWJsZUNvbG9ycyA9IGNvbHMxOyByZXR1cm47IH1cbiAgICBpZiAoZmluZEFuZENsaWNrUGFpbnRCdXR0b24oKSkge1xuICAgICAgYXdhaXQgc2xlZXAoMjUwMCk7XG4gICAgICBjb25zdCBjb2xzMiA9IGRldGVjdEF2YWlsYWJsZUNvbG9ycygpO1xuICAgICAgaWYgKGNvbHMyLmxlbmd0aCA+IDApIHsgZ3MuYXZhaWxhYmxlQ29sb3JzID0gY29sczI7IHJldHVybjsgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZygnXHUyNkEwXHVGRTBGIGVuc3VyZUd1YXJkQ29sb3JzIGZhbGxvOicsIGUpO1xuICB9XG59XG5cbi8vIEFwbGljYXIgY29uZmlndXJhY2lcdTAwRjNuIHJlY2liaWRhIGRlc2RlIHNlcnZpZG9yXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXBwbHlHdWFyZENvbmZpZyhmdWxsQ29uZmlnLCBjaGFuZ2VkLCB7IG9uSW50ZXJ2YWxDaGFuZ2UgfSA9IHt9KSB7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgY29uc3QgeyBndWFyZFN0YXRlIH0gPSBhd2FpdCBpbXBvcnQoJy4uLy4uL2d1YXJkL2NvbmZpZy5qcycpO1xuICAgIGlmICghZ3VhcmRTdGF0ZS5jb25maWcpIGd1YXJkU3RhdGUuY29uZmlnID0ge307XG4gICAgY29uc3QgbWFwcGluZyA9IHtcbiAgICAgIHByb3RlY3Rpb25QYXR0ZXJuOiAncHJvdGVjdGlvblBhdHRlcm4nLFxuICAgICAgcHJlZmVyQ29sb3I6ICdwcmVmZXJDb2xvcicsXG4gICAgICBwcmVmZXJyZWRDb2xvcklkczogJ3ByZWZlcnJlZENvbG9ySWRzJyxcbiAgICAgIGV4Y2x1ZGVDb2xvcjogJ2V4Y2x1ZGVDb2xvcicsXG4gICAgICBleGNsdWRlZENvbG9ySWRzOiAnZXhjbHVkZWRDb2xvcklkcycsXG4gICAgICBzcGVuZEFsbFBpeGVsc09uU3RhcnQ6ICdzcGVuZEFsbFBpeGVsc09uU3RhcnQnLFxuICAgICAgbWluQ2hhcmdlc1RvV2FpdDogJ21pbkNoYXJnZXNUb1dhaXQnLFxuICAgICAgcGl4ZWxzUGVyQmF0Y2g6ICdwaXhlbHNQZXJCYXRjaCcsXG4gICAgICByYW5kb21XYWl0VGltZTogJ3JhbmRvbVdhaXRUaW1lJyxcbiAgICAgIHJhbmRvbVdhaXRNaW46ICdyYW5kb21XYWl0TWluJyxcbiAgICAgIHJhbmRvbVdhaXRNYXg6ICdyYW5kb21XYWl0TWF4JyxcbiAgICAgIHdhdGNoTW9kZTogJ3dhdGNoTW9kZSdcbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKG1hcHBpbmcpLmZvckVhY2goaz0+eyBpZiAoayBpbiBmdWxsQ29uZmlnKSBndWFyZFN0YXRlW21hcHBpbmdba11dID0gZnVsbENvbmZpZ1trXTsgfSk7XG4gICAgaWYgKHR5cGVvZiBmdWxsQ29uZmlnLmNvbG9yVGhyZXNob2xkID09PSAnbnVtYmVyJykgZ3VhcmRTdGF0ZS5jb25maWcuY29sb3JUaHJlc2hvbGQgPSBmdWxsQ29uZmlnLmNvbG9yVGhyZXNob2xkO1xuICAgIGlmICh0eXBlb2YgZnVsbENvbmZpZy5jb2xvckNvbXBhcmlzb25NZXRob2QgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBtZXRob2QgPSBmdWxsQ29uZmlnLmNvbG9yQ29tcGFyaXNvbk1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKCFndWFyZFN0YXRlLmNvbmZpZykgZ3VhcmRTdGF0ZS5jb25maWcgPSB7fTtcbiAgICAgIGd1YXJkU3RhdGUuY29uZmlnLmNvbG9yQ29tcGFyaXNvbk1ldGhvZCA9IChtZXRob2QgPT09ICdsYWInKSA/ICdsYWInIDogJ3JnYic7XG4gICAgfVxuICAgIGlmIChmdWxsQ29uZmlnLnJhbmRvbVdhaXRUaW1lICYmIHR5cGVvZiBmdWxsQ29uZmlnLnJhbmRvbVdhaXRNaW4gPT09ICdudW1iZXInICYmIHR5cGVvZiBmdWxsQ29uZmlnLnJhbmRvbVdhaXRNYXggPT09ICdudW1iZXInKSB7XG4gICAgICBjb25zdCBhdmcgPSAoZnVsbENvbmZpZy5yYW5kb21XYWl0TWluICsgZnVsbENvbmZpZy5yYW5kb21XYWl0TWF4KS8yO1xuICAgICAgY29uc3QgbXMgPSBNYXRoLm1heCg1MDAwLCBhdmcgKiAxMDAwKTtcbiAgICAgIG9uSW50ZXJ2YWxDaGFuZ2UgJiYgb25JbnRlcnZhbENoYW5nZShtcyk7XG4gICAgfVxuICAgIGxvZygnXHUyNjk5XHVGRTBGIEd1YXJkIGNvbmZpZyBhcGxpY2FkYSAobW9kdWxhciknKTtcbiAgfSBjYXRjaChlKXsgbG9nKCdcdTI2QTBcdUZFMEYgRXJyb3IgYXBsaWNhbmRvIGd1YXJkQ29uZmlnIChtb2R1bGFyKTonLCBlKTsgfVxufVxuXG4vLyBQcm9jZXNhciBndWFyZERhdGEgeSByZWNvbnN0cnVpciBlc3RhZG9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVHdWFyZERhdGEobWVzc2FnZSwgeyBzZXRNb2RlSWZOZWVkZWQsIHNlbmRQcmV2aWV3LCBzdGFydEFuYWx5c2lzTG9vcCB9KSB7XG4gIHRyeSB7XG4gICAgaWYgKCFtZXNzYWdlLmd1YXJkRGF0YSkgcmV0dXJuO1xuICAgIGNvbnN0IHsgZ3VhcmRTdGF0ZSB9ID0gYXdhaXQgaW1wb3J0KCcuLi8uLi9ndWFyZC9jb25maWcuanMnKTtcbiAgICBjb25zdCBkYXRhID0gbWVzc2FnZS5ndWFyZERhdGE7XG4gICAgY29uc3QgYXJlYSA9IGRhdGEucHJvdGVjdGlvbkRhdGE/LmFyZWEgfHwgZGF0YS5wcm90ZWN0aW9uQXJlYSB8fCBkYXRhLmFyZWE7XG4gICAgaWYgKCFhcmVhKSB7IGxvZygnXHUyNzRDIGd1YXJkRGF0YSBzaW4gXHUwMEUxcmVhIGRlIHByb3RlY2NpXHUwMEYzbicpOyByZXR1cm47IH1cbiAgICBndWFyZFN0YXRlLnByb3RlY3Rpb25BcmVhID0ge1xuICAgICAgeDE6IGFyZWEueDEgPz8gYXJlYS54ID8/IGFyZWEubGVmdCA/PyAwLFxuICAgICAgeTE6IGFyZWEueTEgPz8gYXJlYS55ID8/IGFyZWEudG9wID8/IDAsXG4gICAgICB4MjogYXJlYS54MiA/PyAoYXJlYS54MSA/PyBhcmVhLnggPz8gMCkgKyAoYXJlYS53aWR0aCA/PyAwKSxcbiAgICAgIHkyOiBhcmVhLnkyID8/IChhcmVhLnkxID8/IGFyZWEueSA/PyAwKSArIChhcmVhLmhlaWdodCA/PyAwKVxuICAgIH07XG4gICAgY29uc3Qgb3JpZ2luYWxQaXhlbHNBcnIgPSBkYXRhLm9yaWdpbmFsUGl4ZWxzIHx8IGRhdGEucHJvdGVjdGlvbkRhdGE/Lm9yaWdpbmFsUGl4ZWxzIHx8IFtdO1xuICAgIGd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBwIG9mIG9yaWdpbmFsUGl4ZWxzQXJyKSB7XG4gICAgICBjb25zdCBrZXkgPSBwLmtleSB8fCBgJHtwLmdsb2JhbFggPz8gcC54fSwke3AuZ2xvYmFsWSA/PyBwLnl9YDtcbiAgICAgIC8vIFByZWNhbGN1bGFyIExBQiBwYXJhIGNvbXBhcmFjaVx1MDBGM24gZnV0dXJhIHNpIHNlIGFjdGl2YSAnbGFiJ1xuICAgICAgY29uc3QgZW50cnkgPSB7IHI6IHAuciwgZzogcC5nLCBiOiBwLmIsIGNvbG9ySWQ6IHAuY29sb3JJZCB8fCBwLmlkIHx8IDAgfTtcbiAgICAgIGVudHJ5LmxhYiA9IHJnYlRvTGFiQXJyYXkocC5yLCBwLmcsIHAuYik7XG4gICAgICBndWFyZFN0YXRlLm9yaWdpbmFsUGl4ZWxzLnNldChrZXksIGVudHJ5KTtcbiAgICB9XG4gICAgbG9nKGBcdUQ4M0RcdURFRTFcdUZFMEYgR3VhcmREYXRhIHJlY2liaWRvIChtb2R1bGFyKTogYXJlYT0oJHtndWFyZFN0YXRlLnByb3RlY3Rpb25BcmVhLngxfSwke2d1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEueTF9KVx1MjE5Migke2d1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEueDJ9LCR7Z3VhcmRTdGF0ZS5wcm90ZWN0aW9uQXJlYS55Mn0pIHB4PSR7Z3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscy5zaXplfWApO1xuICAgIGd1YXJkU3RhdGUuY2hhbmdlcyA9IG5ldyBTZXQoKTtcbiAgICBndWFyZFN0YXRlLmxhc3RDaGVjayA9IERhdGUubm93KCk7XG4gICAgaWYgKHNldE1vZGVJZk5lZWRlZCkgYXdhaXQgc2V0TW9kZUlmTmVlZGVkKCk7XG4gICAgYXdhaXQgZW5zdXJlR3VhcmRDb2xvcnMoKTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHdpbmRvdy5ndWFyZFN0YXRlID0gZ3VhcmRTdGF0ZTtcbiAgICBjb25zdCBwcmV2aWV3ID0gYXdhaXQgZ2V0UHJldmlld0RhdGEoKTtcbiAgICBpZiAocHJldmlldyAmJiBzZW5kUHJldmlldykgc2VuZFByZXZpZXcocHJldmlldywgeyBpbW1lZGlhdGU6IHRydWUgfSk7XG4gICAgaWYgKHN0YXJ0QW5hbHlzaXNMb29wKSBzdGFydEFuYWx5c2lzTG9vcCgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nKCdcdTI3NEMgRXJyb3IgcHJvY2VzYW5kbyBndWFyZERhdGEgKG1vZHVsYXIpOicsIGUpO1xuICB9XG59XG5cbi8vIEdlbmVyYXIgZGF0b3MgZGUgcHJldmlldyAoc2ltaWxhciBhIHZlcnNpXHUwMEYzbiBpbmxpbmUpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UHJldmlld0RhdGEoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhd2luZG93Lmd1YXJkU3RhdGUpIHJldHVybiBudWxsO1xuICBjb25zdCBndWFyZFN0YXRlID0gd2luZG93Lmd1YXJkU3RhdGU7XG4gIGlmICghZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscyB8fCBndWFyZFN0YXRlLm9yaWdpbmFsUGl4ZWxzLnNpemUgPT09IDApIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGFuYWx5c2lzID0geyBjb3JyZWN0UGl4ZWxzOiAwLCBpbmNvcnJlY3RQaXhlbHM6IDAsIG1pc3NpbmdQaXhlbHM6IDAgfTtcbiAgY29uc3QgY29ycmVjdFBpeGVsc0xpc3QgPSBbXSwgaW5jb3JyZWN0UGl4ZWxzTGlzdCA9IFtdLCBtaXNzaW5nUGl4ZWxzTGlzdCA9IFtdLCBvcmlnaW5hbFBpeGVsc0xpc3QgPSBbXTtcbiAgY29uc3QgVE9UQUwgPSBndWFyZFN0YXRlLm9yaWdpbmFsUGl4ZWxzLnNpemU7XG4gIGNvbnN0IE1BWF9ERVRBSUxFRF9QSVhFTFMgPSAyMDAwMDAwOyAvLyBBdW1lbnRhZG8gcGFyYSBkYXRhc2V0cyBtdXkgZ3JhbmRlcyAoMk0gcFx1MDBFRHhlbGVzKVxuICBjb25zdCBNQVhfQVJSQVlfTEVOR1RIID0gMTAwMDAwMDsgLy8gU2luIGxcdTAwRURtaXRlIHByXHUwMEUxY3RpY28gcGFyYSB2aXN1YWxpemFjaVx1MDBGM24gY29tcGxldGFcbiAgY29uc3QgRE9fRlVMTF9ERVRBSUwgPSBUT1RBTCA8PSBNQVhfREVUQUlMRURfUElYRUxTO1xuICBsZXQgdHJ1bmNhdGVkID0gZmFsc2U7IGxldCBzYW1wbGVkID0gMDtcbiAgdHJ5IHtcbiAgICBsZXQgY3VycmVudFBpeGVscyA9IG51bGw7XG4gICAgaWYgKERPX0ZVTExfREVUQUlMKSB7XG4gICAgICBjdXJyZW50UGl4ZWxzID0gYXdhaXQgYW5hbHl6ZUFyZWFQaXhlbHMoZ3VhcmRTdGF0ZS5wcm90ZWN0aW9uQXJlYSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgb3JpZ2luYWxQaXhlbF0gb2YgZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscykge1xuICAgICAgY29uc3QgW3gsIHldID0ga2V5LnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgICBpZiAob3JpZ2luYWxQaXhlbHNMaXN0Lmxlbmd0aCA8IE1BWF9BUlJBWV9MRU5HVEgpIG9yaWdpbmFsUGl4ZWxzTGlzdC5wdXNoKHsgeCwgeSwgcjogb3JpZ2luYWxQaXhlbC5yLCBnOiBvcmlnaW5hbFBpeGVsLmcsIGI6IG9yaWdpbmFsUGl4ZWwuYiB9KTtcbiAgICAgIGlmIChET19GVUxMX0RFVEFJTCAmJiBjdXJyZW50UGl4ZWxzKSB7XG4gICAgICAgIGNvbnN0IGN1ciA9IGN1cnJlbnRQaXhlbHMuZ2V0KGtleSk7XG4gICAgICAgIGlmICghY3VyKSB7XG4gICAgICAgICAgYW5hbHlzaXMubWlzc2luZ1BpeGVscysrOyBpZiAobWlzc2luZ1BpeGVsc0xpc3QubGVuZ3RoIDwgTUFYX0FSUkFZX0xFTkdUSCkgbWlzc2luZ1BpeGVsc0xpc3QucHVzaCh7IHgsIHksIHI6IG9yaWdpbmFsUGl4ZWwuciwgZzogb3JpZ2luYWxQaXhlbC5nLCBiOiBvcmlnaW5hbFBpeGVsLmIgfSk7IGVsc2UgdHJ1bmNhdGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByRGlmZiA9IE1hdGguYWJzKG9yaWdpbmFsUGl4ZWwuciAtIGN1ci5yKTtcbiAgICAgICAgICBjb25zdCBnRGlmZiA9IE1hdGguYWJzKG9yaWdpbmFsUGl4ZWwuZyAtIGN1ci5nKTtcbiAgICAgICAgICBjb25zdCBiRGlmZiA9IE1hdGguYWJzKG9yaWdpbmFsUGl4ZWwuYiAtIGN1ci5iKTtcbiAgICAgICAgICBpZiAoTWF0aC5tYXgockRpZmYsIGdEaWZmLCBiRGlmZikgPD0gMTApIHtcbiAgICAgICAgICAgIGFuYWx5c2lzLmNvcnJlY3RQaXhlbHMrKzsgaWYgKGNvcnJlY3RQaXhlbHNMaXN0Lmxlbmd0aCA8IE1BWF9BUlJBWV9MRU5HVEgpIGNvcnJlY3RQaXhlbHNMaXN0LnB1c2goeyB4LCB5LCByOiBjdXIuciwgZzogY3VyLmcsIGI6IGN1ci5iIH0pOyBlbHNlIHRydW5jYXRlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuYWx5c2lzLmluY29ycmVjdFBpeGVscysrOyBpZiAoaW5jb3JyZWN0UGl4ZWxzTGlzdC5sZW5ndGggPCBNQVhfQVJSQVlfTEVOR1RIKSBpbmNvcnJlY3RQaXhlbHNMaXN0LnB1c2goeyB4LCB5LCByOiBjdXIuciwgZzogY3VyLmcsIGI6IGN1ci5iLCBvcmlnaW5hbFI6IG9yaWdpbmFsUGl4ZWwuciwgb3JpZ2luYWxHOiBvcmlnaW5hbFBpeGVsLmcsIG9yaWdpbmFsQjogb3JpZ2luYWxQaXhlbC5iIH0pOyBlbHNlIHRydW5jYXRlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFET19GVUxMX0RFVEFJTCkge1xuICAgICAgICAvLyBQYXJhIGRhdGFzZXRzIGdyYW5kZXMsIGNyZWFyIG11ZXN0cmFzIHJlcHJlc2VudGF0aXZhcyBiYXNhZGFzIGVuIGFuXHUwMEUxbGlzaXMgcHJldmlvXG4gICAgICAgIGlmIChndWFyZFN0YXRlLmxhc3RBbmFseXNpcz8uZGV0YWlscykge1xuICAgICAgICAgIGNvbnN0IGRldGFpbHMgPSBndWFyZFN0YXRlLmxhc3RBbmFseXNpcy5kZXRhaWxzO1xuICAgICAgICAgIGlmIChkZXRhaWxzLmNvcnJlY3QgJiYgZGV0YWlscy5jb3JyZWN0LmhhcyAmJiBkZXRhaWxzLmNvcnJlY3QuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGFuYWx5c2lzLmNvcnJlY3RQaXhlbHMrKzsgXG4gICAgICAgICAgICBpZiAoY29ycmVjdFBpeGVsc0xpc3QubGVuZ3RoIDwgTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICAgICAgICBjb3JyZWN0UGl4ZWxzTGlzdC5wdXNoKHsgeCwgeSwgcjogb3JpZ2luYWxQaXhlbC5yLCBnOiBvcmlnaW5hbFBpeGVsLmcsIGI6IG9yaWdpbmFsUGl4ZWwuYiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGRldGFpbHMuaW5jb3JyZWN0ICYmIGRldGFpbHMuaW5jb3JyZWN0LmhhcyAmJiBkZXRhaWxzLmluY29ycmVjdC5oYXMoa2V5KSkge1xuICAgICAgICAgICAgYW5hbHlzaXMuaW5jb3JyZWN0UGl4ZWxzKys7XG4gICAgICAgICAgICBpZiAoaW5jb3JyZWN0UGl4ZWxzTGlzdC5sZW5ndGggPCBNQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgICAgICAgIGluY29ycmVjdFBpeGVsc0xpc3QucHVzaCh7IHgsIHksIHI6IG9yaWdpbmFsUGl4ZWwuciwgZzogb3JpZ2luYWxQaXhlbC5nLCBiOiBvcmlnaW5hbFBpeGVsLmIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChkZXRhaWxzLm1pc3NpbmcgJiYgZGV0YWlscy5taXNzaW5nLmhhcyAmJiBkZXRhaWxzLm1pc3NpbmcuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGFuYWx5c2lzLm1pc3NpbmdQaXhlbHMrKztcbiAgICAgICAgICAgIGlmIChtaXNzaW5nUGl4ZWxzTGlzdC5sZW5ndGggPCBNQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgICAgICAgIG1pc3NpbmdQaXhlbHNMaXN0LnB1c2goeyB4LCB5LCByOiBvcmlnaW5hbFBpeGVsLnIsIGc6IG9yaWdpbmFsUGl4ZWwuZywgYjogb3JpZ2luYWxQaXhlbC5iIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2FtcGxlZCsrOyBpZiAoIURPX0ZVTExfREVUQUlMICYmIHNhbXBsZWQgPj0gMTAwMDApIGJyZWFrOyAvLyBBdW1lbnRhZG8gZGUgMzAwMCBhIDEwMDAwXG4gICAgfVxuICAgIGlmICghRE9fRlVMTF9ERVRBSUwpIHtcbiAgICAgIC8vIFBhcmEgZGF0YXNldHMgZ3JhbmRlcywgdXNhciBhblx1MDBFMWxpc2lzIHByZXZpbyBzaSBleGlzdGUgeSBnZW5lcmFyIG11ZXN0cmFzXG4gICAgICBpZiAoZ3VhcmRTdGF0ZS5sYXN0QW5hbHlzaXM/LnN1bW1hcnkpIHtcbiAgICAgICAgYW5hbHlzaXMuY29ycmVjdFBpeGVscyA9IGd1YXJkU3RhdGUubGFzdEFuYWx5c2lzLnN1bW1hcnkuY29ycmVjdDtcbiAgICAgICAgYW5hbHlzaXMuaW5jb3JyZWN0UGl4ZWxzID0gZ3VhcmRTdGF0ZS5sYXN0QW5hbHlzaXMuc3VtbWFyeS5pbmNvcnJlY3Q7XG4gICAgICAgIGFuYWx5c2lzLm1pc3NpbmdQaXhlbHMgPSBndWFyZFN0YXRlLmxhc3RBbmFseXNpcy5zdW1tYXJ5Lm1pc3Npbmc7XG4gICAgICAgIFxuICAgICAgICAvLyBHZW5lcmFyIG11ZXN0cmFzIHJlcHJlc2VudGF0aXZhcyBwYXJhIHZpc3VhbGl6YWNpXHUwMEYzbiBiYXNhZGFzIGVuIGxhc3RBbmFseXNpcy5kZXRhaWxzXG4gICAgICAgIGlmIChndWFyZFN0YXRlLmxhc3RBbmFseXNpcy5kZXRhaWxzKSB7XG4gICAgICAgICAgY29uc3QgZGV0YWlscyA9IGd1YXJkU3RhdGUubGFzdEFuYWx5c2lzLmRldGFpbHM7XG4gICAgICAgICAgY29uc3QgU0FNUExFX0xJTUlUID0gTUFYX0FSUkFZX0xFTkdUSDsgLy8gVXNhciBlbCBtaXNtbyBsXHUwMEVEbWl0ZSBhbHRvXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTXVlc3RyYSBkZSBwXHUwMEVEeGVsZXMgY29ycmVjdG9zXG4gICAgICAgICAgaWYgKGRldGFpbHMuY29ycmVjdCAmJiB0eXBlb2YgZGV0YWlscy5jb3JyZWN0LmtleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGxldCBjb3JyZWN0U2FtcGxlZCA9IDA7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBkZXRhaWxzLmNvcnJlY3Qua2V5cygpKSB7XG4gICAgICAgICAgICAgIGlmIChjb3JyZWN0U2FtcGxlZCA+PSBTQU1QTEVfTElNSVQpIGJyZWFrO1xuICAgICAgICAgICAgICBjb25zdCBbeCwgeV0gPSBrZXkuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxQaXhlbCA9IGd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgIGlmIChvcmlnaW5hbFBpeGVsKSB7XG4gICAgICAgICAgICAgICAgY29ycmVjdFBpeGVsc0xpc3QucHVzaCh7IHgsIHksIHI6IG9yaWdpbmFsUGl4ZWwuciwgZzogb3JpZ2luYWxQaXhlbC5nLCBiOiBvcmlnaW5hbFBpeGVsLmIgfSk7XG4gICAgICAgICAgICAgICAgY29ycmVjdFNhbXBsZWQrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNdWVzdHJhIGRlIHBcdTAwRUR4ZWxlcyBpbmNvcnJlY3RvcyAgXG4gICAgICAgICAgaWYgKGRldGFpbHMuaW5jb3JyZWN0ICYmIHR5cGVvZiBkZXRhaWxzLmluY29ycmVjdC5rZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBsZXQgaW5jb3JyZWN0U2FtcGxlZCA9IDA7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBkZXRhaWxzLmluY29ycmVjdC5rZXlzKCkpIHtcbiAgICAgICAgICAgICAgaWYgKGluY29ycmVjdFNhbXBsZWQgPj0gU0FNUExFX0xJTUlUKSBicmVhaztcbiAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0ga2V5LnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsUGl4ZWwgPSBndWFyZFN0YXRlLm9yaWdpbmFsUGl4ZWxzLmdldChrZXkpO1xuICAgICAgICAgICAgICBpZiAob3JpZ2luYWxQaXhlbCkge1xuICAgICAgICAgICAgICAgIGluY29ycmVjdFBpeGVsc0xpc3QucHVzaCh7IHgsIHksIHI6IG9yaWdpbmFsUGl4ZWwuciwgZzogb3JpZ2luYWxQaXhlbC5nLCBiOiBvcmlnaW5hbFBpeGVsLmIgfSk7XG4gICAgICAgICAgICAgICAgaW5jb3JyZWN0U2FtcGxlZCsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIE11ZXN0cmEgZGUgcFx1MDBFRHhlbGVzIGZhbHRhbnRlc1xuICAgICAgICAgIGlmIChkZXRhaWxzLm1pc3NpbmcgJiYgdHlwZW9mIGRldGFpbHMubWlzc2luZy5rZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBsZXQgbWlzc2luZ1NhbXBsZWQgPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgZGV0YWlscy5taXNzaW5nLmtleXMoKSkge1xuICAgICAgICAgICAgICBpZiAobWlzc2luZ1NhbXBsZWQgPj0gU0FNUExFX0xJTUlUKSBicmVhaztcbiAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0ga2V5LnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsUGl4ZWwgPSBndWFyZFN0YXRlLm9yaWdpbmFsUGl4ZWxzLmdldChrZXkpO1xuICAgICAgICAgICAgICBpZiAob3JpZ2luYWxQaXhlbCkge1xuICAgICAgICAgICAgICAgIG1pc3NpbmdQaXhlbHNMaXN0LnB1c2goeyB4LCB5LCByOiBvcmlnaW5hbFBpeGVsLnIsIGc6IG9yaWdpbmFsUGl4ZWwuZywgYjogb3JpZ2luYWxQaXhlbC5iIH0pO1xuICAgICAgICAgICAgICAgIG1pc3NpbmdTYW1wbGVkKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRmFsbGJhY2s6IGdlbmVyYXIgbXVlc3RyYXMgYWxlYXRvcmlhcyBkaXN0cmlidXllbmRvIHBvciBjYXRlZ29yXHUwMEVEYXMgZXN0aW1hZGFzXG4gICAgICAgICAgY29uc3Qgc2FtcGxlU2l6ZSA9IE1hdGgubWluKE1BWF9BUlJBWV9MRU5HVEgsIHNhbXBsZWQpO1xuICAgICAgICAgIGNvbnN0IGNvcnJlY3RSYXRpbyA9IGFuYWx5c2lzLmNvcnJlY3RQaXhlbHMgLyBUT1RBTDtcbiAgICAgICAgICBjb25zdCBpbmNvcnJlY3RSYXRpbyA9IGFuYWx5c2lzLmluY29ycmVjdFBpeGVscyAvIFRPVEFMO1xuICAgICAgICAgIGNvbnN0IG1pc3NpbmdSYXRpbyA9IGFuYWx5c2lzLm1pc3NpbmdQaXhlbHMgLyBUT1RBTDtcbiAgICAgICAgICBcbiAgICAgICAgICBsZXQgc2FtcGxlZENvdW50ID0gMDtcbiAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIG9yaWdpbmFsUGl4ZWxdIG9mIGd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMpIHtcbiAgICAgICAgICAgIGlmIChzYW1wbGVkQ291bnQgPj0gc2FtcGxlU2l6ZSkgYnJlYWs7XG4gICAgICAgICAgICBjb25zdCBbeCwgeV0gPSBrZXkuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgICAgICAgIGNvbnN0IHJhbmQgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocmFuZCA8IGNvcnJlY3RSYXRpbyAmJiBjb3JyZWN0UGl4ZWxzTGlzdC5sZW5ndGggPCBNQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgICAgICAgIGNvcnJlY3RQaXhlbHNMaXN0LnB1c2goeyB4LCB5LCByOiBvcmlnaW5hbFBpeGVsLnIsIGc6IG9yaWdpbmFsUGl4ZWwuZywgYjogb3JpZ2luYWxQaXhlbC5iIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyYW5kIDwgY29ycmVjdFJhdGlvICsgaW5jb3JyZWN0UmF0aW8gJiYgaW5jb3JyZWN0UGl4ZWxzTGlzdC5sZW5ndGggPCBNQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgICAgICAgIGluY29ycmVjdFBpeGVsc0xpc3QucHVzaCh7IHgsIHksIHI6IG9yaWdpbmFsUGl4ZWwuciwgZzogb3JpZ2luYWxQaXhlbC5nLCBiOiBvcmlnaW5hbFBpeGVsLmIgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJhbmQgPCBjb3JyZWN0UmF0aW8gKyBpbmNvcnJlY3RSYXRpbyArIG1pc3NpbmdSYXRpbyAmJiBtaXNzaW5nUGl4ZWxzTGlzdC5sZW5ndGggPCBNQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgICAgICAgIG1pc3NpbmdQaXhlbHNMaXN0LnB1c2goeyB4LCB5LCByOiBvcmlnaW5hbFBpeGVsLnIsIGc6IG9yaWdpbmFsUGl4ZWwuZywgYjogb3JpZ2luYWxQaXhlbC5iIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2FtcGxlZENvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhbmFseXNpcy5lc3RpbWF0ZWQgPSB0cnVlOyBhbmFseXNpcy5zYW1wbGVkID0gc2FtcGxlZDsgYW5hbHlzaXMudG90YWwgPSBUT1RBTDsgYW5hbHlzaXMubm90ZSA9ICdQcmV2aWV3IHJlc3VtaWRhIChlc3RpbWFkYSknO1xuICAgIH1cbiAgICBpZiAodHJ1bmNhdGVkKSBhbmFseXNpcy50cnVuY2F0ZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGFuYWx5emluZyBwaXhlbHMgZm9yIHByZXZpZXcgKG1vZHVsYXIpJywgZXJyKTtcbiAgICBhbmFseXNpcy5jb3JyZWN0UGl4ZWxzID0gZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscy5zaXplIC0gKGd1YXJkU3RhdGUuY2hhbmdlcyA/IGd1YXJkU3RhdGUuY2hhbmdlcy5zaXplIDogMCk7XG4gICAgYW5hbHlzaXMuaW5jb3JyZWN0UGl4ZWxzID0gZ3VhcmRTdGF0ZS5jaGFuZ2VzID8gZ3VhcmRTdGF0ZS5jaGFuZ2VzLnNpemUgOiAwO1xuICAgIGFuYWx5c2lzLm1pc3NpbmdQaXhlbHMgPSAwOyBhbmFseXNpcy50cnVuY2F0ZWQgPSB0cnVlOyBhbmFseXNpcy5mYWxsYmFjayA9IHRydWU7XG4gIH1cblxuICBjb25zdCB0b3RhbFBpeGVscyA9IGd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMuc2l6ZTtcbiAgLy8gRWxpbWluYXIgbFx1MDBFRG1pdGVzIGFydGlmaWNpYWxlcyBwYXJhIHBlcm1pdGlyIHZpc3VhbGl6YWNpXHUwMEYzbiBjb21wbGV0YSBkZSBkYXRhc2V0cyBncmFuZGVzXG4gIC8vIGNvbnN0IFZJU1VBTElaQVRJT05fTElNSVQgPSAxNTAwMDsgLy8gUkVNT1ZJRE8gLSBzaW4gbFx1MDBFRG1pdGVzIGFydGlmaWNpYWxlc1xuICAvLyBObyBhcGxpY2FyIHRydW5jYWRvIGF1dG9tXHUwMEUxdGljbyBwYXJhIGRhdGFzZXRzIGdyYW5kZXNcblxuICByZXR1cm4ge1xuICAgIHByb3RlY3RlZEFyZWE6IGd1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEsXG4gICAgYW5hbHlzaXMsXG4gICAgb3JpZ2luYWxQaXhlbHM6IG9yaWdpbmFsUGl4ZWxzTGlzdCxcbiAgICBjb3JyZWN0UGl4ZWxzTGlzdCxcbiAgICBpbmNvcnJlY3RQaXhlbHNMaXN0LFxuICAgIG1pc3NpbmdQaXhlbHNMaXN0LFxuICAgIGNoYW5nZXM6IGd1YXJkU3RhdGUuY2hhbmdlcyA/IEFycmF5LmZyb20oZ3VhcmRTdGF0ZS5jaGFuZ2VzKSA6IFtdLFxuICAgIHRvdGFsUGl4ZWxzLFxuICAgIGxhc3RDaGVjazogZ3VhcmRTdGF0ZS5sYXN0Q2hlY2sgfHwgRGF0ZS5ub3coKSxcbiAgaXNWaXJ0dWFsQXJlYTogZ3VhcmRTdGF0ZS5pc1ZpcnR1YWxBcmVhIHx8IGZhbHNlLFxuICBtZXRob2Q6IChndWFyZFN0YXRlLmNvbmZpZyAmJiBndWFyZFN0YXRlLmNvbmZpZy5jb2xvckNvbXBhcmlzb25NZXRob2QpIHx8ICdyZ2InLFxuICBhdmFpbGFibGVDb2xvcnM6IEFycmF5LmlzQXJyYXkoZ3VhcmRTdGF0ZS5hdmFpbGFibGVDb2xvcnMpXG4gICAgICA/IGd1YXJkU3RhdGUuYXZhaWxhYmxlQ29sb3JzLm1hcChjID0+ICh7IGlkOiBjLmlkID8/IGMuY29sb3JJZCA/PyAwLCByOiBjLnIsIGc6IGMuZywgYjogYy5iIH0pKVxuICAgICAgOiBbXVxuICB9O1xufVxuXG4vLyBCdWNsZSBkZSBhblx1MDBFMWxpc2lzIGhlYWRsZXNzXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRHdWFyZEFuYWx5c2lzTG9vcCh7IHNlbmRQcmV2aWV3IH0gPSB7fSkge1xuICBpZiAoZ3VhcmRSdW50aW1lLmFuYWx5c2lzSW50ZXJ2YWwpIHJldHVybjtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cuZ3VhcmRTdGF0ZSkgcmV0dXJuO1xuICBsb2coJ1x1RDgzRFx1REQwNCBJbmljaWFuZG8gbG9vcCBhblx1MDBFMWxpc2lzIEd1YXJkIChtb2R1bGFyKScpO1xuICBndWFyZFJ1bnRpbWUuYW5hbHlzaXNJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgcGVyZm9ybUd1YXJkQW5hbHlzaXMoeyBzZW5kUHJldmlldyB9KS5jYXRjaChlPT5sb2coJ1x1MjZBMFx1RkUwRiBFcnJvciBhblx1MDBFMWxpc2lzIEd1YXJkIG1vZHVsYXI6JywgZSkpO1xuICB9LCBndWFyZFJ1bnRpbWUuaW50ZXJ2YWxNcyk7XG4gIHBlcmZvcm1HdWFyZEFuYWx5c2lzKHsgc2VuZFByZXZpZXcgfSkuY2F0Y2goKCk9Pnt9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BHdWFyZEFuYWx5c2lzTG9vcCgpIHtcbiAgaWYgKGd1YXJkUnVudGltZS5hbmFseXNpc0ludGVydmFsKSB7XG4gIHdpbmRvdy5jbGVhckludGVydmFsKGd1YXJkUnVudGltZS5hbmFseXNpc0ludGVydmFsKTtcbiAgICBndWFyZFJ1bnRpbWUuYW5hbHlzaXNJbnRlcnZhbCA9IG51bGw7XG4gIH1cbn1cblxuLy8gPT09PT0gQXV0b21hY2lcdTAwRjNuIGF2YW56YWRhOiBtb25pdG9yZW8gZGUgY2FyZ2FzIHkgZGlzcGFybyBkZSByZXBhcmFjaW9uZXMgPT09PT1cbmV4cG9ydCBmdW5jdGlvbiBzdGFydEd1YXJkQXV0b21hdGlvbih7IHNlbmRQcmV2aWV3LCBzZW5kUmVwYWlyU3VnZ2VzdGlvbiB9ID0ge30pIHtcbiAgaWYgKGd1YXJkUnVudGltZS5hdXRvbWF0aW9uSW50ZXJ2YWwpIHJldHVybjtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cuZ3VhcmRTdGF0ZSkgcmV0dXJuO1xuICBsb2coJ1x1RDgzRVx1REQxNiBJbmljaWFuZG8gYXV0b21hdGl6YWNpXHUwMEYzbiBHdWFyZCAobW9uaXRvcmVvK2F1dG8tcmVwYWlyKScpO1xuICAvLyBBblx1MDBFMWxpc2lzIGJhc2UgYXJyYW5jYSB0YW1iaVx1MDBFOW4gc2kgbm8gZXN0XHUwMEUxXG4gIGlmICghZ3VhcmRSdW50aW1lLmFuYWx5c2lzSW50ZXJ2YWwpIHN0YXJ0R3VhcmRBbmFseXNpc0xvb3AoeyBzZW5kUHJldmlldyB9KTtcbiAgZ3VhcmRSdW50aW1lLmF1dG9tYXRpb25JbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGdzID0gd2luZG93Lmd1YXJkU3RhdGU7XG4gICAgICBpZiAoIWdzKSByZXR1cm47XG4gICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgLy8gUmVnbGFzIGRlIGVzcGVyYSBkZSBjYXJnYXNcbiAgICAgIGNvbnN0IG1pbkNoYXJnZXMgPSBncy5taW5DaGFyZ2VzVG9XYWl0IHx8IDA7XG4gICAgICBjb25zdCBjdXJyZW50Q2hhcmdlcyA9IGdzLmN1cnJlbnRDaGFyZ2VzIHx8IDA7XG4gICAgICBpZiAoY3VycmVudENoYXJnZXMgPCBtaW5DaGFyZ2VzKSB7XG4gICAgICAgIHJldHVybjsgLy8gZXNwZXJhciByZWNhcmdhXG4gICAgICB9XG4gICAgICAvLyBSYW5kb20gd2FpdCBzaSBoYWJpbGl0YWRvXG4gICAgICBpZiAoZ3MucmFuZG9tV2FpdFRpbWUgJiYgZ3MucmFuZG9tV2FpdE1pbiAhPSBudWxsICYmIGdzLnJhbmRvbVdhaXRNYXggIT0gbnVsbCkge1xuICAgICAgICBpZiAobm93IDwgZ3VhcmRSdW50aW1lLm5leHRSZXBhaXJFYXJsaWVzdCkgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gU2kgaGF5IGFuXHUwMEUxbGlzaXMgcmVjaWVudGUgY29uIGRpZmZzXG4gICAgICBjb25zdCBkaWZmcyA9IGdzLmxhc3RBbmFseXNpcz8uZGlmZnNTYW1wbGUgfHwgW107XG4gICAgICBpZiAoIWRpZmZzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgLy8gRWplY3V0YXIgcmVwYXJhY2lcdTAwRjNuIGF1dG9tXHUwMEUxdGljYSAoc1x1MDBGM2xvIHNpIG5vIHdhdGNoTW9kZSlcbiAgICAgIGlmICghZ3Mud2F0Y2hNb2RlKSB7XG4gICAgICAgIGNvbnN0IGF1dG8gPSBhd2FpdCBtYW51YWxSZXBhaXIoe30sIHsgc2VuZFByZXZpZXcgfSk7XG4gICAgICAgIGlmIChhdXRvICYmIGF1dG8ucGl4ZWxzICYmIGF1dG8ucGl4ZWxzLmxlbmd0aCkge1xuICAgICAgICAgIHNlbmRSZXBhaXJTdWdnZXN0aW9uICYmIHNlbmRSZXBhaXJTdWdnZXN0aW9uKGF1dG8pO1xuICAgICAgICAgIHRyeSB7IHRyYWNrRXZlbnQoJ2F1dG9fcmVwYWlyX3RyaWdnZXInLCB7IGJvdFZhcmlhbnQ6ICdzbGF2ZS1ndWFyZCcsIG1ldGFkYXRhOiB7IHBpeGVsczogYXV0by5waXhlbHMubGVuZ3RoLCBwYXR0ZXJuOiBhdXRvLnBhdHRlcm5Vc2VkIH0gfSk7IH0gY2F0Y2gge31cbiAgICAgICAgICAvLyBBanVzdGFyIHByXHUwMEYzeGltbyB0aWVtcG8gZGUgcmVwYXJhY2lcdTAwRjNuIHNpIHJhbmRvbVdhaXQgYWN0aXZvXG4gICAgICAgICAgaWYgKGdzLnJhbmRvbVdhaXRUaW1lKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5NcyA9IE1hdGgubWF4KDEwMDAsIChncy5yYW5kb21XYWl0TWluIHx8IDUpICogMTAwMCk7XG4gICAgICAgICAgICBjb25zdCBtYXhNcyA9IE1hdGgubWF4KG1pbk1zLCAoZ3MucmFuZG9tV2FpdE1heCB8fCAxNSkgKiAxMDAwKTtcbiAgICAgICAgICAgIGNvbnN0IHdhaXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4TXMgLSBtaW5NcyArIDEpKSArIG1pbk1zO1xuICAgICAgICAgICAgZ3VhcmRSdW50aW1lLm5leHRSZXBhaXJFYXJsaWVzdCA9IERhdGUubm93KCkgKyB3YWl0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBndWFyZFJ1bnRpbWUubmV4dFJlcGFpckVhcmxpZXN0ID0gRGF0ZS5ub3coKSArIGd1YXJkUnVudGltZS5pbnRlcnZhbE1zO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZygnXHUyNkEwXHVGRTBGIEVycm9yIGVuIGF1dG9tYXRpb24gbG9vcCBHdWFyZDonLCBlKTtcbiAgICB9XG4gIH0sIDUwMDApOyAvLyBjaWNsbyBmcmVjdWVudGUgcGFyYSByZWFjY2lvbmFyIHJcdTAwRTFwaWRvXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wR3VhcmRBdXRvbWF0aW9uKCkge1xuICBpZiAoZ3VhcmRSdW50aW1lLmF1dG9tYXRpb25JbnRlcnZhbCkge1xuICAgIHdpbmRvdy5jbGVhckludGVydmFsKGd1YXJkUnVudGltZS5hdXRvbWF0aW9uSW50ZXJ2YWwpO1xuICAgIGd1YXJkUnVudGltZS5hdXRvbWF0aW9uSW50ZXJ2YWwgPSBudWxsO1xuICB9XG59XG5cbi8vIExpbXBpYSBlbCBlc3RhZG8gZGUgR3VhcmQgeSBkZXRpZW5lIGJ1Y2xlcywgZGVqYW5kbyBlbCBzaXN0ZW1hIGVuIG1vZG8gb2JzZXJ2YWNpXHUwMEYzbiAod2F0Y2gpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xlYXJHdWFyZFN0YXRlKCkge1xuICB0cnkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGNvbnN0IHsgZ3VhcmRTdGF0ZSB9ID0gYXdhaXQgaW1wb3J0KCcuLi8uLi9ndWFyZC9jb25maWcuanMnKTtcbiAgICAvLyBEZXRlbmVyIGJ1Y2xlcyBhY3Rpdm9zXG4gICAgc3RvcEd1YXJkQXV0b21hdGlvbigpO1xuICAgIHN0b3BHdWFyZEFuYWx5c2lzTG9vcCgpO1xuICAgIC8vIFJlc2V0IGRlIGVzdGFkbyBwcmluY2lwYWxcbiAgICBndWFyZFN0YXRlLm9yaWdpbmFsUGl4ZWxzID0gbmV3IE1hcCgpO1xuICAgIGd1YXJkU3RhdGUuY2hhbmdlcyA9IG5ldyBTZXQoKTtcbiAgICBndWFyZFN0YXRlLmxhc3RBbmFseXNpcyA9IG51bGw7XG4gICAgZ3VhcmRTdGF0ZS5sYXN0Q2hlY2sgPSAwO1xuICAgIGd1YXJkU3RhdGUuX3NwZW50QWxsT25jZSA9IGZhbHNlO1xuICAgIC8vIE1hbnRlbmVyIGF2YWlsYWJsZUNvbG9ycyBwb3Igc2kgc2VndWltb3Mgb2JzZXJ2YW5kbzsgbGltcGlhciBcdTAwRTFyZWEgcHJvdGVnaWRhXG4gICAgZ3VhcmRTdGF0ZS5wcm90ZWN0aW9uQXJlYSA9IG51bGw7XG4gICAgLy8gRm9yemFyIG1vZG8gb2JzZXJ2YWNpXHUwMEYzbiBwYXJhIHF1ZWRhciBpZGxlIChubyBhdXRvcGludGFyKVxuICAgIGd1YXJkU3RhdGUud2F0Y2hNb2RlID0gdHJ1ZTtcbiAgICAvLyBOb3RpZmljYXIgZW4gY29uc29sYVxuICAgIGxvZygnXHVEODNFXHVEREY5IEd1YXJkIHN0YXRlIGNsZWFyZWQgKG1vZHVsYXIpOiByZXNldCBkZSBwaXhlbGVzL2FuYWxpc2lzIHkgd2F0Y2hNb2RlPXRydWUnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZygnXHUyNkEwXHVGRTBGIEVycm9yIGFsIGxpbXBpYXIgR3VhcmQgc3RhdGUgKG1vZHVsYXIpOicsIGUpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBBblx1MDBFMWxpc2lzIGRpZmVyZW5jaWFsXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGVyZm9ybUd1YXJkQW5hbHlzaXMoeyBzZW5kUHJldmlldywgZm9yY2UgfSA9IHt9KSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhd2luZG93Lmd1YXJkU3RhdGUpIHJldHVybjtcbiAgY29uc3QgZ3VhcmRTdGF0ZSA9IHdpbmRvdy5ndWFyZFN0YXRlO1xuICBpZiAoIWd1YXJkU3RhdGUgfHwgIWd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMgfHwgZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscy5zaXplID09PSAwKSByZXR1cm47XG4gIGlmIChndWFyZFN0YXRlLndhdGNoTW9kZSAmJiAhZm9yY2UpIHJldHVybjsgLy8gbm8gcmVjYWxjdWxhciBlbiB3YXRjaE1vZGUgc2Fsdm8gcXVlIHNlIGZ1ZXJjZVxuICBhd2FpdCBlbnN1cmVHdWFyZENvbG9ycygpO1xuICBpZiAoIWd1YXJkU3RhdGUuYXZhaWxhYmxlQ29sb3JzIHx8IGd1YXJkU3RhdGUuYXZhaWxhYmxlQ29sb3JzLmxlbmd0aCA9PT0gMCkgeyBsb2coJ1x1MjZBMFx1RkUwRiBBblx1MDBFMWxpc2lzIG9taXRpZG86IHNpbiBjb2xvcmVzJyk7IHJldHVybjsgfVxuICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gIGxldCBjdXJyZW50UGl4ZWxzO1xuICB0cnkge1xuICAgIGN1cnJlbnRQaXhlbHMgPSBhd2FpdCBhbmFseXplQXJlYVBpeGVscyhndWFyZFN0YXRlLnByb3RlY3Rpb25BcmVhKTtcbiAgfSBjYXRjaCAoZSkgeyBsb2coJ1x1MjZBMFx1RkUwRiBFcnJvciBhbmFsaXphbmRvIFx1MDBFMXJlYSAobW9kdWxhcik6JywgZSk7IHJldHVybjsgfVxuICBjb25zdCB0b3RhbCA9IGd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMuc2l6ZTtcbiAgY29uc3QgZGlmZnMgPSBbXTtcbiAgY29uc3QgTUFYX0RJRkZTID0gNTAwMDtcbiAgLy8gU2luIGxcdTAwRURtaXRlcyBhcnRpZmljaWFsZXMgcGFyYSBwcmV2aWV3IGNvbXBsZXRvXG4gIGNvbnN0IFBSRVZJRVdfTElNSVQgPSAxMDAwMDAwOyAvLyBMXHUwMEVEbWl0ZSBtdXkgYWx0byBwYXJhIHBlcm1pdGlyIGRhdGFzZXRzIGdyYW5kZXNcbiAgY29uc3Qgb3JpZ2luYWxQaXhlbHNMaXN0ID0gW107XG4gIGNvbnN0IGNvcnJlY3RQaXhlbHNMaXN0ID0gW107XG4gIGNvbnN0IGluY29ycmVjdFBpeGVsc0xpc3QgPSBbXTtcbiAgY29uc3QgbWlzc2luZ1BpeGVsc0xpc3QgPSBbXTtcbiAgbGV0IGNvcnJlY3QgPSAwLCBpbmNvcnJlY3QgPSAwLCBtaXNzaW5nID0gMDtcbiAgY29uc3QgdGhyZXNob2xkID0gKGd1YXJkU3RhdGUuY29uZmlnICYmIHR5cGVvZiBndWFyZFN0YXRlLmNvbmZpZy5jb2xvclRocmVzaG9sZCA9PT0gJ251bWJlcicpID8gZ3VhcmRTdGF0ZS5jb25maWcuY29sb3JUaHJlc2hvbGQgOiAxMDtcbiAgY29uc3QgbWV0aG9kID0gKGd1YXJkU3RhdGUuY29uZmlnICYmIGd1YXJkU3RhdGUuY29uZmlnLmNvbG9yQ29tcGFyaXNvbk1ldGhvZCkgfHwgJ3JnYic7XG4gIGZvciAoY29uc3QgW2tleSwgb3JpZ2luYWxQaXhlbF0gb2YgZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscykge1xuICAgIC8vIFJlZ2lzdHJhciBwXHUwMEVEeGVsZXMgb3JpZ2luYWxlcyBwYXJhIGRhciBjb250ZXh0byBhbCBwcmV2aWV3XG4gICAgaWYgKG9yaWdpbmFsUGl4ZWxzTGlzdC5sZW5ndGggPCBQUkVWSUVXX0xJTUlUKSB7XG4gICAgICBjb25zdCBbb3gsIG95XSA9IGtleS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgb3JpZ2luYWxQaXhlbHNMaXN0LnB1c2goeyB4OiBveCwgeTogb3ksIHI6IG9yaWdpbmFsUGl4ZWwuciwgZzogb3JpZ2luYWxQaXhlbC5nLCBiOiBvcmlnaW5hbFBpeGVsLmIgfSk7XG4gICAgfVxuICAgIGNvbnN0IGN1ciA9IGN1cnJlbnRQaXhlbHMuZ2V0KGtleSk7XG4gICAgaWYgKCFjdXIpIHtcbiAgICAgIG1pc3NpbmcrKztcbiAgICAgIGNvbnN0IFt4LHldPWtleS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgaWYgKGRpZmZzLmxlbmd0aCA8IE1BWF9ESUZGUykgeyBkaWZmcy5wdXNoKHsgeCx5LHR5cGU6J21pc3NpbmcnLCBleHBlY3RlZENvbG9yOiBvcmlnaW5hbFBpeGVsLmNvbG9ySWQgfSk7IH1cbiAgICAgIC8vIEFncmVnYXIgYSBsaXN0YSBkZSBmYWx0YW50ZXMgcGFyYSBwcmV2aWV3XG4gICAgICBpZiAobWlzc2luZ1BpeGVsc0xpc3QubGVuZ3RoIDwgUFJFVklFV19MSU1JVCkge1xuICAgICAgICBtaXNzaW5nUGl4ZWxzTGlzdC5wdXNoKHsgeCwgeSwgcjogb3JpZ2luYWxQaXhlbC5yLCBnOiBvcmlnaW5hbFBpeGVsLmcsIGI6IG9yaWdpbmFsUGl4ZWwuYiB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsZXQgaXNNYXRjaDtcbiAgICBpZiAobWV0aG9kID09PSAnbGFiJykge1xuICAgICAgLy8gQ2FsY3VsYXIgTEFCIGFjdHVhbCBiYWpvIGRlbWFuZGEgKG5vIGNhY2hlYWRvIGFcdTAwRkFuKTsgc2UgcG9kclx1MDBFRGEgY2FjaGVhciB0YW1iaVx1MDBFOW5cbiAgICAgIGNvbnN0IGN1ckxhYiA9IHJnYlRvTGFiQXJyYXkoY3VyLnIsIGN1ci5nLCBjdXIuYik7XG4gICAgICBjb25zdCBvcmlnTGFiID0gb3JpZ2luYWxQaXhlbC5sYWIgfHwgcmdiVG9MYWJBcnJheShvcmlnaW5hbFBpeGVsLnIsIG9yaWdpbmFsUGl4ZWwuZywgb3JpZ2luYWxQaXhlbC5iKTtcbiAgICAgIGNvbnN0IGRFID0gZGVsdGFFNzYob3JpZ0xhYiwgY3VyTGFiKTtcbiAgICAgIGlzTWF0Y2ggPSBkRSA8PSB0aHJlc2hvbGQ7IC8vIFJldXRpbGl6YSB0aHJlc2hvbGQgcGFyYSBMQUIgKGNvbmZpZ3VyYWJsZSBhIGZ1dHVybyBzZXBhcmFkbylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWF4RGlmZiA9IE1hdGgubWF4KE1hdGguYWJzKG9yaWdpbmFsUGl4ZWwuciAtIGN1ci5yKSwgTWF0aC5hYnMob3JpZ2luYWxQaXhlbC5nIC0gY3VyLmcpLCBNYXRoLmFicyhvcmlnaW5hbFBpeGVsLmIgLSBjdXIuYikpO1xuICAgICAgaXNNYXRjaCA9IG1heERpZmYgPD0gdGhyZXNob2xkO1xuICAgIH1cbiAgICBjb25zdCBbeCx5XT1rZXkuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgY29ycmVjdCsrO1xuICAgICAgLy8gQWdyZWdhciBhIGxpc3RhIGRlIGNvcnJlY3RvcyBwYXJhIHByZXZpZXdcbiAgICAgIGlmIChjb3JyZWN0UGl4ZWxzTGlzdC5sZW5ndGggPCBQUkVWSUVXX0xJTUlUKSB7XG4gICAgICAgIC8vIENvbG9yIGFjdHVhbCAoY3VyKSBvIGVsIG9yaWdpbmFsOyB1c2Ftb3MgY3VyIHBhcmEgcmVmbGVqYXIgcGFudGFsbGEgYWN0dWFsXG4gICAgICAgIGNvcnJlY3RQaXhlbHNMaXN0LnB1c2goeyB4LCB5LCByOiBjdXIuciwgZzogY3VyLmcsIGI6IGN1ci5iIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmNvcnJlY3QrKztcbiAgICAgIGlmIChkaWZmcy5sZW5ndGggPCBNQVhfRElGRlMpIHsgZGlmZnMucHVzaCh7IHgseSx0eXBlOidpbmNvcnJlY3QnLCBleHBlY3RlZENvbG9yOiBvcmlnaW5hbFBpeGVsLmNvbG9ySWQsIGN1cnJlbnRDb2xvcjogY3VyLmNvbG9ySWQgfSk7IH1cbiAgICAgIC8vIEFncmVnYXIgYSBsaXN0YSBkZSBpbmNvcnJlY3RvcyBwYXJhIHByZXZpZXcgKGNvbiBjb2xvciBhY3R1YWwgeSBvcmlnaW5hbClcbiAgICAgIGlmIChpbmNvcnJlY3RQaXhlbHNMaXN0Lmxlbmd0aCA8IFBSRVZJRVdfTElNSVQpIHtcbiAgICAgICAgaW5jb3JyZWN0UGl4ZWxzTGlzdC5wdXNoKHsgeCwgeSwgcjogY3VyLnIsIGc6IGN1ci5nLCBiOiBjdXIuYiwgb3JpZ2luYWxSOiBvcmlnaW5hbFBpeGVsLnIsIG9yaWdpbmFsRzogb3JpZ2luYWxQaXhlbC5nLCBvcmlnaW5hbEI6IG9yaWdpbmFsUGl4ZWwuYiB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgYWNjdXJhY3kgPSB0b3RhbCA+IDAgPyAoKGNvcnJlY3QgLyB0b3RhbCkgKiAxMDApLnRvRml4ZWQoMikgOiAnMC4wMCc7XG4gIHRyeSB7IHRyYWNrRXZlbnQoJ2FuYWx5c2lzX3N1bW1hcnknLCB7IGJvdFZhcmlhbnQ6ICdzbGF2ZS1ndWFyZCcsIG1ldGFkYXRhOiB7IHRvdGFsLCBjb3JyZWN0LCBpbmNvcnJlY3QsIG1pc3NpbmcsIGFjY3VyYWN5LCBtZXRob2QsIGR1cmF0aW9uTXM6IERhdGUubm93KCktc3RhcnQgfSB9KTsgfSBjYXRjaCB7fVxuICBndWFyZFN0YXRlLmNoYW5nZXMgPSBuZXcgU2V0KGRpZmZzLmZpbHRlcihkPT5kLnR5cGUgIT09ICdtaXNzaW5nJykubWFwKGQ9PmAke2QueH0sJHtkLnl9YCkpO1xuICBndWFyZFN0YXRlLmxhc3RDaGVjayA9IERhdGUubm93KCk7XG4gIGd1YXJkU3RhdGUubGFzdEFuYWx5c2lzID0geyBzdW1tYXJ5OiB7IHRvdGFsLCBjb3JyZWN0LCBpbmNvcnJlY3QsIG1pc3NpbmcsIGFjY3VyYWN5IH0sIGRpZmZzU2FtcGxlOiBkaWZmcywgZ2VuZXJhdGVkQXQ6IERhdGUubm93KCksIGR1cmF0aW9uTXM6IChEYXRlLm5vdygpLXN0YXJ0KS50b1N0cmluZygpIH07XG4gIGlmIChzZW5kUHJldmlldykge1xuICAgIC8vIE1hcmNhciBzaSB0cnVuY2Ftb3MgYWxndW5hIGRlIGxhcyBsaXN0YXMgZGUgcHJldmlldyAocHJcdTAwRTFjdGljYW1lbnRlIG51bmNhIGNvbiBlbCBudWV2byBsXHUwMEVEbWl0ZSBhbHRvKVxuICAgIGNvbnN0IHByZXZpZXdUcnVuY2F0ZWQgPSBvcmlnaW5hbFBpeGVsc0xpc3QubGVuZ3RoID49IFBSRVZJRVdfTElNSVQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdFBpeGVsc0xpc3QubGVuZ3RoID49IFBSRVZJRVdfTElNSVQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jb3JyZWN0UGl4ZWxzTGlzdC5sZW5ndGggPj0gUFJFVklFV19MSU1JVCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nUGl4ZWxzTGlzdC5sZW5ndGggPj0gUFJFVklFV19MSU1JVDtcbiAgICBzZW5kUHJldmlldyh7XG4gICAgICBwcm90ZWN0ZWRBcmVhOiBndWFyZFN0YXRlLnByb3RlY3Rpb25BcmVhLFxuICAgICAgYW5hbHlzaXM6IHsgY29ycmVjdFBpeGVsczogY29ycmVjdCwgaW5jb3JyZWN0UGl4ZWxzOiBpbmNvcnJlY3QsIG1pc3NpbmdQaXhlbHM6IG1pc3NpbmcsIGFjY3VyYWN5OiBhY2N1cmFjeSArICclJywgdHJ1bmNhdGVkOiAoZGlmZnMubGVuZ3RoID49IE1BWF9ESUZGUykgfHwgcHJldmlld1RydW5jYXRlZCwgbWV0aG9kIH0sXG4gICAgICB0b3RhbFBpeGVsczogdG90YWwsXG4gICAgICAvLyBVc2Ftb3MgbGEgY2xhdmUgZXNwZXJhZGEgcG9yIGxhIFVJOiBvcmlnaW5hbFBpeGVscy4gRW52aWFtb3MgdGFtYmlcdTAwRTluIG9yaWdpbmFsUGl4ZWxzTGlzdCBwb3IgY29tcGF0aWJpbGlkYWQuXG4gICAgICBvcmlnaW5hbFBpeGVsczogb3JpZ2luYWxQaXhlbHNMaXN0LFxuICAgICAgb3JpZ2luYWxQaXhlbHNMaXN0OiBvcmlnaW5hbFBpeGVsc0xpc3QsXG4gICAgICBjb3JyZWN0UGl4ZWxzTGlzdDogY29ycmVjdFBpeGVsc0xpc3QsXG4gICAgICBpbmNvcnJlY3RQaXhlbHNMaXN0OiBpbmNvcnJlY3RQaXhlbHNMaXN0LFxuICAgICAgbWlzc2luZ1BpeGVsc0xpc3Q6IG1pc3NpbmdQaXhlbHNMaXN0LFxuICAgICAgY2hhbmdlczogZGlmZnMsXG4gICAgICBsYXN0Q2hlY2s6IGd1YXJkU3RhdGUubGFzdENoZWNrLFxuICAgICAgZHVyYXRpb25NczogZ3VhcmRTdGF0ZS5sYXN0QW5hbHlzaXMuZHVyYXRpb25NcyxcbiAgICAgIGF2YWlsYWJsZUNvbG9yczogQXJyYXkuaXNBcnJheShndWFyZFN0YXRlLmF2YWlsYWJsZUNvbG9ycylcbiAgICAgICAgPyBndWFyZFN0YXRlLmF2YWlsYWJsZUNvbG9ycy5tYXAoYyA9PiAoeyBpZDogYy5pZCA/PyBjLmNvbG9ySWQgPz8gMCwgcjogYy5yLCBnOiBjLmcsIGI6IGMuYiB9KSlcbiAgICAgICAgOiBbXVxuICAgIH0pO1xuICB9XG4gIGxvZyhgXHVEODNFXHVEREVBIEFuXHUwMEUxbGlzaXMgaGVhZGxlc3MgbW9kdWxhcjogdG90YWw9JHt0b3RhbH0gY29ycmVjdD0ke2NvcnJlY3R9IGluY29ycmVjdD0ke2luY29ycmVjdH0gbWlzc2luZz0ke21pc3Npbmd9IGRpZmZzU2VudD0ke2RpZmZzLmxlbmd0aH1gKTtcbn1cblxuLy8gPT09IEFjY2lvbmVzIG1hbnVhbGVzIGV4cHVlc3RhcyBwYXJhIGd1YXJkQ29udHJvbCA9PT1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYW51YWxDaGVjayh7IHNlbmRQcmV2aWV3LCBmb3JjZSB9ID0ge30pIHtcbiAgbG9nKCdcdUQ4M0RcdUREMEQgbWFudWFsQ2hlY2sgc29saWNpdGFkbycpO1xuICBhd2FpdCBwZXJmb3JtR3VhcmRBbmFseXNpcyh7IHNlbmRQcmV2aWV3LCBmb3JjZTogZm9yY2UgPz8gdHJ1ZSB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1hbnVhbFJlcGFpcihwYXJhbXMgPSB7fSwgeyBzZW5kUHJldmlldywgZm9yY2UgfSA9IHt9KSB7XG4gIGxvZygnXHVEODNEXHVERUUwXHVGRTBGIG1hbnVhbFJlcGFpciBzb2xpY2l0YWRvIChzaW1wbGlmaWNhZG8gaGVhZGxlc3MpJyk7XG4gIC8vIFJlYWxpemFyIGFuXHUwMEUxbGlzaXMgcGFyYSBhc2VndXJhciBkaWZmcyBhY3R1YWxpemFkb3NcbiAgYXdhaXQgcGVyZm9ybUd1YXJkQW5hbHlzaXMoeyBzZW5kUHJldmlldywgZm9yY2U6IGZvcmNlID8/IHRydWUgfSk7XG4gIGd1YXJkUnVudGltZS5sYXN0TWFudWFsUmVwYWlyID0gRGF0ZS5ub3coKTtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cuZ3VhcmRTdGF0ZSkgcmV0dXJuIHsgcGl4ZWxzOiBbXSB9O1xuICBjb25zdCBndWFyZFN0YXRlID0gd2luZG93Lmd1YXJkU3RhdGU7XG4gIGNvbnN0IGxhc3QgPSBndWFyZFN0YXRlLmxhc3RBbmFseXNpcztcbiAgaWYgKCFsYXN0IHx8ICFsYXN0LmRpZmZzU2FtcGxlKSByZXR1cm4geyBwaXhlbHM6IFtdIH07XG4gIGNvbnN0IGxpbWl0ID0gcGFyYW1zLmxpbWl0ICYmIHBhcmFtcy5saW1pdCA+IDAgPyBwYXJhbXMubGltaXQgOiAoZ3VhcmRTdGF0ZS5waXhlbHNQZXJCYXRjaCB8fCBndWFyZFN0YXRlLmNvbmZpZz8ucGl4ZWxzUGVyQmF0Y2ggfHwgMTApO1xuICBsZXQgZWZmZWN0aXZlTGltaXQgPSBsaW1pdDtcbiAgaWYgKGd1YXJkU3RhdGUuc3BlbmRBbGxQaXhlbHNPblN0YXJ0ICYmICFndWFyZFN0YXRlLl9zcGVudEFsbE9uY2UpIHtcbiAgICBlZmZlY3RpdmVMaW1pdCA9IGxhc3QuZGlmZnNTYW1wbGUuZmlsdGVyKGQ9PmQudHlwZT09PSdpbmNvcnJlY3QnfHxkLnR5cGU9PT0nbWlzc2luZycpLmxlbmd0aCB8fCBsaW1pdDtcbiAgICBndWFyZFN0YXRlLl9zcGVudEFsbE9uY2UgPSB0cnVlO1xuICB9XG4gIC8vIENvbnN0cnVpciBlc3RydWN0dXJhIE1hcCBkZSBjYW1iaW9zIHBhcmEgYXBsaWNhciBwYXRyb25lcyBjb24gY29sb3IgcHJlZmVyZW5jZVxuICBjb25zdCBjaGFuZ2VzTWFwID0gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IGQgb2YgbGFzdC5kaWZmc1NhbXBsZSkge1xuICAgIGlmIChkLnR5cGUgPT09ICdpbmNvcnJlY3QnIHx8IGQudHlwZSA9PT0gJ21pc3NpbmcnKSB7XG4gICAgICBjb25zdCBrZXkgPSBgJHtkLnh9LCR7ZC55fWA7XG4gICAgICAvLyBHdWFyZGFyIGluZm8gb3JpZ2luYWwgbVx1MDBFRG5pbWEgeSBjdXJyZW50XG4gICAgICBjaGFuZ2VzTWFwLnNldChrZXksIHsgb3JpZ2luYWw6IHsgY29sb3JJZDogZC5leHBlY3RlZENvbG9yID8/IGQuY29sb3JJZCA/PyAwIH0sIGN1cnJlbnQ6IHsgY29sb3JJZDogZC5jdXJyZW50Q29sb3IgPz8gMCB9LCB0eXBlOiBkLnR5cGUgfSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBhdHRlcm4gPSBwYXJhbXMucGF0dGVybiB8fCBndWFyZFN0YXRlLnByb3RlY3Rpb25QYXR0ZXJuIHx8ICdyYW5kb20nO1xuICBjb25zdCBwcmVmZXJDb2xvciA9IGd1YXJkU3RhdGUucHJlZmVyQ29sb3I7XG4gIGNvbnN0IHByZWZlcnJlZENvbG9ySWRzID0gZ3VhcmRTdGF0ZS5wcmVmZXJyZWRDb2xvcklkcyB8fCBbXTtcbiAgY29uc3QgZXhjbHVkZUNvbG9yID0gZ3VhcmRTdGF0ZS5leGNsdWRlQ29sb3I7XG4gIGNvbnN0IGV4Y2x1ZGVkQ29sb3JJZHMgPSBndWFyZFN0YXRlLmV4Y2x1ZGVkQ29sb3JJZHMgfHwgW107XG4gIGNvbnN0IHNlbGVjdGVkS2V5cyA9IGdldFBpeGVsc0J5UGF0dGVybihwYXR0ZXJuLCBjaGFuZ2VzTWFwLCBlZmZlY3RpdmVMaW1pdCwgcHJlZmVyQ29sb3IsIG51bGwsIHByZWZlcnJlZENvbG9ySWRzLCBleGNsdWRlQ29sb3IsIGV4Y2x1ZGVkQ29sb3JJZHMpO1xuICBjb25zdCBwaXhlbHMgPSBzZWxlY3RlZEtleXMubWFwKGs9PnsgY29uc3QgW3gseV09ay5zcGxpdCgnLCcpLm1hcChOdW1iZXIpOyBjb25zdCBtZXRhPWNoYW5nZXNNYXAuZ2V0KGspOyByZXR1cm4geyB4LHksIGV4cGVjdGVkQ29sb3I6IG1ldGEub3JpZ2luYWwuY29sb3JJZCwgdHlwZTogbWV0YS50eXBlIH07IH0pO1xuICAgIHRyeSB7IHRyYWNrRXZlbnQoJ3JlcGFpcl9iYXRjaF9zdWdnZXN0ZWQnLCB7IGJvdFZhcmlhbnQ6ICdzbGF2ZS1ndWFyZCcsIG1ldGFkYXRhOiB7IGNvdW50OiBwaXhlbHMubGVuZ3RoLCBwYXR0ZXJuVXNlZDogcGF0dGVybiwgdG90YWxEaWZmczogbGFzdC5kaWZmc1NhbXBsZS5sZW5ndGggfSB9KTsgfSBjYXRjaCB7fVxuICByZXR1cm4geyBwaXhlbHMsIHRvdGFsRGlmZnM6IGxhc3QuZGlmZnNTYW1wbGUubGVuZ3RoLCBwYXR0ZXJuVXNlZDogcGF0dGVybiB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9nZ2xlV2F0Y2hNb2RlKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXdpbmRvdy5ndWFyZFN0YXRlKSByZXR1cm4gbnVsbDtcbiAgd2luZG93Lmd1YXJkU3RhdGUud2F0Y2hNb2RlID0gIXdpbmRvdy5ndWFyZFN0YXRlLndhdGNoTW9kZTtcbiAgbG9nKGBcdUQ4M0RcdURDNDAgd2F0Y2hNb2RlIGFob3JhOiAke3dpbmRvdy5ndWFyZFN0YXRlLndhdGNoTW9kZX1gKTtcbiAgcmV0dXJuIHdpbmRvdy5ndWFyZFN0YXRlLndhdGNoTW9kZTtcbn1cblxuLy8gPT09PT0gVXRpbGlkYWRlcyBkZSBjb2xvciAoUkdCIC0+IExBQiB5IERlbHRhRSBDSUU3NikgPT09PT1cbmZ1bmN0aW9uIHJnYlRvWHl6Q29tcG9uZW50KHYpIHtcbiAgdiA9IHYgLyAyNTU7IC8vIG5vcm1hbGl6YXJcbiAgcmV0dXJuIHYgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKHYgKyAwLjA1NSkgLyAxLjA1NSwgMi40KSA6IHYgLyAxMi45Mjtcbn1cblxuZnVuY3Rpb24gcmdiVG9MYWJBcnJheShyLCBnLCBiKSB7XG4gIC8vIENvbnZlcnRpciBhIGVzcGFjaW8gWFlaIEQ2NVxuICBjb25zdCBSID0gcmdiVG9YeXpDb21wb25lbnQocik7XG4gIGNvbnN0IEcgPSByZ2JUb1h5ekNvbXBvbmVudChnKTtcbiAgY29uc3QgQiA9IHJnYlRvWHl6Q29tcG9uZW50KGIpO1xuICAvLyBNYXRyaXogZGUgdHJhbnNmb3JtYWNpXHUwMEYzbiBzUkdCIEQ2NVxuICBjb25zdCBYID0gKFIgKiAwLjQxMjQgKyBHICogMC4zNTc2ICsgQiAqIDAuMTgwNSkgLyAwLjk1MDQ3O1xuICBjb25zdCBZID0gKFIgKiAwLjIxMjYgKyBHICogMC43MTUyICsgQiAqIDAuMDcyMikgLyAxLjAwMDAwO1xuICBjb25zdCBaID0gKFIgKiAwLjAxOTMgKyBHICogMC4xMTkyICsgQiAqIDAuOTUwNSkgLyAxLjA4ODgzO1xuXG4gIGNvbnN0IGZ4ID0gWCA+IDAuMDA4ODU2ID8gTWF0aC5jYnJ0KFgpIDogKDcuNzg3ICogWCkgKyAxNi8xMTY7XG4gIGNvbnN0IGZ5ID0gWSA+IDAuMDA4ODU2ID8gTWF0aC5jYnJ0KFkpIDogKDcuNzg3ICogWSkgKyAxNi8xMTY7XG4gIGNvbnN0IGZ6ID0gWiA+IDAuMDA4ODU2ID8gTWF0aC5jYnJ0KFopIDogKDcuNzg3ICogWikgKyAxNi8xMTY7XG5cbiAgY29uc3QgTCA9ICgxMTYgKiBmeSkgLSAxNjtcbiAgY29uc3QgYSA9IDUwMCAqIChmeCAtIGZ5KTtcbiAgY29uc3QgYjIgPSAyMDAgKiAoZnkgLSBmeik7XG4gIHJldHVybiBbTCwgYSwgYjJdO1xufVxuXG5mdW5jdGlvbiBkZWx0YUU3NihsYWIxLCBsYWIyKSB7XG4gIGNvbnN0IGRMID0gbGFiMVswXSAtIGxhYjJbMF07XG4gIGNvbnN0IGRhID0gbGFiMVsxXSAtIGxhYjJbMV07XG4gIGNvbnN0IGRiID0gbGFiMVsyXSAtIGxhYjJbMl07XG4gIHJldHVybiBNYXRoLnNxcnQoZEwqZEwgKyBkYSpkYSArIGRiKmRiKTtcbn1cbiIsICJpbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vY29yZS9sb2dnZXIuanNcIjtcbmltcG9ydCB7IGdldFNlc3Npb24gfSBmcm9tIFwiLi4vY29yZS93cGxhY2UtYXBpLmpzXCI7XG4vLyBVc2Ftb3MgZWwgbWlzbW8gZmx1am8gZGUgcGludGFkbyBxdWUgZWwgYm90IGRlIGltYWdlbiBwYXJhIGV2aXRhciA0MDNcbmltcG9ydCB7IHBvc3RQaXhlbEJhdGNoSW1hZ2UgfSBmcm9tICcuLi9jb3JlL3dwbGFjZS1hcGkuanMnO1xuaW1wb3J0IHsgZW5zdXJlVG9rZW4sIGdldENhY2hlZFRva2VuIH0gZnJvbSBcIi4uL2NvcmUvdHVybnN0aWxlLmpzXCI7XG5pbXBvcnQgeyBndWFyZFN0YXRlLCBHVUFSRF9ERUZBVUxUUyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tIFwiLi4vY29yZS90aW1pbmcuanNcIjtcbmltcG9ydCB7IGdldFBpeGVsc0J5UGF0dGVybiB9IGZyb20gXCIuL3BhdHRlcm5zLmpzXCI7XG5pbXBvcnQgeyBwaXhlbHNSZXBhaXJlZCwgcmVwb3J0RXJyb3IsIHRyYWNrRXZlbnQgfSBmcm9tIFwiLi4vY29yZS9tZXRyaWNzL2NsaWVudC5qc1wiO1xuaW1wb3J0IHsgZ2V0TWV0cmljc0NvbmZpZyB9IGZyb20gXCIuLi9jb3JlL21ldHJpY3MvY29uZmlnLmpzXCI7XG5cbi8vIFZhcmlhYmxlcyBwYXJhIG1vbml0b3JlbyBkZSBjYXJnYXNcbmxldCBjaGFyZ2VNb25pdG9ySW50ZXJ2YWwgPSBudWxsO1xubGV0IGluZGVwZW5kZW50Q2hhcmdlTW9uaXRvckludGVydmFsID0gbnVsbDsgLy8gTnVldm86IG1vbml0b3JlbyBpbmRlcGVuZGllbnRlXG5sZXQgbGFzdENoYXJnZVVwZGF0ZSA9IG51bGw7XG5sZXQgY2FsY3VsYXRlZENoYXJnZXMgPSAwO1xubGV0IF9sYXN0Q2hhcmdlQ2hlY2sgPSAwO1xubGV0IF9pc1JlcGFpcmluZyA9IGZhbHNlOyAvLyBFdml0YXIgYnVjbGVzIGluZmluaXRvc1xubGV0IF9jb3VudGRvd25JbnRlcnZhbCA9IG51bGw7XG5sZXQgX25leHRDaGFyZ2VUaW1lID0gMDtcbmNvbnN0IENIQVJHRV9DSEVDS19JTlRFUlZBTCA9IDMwMDAwOyAvLyAzMCBzZWd1bmRvc1xuY29uc3QgQ0hBUkdFX1JFR0VORVJBVElPTl9USU1FID0gMzEwMDA7IC8vIDMxIHNlZ3VuZG9zIHBvciBjYXJnYVxuXG4vKipcbiAqIEluaWNpYSBlbCBjb250YWRvciBkZSB0aWVtcG8gcGFyYSBlbCBwclx1MDBGM3hpbW8gbG90ZVxuICovXG5mdW5jdGlvbiBzdGFydENvdW50ZG93blRpbWVyKCkge1xuICBpZiAoX2NvdW50ZG93bkludGVydmFsKSB7XG4gICAgd2luZG93LmNsZWFySW50ZXJ2YWwoX2NvdW50ZG93bkludGVydmFsKTtcbiAgfVxuICBcbiAgX2NvdW50ZG93bkludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHRpbWVMZWZ0ID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChfbmV4dENoYXJnZVRpbWUgLSBub3cpIC8gMTAwMCkpO1xuICAgIFxuICAgIGlmIChndWFyZFN0YXRlLnVpKSB7XG4gICAgICBndWFyZFN0YXRlLnVpLnVwZGF0ZUNvdW50ZG93bih0aW1lTGVmdCk7XG4gICAgfVxuICAgIFxuICAgIGlmICh0aW1lTGVmdCA8PSAwKSB7XG4gICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChfY291bnRkb3duSW50ZXJ2YWwpO1xuICAgICAgX2NvdW50ZG93bkludGVydmFsID0gbnVsbDtcbiAgICB9XG4gIH0sIDEwMDApO1xufVxuXG4vKipcbiAqIERldGllbmUgZWwgY29udGFkb3IgZGUgdGllbXBvXG4gKi9cbmZ1bmN0aW9uIHN0b3BDb3VudGRvd25UaW1lcigpIHtcbiAgaWYgKF9jb3VudGRvd25JbnRlcnZhbCkge1xuICAgIHdpbmRvdy5jbGVhckludGVydmFsKF9jb3VudGRvd25JbnRlcnZhbCk7XG4gICAgX2NvdW50ZG93bkludGVydmFsID0gbnVsbDtcbiAgfVxuICBcbiAgaWYgKGd1YXJkU3RhdGUudWkpIHtcbiAgICBndWFyZFN0YXRlLnVpLnNob3dDb3VudGRvd24oZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICogSW5pY2lhIGVsIG1vbml0b3JlbyBwZXJpXHUwMEYzZGljbyBkZSBjYXJnYXMgKGN1YW5kbyBlbCBib3QgZXN0XHUwMEUxIGFjdGl2bylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0Q2hhcmdlTW9uaXRvcmluZygpIHtcbiAgaWYgKGNoYXJnZU1vbml0b3JJbnRlcnZhbCkge1xuICAgIGxvZygnXHVEODNEXHVERDA0IE1vbml0b3JlbyBkZSBjYXJnYXMgeWEgZXN0XHUwMEUxIGFjdGl2bycpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZygnXHVEODNEXHVERDA0IEluaWNpYW5kbyBtb25pdG9yZW8gZGUgY2FyZ2FzIGNhZGEgMzAgc2VndW5kb3MuLi4nKTtcbiAgXG4gIC8vIFBhdXNhciBlbCBjb250YWRvciBpbmRlcGVuZGllbnRlIHNpIGVzdFx1MDBFMSBhY3Rpdm9cbiAgaWYgKGluZGVwZW5kZW50Q2hhcmdlTW9uaXRvckludGVydmFsKSB7XG4gICAgbG9nKCdcdTIzRjhcdUZFMEYgUGF1c2FuZG8gY29udGFkb3IgaW5kZXBlbmRpZW50ZSAtIGJvdCBpbmljaWFkbycpO1xuICB9XG4gIFxuICBjaGFyZ2VNb25pdG9ySW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxpemFyIGNhcmdhcyBlbiB0aWVtcG8gcmVhbFxuICAgICAgY29uc3Qgc2Vzc2lvblJlc3VsdCA9IGF3YWl0IGdldFNlc3Npb24oKTtcbiAgICAgIFxuICAgICAgaWYgKHNlc3Npb25SZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICBjb25zdCBhdmFpbGFibGVDaGFyZ2VzID0gTWF0aC5mbG9vcihzZXNzaW9uUmVzdWx0LmRhdGEuY2hhcmdlcyk7XG4gICAgICAgIFxuICAgICAgICAvLyBBY3R1YWxpemFyIGVzdGFkbyBkZSBjYXJnYXNcbiAgICAgICAgZ3VhcmRTdGF0ZS5jdXJyZW50Q2hhcmdlcyA9IHNlc3Npb25SZXN1bHQuZGF0YS5jaGFyZ2VzO1xuICAgICAgICBndWFyZFN0YXRlLm1heENoYXJnZXMgPSBzZXNzaW9uUmVzdWx0LmRhdGEubWF4Q2hhcmdlcztcbiAgICAgICAgXG4gICAgICAgIC8vIFNpbmNyb25pemFyIGNvbiBlbCBjb250YWRvciBpbmRlcGVuZGllbnRlXG4gICAgICAgIGNhbGN1bGF0ZWRDaGFyZ2VzID0gc2Vzc2lvblJlc3VsdC5kYXRhLmNoYXJnZXM7XG4gICAgICAgIGxhc3RDaGFyZ2VVcGRhdGUgPSBEYXRlLm5vdygpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWN0dWFsaXphciBVSSBjb24gY2FyZ2FzIGFjdHVhbGVzXG4gICAgICAgIGlmIChndWFyZFN0YXRlLnVpKSB7XG4gICAgICAgICAgZ3VhcmRTdGF0ZS51aS51cGRhdGVTdGF0cyh7IGNoYXJnZXM6IGF2YWlsYWJsZUNoYXJnZXMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNvbG8gdmVyaWZpY2FyIHNpIGhheSBjYW1iaW9zIHBlbmRpZW50ZXMsIG5vIGVzdGFtb3MgcmVwYXJhbmRvIGFjdGl2YW1lbnRlLCB5IGVsIEd1YXJkIGVzdFx1MDBFMSBjb3JyaWVuZG9cbiAgICAgICAgaWYgKGd1YXJkU3RhdGUuY2hhbmdlcy5zaXplID4gMCAmJiBndWFyZFN0YXRlLnJ1bm5pbmcgJiYgIV9pc1JlcGFpcmluZykge1xuICAgICAgICAgIGlmIChhdmFpbGFibGVDaGFyZ2VzID49IGd1YXJkU3RhdGUubWluQ2hhcmdlc1RvV2FpdCkge1xuICAgICAgICAgICAgbG9nKGBcdUQ4M0RcdUREMDQgQ2FyZ2FzIGRldGVjdGFkYXM6ICR7YXZhaWxhYmxlQ2hhcmdlc30uIENvbnRpbnVhbmRvIHJlcGFyYWNpXHUwMEYzbiBhdXRvbVx1MDBFMXRpY2FtZW50ZS4uLmApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBEZXRlbmVyIGNvbnRhZG9yIHNpIGVzdFx1MDBFMSBhY3Rpdm9cbiAgICAgICAgICAgIHN0b3BDb3VudGRvd25UaW1lcigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDb250aW51YXIgY29uIGxhIHJlcGFyYWNpXHUwMEYzblxuICAgICAgICAgICAgYXdhaXQgcmVwYWlyQ2hhbmdlcyhndWFyZFN0YXRlLmNoYW5nZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2coYEVycm9yIGVuIG1vbml0b3JlbyBkZSBjYXJnYXM6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gIH0sIENIQVJHRV9DSEVDS19JTlRFUlZBTCk7XG59XG5cbi8qKlxuICogRGV0ZW5lciBtb25pdG9yZW8gZGUgY2FyZ2FzIChjdWFuZG8gZWwgYm90IHNlIGRldGllbmUpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdG9wQ2hhcmdlTW9uaXRvcmluZygpIHtcbiAgaWYgKGNoYXJnZU1vbml0b3JJbnRlcnZhbCkge1xuICAgIHdpbmRvdy5jbGVhckludGVydmFsKGNoYXJnZU1vbml0b3JJbnRlcnZhbCk7XG4gICAgY2hhcmdlTW9uaXRvckludGVydmFsID0gbnVsbDtcbiAgICBsb2coJ1x1RDgzRFx1REQwNCBNb25pdG9yZW8gZGUgY2FyZ2FzIGRldGVuaWRvJyk7XG4gICAgXG4gICAgLy8gUmVhbnVkYXIgZWwgY29udGFkb3IgaW5kZXBlbmRpZW50ZSBzaSBlc3RcdTAwRTEgY29uZmlndXJhZG9cbiAgICBpZiAoaW5kZXBlbmRlbnRDaGFyZ2VNb25pdG9ySW50ZXJ2YWwpIHtcbiAgICAgIGxvZygnXHUyNUI2XHVGRTBGIFJlYW51ZGFuZG8gY29udGFkb3IgaW5kZXBlbmRpZW50ZSAtIGJvdCBkZXRlbmlkbycpO1xuICAgICAgLy8gRWwgY29udGFkb3IgaW5kZXBlbmRpZW50ZSBzZWd1aXJcdTAwRTEgZnVuY2lvbmFuZG8gYXV0b21cdTAwRTF0aWNhbWVudGVcbiAgICAgIC8vIHlhIHF1ZSB2ZXJpZmljYSBjaGFyZ2VNb25pdG9ySW50ZXJ2YWwgZW4gY2FkYSBpdGVyYWNpXHUwMEYzblxuICAgIH1cbiAgfVxuICBcbiAgLy8gVGFtYmlcdTAwRTluIGRldGVuZXIgZWwgY29udGFkb3JcbiAgc3RvcENvdW50ZG93blRpbWVyKCk7XG59XG5cbi8qKlxuICogSW5pY2lhIGVsIG1vbml0b3JlbyBpbmRlcGVuZGllbnRlIGRlIGNhcmdhcyAoc29sbyBjdWFuZG8gZWwgYm90IE5PIGVzdFx1MDBFMSBjb3JyaWVuZG8pXG4gKiBIYWNlIHVuYSBwZXRpY2lcdTAwRjNuIGluaWNpYWwgeSBsdWVnbyBjYWxjdWxhIGxhcyBjYXJnYXMgdXNhbmRvIHVuIGNvbnRhZG9yIGludGVybm9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0SW5kZXBlbmRlbnRDaGFyZ2VNb25pdG9yaW5nKCkge1xuICBpZiAoaW5kZXBlbmRlbnRDaGFyZ2VNb25pdG9ySW50ZXJ2YWwpIHtcbiAgICBsb2coJ1x1RDgzRFx1REQwNCBNb25pdG9yZW8gaW5kZXBlbmRpZW50ZSBkZSBjYXJnYXMgeWEgZXN0XHUwMEUxIGFjdGl2bycpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZygnXHVEODNEXHVERDA0IEluaWNpYW5kbyBtb25pdG9yZW8gaW5kZXBlbmRpZW50ZSBkZSBjYXJnYXMgY2FkYSAzMCBzZWd1bmRvcy4uLicpO1xuICBcbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgb2J0ZW5lciBjYXJnYXMgaW5pY2lhbGVzIHkgbHVlZ28gdXNhciBjb250YWRvclxuICBjb25zdCBpbml0aWFsaXplQ2hhcmdlVHJhY2tpbmcgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFNvbG8gcHJvY2VkZXIgc2kgZWwgYm90IG5vIGVzdFx1MDBFMSBjb3JyaWVuZG9cbiAgICAgIGlmIChjaGFyZ2VNb25pdG9ySW50ZXJ2YWwpIHtcbiAgICAgICAgbG9nKCdcdUQ4M0RcdUREMDQgQm90IGFjdGl2byBkZXRlY3RhZG8sIHNhbHRhbmRvIGluaWNpYWxpemFjaVx1MDBGM24gaW5kZXBlbmRpZW50ZScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNlc3Npb25SZXN1bHQgPSBhd2FpdCBnZXRTZXNzaW9uKCk7XG4gICAgICBpZiAoc2Vzc2lvblJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIGNhbGN1bGF0ZWRDaGFyZ2VzID0gc2Vzc2lvblJlc3VsdC5kYXRhLmNoYXJnZXM7XG4gICAgICAgIGd1YXJkU3RhdGUuY3VycmVudENoYXJnZXMgPSBjYWxjdWxhdGVkQ2hhcmdlcztcbiAgICAgICAgZ3VhcmRTdGF0ZS5tYXhDaGFyZ2VzID0gc2Vzc2lvblJlc3VsdC5kYXRhLm1heENoYXJnZXM7XG4gICAgICAgIGxhc3RDaGFyZ2VVcGRhdGUgPSBEYXRlLm5vdygpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlQ2hhcmdlcyA9IE1hdGguZmxvb3IoY2FsY3VsYXRlZENoYXJnZXMpO1xuICAgICAgICBpZiAoZ3VhcmRTdGF0ZS51aSkge1xuICAgICAgICAgIGd1YXJkU3RhdGUudWkudXBkYXRlU3RhdHMoeyBjaGFyZ2VzOiBhdmFpbGFibGVDaGFyZ2VzIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsb2coYFx1RDgzRFx1REQwQiBDYXJnYXMgaW5pY2lhbGVzIG9idGVuaWRhczogJHthdmFpbGFibGVDaGFyZ2VzfS8ke2d1YXJkU3RhdGUubWF4Q2hhcmdlc31gKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nKGBFcnJvciBvYnRlbmllbmRvIGNhcmdhcyBpbmljaWFsZXM6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgYWN0dWFsaXphciBjYXJnYXMgdXNhbmRvIGNvbnRhZG9yIGludGVybm9cbiAgY29uc3QgdXBkYXRlQ2FsY3VsYXRlZENoYXJnZXMgPSAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFNvbG8gYWN0dWFsaXphciBzaSBlbCBib3Qgbm8gZXN0XHUwMEUxIGNvcnJpZW5kb1xuICAgICAgaWYgKGNoYXJnZU1vbml0b3JJbnRlcnZhbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXN0Q2hhcmdlVXBkYXRlICYmIGNhbGN1bGF0ZWRDaGFyZ2VzIDwgZ3VhcmRTdGF0ZS5tYXhDaGFyZ2VzKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RVcGRhdGUgPSBub3cgLSBsYXN0Q2hhcmdlVXBkYXRlO1xuICAgICAgICBjb25zdCBjaGFyZ2VzR2FpbmVkID0gTWF0aC5mbG9vcih0aW1lU2luY2VMYXN0VXBkYXRlIC8gMzAwMDApOyAvLyAxIGNhcmdhIGNhZGEgMzAgc2VndW5kb3NcbiAgICAgICAgXG4gICAgICAgIGlmIChjaGFyZ2VzR2FpbmVkID4gMCkge1xuICAgICAgICAgIGNhbGN1bGF0ZWRDaGFyZ2VzID0gTWF0aC5taW4oY2FsY3VsYXRlZENoYXJnZXMgKyBjaGFyZ2VzR2FpbmVkLCBndWFyZFN0YXRlLm1heENoYXJnZXMpO1xuICAgICAgICAgIGd1YXJkU3RhdGUuY3VycmVudENoYXJnZXMgPSBjYWxjdWxhdGVkQ2hhcmdlcztcbiAgICAgICAgICBsYXN0Q2hhcmdlVXBkYXRlID0gbm93O1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZUNoYXJnZXMgPSBNYXRoLmZsb29yKGNhbGN1bGF0ZWRDaGFyZ2VzKTtcbiAgICAgICAgICBpZiAoZ3VhcmRTdGF0ZS51aSkge1xuICAgICAgICAgICAgZ3VhcmRTdGF0ZS51aS51cGRhdGVTdGF0cyh7IGNoYXJnZXM6IGF2YWlsYWJsZUNoYXJnZXMgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIExvZyBwZXJpXHUwMEYzZGljbyBwYXJhIGRlYnVnIChvcGNpb25hbCwgY2FkYSA1IG1pbnV0b3MpXG4gICAgICAgICAgaWYgKCFfbGFzdENoYXJnZUNoZWNrIHx8IG5vdyAtIF9sYXN0Q2hhcmdlQ2hlY2sgPiAzMDAwMDApIHsgLy8gNSBtaW51dG9zXG4gICAgICAgICAgICBsb2coYFx1RDgzRFx1REQwQiBDYXJnYXMgY2FsY3VsYWRhcyBhY3R1YWxpemFkYXM6ICR7YXZhaWxhYmxlQ2hhcmdlc30vJHtndWFyZFN0YXRlLm1heENoYXJnZXN9YCk7XG4gICAgICAgICAgICBfbGFzdENoYXJnZUNoZWNrID0gbm93O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2coYEVycm9yIGFjdHVhbGl6YW5kbyBjYXJnYXMgY2FsY3VsYWRhczogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfTtcblxuICAvLyBJbmljaWFsaXphciBjYXJnYXMgeSBsdWVnbyBhY3R1YWxpemFyIGNhZGEgMzAgc2VndW5kb3NcbiAgaW5pdGlhbGl6ZUNoYXJnZVRyYWNraW5nKCk7XG4gIGluZGVwZW5kZW50Q2hhcmdlTW9uaXRvckludGVydmFsID0gd2luZG93LnNldEludGVydmFsKHVwZGF0ZUNhbGN1bGF0ZWRDaGFyZ2VzLCBDSEFSR0VfQ0hFQ0tfSU5URVJWQUwpO1xufVxuXG4vKipcbiAqIERldGVuZXIgbW9uaXRvcmVvIGluZGVwZW5kaWVudGUgZGUgY2FyZ2FzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdG9wSW5kZXBlbmRlbnRDaGFyZ2VNb25pdG9yaW5nKCkge1xuICBpZiAoaW5kZXBlbmRlbnRDaGFyZ2VNb25pdG9ySW50ZXJ2YWwpIHtcbiAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChpbmRlcGVuZGVudENoYXJnZU1vbml0b3JJbnRlcnZhbCk7XG4gICAgaW5kZXBlbmRlbnRDaGFyZ2VNb25pdG9ySW50ZXJ2YWwgPSBudWxsO1xuICAgIGxhc3RDaGFyZ2VVcGRhdGUgPSBudWxsO1xuICAgIGNhbGN1bGF0ZWRDaGFyZ2VzID0gMDtcbiAgICBsb2coJ1x1RDgzRFx1REQwNCBNb25pdG9yZW8gaW5kZXBlbmRpZW50ZSBkZSBjYXJnYXMgZGV0ZW5pZG8nKTtcbiAgfVxufVxuXG4vLyBGdW5jaW9uZXMgcGFyYSBjb252ZXJzaVx1MDBGM24gZGUgY29sb3IgUkdCIGEgTEFCXG5mdW5jdGlvbiByZ2JUb1h5eihyLCBnLCBiKSB7XG4gIC8vIE5vcm1hbGl6YXIgdmFsb3JlcyBSR0IgYSAwLTFcbiAgciA9IHIgLyAyNTU7XG4gIGcgPSBnIC8gMjU1O1xuICBiID0gYiAvIDI1NTtcblxuICAvLyBBcGxpY2FyIGNvcnJlY2NpXHUwMEYzbiBnYW1tYVxuICByID0gciA+IDAuMDQwNDUgPyBNYXRoLnBvdygociArIDAuMDU1KSAvIDEuMDU1LCAyLjQpIDogciAvIDEyLjkyO1xuICBnID0gZyA+IDAuMDQwNDUgPyBNYXRoLnBvdygoZyArIDAuMDU1KSAvIDEuMDU1LCAyLjQpIDogZyAvIDEyLjkyO1xuICBiID0gYiA+IDAuMDQwNDUgPyBNYXRoLnBvdygoYiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpIDogYiAvIDEyLjkyO1xuXG4gIC8vIENvbnZlcnRpciBhIFhZWiB1c2FuZG8gbWF0cml6IHNSR0JcbiAgY29uc3QgeCA9IHIgKiAwLjQxMjQ1NjQgKyBnICogMC4zNTc1NzYxICsgYiAqIDAuMTgwNDM3NTtcbiAgY29uc3QgeSA9IHIgKiAwLjIxMjY3MjkgKyBnICogMC43MTUxNTIyICsgYiAqIDAuMDcyMTc1MDtcbiAgY29uc3QgeiA9IHIgKiAwLjAxOTMzMzkgKyBnICogMC4xMTkxOTIwICsgYiAqIDAuOTUwMzA0MTtcblxuICByZXR1cm4geyB4LCB5LCB6IH07XG59XG5cbmZ1bmN0aW9uIHh5elRvTGFiKHgsIHksIHopIHtcbiAgLy8gVXNhciBpbHVtaW5hbnRlIEQ2NVxuICBjb25zdCB4biA9IDAuOTUwNDc7XG4gIGNvbnN0IHluID0gMS4wMDAwMDtcbiAgY29uc3Qgem4gPSAxLjA4ODgzO1xuXG4gIHggPSB4IC8geG47XG4gIHkgPSB5IC8geW47XG4gIHogPSB6IC8gem47XG5cbiAgY29uc3QgZnggPSB4ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxLzMpIDogKDcuNzg3ICogeCArIDE2LzExNik7XG4gIGNvbnN0IGZ5ID0geSA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeSwgMS8zKSA6ICg3Ljc4NyAqIHkgKyAxNi8xMTYpO1xuICBjb25zdCBmeiA9IHogPiAwLjAwODg1NiA/IE1hdGgucG93KHosIDEvMykgOiAoNy43ODcgKiB6ICsgMTYvMTE2KTtcblxuICBjb25zdCBsID0gMTE2ICogZnkgLSAxNjtcbiAgY29uc3QgYSA9IDUwMCAqIChmeCAtIGZ5KTtcbiAgY29uc3QgYiA9IDIwMCAqIChmeSAtIGZ6KTtcblxuICByZXR1cm4geyBsLCBhLCBiIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0xhYihyLCBnLCBiKSB7XG4gIGNvbnN0IHh5eiA9IHJnYlRvWHl6KHIsIGcsIGIpO1xuICByZXR1cm4geHl6VG9MYWIoeHl6LngsIHh5ei55LCB4eXoueik7XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIGNhbGN1bGFyIGRpZmVyZW5jaWEgRGVsdGEgRSBlbiBlc3BhY2lvIExBQlxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhRShsYWIxLCBsYWIyKSB7XG4gIGNvbnN0IGRlbHRhTCA9IGxhYjEubCAtIGxhYjIubDtcbiAgY29uc3QgZGVsdGFBID0gbGFiMS5hIC0gbGFiMi5hO1xuICBjb25zdCBkZWx0YUIgPSBsYWIxLmIgLSBsYWIyLmI7XG4gIFxuICByZXR1cm4gTWF0aC5zcXJ0KGRlbHRhTCAqIGRlbHRhTCArIGRlbHRhQSAqIGRlbHRhQSArIGRlbHRhQiAqIGRlbHRhQik7XG59XG5cbi8vIEZ1bmNpXHUwMEYzbiBwYXJhIGNvbXBhcmFyIGNvbG9yZXMgdXNhbmRvIGRpZmVyZW50ZXMgbVx1MDBFOXRvZG9zXG5mdW5jdGlvbiBjb21wYXJlQ29sb3JzKGNvbG9yMSwgY29sb3IyLCBtZXRob2QgPSAncmdiJywgdGhyZXNob2xkID0gMTApIHtcbiAgaWYgKG1ldGhvZCA9PT0gJ2xhYicpIHtcbiAgICBjb25zdCBsYWIxID0gcmdiVG9MYWIoY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYik7XG4gICAgY29uc3QgbGFiMiA9IHJnYlRvTGFiKGNvbG9yMi5yLCBjb2xvcjIuZywgY29sb3IyLmIpO1xuICAgIGNvbnN0IGRlbHRhRSA9IGNhbGN1bGF0ZURlbHRhRShsYWIxLCBsYWIyKTtcbiAgICBcbiAgICAvLyBQYXJhIExBQiwgdW4gRGVsdGEgRSA8IDIuMyBlcyBpbXBlcmNlcHRpYmxlLCA8IDUgZXMgYWNlcHRhYmxlXG4gICAgcmV0dXJuIGRlbHRhRSA+ICh0aHJlc2hvbGQgLyAyKTsgLy8gQWp1c3RhciB1bWJyYWwgcGFyYSBMQUJcbiAgfSBlbHNlIHtcbiAgICAvLyBNXHUwMEU5dG9kbyBSR0Igb3JpZ2luYWxcbiAgICBjb25zdCByRGlmZiA9IE1hdGguYWJzKGNvbG9yMS5yIC0gY29sb3IyLnIpO1xuICAgIGNvbnN0IGdEaWZmID0gTWF0aC5hYnMoY29sb3IxLmcgLSBjb2xvcjIuZyk7XG4gICAgY29uc3QgYkRpZmYgPSBNYXRoLmFicyhjb2xvcjEuYiAtIGNvbG9yMi5iKTtcbiAgICBjb25zdCBtYXhEaWZmID0gTWF0aC5tYXgockRpZmYsIGdEaWZmLCBiRGlmZik7XG4gICAgXG4gICAgcmV0dXJuIG1heERpZmYgPiB0aHJlc2hvbGQ7XG4gIH1cbn1cblxuLy8gR2xvYmFscyBkZWwgbmF2ZWdhZG9yXG5jb25zdCB7IEltYWdlLCBVUkwgfSA9IHdpbmRvdztcblxuLy8gT2J0ZW5lciBpbWFnZW4gZGUgdGlsZSBkZXNkZSBsYSBBUElcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUaWxlSW1hZ2UodGlsZVgsIHRpbGVZKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gYCR7R1VBUkRfREVGQVVMVFMuQkFDS0VORF9VUkx9L2ZpbGVzL3MwL3RpbGVzLyR7dGlsZVh9LyR7dGlsZVl9LnBuZ2A7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmJsb2IoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2coYEVycm9yIG9idGVuaWVuZG8gdGlsZSAke3RpbGVYfSwke3RpbGVZfTpgLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLy8gRGV0ZWN0YXIgY29sb3JlcyBkaXNwb25pYmxlcyBkZWwgc2l0aW9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RBdmFpbGFibGVDb2xvcnMoKSB7XG4gIGxvZyhcIlx1RDgzQ1x1REZBOCBEZXRlY3RhbmRvIGNvbG9yZXMgZGlzcG9uaWJsZXMuLi5cIik7XG4gIGNvbnN0IGNvbG9yRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbaWRePVwiY29sb3ItXCJdJyk7XG4gIGNvbnN0IGNvbG9ycyA9IFtdO1xuXG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBjb2xvckVsZW1lbnRzKSB7XG4gICAgaWYgKGVsZW1lbnQucXVlcnlTZWxlY3RvcihcInN2Z1wiKSkgY29udGludWU7XG4gICAgXG4gICAgY29uc3QgY29sb3JJZCA9IHBhcnNlSW50KGVsZW1lbnQuaWQucmVwbGFjZShcImNvbG9yLVwiLCBcIlwiKSk7XG4gICAgaWYgKGNvbG9ySWQgPT09IDApIGNvbnRpbnVlOyAvLyBFdml0YXIgc29sbyBlbCBjb2xvciB0cmFuc3BhcmVudGUgKElEIDApXG4gICAgXG4gICAgY29uc3QgYmdDb2xvciA9IGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yO1xuICAgIGlmIChiZ0NvbG9yKSB7XG4gICAgICBjb25zdCByZ2JNYXRjaCA9IGJnQ29sb3IubWF0Y2goL1xcZCsvZyk7XG4gICAgICBpZiAocmdiTWF0Y2ggJiYgcmdiTWF0Y2gubGVuZ3RoID49IDMpIHtcbiAgICAgICAgY29sb3JzLnB1c2goe1xuICAgICAgICAgIGlkOiBjb2xvcklkLFxuICAgICAgICAgIHI6IHBhcnNlSW50KHJnYk1hdGNoWzBdKSxcbiAgICAgICAgICBnOiBwYXJzZUludChyZ2JNYXRjaFsxXSksXG4gICAgICAgICAgYjogcGFyc2VJbnQocmdiTWF0Y2hbMl0pLFxuICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbG9nKGBcdTI3MDUgJHtjb2xvcnMubGVuZ3RofSBjb2xvcmVzIGRldGVjdGFkb3NgKTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cblxuLy8gRW5jb250cmFyIGVsIGNvbG9yIG1cdTAwRTFzIGNlcmNhbm8gZGlzcG9uaWJsZVxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDbG9zZXN0Q29sb3IociwgZywgYiwgYXZhaWxhYmxlQ29sb3JzKSB7XG4gIC8vIFNlbGVjY2lvbmFyIGVsIGNvbG9yIG1cdTAwRTFzIGNlcmNhbm8gdXNhbmRvIGVzcGFjaW8gTEFCIChEZWx0YSBFKVxuICAvLyBwYXJhIGFsaW5lYXJzZSBjb24gZWwgYWxnb3JpdG1vIGRlbCBtXHUwMEYzZHVsbyBkZSBpbWFnZW4geSBldml0YXIgZmFsc29zIHBvc2l0aXZvc1xuICBpZiAoIWF2YWlsYWJsZUNvbG9ycyB8fCBhdmFpbGFibGVDb2xvcnMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICBjb25zdCB0YXJnZXRMYWIgPSByZ2JUb0xhYihyLCBnLCBiKTtcbiAgbGV0IG1pbkRlbHRhRSA9IEluZmluaXR5O1xuICBsZXQgY2xvc2VzdENvbG9yID0gbnVsbDtcblxuICBmb3IgKGNvbnN0IGNvbG9yIG9mIGF2YWlsYWJsZUNvbG9ycykge1xuICAgIGNvbnN0IGxhYiA9IHJnYlRvTGFiKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgIGNvbnN0IGRlbHRhRSA9IGNhbGN1bGF0ZURlbHRhRSh0YXJnZXRMYWIsIGxhYik7XG4gICAgaWYgKGRlbHRhRSA8IG1pbkRlbHRhRSkge1xuICAgICAgbWluRGVsdGFFID0gZGVsdGFFO1xuICAgICAgY2xvc2VzdENvbG9yID0gY29sb3I7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3RDb2xvcjtcbn1cblxuLy8gQW5hbGl6YXIgcFx1MDBFRHhlbGVzIGRlIHVuIFx1MDBFMXJlYSBlc3BlY1x1MDBFRGZpY2FcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhbmFseXplQXJlYVBpeGVscyhhcmVhLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyBhbGxvd1ZpcnR1YWwgPSBmYWxzZSB9ID0gb3B0aW9ucztcbiAgY29uc3QgeyB4MSwgeTEsIHgyLCB5MiB9ID0gYXJlYTtcbiAgY29uc3Qgd2lkdGggPSB4MiAtIHgxICsgMTsgLy8gaW5jbHVzaXZvXG4gIGNvbnN0IGhlaWdodCA9IHkyIC0geTEgKyAxOyAvLyBpbmNsdXNpdm9cblxuICBsb2coYFx1RDgzRFx1REQwRCBBbmFsaXphbmRvIFx1MDBFMXJlYSAke3dpZHRofXgke2hlaWdodH0gZGVzZGUgKCR7eDF9LCR7eTF9KSBoYXN0YSAoJHt4Mn0sJHt5Mn0pYCk7XG4gIFxuICAvLyBBc2VndXJhciBxdWUgdGVuZW1vcyBjb2xvcmVzIGRpc3BvbmlibGVzIGFudGVzIGRlIGFuYWxpemFyXG4gIGlmICghZ3VhcmRTdGF0ZS5hdmFpbGFibGVDb2xvcnMgfHwgZ3VhcmRTdGF0ZS5hdmFpbGFibGVDb2xvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgZGV0ZWN0ZWQgPSBkZXRlY3RBdmFpbGFibGVDb2xvcnMoKTtcbiAgICBpZiAoZGV0ZWN0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgZ3VhcmRTdGF0ZS5hdmFpbGFibGVDb2xvcnMgPSBkZXRlY3RlZDtcbiAgICAgIGxvZyhgXHVEODNDXHVERkE4IENvbG9yZXMgZGV0ZWN0YWRvcyBwYXJhIGFuXHUwMEUxbGlzaXM6ICR7ZGV0ZWN0ZWQubGVuZ3RofWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2coYFx1MjZBMFx1RkUwRiBTaW4gY29sb3JlcyBkaXNwb25pYmxlcyBwYXJhIGFuXHUwMEUxbGlzaXMuIE9taXRpZW5kbyBhblx1MDBFMWxpc2lzIHBhcmEgZXZpdGFyIGZhbHNvcyBwb3NpdGl2b3MuYCk7XG4gICAgICByZXR1cm4gbmV3IE1hcCgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHBpeGVsTWFwID0gbmV3IE1hcCgpO1xuICBcbiAgLy8gT2J0ZW5lciB0aWxlcyBcdTAwRkFuaWNvcyBxdWUgY3VicmVuIGVsIFx1MDBFMXJlYVxuICBjb25zdCBzdGFydFRpbGVYID0gTWF0aC5mbG9vcih4MSAvIEdVQVJEX0RFRkFVTFRTLlRJTEVfU0laRSk7XG4gIGNvbnN0IHN0YXJ0VGlsZVkgPSBNYXRoLmZsb29yKHkxIC8gR1VBUkRfREVGQVVMVFMuVElMRV9TSVpFKTtcbiAgY29uc3QgZW5kVGlsZVggPSBNYXRoLmZsb29yKHgyIC8gR1VBUkRfREVGQVVMVFMuVElMRV9TSVpFKTtcbiAgY29uc3QgZW5kVGlsZVkgPSBNYXRoLmZsb29yKHkyIC8gR1VBUkRfREVGQVVMVFMuVElMRV9TSVpFKTtcbiAgXG4gIC8vIFBhcmEgc2ltcGxpZmljYXIsIGFuYWxpemFyIHRpbGUgcG9yIHRpbGVcbiAgZm9yIChsZXQgdGlsZVkgPSBzdGFydFRpbGVZOyB0aWxlWSA8PSBlbmRUaWxlWTsgdGlsZVkrKykge1xuICAgIGZvciAobGV0IHRpbGVYID0gc3RhcnRUaWxlWDsgdGlsZVggPD0gZW5kVGlsZVg7IHRpbGVYKyspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRpbGVCbG9iID0gYXdhaXQgZ2V0VGlsZUltYWdlKHRpbGVYLCB0aWxlWSk7XG4gICAgICAgIGlmICghdGlsZUJsb2IpIHtcbiAgICAgICAgICBsb2coYFx1MjZBMFx1RkUwRiBObyBzZSBwdWRvIG9idGVuZXIgdGlsZSAke3RpbGVYfSwke3RpbGVZfSwgY29udGludWFuZG8uLi5gKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWFyIGNhbnZhcyBwYXJhIGFuYWxpemFyIGxhIGltYWdlblxuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGltZy5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgIGltZy5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICAgIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHRpbGVCbG9iKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcbiAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCBkYXRhID0gaW1hZ2VEYXRhLmRhdGE7XG5cbiAgICAgICAgLy8gQW5hbGl6YXIgcFx1MDBFRHhlbGVzIGVuIGVsIFx1MDBFMXJlYSBlc3BlY2lmaWNhZGEgZGUgZXN0ZSB0aWxlXG4gICAgICAgIGNvbnN0IHRpbGVTdGFydFggPSB0aWxlWCAqIEdVQVJEX0RFRkFVTFRTLlRJTEVfU0laRTtcbiAgICAgICAgY29uc3QgdGlsZVN0YXJ0WSA9IHRpbGVZICogR1VBUkRfREVGQVVMVFMuVElMRV9TSVpFO1xuICAgICAgICBjb25zdCB0aWxlRW5kWEV4Y2x1c2l2ZSA9IHRpbGVTdGFydFggKyBHVUFSRF9ERUZBVUxUUy5USUxFX1NJWkU7XG4gICAgICAgIGNvbnN0IHRpbGVFbmRZRXhjbHVzaXZlID0gdGlsZVN0YXJ0WSArIEdVQVJEX0RFRkFVTFRTLlRJTEVfU0laRTtcbiAgICAgICAgXG4gICAgICAgIC8vIENhbGN1bGFyIGludGVyc2VjY2lcdTAwRjNuIGRlbCBcdTAwRTFyZWEgKGluY2x1c2l2YSkgY29uIGVzdGUgdGlsZSB1c2FuZG8gZmluLWV4Y2x1c2l2b1xuICAgICAgICBjb25zdCBhcmVhRW5kWEV4Y2x1c2l2ZSA9IHgyICsgMTtcbiAgICAgICAgY29uc3QgYXJlYUVuZFlFeGNsdXNpdmUgPSB5MiArIDE7XG4gICAgICAgIGNvbnN0IGFuYWx5emVTdGFydFggPSBNYXRoLm1heCh4MSwgdGlsZVN0YXJ0WCk7XG4gICAgICAgIGNvbnN0IGFuYWx5emVTdGFydFkgPSBNYXRoLm1heCh5MSwgdGlsZVN0YXJ0WSk7XG4gICAgICAgIGNvbnN0IGFuYWx5emVFbmRYRXhjbHVzaXZlID0gTWF0aC5taW4oYXJlYUVuZFhFeGNsdXNpdmUsIHRpbGVFbmRYRXhjbHVzaXZlKTtcbiAgICAgICAgY29uc3QgYW5hbHl6ZUVuZFlFeGNsdXNpdmUgPSBNYXRoLm1pbihhcmVhRW5kWUV4Y2x1c2l2ZSwgdGlsZUVuZFlFeGNsdXNpdmUpO1xuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgZ2xvYmFsWSA9IGFuYWx5emVTdGFydFk7IGdsb2JhbFkgPCBhbmFseXplRW5kWUV4Y2x1c2l2ZTsgZ2xvYmFsWSsrKSB7XG4gICAgICAgICAgZm9yIChsZXQgZ2xvYmFsWCA9IGFuYWx5emVTdGFydFg7IGdsb2JhbFggPCBhbmFseXplRW5kWEV4Y2x1c2l2ZTsgZ2xvYmFsWCsrKSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFhSYXcgPSBnbG9iYWxYIC0gdGlsZVN0YXJ0WDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsWVJhdyA9IGdsb2JhbFkgLSB0aWxlU3RhcnRZO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxYID0gKChsb2NhbFhSYXcgJSAxMDAwKSArIDEwMDApICUgMTAwMDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsWSA9ICgobG9jYWxZUmF3ICUgMTAwMCkgKyAxMDAwKSAlIDEwMDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBxdWUgZXN0YW1vcyBkZW50cm8gZGUgbG9zIGxcdTAwRURtaXRlcyBkZWwgdGlsZVxuICAgICAgICAgICAgaWYgKGxvY2FsWCA+PSAwICYmIGxvY2FsWCA8IEdVQVJEX0RFRkFVTFRTLlRJTEVfU0laRSAmJiBcbiAgICAgICAgICAgICAgICBsb2NhbFkgPj0gMCAmJiBsb2NhbFkgPCBHVUFSRF9ERUZBVUxUUy5USUxFX1NJWkUpIHtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIExhcyBjb29yZGVuYWRhcyBkZSBsYSBpbWFnZW4gc29uIDE6MSBjb24gbGFzIGNvb3JkZW5hZGFzIGRlbCB0aWxlXG4gICAgICAgICAgICAgIGlmIChsb2NhbFggPCBjYW52YXMud2lkdGggJiYgbG9jYWxZIDwgY2FudmFzLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpeGVsSW5kZXggPSAobG9jYWxZICogY2FudmFzLndpZHRoICsgbG9jYWxYKSAqIDQ7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IGRhdGFbcGl4ZWxJbmRleF07XG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IGRhdGFbcGl4ZWxJbmRleCArIDFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBkYXRhW3BpeGVsSW5kZXggKyAyXTtcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gZGF0YVtwaXhlbEluZGV4ICsgM107XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGEgPiAwKSB7IC8vIFBcdTAwRUR4ZWwgdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgY29uc3QgY2xvc2VzdENvbG9yID0gZmluZENsb3Nlc3RDb2xvcihyLCBnLCBiLCBndWFyZFN0YXRlLmF2YWlsYWJsZUNvbG9ycyk7XG4gICAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdENvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHBpeGVsTWFwLnNldChgJHtnbG9iYWxYfSwke2dsb2JhbFl9YCwge1xuICAgICAgICAgICAgICAgICAgICAgIHIsIGcsIGIsXG4gICAgICAgICAgICAgICAgICAgICAgY29sb3JJZDogY2xvc2VzdENvbG9yLmlkLFxuICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFgsXG4gICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsWSxcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbFgsXG4gICAgICAgICAgICAgICAgICAgICAgbG9jYWxZLFxuICAgICAgICAgICAgICAgICAgICAgIHRpbGVYLFxuICAgICAgICAgICAgICAgICAgICAgIHRpbGVZXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoaW1nLnNyYyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2coYFx1Mjc0QyBFcnJvciBhbmFsaXphbmRvIHRpbGUgJHt0aWxlWH0sJHt0aWxlWX06YCwgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxvZyhgXHUyNzA1IEFuXHUwMEUxbGlzaXMgY29tcGxldGFkbzogJHtwaXhlbE1hcC5zaXplfSBwXHUwMEVEeGVsZXMgcHJvdGVnaWRvc2ApO1xuICBcbiAgLy8gU2kgbm8gZW5jb250cmFtb3MgcFx1MDBFRHhlbGVzIGVuIGVsIG1hcGEsIGNyZWFyIFwidmlydHVhbGVzXCIgc29sbyBzaSBlc3RcdTAwRTEgcGVybWl0aWRvIChjYXB0dXJhKVxuICBpZiAocGl4ZWxNYXAuc2l6ZSA9PT0gMCkge1xuICAgIGlmIChhbGxvd1ZpcnR1YWwpIHtcbiAgICAgIGxvZyhgXHUyNkEwXHVGRTBGIE5vIHNlIGVuY29udHJhcm9uIHBcdTAwRUR4ZWxlcyBleGlzdGVudGVzLCBjcmVhbmRvIFx1MDBFMXJlYSB2aXJ0dWFsIHBhcmEgcHJvdGVjY2lcdTAwRjNuYCk7XG4gICAgICBjb25zdCBhcmVhRW5kWEV4Y2x1c2l2ZSA9IHgyICsgMTtcbiAgICAgIGNvbnN0IGFyZWFFbmRZRXhjbHVzaXZlID0geTIgKyAxO1xuICAgICAgLy8gQ3JlYXIgZW50cmFkYXMgdmlydHVhbGVzIHBhcmEgY2FkYSBwXHUwMEVEeGVsIGRlbCBcdTAwRTFyZWEgKGluY2x1c2l2bylcbiAgICAgIGZvciAobGV0IGdsb2JhbFkgPSB5MTsgZ2xvYmFsWSA8IGFyZWFFbmRZRXhjbHVzaXZlOyBnbG9iYWxZKyspIHtcbiAgICAgICAgZm9yIChsZXQgZ2xvYmFsWCA9IHgxOyBnbG9iYWxYIDwgYXJlYUVuZFhFeGNsdXNpdmU7IGdsb2JhbFgrKykge1xuICAgICAgICAgIGNvbnN0IHRpbGVYID0gTWF0aC5mbG9vcihnbG9iYWxYIC8gR1VBUkRfREVGQVVMVFMuVElMRV9TSVpFKTtcbiAgICAgICAgICBjb25zdCB0aWxlWSA9IE1hdGguZmxvb3IoZ2xvYmFsWSAvIEdVQVJEX0RFRkFVTFRTLlRJTEVfU0laRSk7XG4gICAgICAgICAgY29uc3QgbG9jYWxYUmF3ID0gZ2xvYmFsWCAtICh0aWxlWCAqIEdVQVJEX0RFRkFVTFRTLlRJTEVfU0laRSk7XG4gICAgICAgICAgY29uc3QgbG9jYWxZUmF3ID0gZ2xvYmFsWSAtICh0aWxlWSAqIEdVQVJEX0RFRkFVTFRTLlRJTEVfU0laRSk7XG4gICAgICAgICAgY29uc3QgbG9jYWxYID0gKChsb2NhbFhSYXcgJSAxMDAwKSArIDEwMDApICUgMTAwMDtcbiAgICAgICAgICBjb25zdCBsb2NhbFkgPSAoKGxvY2FsWVJhdyAlIDEwMDApICsgMTAwMCkgJSAxMDAwO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFVzYXIgY29sb3IgYmxhbmNvIHBvciBkZWZlY3RvIChJRCA1KSBwYXJhIHBcdTAwRUR4ZWxlcyB2YWNcdTAwRURvc1xuICAgICAgICAgIHBpeGVsTWFwLnNldChgJHtnbG9iYWxYfSwke2dsb2JhbFl9YCwge1xuICAgICAgICAgICAgcjogMjU1LCBnOiAyNTUsIGI6IDI1NSwgLy8gQmxhbmNvIHBvciBkZWZlY3RvXG4gICAgICAgICAgICBjb2xvcklkOiA1LCAvLyBJRCBjb3JyZWN0byBkZWwgY29sb3IgYmxhbmNvXG4gICAgICAgICAgICBnbG9iYWxYLFxuICAgICAgICAgICAgZ2xvYmFsWSxcbiAgICAgICAgICAgIGxvY2FsWCxcbiAgICAgICAgICAgIGxvY2FsWSxcbiAgICAgICAgICAgIHRpbGVYLFxuICAgICAgICAgICAgdGlsZVlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBsb2coYFx1MjcwNSBcdTAwQzFyZWEgdmlydHVhbCBjcmVhZGE6ICR7cGl4ZWxNYXAuc2l6ZX0gcFx1MDBFRHhlbGVzIHBhcmEgcHJvdGVnZXJgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nKGBcdTIxMzlcdUZFMEYgQW5cdTAwRTFsaXNpcyB2YWNcdTAwRURvIHkgZmFsbGJhY2sgdmlydHVhbCBkZXNoYWJpbGl0YWRvIChtb2RvIHZlcmlmaWNhY2lcdTAwRjNuKWApO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHBpeGVsTWFwO1xufVxuXG4vLyBBY3R1YWxpemFyIGVzdGFkXHUwMEVEc3RpY2FzIGRlIGFuXHUwMEUxbGlzaXMgZW4gbGEgVUkgcHJpbmNpcGFsXG5mdW5jdGlvbiB1cGRhdGVBbmFseXNpc1N0YXRzSW5VSShvcmlnaW5hbFBpeGVscywgY3VycmVudFBpeGVscykge1xuICBpZiAoIWd1YXJkU3RhdGUudWkgfHwgIWd1YXJkU3RhdGUudWkudXBkYXRlQW5hbHlzaXNTdGF0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHRvdGFsID0gb3JpZ2luYWxQaXhlbHMuc2l6ZTtcbiAgbGV0IGNvcnJlY3RDb3VudCA9IDA7XG4gIGxldCBpbmNvcnJlY3RDb3VudCA9IDA7XG4gIGxldCBtaXNzaW5nQ291bnQgPSAwO1xuXG4gIGlmICh0b3RhbCA9PT0gMCkge1xuICAgIC8vIE5vIGhheSBwXHUwMEVEeGVsZXMgb3JpZ2luYWxlcyBwYXJhIGNvbXBhcmFyXG4gICAgZ3VhcmRTdGF0ZS51aS51cGRhdGVBbmFseXNpc1N0YXRzKHtcbiAgICAgIGNvcnJlY3Q6IDAsXG4gICAgICBpbmNvcnJlY3Q6IDAsXG4gICAgICBtaXNzaW5nOiAwLFxuICAgICAgYWNjdXJhY3k6IDBcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDb21wYXJhciBjYWRhIHBcdTAwRUR4ZWwgb3JpZ2luYWwgY29uIGVsIGFjdHVhbFxuICBmb3IgKGNvbnN0IFtrZXksIG9yaWdpbmFsUGl4ZWxdIG9mIG9yaWdpbmFsUGl4ZWxzKSB7XG4gICAgY29uc3QgY3VycmVudFBpeGVsID0gY3VycmVudFBpeGVscy5nZXQoa2V5KTtcbiAgICBcbiAgICBpZiAoIWN1cnJlbnRQaXhlbCkge1xuICAgICAgLy8gUFx1MDBFRHhlbCBmYWx0YW50ZVxuICAgICAgbWlzc2luZ0NvdW50Kys7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbXBhcmFyIGNvbG9yZXMgdXNhbmRvIGVsIG1cdTAwRTl0b2RvIGNvbmZpZ3VyYWRvXG4gICAgICBjb25zdCBjb21wYXJpc29uTWV0aG9kID0gZ3VhcmRTdGF0ZS5jb25maWc/LmNvbG9yQ29tcGFyaXNvbk1ldGhvZCB8fCAncmdiJztcbiAgICAgIGNvbnN0IHRocmVzaG9sZCA9IGd1YXJkU3RhdGUuY29uZmlnPy5jb2xvclRocmVzaG9sZCB8fCAxMDtcbiAgICAgIFxuICAgICAgY29uc3QgaXNDaGFuZ2VkID0gY29tcGFyZUNvbG9ycyhjdXJyZW50UGl4ZWwsIG9yaWdpbmFsUGl4ZWwsIGNvbXBhcmlzb25NZXRob2QsIHRocmVzaG9sZCk7XG4gICAgICBcbiAgICAgIGlmIChpc0NoYW5nZWQpIHtcbiAgICAgICAgaW5jb3JyZWN0Q291bnQrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvcnJlY3RDb3VudCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGFjY3VyYWN5ID0gdG90YWwgPiAwID8gKChjb3JyZWN0Q291bnQgLyB0b3RhbCkgKiAxMDApLnRvRml4ZWQoMSkgOiAwO1xuXG4gIGd1YXJkU3RhdGUudWkudXBkYXRlQW5hbHlzaXNTdGF0cyh7XG4gICAgY29ycmVjdDogY29ycmVjdENvdW50LFxuICAgIGluY29ycmVjdDogaW5jb3JyZWN0Q291bnQsXG4gICAgbWlzc2luZzogbWlzc2luZ0NvdW50LFxuICAgIGFjY3VyYWN5OiBhY2N1cmFjeVxuICB9KTtcbn1cblxuLy8gRGV0ZWN0YXIgY2FtYmlvcyBlbiBlbCBcdTAwRTFyZWEgcHJvdGVnaWRhXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tGb3JDaGFuZ2VzKCkge1xuICBpZiAoIWd1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEgfHwgIWd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMuc2l6ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgY3VycmVudFBpeGVscyA9IGF3YWl0IGFuYWx5emVBcmVhUGl4ZWxzKGd1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEpO1xuXG4gICAgLy8gU2kgZWwgYW5cdTAwRTFsaXNpcyBhY3R1YWwgZXN0XHUwMEUxIHZhY1x1MDBFRG8gcGVybyB0ZW5lbW9zIHBcdTAwRUR4ZWxlcyBvcmlnaW5hbGVzIHZpcnR1YWxlcyxcbiAgICAvLyBlc3RvIHNpZ25pZmljYSBxdWUgZWwgXHUwMEUxcmVhIHNpZ3VlIHZhY1x1MDBFRGEgY29tbyBzZSBlc3BlcmFiYVxuICAgIGlmICghY3VycmVudFBpeGVscyB8fCBjdXJyZW50UGl4ZWxzLnNpemUgPT09IDApIHtcbiAgICAgIGlmIChndWFyZFN0YXRlLmlzVmlydHVhbEFyZWEpIHtcbiAgICAgICAgLy8gXHUwMEMxcmVhIHZpcnR1YWwgc2lndWUgdmFjXHUwMEVEYSBjb21vIHNlIGVzcGVyYWJhLCBubyBoYXkgY2FtYmlvc1xuICAgICAgICBndWFyZFN0YXRlLmxhc3RDaGVjayA9IERhdGUubm93KCk7XG4gICAgICAgIGlmIChndWFyZFN0YXRlLnVpKSB7XG4gICAgICAgICAgZ3VhcmRTdGF0ZS51aS51cGRhdGVTdGF0dXMoJ1x1MjcwNSBcdTAwQzFyZWEgcHJvdGVnaWRhIC0gc2luIGNhbWJpb3MgKFx1MDBFMXJlYSB2aXJ0dWFsIHZhY1x1MDBFRGEpJywgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUZW5lbW9zIHBcdTAwRUR4ZWxlcyBvcmlnaW5hbGVzIHJlYWxlcyBwZXJvIGVsIGFuXHUwMEUxbGlzaXMgYWN0dWFsIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgIC8vIEVzdG8gaW5kaWNhIHF1ZSBsb3MgcFx1MDBFRHhlbGVzIGZ1ZXJvbiBib3JyYWRvc1xuICAgICAgICBsb2coYFx1RDgzRFx1REVBOCBQXHUwMEVEeGVsZXMgb3JpZ2luYWxlcyBkZXRlY3RhZG9zIHBlcm8gYW5cdTAwRTFsaXNpcyBhY3R1YWwgdmFjXHUwMEVEbyAtIHBcdTAwRUR4ZWxlcyBmdWVyb24gYm9ycmFkb3NgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjaGFuZ2VzID0gbmV3IE1hcCgpO1xuICAgIGxldCBjaGFuZ2VkQ291bnQgPSAwO1xuXG4gICAgaWYgKGd1YXJkU3RhdGUuaXNWaXJ0dWFsQXJlYSAmJiBjdXJyZW50UGl4ZWxzICYmIGN1cnJlbnRQaXhlbHMuc2l6ZSA+IDApIHtcbiAgICAgIC8vIENhc28gZXNwZWNpYWw6IFx1MDBFMXJlYSB2aXJ0dWFsIChvcmlnaW5hbG1lbnRlIHZhY1x1MDBFRGEpIHBlcm8gYWhvcmEgdGllbmUgcFx1MDBFRHhlbGVzXG4gICAgICAvLyBUb2RvcyBsb3MgcFx1MDBFRHhlbGVzIGFjdHVhbGVzIHNvbiBcImludHJ1c29zXCIgcXVlIGRlYmVuIHNlciBib3JyYWRvc1xuICAgICAgZm9yIChjb25zdCBba2V5LCBjdXJyZW50UGl4ZWxdIG9mIGN1cnJlbnRQaXhlbHMpIHtcbiAgICAgICAgY2hhbmdlcy5zZXQoa2V5LCB7XG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHR5cGU6ICdpbnRydXNpb24nLCAvLyBOdWV2byB0aXBvIHBhcmEgcFx1MDBFRHhlbGVzIHF1ZSBubyBkZWJlclx1MDBFRGFuIGVzdGFyXG4gICAgICAgICAgb3JpZ2luYWw6IG51bGwsIC8vIE5vIGhheSBwXHUwMEVEeGVsIG9yaWdpbmFsIGVuIFx1MDBFMXJlYSB2aXJ0dWFsXG4gICAgICAgICAgY3VycmVudDogY3VycmVudFBpeGVsXG4gICAgICAgIH0pO1xuICAgICAgICBjaGFuZ2VkQ291bnQrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29tcGFyYWNpXHUwMEYzbiBub3JtYWw6IHBcdTAwRUR4ZWxlcyBvcmlnaW5hbGVzIHZzIGFjdHVhbGVzXG4gICAgICBmb3IgKGNvbnN0IFtrZXksIG9yaWdpbmFsUGl4ZWxdIG9mIGd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFBpeGVsID0gY3VycmVudFBpeGVscy5nZXQoa2V5KTtcbiAgICAgICAgXG4gICAgICAgIGlmICghY3VycmVudFBpeGVsKSB7XG4gICAgICAgICAgLy8gUFx1MDBFRHhlbCBmdWUgYm9ycmFkb1xuICAgICAgICAgIGNoYW5nZXMuc2V0KGtleSwge1xuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgdHlwZTogJ2RlbGV0ZWQnLFxuICAgICAgICAgICAgb3JpZ2luYWw6IG9yaWdpbmFsUGl4ZWwsXG4gICAgICAgICAgICBjdXJyZW50OiBudWxsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2hhbmdlZENvdW50Kys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUGFyYSBwXHUwMEVEeGVsZXMgZGUgSlNPTiBpbXBvcnRhZG8sIHVzYXIgY29tcGFyYWNpXHUwMEYzbiBtXHUwMEUxcyB0b2xlcmFudGVcbiAgICAgICAgICAvLyBDb21wYXJhciBwcmltZXJvIHBvciBjb2xvcklkLCB5IHNpIG5vIGNvaW5jaWRlLCB2ZXJpZmljYXIgc2kgbG9zIGNvbG9yZXMgc29uIHNpbWlsYXJlc1xuICAgICAgICAgIGxldCBpc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoY3VycmVudFBpeGVsLmNvbG9ySWQgIT09IG9yaWdpbmFsUGl4ZWwuY29sb3JJZCkge1xuICAgICAgICAgICAgLy8gVXNhciBlbCBtXHUwMEU5dG9kbyBkZSBjb21wYXJhY2lcdTAwRjNuIGNvbmZpZ3VyYWRvIChSR0IgbyBMQUIpXG4gICAgICAgICAgICBjb25zdCBjb21wYXJpc29uTWV0aG9kID0gZ3VhcmRTdGF0ZS5jb25maWc/LmNvbG9yQ29tcGFyaXNvbk1ldGhvZCB8fCAncmdiJztcbiAgICAgICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IGd1YXJkU3RhdGUuY29uZmlnPy5jb2xvclRocmVzaG9sZCB8fCAxMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaXNDaGFuZ2VkID0gY29tcGFyZUNvbG9ycyhjdXJyZW50UGl4ZWwsIG9yaWdpbmFsUGl4ZWwsIGNvbXBhcmlzb25NZXRob2QsIHRocmVzaG9sZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGlmIChpc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIGNoYW5nZXMuc2V0KGtleSwge1xuICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICAgIHR5cGU6ICdjaGFuZ2VkJyxcbiAgICAgICAgICAgICAgb3JpZ2luYWw6IG9yaWdpbmFsUGl4ZWwsXG4gICAgICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnRQaXhlbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjaGFuZ2VkQ291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgaWYgKGNoYW5nZWRDb3VudCA+IDApIHtcbiAgICAgIGxvZyhgXHVEODNEXHVERUE4IERldGVjdGFkb3MgJHtjaGFuZ2VkQ291bnR9IGNhbWJpb3MgZW4gZWwgXHUwMEUxcmVhIHByb3RlZ2lkYWApO1xuICAgICAgZ3VhcmRTdGF0ZS5jaGFuZ2VzID0gY2hhbmdlcztcbiAgICAgIFxuICAgICAgLy8gQWN0dWFsaXphciBVSVxuICAgICAgaWYgKGd1YXJkU3RhdGUudWkpIHtcbiAgICAgICAgZ3VhcmRTdGF0ZS51aS51cGRhdGVTdGF0dXMoYFx1RDgzRFx1REVBOCAke2NoYW5nZWRDb3VudH0gY2FtYmlvcyBkZXRlY3RhZG9zYCwgJ3dhcm5pbmcnKTtcbiAgICAgICAgZ3VhcmRTdGF0ZS51aS51cGRhdGVQcm9ncmVzcyhjaGFuZ2VzLnNpemUsIGd1YXJkU3RhdGUub3JpZ2luYWxQaXhlbHMuc2l6ZSwgZ3VhcmRTdGF0ZS5pc1ZpcnR1YWxBcmVhKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFjdHVhbGl6YXIgZXN0YWRcdTAwRURzdGljYXMgZGUgYW5cdTAwRTFsaXNpc1xuICAgICAgICB1cGRhdGVBbmFseXNpc1N0YXRzSW5VSShndWFyZFN0YXRlLm9yaWdpbmFsUGl4ZWxzLCBjdXJyZW50UGl4ZWxzKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gTVx1MDBFOXRyaWNhczogcmVzdW1lbiBkZSBhblx1MDBFMWxpc2lzIChjb24gY2FtYmlvcylcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBpbmNvcnJlY3QgPSAwO1xuICAgICAgICBsZXQgbWlzc2luZyA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBjaGFuZ2VzLnZhbHVlcygpKSB7XG4gICAgICAgICAgaWYgKHYudHlwZSA9PT0gJ2RlbGV0ZWQnKSBtaXNzaW5nKys7XG4gICAgICAgICAgZWxzZSBpbmNvcnJlY3QrKztcbiAgICAgICAgfVxuICAgICAgICBkZWJvdW5jZWRBbmFseXNpc1N1bW1hcnkoeyB0b3RhbDogZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscy5zaXplLCBpbmNvcnJlY3QsIG1pc3NpbmcgfSk7XG4gICAgICB9IGNhdGNoIHt9XG5cbiAgICAgIC8vIEluaWNpYXIgcmVwYXJhY2lcdTAwRjNuIGF1dG9tXHUwMEUxdGljYSBzaSBlc3RcdTAwRTEgaGFiaWxpdGFkYSB5IG5vIGVzdFx1MDBFMSBlbiBtb2RvIHZpZ1x1MDBFRGFcbiAgaWYgKGd1YXJkU3RhdGUucnVubmluZyAmJiAhZ3VhcmRTdGF0ZS53YXRjaE1vZGUpIHtcbiAgICAgICAgYXdhaXQgcmVwYWlyQ2hhbmdlcyhjaGFuZ2VzKTtcbiAgICAgIH0gZWxzZSBpZiAoZ3VhcmRTdGF0ZS53YXRjaE1vZGUpIHtcbiAgICAgICAgLy8gRW4gbW9kbyB2aWdcdTAwRURhLCBzb2xvIHJlZ2lzdHJhciBsb3MgY2FtYmlvcyBzaW4gcmVwYXJhclxuICAgICAgICBsb2coYFx1RDgzRFx1REM0MVx1RkUwRiBNb2RvIFZpZ1x1MDBFRGE6ICR7Y2hhbmdlcy5zaXplfSBjYW1iaW9zIGRldGVjdGFkb3MgKHNpbiByZXBhcmFyKWApO1xuICAgICAgICBpZiAoZ3VhcmRTdGF0ZS51aSkge1xuICAgICAgICAgIGd1YXJkU3RhdGUudWkudXBkYXRlU3RhdHVzKGBcdUQ4M0RcdURDNDFcdUZFMEYgVmlnXHUwMEVEYTogJHtjaGFuZ2VzLnNpemV9IGNhbWJpb3MgZGV0ZWN0YWRvc2AsICd3YXJuaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfSBlbHNlIHtcbiAgICAgIC8vIEFjdHVhbGl6YXIgdGltZXN0YW1wIGRlIFx1MDBGQWx0aW1hIHZlcmlmaWNhY2lcdTAwRjNuXG4gICAgICBndWFyZFN0YXRlLmxhc3RDaGVjayA9IERhdGUubm93KCk7XG4gICAgICBpZiAoZ3VhcmRTdGF0ZS51aSkge1xuICAgICAgICBndWFyZFN0YXRlLnVpLnVwZGF0ZVN0YXR1cygnXHUyNzA1IFx1MDBDMXJlYSBwcm90ZWdpZGEgLSBzaW4gY2FtYmlvcycsICdzdWNjZXNzJyk7XG4gICAgICAgIGd1YXJkU3RhdGUudWkudXBkYXRlUHJvZ3Jlc3MoMCwgZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscy5zaXplLCBndWFyZFN0YXRlLmlzVmlydHVhbEFyZWEpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWN0dWFsaXphciBlc3RhZFx1MDBFRHN0aWNhcyBkZSBhblx1MDBFMWxpc2lzIHRhbWJpXHUwMEU5biBjdWFuZG8gbm8gaGF5IGNhbWJpb3NcbiAgICAgICAgdXBkYXRlQW5hbHlzaXNTdGF0c0luVUkoZ3VhcmRTdGF0ZS5vcmlnaW5hbFBpeGVscywgY3VycmVudFBpeGVscyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1cdTAwRTl0cmljYXM6IHJlc3VtZW4gZGUgYW5cdTAwRTFsaXNpcyAoc2luIGNhbWJpb3MpXG4gICAgICB0cnkge1xuICAgICAgICBkZWJvdW5jZWRBbmFseXNpc1N1bW1hcnkoe1xuICAgICAgICAgIHRvdGFsOiBndWFyZFN0YXRlLm9yaWdpbmFsUGl4ZWxzLnNpemUsXG4gICAgICAgICAgaW5jb3JyZWN0OiAwLFxuICAgICAgICAgIG1pc3Npbmc6IDBcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIHt9XG4gICAgfVxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nKGBcdTI3NEMgRXJyb3IgdmVyaWZpY2FuZG8gY2FtYmlvczpgLCBlcnJvcik7XG4gICAgaWYgKGd1YXJkU3RhdGUudWkpIHtcbiAgICAgIGd1YXJkU3RhdGUudWkudXBkYXRlU3RhdHVzKGBcdTI3NEMgRXJyb3IgdmVyaWZpY2FuZG86ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gUmVwYXJhciBsb3MgY2FtYmlvcyBkZXRlY3RhZG9zIC0gYWhvcmEgY29uIGdlc3RpXHUwMEYzbiBkZSBjYXJnYXMgbVx1MDBFRG5pbWFzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVwYWlyQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gIGlmIChjaGFuZ2VzLnNpemUgPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgXG4gIC8vIEV2aXRhciBidWNsZXMgaW5maW5pdG9zIGRlbCBtb25pdG9yZW8gZGUgY2FyZ2FzXG4gIGlmIChfaXNSZXBhaXJpbmcpIHtcbiAgICBsb2coJ1x1RDgzRFx1REQwNCBSZXBhcmFjaVx1MDBGM24geWEgZW4gcHJvZ3Jlc28sIG9taXRpZW5kbyBsbGFtYWRhIGR1cGxpY2FkYScpO1xuICAgIHJldHVybjtcbiAgfVxuICBcbiAgX2lzUmVwYWlyaW5nID0gdHJ1ZTtcbiAgXG4gIHRyeSB7XG4gICAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzLnZhbHVlcygpKTtcbiAgICBjb25zdCBhdmFpbGFibGVDaGFyZ2VzID0gTWF0aC5mbG9vcihndWFyZFN0YXRlLmN1cnJlbnRDaGFyZ2VzKTtcbiAgICBcbiAgICAvLyBMXHUwMEYzZ2ljYSBlc3BlY2lhbCBwYXJhIFwiZ2FzdGFyIHRvZG9zIGxvcyBwXHUwMEVEeGVsZXMgYWwgaW5pY2lhclwiXG4gICAgbGV0IG1heFJlcGFpcnM7XG4gICAgbGV0IGlzRmlyc3RCYXRjaCA9IGd1YXJkU3RhdGUuc3BlbmRBbGxQaXhlbHNPblN0YXJ0ICYmIGd1YXJkU3RhdGUudG90YWxSZXBhaXJlZCA9PT0gMDtcbiAgICBcbiAgICBpZiAoaXNGaXJzdEJhdGNoKSB7XG4gICAgICAvLyBFbiBlbCBwcmltZXIgYmF0Y2gsIHVzYXIgdG9kYXMgbGFzIGNhcmdhcyBkaXNwb25pYmxlcyBwZXJvIHJlc3BldGFuZG8gdW4gbVx1MDBFRG5pbW8gZGUgc2VndXJpZGFkXG4gICAgICBjb25zdCBzYWZldHlNaW5pbXVtID0gTWF0aC5taW4oNSwgZ3VhcmRTdGF0ZS5taW5DaGFyZ2VzVG9XYWl0KTsgLy8gTWFudGVuZXIgYWwgbWVub3MgNSBjYXJnYXMgbyBlbCBtXHUwMEVEbmltbyBjb25maWd1cmFkb1xuICAgICAgY29uc3Qgc3BlbmRhYmxlQ2hhcmdlcyA9IE1hdGgubWF4KDAsIGF2YWlsYWJsZUNoYXJnZXMgLSBzYWZldHlNaW5pbXVtKTtcbiAgICAgIG1heFJlcGFpcnMgPSBNYXRoLm1pbihjaGFuZ2VzQXJyYXkubGVuZ3RoLCBzcGVuZGFibGVDaGFyZ2VzLCBHVUFSRF9ERUZBVUxUUy5NQVhfUElYRUxTX1BFUl9CQVRDSCk7XG4gICAgICBsb2coYFx1MjZBMSBQcmltZXIgYmF0Y2ggLSBnYXN0YW5kbyAke21heFJlcGFpcnN9IHBcdTAwRUR4ZWxlcyBkZSAke3NwZW5kYWJsZUNoYXJnZXN9IGNhcmdhcyBnYXN0YWJsZXMgKCR7YXZhaWxhYmxlQ2hhcmdlc30gdG90YWwsICR7c2FmZXR5TWluaW11bX0gbVx1MDBFRG5pbW8gZGUgc2VndXJpZGFkKWApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEZXRlcm1pbmFyIGN1XHUwMEUxbnRvcyBwXHUwMEVEeGVsZXMgbmVjZXNpdGFtb3MgcmVwYXJhclxuICAgICAgY29uc3QgcGl4ZWxzTmVlZGVkID0gY2hhbmdlc0FycmF5Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGJhdGNoU2l6ZSA9IGd1YXJkU3RhdGUucGl4ZWxzUGVyQmF0Y2g7XG4gICAgICBcbiAgICAgIC8vIFNpIHF1ZWRhbiBtZW5vcyBwXHUwMEVEeGVsZXMgcXVlIGVsIHRhbWFcdTAwRjFvIGRlbCBsb3RlLCB1c2FyIHNvbG8gbG9zIHBcdTAwRUR4ZWxlcyByZXN0YW50ZXNcbiAgICAgIGlmIChwaXhlbHNOZWVkZWQgPiAwICYmIHBpeGVsc05lZWRlZCA8IGJhdGNoU2l6ZSkge1xuICAgICAgICAvLyBDYWxjdWxhciBjYXJnYXMgZGlzcG9uaWJsZXMgcGFyYSBnYXN0YXIgKHRvdGFsIC0gbVx1MDBFRG5pbW8gYSBtYW50ZW5lcilcbiAgICAgICAgY29uc3Qgc3BlbmRhYmxlQ2hhcmdlcyA9IE1hdGgubWF4KDAsIGF2YWlsYWJsZUNoYXJnZXMgLSBndWFyZFN0YXRlLm1pbkNoYXJnZXNUb1dhaXQpO1xuICAgICAgICBcbiAgICAgICAgLy8gVmVyaWZpY2FyIHNpIHRlbmVtb3Mgc3VmaWNpZW50ZXMgY2FyZ2FzIHBhcmEgbG9zIHBcdTAwRUR4ZWxlcyByZXN0YW50ZXNcbiAgICAgICAgaWYgKHNwZW5kYWJsZUNoYXJnZXMgPj0gcGl4ZWxzTmVlZGVkKSB7XG4gICAgICAgICAgbWF4UmVwYWlycyA9IHBpeGVsc05lZWRlZDtcbiAgICAgICAgICBsb2coYFx1RDgzQ1x1REZBRiBQXHUwMEVEeGVsZXMgcmVzdGFudGVzOiBnYXN0YW5kbyBzb2xvICR7bWF4UmVwYWlyc30gcFx1MDBFRHhlbGVzIGRlICR7c3BlbmRhYmxlQ2hhcmdlc30gY2FyZ2FzIGdhc3RhYmxlcyAoJHthdmFpbGFibGVDaGFyZ2VzfSB0b3RhbCwgJHtndWFyZFN0YXRlLm1pbkNoYXJnZXNUb1dhaXR9IG1cdTAwRURuaW1vKWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHRvdGFsTmVlZGVkID0gZ3VhcmRTdGF0ZS5taW5DaGFyZ2VzVG9XYWl0ICsgcGl4ZWxzTmVlZGVkO1xuICAgICAgICAgIGxvZyhgXHUyNkEwXHVGRTBGIENhcmdhcyBpbnN1ZmljaWVudGVzIHBhcmEgcFx1MDBFRHhlbGVzIHJlc3RhbnRlczogJHthdmFpbGFibGVDaGFyZ2VzfS8ke3RvdGFsTmVlZGVkfSAobmVjZXNpdGEgJHtwaXhlbHNOZWVkZWR9ICsgJHtndWFyZFN0YXRlLm1pbkNoYXJnZXNUb1dhaXR9IG1cdTAwRURuaW1vKS4gRXNwZXJhbmRvIG1cdTAwRTFzIGNhcmdhcy4uLmApO1xuICAgICAgICAgIGlmIChndWFyZFN0YXRlLnVpKSB7XG4gICAgICAgICAgICBndWFyZFN0YXRlLnVpLnVwZGF0ZVN0YXR1cyhgXHUyM0YzIEVzcGVyYW5kbyAke3RvdGFsTmVlZGVkfSBjYXJnYXMgcGFyYSBwXHUwMEVEeGVsZXMgcmVzdGFudGVzICgke2F2YWlsYWJsZUNoYXJnZXN9IGFjdHVhbGVzLCBtXHUwMEVEbmltbyAke2d1YXJkU3RhdGUubWluQ2hhcmdlc1RvV2FpdH0pYCwgJ3dhcm5pbmcnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY2hhcmdlc05lZWRlZCA9IHRvdGFsTmVlZGVkIC0gYXZhaWxhYmxlQ2hhcmdlcztcbiAgICAgICAgICAgIGNvbnN0IHRpbWVUb1dhaXQgPSBjaGFyZ2VzTmVlZGVkICogQ0hBUkdFX1JFR0VORVJBVElPTl9USU1FO1xuICAgICAgICAgICAgX25leHRDaGFyZ2VUaW1lID0gRGF0ZS5ub3coKSArIHRpbWVUb1dhaXQ7XG4gICAgICAgICAgICBzdGFydENvdW50ZG93blRpbWVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTFx1MDBGM2dpY2Egbm9ybWFsOiB2ZXJpZmljYXIgc2kgaGF5IGNhcmdhcyBzdWZpY2llbnRlcyBwYXJhIHVuIGxvdGUgY29tcGxldG9cbiAgICAgICAgLy8gQ2FsY3VsYXIgY2FyZ2FzIGRpc3BvbmlibGVzIHBhcmEgZ2FzdGFyICh0b3RhbCAtIG1cdTAwRURuaW1vIGEgbWFudGVuZXIpXG4gICAgICAgIGNvbnN0IHNwZW5kYWJsZUNoYXJnZXMgPSBNYXRoLm1heCgwLCBhdmFpbGFibGVDaGFyZ2VzIC0gZ3VhcmRTdGF0ZS5taW5DaGFyZ2VzVG9XYWl0KTtcbiAgICAgICAgY29uc3QgcmVxdWlyZWRDaGFyZ2VzID0gZ3VhcmRTdGF0ZS5waXhlbHNQZXJCYXRjaDtcbiAgICAgICAgXG4gICAgICAgICAgaWYgKHNwZW5kYWJsZUNoYXJnZXMgPCByZXF1aXJlZENoYXJnZXMpIHtcbiAgICAgICAgICBjb25zdCB0b3RhbE5lZWRlZCA9IGd1YXJkU3RhdGUubWluQ2hhcmdlc1RvV2FpdCArIHJlcXVpcmVkQ2hhcmdlcztcbiAgICAgICAgICBsb2coYFx1MjZBMFx1RkUwRiBDYXJnYXMgaW5zdWZpY2llbnRlcyBwYXJhIGxvdGUgY29tcGxldG86ICR7YXZhaWxhYmxlQ2hhcmdlc30vJHt0b3RhbE5lZWRlZH0gKG5lY2VzaXRhICR7cmVxdWlyZWRDaGFyZ2VzfSArICR7Z3VhcmRTdGF0ZS5taW5DaGFyZ2VzVG9XYWl0fSBtXHUwMEVEbmltbykuIEVzcGVyYW5kbyBtXHUwMEUxcyBjYXJnYXMuLi5gKTtcbiAgICAgICAgICBpZiAoZ3VhcmRTdGF0ZS51aSkge1xuICAgICAgICAgICAgZ3VhcmRTdGF0ZS51aS51cGRhdGVTdGF0dXMoYFx1MjNGMyBFc3BlcmFuZG8gJHt0b3RhbE5lZWRlZH0gY2FyZ2FzIHBhcmEgY29udGludWFyICgke2F2YWlsYWJsZUNoYXJnZXN9IGFjdHVhbGVzLCBtXHUwMEVEbmltbyAke2d1YXJkU3RhdGUubWluQ2hhcmdlc1RvV2FpdH0pYCwgJ3dhcm5pbmcnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY2hhcmdlc05lZWRlZCA9IHRvdGFsTmVlZGVkIC0gYXZhaWxhYmxlQ2hhcmdlcztcbiAgICAgICAgICAgIGNvbnN0IHRpbWVUb1dhaXQgPSBjaGFyZ2VzTmVlZGVkICogQ0hBUkdFX1JFR0VORVJBVElPTl9USU1FO1xuICAgICAgICAgICAgX25leHRDaGFyZ2VUaW1lID0gRGF0ZS5ub3coKSArIHRpbWVUb1dhaXQ7XG4gICAgICAgICAgICBzdGFydENvdW50ZG93blRpbWVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHsgdHJhY2tFdmVudCgncmVwYWlyX3dhaXQnLCB7IGJvdFZhcmlhbnQ6ICdhdXRvLWd1YXJkJywgbWV0YWRhdGE6IHsgYXZhaWxhYmxlOiBhdmFpbGFibGVDaGFyZ2VzLCBtaW5Ub1dhaXQ6IGd1YXJkU3RhdGUubWluQ2hhcmdlc1RvV2FpdCwgcmVxdWlyZWQ6IHJlcXVpcmVkQ2hhcmdlcyB9IH0pOyB9IGNhdGNoIHt9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBoYXkgY2FyZ2FzIHN1ZmljaWVudGVzLCB1c2FyIGVsIGxvdGUgbm9ybWFsIGNvbmZpZ3VyYWRvXG4gICAgICAgIG1heFJlcGFpcnMgPSBNYXRoLm1pbihjaGFuZ2VzQXJyYXkubGVuZ3RoLCBndWFyZFN0YXRlLnBpeGVsc1BlckJhdGNoLCBzcGVuZGFibGVDaGFyZ2VzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgbG9nKGBcdUQ4M0RcdURFRTBcdUZFMEYgQ2FyZ2FzOiAke2F2YWlsYWJsZUNoYXJnZXN9LCBNXHUwMEVEbmltbzogJHtndWFyZFN0YXRlLm1pbkNoYXJnZXNUb1dhaXR9LCBSZXBhcmFuZG86ICR7bWF4UmVwYWlyc30gcFx1MDBFRHhlbGVzYCk7XG4gICAgXG4gICAgaWYgKGd1YXJkU3RhdGUudWkpIHtcbiAgICAgIGd1YXJkU3RhdGUudWkudXBkYXRlU3RhdHVzKGBcdUQ4M0RcdURFRTBcdUZFMEYgUmVwYXJhbmRvICR7bWF4UmVwYWlyc30gcFx1MDBFRHhlbGVzLi4uYCwgJ2luZm8nKTtcbiAgICB9XG4gICAgXG4gICAgLy8gU2VsZWNjaW9uYXIgcFx1MDBFRHhlbGVzIHVzYW5kbyBlbCBwYXRyXHUwMEYzbiBjb25maWd1cmFkbyBjb24gcHJlZmVyZW5jaWEgeSBleGNsdXNpXHUwMEYzbiBkZSBjb2xvclxuICAgIC8vIE51ZXZhIGxcdTAwRjNnaWNhOiBpbnRlbnRhciBjb21wbGV0YXIgZWwgbG90ZSBhbCBtXHUwMEUxeGltbyByZXZhbGlkYW5kbyBoYXN0YSAzIHZlY2VzXG4gICAgbGV0IHNlbGVjdGVkS2V5cyA9IGdldFBpeGVsc0J5UGF0dGVybihcbiAgICAgIGd1YXJkU3RhdGUucHJvdGVjdGlvblBhdHRlcm4sXG4gICAgICBjaGFuZ2VzLFxuICAgICAgbWF4UmVwYWlycyxcbiAgICAgIGd1YXJkU3RhdGUucHJlZmVyQ29sb3IsXG4gICAgICBndWFyZFN0YXRlLnByZWZlcnJlZENvbG9ySWQsXG4gICAgICBndWFyZFN0YXRlLnByZWZlcnJlZENvbG9ySWRzLFxuICAgICAgZ3VhcmRTdGF0ZS5leGNsdWRlQ29sb3IsXG4gICAgICBndWFyZFN0YXRlLmV4Y2x1ZGVkQ29sb3JJZHNcbiAgICApO1xuXG4gICAgbGV0IGF0dGVtcHRzID0gMDtcbiAgICB3aGlsZSAoc2VsZWN0ZWRLZXlzLmxlbmd0aCA8IG1heFJlcGFpcnMgJiYgYXR0ZW1wdHMgPCAzKSB7XG4gICAgICBhdHRlbXB0cysrO1xuICAgICAgLy8gUmV2YWxpZGFyIGNvbnRyYSBlbCBtYXBhIGRlIGNhbWJpb3MgYWN0dWFsIHBvciBzaSBoYSBoYWJpZG8gdmFyaWFjaW9uZXNcbiAgICAgIC8vIHkgdm9sdmVyIGEgaW50ZW50YXIgY29tcGxldGFyIGVsIGxvdGVcbiAgICAgIHNlbGVjdGVkS2V5cyA9IGdldFBpeGVsc0J5UGF0dGVybihcbiAgICAgICAgZ3VhcmRTdGF0ZS5wcm90ZWN0aW9uUGF0dGVybixcbiAgICAgICAgY2hhbmdlcyxcbiAgICAgICAgbWF4UmVwYWlycyxcbiAgICAgICAgZ3VhcmRTdGF0ZS5wcmVmZXJDb2xvcixcbiAgICAgICAgZ3VhcmRTdGF0ZS5wcmVmZXJyZWRDb2xvcklkLFxuICAgICAgICBndWFyZFN0YXRlLnByZWZlcnJlZENvbG9ySWRzLFxuICAgICAgICBndWFyZFN0YXRlLmV4Y2x1ZGVDb2xvcixcbiAgICAgICAgZ3VhcmRTdGF0ZS5leGNsdWRlZENvbG9ySWRzXG4gICAgICApO1xuICAgICAgaWYgKHNlbGVjdGVkS2V5cy5sZW5ndGggPCBtYXhSZXBhaXJzKSB7XG4gICAgICAgIGxvZyhgXHVEODNEXHVERDAxIFJlaW50ZW50YW5kbyBjb21wbGV0YXIgbG90ZSAoJHtzZWxlY3RlZEtleXMubGVuZ3RofS8ke21heFJlcGFpcnN9KSBpbnRlbnRvICR7YXR0ZW1wdHN9LzNgKTtcbiAgICAgICAgYXdhaXQgc2xlZXAoMTAwKTsgLy8gYnJldmUgZXNwZXJhIHBhcmEgZGFyIHRpZW1wbyBhIGNhbWJpb3MgY29uY3VycmVudGVzXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29uY2VudHJhciBlbCBiYXRjaCBlbiB1biBcdTAwRkFuaWNvIHRpbGUgcGFyYSBtaW5pbWl6YXIgbGxhbWFkYXMgYSBsYSBBUElcbiAgICBpZiAoc2VsZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIEFncnVwYXIgY2xhdmVzIHNlbGVjY2lvbmFkYXMgcG9yIHRpbGVcbiAgICAgIGNvbnN0IHRpbGVHcm91cHMgPSBuZXcgTWFwKCk7IC8vIHRpbGVLZXkgLT4gYXJyYXkgZGUga2V5c1xuICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2VsZWN0ZWRLZXlzKSB7XG4gICAgICAgIGNvbnN0IGNoID0gY2hhbmdlcy5nZXQoa2V5KTtcbiAgICAgICAgY29uc3QgcHggPSBjaD8udHlwZSA9PT0gJ2ludHJ1c2lvbicgPyBjaD8uY3VycmVudCA6IGNoPy5vcmlnaW5hbDtcbiAgICAgICAgaWYgKCFweCkgY29udGludWU7XG4gICAgICAgIGNvbnN0IHRrZXkgPSBgJHtweC50aWxlWH0sJHtweC50aWxlWX1gO1xuICAgICAgICBpZiAoIXRpbGVHcm91cHMuaGFzKHRrZXkpKSB0aWxlR3JvdXBzLnNldCh0a2V5LCBbXSk7XG4gICAgICAgIHRpbGVHcm91cHMuZ2V0KHRrZXkpLnB1c2goa2V5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbGVHcm91cHMuc2l6ZSA+IDEpIHtcbiAgICAgICAgLy8gRWxlZ2lyIGVsIHRpbGUgY29uIG1cdTAwRTFzIGNhbmRpZGF0b3NcbiAgICAgICAgbGV0IGJlc3RUaWxlS2V5ID0gbnVsbDtcbiAgICAgICAgbGV0IGJlc3RDb3VudCA9IC0xO1xuICAgICAgICBmb3IgKGNvbnN0IFt0a2V5LCBrZXlzXSBvZiB0aWxlR3JvdXBzKSB7XG4gICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gYmVzdENvdW50KSB7XG4gICAgICAgICAgICBiZXN0Q291bnQgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgICAgIGJlc3RUaWxlS2V5ID0gdGtleTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZmluYWxLZXlzID0gdGlsZUdyb3Vwcy5nZXQoYmVzdFRpbGVLZXkpIHx8IFtdO1xuXG4gICAgICAgIC8vIEludGVudGFyIHJlbGxlbmFyIGhhc3RhIG1heFJlcGFpcnMgY29uIG1cdTAwRTFzIGNsYXZlcyBkZWwgbWlzbW8gdGlsZVxuICAgICAgICBpZiAoZmluYWxLZXlzLmxlbmd0aCA8IG1heFJlcGFpcnMpIHtcbiAgICAgICAgICBjb25zdCBbYmVzdFRpbGVYLCBiZXN0VGlsZVldID0gYmVzdFRpbGVLZXkuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgICAgICAvLyBDb25zdHJ1aXIgdW4gbWFwYSBmaWx0cmFkbyBzb2xvIGNvbiBjYW1iaW9zIGRlIGVzZSB0aWxlXG4gICAgICAgICAgY29uc3QgZmlsdGVyZWRDaGFuZ2VzID0gbmV3IE1hcCgpO1xuICAgICAgICAgIGZvciAoY29uc3QgW2ssIGNoXSBvZiBjaGFuZ2VzKSB7XG4gICAgICAgICAgICBjb25zdCBweEFueSA9IGNoPy50eXBlID09PSAnaW50cnVzaW9uJyA/IGNoPy5jdXJyZW50IDogY2g/Lm9yaWdpbmFsO1xuICAgICAgICAgICAgaWYgKHB4QW55ICYmIHB4QW55LnRpbGVYID09PSBiZXN0VGlsZVggJiYgcHhBbnkudGlsZVkgPT09IGJlc3RUaWxlWSkge1xuICAgICAgICAgICAgICBmaWx0ZXJlZENoYW5nZXMuc2V0KGssIGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBVc2FyIGVsIG1pc21vIHBhdHJcdTAwRjNuIHkgcHJlZmVyZW5jaWFzIHBhcmEgb2J0ZW5lciBtXHUwMEUxcyBjYW5kaWRhdG9zIGRlbCB0aWxlXG4gICAgICAgICAgaWYgKGZpbHRlcmVkQ2hhbmdlcy5zaXplID4gMCkge1xuICAgICAgICAgICAgY29uc3QgdGlsZUtleXMgPSBnZXRQaXhlbHNCeVBhdHRlcm4oXG4gICAgICAgICAgICAgIGd1YXJkU3RhdGUucHJvdGVjdGlvblBhdHRlcm4sXG4gICAgICAgICAgICAgIGZpbHRlcmVkQ2hhbmdlcyxcbiAgICAgICAgICAgICAgbWF4UmVwYWlycyxcbiAgICAgICAgICAgICAgZ3VhcmRTdGF0ZS5wcmVmZXJDb2xvcixcbiAgICAgICAgICAgICAgZ3VhcmRTdGF0ZS5wcmVmZXJyZWRDb2xvcklkLFxuICAgICAgICAgICAgICBndWFyZFN0YXRlLnByZWZlcnJlZENvbG9ySWRzLFxuICAgICAgICAgICAgICBndWFyZFN0YXRlLmV4Y2x1ZGVDb2xvcixcbiAgICAgICAgICAgICAgZ3VhcmRTdGF0ZS5leGNsdWRlZENvbG9ySWRzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgbG9zIHF1ZSBubyBlc3RcdTAwRTluIHlhXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IG5ldyBTZXQoZmluYWxLZXlzKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgayBvZiB0aWxlS2V5cykge1xuICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcuaGFzKGspKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goayk7XG4gICAgICAgICAgICAgIGV4aXN0aW5nLmFkZChrKTtcbiAgICAgICAgICAgICAgaWYgKGZpbmFsS2V5cy5sZW5ndGggPj0gbWF4UmVwYWlycykgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbG9nKGBcdUQ4M0RcdURDRTYgQ29uY2VudHJhbmRvIGxvdGUgZW4gdGlsZSAoJHtiZXN0VGlsZVh9LCR7YmVzdFRpbGVZfSk6ICR7ZmluYWxLZXlzLmxlbmd0aH0vJHttYXhSZXBhaXJzfSBwXHUwMEVEeGVsZXNgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzYXIgc29sbyBsYXMgY2xhdmVzIGRlbCB0aWxlIG9iamV0aXZvXG4gICAgICAgIHNlbGVjdGVkS2V5cyA9IGZpbmFsS2V5cztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwaXhlbHNUb1JlcGFpciA9IHNlbGVjdGVkS2V5cy5tYXAoa2V5ID0+IGNoYW5nZXMuZ2V0KGtleSkpO1xuICAgIFxuICAvLyBBZ3J1cGFyIGNhbWJpb3MgcG9yIHRpbGUgcGFyYSBlZmljaWVuY2lhICh0cmFzIHBvc2libGUgY29uY2VudHJhY2lcdTAwRjNuKVxuICBjb25zdCBjaGFuZ2VzQnlUaWxlID0gbmV3IE1hcCgpO1xuICAgIFxuICAgIGZvciAoY29uc3QgY2hhbmdlIG9mIHBpeGVsc1RvUmVwYWlyKSB7XG4gICAgICBsZXQgdGFyZ2V0UGl4ZWwsIHRhcmdldENvbG9ySWQ7XG4gICAgICBcbiAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gJ2ludHJ1c2lvbicpIHtcbiAgICAgICAgLy8gUGFyYSBpbnRydXNpb25lcywgdXNhciBsYXMgY29vcmRlbmFkYXMgZGVsIHBcdTAwRUR4ZWwgYWN0dWFsIHBlcm8gcGludGFyIGRlIGJsYW5jb1xuICAgICAgICB0YXJnZXRQaXhlbCA9IGNoYW5nZS5jdXJyZW50O1xuICAgICAgICB0YXJnZXRDb2xvcklkID0gNTsgLy8gQmxhbmNvIHBhcmEgYm9ycmFyIGxhIGludHJ1c2lcdTAwRjNuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBQYXJhIGNhbWJpb3Mgbm9ybWFsZXMsIHJlc3RhdXJhciBhbCBjb2xvciBvcmlnaW5hbFxuICAgICAgICB0YXJnZXRQaXhlbCA9IGNoYW5nZS5vcmlnaW5hbDtcbiAgICAgICAgdGFyZ2V0Q29sb3JJZCA9IGNoYW5nZS5vcmlnaW5hbC5jb2xvcklkO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBMb2cgZGUgZGlhZ25cdTAwRjNzdGljbyBwYXJhIHZlcmlmaWNhciBjb29yZGVuYWRhc1xuICAgICAgbG9nKGBcdUQ4M0RcdUREMjcgUmVwYXJhbmRvIHBcdTAwRUR4ZWwgZW4gKCR7dGFyZ2V0UGl4ZWwuZ2xvYmFsWH0sICR7dGFyZ2V0UGl4ZWwuZ2xvYmFsWX0pIHRpbGUoJHt0YXJnZXRQaXhlbC50aWxlWH0sICR7dGFyZ2V0UGl4ZWwudGlsZVl9KSBsb2NhbCgke3RhcmdldFBpeGVsLmxvY2FsWH0sICR7dGFyZ2V0UGl4ZWwubG9jYWxZfSlgKTtcbiAgICAgIFxuICAgICAgY29uc3QgdGlsZUtleSA9IGAke3RhcmdldFBpeGVsLnRpbGVYfSwke3RhcmdldFBpeGVsLnRpbGVZfWA7XG4gICAgICBcbiAgICAgIGlmICghY2hhbmdlc0J5VGlsZS5oYXModGlsZUtleSkpIHtcbiAgICAgICAgY2hhbmdlc0J5VGlsZS5zZXQodGlsZUtleSwgW10pO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjaGFuZ2VzQnlUaWxlLmdldCh0aWxlS2V5KS5wdXNoKHtcbiAgICAgICAgbG9jYWxYOiB0YXJnZXRQaXhlbC5sb2NhbFgsXG4gICAgICAgIGxvY2FsWTogdGFyZ2V0UGl4ZWwubG9jYWxZLFxuICAgICAgICBjb2xvcklkOiB0YXJnZXRDb2xvcklkLFxuICAgICAgICBnbG9iYWxYOiB0YXJnZXRQaXhlbC5nbG9iYWxYLFxuICAgICAgICBnbG9iYWxZOiB0YXJnZXRQaXhlbC5nbG9iYWxZLFxuICAgICAgICBjaGFuZ2VUeXBlOiBjaGFuZ2UudHlwZVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGxldCB0b3RhbFJlcGFpcmVkID0gMDtcbiAgICBcbiAgICAvLyBTaSBoYXkgbVx1MDBGQWx0aXBsZXMgdGlsZXMsIG9wdGFyIHBvciB1biBcdTAwRkFuaWNvIHRpbGUgcG9yIGJhdGNoIChlbCBtXHUwMEUxcyBncmFuZGUpXG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGNoYW5nZXNCeVRpbGUuZW50cmllcygpKTtcbiAgICBpZiAoZW50cmllcy5sZW5ndGggPiAxKSB7XG4gICAgICBlbnRyaWVzLnNvcnQoKGEsIGIpID0+IGJbMV0ubGVuZ3RoIC0gYVsxXS5sZW5ndGgpO1xuICAgICAgZW50cmllcyA9IFtlbnRyaWVzWzBdXTtcbiAgICB9XG5cbiAgICAvLyBSZXBhcmFyIHBvciBsb3RlICh1biBzb2xvIHRpbGUpXG4gICAgZm9yIChjb25zdCBbdGlsZUtleSwgdGlsZUNoYW5nZXNdIG9mIGVudHJpZXMpIHtcbiAgICAgIGNvbnN0IFt0aWxlWCwgdGlsZVldID0gdGlsZUtleS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjb29yZHMgPSBbXTtcbiAgICAgICAgY29uc3QgY29sb3JzID0gW107XG4gICAgICAgIFxuICAgICAgICAgIC8vIE9yZGVuIGRldGVybWluaXN0YTogcHJpbWVybyBwb3IgWSBsdWVnbyBYIChpZ3VhbCBxdWUgb3JkZW4gdG9wLXRvLWJvdHRvbSAvIGxlZnQtdG8tcmlnaHQpXG4gICAgICAgICAgY29uc3Qgb3JkZXJlZCA9IFsuLi50aWxlQ2hhbmdlc10uc29ydCgoYSxiKT0+IChhLmxvY2FsWSAtIGIubG9jYWxZKSB8fCAoYS5sb2NhbFggLSBiLmxvY2FsWCkpO1xuICAgICAgICAgIGZvciAoY29uc3QgY2hhbmdlIG9mIG9yZGVyZWQpIHtcbiAgICAgICAgICAgIGNvb3Jkcy5wdXNoKGNoYW5nZS5sb2NhbFgsIGNoYW5nZS5sb2NhbFkpO1xuICAgICAgICAgICAgY29sb3JzLnB1c2goY2hhbmdlLmNvbG9ySWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBhaW50UGl4ZWxCYXRjaCh0aWxlWCwgdGlsZVksIGNvb3JkcywgY29sb3JzKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQucGFpbnRlZCA+IDApIHtcbiAgICAgICAgICB0b3RhbFJlcGFpcmVkICs9IHJlc3VsdC5wYWludGVkO1xuICAgICAgICAgIGd1YXJkU3RhdGUuY3VycmVudENoYXJnZXMgPSBNYXRoLm1heCgwLCBndWFyZFN0YXRlLmN1cnJlbnRDaGFyZ2VzIC0gcmVzdWx0LnBhaW50ZWQpO1xuICAgICAgICAgIGd1YXJkU3RhdGUudG90YWxSZXBhaXJlZCArPSByZXN1bHQucGFpbnRlZDtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZW1vdmVyIGNhbWJpb3MgcmVwYXJhZG9zIGV4aXRvc2FtZW50ZVxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0LnBhaW50ZWQgJiYgaSA8IHRpbGVDaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSB0aWxlQ2hhbmdlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke2NoYW5nZS5nbG9iYWxYfSwke2NoYW5nZS5nbG9iYWxZfWA7XG4gICAgICAgICAgICBndWFyZFN0YXRlLmNoYW5nZXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGxvZyhgXHUyNzA1IFJlcGFyYWRvcyAke3Jlc3VsdC5wYWludGVkfSBwXHUwMEVEeGVsZXMgZW4gdGlsZSAoJHt0aWxlWH0sJHt0aWxlWX0pYCk7XG4gICAgICAgICAgLy8gTVx1MDBFOXRyaWNhczogYWN1bXVsYXIgcG9yIGxvdGVcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWNmZyA9IGdldE1ldHJpY3NDb25maWcoeyBWQVJJQU5UOiAnYXV0by1ndWFyZCcgfSk7XG4gICAgICAgICAgICBpZiAobWNmZy5FTkFCTEVEKSB7XG4gICAgICAgICAgICAgIC8vIEVudmlhciBwb3IgbG90ZSAodGlsZSkgcGFyYSBncmFudWxhcmlkYWQgc2luIHNhdHVyYXJcbiAgICAgICAgICAgICAgcGl4ZWxzUmVwYWlyZWQocmVzdWx0LnBhaW50ZWQsIHtcbiAgICAgICAgICAgICAgICBib3RWYXJpYW50OiAnYXV0by1ndWFyZCcsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIHRpbGVYLCB0aWxlWSxcbiAgICAgICAgICAgICAgICAgIGJhdGNoU2l6ZTogdGlsZUNoYW5nZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgcGVuZGluZ0FmdGVyOiBndWFyZFN0YXRlLmNoYW5nZXMuc2l6ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZyhgXHUyNzRDIEVycm9yIHJlcGFyYW5kbyB0aWxlICgke3RpbGVYfSwke3RpbGVZfSk6YCwgcmVzdWx0LmVycm9yKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWNmZyA9IGdldE1ldHJpY3NDb25maWcoKTtcbiAgICAgICAgICAgIGlmIChtY2ZnLkVOQUJMRUQgJiYgcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgIHJlcG9ydEVycm9yKGByZXBhaXIgdGlsZSAke3RpbGVYfSwke3RpbGVZfTogJHtyZXN1bHQuZXJyb3J9YCwge1xuICAgICAgICAgICAgICAgIGJvdFZhcmlhbnQ6ICdhdXRvLWd1YXJkJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIHt9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZyhgXHUyNzRDIEVycm9yIHJlcGFyYW5kbyB0aWxlICgke3RpbGVYfSwke3RpbGVZfSk6YCwgZXJyb3IpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IG1jZmcgPSBnZXRNZXRyaWNzQ29uZmlnKCk7XG4gICAgICAgICAgaWYgKG1jZmcuRU5BQkxFRCAmJiBlcnJvcj8ubWVzc2FnZSkge1xuICAgICAgICAgICAgcmVwb3J0RXJyb3IoYGV4Y2VwdGlvbiB0aWxlICR7dGlsZVh9LCR7dGlsZVl9OiAke2Vycm9yLm1lc3NhZ2V9YCwge1xuICAgICAgICAgICAgICBib3RWYXJpYW50OiAnYXV0by1ndWFyZCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBEZWxheSBlbnRyZSB0aWxlcyBzaSBoYXkgbVx1MDBGQWx0aXBsZXNcbiAgICAgIGlmIChjaGFuZ2VzQnlUaWxlLnNpemUgPiAxKSB7XG4gICAgICAgIGlmIChndWFyZFN0YXRlLnJhbmRvbVdhaXRUaW1lKSB7XG4gICAgICAgICAgLy8gVGllbXBvIGFsZWF0b3JpbyBlbnRyZSBsb3Rlc1xuICAgICAgICAgIGNvbnN0IHJhbmRvbURlbGF5ID0gTWF0aC5yYW5kb20oKSAqIChndWFyZFN0YXRlLnJhbmRvbVdhaXRNYXggLSBndWFyZFN0YXRlLnJhbmRvbVdhaXRNaW4pICsgZ3VhcmRTdGF0ZS5yYW5kb21XYWl0TWluO1xuICAgICAgICAgIGxvZyhgXHUyM0YwIEVzcGVyYW5kbyAke3JhbmRvbURlbGF5LnRvRml4ZWQoMSl9IHNlZ3VuZG9zIChhbGVhdG9yaW8pIGFudGVzIGRlbCBzaWd1aWVudGUgbG90ZWApO1xuICAgICAgICAgIGF3YWl0IHNsZWVwKHJhbmRvbURlbGF5ICogMTAwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXdhaXQgc2xlZXAoNTAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgY29uc3QgcmVtYWluaW5nQ2hhcmdlcyA9IE1hdGguZmxvb3IoZ3VhcmRTdGF0ZS5jdXJyZW50Q2hhcmdlcyk7XG4gIGNvbnN0IHBlbmRpbmdDaGFuZ2VzID0gZ3VhcmRTdGF0ZS5jaGFuZ2VzLnNpemU7XG4gICAgXG4gICAgbG9nKGBcdUQ4M0RcdURFRTBcdUZFMEYgUmVwYXJhY2lcdTAwRjNuIGNvbXBsZXRhZGE6ICR7dG90YWxSZXBhaXJlZH0gcFx1MDBFRHhlbGVzIHJlcGFyYWRvcywgJHtyZW1haW5pbmdDaGFyZ2VzfSBjYXJnYXMgcmVzdGFudGVzYCk7XG4gICAgXG4gICAgaWYgKGd1YXJkU3RhdGUudWkpIHtcbiAgICAgIGlmIChwZW5kaW5nQ2hhbmdlcyA+IDAgJiYgcmVtYWluaW5nQ2hhcmdlcyA8IGd1YXJkU3RhdGUubWluQ2hhcmdlc1RvV2FpdCkge1xuICAgICAgICBndWFyZFN0YXRlLnVpLnVwZGF0ZVN0YXR1cyhgXHUyM0YzIEVzcGVyYW5kbyAke2d1YXJkU3RhdGUubWluQ2hhcmdlc1RvV2FpdH0gY2FyZ2FzIHBhcmEgY29udGludWFyICgke3JlbWFpbmluZ0NoYXJnZXN9IGFjdHVhbGVzKWAsICd3YXJuaW5nJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhciB0aWVtcG8gZXN0aW1hZG8gcGFyYSBhbGNhbnphciBlbCBtXHUwMEVEbmltbyBkZSBjYXJnYXNcbiAgICAgICAgY29uc3QgY2hhcmdlc05lZWRlZCA9IGd1YXJkU3RhdGUubWluQ2hhcmdlc1RvV2FpdCAtIHJlbWFpbmluZ0NoYXJnZXM7XG4gICAgICAgIGNvbnN0IHRpbWVUb1dhaXQgPSBjaGFyZ2VzTmVlZGVkICogQ0hBUkdFX1JFR0VORVJBVElPTl9USU1FO1xuICAgICAgICBfbmV4dENoYXJnZVRpbWUgPSBEYXRlLm5vdygpICsgdGltZVRvV2FpdDtcbiAgICAgICAgXG4gICAgICAgIC8vIEluaWNpYXIgY29udGFkb3IgZGUgdGllbXBvXG4gICAgICAgIHN0YXJ0Q291bnRkb3duVGltZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGd1YXJkU3RhdGUudWkudXBkYXRlU3RhdHVzKGBcdTI3MDUgUmVwYXJhZG9zICR7dG90YWxSZXBhaXJlZH0gcFx1MDBFRHhlbGVzIGNvcnJlY3RhbWVudGVgLCAnc3VjY2VzcycpO1xuICAgICAgICBzdG9wQ291bnRkb3duVGltZXIoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZ3VhcmRTdGF0ZS51aS51cGRhdGVTdGF0cyh7XG4gICAgICAgIGNoYXJnZXM6IHJlbWFpbmluZ0NoYXJnZXMsXG4gICAgICAgIHJlcGFpcmVkOiBndWFyZFN0YXRlLnRvdGFsUmVwYWlyZWQsXG4gICAgICAgIHBlbmRpbmc6IHBlbmRpbmdDaGFuZ2VzXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gQXBsaWNhciBkZWxheSBhbGVhdG9yaW8gZW50cmUgYmF0Y2hlcyBzaSBlc3RcdTAwRTEgY29uZmlndXJhZG9cbiAgICBpZiAoZ3VhcmRTdGF0ZS5yYW5kb21XYWl0VGltZSAmJiBwZW5kaW5nQ2hhbmdlcyA+IDAgJiYgcmVtYWluaW5nQ2hhcmdlcyA+PSBndWFyZFN0YXRlLm1pbkNoYXJnZXNUb1dhaXQpIHtcbiAgICAgIGNvbnN0IHJhbmRvbURlbGF5ID0gTWF0aC5yYW5kb20oKSAqIChndWFyZFN0YXRlLnJhbmRvbVdhaXRNYXggLSBndWFyZFN0YXRlLnJhbmRvbVdhaXRNaW4pICsgZ3VhcmRTdGF0ZS5yYW5kb21XYWl0TWluO1xuICAgICAgbG9nKGBcdTIzRjAgRXNwZXJhbmRvICR7cmFuZG9tRGVsYXkudG9GaXhlZCgxKX0gc2VndW5kb3MgKGFsZWF0b3JpbykgYW50ZXMgZGVsIHNpZ3VpZW50ZSBiYXRjaGApO1xuICAgICAgYXdhaXQgc2xlZXAocmFuZG9tRGVsYXkgKiAxMDAwKTtcbiAgICB9XG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nKGBcdTI3NEMgRXJyb3IgZW4gcmVwYXJhY2lcdTAwRjNuOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgX2lzUmVwYWlyaW5nID0gZmFsc2U7XG4gIH1cbn1cblxuLy8gRGVib3VuY2Ugc2ltcGxlIHBhcmEgcmVzdW1lbiBkZSBhblx1MDBFMWxpc2lzXG5sZXQgX2FuYWx5c2lzRGVib3VuY2VJZCA9IG51bGw7XG5mdW5jdGlvbiBkZWJvdW5jZWRBbmFseXNpc1N1bW1hcnkoeyB0b3RhbCwgaW5jb3JyZWN0LCBtaXNzaW5nIH0pIHtcbiAgaWYgKF9hbmFseXNpc0RlYm91bmNlSWQpIHtcbiAgICBjbGVhclRpbWVvdXQoX2FuYWx5c2lzRGVib3VuY2VJZCk7XG4gIH1cbiAgX2FuYWx5c2lzRGVib3VuY2VJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICB0cmFja0V2ZW50KCdhbmFseXNpc19zdW1tYXJ5Jywge1xuICAgICAgICBib3RWYXJpYW50OiAnYXV0by1ndWFyZCcsXG4gICAgICAgIG1ldGFkYXRhOiB7IHRvdGFsLCBpbmNvcnJlY3QsIG1pc3NpbmcgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCB7fVxuICB9LCAxNTAwKTtcbn1cblxuLy8gUGludGFyIG1cdTAwRkFsdGlwbGVzIHBcdTAwRUR4ZWxlcyBlbiB1biBzb2xvIHRpbGVcbmFzeW5jIGZ1bmN0aW9uIHBhaW50UGl4ZWxCYXRjaCh0aWxlWCwgdGlsZVksIGNvb3JkcywgY29sb3JzKSB7XG4gIHRyeSB7XG4gICAgLy8gUmV1dGlsaXphciB0b2tlbiBkZSB0dXJuc3RpbGUgc2kgZXN0XHUwMEUxIGNhY2hlYWRvIChubyBmb3J6YXIgbnVldm8pXG4gICAgbGV0IHRva2VuID0gZ2V0Q2FjaGVkVG9rZW4oKTtcbiAgICBpZiAoIXRva2VuKSB0b2tlbiA9IGF3YWl0IGVuc3VyZVRva2VuKCk7XG5cbiAgICAvLyBTYW5pdGl6YXIgY29vcmRlbmFkYXMgKGlndWFsIHF1ZSBpbWFnZS9wYWludGVyLmpzKVxuICAgIGNvbnN0IHNhbml0aXplZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBjb25zdCB4ID0gKChOdW1iZXIoY29vcmRzW2ldKSAlIDEwMDApICsgMTAwMCkgJSAxMDAwO1xuICAgICAgY29uc3QgeSA9ICgoTnVtYmVyKGNvb3Jkc1tpICsgMV0pICUgMTAwMCkgKyAxMDAwKSAlIDEwMDA7XG4gICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHgpICYmIE51bWJlci5pc0Zpbml0ZSh5KSkgc2FuaXRpemVkLnB1c2goeCwgeSk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJldmlld1BhaXJzID0gc2FuaXRpemVkLnNsaWNlKDAsIDYpLmpvaW4oJywnKTtcbiAgICBsb2coYFtBUEldIEVudmlhbmRvIGxvdGUgYSB0aWxlICR7dGlsZVh9LCR7dGlsZVl9IGNvbiAke2NvbG9ycy5sZW5ndGh9IHBcdTAwRUR4ZWxlcy4gRWplbXBsbyBjb29yZHM6ICR7cHJldmlld1BhaXJzfWApO1xuXG4gICAgLy8gTGxhbWFyIGEgbGEgbWlzbWEgQVBJIHF1ZSB1c2EgZWwgYm90IGRlIGltYWdlbiAoZ2FyYW50aXphIG1pc21vIGJvZHkgeSBjYWJlY2VyYXMpXG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IHBvc3RQaXhlbEJhdGNoSW1hZ2UodGlsZVgsIHRpbGVZLCBzYW5pdGl6ZWQsIGNvbG9ycywgdG9rZW4pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHJlc3Auc3VjY2VzcyxcbiAgICAgIHBhaW50ZWQ6IHJlc3AucGFpbnRlZCB8fCAwLFxuICAgICAgc3RhdHVzOiByZXNwLnN0YXR1cyxcbiAgICAgIGVycm9yOiByZXNwLnN1Y2Nlc3MgPyBudWxsIDogKHJlc3AuanNvbj8uZXJyb3IgfHwgcmVzcC5qc29uPy5tZXNzYWdlIHx8IGBIVFRQICR7cmVzcC5zdGF0dXN9YClcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBwYWludGVkOiAwLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICB9XG59IiwgImltcG9ydCB7IGxvZyB9IGZyb20gXCIuLi9jb3JlL2xvZ2dlci5qc1wiO1xuaW1wb3J0IHsgZ3VhcmRTdGF0ZSB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuXG4vKipcbiAqIEFsZ29yaXRtb3MgZGUgcGF0cm9uZXMgZGUgcHJvdGVjY2lcdTAwRjNuIHBhcmEgcmVwYXJhciBwXHUwMEVEeGVsZXNcbiAqL1xuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGFsZWF0b3JpbyAtIHNlbGVjY2lvbmEgcFx1MDBFRHhlbGVzIGFsIGF6YXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbVBhdHRlcm4oY2hhbmdlcywgY291bnQpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgY29uc3Qgc2VsZWN0ZWQgPSBbXTtcbiAgXG4gIC8vIENyZWFyIHVuYSBjb3BpYSBwYXJhIG5vIG1vZGlmaWNhciBlbCBvcmlnaW5hbFxuICBjb25zdCBhdmFpbGFibGUgPSBbLi4uY2hhbmdlc0FycmF5XTtcbiAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4oY291bnQsIGF2YWlsYWJsZS5sZW5ndGgpOyBpKyspIHtcbiAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGF2YWlsYWJsZS5sZW5ndGgpO1xuICAgIHNlbGVjdGVkLnB1c2goYXZhaWxhYmxlLnNwbGljZShyYW5kb21JbmRleCwgMSlbMF0pO1xuICB9XG4gIFxuICByZXR1cm4gc2VsZWN0ZWQ7XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gbGluZWFsIGhhY2lhIGFycmliYSAtIHJlY29ycmUgZGUgYXJyaWJhIGhhY2lhIGFiYWpvIHBvciBmaWxhc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGluZVVwUGF0dGVybihjaGFuZ2VzLCBjb3VudCkge1xuICBjb25zdCBjaGFuZ2VzQXJyYXkgPSBBcnJheS5mcm9tKGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlc0FycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBcbiAgLy8gQWdydXBhciBwb3IgZmlsYXMgeSBvcmRlbmFyIGRlIGFycmliYSBoYWNpYSBhYmFqb1xuICBjb25zdCBieVJvdyA9IG5ldyBNYXAoKTtcbiAgY2hhbmdlc0FycmF5LmZvckVhY2goY29vcmQgPT4ge1xuICAgIGNvbnN0IFtfeCwgeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgIGlmICghYnlSb3cuaGFzKHkpKSBieVJvdy5zZXQoeSwgW10pO1xuICAgIGJ5Um93LmdldCh5KS5wdXNoKGNvb3JkKTtcbiAgfSk7XG4gIFxuICBjb25zdCBzZWxlY3RlZCA9IFtdO1xuICBjb25zdCBzb3J0ZWRSb3dzID0gQXJyYXkuZnJvbShieVJvdy5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTsgLy8gQXJyaWJhIGhhY2lhIGFiYWpvXG4gIFxuICBmb3IgKGNvbnN0IHJvdyBvZiBzb3J0ZWRSb3dzKSB7XG4gICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA+PSBjb3VudCkgYnJlYWs7XG4gICAgY29uc3Qgcm93UGl4ZWxzID0gYnlSb3cuZ2V0KHJvdykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgW3gxXSA9IGEuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNvbnN0IFt4Ml0gPSBiLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgICByZXR1cm4geDEgLSB4MjsgLy8gSXpxdWllcmRhIGEgZGVyZWNoYSBkZW50cm8gZGUgbGEgZmlsYVxuICAgIH0pO1xuICAgIFxuICAgIGZvciAoY29uc3QgY29vcmQgb2Ygcm93UGl4ZWxzKSB7XG4gICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID49IGNvdW50KSBicmVhaztcbiAgICAgIHNlbGVjdGVkLnB1c2goY29vcmQpO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHNlbGVjdGVkLnNsaWNlKDAsIGNvdW50KTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBsaW5lYWwgaGFjaWEgYWJham8gLSByZWNvcnJlIGRlIGFiYWpvIGhhY2lhIGFycmliYSBwb3IgZmlsYXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpbmVEb3duUGF0dGVybihjaGFuZ2VzLCBjb3VudCkge1xuICBjb25zdCBjaGFuZ2VzQXJyYXkgPSBBcnJheS5mcm9tKGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlc0FycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBcbiAgLy8gQWdydXBhciBwb3IgZmlsYXMgeSBvcmRlbmFyIGRlIGFiYWpvIGhhY2lhIGFycmliYVxuICBjb25zdCBieVJvdyA9IG5ldyBNYXAoKTtcbiAgY2hhbmdlc0FycmF5LmZvckVhY2goY29vcmQgPT4ge1xuICAgIGNvbnN0IFtfeCwgeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgIGlmICghYnlSb3cuaGFzKHkpKSBieVJvdy5zZXQoeSwgW10pO1xuICAgIGJ5Um93LmdldCh5KS5wdXNoKGNvb3JkKTtcbiAgfSk7XG4gIFxuICBjb25zdCBzZWxlY3RlZCA9IFtdO1xuICBjb25zdCBzb3J0ZWRSb3dzID0gQXJyYXkuZnJvbShieVJvdy5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IGIgLSBhKTsgLy8gQWJham8gaGFjaWEgYXJyaWJhXG4gIFxuICBmb3IgKGNvbnN0IHJvdyBvZiBzb3J0ZWRSb3dzKSB7XG4gICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA+PSBjb3VudCkgYnJlYWs7XG4gICAgY29uc3Qgcm93UGl4ZWxzID0gYnlSb3cuZ2V0KHJvdykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgW3gxXSA9IGEuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNvbnN0IFt4Ml0gPSBiLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgICByZXR1cm4geDEgLSB4MjsgLy8gSXpxdWllcmRhIGEgZGVyZWNoYSBkZW50cm8gZGUgbGEgZmlsYVxuICAgIH0pO1xuICAgIFxuICAgIGZvciAoY29uc3QgY29vcmQgb2Ygcm93UGl4ZWxzKSB7XG4gICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID49IGNvdW50KSBicmVhaztcbiAgICAgIHNlbGVjdGVkLnB1c2goY29vcmQpO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHNlbGVjdGVkLnNsaWNlKDAsIGNvdW50KTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBsaW5lYWwgaGFjaWEgbGEgaXpxdWllcmRhIC0gcmVjb3JyZSBkZSBpenF1aWVyZGEgYSBkZXJlY2hhIHBvciBjb2x1bW5hc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGluZUxlZnRQYXR0ZXJuKGNoYW5nZXMsIGNvdW50KSB7XG4gIGNvbnN0IGNoYW5nZXNBcnJheSA9IEFycmF5LmZyb20oY2hhbmdlcyk7XG4gIGlmIChjaGFuZ2VzQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIFxuICAvLyBBZ3J1cGFyIHBvciBjb2x1bW5hcyB5IG9yZGVuYXIgZGUgaXpxdWllcmRhIGEgZGVyZWNoYVxuICBjb25zdCBieUNvbCA9IG5ldyBNYXAoKTtcbiAgY2hhbmdlc0FycmF5LmZvckVhY2goY29vcmQgPT4ge1xuICAgIGNvbnN0IFt4LCBfeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgIGlmICghYnlDb2wuaGFzKHgpKSBieUNvbC5zZXQoeCwgW10pO1xuICAgIGJ5Q29sLmdldCh4KS5wdXNoKGNvb3JkKTtcbiAgfSk7XG4gIFxuICBjb25zdCBzZWxlY3RlZCA9IFtdO1xuICBjb25zdCBzb3J0ZWRDb2xzID0gQXJyYXkuZnJvbShieUNvbC5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTsgLy8gSXpxdWllcmRhIGEgZGVyZWNoYVxuICBcbiAgZm9yIChjb25zdCBjb2wgb2Ygc29ydGVkQ29scykge1xuICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPj0gY291bnQpIGJyZWFrO1xuICAgIGNvbnN0IGNvbFBpeGVscyA9IGJ5Q29sLmdldChjb2wpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IFssIHkxXSA9IGEuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNvbnN0IFssIHkyXSA9IGIuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgIHJldHVybiB5MSAtIHkyOyAvLyBBcnJpYmEgYSBhYmFqbyBkZW50cm8gZGUgbGEgY29sdW1uYVxuICAgIH0pO1xuICAgIFxuICAgIGZvciAoY29uc3QgY29vcmQgb2YgY29sUGl4ZWxzKSB7XG4gICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID49IGNvdW50KSBicmVhaztcbiAgICAgIHNlbGVjdGVkLnB1c2goY29vcmQpO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHNlbGVjdGVkLnNsaWNlKDAsIGNvdW50KTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBsaW5lYWwgaGFjaWEgbGEgZGVyZWNoYSAtIHJlY29ycmUgZGUgZGVyZWNoYSBhIGl6cXVpZXJkYSBwb3IgY29sdW1uYXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpbmVSaWdodFBhdHRlcm4oY2hhbmdlcywgY291bnQpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgaWYgKGNoYW5nZXNBcnJheS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgXG4gIC8vIEFncnVwYXIgcG9yIGNvbHVtbmFzIHkgb3JkZW5hciBkZSBkZXJlY2hhIGEgaXpxdWllcmRhXG4gIGNvbnN0IGJ5Q29sID0gbmV3IE1hcCgpO1xuICBjaGFuZ2VzQXJyYXkuZm9yRWFjaChjb29yZCA9PiB7XG4gICAgY29uc3QgW3gsIF95XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgaWYgKCFieUNvbC5oYXMoeCkpIGJ5Q29sLnNldCh4LCBbXSk7XG4gICAgYnlDb2wuZ2V0KHgpLnB1c2goY29vcmQpO1xuICB9KTtcbiAgXG4gIGNvbnN0IHNlbGVjdGVkID0gW107XG4gIGNvbnN0IHNvcnRlZENvbHMgPSBBcnJheS5mcm9tKGJ5Q29sLmtleXMoKSkuc29ydCgoYSwgYikgPT4gYiAtIGEpOyAvLyBEZXJlY2hhIGEgaXpxdWllcmRhXG4gIFxuICBmb3IgKGNvbnN0IGNvbCBvZiBzb3J0ZWRDb2xzKSB7XG4gICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA+PSBjb3VudCkgYnJlYWs7XG4gICAgY29uc3QgY29sUGl4ZWxzID0gYnlDb2wuZ2V0KGNvbCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgWywgeTFdID0gYS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgY29uc3QgWywgeTJdID0gYi5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgcmV0dXJuIHkxIC0geTI7IC8vIEFycmliYSBhIGFiYWpvIGRlbnRybyBkZSBsYSBjb2x1bW5hXG4gICAgfSk7XG4gICAgXG4gICAgZm9yIChjb25zdCBjb29yZCBvZiBjb2xQaXhlbHMpIHtcbiAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPj0gY291bnQpIGJyZWFrO1xuICAgICAgc2VsZWN0ZWQucHVzaChjb29yZCk7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gc2VsZWN0ZWQuc2xpY2UoMCwgY291bnQpO1xufVxuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGRlIGJvcmRlcyAtIHByaW9yaXphIHBlclx1MDBFRG1ldHJvIGV4dGVyaW9yLCBsdWVnbyBpbnRlcmlvciBlbiBhbmlsbG9zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCb3JkZXJzUGF0dGVybihjaGFuZ2VzLCBjb3VudCkge1xuICBjb25zdCBjaGFuZ2VzQXJyYXkgPSBBcnJheS5mcm9tKGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlc0FycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBcbiAgLy8gQ2FsY3VsYXIgYm91bmRpbmcgYm94IGRlbCBcdTAwRTFyZWEgZGUgY2FtYmlvc1xuICBsZXQgbWluWCA9IEluZmluaXR5LCBtYXhYID0gLUluZmluaXR5O1xuICBsZXQgbWluWSA9IEluZmluaXR5LCBtYXhZID0gLUluZmluaXR5O1xuICBcbiAgY2hhbmdlc0FycmF5LmZvckVhY2goY29vcmQgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgbWluWCA9IE1hdGgubWluKG1pblgsIHgpO1xuICAgIG1heFggPSBNYXRoLm1heChtYXhYLCB4KTtcbiAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgeSk7XG4gICAgbWF4WSA9IE1hdGgubWF4KG1heFksIHkpO1xuICB9KTtcbiAgXG4gIC8vIEFncnVwYXIgcFx1MDBFRHhlbGVzIHBvciBhbmlsbG9zIGRlc2RlIGVsIGJvcmRlIGV4dGVyaW9yXG4gIGNvbnN0IHJpbmdNYXAgPSBuZXcgTWFwKCk7XG4gIFxuICBjaGFuZ2VzQXJyYXkuZm9yRWFjaChjb29yZCA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBcbiAgICAvLyBDYWxjdWxhciBkaXN0YW5jaWEgYWwgYm9yZGUgbVx1MDBFMXMgY2VyY2Fub1xuICAgIGNvbnN0IGRpc3RUb0xlZnQgPSB4IC0gbWluWDtcbiAgICBjb25zdCBkaXN0VG9SaWdodCA9IG1heFggLSB4O1xuICAgIGNvbnN0IGRpc3RUb1RvcCA9IHkgLSBtaW5ZO1xuICAgIGNvbnN0IGRpc3RUb0JvdHRvbSA9IG1heFkgLSB5O1xuICAgIFxuICAgIC8vIEVsIGFuaWxsbyBlcyBsYSBkaXN0YW5jaWEgbVx1MDBFRG5pbWEgYWwgYm9yZGVcbiAgICBjb25zdCByaW5nID0gTWF0aC5taW4oZGlzdFRvTGVmdCwgZGlzdFRvUmlnaHQsIGRpc3RUb1RvcCwgZGlzdFRvQm90dG9tKTtcbiAgICBcbiAgICBpZiAoIXJpbmdNYXAuaGFzKHJpbmcpKSByaW5nTWFwLnNldChyaW5nLCBbXSk7XG4gICAgcmluZ01hcC5nZXQocmluZykucHVzaChjb29yZCk7XG4gIH0pO1xuICBcbiAgLy8gU2VsZWNjaW9uYXIgZGVzZGUgZWwgYW5pbGxvIG1cdTAwRTFzIGV4dGVyaW9yIChyaW5nIDApIGhhY2lhIGFkZW50cm9cbiAgY29uc3Qgc2VsZWN0ZWQgPSBbXTtcbiAgY29uc3Qgc29ydGVkUmluZ3MgPSBBcnJheS5mcm9tKHJpbmdNYXAua2V5cygpKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gIFxuICBmb3IgKGNvbnN0IHJpbmcgb2Ygc29ydGVkUmluZ3MpIHtcbiAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID49IGNvdW50KSBicmVhaztcbiAgICBjb25zdCByaW5nUGl4ZWxzID0gcmluZ01hcC5nZXQocmluZyk7XG4gICAgXG4gICAgZm9yIChjb25zdCBjb29yZCBvZiByaW5nUGl4ZWxzKSB7XG4gICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID49IGNvdW50KSBicmVhaztcbiAgICAgIHNlbGVjdGVkLnB1c2goY29vcmQpO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHNlbGVjdGVkLnNsaWNlKDAsIGNvdW50KTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBkZSBsXHUwMEVEbmVhIC0gc2VsZWNjaW9uYSBwXHUwMEVEeGVsZXMgZW4gbFx1MDBFRG5lYXMgaG9yaXpvbnRhbGVzL3ZlcnRpY2FsZXNcbiAqL1xuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGRlIGNlbnRybyAtIHNlbGVjY2lvbmEgcFx1MDBFRHhlbGVzIGRlc2RlIGVsIGNlbnRybyBoYWNpYSBhZnVlcmFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENlbnRlclBhdHRlcm4oY2hhbmdlcywgY291bnQpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgaWYgKGNoYW5nZXNBcnJheS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgXG4gIC8vIENhbGN1bGFyIGVsIGNlbnRybyBkZWwgXHUwMEUxcmVhIGRlIGNhbWJpb3NcbiAgbGV0IG1pblggPSBJbmZpbml0eSwgbWF4WCA9IC1JbmZpbml0eTtcbiAgbGV0IG1pblkgPSBJbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eTtcbiAgXG4gIGNoYW5nZXNBcnJheS5mb3JFYWNoKGNvb3JkID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCB4KTtcbiAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgeCk7XG4gICAgbWluWSA9IE1hdGgubWluKG1pblksIHkpO1xuICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCB5KTtcbiAgfSk7XG4gIFxuICAvLyBQcmVmZXJpciBlbCBjZW50cm8gZGVsIFx1MDBFMXJlYSBwcm90ZWdpZGEgc2kgZXhpc3RlIHBhcmEgbWF5b3IgZXN0YWJpbGlkYWRcbiAgbGV0IGNlbnRlclg7XG4gIGxldCBjZW50ZXJZO1xuICBpZiAoZ3VhcmRTdGF0ZT8ucHJvdGVjdGlvbkFyZWEgJiYgdHlwZW9mIGd1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEueDEgPT09ICdudW1iZXInICYmIHR5cGVvZiBndWFyZFN0YXRlLnByb3RlY3Rpb25BcmVhLngyID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgZ3VhcmRTdGF0ZS5wcm90ZWN0aW9uQXJlYS55MSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGd1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEueTIgPT09ICdudW1iZXInKSB7XG4gICAgY2VudGVyWCA9IChndWFyZFN0YXRlLnByb3RlY3Rpb25BcmVhLngxICsgZ3VhcmRTdGF0ZS5wcm90ZWN0aW9uQXJlYS54MikgLyAyO1xuICAgIGNlbnRlclkgPSAoZ3VhcmRTdGF0ZS5wcm90ZWN0aW9uQXJlYS55MSArIGd1YXJkU3RhdGUucHJvdGVjdGlvbkFyZWEueTIpIC8gMjtcbiAgfSBlbHNlIHtcbiAgICBjZW50ZXJYID0gKG1pblggKyBtYXhYKSAvIDI7XG4gICAgY2VudGVyWSA9IChtaW5ZICsgbWF4WSkgLyAyO1xuICB9XG4gIFxuICAvLyBPcmRlbmFyIHBvciBkaXN0YW5jaWEgYWwgY2VudHJvXG4gIGNvbnN0IHdpdGhEaXN0YW5jZSA9IGNoYW5nZXNBcnJheS5tYXAoY29vcmQgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIGNlbnRlclgsIDIpICsgTWF0aC5wb3coeSAtIGNlbnRlclksIDIpKTtcbiAgICByZXR1cm4geyBjb29yZCwgZGlzdGFuY2UgfTtcbiAgfSk7XG4gIFxuICB3aXRoRGlzdGFuY2Uuc29ydCgoYSwgYikgPT4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2UpO1xuICBcbiAgcmV0dXJuIHdpdGhEaXN0YW5jZS5zbGljZSgwLCBjb3VudCkubWFwKGl0ZW0gPT4gaXRlbS5jb29yZCk7XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gZXNwaXJhbCAtIHNlbGVjY2lvbmEgcFx1MDBFRHhlbGVzIGVuIGZvcm1hIGRlIGVzcGlyYWwgZGVzZGUgZWwgY2VudHJvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGlyYWxQYXR0ZXJuKGNoYW5nZXMsIGNvdW50KSB7XG4gIGNvbnN0IGNoYW5nZXNBcnJheSA9IEFycmF5LmZyb20oY2hhbmdlcyk7XG4gIGlmIChjaGFuZ2VzQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIFxuICAvLyBDYWxjdWxhciBlbCBjZW50cm8gZGVsIFx1MDBFMXJlYSBkZSBjYW1iaW9zXG4gIGxldCBtaW5YID0gSW5maW5pdHksIG1heFggPSAtSW5maW5pdHk7XG4gIGxldCBtaW5ZID0gSW5maW5pdHksIG1heFkgPSAtSW5maW5pdHk7XG4gIFxuICBjaGFuZ2VzQXJyYXkuZm9yRWFjaChjb29yZCA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBtaW5YID0gTWF0aC5taW4obWluWCwgeCk7XG4gICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIHgpO1xuICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCB5KTtcbiAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgeSk7XG4gIH0pO1xuICBcbiAgY29uc3QgY2VudGVyWCA9IE1hdGgucm91bmQoKG1pblggKyBtYXhYKSAvIDIpO1xuICBjb25zdCBjZW50ZXJZID0gTWF0aC5yb3VuZCgobWluWSArIG1heFkpIC8gMik7XG4gIFxuICAvLyBDcmVhciB1biBtYXBhIGRlIGNvb3JkZW5hZGFzIGRpc3BvbmlibGVzXG4gIGNvbnN0IGF2YWlsYWJsZUNvb3JkcyA9IG5ldyBTZXQoY2hhbmdlc0FycmF5KTtcbiAgY29uc3Qgc2VsZWN0ZWQgPSBbXTtcbiAgXG4gIC8vIEdlbmVyYXIgZXNwaXJhbFxuICBsZXQgeCA9IGNlbnRlclg7XG4gIGxldCB5ID0gY2VudGVyWTtcbiAgbGV0IGR4ID0gMDtcbiAgbGV0IGR5ID0gLTE7XG4gIGxldCBzdGVwcyA9IDE7XG4gIGxldCBzdGVwQ291bnQgPSAwO1xuICBsZXQgZGlyZWN0aW9uID0gMDsgLy8gMDogdXAsIDE6IHJpZ2h0LCAyOiBkb3duLCAzOiBsZWZ0XG4gIFxuICAvLyBDb21lbnphciBkZXNkZSBlbCBjZW50cm8gc2kgZXN0XHUwMEUxIGRpc3BvbmlibGVcbiAgY29uc3QgY2VudGVyQ29vcmQgPSBgJHtjZW50ZXJYfSwke2NlbnRlcll9YDtcbiAgaWYgKGF2YWlsYWJsZUNvb3Jkcy5oYXMoY2VudGVyQ29vcmQpKSB7XG4gICAgc2VsZWN0ZWQucHVzaChjZW50ZXJDb29yZCk7XG4gICAgYXZhaWxhYmxlQ29vcmRzLmRlbGV0ZShjZW50ZXJDb29yZCk7XG4gIH1cbiAgXG4gIHdoaWxlIChzZWxlY3RlZC5sZW5ndGggPCBjb3VudCAmJiBhdmFpbGFibGVDb29yZHMuc2l6ZSA+IDApIHtcbiAgICAvLyBNb3ZlciBlbiBsYSBkaXJlY2NpXHUwMEYzbiBhY3R1YWxcbiAgICB4ICs9IGR4O1xuICAgIHkgKz0gZHk7XG4gICAgXG4gICAgY29uc3QgY29vcmQgPSBgJHt4fSwke3l9YDtcbiAgICBpZiAoYXZhaWxhYmxlQ29vcmRzLmhhcyhjb29yZCkpIHtcbiAgICAgIHNlbGVjdGVkLnB1c2goY29vcmQpO1xuICAgICAgYXZhaWxhYmxlQ29vcmRzLmRlbGV0ZShjb29yZCk7XG4gICAgfVxuICAgIFxuICAgIHN0ZXBDb3VudCsrO1xuICAgIFxuICAgIC8vIENhbWJpYXIgZGlyZWNjaVx1MDBGM24gY3VhbmRvIHNlYSBuZWNlc2FyaW9cbiAgICBpZiAoc3RlcENvdW50ID09PSBzdGVwcykge1xuICAgICAgc3RlcENvdW50ID0gMDtcbiAgICAgIFxuICAgICAgLy8gQ2FtYmlhciBkaXJlY2NpXHUwMEYzbiAoZ2lyYXIgOTAgZ3JhZG9zIGEgbGEgZGVyZWNoYSlcbiAgICAgIGlmIChkeCA9PT0gMCAmJiBkeSA9PT0gLTEpIHsgLy8gdXAgLT4gcmlnaHRcbiAgICAgICAgZHggPSAxOyBkeSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGR4ID09PSAxICYmIGR5ID09PSAwKSB7IC8vIHJpZ2h0IC0+IGRvd25cbiAgICAgICAgZHggPSAwOyBkeSA9IDE7XG4gICAgICB9IGVsc2UgaWYgKGR4ID09PSAwICYmIGR5ID09PSAxKSB7IC8vIGRvd24gLT4gbGVmdFxuICAgICAgICBkeCA9IC0xOyBkeSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGR4ID09PSAtMSAmJiBkeSA9PT0gMCkgeyAvLyBsZWZ0IC0+IHVwXG4gICAgICAgIGR4ID0gMDsgZHkgPSAtMTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZGlyZWN0aW9uID0gKGRpcmVjdGlvbiArIDEpICUgNDtcbiAgICAgIFxuICAgICAgLy8gSW5jcmVtZW50YXIgcGFzb3MgY2FkYSBkb3MgY2FtYmlvcyBkZSBkaXJlY2NpXHUwMEYzblxuICAgICAgaWYgKGRpcmVjdGlvbiAlIDIgPT09IDApIHtcbiAgICAgICAgc3RlcHMrKztcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gRXZpdGFyIGJ1Y2xlIGluZmluaXRvIHNpIG5vcyBhbGVqYW1vcyBkZW1hc2lhZG9cbiAgICBpZiAoTWF0aC5hYnMoeCAtIGNlbnRlclgpID4gMTAwIHx8IE1hdGguYWJzKHkgLSBjZW50ZXJZKSA+IDEwMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIFxuICAvLyBTaSBubyBoZW1vcyBzZWxlY2Npb25hZG8gc3VmaWNpZW50ZXMsIGNvbXBsZXRhciBjb24gYWxlYXRvcmlvc1xuICBpZiAoc2VsZWN0ZWQubGVuZ3RoIDwgY291bnQgJiYgYXZhaWxhYmxlQ29vcmRzLnNpemUgPiAwKSB7XG4gICAgY29uc3QgcmVtYWluaW5nID0gQXJyYXkuZnJvbShhdmFpbGFibGVDb29yZHMpO1xuICAgIGNvbnN0IG5lZWRlZCA9IE1hdGgubWluKGNvdW50IC0gc2VsZWN0ZWQubGVuZ3RoLCByZW1haW5pbmcubGVuZ3RoKTtcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lZWRlZDsgaSsrKSB7XG4gICAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlbWFpbmluZy5sZW5ndGgpO1xuICAgICAgc2VsZWN0ZWQucHVzaChyZW1haW5pbmcuc3BsaWNlKHJhbmRvbUluZGV4LCAxKVswXSk7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gc2VsZWN0ZWQuc2xpY2UoMCwgY291bnQpO1xufVxuXG4vKipcbiAqIFBhdHJcdTAwRjNuIHppZ3phZyBob3Jpem9udGFsIC0gc2ltdWxhIGVzY3JpdHVyYSBodW1hbmEgbFx1MDBFRG5lYSBwb3IgbFx1MDBFRG5lYVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0WmlnemFnUGF0dGVybihjaGFuZ2VzLCBjb3VudCkge1xuICBjb25zdCBjaGFuZ2VzQXJyYXkgPSBBcnJheS5mcm9tKGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlc0FycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBcbiAgLy8gQWdydXBhciBwb3IgZmlsYXNcbiAgY29uc3QgYnlSb3cgPSBuZXcgTWFwKCk7XG4gIGNoYW5nZXNBcnJheS5mb3JFYWNoKGNvb3JkID0+IHtcbiAgICBjb25zdCBbX3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBpZiAoIWJ5Um93Lmhhcyh5KSkgYnlSb3cuc2V0KHksIFtdKTtcbiAgICBieVJvdy5nZXQoeSkucHVzaChjb29yZCk7XG4gIH0pO1xuICBcbiAgY29uc3Qgc2VsZWN0ZWQgPSBbXTtcbiAgY29uc3Qgc29ydGVkUm93cyA9IEFycmF5LmZyb20oYnlSb3cua2V5cygpKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gIGxldCBsZWZ0VG9SaWdodCA9IHRydWU7XG4gIFxuICBmb3IgKGNvbnN0IHJvdyBvZiBzb3J0ZWRSb3dzKSB7XG4gICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA+PSBjb3VudCkgYnJlYWs7XG4gICAgY29uc3Qgcm93UGl4ZWxzID0gYnlSb3cuZ2V0KHJvdykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgW3gxXSA9IGEuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNvbnN0IFt4Ml0gPSBiLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgICByZXR1cm4gbGVmdFRvUmlnaHQgPyB4MSAtIHgyIDogeDIgLSB4MTtcbiAgICB9KTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGNvb3JkIG9mIHJvd1BpeGVscykge1xuICAgICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA+PSBjb3VudCkgYnJlYWs7XG4gICAgICBzZWxlY3RlZC5wdXNoKGNvb3JkKTtcbiAgICB9XG4gICAgXG4gICAgbGVmdFRvUmlnaHQgPSAhbGVmdFRvUmlnaHQ7IC8vIEFsdGVybmFyIGRpcmVjY2lcdTAwRjNuXG4gIH1cbiAgXG4gIHJldHVybiBzZWxlY3RlZC5zbGljZSgwLCBjb3VudCk7XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gZGlhZ29uYWwgLSByZWNvcnJlIGRpYWdvbmFsbWVudGUgY29tbyBsZXllbmRvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREaWFnb25hbFBhdHRlcm4oY2hhbmdlcywgY291bnQpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgaWYgKGNoYW5nZXNBcnJheS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgXG4gIC8vIE9yZGVuYXIgcG9yIHN1bWEgZGUgY29vcmRlbmFkYXMgKGRpYWdvbmFsIHByaW5jaXBhbClcbiAgY29uc3Qgd2l0aERpYWdvbmFsID0gY2hhbmdlc0FycmF5Lm1hcChjb29yZCA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICByZXR1cm4geyBjb29yZCwgZGlhZ29uYWw6IHggKyB5LCB4LCB5IH07XG4gIH0pO1xuICBcbiAgd2l0aERpYWdvbmFsLnNvcnQoKGEsIGIpID0+IHtcbiAgICBpZiAoYS5kaWFnb25hbCAhPT0gYi5kaWFnb25hbCkgcmV0dXJuIGEuZGlhZ29uYWwgLSBiLmRpYWdvbmFsO1xuICAgIHJldHVybiBhLnggLSBiLng7IC8vIERlc2VtcGF0ZSBwb3IgeFxuICB9KTtcbiAgXG4gIHJldHVybiB3aXRoRGlhZ29uYWwuc2xpY2UoMCwgY291bnQpLm1hcChpdGVtID0+IGl0ZW0uY29vcmQpO1xufVxuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGRlIGNsdXN0ZXJzIC0gYWdydXBhIHBcdTAwRUR4ZWxlcyBjZXJjYW5vcyBjb21vIGhhclx1MDBFRGEgdW4gaHVtYW5vXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDbHVzdGVyUGF0dGVybihjaGFuZ2VzLCBjb3VudCkge1xuICBjb25zdCBjaGFuZ2VzQXJyYXkgPSBBcnJheS5mcm9tKGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlc0FycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBcbiAgY29uc3Qgc2VsZWN0ZWQgPSBbXTtcbiAgY29uc3QgYXZhaWxhYmxlID0gbmV3IFNldChjaGFuZ2VzQXJyYXkpO1xuICBcbiAgd2hpbGUgKHNlbGVjdGVkLmxlbmd0aCA8IGNvdW50ICYmIGF2YWlsYWJsZS5zaXplID4gMCkge1xuICAgIC8vIFNlbGVjY2lvbmFyIHVuIHB1bnRvIGFsZWF0b3JpbyBjb21vIGNlbnRybyBkZWwgY2x1c3RlclxuICAgIGNvbnN0IGF2YWlsYWJsZUFycmF5ID0gQXJyYXkuZnJvbShhdmFpbGFibGUpO1xuICAgIGNvbnN0IGNlbnRlckNvb3JkID0gYXZhaWxhYmxlQXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXZhaWxhYmxlQXJyYXkubGVuZ3RoKV07XG4gICAgY29uc3QgW2NlbnRlclgsIGNlbnRlclldID0gY2VudGVyQ29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBcbiAgICAvLyBFbmNvbnRyYXIgcFx1MDBFRHhlbGVzIGNlcmNhbm9zIChyYWRpbyBkZSAzLTUgcFx1MDBFRHhlbGVzKVxuICAgIGNvbnN0IGNsdXN0ZXJSYWRpdXMgPSAzICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMyk7XG4gICAgY29uc3QgY2x1c3RlciA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3QgY29vcmQgb2YgYXZhaWxhYmxlKSB7XG4gICAgICBjb25zdCBbeCwgeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIGNlbnRlclgsIDIpICsgTWF0aC5wb3coeSAtIGNlbnRlclksIDIpKTtcbiAgICAgIGlmIChkaXN0YW5jZSA8PSBjbHVzdGVyUmFkaXVzKSB7XG4gICAgICAgIGNsdXN0ZXIucHVzaChjb29yZCk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEFcdTAwRjFhZGlyIGFsZ3Vub3MgcFx1MDBFRHhlbGVzIGRlbCBjbHVzdGVyXG4gICAgY29uc3QgY2x1c3RlclNpemUgPSBNYXRoLm1pbihjbHVzdGVyLmxlbmd0aCwgTWF0aC5taW4oNSwgY291bnQgLSBzZWxlY3RlZC5sZW5ndGgpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsdXN0ZXJTaXplOyBpKyspIHtcbiAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2x1c3Rlci5sZW5ndGgpO1xuICAgICAgY29uc3QgY29vcmQgPSBjbHVzdGVyLnNwbGljZShyYW5kb21JbmRleCwgMSlbMF07XG4gICAgICBzZWxlY3RlZC5wdXNoKGNvb3JkKTtcbiAgICAgIGF2YWlsYWJsZS5kZWxldGUoY29vcmQpO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHNlbGVjdGVkLnNsaWNlKDAsIGNvdW50KTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBkZSBvbmRhcyAtIHNpbXVsYSBtb3ZpbWllbnRvIG9uZHVsYXRvcmlvIG5hdHVyYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdhdmVQYXR0ZXJuKGNoYW5nZXMsIGNvdW50KSB7XG4gIGNvbnN0IGNoYW5nZXNBcnJheSA9IEFycmF5LmZyb20oY2hhbmdlcyk7XG4gIGlmIChjaGFuZ2VzQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIFxuICAvLyBDYWxjdWxhciBib3VuZGluZyBib3hcbiAgbGV0IG1pblggPSBJbmZpbml0eSwgbWF4WCA9IC1JbmZpbml0eTtcbiAgY2hhbmdlc0FycmF5LmZvckVhY2goY29vcmQgPT4ge1xuICAgIGNvbnN0IFt4XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgbWluWCA9IE1hdGgubWluKG1pblgsIHgpO1xuICAgIG1heFggPSBNYXRoLm1heChtYXhYLCB4KTtcbiAgfSk7XG4gIFxuICAvLyBPcmRlbmFyIHBvciBmdW5jaVx1MDBGM24gZGUgb25kYVxuICBjb25zdCB3aXRoV2F2ZSA9IGNoYW5nZXNBcnJheS5tYXAoY29vcmQgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgY29uc3Qgbm9ybWFsaXplZFggPSAoeCAtIG1pblgpIC8gKG1heFggLSBtaW5YIHx8IDEpO1xuICAgIGNvbnN0IHdhdmVZID0gTWF0aC5zaW4obm9ybWFsaXplZFggKiBNYXRoLlBJICogMikgKiAxMDtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguYWJzKHkgLSB3YXZlWSk7XG4gICAgcmV0dXJuIHsgY29vcmQsIGRpc3RhbmNlLCB4IH07XG4gIH0pO1xuICBcbiAgd2l0aFdhdmUuc29ydCgoYSwgYikgPT4ge1xuICAgIGlmIChNYXRoLmFicyhhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZSkgPCAyKSB7XG4gICAgICByZXR1cm4gYS54IC0gYi54OyAvLyBEZXNlbXBhdGUgcG9yIHBvc2ljaVx1MDBGM24geFxuICAgIH1cbiAgICByZXR1cm4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2U7XG4gIH0pO1xuICBcbiAgcmV0dXJuIHdpdGhXYXZlLnNsaWNlKDAsIGNvdW50KS5tYXAoaXRlbSA9PiBpdGVtLmNvb3JkKTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBkZSBlc3F1aW5hcyAtIHByaW9yaXphIGVzcXVpbmFzIHkgYm9yZGVzIGNvbW8gcHVudG9zIGRlIHJlZmVyZW5jaWFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvcm5lcnNQYXR0ZXJuKGNoYW5nZXMsIGNvdW50KSB7XG4gIGNvbnN0IGNoYW5nZXNBcnJheSA9IEFycmF5LmZyb20oY2hhbmdlcyk7XG4gIGlmIChjaGFuZ2VzQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIFxuICAvLyBDYWxjdWxhciBib3VuZGluZyBib3hcbiAgbGV0IG1pblggPSBJbmZpbml0eSwgbWF4WCA9IC1JbmZpbml0eTtcbiAgbGV0IG1pblkgPSBJbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eTtcbiAgXG4gIGNoYW5nZXNBcnJheS5mb3JFYWNoKGNvb3JkID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCB4KTtcbiAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgeCk7XG4gICAgbWluWSA9IE1hdGgubWluKG1pblksIHkpO1xuICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCB5KTtcbiAgfSk7XG4gIFxuICAvLyBEZWZpbmlyIGxhcyA0IGVzcXVpbmFzXG4gIGNvbnN0IGNvcm5lcnMgPSBbXG4gICAgW21pblgsIG1pblldLCBbbWF4WCwgbWluWV0sXG4gICAgW21pblgsIG1heFldLCBbbWF4WCwgbWF4WV1cbiAgXTtcbiAgXG4gIC8vIE9yZGVuYXIgcG9yIGRpc3RhbmNpYSBhIGxhIGVzcXVpbmEgbVx1MDBFMXMgY2VyY2FuYVxuICBjb25zdCB3aXRoQ29ybmVyRGlzdGFuY2UgPSBjaGFuZ2VzQXJyYXkubWFwKGNvb3JkID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgIGxldCBtaW5EaXN0YW5jZSA9IEluZmluaXR5O1xuICAgIFxuICAgIGZvciAoY29uc3QgW2Nvcm5lclgsIGNvcm5lclldIG9mIGNvcm5lcnMpIHtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KHggLSBjb3JuZXJYLCAyKSArIE1hdGgucG93KHkgLSBjb3JuZXJZLCAyKSk7XG4gICAgICBtaW5EaXN0YW5jZSA9IE1hdGgubWluKG1pbkRpc3RhbmNlLCBkaXN0YW5jZSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7IGNvb3JkLCBkaXN0YW5jZTogbWluRGlzdGFuY2UgfTtcbiAgfSk7XG4gIFxuICB3aXRoQ29ybmVyRGlzdGFuY2Uuc29ydCgoYSwgYikgPT4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2UpO1xuICBcbiAgcmV0dXJuIHdpdGhDb3JuZXJEaXN0YW5jZS5zbGljZSgwLCBjb3VudCkubWFwKGl0ZW0gPT4gaXRlbS5jb29yZCk7XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gZGUgYmFycmlkbyAtIHNpbXVsYSBsaW1waWV6YSBzaXN0ZW1cdTAwRTF0aWNhIHBvciBzZWNjaW9uZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN3ZWVwUGF0dGVybihjaGFuZ2VzLCBjb3VudCkge1xuICBjb25zdCBjaGFuZ2VzQXJyYXkgPSBBcnJheS5mcm9tKGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlc0FycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBcbiAgLy8gRGl2aWRpciBlbiBzZWNjaW9uZXMgZGUgOHg4XG4gIGNvbnN0IHNlY3Rpb25zID0gbmV3IE1hcCgpO1xuICBcbiAgY2hhbmdlc0FycmF5LmZvckVhY2goY29vcmQgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgY29uc3Qgc2VjdGlvblggPSBNYXRoLmZsb29yKHggLyA4KTtcbiAgICBjb25zdCBzZWN0aW9uWSA9IE1hdGguZmxvb3IoeSAvIDgpO1xuICAgIGNvbnN0IHNlY3Rpb25LZXkgPSBgJHtzZWN0aW9uWH0sJHtzZWN0aW9uWX1gO1xuICAgIFxuICAgIGlmICghc2VjdGlvbnMuaGFzKHNlY3Rpb25LZXkpKSBzZWN0aW9ucy5zZXQoc2VjdGlvbktleSwgW10pO1xuICAgIHNlY3Rpb25zLmdldChzZWN0aW9uS2V5KS5wdXNoKGNvb3JkKTtcbiAgfSk7XG4gIFxuICBjb25zdCBzZWxlY3RlZCA9IFtdO1xuICBjb25zdCBzZWN0aW9uS2V5cyA9IEFycmF5LmZyb20oc2VjdGlvbnMua2V5cygpKTtcbiAgXG4gIC8vIFByb2Nlc2FyIHNlY2Npb25lcyBlbiBvcmRlblxuICBmb3IgKGNvbnN0IHNlY3Rpb25LZXkgb2Ygc2VjdGlvbktleXMpIHtcbiAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID49IGNvdW50KSBicmVhaztcbiAgICBcbiAgICBjb25zdCBzZWN0aW9uUGl4ZWxzID0gc2VjdGlvbnMuZ2V0KHNlY3Rpb25LZXkpO1xuICAgIGNvbnN0IHRvVGFrZSA9IE1hdGgubWluKHNlY3Rpb25QaXhlbHMubGVuZ3RoLCBjb3VudCAtIHNlbGVjdGVkLmxlbmd0aCk7XG4gICAgXG4gICAgLy8gVG9tYXIgYWxndW5vcyBwXHUwMEVEeGVsZXMgZGUgZXN0YSBzZWNjaVx1MDBGM25cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvVGFrZTsgaSsrKSB7XG4gICAgICBzZWxlY3RlZC5wdXNoKHNlY3Rpb25QaXhlbHNbaV0pO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHNlbGVjdGVkLnNsaWNlKDAsIGNvdW50KTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBkZSBwcmlvcmlkYWQgLSBzaW11bGEgZGVjaXNpb25lcyBodW1hbmFzIGRlIGltcG9ydGFuY2lhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmlvcml0eVBhdHRlcm4oY2hhbmdlcywgY291bnQpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgaWYgKGNoYW5nZXNBcnJheS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgXG4gIC8vIENhbGN1bGFyIGNlbnRybyBwYXJhIGRhciBtXHUwMEUxcyBwcmlvcmlkYWQgYSBwXHUwMEVEeGVsZXMgY2VudHJhbGVzXG4gIGxldCBtaW5YID0gSW5maW5pdHksIG1heFggPSAtSW5maW5pdHk7XG4gIGxldCBtaW5ZID0gSW5maW5pdHksIG1heFkgPSAtSW5maW5pdHk7XG4gIFxuICBjaGFuZ2VzQXJyYXkuZm9yRWFjaChjb29yZCA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBtaW5YID0gTWF0aC5taW4obWluWCwgeCk7XG4gICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIHgpO1xuICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCB5KTtcbiAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgeSk7XG4gIH0pO1xuICBcbiAgY29uc3QgY2VudGVyWCA9IChtaW5YICsgbWF4WCkgLyAyO1xuICBjb25zdCBjZW50ZXJZID0gKG1pblkgKyBtYXhZKSAvIDI7XG4gIFxuICAvLyBDYWxjdWxhciBwcmlvcmlkYWQgYmFzYWRhIGVuIG1cdTAwRkFsdGlwbGVzIGZhY3RvcmVzXG4gIGNvbnN0IHdpdGhQcmlvcml0eSA9IGNoYW5nZXNBcnJheS5tYXAoY29vcmQgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgXG4gICAgLy8gRmFjdG9yIDE6IERpc3RhbmNpYSBhbCBjZW50cm8gKG1lbm9yID0gbWVqb3IpXG4gICAgY29uc3QgY2VudGVyRGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIGNlbnRlclgsIDIpICsgTWF0aC5wb3coeSAtIGNlbnRlclksIDIpKTtcbiAgICBcbiAgICAvLyBGYWN0b3IgMjogRGlzdGFuY2lhIGEgYm9yZGVzIChtYXlvciA9IG1lam9yIHBhcmEgYm9yZGVzKVxuICAgIGNvbnN0IGVkZ2VEaXN0YW5jZSA9IE1hdGgubWluKHggLSBtaW5YLCBtYXhYIC0geCwgeSAtIG1pblksIG1heFkgLSB5KTtcbiAgICBcbiAgICAvLyBGYWN0b3IgMzogQ29tcG9uZW50ZSBhbGVhdG9yaW8gcGFyYSBzaW11bGFyIGRlY2lzaW9uZXMgaHVtYW5hc1xuICAgIGNvbnN0IHJhbmRvbUZhY3RvciA9IE1hdGgucmFuZG9tKCkgKiAwLjM7XG4gICAgXG4gICAgLy8gQ29tYmluYXIgZmFjdG9yZXMgKG1lbm9yIHNjb3JlID0gbWF5b3IgcHJpb3JpZGFkKVxuICAgIGNvbnN0IHByaW9yaXR5ID0gY2VudGVyRGlzdGFuY2UgKiAwLjQgLSBlZGdlRGlzdGFuY2UgKiAwLjMgKyByYW5kb21GYWN0b3I7XG4gICAgXG4gICAgcmV0dXJuIHsgY29vcmQsIHByaW9yaXR5IH07XG4gIH0pO1xuICBcbiAgd2l0aFByaW9yaXR5LnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KTtcbiAgXG4gIHJldHVybiB3aXRoUHJpb3JpdHkuc2xpY2UoMCwgY291bnQpLm1hcChpdGVtID0+IGl0ZW0uY29vcmQpO1xufVxuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGRlIHByb3hpbWlkYWQgLSBhZ3J1cGEgcFx1MDBFRHhlbGVzIHBvciBjZXJjYW5cdTAwRURhIGNvbW8gaGFyXHUwMEVEYSB1biBodW1hbm9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3hpbWl0eVBhdHRlcm4oY2hhbmdlcywgY291bnQpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgaWYgKGNoYW5nZXNBcnJheS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgXG4gIGNvbnN0IHNlbGVjdGVkID0gW107XG4gIGNvbnN0IGF2YWlsYWJsZSA9IG5ldyBTZXQoY2hhbmdlc0FycmF5KTtcbiAgXG4gIC8vIENvbWVuemFyIGNvbiB1biBwXHUwMEVEeGVsIGFsZWF0b3Jpb1xuICBsZXQgY3VycmVudENvb3JkID0gY2hhbmdlc0FycmF5W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYW5nZXNBcnJheS5sZW5ndGgpXTtcbiAgc2VsZWN0ZWQucHVzaChjdXJyZW50Q29vcmQpO1xuICBhdmFpbGFibGUuZGVsZXRlKGN1cnJlbnRDb29yZCk7XG4gIFxuICB3aGlsZSAoc2VsZWN0ZWQubGVuZ3RoIDwgY291bnQgJiYgYXZhaWxhYmxlLnNpemUgPiAwKSB7XG4gICAgY29uc3QgW2N1cnJlbnRYLCBjdXJyZW50WV0gPSBjdXJyZW50Q29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBcbiAgICAvLyBFbmNvbnRyYXIgZWwgcFx1MDBFRHhlbCBtXHUwMEUxcyBjZXJjYW5vIGFsIGFjdHVhbFxuICAgIGxldCBjbG9zZXN0Q29vcmQgPSBudWxsO1xuICAgIGxldCBjbG9zZXN0RGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGNvb3JkIG9mIGF2YWlsYWJsZSkge1xuICAgICAgY29uc3QgW3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KHggLSBjdXJyZW50WCwgMikgKyBNYXRoLnBvdyh5IC0gY3VycmVudFksIDIpKTtcbiAgICAgIFxuICAgICAgaWYgKGRpc3RhbmNlIDwgY2xvc2VzdERpc3RhbmNlKSB7XG4gICAgICAgIGNsb3Nlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICBjbG9zZXN0Q29vcmQgPSBjb29yZDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKGNsb3Nlc3RDb29yZCkge1xuICAgICAgc2VsZWN0ZWQucHVzaChjbG9zZXN0Q29vcmQpO1xuICAgICAgYXZhaWxhYmxlLmRlbGV0ZShjbG9zZXN0Q29vcmQpO1xuICAgICAgY3VycmVudENvb3JkID0gY2xvc2VzdENvb3JkO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBzZWxlY3RlZC5zbGljZSgwLCBjb3VudCk7XG59XG5cbi8qKlxuICogUGF0clx1MDBGM24gZGUgY3VhZHJhbnRlcyAtIGRpdmlkZSBlbiA0IGN1YWRyYW50ZXMgeSBsb3MgcHJvY2VzYSByb3RhdGl2YW1lbnRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRRdWFkcmFudFBhdHRlcm4oY2hhbmdlcywgY291bnQpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgaWYgKGNoYW5nZXNBcnJheS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgXG4gIC8vIENhbGN1bGFyIGNlbnRyb1xuICBsZXQgbWluWCA9IEluZmluaXR5LCBtYXhYID0gLUluZmluaXR5O1xuICBsZXQgbWluWSA9IEluZmluaXR5LCBtYXhZID0gLUluZmluaXR5O1xuICBcbiAgY2hhbmdlc0FycmF5LmZvckVhY2goY29vcmQgPT4ge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgbWluWCA9IE1hdGgubWluKG1pblgsIHgpO1xuICAgIG1heFggPSBNYXRoLm1heChtYXhYLCB4KTtcbiAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgeSk7XG4gICAgbWF4WSA9IE1hdGgubWF4KG1heFksIHkpO1xuICB9KTtcbiAgXG4gIGNvbnN0IGNlbnRlclggPSAobWluWCArIG1heFgpIC8gMjtcbiAgY29uc3QgY2VudGVyWSA9IChtaW5ZICsgbWF4WSkgLyAyO1xuICBcbiAgLy8gRGl2aWRpciBlbiBjdWFkcmFudGVzXG4gIGNvbnN0IHF1YWRyYW50cyA9IFtbXSwgW10sIFtdLCBbXV07IC8vIFRMLCBUUiwgQkwsIEJSXG4gIFxuICBjaGFuZ2VzQXJyYXkuZm9yRWFjaChjb29yZCA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBcbiAgICBpZiAoeCA8PSBjZW50ZXJYICYmIHkgPD0gY2VudGVyWSkge1xuICAgICAgcXVhZHJhbnRzWzBdLnB1c2goY29vcmQpOyAvLyBUb3AtTGVmdFxuICAgIH0gZWxzZSBpZiAoeCA+IGNlbnRlclggJiYgeSA8PSBjZW50ZXJZKSB7XG4gICAgICBxdWFkcmFudHNbMV0ucHVzaChjb29yZCk7IC8vIFRvcC1SaWdodFxuICAgIH0gZWxzZSBpZiAoeCA8PSBjZW50ZXJYICYmIHkgPiBjZW50ZXJZKSB7XG4gICAgICBxdWFkcmFudHNbMl0ucHVzaChjb29yZCk7IC8vIEJvdHRvbS1MZWZ0XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1YWRyYW50c1szXS5wdXNoKGNvb3JkKTsgLy8gQm90dG9tLVJpZ2h0XG4gICAgfVxuICB9KTtcbiAgXG4gIC8vIFNlbGVjY2lvbmFyIHJvdGF0aXZhbWVudGUgZGUgY2FkYSBjdWFkcmFudGVcbiAgY29uc3Qgc2VsZWN0ZWQgPSBbXTtcbiAgbGV0IHF1YWRyYW50SW5kZXggPSAwO1xuICBjb25zdCBxdWFkcmFudFBvaW50ZXJzID0gWzAsIDAsIDAsIDBdO1xuICBcbiAgd2hpbGUgKHNlbGVjdGVkLmxlbmd0aCA8IGNvdW50KSB7XG4gICAgY29uc3QgY3VycmVudFF1YWRyYW50ID0gcXVhZHJhbnRzW3F1YWRyYW50SW5kZXhdO1xuICAgIGNvbnN0IHBvaW50ZXIgPSBxdWFkcmFudFBvaW50ZXJzW3F1YWRyYW50SW5kZXhdO1xuICAgIFxuICAgIGlmIChwb2ludGVyIDwgY3VycmVudFF1YWRyYW50Lmxlbmd0aCkge1xuICAgICAgc2VsZWN0ZWQucHVzaChjdXJyZW50UXVhZHJhbnRbcG9pbnRlcl0pO1xuICAgICAgcXVhZHJhbnRQb2ludGVyc1txdWFkcmFudEluZGV4XSsrO1xuICAgIH1cbiAgICBcbiAgICBxdWFkcmFudEluZGV4ID0gKHF1YWRyYW50SW5kZXggKyAxKSAlIDQ7XG4gICAgXG4gICAgLy8gU2kgdG9kb3MgbG9zIGN1YWRyYW50ZXMgZXN0XHUwMEUxbiB2YWNcdTAwRURvcywgc2FsaXJcbiAgICBpZiAocXVhZHJhbnRQb2ludGVycy5ldmVyeSgocCwgaSkgPT4gcCA+PSBxdWFkcmFudHNbaV0ubGVuZ3RoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gc2VsZWN0ZWQuc2xpY2UoMCwgY291bnQpO1xufVxuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGRlIGRpc3BlcnNpXHUwMEYzbiBjb250cm9sYWRhIC0gYWxlYXRvcmlvIGNvbiB0ZW5kZW5jaWEgYSBldml0YXIgYWdydXBhY2lvbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2F0dGVyZWRQYXR0ZXJuKGNoYW5nZXMsIGNvdW50KSB7XG4gIGNvbnN0IGNoYW5nZXNBcnJheSA9IEFycmF5LmZyb20oY2hhbmdlcyk7XG4gIGlmIChjaGFuZ2VzQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIFxuICBjb25zdCBzZWxlY3RlZCA9IFtdO1xuICBjb25zdCBhdmFpbGFibGUgPSBbLi4uY2hhbmdlc0FycmF5XTtcbiAgXG4gIHdoaWxlIChzZWxlY3RlZC5sZW5ndGggPCBjb3VudCAmJiBhdmFpbGFibGUubGVuZ3RoID4gMCkge1xuICAgIGxldCBiZXN0Q29vcmQgPSBudWxsO1xuICAgIGxldCBiZXN0U2NvcmUgPSAtMTtcbiAgICBsZXQgYmVzdEluZGV4ID0gLTE7XG4gICAgXG4gICAgLy8gRXZhbHVhciBjYWRhIHBcdTAwRUR4ZWwgZGlzcG9uaWJsZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXZhaWxhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb29yZCA9IGF2YWlsYWJsZVtpXTtcbiAgICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGFyIGRpc3RhbmNpYSBtXHUwMEVEbmltYSBhIHBcdTAwRUR4ZWxlcyB5YSBzZWxlY2Npb25hZG9zXG4gICAgICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICAgIGZvciAoY29uc3Qgc2VsZWN0ZWRDb29yZCBvZiBzZWxlY3RlZCkge1xuICAgICAgICBjb25zdCBbc3gsIHN5XSA9IHNlbGVjdGVkQ29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIHN4LCAyKSArIE1hdGgucG93KHkgLSBzeSwgMikpO1xuICAgICAgICBtaW5EaXN0YW5jZSA9IE1hdGgubWluKG1pbkRpc3RhbmNlLCBkaXN0YW5jZSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEFcdTAwRjFhZGlyIGNvbXBvbmVudGUgYWxlYXRvcmlvXG4gICAgICBjb25zdCByYW5kb21GYWN0b3IgPSBNYXRoLnJhbmRvbSgpICogMC41O1xuICAgICAgY29uc3Qgc2NvcmUgPSBtaW5EaXN0YW5jZSArIHJhbmRvbUZhY3RvcjtcbiAgICAgIFxuICAgICAgaWYgKHNjb3JlID4gYmVzdFNjb3JlKSB7XG4gICAgICAgIGJlc3RTY29yZSA9IHNjb3JlO1xuICAgICAgICBiZXN0Q29vcmQgPSBjb29yZDtcbiAgICAgICAgYmVzdEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKGJlc3RDb29yZCkge1xuICAgICAgc2VsZWN0ZWQucHVzaChiZXN0Q29vcmQpO1xuICAgICAgYXZhaWxhYmxlLnNwbGljZShiZXN0SW5kZXgsIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBzZWxlY3RlZC5zbGljZSgwLCBjb3VudCk7XG59XG5cbi8qKlxuICogT2J0aWVuZSBwXHUwMEVEeGVsZXMgc2VnXHUwMEZBbiBlbCBwYXRyXHUwMEYzbiBzZWxlY2Npb25hZG9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBpeGVsc0J5UGF0dGVybihwYXR0ZXJuLCBjaGFuZ2VzLCBjb3VudCwgcHJlZmVyQ29sb3IgPSBmYWxzZSwgcHJlZmVycmVkQ29sb3JJZCA9IG51bGwsIHByZWZlcnJlZENvbG9ySWRzID0gbnVsbCwgZXhjbHVkZUNvbG9yID0gZmFsc2UsIGV4Y2x1ZGVkQ29sb3JJZHMgPSBudWxsKSB7XG4gIGxvZyhgXHVEODNDXHVERkFGIEFwbGljYW5kbyBwYXRyXHUwMEYzbiAke3BhdHRlcm59IHBhcmEgJHtjb3VudH0gcFx1MDBFRHhlbGVzIGRlICR7Y2hhbmdlcy5zaXplfSBjYW1iaW9zIGRldGVjdGFkb3NgKTtcbiAgXG4gIGxldCBzZWxlY3RlZENvb3JkcztcbiAgY29uc3QgY2hhbmdlS2V5cyA9IGNoYW5nZXMgaW5zdGFuY2VvZiBNYXAgPyBBcnJheS5mcm9tKGNoYW5nZXMua2V5cygpKSA6IEFycmF5LmZyb20oY2hhbmdlcyk7XG4gIFxuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdsaW5lVXAnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRMaW5lVXBQYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xpbmVEb3duJzpcbiAgICAgIHNlbGVjdGVkQ29vcmRzID0gZ2V0TGluZURvd25QYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xpbmVMZWZ0JzpcbiAgICAgIHNlbGVjdGVkQ29vcmRzID0gZ2V0TGluZUxlZnRQYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xpbmVSaWdodCc6XG4gICAgICBzZWxlY3RlZENvb3JkcyA9IGdldExpbmVSaWdodFBhdHRlcm4oY2hhbmdlS2V5cywgY291bnQpO1xuICAgICAgYnJlYWs7XG4gIC8vICdsaW5lJyBlbGltaW5hZG9cbiAgICBjYXNlICdjZW50ZXInOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRDZW50ZXJQYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2JvcmRlcnMnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRCb3JkZXJzUGF0dGVybihjaGFuZ2VLZXlzLCBjb3VudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzcGlyYWwnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRTcGlyYWxQYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3ppZ3phZyc6XG4gICAgICBzZWxlY3RlZENvb3JkcyA9IGdldFppZ3phZ1BhdHRlcm4oY2hhbmdlS2V5cywgY291bnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZGlhZ29uYWwnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXREaWFnb25hbFBhdHRlcm4oY2hhbmdlS2V5cywgY291bnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2x1c3Rlcic6XG4gICAgICBzZWxlY3RlZENvb3JkcyA9IGdldENsdXN0ZXJQYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3dhdmUnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRXYXZlUGF0dGVybihjaGFuZ2VLZXlzLCBjb3VudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjb3JuZXJzJzpcbiAgICAgIHNlbGVjdGVkQ29vcmRzID0gZ2V0Q29ybmVyc1BhdHRlcm4oY2hhbmdlS2V5cywgY291bnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc3dlZXAnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRTd2VlcFBhdHRlcm4oY2hhbmdlS2V5cywgY291bnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncHJpb3JpdHknOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRQcmlvcml0eVBhdHRlcm4oY2hhbmdlS2V5cywgY291bnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncHJveGltaXR5JzpcbiAgICAgIHNlbGVjdGVkQ29vcmRzID0gZ2V0UHJveGltaXR5UGF0dGVybihjaGFuZ2VLZXlzLCBjb3VudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdxdWFkcmFudCc6XG4gICAgICBzZWxlY3RlZENvb3JkcyA9IGdldFF1YWRyYW50UGF0dGVybihjaGFuZ2VLZXlzLCBjb3VudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzY2F0dGVyZWQnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRTY2F0dGVyZWRQYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NuYWtlJzpcbiAgICAgIHNlbGVjdGVkQ29vcmRzID0gZ2V0U25ha2VQYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RpYWdvbmFsU3dlZXAnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXREaWFnb25hbFN3ZWVwUGF0dGVybihjaGFuZ2VLZXlzLCBjb3VudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzcGlyYWxDbG9ja3dpc2UnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXREaXJlY3Rpb25hbFNwaXJhbFBhdHRlcm4oY2hhbmdlS2V5cywgY291bnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc3BpcmFsQ291bnRlckNsb2Nrd2lzZSc6XG4gICAgICBzZWxlY3RlZENvb3JkcyA9IGdldERpcmVjdGlvbmFsU3BpcmFsUGF0dGVybihjaGFuZ2VLZXlzLCBjb3VudCwgZmFsc2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmlhc2VkUmFuZG9tJzpcbiAgICAgIHNlbGVjdGVkQ29vcmRzID0gZ2V0Qmlhc2VkUmFuZG9tUGF0dGVybihjaGFuZ2VLZXlzLCBjb3VudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdhbmNob3JQb2ludHMnOlxuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBnZXRBbmNob3JQb2ludHNQYXR0ZXJuKGNoYW5nZUtleXMsIGNvdW50KTtcbiAgICAgIGJyZWFrO1xuICAvLyAnaHVtYW4nIGVsaW1pbmFkb1xuICAgIGNhc2UgJ3JhbmRvbSc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHNlbGVjdGVkQ29vcmRzID0gZ2V0UmFuZG9tUGF0dGVybihjaGFuZ2VLZXlzLCBjb3VudCk7XG4gICAgICBicmVhaztcbiAgfVxuICBcbiAgLy8gQXBsaWNhciBmaWx0cm8gZGUgY29sb3IgcHJlZmVyaWRvIHNpIGVzdFx1MDBFMSBoYWJpbGl0YWRvXG4gIGlmIChwcmVmZXJDb2xvciAmJiBjaGFuZ2VzIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgY29uc3QgaWRzID0gQXJyYXkuaXNBcnJheShwcmVmZXJyZWRDb2xvcklkcykgJiYgcHJlZmVycmVkQ29sb3JJZHMubGVuZ3RoID4gMFxuICAgICAgPyBwcmVmZXJyZWRDb2xvcklkc1xuICAgICAgOiAocHJlZmVycmVkQ29sb3JJZCAhPT0gbnVsbCA/IFtwcmVmZXJyZWRDb2xvcklkXSA6IFtdKTtcbiAgICBpZiAoaWRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNlbGVjdGVkQ29vcmRzID0gYXBwbHlDb2xvclByZWZlcmVuY2Uoc2VsZWN0ZWRDb29yZHMsIGNoYW5nZXMsIGlkcywgY291bnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFwbGljYXIgZmlsdHJvIGRlIGV4Y2x1c2lcdTAwRjNuIGRlIGNvbG9yZXMgc2kgZXN0XHUwMEUxIGhhYmlsaXRhZG9cbiAgaWYgKGV4Y2x1ZGVDb2xvciAmJiBjaGFuZ2VzIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgY29uc3QgZXhjbHVkZUlkcyA9IEFycmF5LmlzQXJyYXkoZXhjbHVkZWRDb2xvcklkcykgJiYgZXhjbHVkZWRDb2xvcklkcy5sZW5ndGggPiAwXG4gICAgICA/IGV4Y2x1ZGVkQ29sb3JJZHNcbiAgICAgIDogW107XG4gICAgaWYgKGV4Y2x1ZGVJZHMubGVuZ3RoID4gMCkge1xuICAgICAgc2VsZWN0ZWRDb29yZHMgPSBhcHBseUNvbG9yRXhjbHVzaW9uKHNlbGVjdGVkQ29vcmRzLCBjaGFuZ2VzLCBleGNsdWRlSWRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VsZWN0ZWRDb29yZHM7XG59XG5cbi8qKlxuICogQXBsaWNhIHByZWZlcmVuY2lhIGRlIGNvbG9yIHByaW9yaXphbmRvIHBcdTAwRUR4ZWxlcyBkZWwgY29sb3Igc2VsZWNjaW9uYWRvXG4gKiBTT0xPIGRlYmUgdXNhciBwXHUwMEVEeGVsZXMgZGVsIGNvbG9yIHByZWZlcmlkbyBoYXN0YSBxdWUgbm8gcXVlZGVuIG1cdTAwRTFzIGRlIGVzZSBjb2xvclxuICovXG5mdW5jdGlvbiBhcHBseUNvbG9yUHJlZmVyZW5jZShzZWxlY3RlZENvb3JkcywgY2hhbmdlc01hcCwgcHJlZmVycmVkQ29sb3JJZHMsIG1heENvdW50KSB7XG4gIGNvbnN0IHByZWZlcnJlZFBpeGVscyA9IFtdO1xuICBjb25zdCBvdGhlclBpeGVscyA9IFtdO1xuXG4gIC8vIFNlcGFyYXIgcFx1MDBFRHhlbGVzIHBvciBjb2xvciBwcmVmZXJpZG9cbiAgZm9yIChjb25zdCBjb29yZCBvZiBzZWxlY3RlZENvb3Jkcykge1xuICAgIGNvbnN0IGNoYW5nZURhdGEgPSBjaGFuZ2VzTWFwLmdldChjb29yZCk7XG4gICAgaWYgKGNoYW5nZURhdGEgJiYgY2hhbmdlRGF0YS5vcmlnaW5hbCAmJiAoQXJyYXkuaXNBcnJheShwcmVmZXJyZWRDb2xvcklkcylcbiAgICAgID8gcHJlZmVycmVkQ29sb3JJZHMuaW5jbHVkZXMoY2hhbmdlRGF0YS5vcmlnaW5hbC5jb2xvcklkKVxuICAgICAgOiBjaGFuZ2VEYXRhLm9yaWdpbmFsLmNvbG9ySWQgPT09IHByZWZlcnJlZENvbG9ySWRzKSkge1xuICAgICAgcHJlZmVycmVkUGl4ZWxzLnB1c2goY29vcmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdGhlclBpeGVscy5wdXNoKGNvb3JkKTtcbiAgICB9XG4gIH1cblxuICAvLyBOdWV2YSBsXHUwMEYzZ2ljYTogcHJpb3JpemFyIHByZWZlcmlkb3MgeSBSRUxMRU5BUiBjb24gb3Ryb3MgaGFzdGEgY29tcGxldGFyIG1heENvdW50XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBpZiAocHJlZmVycmVkUGl4ZWxzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB0YWtlUHJlZmVycmVkID0gcHJlZmVycmVkUGl4ZWxzLnNsaWNlKDAsIE1hdGgubWluKG1heENvdW50LCBwcmVmZXJyZWRQaXhlbHMubGVuZ3RoKSk7XG4gICAgcmVzdWx0LnB1c2goLi4udGFrZVByZWZlcnJlZCk7XG4gIH1cbiAgaWYgKHJlc3VsdC5sZW5ndGggPCBtYXhDb3VudCAmJiBvdGhlclBpeGVscy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgcmVtYWluaW5nID0gbWF4Q291bnQgLSByZXN1bHQubGVuZ3RoO1xuICAgIGNvbnN0IHRha2VPdGhlcnMgPSBvdGhlclBpeGVscy5zbGljZSgwLCByZW1haW5pbmcpO1xuICAgIHJlc3VsdC5wdXNoKC4uLnRha2VPdGhlcnMpO1xuICB9XG5cbiAgbG9nKGBcdUQ4M0NcdURGQTggUHJpb3JpemFjaVx1MDBGM24gZGUgY29sb3I6ICR7cHJlZmVycmVkUGl4ZWxzLmxlbmd0aH0gcHJlZmVyaWRvcyBkaXNwb25pYmxlcywgcmVsbGVuYW5kbyBoYXN0YSAke21heENvdW50fS4gU2VsZWNjaW9uYWRvczogJHtyZXN1bHQubGVuZ3RofWApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEFwbGljYSBleGNsdXNpXHUwMEYzbiBkZSBjb2xvcmVzIGZpbHRyYW5kbyBwXHUwMEVEeGVsZXMgZGUgbG9zIGNvbG9yZXMgZXNwZWNpZmljYWRvc1xuICovXG5mdW5jdGlvbiBhcHBseUNvbG9yRXhjbHVzaW9uKHNlbGVjdGVkQ29vcmRzLCBjaGFuZ2VzTWFwLCBleGNsdWRlZENvbG9ySWRzKSB7XG4gIGNvbnN0IGZpbHRlcmVkUGl4ZWxzID0gW107XG4gIGxldCBleGNsdWRlZENvdW50ID0gMDtcbiAgXG4gIC8vIEZpbHRyYXIgcFx1MDBFRHhlbGVzIGV4Y2x1eWVuZG8gbG9zIGNvbG9yZXMgZXNwZWNpZmljYWRvc1xuICBmb3IgKGNvbnN0IGNvb3JkIG9mIHNlbGVjdGVkQ29vcmRzKSB7XG4gICAgY29uc3QgY2hhbmdlRGF0YSA9IGNoYW5nZXNNYXAuZ2V0KGNvb3JkKTtcbiAgICBcbiAgICAvLyBTaSBlbCBwXHUwMEVEeGVsIHRpZW5lIGNvbG9yIG9yaWdpbmFsIHkgZXN0XHUwMEUxIGVuIGxhIGxpc3RhIGRlIGV4Y2x1c2lcdTAwRjNuLCBubyBsbyBpbmNsdWltb3NcbiAgICBpZiAoY2hhbmdlRGF0YSAmJiBjaGFuZ2VEYXRhLm9yaWdpbmFsICYmIGV4Y2x1ZGVkQ29sb3JJZHMuaW5jbHVkZXMoY2hhbmdlRGF0YS5vcmlnaW5hbC5jb2xvcklkKSkge1xuICAgICAgZXhjbHVkZWRDb3VudCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWx0ZXJlZFBpeGVscy5wdXNoKGNvb3JkKTtcbiAgICB9XG4gIH1cbiAgXG4gIGlmIChleGNsdWRlZENvdW50ID4gMCkge1xuICAgIGxvZyhgXHVEODNEXHVERUFCIEV4Y2x1c2lcdTAwRjNuIGRlIGNvbG9yZXM6ICR7ZXhjbHVkZWRDb3VudH0gcFx1MDBFRHhlbGVzIGV4Y2x1aWRvcywgJHtmaWx0ZXJlZFBpeGVscy5sZW5ndGh9IHBcdTAwRUR4ZWxlcyBzZWxlY2Npb25hZG9zYCk7XG4gIH1cbiAgXG4gIHJldHVybiBmaWx0ZXJlZFBpeGVscztcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBzZXJwaWVudGUgKHppZ3phZykgLSBhdmFuemEgZW4gemlnemFnIHBvciBmaWxhcyBhbHRlcm5hbmRvIGRpcmVjY2lcdTAwRjNuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTbmFrZVBhdHRlcm4oY2hhbmdlcywgY291bnQpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgaWYgKGNoYW5nZXNBcnJheS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgXG4gIC8vIEFncnVwYXIgcG9yIGZpbGFzXG4gIGNvbnN0IHJvd0dyb3VwcyA9IHt9O1xuICBmb3IgKGNvbnN0IGNvb3JkIG9mIGNoYW5nZXNBcnJheSkge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgaWYgKCFyb3dHcm91cHNbeV0pIHJvd0dyb3Vwc1t5XSA9IFtdO1xuICAgIHJvd0dyb3Vwc1t5XS5wdXNoKHsgY29vcmQsIHgsIHkgfSk7XG4gIH1cbiAgXG4gIC8vIE9yZGVuYXIgZmlsYXMgeSBhbHRlcm5hciBkaXJlY2NpXHUwMEYzblxuICBjb25zdCBzb3J0ZWRSb3dzID0gT2JqZWN0LmtleXMocm93R3JvdXBzKS5tYXAoTnVtYmVyKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gIGNvbnN0IHNlbGVjdGVkID0gW107XG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNvcnRlZFJvd3MubGVuZ3RoICYmIHNlbGVjdGVkLmxlbmd0aCA8IGNvdW50OyBpKyspIHtcbiAgICBjb25zdCByb3cgPSBzb3J0ZWRSb3dzW2ldO1xuICAgIGNvbnN0IHBpeGVscyA9IHJvd0dyb3Vwc1tyb3ddO1xuICAgIFxuICAgIC8vIEFsdGVybmFyIGRpcmVjY2lcdTAwRjNuOiBmaWxhcyBwYXJlcyBpenEtPmRlciwgaW1wYXJlcyBkZXItPml6cVxuICAgIGlmIChpICUgMiA9PT0gMCkge1xuICAgICAgcGl4ZWxzLnNvcnQoKGEsIGIpID0+IGEueCAtIGIueCk7IC8vIEl6cXVpZXJkYSBhIGRlcmVjaGFcbiAgICB9IGVsc2Uge1xuICAgICAgcGl4ZWxzLnNvcnQoKGEsIGIpID0+IGIueCAtIGEueCk7IC8vIERlcmVjaGEgYSBpenF1aWVyZGFcbiAgICB9XG4gICAgXG4gICAgZm9yIChjb25zdCBwaXhlbCBvZiBwaXhlbHMpIHtcbiAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPj0gY291bnQpIGJyZWFrO1xuICAgICAgc2VsZWN0ZWQucHVzaChwaXhlbC5jb29yZCk7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gc2VsZWN0ZWQuc2xpY2UoMCwgY291bnQpO1xufVxuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGRlIGJhcnJpZG8gZGlhZ29uYWwgLSByZWNvcnJlIGRpYWdvbmFsbWVudGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERpYWdvbmFsU3dlZXBQYXR0ZXJuKGNoYW5nZXMsIGNvdW50KSB7XG4gIGNvbnN0IGNoYW5nZXNBcnJheSA9IEFycmF5LmZyb20oY2hhbmdlcyk7XG4gIGlmIChjaGFuZ2VzQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIFxuICAvLyBBZ3J1cGFyIHBvciBkaWFnb25hbGVzIChzdW1hIGRlIGNvb3JkZW5hZGFzKVxuICBjb25zdCBkaWFnb25hbEdyb3VwcyA9IHt9O1xuICBmb3IgKGNvbnN0IGNvb3JkIG9mIGNoYW5nZXNBcnJheSkge1xuICAgIGNvbnN0IFt4LCB5XSA9IGNvb3JkLnNwbGl0KCcsJykubWFwKE51bWJlcik7XG4gICAgY29uc3QgZGlhZ29uYWwgPSB4ICsgeTsgLy8gRGlhZ29uYWwgcHJpbmNpcGFsXG4gICAgaWYgKCFkaWFnb25hbEdyb3Vwc1tkaWFnb25hbF0pIGRpYWdvbmFsR3JvdXBzW2RpYWdvbmFsXSA9IFtdO1xuICAgIGRpYWdvbmFsR3JvdXBzW2RpYWdvbmFsXS5wdXNoKHsgY29vcmQsIHgsIHkgfSk7XG4gIH1cbiAgXG4gIC8vIE9yZGVuYXIgZGlhZ29uYWxlcyB5IHBcdTAwRUR4ZWxlcyBkZW50cm8gZGUgY2FkYSBkaWFnb25hbFxuICBjb25zdCBzb3J0ZWREaWFnb25hbHMgPSBPYmplY3Qua2V5cyhkaWFnb25hbEdyb3VwcykubWFwKE51bWJlcikuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICBjb25zdCBzZWxlY3RlZCA9IFtdO1xuICBcbiAgZm9yIChjb25zdCBkaWFnb25hbCBvZiBzb3J0ZWREaWFnb25hbHMpIHtcbiAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID49IGNvdW50KSBicmVhaztcbiAgICBcbiAgICBjb25zdCBwaXhlbHMgPSBkaWFnb25hbEdyb3Vwc1tkaWFnb25hbF07XG4gICAgcGl4ZWxzLnNvcnQoKGEsIGIpID0+IGEueCAtIGIueCk7IC8vIE9yZGVuYXIgcG9yIFggZGVudHJvIGRlIGxhIGRpYWdvbmFsXG4gICAgXG4gICAgZm9yIChjb25zdCBwaXhlbCBvZiBwaXhlbHMpIHtcbiAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPj0gY291bnQpIGJyZWFrO1xuICAgICAgc2VsZWN0ZWQucHVzaChwaXhlbC5jb29yZCk7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gc2VsZWN0ZWQuc2xpY2UoMCwgY291bnQpO1xufVxuXG4vKipcbiAqIFBhdHJcdTAwRjNuIGVzcGlyYWwgY29uIGRpcmVjY2lcdTAwRjNuIGNvbnRyb2xhZGEgKGhvcmFyaWEvYW50aWhvcmFyaWEpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3Rpb25hbFNwaXJhbFBhdHRlcm4oY2hhbmdlcywgY291bnQsIGNsb2Nrd2lzZSA9IHRydWUpIHtcbiAgY29uc3QgY2hhbmdlc0FycmF5ID0gQXJyYXkuZnJvbShjaGFuZ2VzKTtcbiAgaWYgKGNoYW5nZXNBcnJheS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgXG4gIC8vIEVuY29udHJhciBjZW50cm9cbiAgbGV0IG1pblggPSBJbmZpbml0eSwgbWF4WCA9IC1JbmZpbml0eSwgbWluWSA9IEluZmluaXR5LCBtYXhZID0gLUluZmluaXR5O1xuICBjb25zdCBjb29yZHMgPSBjaGFuZ2VzQXJyYXkubWFwKGNvb3JkID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCB4KTtcbiAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgeCk7XG4gICAgbWluWSA9IE1hdGgubWluKG1pblksIHkpO1xuICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCB5KTtcbiAgICByZXR1cm4geyBjb29yZCwgeCwgeSB9O1xuICB9KTtcbiAgXG4gIGNvbnN0IGNlbnRlclggPSAobWluWCArIG1heFgpIC8gMjtcbiAgY29uc3QgY2VudGVyWSA9IChtaW5ZICsgbWF4WSkgLyAyO1xuICBcbiAgLy8gQ2FsY3VsYXIgXHUwMEUxbmd1bG8geSBkaXN0YW5jaWEgZGVzZGUgZWwgY2VudHJvXG4gIGNvb3Jkcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGNvbnN0IGR4ID0gaXRlbS54IC0gY2VudGVyWDtcbiAgICBjb25zdCBkeSA9IGl0ZW0ueSAtIGNlbnRlclk7XG4gICAgaXRlbS5kaXN0YW5jZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgaXRlbS5hbmdsZSA9IE1hdGguYXRhbjIoZHksIGR4KTtcbiAgICBcbiAgICAvLyBBanVzdGFyIFx1MDBFMW5ndWxvIHBhcmEgZGlyZWNjaVx1MDBGM25cbiAgICBpZiAoIWNsb2Nrd2lzZSkge1xuICAgICAgaXRlbS5hbmdsZSA9IC1pdGVtLmFuZ2xlO1xuICAgIH1cbiAgfSk7XG4gIFxuICAvLyBPcmRlbmFyIHBvciBkaXN0YW5jaWEgeSBsdWVnbyBwb3IgXHUwMEUxbmd1bG9cbiAgY29vcmRzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBkaXN0RGlmZiA9IGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xuICAgIGlmIChNYXRoLmFicyhkaXN0RGlmZikgPCAxKSB7XG4gICAgICByZXR1cm4gYS5hbmdsZSAtIGIuYW5nbGU7XG4gICAgfVxuICAgIHJldHVybiBkaXN0RGlmZjtcbiAgfSk7XG4gIFxuICByZXR1cm4gY29vcmRzLnNsaWNlKDAsIGNvdW50KS5tYXAoaXRlbSA9PiBpdGVtLmNvb3JkKTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBhbGVhdG9yaW8gc2VzZ2FkbyAtIGFsZWF0b3JpbyBjb24gcHJlZmVyZW5jaWEgcG9yIGJvcmRlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qmlhc2VkUmFuZG9tUGF0dGVybihjaGFuZ2VzLCBjb3VudCkge1xuICBjb25zdCBjaGFuZ2VzQXJyYXkgPSBBcnJheS5mcm9tKGNoYW5nZXMpO1xuICBpZiAoY2hhbmdlc0FycmF5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBcbiAgLy8gRW5jb250cmFyIGxcdTAwRURtaXRlc1xuICBsZXQgbWluWCA9IEluZmluaXR5LCBtYXhYID0gLUluZmluaXR5LCBtaW5ZID0gSW5maW5pdHksIG1heFkgPSAtSW5maW5pdHk7XG4gIGZvciAoY29uc3QgY29vcmQgb2YgY2hhbmdlc0FycmF5KSB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBtaW5YID0gTWF0aC5taW4obWluWCwgeCk7XG4gICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIHgpO1xuICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCB5KTtcbiAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgeSk7XG4gIH1cbiAgXG4gIC8vIENhbGN1bGFyIHBlc28gYmFzYWRvIGVuIHByb3hpbWlkYWQgYSBib3JkZXNcbiAgY29uc3Qgd2VpZ2h0ZWRDb29yZHMgPSBjaGFuZ2VzQXJyYXkubWFwKGNvb3JkID0+IHtcbiAgICBjb25zdCBbeCwgeV0gPSBjb29yZC5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgIFxuICAgIC8vIERpc3RhbmNpYSBhIGxvcyBib3JkZXNcbiAgICBjb25zdCBkaXN0VG9MZWZ0ID0geCAtIG1pblg7XG4gICAgY29uc3QgZGlzdFRvUmlnaHQgPSBtYXhYIC0geDtcbiAgICBjb25zdCBkaXN0VG9Ub3AgPSB5IC0gbWluWTtcbiAgICBjb25zdCBkaXN0VG9Cb3R0b20gPSBtYXhZIC0geTtcbiAgICBcbiAgICAvLyBQZXNvIG1heW9yIHBhcmEgcFx1MDBFRHhlbGVzIGNlcmNhIGRlIGJvcmRlc1xuICAgIGNvbnN0IG1pbkRpc3RUb0JvcmRlciA9IE1hdGgubWluKGRpc3RUb0xlZnQsIGRpc3RUb1JpZ2h0LCBkaXN0VG9Ub3AsIGRpc3RUb0JvdHRvbSk7XG4gICAgY29uc3Qgd2VpZ2h0ID0gMSAvIChtaW5EaXN0VG9Cb3JkZXIgKyAxKSArIE1hdGgucmFuZG9tKCkgKiAwLjU7XG4gICAgXG4gICAgcmV0dXJuIHsgY29vcmQsIHdlaWdodCB9O1xuICB9KTtcbiAgXG4gIC8vIE9yZGVuYXIgcG9yIHBlc28gKG1heW9yIHBlc28gPSBtYXlvciBwcm9iYWJpbGlkYWQpXG4gIHdlaWdodGVkQ29vcmRzLnNvcnQoKGEsIGIpID0+IGIud2VpZ2h0IC0gYS53ZWlnaHQpO1xuICBcbiAgLy8gU2VsZWNjaVx1MDBGM24gc2VzZ2FkYSBjb24gY29tcG9uZW50ZSBhbGVhdG9yaW9cbiAgY29uc3Qgc2VsZWN0ZWQgPSBbXTtcbiAgY29uc3QgYXZhaWxhYmxlID0gWy4uLndlaWdodGVkQ29vcmRzXTtcbiAgXG4gIHdoaWxlIChzZWxlY3RlZC5sZW5ndGggPCBjb3VudCAmJiBhdmFpbGFibGUubGVuZ3RoID4gMCkge1xuICAgIC8vIFNlbGVjY2lcdTAwRjNuIHNlc2dhZGE6IG1heW9yIHByb2JhYmlsaWRhZCBwYXJhIHBlc29zIGFsdG9zXG4gICAgY29uc3QgdG90YWxXZWlnaHQgPSBhdmFpbGFibGUucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0ud2VpZ2h0LCAwKTtcbiAgICBsZXQgcmFuZG9tID0gTWF0aC5yYW5kb20oKSAqIHRvdGFsV2VpZ2h0O1xuICAgIFxuICAgIGxldCBzZWxlY3RlZEluZGV4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF2YWlsYWJsZS5sZW5ndGg7IGkrKykge1xuICAgICAgcmFuZG9tIC09IGF2YWlsYWJsZVtpXS53ZWlnaHQ7XG4gICAgICBpZiAocmFuZG9tIDw9IDApIHtcbiAgICAgICAgc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzZWxlY3RlZC5wdXNoKGF2YWlsYWJsZVtzZWxlY3RlZEluZGV4XS5jb29yZCk7XG4gICAgYXZhaWxhYmxlLnNwbGljZShzZWxlY3RlZEluZGV4LCAxKTtcbiAgfVxuICBcbiAgcmV0dXJuIHNlbGVjdGVkLnNsaWNlKDAsIGNvdW50KTtcbn1cblxuLyoqXG4gKiBQYXRyXHUwMEYzbiBkZSBwdW50b3MgZGUgYW5jbGFqZSAtIHByaW9yaXphIGVzcXVpbmFzIHkgY2VudHJvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmNob3JQb2ludHNQYXR0ZXJuKGNoYW5nZXMsIGNvdW50KSB7XG4gIGNvbnN0IGNoYW5nZXNBcnJheSA9IEFycmF5LmZyb20oY2hhbmdlcyk7XG4gIGlmIChjaGFuZ2VzQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIFxuICAvLyBFbmNvbnRyYXIgbFx1MDBFRG1pdGVzXG4gIGxldCBtaW5YID0gSW5maW5pdHksIG1heFggPSAtSW5maW5pdHksIG1pblkgPSBJbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eTtcbiAgY29uc3QgY29vcmRzID0gY2hhbmdlc0FycmF5Lm1hcChjb29yZCA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gY29vcmQuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICBtaW5YID0gTWF0aC5taW4obWluWCwgeCk7XG4gICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIHgpO1xuICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCB5KTtcbiAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgeSk7XG4gICAgcmV0dXJuIHsgY29vcmQsIHgsIHkgfTtcbiAgfSk7XG4gIFxuICBjb25zdCBjZW50ZXJYID0gKG1pblggKyBtYXhYKSAvIDI7XG4gIGNvbnN0IGNlbnRlclkgPSAobWluWSArIG1heFkpIC8gMjtcbiAgXG4gIC8vIERlZmluaXIgcHVudG9zIGRlIGFuY2xhamVcbiAgY29uc3QgYW5jaG9yUG9pbnRzID0gW1xuICAgIHsgeDogbWluWCwgeTogbWluWSwgcHJpb3JpdHk6IDEgfSwgLy8gRXNxdWluYSBzdXBlcmlvciBpenF1aWVyZGFcbiAgICB7IHg6IG1heFgsIHk6IG1pblksIHByaW9yaXR5OiAxIH0sIC8vIEVzcXVpbmEgc3VwZXJpb3IgZGVyZWNoYVxuICAgIHsgeDogbWluWCwgeTogbWF4WSwgcHJpb3JpdHk6IDEgfSwgLy8gRXNxdWluYSBpbmZlcmlvciBpenF1aWVyZGFcbiAgICB7IHg6IG1heFgsIHk6IG1heFksIHByaW9yaXR5OiAxIH0sIC8vIEVzcXVpbmEgaW5mZXJpb3IgZGVyZWNoYVxuICAgIHsgeDogY2VudGVyWCwgeTogY2VudGVyWSwgcHJpb3JpdHk6IDIgfSwgLy8gQ2VudHJvXG4gICAgeyB4OiBjZW50ZXJYLCB5OiBtaW5ZLCBwcmlvcml0eTogMyB9LCAvLyBDZW50cm8gc3VwZXJpb3JcbiAgICB7IHg6IGNlbnRlclgsIHk6IG1heFksIHByaW9yaXR5OiAzIH0sIC8vIENlbnRybyBpbmZlcmlvclxuICAgIHsgeDogbWluWCwgeTogY2VudGVyWSwgcHJpb3JpdHk6IDMgfSwgLy8gQ2VudHJvIGl6cXVpZXJkb1xuICAgIHsgeDogbWF4WCwgeTogY2VudGVyWSwgcHJpb3JpdHk6IDMgfSAgLy8gQ2VudHJvIGRlcmVjaG9cbiAgXTtcbiAgXG4gIC8vIENhbGN1bGFyIHByaW9yaWRhZCBwYXJhIGNhZGEgcFx1MDBFRHhlbFxuICBjb29yZHMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICBsZXQgYmVzdFByaW9yaXR5ID0gMTA7XG4gICAgXG4gICAgZm9yIChjb25zdCBhbmNob3Igb2YgYW5jaG9yUG9pbnRzKSB7XG4gICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChcbiAgICAgICAgTWF0aC5wb3coaXRlbS54IC0gYW5jaG9yLngsIDIpICsgTWF0aC5wb3coaXRlbS55IC0gYW5jaG9yLnksIDIpXG4gICAgICApO1xuICAgICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgYmVzdFByaW9yaXR5ID0gYW5jaG9yLnByaW9yaXR5O1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpdGVtLnByaW9yaXR5ID0gYmVzdFByaW9yaXR5O1xuICAgIGl0ZW0uZGlzdGFuY2VUb0FuY2hvciA9IG1pbkRpc3RhbmNlO1xuICB9KTtcbiAgXG4gIC8vIE9yZGVuYXIgcG9yIHByaW9yaWRhZCB5IGx1ZWdvIHBvciBkaXN0YW5jaWFcbiAgY29vcmRzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBpZiAoYS5wcmlvcml0eSAhPT0gYi5wcmlvcml0eSkge1xuICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgIH1cbiAgICByZXR1cm4gYS5kaXN0YW5jZVRvQW5jaG9yIC0gYi5kaXN0YW5jZVRvQW5jaG9yO1xuICB9KTtcbiAgXG4gIHJldHVybiBjb29yZHMuc2xpY2UoMCwgY291bnQpLm1hcChpdGVtID0+IGl0ZW0uY29vcmQpO1xufSIsICIvLyBQYWludGluZyBoZWxwZXJzIGZvciBTbGF2ZTogbW9kdWxhcml6ZWQgZnJvbSBpbmRleC5qcyB0byBrZWVwIGxvZ2ljIHJldXNhYmxlIGFuZCB0ZXN0YWJsZVxuaW1wb3J0IHsgcG9zdFBpeGVsQmF0Y2hJbWFnZSB9IGZyb20gXCIuLi9jb3JlL3dwbGFjZS1hcGkuanNcIjtcbmltcG9ydCB7IGVuc3VyZVRva2VuIH0gZnJvbSBcIi4uL2NvcmUvdHVybnN0aWxlLmpzXCI7XG5cbi8vIFBhaW50IGEgc2luZ2xlIHRpbGUgYmF0Y2g7IGNvb3JkcyBhcmUgbG9jYWwgZmxhdCBbeCx5LC4uLl0gd2l0aGluIHRoZSB0aWxlXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFpbnRCYXRjaCh7IHRpbGVYLCB0aWxlWSwgY29vcmRzRmxhdCwgY29sb3JzLCBzZW5kVG9NYXN0ZXIsIHNob3VsZEFib3J0IH0pIHtcbiAgY29uc3QgQkFUQ0ggPSAyMDA7XG4gIGxldCB0b3RhbFBhaW50ZWQgPSAwO1xuICBsZXQgbGFzdFN0YXR1cyA9IDA7XG4gIGxldCBsYXN0U3VjY2VzcyA9IGZhbHNlO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29sb3JzLmxlbmd0aDsgaSArPSBCQVRDSCkge1xuICAgIGlmIChzaG91bGRBYm9ydCAmJiBzaG91bGRBYm9ydCgpKSB7XG4gICAgICBzZW5kU2FmZShzZW5kVG9NYXN0ZXIsIHsgdHlwZTogJ3BhaW50X3Jlc3VsdCcsIG9rOiBmYWxzZSwgYWJvcnRlZDogdHJ1ZSwgdGlsZVgsIHRpbGVZLCBwYWludGVkOiB0b3RhbFBhaW50ZWQgfSk7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgc3RhdHVzOiBsYXN0U3RhdHVzLCBwYWludGVkOiB0b3RhbFBhaW50ZWQsIGFib3J0ZWQ6IHRydWUgfTtcbiAgICB9XG5cbiAgICBjb25zdCBzdWJDb2xvcnMgPSBjb2xvcnMuc2xpY2UoaSwgaSArIEJBVENIKTtcbiAgICAvLyBTbGljZSBjb3JyZXNwb25kaW5nIGNvb3Jkc0ZsYXQ6IDIgZW50cmllcyBwZXIgY29sb3JcbiAgICBjb25zdCBzdGFydCA9IGkgKiAyO1xuICAgIGNvbnN0IGVuZCA9IE1hdGgubWluKGNvbG9ycy5sZW5ndGgsIGkgKyBCQVRDSCkgKiAyO1xuICAgIGNvbnN0IHN1YkNvb3Jkc0ZsYXQgPSBjb29yZHNGbGF0LnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gICAgbGV0IHQgPSBudWxsO1xuICAgIHRyeSB7IHQgPSBhd2FpdCBlbnN1cmVUb2tlbigpOyB9IGNhdGNoIHt9XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwb3N0UGl4ZWxCYXRjaEltYWdlKHRpbGVYLCB0aWxlWSwgc3ViQ29vcmRzRmxhdCwgc3ViQ29sb3JzLCB0KTtcbiAgICBsYXN0U3RhdHVzID0gcmVzdWx0Py5zdGF0dXMgfHwgMDtcbiAgICBsYXN0U3VjY2VzcyA9ICEhcmVzdWx0Py5zdWNjZXNzO1xuICAgIGNvbnN0IHBhaW50ZWQgPSBNYXRoLnRydW5jKHJlc3VsdD8ucGFpbnRlZCB8fCAwKTtcbiAgICB0b3RhbFBhaW50ZWQgKz0gcGFpbnRlZDtcblxuICAgIHNlbmRTYWZlKHNlbmRUb01hc3RlciwgeyB0eXBlOiAncGFpbnRfcHJvZ3Jlc3MnLCB0aWxlWCwgdGlsZVksIHBhaW50ZWQsIGJhdGNoSW5kZXg6IE1hdGguZmxvb3IoaSAvIEJBVENIKSwgdG90YWxCYXRjaGVzOiBNYXRoLmNlaWwoY29sb3JzLmxlbmd0aCAvIEJBVENIKSB9KTtcbiAgICBhd2FpdCBzbGVlcEJyaWVmKDEwMCk7XG4gIH1cblxuICBzZW5kU2FmZShzZW5kVG9NYXN0ZXIsIHsgdHlwZTogJ3BhaW50X3Jlc3VsdCcsIG9rOiBsYXN0U3VjY2Vzcywgc3RhdHVzOiBsYXN0U3RhdHVzLCB0aWxlWCwgdGlsZVksIHBhaW50ZWQ6IHRvdGFsUGFpbnRlZCB9KTtcbiAgcmV0dXJuIHsgc3VjY2VzczogbGFzdFN1Y2Nlc3MsIHN0YXR1czogbGFzdFN0YXR1cywgcGFpbnRlZDogdG90YWxQYWludGVkIH07XG59XG5cbi8vIFJlcGFpciBhcmJpdHJhcnkgcGl4ZWxzIGluIGdsb2JhbCBjb29yZGluYXRlczogZ3JvdXBzIGJ5IHRpbGUsIGNvbnZlcnRzIHRvIGxvY2FsIGNvb3JkcywgcGFpbnRzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVwYWlyUGl4ZWxzKHsgcGl4ZWxzLCB0aWxlU2l6ZSA9IDEwMDAsIHNlbmRUb01hc3Rlciwgc2hvdWxkQWJvcnQgfSkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkocGl4ZWxzKSB8fCBwaXhlbHMubGVuZ3RoID09PSAwKSByZXR1cm4geyBwYWludGVkOiAwIH07XG5cbiAgLy8gR3JvdXAgYnkgdGlsZVxuICBjb25zdCBieVRpbGUgPSBuZXcgTWFwKCk7IC8vIGtleSAtPiB7IHRpbGVYLCB0aWxlWSwgbG9jYWxzRmxhdDogbnVtYmVyW10sIGNvbG9yczogbnVtYmVyW10gfVxuICBmb3IgKGNvbnN0IHAgb2YgcGl4ZWxzKSB7XG4gICAgY29uc3QgZ3ggPSBNYXRoLnRydW5jKHAueCk7XG4gICAgY29uc3QgZ3kgPSBNYXRoLnRydW5jKHAueSk7XG4gICAgY29uc3QgY29sb3IgPSBNYXRoLnRydW5jKHAuZXhwZWN0ZWRDb2xvciA/PyBwLmNvbG9yID8/IDApO1xuICAgIGNvbnN0IHRpbGVYID0gTWF0aC5mbG9vcihneCAvIHRpbGVTaXplKTtcbiAgICBjb25zdCB0aWxlWSA9IE1hdGguZmxvb3IoZ3kgLyB0aWxlU2l6ZSk7XG4gICAgY29uc3QgbHggPSBneCAtIHRpbGVYICogdGlsZVNpemU7XG4gICAgY29uc3QgbHkgPSBneSAtIHRpbGVZICogdGlsZVNpemU7XG4gICAgY29uc3Qga2V5ID0gYCR7dGlsZVh9LCR7dGlsZVl9YDtcbiAgICBpZiAoIWJ5VGlsZS5oYXMoa2V5KSkgYnlUaWxlLnNldChrZXksIHsgdGlsZVgsIHRpbGVZLCBsb2NhbHNGbGF0OiBbXSwgY29sb3JzOiBbXSB9KTtcbiAgICBjb25zdCBidWNrZXQgPSBieVRpbGUuZ2V0KGtleSk7XG4gICAgYnVja2V0LmxvY2Fsc0ZsYXQucHVzaChseCwgbHkpO1xuICAgIGJ1Y2tldC5jb2xvcnMucHVzaChjb2xvcik7XG4gIH1cblxuICBsZXQgdG90YWxQYWludGVkID0gMDtcbiAgZm9yIChjb25zdCBbLCBncm91cF0gb2YgYnlUaWxlKSB7XG4gICAgaWYgKHNob3VsZEFib3J0ICYmIHNob3VsZEFib3J0KCkpIHtcbiAgICAgIHNlbmRTYWZlKHNlbmRUb01hc3RlciwgeyB0eXBlOiAncGFpbnRfcmVzdWx0Jywgb2s6IGZhbHNlLCBhYm9ydGVkOiB0cnVlLCBwYWludGVkOiB0b3RhbFBhaW50ZWQgfSk7XG4gICAgICByZXR1cm4geyBwYWludGVkOiB0b3RhbFBhaW50ZWQsIGFib3J0ZWQ6IHRydWUgfTtcbiAgICB9XG4gICAgY29uc3QgeyB0aWxlWCwgdGlsZVksIGxvY2Fsc0ZsYXQsIGNvbG9ycyB9ID0gZ3JvdXA7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgcGFpbnRCYXRjaCh7IHRpbGVYLCB0aWxlWSwgY29vcmRzRmxhdDogbG9jYWxzRmxhdCwgY29sb3JzLCBzZW5kVG9NYXN0ZXIsIHNob3VsZEFib3J0IH0pO1xuICAgIHRvdGFsUGFpbnRlZCArPSBNYXRoLnRydW5jKHJlcz8ucGFpbnRlZCB8fCAwKTtcbiAgICBhd2FpdCBzbGVlcEJyaWVmKDE1MCk7XG4gIH1cblxuICBzZW5kU2FmZShzZW5kVG9NYXN0ZXIsIHsgdHlwZTogJ3JlcGFpcl9jb21wbGV0ZScsIGNvbXBsZXRlZDogdG90YWxQYWludGVkLCBzb3VyY2U6ICdndWFyZF9vbmVfYmF0Y2gnIH0pO1xuICByZXR1cm4geyBwYWludGVkOiB0b3RhbFBhaW50ZWQgfTtcbn1cblxuZnVuY3Rpb24gc2VuZFNhZmUoc2VuZFRvTWFzdGVyLCBtc2cpIHtcbiAgdHJ5IHsgaWYgKHR5cGVvZiBzZW5kVG9NYXN0ZXIgPT09ICdmdW5jdGlvbicpIHNlbmRUb01hc3Rlcihtc2cpOyB9IGNhdGNoIHt9XG59XG5cbmZ1bmN0aW9uIHNsZWVwQnJpZWYobXMpIHsgcmV0dXJuIG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCBtcykpOyB9XG4iLCAiLy8gRW50cnkgcG9pbnQgcGFyYSBBdXRvLVNsYXZlXG5pbXBvcnQgeyBydW5TbGF2ZSB9IGZyb20gJy4uL3NsYXZlL2luZGV4LmpzJztcblxuLy8gRWplY3V0YXIgZWwgc2xhdmUgYXV0b21cdTAwRTF0aWNhbWVudGVcbnJ1blNsYXZlKCkuY2F0Y2goZXJyb3IgPT4ge1xuICBjb25zb2xlLmVycm9yKCdbQXV0by1TbGF2ZV0gRXJyb3IgZmF0YWw6JywgZXJyb3IpO1xufSk7Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsTUFVYTtBQVZiO0FBQUE7QUFVTyxNQUFNLE1BQU0sSUFBSSxNQUFNLFFBQVEsSUFBSSxZQUFZLEdBQUcsQ0FBQztBQUFBO0FBQUE7OztBQ1Z6RCxNQUFhO0FBQWI7QUFBQTtBQUFPLE1BQU0sS0FBSztBQUFBO0FBQUEsUUFFaEIsVUFBVTtBQUFBLFVBQ1IsT0FBTztBQUFBLFVBQ1AsVUFBVTtBQUFBLFVBQ1YsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsTUFBTTtBQUFBLFVBQ04sU0FBUztBQUFBLFVBQ1QsU0FBUztBQUFBLFVBQ1QsVUFBVTtBQUFBLFVBQ1YsUUFBUTtBQUFBLFVBQ1IsT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFVBQ1QsV0FBVztBQUFBLFVBQ1gsYUFBYTtBQUFBLFVBQ2IsV0FBVztBQUFBLFVBQ1gsZUFBZTtBQUFBLFVBQ2YsV0FBVztBQUFBLFVBQ1gsY0FBYztBQUFBLFVBQ2QsVUFBVTtBQUFBLFVBQ1YsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFVBQ1QsSUFBSTtBQUFBLFVBQ0osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsV0FBVztBQUFBLFVBQ1gsZ0JBQWdCO0FBQUEsVUFDaEIsY0FBYztBQUFBLFVBQ2QsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsZ0JBQWdCO0FBQUEsVUFDaEIsYUFBYTtBQUFBLFFBQ2Y7QUFBQTtBQUFBLFFBR0EsT0FBTztBQUFBLFVBQ0wsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBRWQsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsYUFBYTtBQUFBLFVBQ2IsWUFBWTtBQUFBLFVBQ1oscUJBQXFCO0FBQUEsVUFDckIsaUJBQWlCO0FBQUEsVUFDakIsYUFBYTtBQUFBLFVBQ2IsaUJBQWlCO0FBQUEsVUFDakIsa0JBQWtCO0FBQUEsVUFDbEIsZUFBZTtBQUFBLFVBQ2Ysa0JBQWtCO0FBQUEsVUFDbEIsa0JBQWtCO0FBQUEsVUFDbEIsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsa0JBQWtCO0FBQUEsVUFDbEIsZUFBZTtBQUFBLFVBQ2YscUJBQXFCO0FBQUEsVUFDckIsVUFBVTtBQUFBLFVBQ1YsVUFBVTtBQUFBLFVBQ1YsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFVBQ1QsZUFBZTtBQUFBLFVB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QUFBLFVBQ1AsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsT0FBTztBQUFBLFVBQ1AsVUFBVTtBQUFBLFVBQ1YsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsVUFBVTtBQUFBLFVBQ1YsU0FBUztBQUFBLFVBQ1QsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsU0FBUztBQUFBLFVBQ1QsTUFBTTtBQUFBLFVBQ04saUJBQWlCO0FBQUEsUUFDbkI7QUFBQTtBQUFBLFFBR0EsT0FBTztBQUFBLFVBQ0wsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsWUFBWTtBQUFBLFVBQ2QsTUFBTTtBQUFBLFVBQ0osYUFBYTtBQUFBLFVBQ2IsaUJBQWlCO0FBQUEsVUFDakIsZ0JBQWdCO0FBQUEsVUFDaEIsaUJBQWlCO0FBQUEsVUFDakIsV0FBVztBQUFBLFVBQ1gsWUFBWTtBQUFBLFVBQ1osaUJBQWlCO0FBQUEsVUFDakIsZ0JBQWdCO0FBQUEsVUFDaEIsU0FBUztBQUFBLFVBQ1QsYUFBYTtBQUFBLFVBQ2IsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsV0FBVztBQUFBLFVBQ1gsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsZUFBZTtBQUFBLFVBQ2YsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsYUFBYTtBQUFBLFVBQ2IsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsa0JBQWtCO0FBQUEsVUFDbEIsaUJBQWlCO0FBQUEsVUFDakIsZ0JBQWdCO0FBQUEsVUFDaEIsb0JBQW9CO0FBQUEs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Y0FBYztBQUFBLFVBQ2QsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsZ0JBQWdCO0FBQUEsVUFDaEIsYUFBYTtBQUFBLFFBQ2Y7QUFBQTtBQUFBLFFBR0EsT0FBTztBQUFBLFVBQ0wsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsYUFBYTtBQUFBLFVBQ2IsWUFBWTtBQUFBLFVBQ1oscUJBQXFCO0FBQUEsVUFDckIsaUJBQWlCO0FBQUEsVUFDakIsYUFBYTtBQUFBLFVBQ2IsaUJBQWlCO0FBQUEsVUFDakIsa0JBQWtCO0FBQUEsVUFDbEIsZUFBZTtBQUFBLFVBQ2Ysa0JBQWtCO0FBQUEsVUFDbEIsa0JBQWtCO0FBQUEsVUFDbEIsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsa0JBQWtCO0FBQUEsVUFDbEIsZUFBZTtBQUFBLFVBQ2YscUJBQXFCO0FBQUEsVUFDckIsVUFBVTtBQUFBLFVBQ1YsVUFBVTtBQUFBLFVBQ1YsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFVBQ1QsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsZUFBZTtBQUFBLFVBQ2YsZ0JBQWdCO0FBQUEsVUFDaEIsZ0JBQWdCO0FBQUEsVUFDaEIsV0FBVztBQUFBLFVBQ1gsZUFBZTtBQUFBLFVBQ2YsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsWUFBWTtBQUFBLFVBQ1osbUJBQW1CO0FBQUEsVUFDbkIsZUFBZTtBQUFBLFVBQ2YsaUJBQWlCO0FBQUEsVUFDakIsZUFBZTtBQUFBLFVBQ2YsZ0JBQWdCO0FBQUEsVUFDaEIsbUJBQW1CO0FBQUEsVUFFbkIsbUJBQW1CO0FBQUEsVUFFbkIscUJBQXFCO0FBQUEsVUFDckIsbUJBQW1CO0FBQUEsVUFDbkIsaUJBQWlCO0FBQUEsVUFDakIsUUFBUTtBQUFBLFVBQ1IsVUFBVTtBQUFBLFVBQ1YsT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsWUFBWTtBQUFBLFVBQ1osT0FBTztBQUFBLFVBQ1QsV0FBVztBQUFBLFVBQ1gsWUFBWTtBQUFBLFVBQ1YsZUFBZTtBQUFBLFVBQ2YscUJBQXFCO0FBQUEsVUFDckIseUJBQXlCO0FBQUEsVUFDekIsa0JBQWtCO0FBQUEsVUFDbEIsaUJBQWlCO0FBQUEsVUFDakIsZ0JBQWdCO0FBQUEsVUFDaEIsaUJBQWlCO0FBQUEsVUFDakIsaUJBQWlCO0FBQUEsVUFDakIscUJBQXFCO0FBQUEsVUFDckIscUJBQXFCO0FBQUEsVUFDckIsb0JBQW9CO0FBQUEsVUFDcEIsY0FBYztBQUFBLFVBQ2QsWUFBWTtBQUFBLFVBQ1osYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBO0FBQUEsVUFFZCxtQkFBbUI7QUFBQSxVQUNuQixvQkFBb0I7QUFBQSxVQUNwQixjQUFjO0FBQUEsVUFDZCxvQkFBb0I7QUFBQSxVQUNwQixrQkFBa0I7QUFBQSxVQUNsQixlQUFlO0FBQUEsVUFDZixrQkFBa0I7QUFBQSxVQUNsQixxQkFBcUI7QUFBQSxVQUNyQixlQUFlO0FBQUEsVUFDZixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsVUFDVCxjQUFjO0FBQUEsVUFDZCxVQUFVO0FBQUEsVUFDVixNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUEsVUFDUCxRQUFRO0FBQUEsVUFDUixRQUFRO0FBQUEsVUFDUixRQUFRO0FBQUEsVUFDUixRQUFRO0FBQUEsVUFDUixtQkFBbUI7QUFBQSxVQUNuQixpQkFBaUI7QUFBQSxVQUNqQixXQUFXO0FBQUEsVUFDWCxpQkFBaUI7QUFBQSxVQUNqQixvQkFBb0I7QUFBQSxVQUNwQixvQkFBb0I7QUFBQSxVQUNwQixnQkFBZ0I7QUFBQSxVQUNoQixlQUFlO0FBQUEsVUFDZixXQUFXO0FBQUEsVUFDWCxnQkFBZ0I7QUFBQSxVQUNoQixjQUFjO0FBQUEsVUFDZCxXQUFXO0FBQUEsVUFDWCxXQUFXO0FBQUEsUUFDYjtBQUFBO0FBQUEsUUFHQSxNQUFNO0FBQUEsVUFDSixPQUFPO0FBQUEsVUFDUCxPQUFPO0FBQUEsVUFDUCxNQUFNO0FBQUEsVUFDTixTQUFTO0FBQUEsVUFDVCxXQUFXO0FBQUEsVUFDWCxXQUFXO0FBQUEsVUFDWCxnQkFBZ0I7QUFBQSxVQUNoQixlQUFlO0FBQUEsVUFDZixPQUFPO0FBQUEsVUFDUCxnQkFBZ0I7QUFBQSxVQUNoQixZQUFZO0FBQUEsVUFDWixXQUFXO0FBQUEsVUFDWCxRQUFRO0FBQUEsVUFDUixPQUFPO0FBQUEsVUFDUCxPQUFPO0FBQUEsVUFDUCxZQUFZO0FBQUEsVUFDWixVQUFVO0FBQUEsVUFDVixPQUFPO0FBQUEsVUFDUCxPQUFPO0FBQUEsVUFDUCxlQUFlO0FBQUEsVUFDZixnQkFBZ0I7QUFBQSxVQUNoQixTQUFTO0FBQUEsVUFDVCxTQUFTO0FBQUEsVUFDVCxTQUFTO0FBQUEsVUFDVCxTQUFTO0FBQUEsVUFDVCxNQUFNO0FBQUEsVUFDTixhQUFhO0FBQUEsVUFDYixjQUFjO0FBQUEsVUFDZCxhQUFhO0FBQUEsVUFDYixxQkFBcUI7QUFBQSxVQUNyQixlQUFlO0FBQUEsVUFDZixnQkFBZ0I7QUFBQSxVQUNoQixhQUFhO0FBQUEsVUFDYixhQUFhO0FBQUEsVUFDYixhQUFhO0FBQUEsVUFDYixnQkFBZ0I7QUFBQSxVQUNoQixxQkFBcUI7QUFBQSxVQUNyQixnQkFBZ0I7QUFBQSxVQUNoQixxQkFBcUI7QUFBQSxVQUNyQixpQkFBaUI7QUFBQSxVQUNqQixhQUFhO0FBQUEsVUFDYixpQkFBaUI7QUFBQSxVQUNqQixpQkFBaUI7QUFBQSxVQUNqQixZQUFZO0FBQUEsVUFDWixjQUFjO0FBQUEsVUFDZCxpQkFBaUI7QUFBQSxVQUNqQixpQkFBaUI7QUFBQSxVQUNqQixZQUFZO0FBQUEsVUFDWixhQUFhO0FBQUEsVUFD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LE9BQU87QUFBQSxVQUNQLFVBQVU7QUFBQSxVQUNWLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFVBQVU7QUFBQSxVQUNWLFNBQVM7QUFBQSxVQUNULE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxVQUNULFNBQVM7QUFBQSxVQUNULE1BQU07QUFBQSxVQUNOLGlCQUFpQjtBQUFBLFFBQ25CO0FBQUE7QUFBQSxRQUdBLE9BQU87QUFBQSxVQUNMLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxVQUNULFlBQVk7QUFBQSxVQUNaLGFBQWE7QUFBQSxVQUNiLGlCQUFpQjtBQUFBLFVBQ2pCLGdCQUFnQjtBQUFBLFVBQ2hCLFdBQVc7QUFBQSxVQUNYLFlBQVk7QUFBQSxVQUNaLGlCQUFpQjtBQUFBLFVBQ2pCLGlCQUFpQjtBQUFBLFVBQ2pCLGdCQUFnQjtBQUFBLFVBQ2hCLFNBQVM7QUFBQSxVQUNULGFBQWE7QUFBQSxVQUNiLGdCQUFnQjtBQUFBLFVBQ2hCLGVBQWU7QUFBQSxVQUNmLGFBQWE7QUFBQSxVQUNiLGFBQWE7QUFBQSxVQUNiLFdBQVc7QUFBQSxVQUNYLGVBQWU7QUFBQSxVQUNmLGFBQWE7QUFBQSxVQUNiLGNBQWM7QUFBQSxVQUNkLGVBQWU7QUFBQSxVQUNmLGNBQWM7QUFBQSxVQUNkLGNBQWM7QUFBQSxVQUNkLGNBQWM7QUFBQSxVQUNkLG1CQUFtQjtBQUFBLFVBQ25CLG1CQUFtQjtBQUFBLFVBQ25CLFdBQVc7QUFBQSxVQUNYLGlCQUFpQjtBQUFBLFVBQ2pCLFdBQVc7QUFBQSxVQUNYLGlCQUFpQjtBQUFBLFVBQ2pCLGFBQWE7QUFBQSxVQUNiLFdBQVc7QUFBQSxVQUNYLGlCQUFpQjtBQUFBLFVBQ2pCLGVBQWU7QUFBQSxVQUNmLGFBQWE7QUFBQSxVQUNiLFdBQVc7QUFBQSxVQUNYLFdBQVc7QUFBQSxVQUNYLGtCQUFrQjtBQUFBLFVBQ2xCLGlCQUFpQjtBQUFBLFVBQ2pCLGdCQUFnQjtBQUFBLFVBQ2hCLG9CQUFvQjtBQUFBLFVBQ3BCLGlCQUFpQjtBQUFBLFVBQ2pCLGlCQUFpQjtBQUFBLFVBQ2pCLHFCQUFxQjtBQUFBLFVBQ3JCLHFCQUFxQjtBQUFBLFVBQ3JCLGlCQUFpQjtBQUFBLFVBQ2pCLGtCQUFrQjtBQUFBLFVBQ2xCLGtCQUFrQjtBQUFBLFVBQ2xCLG1CQUFtQjtBQUFBLFVBQ25CLG1CQUFtQjtBQUFBLFVBQ25CLG9CQUFvQjtBQUFBLFVBQ3BCLGtCQUFrQjtBQUFBLFVBQ2xCLGdCQUFnQjtBQUFBLFVBQ2hCLFdBQVc7QUFBQSxVQUNYLGdCQUFnQjtBQUFBLFVBQ2hCLGNBQWM7QUFBQSxVQUNkLFdBQVc7QUFBQSxVQUNYLFdBQVc7QUFBQTtBQUFBLFVBRVgsZUFBZTtBQUFBLFVBQ2YsZUFBZTtBQUFBLFVBQ2YsaUJBQWlCO0FBQUEsVUFDakIsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2Qsb0JBQW9CO0FBQUEsVUFDcEIscUJBQXFCO0FBQUEsVUFDckIsNEJBQTRCO0FBQUEsVUFDNUIsc0JBQXNCO0FBQUE7QUFBQSxVQUV0QixhQUFhO0FBQUEsVUFDYixvQkFBb0I7QUFBQSxVQUNwQixxQkFBcUI7QUFBQSxVQUNyQix1QkFBdUI7QUFBQSxVQUN2QixnQkFBZ0I7QUFBQSxVQUNoQixnQkFBZ0I7QUFBQSxVQUNoQixnQkFBZ0I7QUFBQSxVQUNoQix1QkFBdUI7QUFBQSxVQUN2QixXQUFXO0FBQUEsVUFDWCxnQkFBZ0I7QUFBQSxVQUNoQixTQUFTO0FBQUEsVUFDVCxTQUFTO0FBQUEsUUFDWDtBQUFBLE1BQ0Y7QUFBQTtBQUFBOzs7QUN4VUEsTUFBYTtBQUFiO0FBQUE7QUFBTyxNQUFNLEtBQUs7QUFBQTtBQUFBLFFBRWhCLFVBQVU7QUFBQSxVQUNSLE9BQU87QUFBQSxVQUNQLFVBQVU7QUFBQSxVQUNWLFdBQVc7QUFBQSxVQUNYLFdBQVc7QUFBQSxVQUNYLFdBQVc7QUFBQSxVQUNYLE1BQU07QUFBQSxVQUNOLFNBQVM7QUFBQSxVQUNULFNBQVM7QUFBQSxVQUNULFVBQVU7QUFBQSxVQUNWLFFBQVE7QUFBQSxVQUNSLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFNBQVM7QUFBQSxVQUNULFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLFdBQVc7QUFBQSxVQUNYLGVBQWU7QUFBQSxVQUNmLFdBQVc7QUFBQSxVQUNYLGNBQWM7QUFBQSxVQUNkLFVBQVU7QUFBQSxVQUNWLFFBQVE7QUFBQSxVQUNSLFNBQVM7QUFBQSxVQUNULElBQUk7QUFBQSxVQUNKLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxVQUNULFdBQVc7QUFBQSxVQUNYLGdCQUFnQjtBQUFBLFVBQ2hCLGNBQWM7QUFBQSxVQUNkLFdBQVc7QUFBQSxVQUNYLFdBQVc7QUFBQSxRQUNiO0FBQUE7QUFBQSxRQUdBLE9BQU87QUFBQSxVQUNMLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxVQUNULGFBQWE7QUFBQSxVQUNiLGFBQWE7QUFBQSxVQUNiLGdCQUFnQjtBQUFBLFVBQ2hCLGVBQWU7QUFBQSxVQUNmLGNBQWM7QUFBQSxVQUNkLGNBQWM7QUFBQSxVQUNkLGNBQWM7QUFBQSxVQUNkLGdCQUFnQjtBQUFBLFVBQ2hCLGVBQWU7QUFBQSxVQUNmLGFBQWE7QUFBQSxVQUNiLGNBQWM7QUFBQSxVQUNkLGFBQWE7QUFBQSxVQUNiLFlBQVk7QUFBQSxVQUNaLHFCQUFxQjtBQUFBLFVBQ3JCLGlCQUFpQjtBQUFBLFVBQ2pCLGFBQWE7QUFBQSxVQUNiLGlCQUFpQjtBQUFBLFVBQ2pCLGtCQUFrQjtBQUFBLFVBQ2xCLGVBQWU7QUFBQSxVQUNmLGtCQUFrQjtBQUFBLFVBQ2xCLGtCQUFrQjtBQUFBLFVBQ2xCLFdBQVc7QUFBQSxVQUNYLGlCQUFpQjtBQUFBLFVBQ2pCLGtCQUFrQjtBQUFBLFVBQ2xCLGVBQWU7QUFBQSxVQUNmLHFCQUFxQjtBQUFBLFVBQ3JCLFVBQVU7QUFBQSxVQUNWLFVBQVU7QUFBQSxVQUNWLFFBQVE7QUFBQSxVQUNSLFNBQVM7QUFBQSxVQUNULGVBQWU7QUFBQSxVQUNmLGFBQWE7QUFBQSxVQUNiLGFBQWE7QUFBQSxVQUNiLGVBQWU7QUFBQSxVQUNmLGdCQUFnQjtBQUFBLFVBQ2hCLGdCQUFnQjtBQUFBLFVBQ2hCLFdBQVc7QUFBQSxVQUNYLGVBQWU7QUFBQSxVQUNmLGVBQWU7QUFBQSxVQUNmLGFBQWE7QUFBQSxVQUNiLFlBQVk7QUFBQSxVQUNaLG1CQUFtQjtBQUFBLFVBQ25CLGVBQWU7QUFBQSxVQUNmLGlCQUFpQjtBQUFBLFVBQ2pCLGVBQWU7QUFBQSxVQUNmLGdCQUFnQjtBQUFBLFVBQ2hCLG1CQUFtQjtBQUFBLFVBRW5CLG1CQUFtQjtBQUFBLFVBRW5CLHFCQUFxQjtBQUFBLFVBQ3JCLG1CQUFtQjtBQUFBLFVBQ25CLGlCQUFpQjtBQUFBLFVBQ2pCLFFBQVE7QUFBQSxVQUNSLFVBQVU7QUFBQSxVQUNWLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFdBQVc7QUFBQSxVQUNYLFlBQVk7QUFBQSxVQUNaLGVBQWU7QUFBQSxVQUNmLHFCQUFxQjtBQUFBLFVBQ3JCLHlCQUF5QjtBQUFBLFVBQ3pCLGtCQUFrQjtBQUFBLFVBQ2xCLGlCQUFpQjtBQUFBLFVBQ2pCLGdCQUFnQjtBQUFBLFVBQ2hCLGlCQUFpQjtBQUFBLFVBQ2pCLGlCQUFpQjtBQUFBLFVBQ2pCLHFCQUFxQjtBQUFBLFVBQ3JCLHFCQUFxQjtBQUFBLFVBQ3JCLG9CQUFvQjtBQUFBLFVBQ3BCLGNBQWM7QUFBQSxVQUNkLFlBQVk7QUFBQSxVQUNaLGFBQWE7QUFBQSxVQUNiLGNBQWM7QUFBQSxVQUNkLGFBQWE7QUFBQSxVQUNiLGNBQWM7QUFBQTtBQUFBLFVBRWQsbUJBQW1CO0FBQUEsVUFDbkIsb0JBQW9CO0FBQUEsVUFDcEIsY0FBYztBQUFBLFVBQ2Qsb0JBQW9CO0FBQUEsVUFDcEIsa0JBQWtCO0FBQUEsVUFDbEIsZUFBZTtBQUFBLFVBQ2Ysa0JBQWtCO0FBQUEsVUFDbEIscUJBQXFCO0FBQUEsVUFDckIsZUFBZTtBQUFBLFVBQ2YsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsY0FBYztBQUFBLFVBQ2QsVUFBVTtBQUFBLFVBQ1YsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsUUFBUTtBQUFBLFVBQ1IsUUFBUTtBQUFBLFVBQ1IsUUFBUTtBQUFBLFVBQ1IsbUJBQW1CO0FBQUEsVUFDbkIsaUJBQWlCO0FBQUEsVUFDakIsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsb0JBQW9CO0FBQUEsVUFDcEIsb0JBQW9CO0FBQUEsVUFDcEIsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsV0FBVztBQUFBLFVBQ1gsZ0JBQWdCO0FBQUEsVUFDaEIsY0FBYztBQUFBLFVBQ2QsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFFBQ2I7QUFBQTtBQUFBLFFBR0EsTUFBTTtBQUFBLFVBQ0osT0FBTztBQUFBLFVBQ1AsT0FBTztBQUFBLFVBQ1AsTUFBTTtBQUFBLFVBQ04sU0FBUztBQUFBLFVBQ1QsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsT0FBTztBQUFBLFVBQ1AsZ0JBQWdCO0FBQUEsVUFDaEIsWUFBWTtBQUFBLFVBQ1osV0FBVztBQUFBLFVBQ1gsUUFBUTtBQUFBLFVBQ1IsT0FBTztBQUFBLFVBQ1AsT0FBTztBQUFBLFVBQ1AsWUFBWTtBQUFBLFVBQ1osVUFBVTtBQUFBLFVBQ1YsT0FBTztBQUFBLFVBQ1AsT0FBTztBQUFBLFVBQ1AsZUFBZTtBQUFBLFVBQ2YsZ0JBQWdCO0FBQUEsVUFDaEIsU0FBUztBQUFBLFVBQ1QsU0FBUztBQUFBLFVBQ1QsU0FBUztBQUFBLFVBQ1QsU0FBUztBQUFBLFVBQ1QsTUFBTTtBQUFBLFVBQ04sYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsYUFBYTtBQUFBLFVBQ2IscUJBQXFCO0FBQUEsVUFDckIsZUFBZTtBQUFBLFVBQ2YsZ0JBQWdCO0FBQUEsVUFDaEIsYUFBYTtBQUFBLFVBRWIsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsZ0JBQWdCO0FBQUEsVUFDaEIscUJBQXFCO0FBQUEsVUFDckIsZ0JBQWdCO0FBQUEsVUFDaEIscUJBQXFCO0FBQUEsVUFDckIsaUJBQWlCO0FBQUEsVUFDakIsYUFBYTtBQUFBLFVBQ2IsaUJBQWlCO0FBQUEsVUFDakIsaUJBQWlCO0FBQUEsVUFDakIsWUFBWTtBQUFBLFVBQ1osY0FBYztBQUFBLFVBQ2QsaUJBQWlCO0FBQUEsVUFDakIsaUJBQWlCO0FBQUEsVUFDakIsWUFBWTtBQUFBLFVBQ1osYUFBYTtBQUFBLFVBQ2Isb0JBQW9CO0FBQUEsVUFDcEIsV0FBVztBQUFBLFVBQ1gsZ0JBQWdCO0FBQUEsVUFDaEIsY0FBYztBQUFBLFVBQ2QsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFFBQ2I7QUFBQTtBQUFBLFFBR0EsUUFBUTtBQUFBLFVBQ04sS0FBSztBQUFBLFVBQ0wsSUFBSTtBQUFBLFVBQ0osSUFBSTtBQUFBLFVBQ0osUUFBUTtBQUFBLFVBQ1IsT0FBTztBQUFBLFVBQ1AsTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsT0FBTztBQUFBLFVBQ1AsVUFBVTtBQUFBLFVBQ1YsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsVUFBVTtBQUFBLFVBQ1YsU0FBUztBQUFBLFVBQ1QsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsU0FBUztBQUFBLFVBQ1QsTUFBTTtBQUFBLFVBQ04saUJBQWlCO0FBQUEsUUFDbkI7QUFBQTtBQUFBLFFBR0EsT0FBTztBQUFBLFVBQ0wsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsWUFBWTtBQUFBLFVBQ1osYUFBYTtBQUFBLFVBQ2IsaUJBQWlCO0FBQUEsVUFDakIsZ0JBQWdCO0FBQUEsVUFDaEIsV0FBVztBQUFBLFVBQ1gsWUFBWTtBQUFBLFVBQ1osaUJBQWlCO0FBQUEsVUFDakIsaUJBQWlCO0FBQUEsVUFDakIsZ0JBQWdCO0FBQUEsVUFDaEIsU0FBUztBQUFBLFVBQ1QsYUFBYTtBQUFBLFVBQ2IsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsV0FBVztBQUFBLFVBQ1gsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsZUFBZTtBQUFBLFVBQ2YsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsbUJBQW1CO0FBQUEsVUFDbkIsbUJBQW1CO0FBQUEsVUFDbkIsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsYUFBYTtBQUFBLFVBQ2IsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsa0JBQWtCO0FBQUEsVUFDbEIsaUJBQWlCO0FBQUEsVUFDakIsZ0JBQWdCO0FBQUEsVUFDaEIsb0JBQW9CO0FBQUEsVUFDcEIsaUJBQWlCO0FBQUEsVUFDakIsaUJBQWlCO0FBQUEsVUFDakIscUJBQXFCO0FBQUEsVUFDckIscUJBQXFCO0FBQUEsVUFDckIsaUJBQWlCO0FBQUEsVUFDakIsa0JBQWtCO0FBQUEsVUFDbEIsa0JBQWtCO0FBQUEsVUFDbEIsbUJBQW1CO0FBQUEsVUFDbkIsbUJBQW1CO0FBQUEsVUFDbkIsb0JBQW9CO0FBQUEsVUFDcEIsa0JBQWtCO0FBQUEsVUFDbEIsZ0JBQWdCO0FBQUEsVUFDaEIsV0FBVztBQUFBLFVBQ1gsZ0JBQWdCO0FBQUEsVUFDaEIsY0FBYztBQUFBLFVBQ2QsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBO0FBQUEsVUFFWCxlQUFlO0FBQUEsVUFDZixlQUFlO0FBQUEsVUFDZixpQkFBaUI7QUFBQSxVQUNqQixlQUFlO0FBQUEsVUFDZixhQUFhO0FBQUEsVUFDYixlQUFlO0FBQUEsVUFDZixhQUFhO0FBQUEsVUFDYixhQUFhO0FBQUEsVUFDYixjQUFjO0FBQUEsVUFDZCxvQkFBb0I7QUFBQSxVQUNwQixxQkFBcUI7QUFBQSxVQUNyQiw0QkFBNEI7QUFBQSxVQUM1QixzQkFBc0I7QUFBQTtBQUFBLFVBRXRCLGFBQWE7QUFBQSxVQUNiLG9CQUFvQjtBQUFBLFVBQ3BCLHFCQUFxQjtBQUFBLFVBQ3JCLHVCQUF1QjtBQUFBLFVBQ3ZCLGdCQUFnQjtBQUFBLFVBQ2hCLGdCQUFnQjtBQUFBLFVBQ2hCLGdCQUFnQjtBQUFBLFVBQ2hCLHVCQUF1QjtBQUFBLFVBQ3ZCLFdBQVc7QUFBQSxVQUNYLGdCQUFnQjtBQUFBLFVBQ2hCLFNBQVM7QUFBQSxVQUNULFNBQVM7QUFBQSxRQUNYO0FBQUEsTUFDRjtBQUFBO0FBQUE7OztBQ3pVQSxNQUFhO0FBQWI7QUFBQTtBQUFPLE1BQU0sU0FBUztBQUFBO0FBQUEsUUFFcEIsVUFBVTtBQUFBLFVBQ1IsT0FBTztBQUFBLFVBQ1AsVUFBVTtBQUFBLFVBQ1YsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFVBQ1gsTUFBTTtBQUFBLFVBQ04sU0FBUztBQUFBLFVBQ1QsU0FBUztBQUFBLFVBQ1QsVUFBVTtBQUFBLFVBQ1YsUUFBUTtBQUFBLFVBQ1IsT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFVBQ1QsV0FBVztBQUFBLFVBQ1gsYUFBYTtBQUFBLFVBQ2IsV0FBVztBQUFBLFVBQ1gsZUFBZTtBQUFBLFVBQ2YsV0FBVztBQUFBLFVBQ1gsY0FBYztBQUFBLFVBQ2QsVUFBVTtBQUFBLFVBQ1YsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFVBQ1QsSUFBSTtBQUFBLFVBQ0osT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsV0FBVztBQUFBLFVBQ1gsZ0JBQWdCO0FBQUEsVUFDaEIsY0FBYztBQUFBLFVBQ2QsV0FBVztBQUFBLFVBQ1gsV0FBVztBQUFBLFFBQ2I7QUFBQTtBQUFBLFFBR0EsT0FBTztBQUFBLFVBQ0wsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFVBQ1QsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsY0FBYztBQUFBLFVBQ2QsZ0JBQWdCO0FBQUEsVUFDaEIsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsYUFBYTtBQUFBLFVBQ2IsWUFBWTtBQUFBLFVBQ1oscUJBQXFCO0FBQUEsVUFDckIsaUJBQWlCO0FBQUEsVUFDakIsYUFBYTtBQUFBLFVBQ2IsaUJBQWlCO0FBQUEsVUFDakIsa0JBQWtCO0FBQUEsVUFDbEIsZUFBZTtBQUFBLFVBQ2Ysa0JBQWtCO0FBQUEsVUFDbEIsa0JBQWtCO0FBQUEsVUFDbEIsV0FBVztBQUFBLFVBQ1gsaUJBQWlCO0FBQUEsVUFDakIsa0JBQWtCO0FBQUEsVUFDbEIsZUFBZTtBQUFBLFVBQ2YscUJBQXFCO0FBQUEsVUFDckIsVUFBVTtBQUFBLFVBQ1YsVUFBVTtBQUFBLFVBQ1YsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFVBQ1QsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsYUFBYTtBQUFBLFVBQ2IsZUFBZTtBQUFBLFVBQ2YsZ0JBQWdCO0FBQUEsVUFDaEIsZ0JBQWdCO0FBQUEsVUFDaEIsV0FBVztBQUFBLFVBQ1gsZUFBZTtBQUFBLFVBQ2YsZUFBZTtBQUFBLFVBQ2YsYUFBYTtBQUFBLFVBQ2IsWUFBWTtBQUFBLFVBQ1osbUJBQW1CO0FBQUEsVUFDbkIsZUFBZTtBQUFBLFVBQ2YsaUJBQWlCO0FBQUEsVUFDakIsZUFBZTtBQUFBLFVBQ2YsZ0JBQWdCO0FBQUEsVUFDaEIsbUJBQW1CO0FBQUEsVUFFbEIsbUJBQW1CO0FBQUEsVUFFcEIscUJBQXFCO0FBQUEsVUFDckIsbUJBQW1CO0FBQUEsVUFDbkIsaUJBQWlCO0FBQUEsVUFDakIs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ZCxXQUFXO0FBQUEsVUFDWCxXQUFXO0FBQUEsUUFDYjtBQUFBO0FBQUEsUUFHQSxRQUFRO0FBQUEsVUFDTixLQUFLO0FBQUEsVUFDTCxJQUFJO0FBQUEsVUFDSixJQUFJO0FBQUEsVUFDSixRQUFRO0FBQUEsVUFDUixPQUFPO0FBQUEsVUFDUCxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUEsVUFDUCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUEsVUFDUCxRQUFRO0FBQUEsVUFDUixPQUFPO0FBQUEsVUFDUCxVQUFVO0FBQUEsVUFDVixNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUEsVUFDUCxVQUFVO0FBQUEsVUFDVixTQUFTO0FBQUEsVUFDVCxPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsVUFDVCxTQUFTO0FBQUEsVUFDVCxNQUFNO0FBQUEsVUFDTixpQkFBaUI7QUFBQSxRQUNuQjtBQUFBO0FBQUEsUUFHQSxPQUFPO0FBQUEsVUFDTCxPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUEsVUFDVCxZQUFZO0FBQUEsVUFDWixhQUFhO0FBQUEsVUFDYixpQkFBaUI7QUFBQSxVQUNqQixnQkFBZ0I7QUFBQSxVQUNoQixXQUFXO0FBQUEsVUFDWCxZQUFZO0FBQUEsVUFDWixpQkFBaUI7QUFBQSxVQUNqQixpQkFBaUI7QUFBQSxVQUNqQixnQkFBZ0I7QUFBQSxVQUNoQixTQUFTO0FBQUEsVUFDVCxhQUFhO0FBQUEsVUFDYixnQkFBZ0I7QUFBQSxVQUNoQixlQUFlO0FBQUEsVUFDZixhQUFhO0FBQUEsVUFDYixhQUFhO0FBQUEsVUFDYixXQUFXO0FBQUEsVUFDWCxlQUFlO0FBQUEsVUFDZixhQUFhO0FBQUEsVUFDYixjQUFjO0FBQUEsVUFDZCxlQUFlO0FBQUEsVUFDZixjQUFjO0FBQUEsVUFDZCxjQUFjO0FBQUEsVUFDZCxjQUFjO0FBQUEsVUFDZCxtQkFBbUI7QUFBQSxVQUNuQixtQkFBbUI7QUFBQSxVQUNuQixXQUFXO0FBQUEsVUFDWCxp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QUssRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFO0FBQUEsSUFDckQsR0FBRyxFQUFFLElBQUksR0FBRyxNQUFNLGFBQWEsS0FBSyxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEVBQUU7QUFBQSxJQUM1RCxHQUFHLEVBQUUsSUFBSSxHQUFHLE1BQU0sUUFBUSxLQUFLLEVBQUUsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksRUFBRTtBQUFBLElBQzFELEdBQUcsRUFBRSxJQUFJLEdBQUcsTUFBTSxjQUFjLEtBQUssRUFBRSxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxFQUFFO0FBQUEsSUFDaEUsR0FBRyxFQUFFLElBQUksR0FBRyxNQUFNLFNBQVMsS0FBSyxFQUFFLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLEVBQUU7QUFBQSxJQUMzRCxHQUFHLEVBQUUsSUFBSSxHQUFHLE1BQU0sWUFBWSxLQUFLLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRTtBQUFBLElBQzFELEdBQUcsRUFBRSxJQUFJLEdBQUcsTUFBTSxPQUFPLEtBQUssRUFBRSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsR0FBRyxFQUFFO0FBQUEsSUFDdkQsR0FBRyxFQUFFLElBQUksR0FBRyxNQUFNLFVBQVUsS0FBSyxFQUFFLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLEVBQUU7QUFBQSxJQUMzRCxHQUFHLEVBQUUsSUFBSSxHQUFHLE1BQU0sUUFBUSxLQUFLLEVBQUUsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEVBQUUsRUFBRTtBQUFBLElBQ3hELEdBQUcsRUFBRSxJQUFJLElBQUksTUFBTSxVQUFVLEtBQUssRUFBRSxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsR0FBRyxFQUFFO0FBQUEsSUFDNUQsSUFBSSxFQUFFLElBQUksSUFBSSxNQUFNLGdCQUFnQixLQUFLLEVBQUUsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUks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QUssR0FBRyxJQUFJLEVBQUU7QUFBQSxJQUNsRSxJQUFJLEVBQUUsSUFBSSxJQUFJLE1BQU0sYUFBYSxLQUFLLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRTtBQUFBLElBQy9ELElBQUksRUFBRSxJQUFJLElBQUksTUFBTSxRQUFRLEtBQUssRUFBRSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxFQUFFO0FBQUEsSUFDM0QsSUFBSSxFQUFFLElBQUksSUFBSSxNQUFNLFVBQVUsS0FBSyxFQUFFLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEVBQUU7QUFBQSxJQUM3RCxJQUFJLEVBQUUsSUFBSSxJQUFJLE1BQU0sZ0JBQWdCLEtBQUssRUFBRSxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxFQUFFO0FBQUEsSUFDcEUsSUFBSSxFQUFFLElBQUksSUFBSSxNQUFNLGVBQWUsS0FBSyxFQUFFLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEVBQUU7QUFBQSxJQUNsRSxJQUFJLEVBQUUsSUFBSSxJQUFJLE1BQU0sVUFBVSxLQUFLLEVBQUUsR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRTtBQUFBLElBQzdELElBQUksRUFBRSxJQUFJLElBQUksTUFBTSxnQkFBZ0IsS0FBSyxFQUFFLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLEVBQUU7QUFBQSxJQUNwRSxJQUFJLEVBQUUsSUFBSSxJQUFJLE1BQU0sYUFBYSxLQUFLLEVBQUUsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRTtBQUFBLElBQy9ELElBQUksRUFBRSxJQUFJLElBQUksTUFBTSxRQUFRLEtBQUssRUFBRSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxFQUFFO0FBQUEsSUFDM0QsSUFBSSxFQUFFLElBQUksSUFBSSxNQUFNLGNBQWMsS0FBSyxFQUFFLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLEVBQUU7QUFBQSxJQUNsRSxJQUFJLEVB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O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFB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WSxhQUFhLENBQUM7QUFDdkMsbUJBQU8sZ0JBQWdCLHFCQUFxQjtBQUFBLFVBQzlDO0FBQUEsUUFDRixRQUFRO0FBQUEsUUFBQztBQUFBLE1BQ1gsR0FBRyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQUEsSUFHbkIsU0FBUyxPQUFPO0FBQ2QsVUFBSSxxQ0FBZ0MsS0FBSztBQUN6QyxhQUFPLFlBQVksZUFBZTtBQUNsQyxVQUFJO0FBQ0YsbUJBQVcsU0FBUztBQUFBLFVBQ2xCLFlBQVk7QUFBQSxVQUNaLFVBQVUsRUFBRSxTQUFTLFFBQU8sK0JBQU8sWUFBVyxLQUFLLEVBQUU7QUFBQSxRQUN2RCxDQUFDO0FBQUEsTUFDSCxRQUFRO0FBQUEsTUFBQztBQUNULFlBQU07QUFBQSxJQUNSO0FBQUEsRUFDRjs7O0FpQ3pvQ0EsV0FBUyxFQUFFLE1BQU0sV0FBUztBQUN4QixZQUFRLE1BQU0sNkJBQTZCLEtBQUs7QUFBQSxFQUNsRCxDQUFDOyIsCiAgIm5hbWVzIjogWyJ0IiwgImRhdGEiLCAidCIsICJlcnIiLCAiY2FudmFzIiwgInNoYTI1NkhleCIsICJfZnAiLCAidCIsICJ0dXJuc3RpbGVUb2tlbiIsICJwYWludGVkIiwgIm1vZGFsU2VsZWN0b3JzIiwgIndpbmRvdyIsICJpbml0X2xvZ193aW5kb3ciLCAiaW5pdF9jb25maWciLCAiY29uZmlnX2V4cG9ydHMiLCAiaW5pdF9jb25maWciLCAicmFuayIsICJ0IiwgIl9hIiwgInB1cmNoYXNlUHJvZHVjdCIsICJlcnIiLCAiY3JlYXRlTG9nV2luZG93IiwgIl9iIiwgIl9jIiwgIl9kIiwgIl9lIiwgIl9mIiwgInNsZWVwIiwgInNsZWVwIiwgImdldFNlc3Npb24iLCAidCIsICJzbGVlcCIsICJzZXNzaW9uSW5mbyIsICJpbml0X2NvbmZpZyIsICJ0IiwgIl9hIiwgIl9iIiwgIl9jIiwgImluaXRfY29uZmlnIiwgInNsZWVwIiwgInNsZWVwIiwgImluaXRfY29uZmlnIiwgImFwcGx5UGFpbnRQYXR0ZXJuIiwgImUiLCAiaW5pdF9sb2dfd2luZG93IiwgImluaXRfY29uZmlnIiwgIkNPTE9SX01BUCIsICJzaG93VW5hdmFpbGFibGUiLCAiQ09MT1JfTUFQIiwgIm1ha2VEcmFnZ2FibGUiLCAiX2EiLCAiX2IiLCAiX2MiLCAic291cmNlQ29sb3JzIiwgImJ5SWQiLCAic2hvd0NvbmZpcm1EaWFsb2ciLCAic2hvd0d1YXJkRGlhbG9nIiwgImltYWdlU3RhdGUiLCAic2F2ZUd1YXJkSlNPTiIsICJlcnIiLCAiaW1hZ2VTdGF0ZSIsICJjb25maWciLCAiYXBwbHlQYWludFBhdHRlcm4iLCAicGl4ZWxzUGFpbnRlZCIsICJpbml0X2NvbmZpZyIsICJpbml0X2NvbmZpZyIsICJ4IiwgInkiLCAiVVJMIiwgImRldGVjdEF2YWlsYWJsZUNvbG9ycyIsICJmaW5kQ2xvc2VzdENvbG9yIiwgImRldGVjdEF2YWlsYWJsZUNvbG9ycyIsICJzbGVlcCIsICJndWFyZFN0YXRlIiwgImVyciIsICJfYSIsICJfYiIsICJ4IiwgInkiLCAidCIsICJpbml0X2NvbmZpZyIsICJwaXhlbHNQYWludGVkIiwgImVyciIsICJwaXhlbHNSZXBhaXJlZCIsICJndWFyZFN0YXRlIl0KfQo=
